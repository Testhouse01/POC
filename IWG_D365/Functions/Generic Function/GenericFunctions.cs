using OpenQA.Selenium;
using RelevantCodes.ExtentReports;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using OpenQA.Selenium.Support.UI;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using SeleniumCSharpMSTest.GeneralFunctions;

using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.RegularExpressions;
using Newtonsoft.Json.Linq;
using Newtonsoft.Json;
using OpenQA.Selenium.Interactions;
using System.Diagnostics;
using System.Drawing.Imaging;
using System.IO;
using System.Threading;
using System.Net.Mail;
using System.Net;
using System.Reflection;
using System.Globalization;
using System.Drawing;
using Nager.Date;
using Nager.Date.Extensions;
using Keys = OpenQA.Selenium.Keys;
using System.Windows.Forms;

using System.Collections;
using RazorEngine.Compilation.ImpromptuInterface.Optimization;
using NPOI.XWPF.UserModel;
using NPOI.SS.Formula.Functions;
using System.Diagnostics.Tracing;


namespace SeleniumCSharpMSTest.Functions
{
    public class GenericFunctions : Helper
    {
        Reader reader = new Reader();
        public String currentStatus;
        bool Flag = false;


        ///Devi
        /// <summary>
        /// Method to Login to CRM Application
        /// </summary>
        /// <param name="driver"></param>
        /// <param name="testInReport"></param>
        /// <param name="hitUrl"></param>
        /// <param name="testName"></param>
        /// <param name="username"></param>
        /// <param name="password"></param>
        public void Login(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string hitUrl, string username, string password)
        {
            AddLog(driver, testInReport, testName, "Info", "Test started for " + username);
            driver.Navigate().GoToUrl(hitUrl);
            AddLog(driver, testInReport, testName, testDataIteration, "Info", "Application successfully launched", "ApplicationLaunched");
            driver.Manage().Window.Maximize();
            WaitUntil(driver, Control("emailAddress", "Generic"), 30);
            Element(driver, Control("emailAddress", "Generic")).SendKeys(username);
            WaitUntil(driver, Control("passWord", "Generic"), 10);
            Element(driver, Control("passWord", "Generic")).SendKeys(password);
            WaitUntil(driver, Control("signIn", "Generic"), 10);
            Element(driver, Control("signIn", "Generic")).Click();
            ThinkTime(3);
            HandlingEmailWarning(driver, testInReport, testName, testDataIteration);



        }





        /// <summary>
        /// Method to Login to CRM Application
        /// </summary>
        /// <param name="driver"></param>
        /// <param name="testInReport"></param>
        /// <param name="hitUrl"></param>
        /// <param name="testName"></param>
        /// <param name="username"></param>
        /// <param name="password"></param>
        public void LoginVerify(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string username, string password, string user)
        {

            driver.SwitchTo().DefaultContent();
            WaitUntil(driver, Control("userInfoLink", "Generic"), 30);
            Element(driver, Control("userInfoLink", "Generic")).Click();
            WaitUntil(driver, Control("loginVerifyValue1", "Generic"), 30);
            string userLogged = Element(driver, Control("loginVerifyValue1", "Generic")).Text;
            if (userLogged == user)
            {
                ThinkTime(1);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Successfully logged into the application as " + userLogged + "as expected", "Successfully logged in");
                ThinkTime(1);
                Element(driver, Control("userInfoLink", "Generic")).Click();
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Logged in to the application as wrong user: " + userLogged + " Expected user: " + user, "Logged in as wrong user");
                Assert.IsTrue(false);
            }
        }


        public void Loginafterlogout(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string username, string password)
        {

            ThinkTime(5);
            driver.SwitchTo().DefaultContent();
            WaitUntil(driver, Control("userInfoLink", "GenericOld"), 360);
            Element(driver, Control("userInfoLink", "GenericOld")).Click();
            WaitUntil(driver, Control("signOut", "GenericOld"), 180);
            MoveToElement(driver, Control("signOut", "GenericOld"));
            ElementHighlight(driver, Control("signOut", "GenericOld"));
            ActionsClick(driver, Control("signOut", "GenericOld"));

            ThinkTime(3);

            if (Elements(driver, Control("SavePopUp", "Contacts")) > 0)
            {
                DiscardChanges(driver, testInReport, testName, testDataIteration);
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Info", "no pop-up", "no pop-up");

            }


            WaitUntil(driver, Control("UseAnotherAccount", "Generic"), 240);
            Element(driver, Control("UseAnotherAccount", "Generic")).Click();
            AddLog(driver, testInReport, testName, "Info", "Test started for " + username);
            ThinkTime(5);
            WaitUntil(driver, Control("emailAddress", "Generic"), 30);
            Element(driver, Control("emailAddress", "Generic")).SendKeys(username);
            WaitUntil(driver, Control("passWord", "Generic"), 60);
            Element(driver, Control("passWord", "Generic")).SendKeys(password);
            WaitUntil(driver, Control("signIn", "Generic"), 60);
            Element(driver, Control("signIn", "Generic")).Click();
            ThinkTime(5);

            HandlingEmailWarning(driver, testInReport, testName, testDataIteration);
            HandlingEditPopUp(driver, testInReport, testName, testDataIteration);
            ThinkTime(2);
            LoginExcep(driver, testInReport, testName, testDataIteration);

        }

        public void LoginExcep(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(5);
            if (Elements(driver, Control("DiffAccnt", "CommonObj")) > 0)
            {
                Element(driver, Control("Nextbtn", "CommonObj")).Click();
                ThinkTime(2);
                WaitUntil(driver, Control("CancelLink", "CommonObj"), 60);
                Element(driver, Control("CancelLink", "CommonObj")).Click();

            }

        }

        public void Loginafterlogout2(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string username, string password)
        {



            WaitUntil(driver, Control("UseAnotherAccount", "Generic"), 240);
            Element(driver, Control("UseAnotherAccount", "Generic")).Click();
            AddLog(driver, testInReport, testName, "Info", "Test started for " + username);
            ThinkTime(5);
            WaitUntil(driver, Control("emailAddress", "Generic"), 30);
            Element(driver, Control("emailAddress", "Generic")).SendKeys(username);
            WaitUntil(driver, Control("passWord", "Generic"), 60);
            Element(driver, Control("passWord", "Generic")).SendKeys(password);
            WaitUntil(driver, Control("signIn", "Generic"), 60);
            Element(driver, Control("signIn", "Generic")).Click();
            ThinkTime(10);

            HandlingEmailWarning(driver, testInReport, testName, testDataIteration);
            HandlingEditPopUp(driver, testInReport, testName, testDataIteration);
            ThinkTime(2);
            LoginExcep(driver, testInReport, testName, testDataIteration);

        }

        public void Loginafterlogout1(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string username, string password)
        {

            ThinkTime(5);
            driver.SwitchTo().DefaultContent();
            WaitUntil(driver, Control("userInfoLink", "GenericOld"), 180);
            Element(driver, Control("userInfoLink", "GenericOld")).Click();
            WaitUntil(driver, Control("signOut", "GenericOld"), 180);
            MoveToElement(driver, Control("signOut", "GenericOld"));
            ElementHighlight(driver, Control("signOut", "GenericOld"));
            ActionsClick(driver, Control("signOut", "GenericOld"));
            DiscardChanges(driver, testInReport, testName, testDataIteration);



            WaitUntil(driver, Control("UseAnotherAccount", "Generic"), 240);
            Element(driver, Control("UseAnotherAccount", "Generic")).Click();
            AddLog(driver, testInReport, testName, "Info", "Test started for " + username);
            ThinkTime(5);
            WaitUntil(driver, Control("emailAddress", "Generic"), 30);
            Element(driver, Control("emailAddress", "Generic")).SendKeys(username);
            WaitUntil(driver, Control("passWord", "Generic"), 60);
            Element(driver, Control("passWord", "Generic")).SendKeys(password);
            WaitUntil(driver, Control("signIn", "Generic"), 60);
            Element(driver, Control("signIn", "Generic")).Click();
            ThinkTime(3);

            HandlingEmailWarning(driver, testInReport, testName, testDataIteration);
            HandlingEditPopUp(driver, testInReport, testName, testDataIteration);
            ThinkTime(2);
            LoginExcep(driver, testInReport, testName, testDataIteration);

        }






        /// <summary>
        /// Method to navigate to an entity in CRM Application
        /// </summary>
        /// <param name="driver"></param>
        /// <param name="testInReport"></param>
        /// <param name="testName"></param>
        /// <param name="testDataIteration"></param>
        public void NavigateToEntity(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string entity)
        {
            ThinkTime(1);
            driver.SwitchTo().DefaultContent();
            WaitUntil(driver, Control("Submodule", entity, "CommonObj"), 120);
            Element(driver, Control("Submodule", entity, "CommonObj")).Click();
            ThinkTime(2);
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", entity + " is selected", entity + "selected");


        }
        /// <summary>
        /// Method to verify to Transfer to cs button visiblity
        /// </summary>
        /// <param name="driver"></param>
        /// <param name="testInReport"></param>
        /// <param name="testName"></param>
        /// <param name="testDataIteration"></param>
        public void TransfertoCSVisiblity(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string Button)
        {
            WaitUntil(driver, Control("NewTabOpportunity", "Opportunity"), 30);
            ThinkTime(2);
            if (Elements(driver, Control("TransfertoCSButton", Button, "EnterpriseSales")) == 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Transfer to CS Button is not Visible as Expected", "Visibility");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Transfer to CS Button is Visible", "Visibility");
                Assert.Fail("Transfer to CS Button is Visible");
            }
        }



        /// <summary> /// <summary>
        /// Method for selecting an active case
        /// </summary>
        /// <param name="driver"></param>
        /// <param name="testInReport"></param>
        /// <param name="testName"></param>
        /// <param name="testDataIteration"></param>
        public string SelectingActiveCase(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string selectedCaseindex)
        {
            ThinkTime(3);
            WaitUntil(driver, Control("SelectCaseNumber", selectedCaseindex, "Generic"), 180);
            MoveToElement(driver, Control("selectCase", selectedCaseindex, "Generic"));
            Element(driver, Control("selectCase", selectedCaseindex, "Generic")).Click();
            ThinkTime(1);
            String caseNumber = Element(driver, Control("SelectCaseNumber", selectedCaseindex, "Generic")).Text.ToString();
            ThinkTime(1);

            return caseNumber;
        }

        /// <summary> /// <summary>
        /// Devi
        /// Method for opening particular record
        /// </summary>
        /// <param name="driver"></param>
        /// <param name="testInReport"></param>
        /// <param name="testName"></param>
        /// <param name="testDataIteration"></param>
        public void OpenParticularRecord(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string casenumber)
        {

            WaitUntil(driver, Control("caseNumberObject", casenumber, "Generic"), 180);
            ActionsDoubleClick(driver, Control("caseNumberObject", casenumber, "Generic"));
            WaitUntil(driver, Control("caseNo", casenumber, "Generic"), 240);
            if ((Elements(driver, Control("caseNo", casenumber, "Generic"))) > 0)
            {
                HandlingEditPopUp(driver, testInReport, testName, testDataIteration);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Particular case is opened correctly", "Record Open ");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Particular case is  not opened successfully", "Record Open ");
                Assert.Fail();
            }

        }



        /// <summary>
        /// Gokul
        /// Method for opening particular record for centre User
        /// </summary>
        /// <param name="driver"></param>
        /// <param name="testInReport"></param>
        /// <param name="testName"></param>
        /// <param name="testDataIteration"></param>
        public void OpenParticularRecordCentre(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string casenumber)
        {

            WaitUntil(driver, Control("caseNumberObject", casenumber, "Generic"), 180);
            ActionsDoubleClick(driver, Control("caseNumberObject", casenumber, "Generic"));
            ThinkTime(2);
            if (((Elements(driver, Control("caseNo", casenumber, "Generic"))) > 0))
            {
                HandlingEditPopUp(driver, testInReport, testName, testDataIteration);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Particular case is opened correctly", " ");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Particular case is  not opened successfully", " ");
                Assert.Fail();
            }

        }



        /// <summary> /// <summary>
        /// Devi
        /// Method for opening particular record
        /// </summary>
        /// <param name="driver"></param>
        /// <param name="testInReport"></param>
        /// <param name="testName"></param>
        /// <param name="testDataIteration"></param>
        ///

        public void HandlingEditPopUp(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {

            try
            {
                //WaitUntil(driver, Control("EditPopUp", "Generic"), 30);
                if (Elements(driver, Control("YesPopUp", "Generic")) > 0)
                {
                    Element(driver, Control("YesPopUp", "Generic")).Click();
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Clicked Yes button ", "Pop Up handled");
                }

                else
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Pop Up element button is not visible ", "Not clicked correctly");
                    Assert.Fail("Issue on finding the Pop Up element");
                }
            }
            catch (Exception e)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Info", "No Edit Permission pop up to handle ", "");
            }

        }


        public void HandlingEmailWarning(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {

            ThinkTime(1);
            try
            {
                WaitUntil(driver, Control("valueYes", "GenericOld"), 30);
                Element(driver, Control("valueYes", "GenericOld")).Click();
                driver.SwitchTo().Frame("InlineDialog_Iframe");
                WaitUntil(driver, Control("emailWarningCloseBtn", "GenericOld"), 60);
                if (Elements(driver, Control("emailWarningCloseBtn", "GenericOld")) > 0)
                {
                    Element(driver, Control("emailWarningCloseBtn", "GenericOld")).Click();
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Email Warning window handled", "");
                    ThinkTime(1);
                }
                else
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Email Warning window handling failed", "Email warning");
                    ThinkTime(1);
                }


            }
            catch (Exception e)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Info", "No Password remember window to handle", "Email Warning");

            }



        }






        /// <summary> /// <summary>
        /// Method for selecting an active case
        /// </summary>
        /// <param name="driver"></param>
        /// <param name="testInReport"></param>
        /// <param name="testName"></param>
        /// <param name="testDataIteration"></param>
        /// <param name="headerBtn"></param>
        /// <param name="popupResponceAction"></param>
        public void HeaderBtnClickNew_without_close(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string headerBtn, string popupResponceAction)
        {
            WaitUntil(driver, Control("CancelCase_Btn", "Generic"), 35);
            Element(driver, Control("CancelCase_Btn", "Generic")).Click();
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Case reactivation popup is displayed", "Reactivation popup Pass");
            driver.SwitchTo().DefaultContent();
            WaitUntil(driver, Control("ConfirmBtn", "Generic"), 30);
            MoveToElement(driver, Control("ConfirmBtn", "Generic"));
            ActionsClick(driver, Control("ConfirmBtn", "Generic"));
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Case Cancellation message is displayed", "Case Cancellation message is displayed");

        }

        /// Method to save record at any stage in CRM Application
        /// </summary>
        /// <param name="driver"></param>
        /// <param name="testInReport"></param>
        /// <param name="testName"></param>
        /// <param name="testDataIteration"></param>
        public void saveFooter(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {

            driver.SwitchTo().DefaultContent();
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            ThinkTime(2);
            WaitUntil(driver, Control("Savefooternew", "Opportunity"), 35);
            Element(driver, Control("Savefooternew", "Opportunity")).Click();
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            ThinkTime(2);


        }

        /// <summary>
        /// Method to Logout of CRM Application
        /// </summary>
        /// <param name="driver"></param>
        /// <param name="testInReport"></param>
        /// <param name="testName"></param>
        /// <param name="testDataIteration"></param>
        public void Logout(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            driver.SwitchTo().DefaultContent();


            WaitUntil(driver, Control("userInfoLink", "GenericOld"), 180);
            Element(driver, Control("userInfoLink", "GenericOld")).Click();
            WaitUntil(driver, Control("signOut", "GenericOld"), 180);
            MoveToElement(driver, Control("signOut", "GenericOld"));
            ElementHighlight(driver, Control("signOut", "GenericOld"));
            ActionsClick(driver, Control("signOut", "GenericOld"));
            // JSClick(driver, Control("signOut", "Generic"));
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "User logged out of application", "UserLogout");
            ThinkTime(2);


        }


        /// <summary>
        /// To refresh a page
        /// </summary>
        /// <param name="driver"></param>
        public void RefreshPage(IWebDriver driver)
        {
            driver.Navigate().Refresh();
            ThinkTime(2);

        }

        /// <summary>
        /// Automatic switch between contentIFrame0 and contentIFrame1
        /// </summary>
        /// <param name="driver"></param>
        public void AutomaticFrameSwitch(IWebDriver driver)
        {
            try
            {
                driver.SwitchTo().DefaultContent();
                SwitchToFrame(driver, "contentIFrame0");
            }
            catch
            {
                driver.SwitchTo().DefaultContent();
                SwitchToFrame(driver, "contentIFrame1");
            }
        }

        /// <summary>
        /// Method to switch frame and check a particular element is present till timeout
        /// </summary>
        /// <param name="driver"></param>
        /// <param name="by"></param>
        /// <param name="timeToWait"></param>
        public void AutomaticFrameSwitch(IWebDriver driver, By by, int timeToWait)
        {
            try
            {
                driver.SwitchTo().DefaultContent();
                SwitchToFrame(driver, "contentIFrame1");
                WaitUntil(driver, by, timeToWait);
            }
            catch
            {
                driver.SwitchTo().DefaultContent();
                SwitchToFrame(driver, "contentIFrame0");
                WaitUntil(driver, by, timeToWait);

            }
        }

        /// <summary>
        /// Method to switch to a frame which is inside another frame
        /// </summary>
        /// <param name="driver"></param>
        /// <param name="frame"></param>
        public void AutomaticFrameSwitch(IWebDriver driver, string frame)
        {
            try
            {
                driver.SwitchTo().DefaultContent();
                SwitchToFrame(driver, "contentIFrame0");
                SwitchToFrame(driver, frame);

            }
            catch
            {
                try
                {
                    driver.SwitchTo().DefaultContent();
                    SwitchToFrame(driver, "contentIFrame1");
                    SwitchToFrame(driver, frame);

                }
                catch
                {
                    try
                    {
                        driver.SwitchTo().DefaultContent();
                        SwitchToFrame(driver, "contentIFrame0");
                        SwitchToFrame(driver, frame);

                    }
                    catch
                    {
                        driver.SwitchTo().DefaultContent();
                        SwitchToFrame(driver, "contentIFrame1");
                        SwitchToFrame(driver, frame);

                    }
                }
            }
        }

        /// <summary>
        /// Handle the window.
        /// Returns parent window instance.
        /// </summary>
        /// <param name="driver"></param>

        public string WindowHandling(IWebDriver driver)
        {
            ThinkTime(3);
            string parentWindowHandle = driver.CurrentWindowHandle;
            List<string> lstWindow = driver.WindowHandles.ToList();
            string lastWindowHandle = "";
            foreach (var handle in lstWindow)
            {
                if (handle != parentWindowHandle)
                {
                    driver.SwitchTo().Window(handle);
                    lastWindowHandle = handle;
                }

                ThinkTime(3);
            }
            return parentWindowHandle;

        }

        /// <summary>
        /// Method to switch back to parent Window.
        /// </summary>
        /// <param name="driver"></param>
        /// <param name="parent"></param>
        public void WindowHandling(IWebDriver driver, string parent)
        {
            ThinkTime(3);
            driver.SwitchTo().Window(parent);
        }

        /// <summary>
        /// Handle Alert - 
        /// Case sensitive - "Accept"/"Dismiss"
        /// </summary>
        /// <param name="driver"></param>
        /// <param name="acceptOrDismiss"></param>
        public void AlertHandling(IWebDriver driver, string acceptOrDismiss)
        {

            if (acceptOrDismiss == "Accept")
            {
                WaitForAlert(driver, 10);
                IAlert alert = driver.SwitchTo().Alert();
                alert.Accept();
            }
            else if (acceptOrDismiss == "Dismiss")
            {

                WaitForAlert(driver, 10);
                IAlert alert = driver.SwitchTo().Alert();
                alert.Dismiss();
            }
        }
        /// <summary>
        /// Handles the alert when navigating to other pages without saving the entity
        /// </summary>
        /// <param name="driver"></param>
        public void ChangesNotSaved(IWebDriver driver)
        {
            try
            {
                WaitForAlert(driver, 5);
                IAlert alert = driver.SwitchTo().Alert();
                if (alert.Text == "Your changes have not been saved. To stay on the page so that you can save your changes, click Cancel.")
                {
                    ThinkTime(1);
                    alert.Accept();
                }
                driver.SwitchTo().DefaultContent();

            }
            catch (Exception)
            {
                driver.SwitchTo().DefaultContent();
            }
        }

        /// <summary>
        /// Method to input text
        /// </summary>
        /// <param name="driver"></param>
        /// <param name="controlName"></param>
        /// <param name="objectSheet"></param>
        /// <param name="inputText"></param>
        public void EnterText(IWebDriver driver, string controlName, string objectSheet, string inputText)
        {
            Keywords KeyFound = reader.FindControlinList(controlName, objectSheet);
            string propertyValue = KeyFound.PropertyValue;

            try
            {
                WaitUntil(driver, By.Id(propertyValue + "_d"), 90);
                Element(driver, By.Id(propertyValue + "_d")).Click();
            }
            catch (Exception)
            {
                WaitUntil(driver, By.Id(propertyValue + "_c"), 90);
                Element(driver, By.Id(propertyValue + "_c")).Click();
            }
            Element(driver, By.Id(propertyValue + "_i")).SendKeys(inputText);
        }

        /// <summary>
        /// Method to input text
        /// </summary>
        /// <param name="driver"></param>
        /// <param name="controlName"></param>
        /// <param name="objectSheet"></param>
        /// <param name="inputText"></param>
        public void SelectOption(IWebDriver driver, string controlName, string objectSheet, string inputText)
        {
            Keywords KeyFound = reader.FindControlinList(controlName, objectSheet);
            string propertyValue = KeyFound.PropertyValue;

            try
            {
                Element(driver, By.Id(propertyValue)).Click();
            }
            catch (Exception)
            {
                Element(driver, By.Id(propertyValue + "_c")).Click();
            }
            Select(Element(driver, By.Id(propertyValue + "_i"))).SelectByText(inputText);
        }

        /// <summary>
        /// Handles to enter value to the lookup field
        /// </summary>
        /// <param name="driver"></param>
        /// <param name="objectSheet"></param>
        /// <param name="fieldLabel"></param>
        /// <param name="fieldInput"></param>
        /// <param name="fieldSearch"></param>
        /// <param name="inputValue"></param>
        public void LookUpFieldValueSelect(IWebDriver driver, string objectSheet, string fieldLabel, string fieldInput, string fieldSearch, string inputValue)
        {

            WaitUntil(driver, Control(fieldLabel, objectSheet), 30);
            Element(driver, Control(fieldLabel, objectSheet)).Click();
            ThinkTime(3);

            Element(driver, Control(fieldInput, objectSheet)).SendKeys(inputValue);
            ThinkTime(3);
            Element(driver, Control(fieldSearch, objectSheet)).Click();
            ThinkTime(3);

            Element(driver, Control("lookupOption", inputValue, "Generic")).Click();

        }

        /// <summary>
        /// Handles to navigate to the selected Module & sub modules entity
        /// </summary>
        /// <param name="driver"></param>
        /// <param name="testInReport"></param>
        /// <param name="testName"></param>
        /// <param name="testDataIteration"></param>
        /// <param name="module"></param>
        /// <param name="subModule"></param>
        public void NavigateToModules(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string module, string subModule)
        {
            try
            {

                driver.SwitchTo().DefaultContent();
                ThinkTime(8);
                WaitUntil(driver, Control("ModuleHomeDropDown", "Generic"), 60);
                Element(driver, Control("ModuleHomeDropDown", "Generic")).Click();
                ThinkTime(2);
                Element(driver, Control("selectModuleGeneric", module, "Generic")).Click();
                ThinkTime(3);
                Element(driver, Control("entitySelection", subModule, "Generic")).Click();
                ThinkTime(3);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Navigating to corresponding entity", "Working correctly");
            }

            catch (Exception e)
            {
                Assert.Fail(e.Message);
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Not navigating to corresponding entity", "Not Working correctly");

            }
        }


        /// <summary>S
        /// Search any records
        /// </summary>
        /// <param name="driver"></param>
        /// <param name="testInReport"></param>
        /// <param name="testName"></param>
        /// <param name="testDataIteration"></param>
        /// <param name="recordToBeSearched"></param>
        public void SearchRecordAndVerify(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string recordToBeSearched)
        {
            Console.WriteLine("recordtosearch" + recordToBeSearched);
            driver.SwitchTo().DefaultContent();
            AutomaticFrameSwitch(driver, Control("searchRecordBox", "Generic"), 15);
            ThinkTime(2);
            WaitUntil(driver, Control("searchRecordBox", "Generic"), 60);
            Element(driver, Control("searchRecordBox", "Generic")).Click();

            WaitUntil(driver, Control("searchRecordInput", "Generic"), 60);
            Element(driver, Control("searchRecordInput", "Generic")).SendKeys(recordToBeSearched);

            ThinkTime(1);
            WaitUntil(driver, Control("searchRecordIcon", "Generic"), 60);
            Element(driver, Control("searchRecordIcon", "Generic")).Click();

            try
            {
                WaitUntil(driver, Control("searchRecordVerify", "Generic"), 60);
                if (Element(driver, Control("searchRecordVerify", "Generic")).Displayed)
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Search result successfully displayed in CRM", "Search result successfully displayed");
                }
                else
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Record not searched properly in CRM", "Record not searched properly");
                    Assert.Fail();
                }
            }
            catch
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Unable to find element", "We can't perform record search");
                Assert.Fail();

            }

        }

        /// <summary>
        /// Method to search an record in CRM 
        /// Created Date : 02/20/2019
        /// Status : In progress
        /// </summary>
        public void RecordSearch(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string RecordName)
        {
            ThinkTime(3);
            driver.SwitchTo().DefaultContent();
            ThinkTime(2);
            Element(driver, Control("searchTab", "Generic"));
            ThinkTime(1);
            Element(driver, Control("searchInput", "Generic")).SendKeys(RecordName);
            ThinkTime(2);
            Element(driver, Control("searchIcon", "Generic")).Click();
            ThinkTime(2);
            AutomaticFrameSwitch(driver);
            ThinkTime(2);
            try
            {
                WaitUntil(driver, Control("recordSearch", RecordName, "Generic"), 15);
                ThinkTime(1);
                Element(driver, Control("recordSearch", RecordName, "Generic")).Click();
                ThinkTime(2);
            }
            catch (Exception e)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Searched record is not found", "NotFoundRecord");
                throw e;
            }

            ThinkTime(3);
            driver.SwitchTo().DefaultContent();
            AutomaticFrameSwitch(driver);
            WaitUntil(driver, Control("formTitle", "Generic"), 90);
            if (Element(driver, Control("formTitle", "Generic")).Text == RecordName)

            {
                ThinkTime(1);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Successfully navigated to searched record", "Successfully navigated to searched record");
            }
            else
            {
                ThinkTime(1);
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Navigation to searched record is failed", "Navigation failed");
                Assert.IsTrue(false);
            }
        }
        //Search for Opportunity
        public void RecordSearchOppo(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string RecordName)
        {
            ThinkTime(3);
            driver.SwitchTo().DefaultContent();
            ThinkTime(2);
            WaitUntil(driver, Control("Search_Record", "GenericOld"), 60);
            Element(driver, Control("Search_Record", "GenericOld")).SendKeys(RecordName);

        }

        //Generic function to search and land on Contacts page
        public void VerifyContacts(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string Employee)
        {
            WaitUntil(driver, Control("QuickSearch", "Generic"), 70);
            Element(driver, Control("QuickSearch", "Generic")).SendKeys(Employee);
            Element(driver, Control("QuickSearch", "Generic")).SendKeys(Keys.Enter);

            ThinkTime(4);
            Element(driver, Control("Employee", Employee, "Generic")).Click();
            WaitUntil(driver, Control("ContactPage", "Generic"), 30);
            if (Elements(driver, Control("ContactPage", "Contacts")) == 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Contact Page is not displayed", "Contact Page");
                Assert.Fail("Employee Contact Page is not displayed");
            }

            else

            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Contact Page is displayed", "Contact Page");
            }

        }

        //Generic function to search and land on Accounts page
        public void VerifyAccounts(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string Employee)
        {
            WaitUntil(driver, Control("QuickSearch", "Generic"), 70);
            Element(driver, Control("QuickSearch", "Generic")).SendKeys(Employee);
            Element(driver, Control("QuickSearch", "Generic")).SendKeys(Keys.Enter);
            ThinkTime(4);
            if (Elements(driver, Control("NoData", "Generic")) == 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Record is  Available", "Activity");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Info", "No Record Available.Please create one", "Activity");
                Assert.Fail("Record is not  available.Please create one");
            }
            Element(driver, Control("Employee", Employee, "Generic")).Click();
            WaitUntil(driver, Control("TitleCompanyInformation", Employee, "Generic"), 30);
            if (Elements(driver, Control("TitleCompanyInformation", Employee, "Generic")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Accounts Page is displayed", "Accounts Page");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Accounts Page is not displayed", "Contact Page");
                Assert.Fail("Employee Accounts Page is not displayed");
            }
            ThinkTime(3);
            WaitUntil(driver, Control("ButtonSaveAndCloseAccounts", "Opportunity"), 40);
            MoveToElement(driver, Control("ButtonSaveAndCloseAccounts", "Opportunity"));
            Element(driver, Control("ButtonSaveAndCloseAccounts", "Opportunity")).Click();
        }

        //Generic function to search and land on Accounts page
        public void VerifyWorkOrder(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string workorder)
        {
            WaitUntil(driver, Control("QuickSearch", "Generic"), 70);
            Element(driver, Control("QuickSearch", "Generic")).SendKeys(workorder);
            Element(driver, Control("QuickSearch", "Generic")).SendKeys(Keys.Enter);
            ThinkTime(4);
            if (Elements(driver, Control("NoData", "Generic")) == 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Record is  Available", "Work Order");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Info", "No Record Available.Please create one", "Work Order");
                Assert.Fail("Record is not  available.Please create one");
            }
            Element(driver, Control("Employee", workorder, "Generic")).Click();
            WaitUntil(driver, Control("TitleCompanyInformation", workorder, "Generic"), 30);
            if (Elements(driver, Control("TitleCompanyInformation", workorder, "Generic")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Work Order Page is displayed", "Work Order Page");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Accounts Page is not displayed", "Work Order Page");
                Assert.Fail("Work Order Page is not displayed");
            }
            ThinkTime(1);

            scrollDownContactCustTest(driver, testInReport, testName, testDataIteration, "400");





            Actions action;
            IWebElement ele;
            

            if (Element(driver, Control("Bookbutton", "Opportunity")).Displayed)
            {

                Element(driver, Control("Bookbutton", "Opportunity")).Click();
                ThinkTime(10);
                //if (Elements(driver, Control("Bookbutton", "Opportunity")) > 0)
                //{
                //    WaitUntil(driver, Control("Bookbutton", "Opportunity"), 360);
                //    Element(driver, Control("Bookbutton", "Opportunity")).Click();
                //    ThinkTime(2);
                //}

                string parentWindowHandle = driver.CurrentWindowHandle;
                WindowHandling(driver);
                ThinkTime(1);

                for (int i = 1; i <= 5;)
                {
                    ele = driver.FindElement(By.XPath("//div[@id='F1SDK.data.models.ResourceAvailability-" + i + "_slottype']"));////*[@id="F1SDK.data.models.ResourceAvailability-1
                    //ele = driver.FindElement(By.XPath("//td[@id='ASPxSchedulerAgentView_containerBlock_DXCntv0_" + i + "']"));
                    action = new Actions(driver);
                    action.ContextClick(ele).Build().Perform();
                    if (Element(driver, Control("TargetDate", "Opportunity")).Displayed)
                    {
                        ThinkTime(1);

                    }

                    if (Element(driver, Control("TargetDate", "Opportunity")).Displayed)
                    {
                        ThinkTime(1);
                        i += 1;
                    }
                }
                    ThinkTime(2);
                WaitUntil(driver, Control("BookSaveandclose", "Opportunity"), 360);
                Element(driver, Control("BookSaveandclose", "Opportunity")).Click();
                driver.SwitchTo().Window(parentWindowHandle);
                driver.SwitchTo().DefaultContent();

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Candidate booked successfully", "Candidate Booked");
                //ThinkTime(1);
                /*
                //  action.ClickAndHold(ele).Build().Perform();
                // IJavaScriptExecutor js = (IJavaScriptExecutor)driver;
                //js.ExecuteScript("arguments[0].click", ele);


                // mouse hover/click full details verification

                //scrollDownOpportunityEnterprise(driver, testInReport, testName, testDataIteration);

                // Verify the pop up details for the vertical slot
                ThinkTime(2);
                WaitUntil(driver, Control("SaveTour", "Opportunity"), 360);
                Element(driver, Control("SaveTour", "Opportunity")).Click();
                ThinkTime(3);


                driver.SwitchTo().Window(parentWindowHandle);
                driver.SwitchTo().DefaultContent();
                SelectanyOpportunitybutton(driver, testInReport, testName, testDataIteration, "Book Tour");
                ThinkTime(5);
                VerifyCityDiaryandCentre1(driver, testInReport, testName, testDataIteration, "AB, Calgary-CBD", "Calgary Sun Life");
                WaitUntil(driver, Control("Slotclick", "Opportunity"), 360);
                ActionsClick(driver, Control("Slotclick", "Opportunity"));
                ThinkTime(10);
                WaitUntil(driver, Control("Slotpopupcontentbody", "Opportunity"), 360);
                string value = Element(driver, Control("Slotpopupcontentbody", "Opportunity")).GetAttribute("innerText");
                // WindowHandling(driver);
                */

                ThinkTime(3);


                WaitUntil(driver, Control("Refreshbtn", "Contacts"), 70);
                Element(driver, Control("Refreshbtn", "Contacts")).Click();

                ThinkTime(2);
                Element(driver, Control("Refreshbtn", "Contacts")).Click();
                ThinkTime(2);

                scrollDownContactCustTest(driver, testInReport, testName, testDataIteration, "150");

                WaitUntil(driver, Control("Bookings", "Contacts"), 70);
                ThinkTime(2);

                if (Elements(driver, Control("Bookings", "Contacts")) == 0)
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Record is  Available", "Work Order");
                }
                

                Element(driver, Control("Bookings", "Contacts")).Click();
                ThinkTime(3);


                WaitUntil(driver, Control("DialogClose", "Opportunity"), 70);
                ThinkTime(3);
                Element(driver, Control("DialogClose", "Opportunity")).Click();



                WaitUntil(driver, Control("ButtonSaveAndCloseAccounts", "Opportunity"), 40);
                MoveToElement(driver, Control("ButtonSaveAndCloseAccounts", "Opportunity"));
                Element(driver, Control("ButtonSaveAndCloseAccounts", "Opportunity")).Click();
            }
        }

        //Generic function to search and land on Case page
        public void VerifyCase(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string Employee)
        {
            WaitUntil(driver, Control("QuickSearch", "Generic"), 70);
            Element(driver, Control("QuickSearch", "Generic")).SendKeys(Employee);
            Element(driver, Control("QuickSearch", "Generic")).SendKeys(Keys.Enter);

            ThinkTime(3);
            if (Elements(driver, Control("NoData", "Generic")) == 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Record is  Available", "Activity");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Info", "No Record Available.Please create one", "Activity");
                Assert.Fail("Record is not  available.Please create one");
            }

            Element(driver, Control("Employee", Employee, "Generic")).Click();
            WaitUntil(driver, Control("TitleCompanyInformation", Employee, "Generic"), 30);

            if (Elements(driver, Control("TitleCompanyInformation", Employee, "Generic")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Case Page is displayed", "Case Page");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Case Page is not displayed", "Case Page");
                Assert.Fail("Case Page is not displayed");
            }
            ThinkTime(3);
            WaitUntil(driver, Control("ButtonSaveAndCloseAccounts", "Opportunity"), 40);
            MoveToElement(driver, Control("ButtonSaveAndCloseAccounts", "Opportunity"));
            Element(driver, Control("ButtonSaveAndCloseAccounts", "Opportunity")).Click();
        }


        public void VerifyContact(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string contact)
        {
            WaitUntil(driver, Control("QuickSearch", "Generic"), 70);
            Element(driver, Control("QuickSearch", "Generic")).SendKeys(contact);
            Element(driver, Control("QuickSearch", "Generic")).SendKeys(Keys.Enter);
            ThinkTime(4);
            if (Elements(driver, Control("NoData", "Generic")) == 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Contact Record is  Available", "Contact");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Info", "No Record Available.Please create one", "Contact");
                Assert.Fail("Record is not  available.Please create one");
            }
            Element(driver, Control("Employee", contact, "Generic")).Click();
            WaitUntil(driver, Control("TitleCompanyInformation", contact, "Generic"), 30);
            if (Elements(driver, Control("TitleCompanyInformation", contact, "Generic")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Contact Page is displayed", "Contact Page");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Contact Page is not displayed", "Contact Page");
                Assert.Fail("Contact Page is not displayed");
            }
            ThinkTime(3);
            WaitUntil(driver, Control("ButtonSaveAndCloseAccounts", "Opportunity"), 40);
            MoveToElement(driver, Control("ButtonSaveAndCloseAccounts", "Opportunity"));
            Element(driver, Control("ButtonSaveAndCloseAccounts", "Opportunity")).Click();
        }
        //Generic function to search and land on Contacts page
        public void VerifyBookableResourcelinked(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string Employee)
        {
            ThinkTime(2);
            WaitUntil(driver, Control("ActiveBookableresourcepage", "EnterpriseSales"), 30);
            Element(driver, Control("QuickSearch", "Generic")).SendKeys(Employee);
            Element(driver, Control("QuickSearch", "Generic")).SendKeys(Keys.Enter);
            ThinkTime(4);
            Element(driver, Control("Employee", Employee, "Generic")).Click();
            SelectActiveCellContact(driver, testInReport, testName, testDataIteration);
            ThinkTime(2);
            WaitUntil(driver, Control("BookableRolechecking", Employee, "Generic"), 50);

            if (Element(driver, Control("BookableRolechecking", Employee, "Generic")).Displayed)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Bookable Resource Category Location record was created and linked to the user", "Location Record");
            }

            else

            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Bookable Resource Category Location record was not created and linked to the user", "Location Record");
                Assert.Fail("Employee Contact Page is not displayed");
            }

        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="driver"></param>
        /// <param name="testInReport"></param>
        /// <param name="testName"></param>
        /// <param name="testDataIteration"></param>
        /// <param name="email"></param>
        /// <param name="name"></param>
        public void VerifyBookableResourceHomeLocation(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string ResourceName, string Location)
        {
            Element(driver, Control("QuickSearch", "Generic")).SendKeys(ResourceName);
            Element(driver, Control("QuickSearch", "Generic")).SendKeys(Keys.Enter);

            ThinkTime(4);
            Element(driver, Control("Employee", ResourceName, "Generic")).Click();
            ThinkTime(3);
            WaitUntil(driver, Control("BookableResourcePage", "Generic"), 30);
            if (Elements(driver, Control("BookableResourcePage", "Generic")) == 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "BookableResourcePage is not displayed", "BookableResourcePage");
                Assert.Fail("BookableResourcePage is not displayed");
            }

            else

            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "BookableResource Page is displayed", "BookableResource Page");
            }
            ThinkTime(2);
            WaitUntil(driver, Control("ResourceName", ResourceName, "Generic"), 70);
            ElementHighlight(driver, Control("HomeLocation", Location, "Generic"));
            MoveToElement(driver, Control("HomeLocation", Location, "Generic"));
            if (Elements(driver, Control("HomeLocation", Location, "Generic")) > 0)


            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Home location is updated properly", "Home location Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Home location is not successful updated", "Home location Verification");
                Assert.Fail("Fail");
            }
            driver.Navigate().Back();

        }

        //update and verify employee mail details 
        public void UpdateandverifyEmployeeemaildetails(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string email, string name)
        {

            ThinkTime(3);
            HidingPureCloud(driver, testInReport, testName, testDataIteration);
            WaitUntil(driver, Control("EmailField", "Contacts"), 30);
            Element(driver, Control("EmailField", "Contacts")).SendKeys(Keys.Control + "a");
            Element(driver, Control("EmailField", "Contacts")).SendKeys(Keys.Delete);
            ThinkTime(2);
            WaitUntil(driver, Control("UserRecordField", name, "Contacts"), 70);
            ElementHighlight(driver, Control("UserRecordField", name, "Contacts"));
            MoveToElement(driver, Control("UserRecordField", name, "Contacts"));
            WaitUntil(driver, Control("CancelButton", "Contacts"), 70);
            Element(driver, Control("CancelButton", "Contacts")).Click();
            saveFooter(driver, testInReport, testName, testDataIteration);
            HandleIgnoreandSavepopup(driver, testInReport, testName, testDataIteration);
            string s = Element(driver, Control("EmployeeUserRecordfield", "Contacts")).GetAttribute("value");

            if (s != "---")
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "User Record is not removed", "User Record  Verification");
                Assert.Fail("Fail");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "User Record is removed properly", "User Record  Verification");
            }
            ThinkTime(2);
            Element(driver, Control("EmailField", "Contacts")).SendKeys(email);
            saveFooter(driver, testInReport, testName, testDataIteration);
            HandleIgnoreandSavepopup(driver, testInReport, testName, testDataIteration);
            Element(driver, Control("refreshButton", "Contacts")).Click();
            ThinkTime(3);
            Element(driver, Control("refreshButton", "Contacts")).Click();
            ThinkTime(3);
            WaitUntil(driver, Control("UserRecordField", name, "Contacts"), 70);
            //ElementHighlight(driver, Control("UserRecordField", name, "Contacts"));
            MoveToElement(driver, Control("UserRecordField", name, "Contacts"));
            if (Elements(driver, Control("UserRecordField", name, "Contacts")) > 0)

            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "UserRecord is updated properly", "UserRecord field Verification");

            }

            else

            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Failed to update the UserRecord field", "UserRecord field Verification");
                Assert.Fail("UserRecord field is not updated");
            }


        }


        /// <summary>
        /// UpdateandverifyEmployeecontactdetails
        /// </summary>
        /// <param name="driver"></param>
        /// <param name="testInReport"></param>
        /// <param name="testName"></param>
        /// <param name="testDataIteration"></param>
        /// <param name="email"></param>
        /// <param name="name"></param>
        public void UpdateandverifyEmployeecontactdetails(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string email, string name)
        {
            ThinkTime(5);
            string ContactSel = "Contact: Employee";
            string ContactSelM = "Employee";
            Element(driver, Control("SelectContact1", "CommonObj")).Click();
            ThinkTime(2);
            try
            {
                Element(driver, Control("SelectExpectedCon", ContactSel, "CommonObj")).Click();
            }
            catch (Exception e)
            {
                Element(driver, Control("SelectExpectedCon", ContactSelM, "CommonObj")).Click();
            }

            HidingPureCloudNew(driver, testInReport, testName, testDataIteration);
            ThinkTime(3);
            WaitUntil(driver, Control("EmailField", "Contacts"), 30);
            Element(driver, Control("EmailField", "Contacts")).SendKeys(Keys.Control + "a");
            Element(driver, Control("EmailField", "Contacts")).SendKeys(Keys.Delete);
            ThinkTime(2);


            //WaitUntil(driver, Control("Record1", "CommonObj"), 70);
            //ElementHighlight(driver, Control("Record1",  "CommonObj"));
            ////MoveToElement(driver, Control("Record1",  "CommonObj"));
            //ThinkTime(2);

            //ThinkTime(3);
            //WaitUntil(driver, Control("Record1", "Contacts"), 30);
            //Element(driver, Control("Record1", "Contacts")).SendKeys(Keys.Control + "a");
            //Element(driver, Control("Record1", "Contacts")).SendKeys(Keys.Delete);

            ThinkTime(3);
            WaitUntil(driver, Control("JobTitle", "CommonObj"), 70);
            Element(driver, Control("Record1", "Contacts")).SendKeys(Keys.Shift + Keys.Tab);

            ThinkTime(2);


            WaitUntil(driver, Control("CancelButton", "Contacts"), 70);
            Element(driver, Control("CancelButton", "Contacts")).Click();
            saveFooter(driver, testInReport, testName, testDataIteration);
            HandleIgnoreandSavepopup(driver, testInReport, testName, testDataIteration);
            string s = Element(driver, Control("EmployeeUserRecordfield", "Contacts")).GetAttribute("value");

            if (s != "---")
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "User Record is not removed", "User Record  Verification");
                Assert.Fail("Fail");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "User Record is removed properly", "User Record  Verification");
            }
            ThinkTime(2);
            WaitUntil(driver, Control("EmailField", "Contacts"), 30);
            Element(driver, Control("EmailField", "Contacts")).SendKeys(Keys.Control + "a");
            Element(driver, Control("EmailField", "Contacts")).SendKeys(Keys.Delete);
            Element(driver, Control("EmailField", "Contacts")).SendKeys(email);
            saveFooter(driver, testInReport, testName, testDataIteration);
            HandleIgnoreandSavepopup(driver, testInReport, testName, testDataIteration);
            Element(driver, Control("refreshButton", "Contacts")).Click();
            ThinkTime(3);
            Element(driver, Control("refreshButton", "Contacts")).Click();
            ThinkTime(3);
            WaitUntil(driver, Control("UserRecordField", name, "Contacts"), 70);
            //ElementHighlight(driver, Control("UserRecordField", name, "Contacts"));
            MoveToElement(driver, Control("UserRecordField", name, "Contacts"));
            if (Elements(driver, Control("UserRecordField", name, "Contacts")) > 0)

            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "UserRecord is updated properly", "UserRecord field Verification");

            }

            else

            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Failed to update the UserRecord field", "UserRecord field Verification");
                Assert.Fail("UserRecord field is not updated");
            }
            ThinkTime(3);
            string ContactSel1 = "Sales Customer";
            string ContactSel2 = "Contact: Sales Customer";
            Element(driver, Control("SelectContact1", "CommonObj")).Click();
            ThinkTime(2);
            try
            {
                Element(driver, Control("SelectExpectedCon", ContactSel1, "CommonObj")).Click();
            }
            catch (Exception e)
            {
                Element(driver, Control("SelectExpectedCon", ContactSel2, "CommonObj")).Click();
            }



        }


        /// <summary>
        /// RemoveandverifyRecommendedcentredetails in OPPORTUNITY
        /// </summary>
        /// <param name="driver"></param>
        /// <param name="testInReport"></param>
        /// <param name="testName"></param>
        /// <param name="testDataIteration"></param>
        /// <param name="email"></param>
        /// <param name="name"></param>
        public void RemoveRecommendedCentre(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {

            ThinkTime(3);
            string parentWindowHandle = driver.CurrentWindowHandle;
            WindowHandling(driver);
            driver.Manage().Window.Maximize();
            ThinkTime(4);
            MoveToElement(driver, Control("Reference", "Opportunity"));
            ElementHighlight(driver, Control("Reference", "Opportunity"));
            string OppId = Element(driver, Control("Reference", "Opportunity")).GetAttribute("value");
            Console.WriteLine(OppId);
            scrollDownOpportunityPage(driver, testInReport, testName, testDataIteration);
            WaitUntil(driver, Control("RecommendedCentreSelect", "Opportunity"), 30);
            ElementHighlight(driver, Control("RecommendedCentreSelect", "Opportunity"));
            MoveToElement(driver, Control("RecommendedCentreSelect", "Opportunity"));
            WaitUntil(driver, Control("CancelButton1", "Contacts"), 70);
            Element(driver, Control("CancelButton1", "Contacts")).Click();
            saveFooter(driver, testInReport, testName, testDataIteration);
            HandleIgnoreandSavepopup(driver, testInReport, testName, testDataIteration);
            ThinkTime(4);
            string s = Element(driver, Control("RecommededBusinessCentre", "Opportunity")).GetAttribute("value");

            if (s != "---")
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "RecommendedCentreSelect is not removed", "User Record  Verification");
                Assert.Fail("Fail");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "RecommendedCentreSelect is removed properly", "User Record  Verification");
            }

            WaitUntil(driver, Control("AdvancedFind", "Generic"), 30);
            Element(driver, Control("AdvancedFind", "Generic")).Click();
            ThinkTime(1);
            driver.Manage().Window.Maximize();
            WindowHandling(driver);
            ThinkTime(1);
            driver.Manage().Window.Maximize();
            ThinkTime(5);
            SwitchToFrame(driver, "contentIFrame0");
            MoveToElement(driver, Control("AdvanceFindselect", "Opportunity"));
            ThinkTime(2);
            Element(driver, Control("AdvanceFindselect", "Opportunity")).Click();
            ThinkTime(1);
            Select(Element(driver, Control("AdvancefindSelectvalue", "Opportunity"))).SelectByText("Reference");
            ThinkTime(2);
            Element(driver, Control("CaseIDText", "GenericOld")).Click();
            Element(driver, Control("CaseID", "GenericOld")).SendKeys(OppId);
            ThinkTime(2);
            driver.SwitchTo().DefaultContent();
            //SwitchToFrame(driver, "InlineDialog_Iframe");
            ThinkTime(4);
            // SwitchToFrame(driver, "viewEditor");
            ThinkTime(4);
            Element(driver, Control("EditButton", "Opportunity")).Click();
            driver.SwitchTo().DefaultContent();
            SwitchToFrame(driver, "InlineDialog_Iframe");


            // ThinkTime(4);
            //// MoveToElement(driver, Control("AddColumn", "Recommended Business Centre", "GenericOld"));
            // Element(driver, Control("AddColumn", "Recommended Business Centre", "GenericOld")).Click();
            // //MoveToElement(driver, Control("AddColumn", "zzUNUSED Recommended Business Centre", "GenericOld"));
            // Element(driver, Control("AddColumn", "zzUNUSED Recommended Business Centre", "GenericOld")).Click();
            // Element(driver, Control("OKButton", "Generic")).Click();
            // driver.SwitchTo().DefaultContent();
            // SwitchToFrame(driver, "InlineDialog_Iframe");


        }

        /// <summary>
        /// Method to Filter results with Edit Column  in Advanced Find
        /// </summary>
        /// <param name="driver"></param>
        /// <param name="testInReport"></param>
        /// <param name="testName"></param>
        /// <param name="testDataIteration"></param>
        /// <param name="headerBtn"></param>
        /// <param name="CancelCaseContainer"></param>
        public void FilterResultsWithEditColumn(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string Columnbutton, string Resultsbutton, string casenumber, string Column, String Field, string Columna)
        {

            //driver.SwitchTo().DefaultContent();
            //string parentWindowHandle = driver.CurrentWindowHandle;
            // WindowHandling(driver);
            ThinkTime(2);
            //string parentWindowHandle1 = driver.CurrentWindowHandle;
            //generic.WindowHandling(driver);
            //driver.Manage().Window.Maximize();
            ThinkTime(4);
            driver.SwitchTo().DefaultContent();
            //SwitchToFrame(driver, "InlineDialog1_Iframe");
            SwitchToFrame(driver, "InlineDialog_Iframe");
            ThinkTime(4);
            SwitchToFrame(driver, "viewEditor");
            ThinkTime(4);
            Element(driver, Control("AddColumns", "GenericOld")).Click();
            driver.SwitchTo().DefaultContent();
            SwitchToFrame(driver, "InlineDialog1_Iframe");
            ThinkTime(4);
            MoveToElement(driver, Control("SelectColumn", Column, "GenericOld"));
            Element(driver, Control("SelectColumn", Column, "GenericOld")).Click();
            MoveToElement(driver, Control("SelectColumn", Columna, "GenericOld"));
            Element(driver, Control("SelectColumn", Columna, "GenericOld")).Click();
            Element(driver, Control("OKButton", "Generic")).Click();
            driver.SwitchTo().DefaultContent();
            SwitchToFrame(driver, "InlineDialog_Iframe");
            Element(driver, Control("EditColumnsPopupOk", "GenericOld")).Click();
            driver.SwitchTo().DefaultContent();
            Element(driver, Control("advFindRibbons", Resultsbutton, "GenericOld")).Click();
            SwitchToFrame(driver, "contentIFrame0");
            SwitchToFrame(driver, "resultFrame");
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Result page is displayed", "Results Page");
            WaitUntil(driver, Control("LastColumn", "Generic"), 240);
            ElementHighlight(driver, Control("LastColumn", "Generic"));
            string lastcolumn = Element(driver, Control("LastColumn", "Generic")).Text.ToString();
            Console.WriteLine(lastcolumn);
            scrollRight(driver, testInReport, testName, testDataIteration, "ScrollAdvanceFind");
            ThinkTime(4);
            driver.SwitchTo().DefaultContent();

            if (lastcolumn != "")
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Locatin field is Cleared successfully", "locationfield validation");
                Assert.Fail();

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Location Field is cleared successfully", "Location field validation");

            }
            ThinkTime(4);
            driver.Quit();

        }


        /// <summary>
        /// Method to Filter results with Edit Column  in Advanced Find
        /// </summary>
        /// <param name="driver"></param>
        /// <param name="testInReport"></param>
        /// <param name="testName"></param>
        /// <param name="testDataIteration"></param>
        /// <param name="headerBtn"></param>
        /// <param name="CancelCaseContainer"></param>
        public void FilterResultsWithEditColumn1(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string Columnbutton, string Resultsbutton, string casenumber, string Column, String Field, string Columna)
        {

            driver.SwitchTo().DefaultContent();
            string parentWindowHandle = driver.CurrentWindowHandle;
            WindowHandling(driver);
            ThinkTime(2);
            //string parentWindowHandle1 = driver.CurrentWindowHandle;
            //generic.WindowHandling(driver);
            driver.Manage().Window.Maximize();
            ThinkTime(4);
            //driver.SwitchTo().DefaultContent();
            //SwitchToFrame(driver, "InlineDialog1_Iframe");
            // SwitchToFrame(driver, "InlineDialog_Iframe");
            ThinkTime(4);
            WaitUntil(driver, Control("SelectRecord", "GenericOld"), 60);
            ActionsDoubleClick(driver, Control("SelectRecord", "GenericOld"));
            SwitchToFrame(driver, "viewEditor");
            ThinkTime(4);
            Element(driver, Control("AddColumns", "GenericOld")).Click();
            driver.SwitchTo().DefaultContent();
            SwitchToFrame(driver, "InlineDialog1_Iframe");
            ThinkTime(4);
            MoveToElement(driver, Control("SelectColumn", Column, "GenericOld"));
            Element(driver, Control("SelectColumn", Column, "GenericOld")).Click();
            MoveToElement(driver, Control("SelectColumn", Columna, "GenericOld"));
            Element(driver, Control("SelectColumn", Columna, "GenericOld")).Click();
            Element(driver, Control("OKButton", "Generic")).Click();
            driver.SwitchTo().DefaultContent();
            SwitchToFrame(driver, "InlineDialog_Iframe");
            Element(driver, Control("EditColumnsPopupOk", "GenericOld")).Click();
            driver.SwitchTo().DefaultContent();
            Element(driver, Control("advFindRibbons", Resultsbutton, "GenericOld")).Click();
            SwitchToFrame(driver, "contentIFrame0");
            SwitchToFrame(driver, "resultFrame");
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Result page is displayed", "Results Page");
            WaitUntil(driver, Control("LastColumn", "Generic"), 240);
            ElementHighlight(driver, Control("LastColumn", "Generic"));
            string lastcolumn = Element(driver, Control("LastColumn", "Generic")).Text.ToString();
            Console.WriteLine(lastcolumn);
            scrollRight(driver, testInReport, testName, testDataIteration, "ScrollAdvanceFind");

            if (lastcolumn != "")
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Locatin field is Cleared successfully", "locationfield validation");
                Assert.Fail();

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Location Field is cleared successfully", "Location field validation");

            }

        }

        //Method to Update Rcentre in the opprned result .
        public void UpdateRcentre(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(3);
            driver.SwitchTo().DefaultContent();
            string parentWindowHandle = driver.CurrentWindowHandle;
            WindowHandling(driver);
            ThinkTime(2);
            //string parentWindowHandle1 = driver.CurrentWindowHandle;
            //generic.WindowHandling(driver);
            driver.Manage().Window.Maximize();
            ThinkTime(4);



        }


        /// <summary>
        /// Select record by searching
        /// </summary>
        /// <param name="driver"></param>
        public void selectRecord(IWebDriver driver)
        {
            driver.SwitchTo().DefaultContent();
            AutomaticFrameSwitch(driver, Control("searchRecordBox", "GenericOld"), 30);
            ThinkTime(2);
            WaitUntil(driver, Control("selectFirstRecord", "GenericOld"), 60);
            ActionsDoubleClick(driver, Control("selectFirstRecord", "GenericOld"));

            driver.SwitchTo().DefaultContent();
            try
            {
                WaitUntil(driver, Control("newItem", "GenericOld"), 60);
            }
            catch
            {

            }
            ThinkTime(3);
        }
        public void selectARecord(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            driver.SwitchTo().DefaultContent();
            SwitchToFrame(driver, "contentIFrame0");
            ThinkTime(2);
            SwitchToFrame(driver, "resultFrame");
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Record listed", "Record listed");
            WaitUntil(driver, Control("selectRecord", "GenericOld"), 60);
            ElementHighlight(driver, Control("selectRecord", "GenericOld"));
            ActionsDoubleClick(driver, Control("selectRecord", "GenericOld"));
            ThinkTime(2);
            driver.SwitchTo().DefaultContent();
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Record selected", "Record selected");

            try
            {

            }
            catch
            {

            }
            ThinkTime(3);
        }
        public void selectARecordNew(IWebDriver driver)
        {
            driver.SwitchTo().DefaultContent();
            SwitchToFrame(driver, "contentIFrame0");
            ThinkTime(2);
            SwitchToFrame(driver, "resultFrame");

            WaitUntil(driver, Control("selectRecord1", "GenericOld"), 60);
            ElementHighlight(driver, Control("selectRecord1", "GenericOld"));
            ActionsDoubleClick(driver, Control("selectRecord1", "GenericOld"));
            ThinkTime(2);
            driver.SwitchTo().DefaultContent();
            try
            {

            }
            catch
            {

            }
            ThinkTime(3);
        }
        public void LookupSearchEmail(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, String Email)
        {
            ThinkTime(4);
            SwitchToFrame(driver, "InlineDialog_Iframe");
            // driver.SwitchTo().DefaultContent();
            WaitUntil(driver, Control("SearchInput", "Generic"), 60);
            Element(driver, Control("SearchInput", "Generic")).SendKeys(Email);
            WaitUntil(driver, Control("SearchEmail", "Generic"), 60);
            Element(driver, Control("SearchEmail", "Generic")).Click();
            ThinkTime(4);
            //WaitUntil(driver, Control("selectRecord1", "GenericOld"), 60);
            //Element(driver, Control("selectRecord1", "GenericOld")).Click();
            //ThinkTime(4);
            WaitUntil(driver, Control("selectRecord1", "GenericOld"), 60);
            ElementHighlight(driver, Control("selectRecord1", "GenericOld"));
            ActionsDoubleClick(driver, Control("selectRecord1", "GenericOld"));
            //WaitUntil(driver, Control("SelectEmail", "Generic"), 60);
            //Element(driver, Control("SelectEmail", "Generic")).Click();
            ThinkTime(4);
            WaitUntil(driver, Control("LookUpAddButton", "Generic"), 60);
            Element(driver, Control("LookUpAddButton", "Generic")).Click();
        }

        public void FilterResultsWithEditColumnEmail(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, String Email)
        {
            ThinkTime(4);
            WaitUntil(driver, Control("EditColumnEmail", "GenericOld"), 60);
            Element(driver, Control("EditColumnEmail", "GenericOld")).Click();
            ThinkTime(4);
            SwitchToFrame(driver, "InlineDialog_Iframe");
            ThinkTime(4);
            SwitchToFrame(driver, "viewEditor");
            ThinkTime(3);
            WaitUntil(driver, Control("AddColumns", "GenericOld"), 60);
            Element(driver, Control("AddColumns", "GenericOld")).Click();
            ThinkTime(4);
            driver.SwitchTo().DefaultContent();
            SwitchToFrame(driver, "InlineDialog1_Iframe");
            WaitUntil(driver, Control("DueDate", "GenericOld"), 60);
            Element(driver, Control("DueDate", "GenericOld")).Click();
            WaitUntil(driver, Control("CreatedOn", "GenericOld"), 60);
            Element(driver, Control("CreatedOn", "GenericOld")).Click();
            WaitUntil(driver, Control("ModifiedOn", "GenericOld"), 60);
            Element(driver, Control("ModifiedOn", "GenericOld")).Click();
            WaitUntil(driver, Control("EmailResponse1", "GenericOld"), 60);
            Element(driver, Control("EmailResponse1", "GenericOld")).Click();
            WaitUntil(driver, Control("Status1", "GenericOld"), 60);
            Element(driver, Control("Status1", "GenericOld")).Click();
            WaitUntil(driver, Control("Object1", "GenericOld"), 60);
            Element(driver, Control("Object1", "GenericOld")).Click();
            WaitUntil(driver, Control("Queue1", "GenericOld"), 60);
            Element(driver, Control("Queue1", "GenericOld")).Click();
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Selected All values in Queue", "Selected All values");
            WaitUntil(driver, Control("RecordType1", "GenericOld"), 60);
            Element(driver, Control("RecordType1", "GenericOld")).SendKeys("Object(Email)");
            for (int p = 0; p <= 7; p++)
            {
                Element(driver, Control("RecordType1", "GenericOld")).SendKeys(Keys.ArrowDown);
            }
            ThinkTime(3);
            WaitUntil(driver, Control("DueDate", "GenericOld"), 60);
            Element(driver, Control("DueDate", "GenericOld")).Click();
            WaitUntil(driver, Control("CreatedOn", "GenericOld"), 60);
            Element(driver, Control("CreatedOn", "GenericOld")).Click();
            WaitUntil(driver, Control("Okbutton", "GenericOld"), 60);
            Element(driver, Control("Okbutton", "GenericOld")).Click();

            ThinkTime(4);
            driver.SwitchTo().DefaultContent();
            SwitchToFrame(driver, "InlineDialog_Iframe");
            //SwitchToFrame(driver, "viewEditor");
            ThinkTime(4);
            WaitUntil(driver, Control("EditColumnOK", "GenericOld"), 60);
            Element(driver, Control("EditColumnOK", "GenericOld")).Click();
            driver.SwitchTo().DefaultContent();
            ThinkTime(4);
            WaitUntil(driver, Control("Results1", "GenericOld"), 60);
            Element(driver, Control("Results1", "GenericOld")).Click();
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Results Fetched", "Results Fetched");
        }
        public void VeriEmailCol(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(4);
            // driver.SwitchTo().DefaultContent();

            SwitchToFrame(driver, "contentIFrame0");
            ThinkTime(2);
            SwitchToFrame(driver, "resultFrame");
            ThinkTime(4);
            //WaitUntil(driver, Control("ResTitle", "GenericOld"), 60);
            String TitleVal = Element(driver, Control("ResTitle", "GenericOld")).GetAttribute("innerText").ToString();
            String ObjectVal = Element(driver, Control("ResObject1", "GenericOld")).GetAttribute("innerText").ToString();
            String EnteredQueueVal = Element(driver, Control("ResEnteredQueue", "GenericOld")).GetAttribute("innerText").ToString();
            String CreatedOnVal = Element(driver, Control("ResCreatedOn", "GenericOld")).GetAttribute("innerText").ToString();
            String TypeVal = Element(driver, Control("ResType", "GenericOld")).GetAttribute("innerText").ToString();
            String StatusVal = Element(driver, Control("ResStatus1", "GenericOld")).GetAttribute("innerText").ToString();
            String DueDateVal = Element(driver, Control("ResDueDate", "GenericOld")).GetAttribute("innerText").ToString();
            String EmailResponseVal = Element(driver, Control("ResEmailResponse1", "GenericOld")).GetAttribute("innerText").ToString();


            if (EnteredQueueVal.Equals(CreatedOnVal))
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Entered Queue Value = Created on", "Entered Queue Value = Created on");
            }
            else
            {
                Assert.Fail("Entered Queue Value not equal  to Created on");
            }

            if (TypeVal.Equals("Email"))
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Type is Email", "Type is Email");
            }
            else
            {
                Assert.Fail("Type is not Email");
            }

            if (StatusVal.Equals("Active"))
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Status is Active", "Status is Active");
            }
            else
            {
                Assert.Fail("Status is not Active");
            }

            if (DueDateVal != (CreatedOnVal))
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Due Date is same as Created on", "Due Date is same as Created on");
            }
            else
            {
                Assert.Fail("Due date is different than Created date");
            }

            if (EmailResponseVal != (CreatedOnVal))
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "EmailResponse is 1 hr more than created on", "EmailResponse is 1 hr more than created on");
            }
            else
            {
                Assert.Fail("EmailResponse is same as created on");
            }
            try
            {

                if (TitleVal.Equals(ObjectVal))
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Title Value = Object Value", "Title Value = Object Value");
                }

            }
            catch
            {

            }

            ThinkTime(10);
            driver.Quit();
        }

        /// <summary>
        /// Select the first row in search results
        /// </summary>
        /// <param name="driver"></param>
        /// <param name="record"></param>
        public void selectSearchedRecord(IWebDriver driver, string record)
        {
            ThinkTime(2);
            WaitUntil(driver, Control("selectFirstRecord", "Generic"), 60);
            MoveToElement(driver, Control("selectFirstRecord", "Generic"));
            ActionsDoubleClick(driver, Control("selectFirstRecord", "Generic"));

            driver.SwitchTo().DefaultContent();
            WaitUntil(driver, Control("newItem", "Generic"), 120);
            ThinkTime(25);
        }

        /// <summary>
        /// Method to create a new record
        /// </summary>
        /// <param name="driver"></param>
        /// <param name="testInReport"></param>
        /// <param name="testName"></param>
        /// <param name="testDataIteration"></param>
        public void createNewEntry(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            try
            {
                Console.WriteLine("create");
                driver.SwitchTo().DefaultContent();
                ThinkTime(8);
                WaitUntil(driver, Control("newItem", "Generic"), 60);
                Element(driver, Control("newItem", "Generic")).Click();
                //JSClick(driver, Control("newItem", "Generic"));
                ThinkTime(1);
                WaitUntil(driver, Control("SaveItem", "Generic"), 35);

                if (Elements(driver, Control("SaveItem", "Generic")) > 0)
                {
                    ThinkTime(1);
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "New Entry page is displayed", "New Entry page displayed");
                }
                else
                {
                    ThinkTime(1);
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "New Entry page is not displayed", "New Entry page not displayed");
                    Assert.Fail();
                }


            }
            catch (Exception e)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Unable to create new Record" + e, "Unable to create new Record");
                throw;
            }

        }




        /// <summary>
        /// Method to assign a user
        /// </summary>
        /// <param name="driver"></param>
        /// <param name="testInReport"></param>
        /// <param name="testName"></param>
        /// <param name="testDataIteration"></param>
        /// <param name="assignTo"></param>
        public string AssignToNewUser(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string assignTo)
        {
            WaitUntil(driver, Control("AssigntoNewUser", "Generic"), 30);
            Element(driver, Control("AssigntoNewUser", "Generic")).Click();
            Element(driver, Control("AssigntoNewUser", "Generic")).SendKeys(assignTo);
            ThinkTime(3);
            WaitUntil(driver, Control("SelectNewAssignedUser", assignTo, "Generic"), 30);
            Element(driver, Control("SelectNewAssignedUser", assignTo, "Generic")).Click();

            return assignTo;

        }

        public void VerifyAssignedUser(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string assignTo)
        {
            ThinkTime(2);
            Element(driver, Control("HeaderFieldExpand", "Generic")).Click();
            WaitUntil(driver, Control("AssignedUser", assignTo, "Generic"), 180);
            if (!(Element(driver, Control("AssignedUser", assignTo, "Generic")).Displayed))
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Incorrect Status Reason", "AssignedUser");
                Assert.Fail("Case is not assigned properly");

            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Case is assigned properly", "AssignedUser");
            }
        }

        public void VerifyStatusReasonheader(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string status)
        {
            ThinkTime(2);
            WaitUntil(driver, Control("Moreheader", "36.1_Dashboard"), 30);
            Element(driver, Control("Moreheader", "36.1_Dashboard")).Click();

            if (Elements(driver, Control("Statusreasonhome", status, "36.1_Dashboard")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Verify Status Reason", "Status Reason");

            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Staus reason failed", "Status Reason");
            }
        }
        public void VerifyActivitiesSecondaryopp(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {
            ThinkTime(3);
            ThinkTime(5);
            if (Elements(driver, Control("Activitymorebutton", "Opportunity")) > 0)
            {

                ActionsClick(driver, Control("Activitymorebutton", "Opportunity"));
                Element(driver, Control("RefreshActivity", "Opportunity")).Click();
                ThinkTime(2);

                ThinkTime(5);
            }
            else
            {
                Element(driver, Control("RefreshActivity", "Opportunity")).Click();
                ThinkTime(2);
                Element(driver, Control("RefreshActivity", "Opportunity")).Click();
                ThinkTime(2);
                Element(driver, Control("RefreshActivity", "Opportunity")).Click();
                ThinkTime(2);
                Element(driver, Control("RefreshActivity", "Opportunity")).Click();
                ThinkTime(2);
                Element(driver, Control("RefreshActivity", "Opportunity")).Click();
                ThinkTime(2);
            }
            if (Elements(driver, Control("VerifyDay3", "Opportunity")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Day 3 Emial activity available", "");
                Assert.Fail("Activity verification failed");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Activity verification passed", "");

            }

            if (Elements(driver, Control("VerifyDay5", "Opportunity")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Day 5 Emial activity available", "");
                Assert.Fail("Activity verification failed");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Activity verification passed", "");

            }

            if (Elements(driver, Control("VerifyHotLeaad", "Opportunity")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Hot Lead Dailer activity passed", "");
                Assert.Fail("Activity verification failed");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Activity verification passed", "");

            }

            if (Elements(driver, Control("VerifyDay0", "Opportunity")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Day 0 Emial activity available", "");
                Assert.Fail("Activity verification failed");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Activity verification passed", "");

            }

            if (Elements(driver, Control("VerifyDay1", "Opportunity")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Day 1 Emial activity available", "");
                Assert.Fail("Activity verification failed");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Activity verification passed", "");

            }
        }
        //Method to verify primary activities under primary opp.
        public void VerifyActivitiesPrimaryOpp(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {
            ThinkTime(3);
            ThinkTime(5);
            if (Elements(driver, Control("Activitymorebutton", "Opportunity")) > 0)
            {

                ActionsClick(driver, Control("Activitymorebutton", "Opportunity"));
                Element(driver, Control("RefreshActivity", "Opportunity")).Click();
                ThinkTime(2);

                ThinkTime(5);
            }
            else
            {
                Element(driver, Control("RefreshActivity", "Opportunity")).Click();
                ThinkTime(2);
                Element(driver, Control("RefreshActivity", "Opportunity")).Click();
                ThinkTime(2);
                Element(driver, Control("RefreshActivity", "Opportunity")).Click();
                ThinkTime(2);
                Element(driver, Control("RefreshActivity", "Opportunity")).Click();
                ThinkTime(2);
                Element(driver, Control("RefreshActivity", "Opportunity")).Click();
                ThinkTime(2);
            }
            if (Elements(driver, Control("VerifyDay3", "Opportunity")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Day 3 Emial activity verified", "");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Activity verification failed", "");
                Assert.Fail("Activity verification failed");
            }

            if (Elements(driver, Control("VerifyDay5", "Opportunity")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Day 5 Emial activity verified", "");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Activity verification failed", "");
                Assert.Fail("Activity verification failed");
            }

            if (Elements(driver, Control("VerifyHotLeaad", "Opportunity")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Hot Lead Dailer activity verified", "");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Activity verification failed", "");
                Assert.Fail("Activity verification failed");
            }

            if (Elements(driver, Control("VerifyDay0", "Opportunity")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Day 0 Emial activity verified", "");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Activity verification failed", "");
                Assert.Fail("Activity verification failed");
            }

            if (Elements(driver, Control("VerifyDay1", "Opportunity")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Day 1 Emial activity verified", "");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Activity verification failed", "");
                Assert.Fail("Activity verification failed");
            }
        }

        //Method to open Secondary opp from primary opp.
        //SecOppSelect
        public void OpensecondayOpp(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {
            ThinkTime(3);

            MoveToElement(driver, Control("SecOppSelect", "Opportunity"));
            Element(driver, Control("SecOppSelect", "Opportunity")).Click();


        }
        public void VerifyOpportunitystatus(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string status)
        {
            ThinkTime(5);

            if (Elements(driver, Control("Opportunitystatusfooter", status, "36.1_Dashboard")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Verify Status ", "Status verifictaion");

            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Staus  failed", "Status Reason failed");
            }
        }



        public void VerifyOpportunitystatuswon(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string status)
        {

            //IAlert simpleAlert = driver.SwitchTo().Alert();

            //string text = driver.SwitchTo().Alert().Text;


            //simpleAlert.Accept();

            //string AlertText = "Cannot close opportunity as won because payment received = No";

            //if (AlertText == text)
            //{
            //    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Alert Verified", "Alert Verification");
            //}
            //else
            //{
            //    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Alert Verification failed", "Alert Verification");


            //}


            ThinkTime(2);
            WaitUntil(driver, Control("Opportunitystatusfooter", status, "36.1_Dashboard"), 30);
            if (Elements(driver, Control("Opportunitystatusfooter", status, "36.1_Dashboard")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Status is Open", "Status is Open ");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Status is not Open", "Status is not Open ");
                Assert.Fail("Status of opportunity is Won");
            }

            ThinkTime(2);
            //MoveToElement(driver, Control("Opportunitystatusfooter", status, "36.1_Dashboard"));
            WaitUntil(driver, Control("Qualifyok", "Opportunity"), 30);
            Element(driver, Control("Qualifyok", "Opportunity")).Click();
            //Element(driver, Control("Opportunitystatusfooter", status, "36.1_Dashboard")).Click();
            //ThinkTime(3);



        }

        public void VerifyStatusReasonPaymentYesCloseAsLost(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {

            ThinkTime(3);

            WaitUntil(driver, Control("CloseAsLostStatusReasonSelect", "Opportunity"), 30);
            MoveToElement(driver, Control("CloseAsLostStatusReasonSelect", "Opportunity"));
            Element(driver, Control("CloseAsLostStatusReasonSelect", "Opportunity")).Click();

            Element(driver, Control("SelectStatusReasonCloseAsLost", "Opportunity")).Click();

            ThinkTime(3);

            WaitUntil(driver, Control("Quickcreatesave", "Opportunity"), 30);
            MoveToElement(driver, Control("Quickcreatesave", "Opportunity"));
            Element(driver, Control("Quickcreatesave", "Opportunity")).Click();
            ThinkTime(5);
            ElementHighlight(driver, Control("VerifyOppStatusLost", "Opportunity"));
            MoveToElement(driver, Control("VerifyOppStatusLost", "Opportunity"));
            string s = Element(driver, Control("VerifyOppStatusLost", "Opportunity")).GetAttribute("ariaLabel");
            Console.WriteLine(s);
            if (s == "Lost")
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Close As Lost Status Verified", " Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Close As Lost Status Verification failed", "Oppertunity Status Verifiaction");
                Assert.Fail("Opportunity Status Verification Failed");
            }

            //if (Elements(driver, Control("VerifyOppStatusLost", "Opportunity")) > 0)
            //{
            //    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Close As Lost Status Verified", "Opportunity Status Verification");
            //}
            //else
            //{
            //    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Close As Lost Status Verification failed", "Oppertunity Status Verifiaction");
            //    Assert.Fail("Opportunity Status Verification Failed");

            //}


        }


        public void VerifyOpportunitystatustrue(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(5);
            WaitUntil(driver, Control("Referenceclick", "Opportunity"), 30);
            MoveToElement(driver, Control("Referenceclick", "Opportunity"));
            Element(driver, Control("Referenceclick", "Opportunity")).Click();
            ThinkTime(5);
            WaitUntil(driver, Control("OppWon", "Opportunity"), 30);
            MoveToElement(driver, Control("OppWon", "Opportunity"));
            string s = Element(driver, Control("OppWon", "Opportunity")).GetAttribute("ariaLabel");
            Console.WriteLine(s);
            if (s == "Won")
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Verify opportunity is automatically set as Won", "Verification successfull");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Verify opportunity is not automatically set as Won", "Verify opportunity is not automatically set as Won");
                Assert.Fail("Opp is not closed as Won");
            }
            //if ((Elements(driver, Control("OppWon", "Opportunity")) > 0))

            //{
            //    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Verify opportunity is automatically set as Won", "Verify opportunity is automatically set as Won");
            //}

            //else
            //{
            //    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Verify opportunity is not automatically set as Won", "Verify opportunity is not automatically set as Won");
            //    Assert.Fail("Opp closed as Won");
            //}

        }


        public void VerifyAssignedUserAndTeam(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string assignToUser, string assignToTeam)
        {
            ThinkTime(5);
            Element(driver, Control("HeaderFieldExpand", "Generic")).Click();
            ThinkTime(2);

            if ((Elements(driver, Control("AssignedUser", assignToUser, "Generic")) > 0)
                && (Elements(driver, Control("AssignedUser", assignToTeam, "Generic")) > 0))
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Case is assigned properly with respective User and Team", "AssignedTeamAndUser");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Incorrect Status Reason", "AssignedTeam");
                Assert.Fail("Case is not assigned properly");
            }
        }

        /// <summary>
        /// Method to search, verify & open a record in case list section
        /// </summary>
        /// <param name="driver"></param>
        /// <param name="testInReport"></param>
        /// <param name="testName"></param>
        /// <param name="testDataIteration"></param>
        /// <param name="CaseNumber"></param>
        /// <param name="nextAction"></param>
        public void SearchAndVerify_CaseRecord(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string CaseNumber, string nextAction)
        {
            //try
            //{
            driver.SwitchTo().DefaultContent();
            ThinkTime(3);
            SwitchToFrame(driver, "contentIFrame0");
            ThinkTime(2);
            Element(driver, Control("ListSearch", "CaseList")).Click();
            Element(driver, Control("ListSearch", "CaseList")).SendKeys(CaseNumber);
            ThinkTime(2);
            Element(driver, Control("Search_Btn", "CaseList")).Click();
            if (Elements(driver, Control("Search_Btn", "CaseList")) > 0)
            {
                ThinkTime(2);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "search Result is displayed as expected ", "Search Record");
            }
            else
            {
                ThinkTime(2);
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "search Result is not displayed", "Search Record");
                Assert.Fail("Search result is not displayed");

            }
            WaitUntil(driver, Control("SearchResult", "CaseList"), 30);
            Element(driver, Control("SearchResult", "CaseList")).Click();
            ThinkTime(3);

            if (nextAction == "Form")
            {
                ActionsDoubleClick(driver, Control("selectFirstRecord1", CaseNumber, "Generic"));
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Correct search record is displayed as expected ", "Search Record: " + CaseNumber);
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Incorrect search record is displayed ", "Search Record: " + CaseNumber);
                Assert.Fail("Incorrect search record is displayed");
            }


            //driver.SwitchTo().DefaultContent();
            //ThinkTime(1);
            //Element(driver, Control("ListHeaderBtn","Edit", "CaseList")).Click();

            //}
            //catch (Exception e)
            //{
            //    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Unexpected error and unable to search Case :\n " + e, "Unexpected error and unable to assign Case ");
            //    throw;
            //}

        }

        public void RecordListHeaderBtnClick(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string Headerbtn)
        {
            //try
            //{
            driver.SwitchTo().DefaultContent();

            ThinkTime(5);

            Element(driver, Control("ListHeaderBtn", Headerbtn, "CaseList")).Click();

            //}
            //catch (Exception e)
            //{
            //    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Unexpected error and unable to search Case :\n " + e, "Unexpected error and unable to assign Case ");
            //    throw;
            //}

        }
        public void SearchRecordDoublClick(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string Headerbtn)
        {

            ThinkTime(2);
            Element(driver, Control("ListHeaderBtn", Headerbtn, "CaseList")).Click();
        }

        /// <summary>
        /// Method to click header buttons in CRM Application Case Record
        /// </summary>
        /// <param name="driver"></param>
        /// <param name="testInReport"></param>
        /// <param name="testName"></param>
        /// <param name="testDataIteration"></param>
        /// <param name="headerBtn"></param>
        /// <param name="CancelCaseContainer"></param>
        public void headerBtnClick(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string headerBtn, string popupResponceAction, string alert)
        {

            driver.SwitchTo().DefaultContent();
            WaitUntil(driver, Control("headerBtnClick", headerBtn, "Generic"), 30);
            MoveToElement(driver, Control("headerBtnClick", headerBtn, "Generic"));
            Element(driver, Control("headerBtnClick", headerBtn, "Generic")).Click();

            WaitUntil(driver, Control("CancelCaseContainer", "Generic"), 30);
            if (Elements(driver, Control("CancelCaseContainer", "Generic")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Case reactivation popup is displayed", "Reactivation popup Pass");
                if (popupResponceAction == "Accept")
                {
                    WaitUntil(driver, Control("confirmBtn", "Generic"), 30);
                    Element(driver, Control("confirmBtn", "Generic")).Click();
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Confirm button is clicking correctly", "popup accept verification Pass");
                    ThinkTime(2);
                    switch (alert)
                    {
                        case "alerboxVisible":
                            if (Elements(driver, Control("closeButton", "Generic")) > 0)
                            {
                                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Message box appeared", "Pop-up displayed");
                                MoveToElement(driver, Control("modalContainer", "Generic"));
                                JSClick(driver, Control("closeButton", "Generic"));
                                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Message box handling works properly", "Pop-up closed");
                            }
                            else
                            {
                                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Message box handling is not working properly", "Verification Failed");
                                Assert.Fail();
                                ThinkTime(1);
                            }
                            break;
                        default:
                            ThinkTime(1);
                            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "No Message box is populated", "MessageBox");
                            break;
                    }
                }
                else
                {
                    WaitUntil(driver, Control("cancelBtn", "Generic"), 30);
                    ElementHighlight(driver, Control("cancelBtn", "Generic"));
                    Element(driver, Control("cancelBtn", "Generic")).Click();
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Cancel button is clicking correctly", " dismissal verification Pass");

                    ThinkTime(2);
                }


            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Case reactivation popup is not displayed", "Reactivation popup Fail");
            }
        }


        //
        /// <summary>
        /// To update the resolve case
        /// </summary>
        /// <param name="driver"></param>
        public void HeaderButtonwithoutConfirmation(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string headerBtn)
        {

            driver.SwitchTo().DefaultContent();
            ThinkTime(5);
            WaitUntil(driver, Control("HeaderButtonClick", headerBtn, "Opportunity"), 30);
            MoveToElement(driver, Control("HeaderButtonClick", headerBtn, "Opportunity"));
            Element(driver, Control("HeaderButtonClick", headerBtn, "Opportunity")).Click();
            ThinkTime(4);
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "header button is clicked", "");
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
        }


        //
        /// <summary>
        /// To Click on the Button in the Rippon
        /// </summary>
        /// <param name="driver"></param>
        public void HeaderButtonwithoutConfirmation1(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string headerBtn)
        {

            driver.SwitchTo().DefaultContent();
            WaitUntil(driver, Control("headerBtnClick", headerBtn, "Generic"), 30);
            MoveToElement(driver, Control("headerBtnClick", headerBtn, "Generic"));
            Element(driver, Control("headerBtnClick", headerBtn, "Generic")).Click();
            ThinkTime(4);
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", headerBtn + " button is clicked", "");
        }

        //
        /// <summary>
        /// To check Resolved case can be editable
        /// </summary>
        /// <param name="driver"></param>
        public void VerifyCaseIsEditable(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string text)
        {

            driver.SwitchTo().DefaultContent();
            ThinkTime(2);
            WaitUntil(driver, Control("Summary", "Generic"), 60);
            MoveToElement(driver, Control("Summary", "Generic"));
            Element(driver, Control("Summary", "Generic")).Click();


            WaitUntil(driver, Control("InitialDescription", "Generic"), 60);
            MoveToElement(driver, Control("InitialDescription", "Generic"));
            ThinkTime(2);
            Element(driver, Control("InitialDescription", "Generic")).Click();
            ThinkTime(3);
            Element(driver, Control("InitialDescription", "Generic")).SendKeys(Keys.Control + "a");
            Element(driver, Control("InitialDescription", "Generic")).SendKeys(Keys.Delete);
            Element(driver, Control("InitialDescription", "Generic")).SendKeys(text);
            WaitForElementEnabled(driver, Control("InitialDescription", "Generic"));
            saveFooter(driver, testInReport, testName, testDataIteration);
            ThinkTime(2);
            String EditedText = Element(driver, Control("InitialDescription", "Generic")).Text.ToString();

            if (EditedText == text)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "The case is editable", "Case is Editable");
            }
            else
            {
                Assert.Fail();
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "The text is not saved correctly", " Non-Editable");
            }

        }





        /// <summary>
        /// To fetch the current status of selected test case from cases listing page
        /// </summary>
        /// <param name="driver"></param>
        public string verifyCurrentStatusFromDashboard(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            scrollMiddle(driver, testInReport, testName, testDataIteration, "Scroll");
            WaitUntil(driver, Control("statusReasonCaseList", "Generic"), 40);
            MoveToElement(driver, Control("statusReasonCaseList", "Generic"));
            string currentStatus = Element(driver, Control("statusReasonCaseList", "Generic")).Text.ToString();
            scrollLeft(driver, testInReport, testName, testDataIteration, "Scroll");
            ThinkTime(2);
            return currentStatus;

        }


        /// <summary>
        /// To fetch the current status of selected test case from cases listing page
        /// </summary>
        /// <param name="driver"></param>
        public void StatusComparison(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string type, string previousStatus, string updatedStatus)
        {
            switch (type)
            {
                case "Different":
                    {
                        if (previousStatus != updatedStatus)
                        {
                            ThinkTime(2);
                            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "The status is changed correctly", "CancelCase Verification succeded");
                        }
                        else


                        {
                            AddLog(driver, testInReport, testName, testDataIteration, "Fail", "The status is not changed correctly", "StatusVerification Failed");
                            Assert.Fail();
                        }
                    }
                    break;
                case "alike":
                    {
                        if (previousStatus == updatedStatus)
                        {
                            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "The status is not changed", "Verification succeded");
                        }
                        else
                        {
                            AddLog(driver, testInReport, testName, testDataIteration, "Fail", "The status is changed : Verification Failed", " ");
                            Assert.Fail();
                        }
                    }
                    break;
                default:
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Unidentified operation on pop-up", "Unexpected error");
                    break;
            }
        }



        //Anila
        // <summary>
        /// To update the resolution details        
        ///<param name="driver"></param>
        public void UpdateResolutionDetails(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string status, string code, string Reason)
        {


            driver.SwitchTo().DefaultContent();
            ThinkTime(5);

            Select(Element(driver, Control("ResolutionStatus", "Generic"))).SelectByText(status);
            Select(Element(driver, Control("ResolutionCode", "Generic"))).SelectByText(code);
            Element(driver, Control("ResolveCase?", "Generic")).Click();


            switch (status)
            {
                case "Complete":
                case "No Action Required":
                    {

                        saveFooter(driver, testInReport, testName, testDataIteration);

                        ThinkTime(3);
                        ActionsClick(driver, Control("ResolutionDetails", "Generic"));
                        WaitUntil(driver, Control("ResolutionStatusDisabled", "Generic"), 30);
                        if (Select(Element(driver, Control("ResolutionStatusDisabled", status, "Generic"))).SelectedOption.Text != status && Select(Element(driver, Control("ResolutionCodeDisabled", code, "Generic"))).SelectedOption.Text != code)
                        {

                            AddLog(driver, testInReport, testName, testDataIteration, "Fail", "The Resolution details are incorrect", "ResolutionDetails");
                            // Assert.Fail("Incorrect Resolution Details");
                        }

                        else
                        {

                            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "The Resolution details are correct", "ResolutionDetails");
                        }

                    }
                    break;

                case "Rejected":
                    {

                        WaitUntil(driver, Control("RejectionReason", "Generic"), 80);
                        Element(driver, Control("RejectionReason", "Generic")).SendKeys(Reason);
                        saveFooter(driver, testInReport, testName, testDataIteration);
                        ThinkTime(2);
                        Element(driver, Control("ResolutionDetails", "Generic")).Click();
                        ThinkTime(2);
                        if (Select(Element(driver, Control("ResolutionStatusDisabled", status, "Generic"))).SelectedOption.Text != status && Select(Element(driver, Control("ResolutionCodeDisabled", code, "Generic"))).SelectedOption.Text != code)
                        {
                            AddLog(driver, testInReport, testName, testDataIteration, "Fail", "The Resolution details are incorrect", "ResolutionDetails");
                            // Assert.Fail("Incorrect Resolution Details");
                        }

                        else
                        {
                            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "The Resolution details are correct", "ResolutionDetails");
                        }
                    }
                    break;

                default:
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Unexpected resolution status", "ResolutionDetails");
                    break;

            }

        }



        //Verify current status reason 
        public void VerifyStatusReason(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string Reason)
        {

            ThinkTime(4);
            if (Elements(driver, Control("StatusReason", "GenericOld")) == 0)
            {
                Element(driver, Control("HeaderFieldExpand", "GenericOld")).Click();
                WaitUntil(driver, Control("StatusReason", "GenericOld"), 180);
            }
            if (Element(driver, Control("StatusReason", "GenericOld")).Text != Reason)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Incorrect Status Reason", "StatusReason");
                Assert.Fail("Incorrect Status Reason");

            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Correct Status Reason", "StatusReason");
            }
        }


        //Method to create opportunity from opp form based on Contact,Centre,No Of People.
        public void CreateOpportunityFormCondition(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration
                         , string Time, string ContactBool, string AccountBool, string NOPBool, string CountryBool, string LocationBool,
                          string RProductBool, string RBussinessCentreBool, string ChannelBool, string MajorSourceBool, string MinorSourceBool)
        {


            string ContactInput = "TestContactTopic" + Time;
            string Language = "UK English";
            string AccountInput = "TestAccountTopic" + Time;
            string NOPInput = "7";
            string LocationInput = "TestLocation";
            string CountryInput = "United Kingdom";
            string RProductInput = "Day Office";
            string RBusinessCentreInput = "Alberta, Calgary - Crowfoot Centre";
            string ChannelInput = "CAM";
            string MajorSourceInput = "Corporate Client";
            string MinorSourceInput = "Corporate Marketing Activity";
            string Emial = "TestNewConEmial" + "@Mymail.com";


            ScriptErrorExcep(driver, testInReport, testDataIteration, testName);
            ClickonNewButton(driver, testInReport, testName, testDataIteration, "New");
            DiscardChanges(driver, testInReport, testName, testDataIteration);



            ThinkTime(5);

            //Number of People Input

            if (NOPBool == "true")
            {
               
                // Number of people
                WaitUntil(driver, Control("Numberofpeople", "Opportunity"), 60);
                ActionsClick(driver, Control("Numberofpeople", "Opportunity"));
                Element(driver, Control("Numberofpeople", "Opportunity")).SendKeys(NOPInput);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "NOP Input", "NOP Input");
                ScriptErrorExcep(driver, testInReport, testName, testDataIteration);

                //WaitUntil(driver, Control("TopicNOPInput", "Opportunity"), 180);
                //Element(driver, Control("TopicNOPInput", "Opportunity")).Click();
                //Element(driver, Control("TopicNOPInput", "Opportunity")).SendKeys(NOPInput);

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Info", "Number Of People Field is empty", "Field Status Verification");
            }



            //Company Account Input

            if (AccountBool == "true")
            {
                // scrollDownOpportunityEnterpriseCust(driver, testInReport, testName, testDataIteration, "50");
                //Create new account.
                //scrollDownOpportunityEnterprise(driver, testInReport, testName, testDataIteration);
                WaitUntil(driver, Control("NewAccountInput", "Opportunity"), 60);
                Element(driver, Control("NewAccountInput", "Opportunity")).Click();
                ThinkTime(2);
                WaitUntil(driver, Control("NewAccountButton", "Opportunity"), 30);
                Element(driver, Control("NewAccountButton", "Opportunity")).Click();

                ThinkTime(2);
                WaitUntil(driver, Control("NewCompanyNameInput", "Opportunity"), 30);
                Element(driver, Control("NewCompanyNameInput", "Opportunity")).Click();
                Element(driver, Control("NewCompanyNameInput", "Opportunity")).SendKeys(AccountInput);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Account Input", "Account Input");
                WaitUntil(driver, Control("NewContactSaveButton", "Opportunity"), 30);
                Element(driver, Control("NewContactSaveButton", "Opportunity")).Click();

                ThinkTime(2);
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Info", "Account Field is empty", "Field Status Verification");
            }




            //Recommended Product
            scrollDownOpportunityEnterpriseCust(driver, testInReport, testName, testDataIteration, "350");


            if (RProductBool == "true")
            {
                WaitUntil(driver, Control("TopicRProductInput", "Opportunity"), 180);
                Element(driver, Control("TopicRProductInput", "Opportunity")).Click();
                Element(driver, Control("TopicRProductInput", "Opportunity")).SendKeys(RProductInput);

                WaitUntil(driver, Control("Languagedropdown", "EnterpriseSales"), 100);
                Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Product Input", "Product Input");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Info", "Recommented Product Field is empty", "Field Status Verification");
            }





            //Location Input

            if (LocationBool == "true")
            {
                WaitUntil(driver, Control("TopicLocationInput", "Opportunity"), 180);
                Element(driver, Control("TopicLocationInput", "Opportunity")).Click();
                Element(driver, Control("TopicLocationInput", "Opportunity")).SendKeys(LocationInput);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Location Input", "Location Input");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Info", "Location Field is empty", "Field Status Verification");
            }

            //Country Input

            if (CountryBool == "true")
            {
                WaitUntil(driver, Control("TopicCountryInput", "Opportunity"), 180);
                Element(driver, Control("TopicCountryInput", "Opportunity")).Click();
                Element(driver, Control("TopicCountryInput", "Opportunity")).SendKeys(CountryInput);


                WaitUntil(driver, Control("Languagedropdown", "EnterpriseSales"), 100);
                Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Country Input", "Country Input");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Info", "Country Field is empty", "Field Status Verification");
            }



            //Recommended Bussiness Centre

            if (RBussinessCentreBool == "true")
            {


                WaitUntil(driver, Control("RecomentedBussinessCentreInputButton", "Opportunity"), 30);
                Element(driver, Control("RecomentedBussinessCentreInputButton", "Opportunity")).Click();
                Element(driver, Control("RecomentedBussinessCentreInputButton", "Opportunity")).SendKeys(Keys.Control + "a");
                Element(driver, Control("RecomentedBussinessCentreInputButton", "Opportunity")).SendKeys(Keys.Delete);
                Element(driver, Control("RecomentedBussinessCentreInputButton", "Opportunity")).SendKeys(RBusinessCentreInput);
                WaitUntil(driver, Control("Languagedropdown", "EnterpriseSales"), 100);
                Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Business Centre Input", "Business Centre Input");
                //WaitUntil(driver, Control("TopicRBusinessCentreInput", "Opportunity"), 180);
                //Element(driver, Control("TopicRBusinessCentreInput", "Opportunity")).Click();
                //Element(driver, Control("TopicRBusinessCentreInput", "Opportunity")).SendKeys(RBusinessCentreInput);

                //ThinkTime(4);

                //Element(driver, Control("DropDownResultSelect", "Opportunity")).Click();

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Info", "Recommented Bussiness Centre Field is empty", "Field Status Verification");
            }

            scrollDownOpportunityEnterpriseCust(driver, testInReport, testName, testDataIteration, "1500");



            //Major Source

            if (MajorSourceBool == "true")
            {
                scrollDownOpportunityEnterpriseCust(driver, testInReport, testName, testDataIteration, "200");
                WaitUntil(driver, Control("ToicMajorSourceInput", "Opportunity"), 180);
                Element(driver, Control("ToicMajorSourceInput", "Opportunity")).Click();
                Element(driver, Control("ToicMajorSourceInput", "Opportunity")).SendKeys(MajorSourceInput);

                WaitUntil(driver, Control("DropDownResultSelect", "Opportunity"), 50);
                Element(driver, Control("DropDownResultSelect", "Opportunity")).Click();
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Major Source Input", "Major Source Input");
                ////New Major Source
                //WaitUntil(driver, Control("NewMajorSourceInput", "Opportunity"), 360);
                //MoveToElement(driver, Control("NewMajorSourceInput", "Opportunity"));
                //Element(driver, Control("NewMajorSourceInput", "Opportunity")).Click();
                //ThinkTime(2);
                //Element(driver, Control("NewMajorSourceInput", "Opportunity")).SendKeys(Keys.Control + "a");
                //Element(driver, Control("NewMajorSourceInput", "Opportunity")).SendKeys(Keys.Delete);
                //Element(driver, Control("NewMajorSourceInput", "Opportunity")).SendKeys(MajorSourceInput);
                //ThinkTime(2);
                //WaitUntil(driver, Control("NewMajorSourceSelect", "Opportunity"), 360);
                //MoveToElement(driver, Control("NewMajorSourceSelect", "Opportunity"));
                //Element(driver, Control("NewMajorSourceSelect", "Opportunity")).Click();


            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Info", "Major Source Field is empty", "Field Status Verification");
            }
            scrollDownOpportunityEnterpriseCust(driver, testInReport, testName, testDataIteration, "100");
            //Minor Source

            if (MinorSourceBool == "true")
            {

                WaitUntil(driver, Control("MinorSourceInput", "Opportunity"), 180);
                Element(driver, Control("MinorSourceInput", "Opportunity")).Click();
                Element(driver, Control("MinorSourceInput", "Opportunity")).SendKeys(MinorSourceInput);


                WaitUntil(driver, Control("NewMinorSourceSelect", "Opportunity"), 60);
                Element(driver, Control("NewMinorSourceSelect", "Opportunity")).Click();
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Minor Source Input", "Minor Source Input");
                //ThinkTime(2);
                //WaitUntil(driver, Control("NewMinorSourceInput", "Opportunity"), 360);
                //MoveToElement(driver, Control("NewMinorSourceInput", "Opportunity"));
                //Element(driver, Control("NewMinorSourceInput", "Opportunity")).Click();
                //ThinkTime(2);
                //Element(driver, Control("NewMinorSourceInput", "Opportunity")).SendKeys(Keys.Control + "a");
                //Element(driver, Control("NewMinorSourceInput", "Opportunity")).SendKeys(Keys.Delete);
                //Element(driver, Control("NewMinorSourceInput", "Opportunity")).SendKeys(MinorSourceInput);
                //ThinkTime(2);
                //WaitUntil(driver, Control("NewMinorSourceSelect", "Opportunity"), 360);
                //MoveToElement(driver, Control("NewMinorSourceSelect", "Opportunity"));
                //Element(driver, Control("NewMinorSourceSelect", "Opportunity")).Click();
                //ThinkTime(3);

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Info", "Minor Source Field is empty", "Field Status Verification");
            }
            scrollDownOpportunityEnterpriseCust(driver, testInReport, testName, testDataIteration, "-200");
            //Channel

            if (ChannelBool == "true")
            {

                WaitUntil(driver, Control("Channel", "Opportunity"), 360);
                MoveToElement(driver, Control("Channel", "Opportunity"));
                Element(driver, Control("Channel", "Opportunity")).SendKeys(Keys.Control + "a");
                Element(driver, Control("Channel", "Opportunity")).SendKeys(Keys.Delete);
                Element(driver, Control("Channel", "Opportunity")).SendKeys(ChannelInput);
                WaitUntil(driver, Control("NewMinorSourceSelect", "Opportunity"), 30);
                MoveToElement(driver, Control("NewMinorSourceSelect", "Opportunity"));
                Element(driver, Control("NewMinorSourceSelect", "Opportunity")).Click();
                //scrollDownOpportunityEnterprise(driver, testInReport, testName, testDataIteration);
                ThinkTime(2);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Channel Input", "Channel Input");
                //WaitUntil(driver, Control("TopicChannelInput", "Opportunity"), 180);
                //MoveToElement(driver, Control("TopicChannelInput", "Opportunity"));

                //Element(driver, Control("TopicChannelInput", "Opportunity")).Click();
                //Element(driver, Control("TopicChannelInput", "Opportunity")).SendKeys(ChannelInput);

                //ThinkTime(4);

                // Element(driver, Control("DropDownResultSelect", "Opportunity")).Click();

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Info", "Channel Field is empty", "Field Status Verification");
            }

            //Input Source Site(For Comm Req verification)

            WaitUntil(driver, Control("TopicSourceSiteInput", "Opportunity"), 180);
            MoveToElement(driver, Control("TopicSourceSiteInput", "Opportunity"));

            Element(driver, Control("TopicSourceSiteInput", "Opportunity")).Click();
            Element(driver, Control("TopicSourceSiteInput", "Opportunity")).SendKeys("//@regustest.com");






            scrollDownOpportunityEnterpriseCust(driver, testInReport, testName, testDataIteration, "-1500");

            //Contact Input
            if (ContactBool == "true")
            {

                WaitUntil(driver, Control("TopicContactInput", "Opportunity"), 180);
                Element(driver, Control("TopicContactInput", "Opportunity")).Click();

                Element(driver, Control("NewContactButtonClick", "Opportunity")).Click();

                ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
  
                WaitUntil(driver, Control("NewContactLname", "Opportunity"), 30);
                MoveToElement(driver, Control("NewContactLname", "Opportunity"));
                Element(driver, Control("NewContactLname", "Opportunity")).Click();
                Element(driver, Control("NewContactLname", "Opportunity")).SendKeys(ContactInput);

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Contact Input", "Contact Input");


                WaitUntil(driver, Control("NewLanguageInput", "Opportunity"), 60);
                MoveToElement(driver, Control("NewLanguageInput", "Opportunity"));
                Element(driver, Control("NewLanguageInput", "Opportunity")).Click();
                Element(driver, Control("NewLanguageInput", "Opportunity")).SendKeys(Keys.Control + "a");
                Element(driver, Control("NewLanguageInput", "Opportunity")).SendKeys(Keys.Delete);
                Element(driver, Control("NewLanguageInput", "Opportunity")).Clear();

                ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
                WaitUntil(driver, Control("NewLanguageInput", "Opportunity"), 30);
                MoveToElement(driver, Control("NewLanguageInput", "Opportunity"));
                Element(driver, Control("NewLanguageInput", "Opportunity")).Click();
                Element(driver, Control("NewLanguageInput", "Opportunity")).SendKeys(Keys.Control + "a");
                Element(driver, Control("NewLanguageInput", "Opportunity")).SendKeys(Keys.Delete);
                Element(driver, Control("NewLanguageInput", "Opportunity")).SendKeys("UK english");
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Language Input", "Language Input");
                WaitUntil(driver, Control("ITSalesCustomer", "Opportunity"), 30);
                MoveToElement(driver, Control("ITSalesCustomer", "Opportunity"));
                WaitUntil(driver, Control("ITSalesCustomer", "Opportunity"), 60);
                Element(driver, Control("ITSalesCustomer", "Opportunity")).Click();
                ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
                WaitUntil(driver, Control("Contactemailfield", "36.1_Dashboard"), 30);
                Element(driver, Control("Contactemailfield", "36.1_Dashboard")).SendKeys(Emial);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Email Input", "Email Input");

                WaitUntil(driver, Control("TopicConBusinessPhoneInput", "Opportunity"), 180);
                Element(driver, Control("TopicConBusinessPhoneInput", "Opportunity")).Click();
                Element(driver, Control("TopicConBusinessPhoneInput", "Opportunity")).SendKeys("+919875487596");
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Mobile Number Input", "Mobile Number Input");
                WaitUntil(driver, Control("Quickcreatesave", "Opportunity"), 30);
                MoveToElement(driver, Control("Quickcreatesave", "Opportunity"));
                Element(driver, Control("Quickcreatesave", "Opportunity")).Click();
 

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Info", "Contact Field is empty", "Field Status Verification");
            }
            saveFooter(driver, testInReport, testName, testDataIteration);
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
        }


        //Method to create new lead for Opp topic field verification.
        public void CreateLeadFormCondition(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration
                         , string Time, string ContactBool, string AccountBool, string NOPBool, string CountryBool, string LocationBool,
                          string RProductBool, string RBussinessCentreBool, string ChannelBool, string MajorSourceBool, string MinorSourceBool
                           , string LnameBool, string EmailBool)
        {
            ThinkTime(7);

            string ContactInput = "TestContactTopic" + Time;
            string Language = "UK English";
            string AccountInput = "TestAccountTopic" + Time;
            string NOPInput = "7";
            string LocationInput = "TestLocation";
            string CountryInput = "United Kingdom";
            string RProductInput = "Day Office";
            string RBusinessCentreInput = "Alberta, Calgary - Crowfoot Centre";
            string ChannelInput = "Centre";
            string MajorSourceInput = "Existing Customer";
            string MinorSourceInput = "Acquisition";
            string Lname = "TestContactTopic" + Time;
            string Emial = "TestTopic@gmail.com";
            ThinkTime(10);
            //ScriptErrorExcepleadpage(driver, testInReport, testName, testDataIteration);
            //ThinkTime(3);
            ////HandleScriptError(driver, testInReport, testName, testDataIteration);
            ////ThinkTime(3);
            ////HandleScriptError(driver, testInReport, testName, testDataIteration);
            ////ThinkTime(3);
            //HeaderButtonwithoutConfirmation(driver, testInReport, testName, testDataIteration, "New");
            //ThinkTime(5);
            //Lname
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            if (LnameBool == "true")
            {
                ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
                ThinkTime(7);
                WaitUntil(driver, Control("LeadTopicLname", "Opportunity"), 180);
                Element(driver, Control("LeadTopicLname", "Opportunity")).Click();
                ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
                Element(driver, Control("LeadTopicLname", "Opportunity")).SendKeys(Lname);

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Info", "Lname Field is empty", "Field Status Verification");
            }

            //Email

            if (EmailBool == "true")
            {
                ThinkTime(2);
                WaitUntil(driver, Control("LeadTopicEmail", "Opportunity"), 180);
                Element(driver, Control("LeadTopicEmail", "Opportunity")).Click();
                Element(driver, Control("LeadTopicEmail", "Opportunity")).SendKeys(Emial);

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Info", "Email Field is empty", "Field Status Verification");
            }
            ThinkTime(2);
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            //Product

            if (RProductBool == "true")
            {
                ThinkTime(2);
                WaitUntil(driver, Control("LeadTopicProduct", "Opportunity"), 60);
                Element(driver, Control("LeadTopicProduct", "Opportunity")).Click();
                Element(driver, Control("LeadTopicProduct", "Opportunity")).SendKeys(RProductInput);
                ThinkTime(2);
                WaitUntil(driver, Control("DropDownResultSelect", "Opportunity"), 20);
                Element(driver, Control("DropDownResultSelect", "Opportunity")).Click();

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Info", "Product Field is empty", "Field Status Verification");
            }

            //Number Of People

            if (NOPBool == "true")
            {
                ThinkTime(2);
                WaitUntil(driver, Control("LeadTopicNOP", "Opportunity"), 180);
                Element(driver, Control("LeadTopicNOP", "Opportunity")).Click();
                Element(driver, Control("LeadTopicNOP", "Opportunity")).SendKeys(NOPInput);

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Info", "Number Of People Field is empty", "Field Status Verification");
            }


            //scrollDownOpportunity(driver, testInReport, testName, testDataIteration);


            //Contact Input
            if (ContactBool == "true")
            {

                WaitUntil(driver, Control("TopicContactInput", "Opportunity"), 180);
                Element(driver, Control("TopicContactInput", "Opportunity")).Click();

                Element(driver, Control("NewContactButtonClick", "Opportunity")).Click();

                ThinkTime(4);

                ThinkTime(2);
                ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
                ThinkTime(2);
                WaitUntil(driver, Control("NewContactLname", "Opportunity"), 30);
                MoveToElement(driver, Control("NewContactLname", "Opportunity"));
                Element(driver, Control("NewContactLname", "Opportunity")).Click();
                Element(driver, Control("NewContactLname", "Opportunity")).SendKeys(ContactInput);
                ThinkTime(2);



                WaitUntil(driver, Control("NewLanguageInput", "Opportunity"), 60);
                MoveToElement(driver, Control("NewLanguageInput", "Opportunity"));
                Element(driver, Control("NewLanguageInput", "Opportunity")).Click();
                Element(driver, Control("NewLanguageInput", "Opportunity")).SendKeys(Keys.Control + "a");
                Element(driver, Control("NewLanguageInput", "Opportunity")).SendKeys(Keys.Delete);
                Element(driver, Control("NewLanguageInput", "Opportunity")).Clear();

                ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
                WaitUntil(driver, Control("NewLanguageInput", "Opportunity"), 30);
                MoveToElement(driver, Control("NewLanguageInput", "Opportunity"));
                Element(driver, Control("NewLanguageInput", "Opportunity")).Click();
                Element(driver, Control("NewLanguageInput", "Opportunity")).SendKeys(Keys.Control + "a");
                Element(driver, Control("NewLanguageInput", "Opportunity")).SendKeys(Keys.Delete);
                Element(driver, Control("NewLanguageInput", "Opportunity")).SendKeys("UK english");
                ThinkTime(2);
                WaitUntil(driver, Control("ITSalesCustomer", "Opportunity"), 30);
                MoveToElement(driver, Control("ITSalesCustomer", "Opportunity"));
                ThinkTime(5);
                Element(driver, Control("ITSalesCustomer", "Opportunity")).Click();
                ThinkTime(2);


                //ThinkTime(2);
                //WaitUntil(driver, Control("TopicContactInput", "Opportunity"), 60);
                //Element(driver, Control("TopicContactInput", "Opportunity")).Click();
                //ThinkTime(2);
                //WaitUntil(driver, Control("NewContactButtonClick", "Opportunity"), 60);
                //Element(driver, Control("NewContactButtonClick", "Opportunity")).Click();

                //ThinkTime(4);

                //WaitUntil(driver, Control("ContactLnameInput", "Opportunity"), 180);
                //Element(driver, Control("ContactLnameInput", "Opportunity")).Click();
                //Element(driver, Control("ContactLnameInput", "Opportunity")).SendKeys(ContactInput);

                //WaitUntil(driver, Control("ContactLanguageInput", "Opportunity"), 180);
                //Element(driver, Control("ContactLanguageInput", "Opportunity")).Click();
                //Element(driver, Control("ContactLanguageInput", "Opportunity")).SendKeys(Language);

                //ThinkTime(4);

                //Element(driver, Control("DropDownResultSelect", "Opportunity")).Click();

                WaitUntil(driver, Control("ContactSaveButton", "Opportunity"), 180);
                Element(driver, Control("ContactSaveButton", "Opportunity")).Click();
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Info", "Contact Field is empty", "Field Status Verification");
            }
            //scrollDownOpportunity(driver, testInReport, testName, testDataIteration);
            scrollDownOpportunity(driver, testInReport, testName, testDataIteration);
            //Source
            //scrollDownOpportunity(driver, testInReport, testName, testDataIteration);

            if (ChannelBool == "true")
            {
                try
                {
                    ThinkTime(2);
                    WaitUntil(driver, Control("LeadSourceInput", "Opportunity"), 60);
                    Element(driver, Control("LeadSourceInput", "Opportunity")).Click();
                    Element(driver, Control("LeadSourceInput", "Opportunity")).SendKeys(Keys.Control + "a");
                    Element(driver, Control("LeadSourceInput", "Opportunity")).SendKeys(Keys.Delete);
                    Element(driver, Control("LeadSourceInput", "Opportunity")).SendKeys(ChannelInput);

                    ThinkTime(4);
                    WaitUntil(driver, Control("NewMinorSourceSelect", "Opportunity"), 60);
                    Element(driver, Control("NewMinorSourceSelect", "Opportunity")).Click();
                }
                catch (Exception E)
                {
                    scrollDownOpportunity(driver, testInReport, testName, testDataIteration);
                    ThinkTime(2);
                    WaitUntil(driver, Control("LeadSourceInput", "Opportunity"), 60);
                    Element(driver, Control("LeadSourceInput", "Opportunity")).Click();
                    Element(driver, Control("LeadSourceInput", "Opportunity")).SendKeys(ChannelInput);

                    ThinkTime(4);
                    WaitUntil(driver, Control("NewMinorSourceSelect", "Opportunity"), 60);
                    Element(driver, Control("NewMinorSourceSelect", "Opportunity")).Click();
                }
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Info", "Channel Field is empty", "Field Status Verification");
            }
            //scrollDownOpportunity(driver, testInReport, testName, testDataIteration);
            //scrollDownOpportunity(driver, testInReport, testName, testDataIteration);

            //Company Account Input

            if (AccountBool == "true")
            {
                ThinkTime(2);
                WaitUntil(driver, Control("TopicAccountInput", "Opportunity"), 180);
                Element(driver, Control("TopicAccountInput", "Opportunity")).Click();

                Element(driver, Control("NewAccountButtonClick", "Opportunity")).Click();
                ThinkTime(2);
                WaitUntil(driver, Control("AccountNameInput", "Opportunity"), 180);
                Element(driver, Control("AccountNameInput", "Opportunity")).Click();
                Element(driver, Control("AccountNameInput", "Opportunity")).SendKeys(AccountInput);

                WaitUntil(driver, Control("ContactSaveButton", "Opportunity"), 180);
                Element(driver, Control("ContactSaveButton", "Opportunity")).Click();
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Info", "Account Field is empty", "Field Status Verification");
            }




            //scrollDownOpportunity(driver, testInReport, testName, testDataIteration);


            //Major Source

            if (MajorSourceBool == "true")
            {

                scrollDownOpportunity(driver, testInReport, testName, testDataIteration);
                ////scrollDownOpportunity(driver, testInReport, testName, testDataIteration);
                ThinkTime(2);
                WaitUntil(driver, Control("ToicMajorSourceInput", "Opportunity"), 180);
                Element(driver, Control("ToicMajorSourceInput", "Opportunity")).Click();
                Element(driver, Control("ToicMajorSourceInput", "Opportunity")).SendKeys(MajorSourceInput);

                ThinkTime(3);
                WaitUntil(driver, Control("NewMinorSourceSelect", "Opportunity"), 60);
                Element(driver, Control("NewMinorSourceSelect", "Opportunity")).Click();
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Info", "Major Source Field is empty", "Field Status Verification");
            }

            //Minor Source

            if (MinorSourceBool == "true")
            {
                ThinkTime(2);
                WaitUntil(driver, Control("ToicMinorSourceInput", "Opportunity"), 180);
                Element(driver, Control("ToicMinorSourceInput", "Opportunity")).Click();
                Element(driver, Control("ToicMinorSourceInput", "Opportunity")).SendKeys(MinorSourceInput);

                ThinkTime(4);
                ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
                Element(driver, Control("DropDownResultSelect", "Opportunity")).Click();
                ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Info", "Minor Source Field is empty", "Field Status Verification");
            }

            scrollDownOpportunity(driver, testInReport, testName, testDataIteration);
            //scrollDownOpportunity(driver, testInReport, testName, testDataIteration);
            //scrollDownOpportunity(driver, testInReport, testName, testDataIteration);
            scrollDownOpportunityEnterpriseCust(driver, testInReport, testName, testDataIteration, "150");
            if (CountryBool == "true")
            {
                ThinkTime(2);
                WaitUntil(driver, Control("CountryInput", "Opportunity"), 180);
                Element(driver, Control("CountryInput", "Opportunity")).Click();
                Element(driver, Control("CountryInput", "Opportunity")).SendKeys(CountryInput);

                ThinkTime(4);

                Element(driver, Control("DropDownResultSelect", "Opportunity")).Click();

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Info", "Country Field is empty", "Field Status Verification");
            }
            //Location Input

            if (LocationBool == "true")
            {
                ThinkTime(2);
                WaitUntil(driver, Control("TopicLocationInput", "Opportunity"), 180);
                Element(driver, Control("TopicLocationInput", "Opportunity")).Click();
                Element(driver, Control("TopicLocationInput", "Opportunity")).SendKeys(LocationInput);
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Info", "Location Field is empty", "Field Status Verification");
            }

            //Recommended Bussiness Centre
            scrollDownOpportunity(driver, testInReport, testName, testDataIteration);
            if (RBussinessCentreBool == "true")
            {
                ThinkTime(2);
                WaitUntil(driver, Control("TopicRBusinessCentreInput", "Opportunity"), 60);
                Element(driver, Control("TopicRBusinessCentreInput", "Opportunity")).Click();
                Element(driver, Control("TopicRBusinessCentreInput", "Opportunity")).SendKeys(RBusinessCentreInput);

                ThinkTime(2);
                WaitUntil(driver, Control("NewMinorSourceSelect", "Opportunity"), 60);
                Element(driver, Control("NewMinorSourceSelect", "Opportunity")).Click();

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Info", "Recommented Bussiness Centre Field is empty", "Field Status Verification");
            }


            saveFooter(driver, testInReport, testName, testDataIteration);



        }



        //Verify Oppertunity Topic Based on Criteria

        public void verifyopptopiconecondition(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration
                                            , string Time, string NOPBool,
                          string RProductBool, string RBussinessCentreBool)
        {

            LoopforRefreshUntilResult(driver, testInReport, testName, testDataIteration);
            string ContactInput = "TestContactTopic" + Time;
            string AccountInput = "TestAccountTopic" + Time;
            string NOPInput = "7" + " People";

            string RProductInput = "Day Office";
            string RBusinessCentreInput = "Alberta, Calgary - Crowfoot Centre";

            string GetTopic;
            ThinkTime(4);

            //string[] Topic = new string[2];

            if (RBussinessCentreBool == "true")
            {
                string Topiccentre;
                Topiccentre = RBusinessCentreInput;



                GetTopic = Element(driver, Control("GetOppTopic", "Opportunity")).GetAttribute("innerText");

                if (Topiccentre == GetTopic)
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Topic Field Verified", "Topic Verification Opportunity");
                }
                else
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Topic Field Verification Failed", "Topic Verification Opportunity");
                    Assert.Fail("Topic Field Verification Failed In Opportunity");
                }
            }
            else if (RProductBool == "true")
            {
                string Topicproduct;
                Topicproduct = RProductInput;



                GetTopic = Element(driver, Control("GetOppTopic", "Opportunity")).GetAttribute("innerText");

                if (Topicproduct == GetTopic)
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Topic Field Verified", "Topic Verification Opportunity");
                }
                else
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Topic Field Verification Failed", "Topic Verification Opportunity");
                    Assert.Fail("Topic Field Verification Failed In Opportunity");
                }
            }

            else if (NOPBool == "true")
            {
                string Topicpeople;
                Topicpeople = NOPInput;



                GetTopic = Element(driver, Control("GetOppTopic", "Opportunity")).GetAttribute("innerText");

                if (Topicpeople == GetTopic)
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Topic Field Verified", "Topic Verification Opportunity");
                }
                else
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Topic Field Verification Failed", "Topic Verification Opportunity");
                    Assert.Fail("Topic Field Verification Failed In Opportunity");
                }
            }

        }



        //Verify Oppertunity Topic Based on Criteria

        public void verifytopicwith2fields(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration
                                    , string Time, string NOPBool,
                  string RProductBool, string RBussinessCentreBool)
        {
            ThinkTime(7);

            HeaderButtonwithoutConfirmation(driver, testInReport, testName, testDataIteration, "Refresh");

            string ContactInput = "TestContactTopic" + Time;
            string AccountInput = "TestAccountTopic" + Time;
            string NOPInput = "7" + " People";

            string RProductInput = "Day Office";
            string RBusinessCentreInput = "Alberta, Calgary - Crowfoot Centre";
            string VerifyTopic;
            string GetTopic;


            string[] Topic = new string[2];
            if (RBussinessCentreBool == "true")
            {
                Topic[0] = RBusinessCentreInput;
                if (RProductBool == "true")
                {
                    Topic[1] = RProductInput;
                }
                else
                {
                    Topic[1] = NOPInput;
                }

            }
            else
            {

                if (RProductBool == "true")
                {
                    Topic[0] = RProductInput;
                    if (NOPBool == "true")
                    {
                        Topic[1] = NOPInput;
                    }
                    else
                    {

                    }
                }

            }

            VerifyTopic = Topic[0] + "-" + Topic[1];

            GetTopic = Element(driver, Control("GetOppTopic", "Opportunity")).GetAttribute("innerText");

            if (VerifyTopic == GetTopic)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Topic Field Verified", "Topic Verification Opportunity");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Topic Field Verification Failed", "Topic Verification Opportunity");
                Assert.Fail("Topic Field Verification Failed In Opportunity");
            }
        }







        //Verify Oppertunity Topic Based on Criteria

        public void VerifyOpportuntyTopic(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration
                                , string Time, string ContactBool, string AccountBool, string NOPBool, string CountryBool, string LocationBool,
              string RProductBool, string RBussinessCentreBool, string ChannelBool, string MajorSourceBool, string MinorSourceBool)
        {
            LoopforRefreshUntilResult(driver, testInReport, testName, testDataIteration);

            string ContactInput = "TestContactTopic" + Time;
            string AccountInput = "TestAccountTopic" + Time;
            string NOPInput = "7" + " People";
            string LocationInput = "TestLocation";
            string CountryInput = "United Kingdom";
            string RProductInput = "Day Office";
            string RBusinessCentreInput = "Alberta, Calgary - Crowfoot Centre";
            string VerifyTopic;
            string GetTopic;
            string VerifyTopicNew;

            string[] Topic = new string[3];

            if (RBussinessCentreBool == "true")
            {
                Topic[0] = RBusinessCentreInput;

                if (RProductBool == "true")
                {
                    Topic[1] = RProductInput;

                    if (NOPBool == "true")
                    {
                        Topic[2] = NOPInput;
                    }
                    else
                    {

                    }
                }
                else
                {

                }
            }
            else
            {
                if (RProductBool == "true")
                {
                    Topic[0] = RProductInput;

                    if (NOPBool == "true")
                    {
                        Topic[1] = NOPInput;
                    }
                    else
                    {

                    }
                }
                else
                {
                    if (NOPBool == "true")
                    {
                        Topic[0] = NOPInput;
                    }
                    else
                    {
                        if (ContactBool == "true")
                        {
                            Topic[0] = ContactInput;
                            Topic[1] = LocationInput;
                            Topic[2] = CountryInput;
                        }
                        else
                        {
                            if (AccountBool == "true")
                            {
                                Topic[0] = AccountInput;
                                Topic[1] = LocationInput;
                                Topic[2] = CountryInput;
                            }
                            else
                            {

                            }
                        }
                    }
                }
            }

            VerifyTopic = Topic[0] + "-" + Topic[1] + "-" + Topic[2];
            VerifyTopicNew = Topic[0] + "- " + Topic[1] + "- " + Topic[2];
            ThinkTime(2);
            WaitUntil(driver, Control("GetOppTopic", "Opportunity"), 120);
            GetTopic = Element(driver, Control("GetOppTopic", "Opportunity")).GetAttribute("innerText");
            char c = VerifyTopic.Last();
            // driver.Navigate().Refresh();
            if (c == '-')
            {
                String VerifyTopic1 = VerifyTopic.Remove(VerifyTopic.Length - 1);
                char d = VerifyTopic1.Last();

                String VerifyTopic2 = VerifyTopic1.Remove(VerifyTopic1.Length - 1);
                String VerifyTopic3 = VerifyTopic2.Remove(VerifyTopic2.Length - 1);
                Console.WriteLine(VerifyTopic1);
                Console.WriteLine(VerifyTopic2);
                Console.WriteLine(VerifyTopic3);
                Console.WriteLine(GetTopic);
                if (VerifyTopic1 == GetTopic)
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Topic Field Verified", "Topic Verification Opportunity");
                }
                else if (VerifyTopic2 == GetTopic)
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Topic Field Verified", "Topic Verification Opportunity");
                }
                else if (VerifyTopic3 == GetTopic)
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Topic Field Verified", "Topic Verification Opportunity");
                }

            }
            else
            {
                String VerifyTopic1 = VerifyTopic;
                if (VerifyTopic1 == GetTopic)
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Topic Field Verified", "Topic Verification Opportunity");
                }

                else if (VerifyTopicNew == GetTopic)
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Topic Field Verified", "Topic Verification Opportunity");
                }
                else
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Topic Field Verification Failed", "Topic Verification Opportunity");
                    Assert.Fail("Topic Field Verification Failed In Opportunity");
                }
            }
        }






        //Verify current status reason 
        public string StatusReasonFetch(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {

            ThinkTime(5);
            Element(driver, Control("HeaderFieldExpand", "Generic")).Click();
            WaitUntil(driver, Control("StatusReason", "Generic"), 180);
            String statusreason = Element(driver, Control("StatusReason", "Generic")).Text;
            return statusreason;
        }


        //Verify current status reason of centre User
        public string StatusReasonFetchCentre(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {

            ThinkTime(5);
            //   Element(driver, Control("HeaderFieldExpand", "Generic")).Click();
            WaitUntil(driver, Control("statusReasonCentre", "Generic"), 180);
            String statusreason = Element(driver, Control("statusReasonCentre", "Generic")).Text;
            return statusreason;
        }




        /// <summary>
        /// Select record AfterSearching
        /// </summary>
        /// <param name="driver"></param>
        public void SelectRecord(IWebDriver driver)
        {
            //driver.SwitchTo().DefaultContent();
            ThinkTime(1);
            SwitchToFrame(driver, "contentIFrame0");
            WaitUntil(driver, Control("selectFirstRecord2", "GenericOld"), 60);
            ActionsDoubleClick(driver, Control("selectFirstRecord2", "Generic"));

        }


        /// <summary>
        /// Method to check header buttons visiblity in CRM Application Case Record
        /// </summary>
        /// <param name="driver"></param>
        /// <param name="testInReport"></param>
        /// <param name="testName"></param>
        /// <param name="testDataIteration"></param>
        /// <param name="verificationType"></param>
        public void headerBtnVerify(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string headerBtn, string verificationType)
        {

            driver.SwitchTo().DefaultContent();
            WaitUntil(driver, Control("crmRibbonManager", "Generic"), 180);
            ThinkTime(2);

            switch (verificationType)
            {
                case "Visible":
                    {
                        try
                        {
                            if (Elements(driver, Control("headerBtnClick", headerBtn, "Generic")) > 0)
                            {
                                ElementHighlight(driver, Control("headerBtnClick", headerBtn, "Generic"));
                                IsDisplayedwithData(driver, testInReport, testName, testDataIteration, "headerBtnClick", headerBtn);

                            }
                            else
                            {
                                AddLog(driver, testInReport, testName, testDataIteration, "Fail", headerBtn + "button is not visible in form", "Button is hidden");
                                Assert.Fail("button is not visible in form");
                            }
                        }
                        catch (Exception e)
                        {
                            if (Element(driver, Control("RibbonExtend", "Generic")).Displayed)
                            {
                                ElementHighlight(driver, Control("RibbonExtend", "Generic"));
                                ActionsClick(driver, Control("RibbonExtend", "Generic"));
                                MoveToElement(driver, Control("RibbonExtend", "Generic"));
                                ThinkTime(1);

                                IsDisplayedwithData(driver, testInReport, testName, testDataIteration, "headerBtnClick", headerBtn);
                                // AddLog(driver, testInReport, testName, testDataIteration, "Pass", headerBtn + "button is visible in form", "Button Visible");
                            }

                            else
                            {
                                AddLog(driver, testInReport, testName, testDataIteration, "Fail", headerBtn + "button is not visible in form", "Button is hidden");
                                Assert.Fail("button is not visible in form: " + e);
                            }
                        }

                    }
                    break;

                case "Not Visible":
                    {

                        if (Elements(driver, Control("headerBtnClick", headerBtn, "Generic")) == 0)
                        {

                            AddLog(driver, testInReport, testName, testDataIteration, "Pass", headerBtn + " button is not showing in form", "Button is hidden");

                        }
                        else
                        {

                            AddLog(driver, testInReport, testName, testDataIteration, "Fail", headerBtn + "button is visible", "Button Visible");
                            Assert.Fail("Button is visible");

                        }
                    }
                    break;

                default:
                    {
                        AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Unexpected error ", "Unexpectederror");
                        Assert.Fail("Unexpected erro");
                    }
                    break;
            }

        }
        /// <summary>
        /// Method to check status reason of case record in CRM Application
        /// </summary>
        /// <param name="driver"></param>
        /// <param name="testInReport"></param>
        /// <param name="testName"></param>
        /// <param name="testDataIteration"></param>
        /// <param name="statusReason"></param>
        /// <param name="stage"></param>
        public void StatusReasonVerify(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string stage, string statusReason)
        {
            try
            {
                driver.SwitchTo().DefaultContent();
                ThinkTime(1);
                WaitUntil(driver, Control("crmRibbonManager", "Generic"), 35);
                ThinkTime(5);
                string statusReasonValue = Element(driver, Control("statusReasonValue", "Generic")).Text;
                if (stage == "Current")
                {

                    if (statusReason == statusReasonValue)
                    {
                        ThinkTime(2);
                        AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Current status reason is " + statusReasonValue + " as expected", "Current status reason");

                    }
                    else
                    {

                        ThinkTime(2);
                        AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Current status reason is " + statusReasonValue, "Current status reason");
                    }

                }

                else if (stage == "After Update")
                {
                    driver.Navigate().Refresh();
                    ThinkTime(5);
                    try
                    {
                        driver.SwitchTo().Frame("InlineDialog_Iframe");
                        ThinkTime(2);
                        Element(driver, Control("emailWarningCloseBtn", "Login")).Click();
                        ThinkTime(3);

                    }
                    catch
                    {
                        Console.WriteLine("Email warning");
                    }
                    driver.SwitchTo().DefaultContent();
                    ThinkTime(1);
                    SwitchToFrame(driver, "contentIFrame0");
                    ThinkTime(2);

                    if (statusReason == statusReasonValue)
                    {

                        ThinkTime(2);
                        AddLog(driver, testInReport, testName, testDataIteration, "Pass", "After updating record status reason is changed to " + statusReasonValue + " as expected", "After update status reason");
                        ThinkTime(2);

                    }
                    else
                    {

                        ThinkTime(5);
                        AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Status reason is not changed " + statusReasonValue, "After update status reason");
                    }



                }

            }
            catch (Exception e)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Unexpected error " + e, "Unexpectederror");
                throw;
            }
        }



        // Method to navigate to Tabs Opportunity.
        public void NavigateTabsOpportunity(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string Tab)
        {
            ThinkTime(3);

            WaitUntil(driver, Control("RelatedTabOpportunity", Tab, "Opportunity"), 180);
            Element(driver, Control("RelatedTabOpportunity", Tab, "Opportunity")).Click();

        }

        //Method to verify tour Activities generated in secondary opp.
        public void VerifyTourActivitiesSecondaryopp(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {
            ThinkTime(3);

            if (Elements(driver, Control("VerifyTourConfirmation", "Opportunity")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Tour Confirmation Activities generated Verified", "");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Activity verification failed", "");
                Assert.Fail("Activity verification failed");
            }


            if (Elements(driver, Control("VerifyASMInternalHandover", "Opportunity")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "ASM Internal Handover Activities generated Verified", "");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Activity verification failed", "");
                Assert.Fail("Activity verification failed");
            }

            if (Elements(driver, Control("VerifyPostTourCall", "Opportunity")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Post Tour Call Activities generated Verified", "");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Activity verification failed", "");
                Assert.Fail("Activity verification failed");
            }

        }


        //Method to navigate and complete tour record.
        public void NavigateAndCompleteTour(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {
            ThinkTime(3);

            WaitUntil(driver, Control("OppenActiveTourRecord", "GenericOld"), 60);
            Element(driver, Control("OppenActiveTourRecord", "GenericOld")).Click();

            //Navigate to tour Outcome.

            WaitUntil(driver, Control("NavigateToTourOutcome", "GenericOld"), 60);
            Element(driver, Control("NavigateToTourOutcome", "GenericOld")).Click();

            //Set tour outcome.
            WaitUntil(driver, Control("SetTourOutcome", "Opportunity"), 60);
            Element(driver, Control("SetTourOutcome", "Opportunity")).Click();
            ThinkTime(3);
            Select(Element(driver, Control("SetTourOutcome", "Opportunity"))).SelectByText("Follow up call booked");
            ThinkTime(3);
            WaitUntil(driver, Control("SetArrivalFlag", "Opportunity"), 60);
            Element(driver, Control("SetArrivalFlag", "Opportunity")).Click();
            ThinkTime(3);
            Select(Element(driver, Control("SetArrivalFlag", "Opportunity"))).SelectByText("Yes");

            //Mark as complete.

            WaitUntil(driver, Control("NavigateToTourOutcome", "GenericOld"), 60);
            Element(driver, Control("NavigateToTourOutcome", "GenericOld")).Click();

        }

        //Method to verify Opportunity as primary.
        public void VerifyPrimaryOpp(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(3);


            if (Elements(driver, Control("VerifyPrimaryFlag", "Generic")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Primary flag verified", "");


            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Primary flag verification failed", "");
                Assert.Fail("Primary field verification failed");
            }


        }
        //Verify dailer post tour comm request.
        public void VerifyDailerPosttour(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string Centre, string Status)
        {
            ThinkTime(3);
            string Payload = Element(driver, Control("VerifyPayloadData", "Opportunity")).GetAttribute("defaultValue");

            bool VCentre = Payload.Contains(Centre);
            bool VStatus = Payload.Contains(Status);

            if (VCentre == true)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Centre Field Verified", "Payload Field verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Centre field verification failed", "Payload field verification");
                Assert.Fail();
            }
            if (VStatus == true)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Status Field Verified", "Payload Field verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Status field verification failed", "Payload field verification");
                Assert.Fail();
            }


        }

        //Verify dailer post tour comm request.
        public void VerifyDailerScheduleddate(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string Centre, string Status, string scheduleddate, string scheduleddate1 = "")
        {
            ThinkTime(3);
            string Payload = Element(driver, Control("VerifyPayloadData", "Opportunity")).GetAttribute("defaultValue");

            bool VCentre = Payload.Contains(Centre);
            bool VStatus = Payload.Contains(Status);
            bool VScheduledDate = Payload.Contains(scheduleddate);
            bool VScheduledDatesingledate = Payload.Contains(scheduleddate1);
            if (VCentre == true)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Centre Field Verified", "Payload Field verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Centre field verification failed", "Payload field verification");
                Assert.Fail();
            }
            if (VStatus == true)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Status Field Verified", "Payload Field verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Status field verification failed", "Payload field verification");
                Assert.Fail();
            }
            if (VScheduledDate == true || VScheduledDatesingledate == true)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "ScheduledDate Field Verified", "Payload Field verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "ScheduledDate field verification failed", "Payload field verification");
                Assert.Fail();
            }


        }



        //Verify dailer post tour comm request.
        public void VerifyDailerPosttourStatus(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string Status)
        {
            ThinkTime(3);
            string Payload = Element(driver, Control("VerifyPayloadData", "Opportunity")).GetAttribute("defaultValue");
            bool VStatus = Payload.Contains(Status);
            if (VStatus == true)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Status Field Verified", "Payload Field verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Status field verification failed", "Payload field verification");
                Assert.Fail();
            }
        }

        //Method to verify whether CR action is Delete
        public void VerifyCRActionDelete(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(3);

            if (Elements(driver, Control("ActionDelete", "Opportunity")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Verified Comm Request action is delete", "Comm Request Status Verification");


            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Verified Comm Request action is delete verification is failed", "Comm Request Status Verification");
                Assert.Fail("Comm Request Status Verification failed");
            }
        }


        //Method to verify seconday opps comm request.
        public void VerifySecOppCommRequstCancel(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(3);

            //Verify Day 0 complete

            if (Elements(driver, Control("VerifyDay0Complete", "Opportunity")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Verified Day 0 Email Request status", "Comm Request Status Verification");


            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Verified Day 0 Email Request status failed", "Comm Request Status Verification");
                Assert.Fail("Comm Request Status Verification failed");
            }

            //Verify Hot lead dailer cancel.

            if (Elements(driver, Control("VerifyDailerHotLeadComplete", "Opportunity")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Verified Hot lead Dailer Request status", "Comm Request Status Verification");


            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Verified Hot lead Dailer Request status failed", "Comm Request Status Verification");
                Assert.Fail("Comm Request Status Verification failed");
            }

            //Verify Welcome email complete.

            if (Elements(driver, Control("VerifyWelcomeEmailComplete", "Opportunity")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Verified Welcome Emial Request status", "Comm Request Status Verification");


            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Verified Welcome Emial Request status failed", "Comm Request Status Verification");
                Assert.Fail("Comm Request Status Verification failed");
            }

            //Verify Day 3 complete.

            if (Elements(driver, Control("VerifyDay3Complete", "Opportunity")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Verified Day 3 Emial Request status", "Comm Request Status Verification");


            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Verified Day 3 Emial Request status failed", "Comm Request Status Verification");
                Assert.Fail("Comm Request Status Verification failed");
            }

            //Verify Day 5 Complete.

            if (Elements(driver, Control("VerifyDay5Complete", "Opportunity")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Verified Day 5 Emial Request status", "Comm Request Status Verification");


            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Verified Day 5 Emial Request status failed", "Comm Request Status Verification");
                Assert.Fail("Comm Request Status Verification failed");
            }

        }



        //Method to navigate to tabs value.
        public void NavigateTabsValuesOpportunity(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string Tab2)
        {
            ThinkTime(3);

            WaitUntil(driver, Control("RelatedTabValueOpportunity", Tab2, "Opportunity"), 180);
            Element(driver, Control("RelatedTabValueOpportunity", Tab2, "Opportunity")).Click();

        }

        //Method to Select required activity.
        public void SelectActivityOpportunity(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string Activity)
        {
            ThinkTime(3);

            WaitUntil(driver, Control("SelectActivityOpportunity", Activity, "Opportunity"), 180);
            Element(driver, Control("SelectActivityOpportunity", Activity, "Opportunity")).Click();

        }

        //Method to Navigate Activity tabs.
        public void NavigatetoActivityTabs(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string Activity)
        {
            ThinkTime(3);

            WaitUntil(driver, Control("ActivityTabs", Activity, "Opportunity"), 180);
            Element(driver, Control("ActivityTabs", Activity, "Opportunity")).Click();

        }

        //Method to edit opportunity with new data for dailer payload verification.
        public void UpdateOppwithNewData(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(5);

            scrollDownOpportunity(driver, testInReport, testName, testDataIteration);

            //Remove brand field.

            WaitUntil(driver, Control("OppBrandLabel", "Opportunity"), 180);
            MoveToElement(driver, Control("OppBrandLabel", "Opportunity"));
            Element(driver, Control("OppBrandLabelClose", "Opportunity")).Click();

            scrollDownOpportunity(driver, testInReport, testName, testDataIteration);

            //Remove Product field.

            WaitUntil(driver, Control("OppProductLabel", "Opportunity"), 180);
            MoveToElement(driver, Control("OppProductLabel", "Opportunity"));
            Element(driver, Control("OppProductLabelClose", "Opportunity")).Click();

            Element(driver, Control("TopicRProductInput", "Opportunity")).Click();
            Element(driver, Control("TopicRProductInput", "Opportunity")).SendKeys("Long Term Office");
            ThinkTime(4);
            Element(driver, Control("DropDownResultSelect", "Opportunity")).Click();

            scrollDownOpportunity(driver, testInReport, testName, testDataIteration);
            scrollDownOpportunity(driver, testInReport, testName, testDataIteration);

            //Remove Recommended Business Centre.

            WaitUntil(driver, Control("OppRCentreLabel", "Opportunity"), 180);
            MoveToElement(driver, Control("OppRCentreLabel", "Opportunity"));
            Element(driver, Control("OppRCentreLabelClose", "Opportunity")).Click();

            Element(driver, Control("TopicRBusinessCentreInput", "Opportunity")).Click();
            Element(driver, Control("TopicRBusinessCentreInput", "Opportunity")).SendKeys("London, Spaces Baker Street");
            ThinkTime(4);
            Element(driver, Control("DropDownResultSelect", "Opportunity")).Click();

            scrollDownOpportunity(driver, testInReport, testName, testDataIteration);

            //Remove Source Site.

            WaitUntil(driver, Control("TopicSourceSiteInput", "Opportunity"), 180);
            MoveToElement(driver, Control("TopicSourceSiteInput", "Opportunity"));

            Element(driver, Control("TopicSourceSiteInput", "Opportunity")).Click();
            Element(driver, Control("TopicSourceSiteInput", "Generic")).SendKeys(Keys.Control + "a");
            Element(driver, Control("TopicSourceSiteInput", "Generic")).SendKeys(Keys.Delete);
            Element(driver, Control("TopicSourceSiteInput", "Opportunity")).SendKeys("//@regustestnew.com");

            saveFooter(driver, testInReport, testName, testDataIteration);

            AssignOpportunity(driver, testInReport, testName, testDataIteration, "User", "CRM Test3");
        }


        //Method to verify Activity request for opportunity.
        public void VerifyActivityPayload(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration
                                           , string Brand, string Product, string Status, string Source, string Owner)
        {
            ThinkTime(3);

            string Payload = Element(driver, Control("VerifyPayloadData", "Opportunity")).GetAttribute("defaultValue");

            bool VBrand = Payload.Contains(Brand);
            bool VProduct = Payload.Contains(Product);
            bool VStatus = Payload.Contains(Status);
            bool VSource = Payload.Contains(Source);
            bool VOwner = Payload.Contains(Owner);

            if (VBrand == true)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Brand Field Verified", "Payload Field verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Brand field verification failed", "Payload field verification");
                Assert.Fail();
            }

            if (VProduct == true)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Product Field Verified", "Payload Field verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Product field verification failed", "Payload field verification");
                Assert.Fail();
            }

            if (VStatus == true)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Status Field Verified", "Payload Field verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Status field verification failed", "Payload field verification");
                Assert.Fail();
            }

            if (VSource == true)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Source Field Verified", "Payload Field verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Source field verification failed", "Payload field verification");
                Assert.Fail();
            }


            if (VOwner == true)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Owner Field Verified", "Payload Field verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Owner field verification failed", "Payload field verification");
                Assert.Fail();
            }

        }



        //Method to verify Activity request for opportunity.
        public void VerifyDialerHotleadsPayloadupdated(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration
                                           , string FirstName, string LastName, string BusinessPhone, string CellPhone, string TimeZone, string City, string Open, string TourStatus, string owning_team, string owning_user, string Country, string Brand, string Language, string Product, string LeadPriority, string MajorSource, string MinorSource, string CRM, string Environment, string EntityType, string Age)
        {
            ThinkTime(3);

            string Payload = Element(driver, Control("VerifyPayloadData", "Opportunity")).GetAttribute("defaultValue");
            bool VFirstName = Payload.Contains(FirstName);
            bool VLastName = Payload.Contains(LastName);
            bool VBusinessPhone = Payload.Contains(BusinessPhone);
            bool VCellPhone = Payload.Contains(CellPhone);
            bool VTimeZone = Payload.Contains(TimeZone);
            bool VCity = Payload.Contains(City);
            bool VStage = Payload.Contains(Open);
            bool VTourStatus = Payload.Contains(TourStatus);
            bool Vowning_team = Payload.Contains(owning_team);
            bool Vowning_user = Payload.Contains(owning_user);
            bool VCountry = Payload.Contains(Country);

            bool VBrand = Payload.Contains(Brand);
            bool VLanguage = Payload.Contains(Language);
            bool VProduct = Payload.Contains(Product);
            bool VLeadPriority = Payload.Contains(LeadPriority);
            bool VMajorSource = Payload.Contains(MajorSource);
            bool VMinorSource = Payload.Contains(MinorSource);
            bool VCRM = Payload.Contains(CRM);
            bool VEnvironment = Payload.Contains(Environment);
            bool VEntityType = Payload.Contains(EntityType);
            bool VAge = Payload.Contains(Age);

            if (VFirstName == true)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Brand Field Verified", "Payload Field verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Brand field verification failed", "Payload field verification");
                Assert.Fail();
            }

            if (VLastName == true)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Product Field Verified", "Payload Field verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Product field verification failed", "Payload field verification");
                Assert.Fail();
            }

            if (VBusinessPhone == true)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Status Field Verified", "Payload Field verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Status field verification failed", "Payload field verification");
                Assert.Fail();
            }

            if (VCellPhone == true)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Source Field Verified", "Payload Field verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Source field verification failed", "Payload field verification");
                Assert.Fail();
            }


            if (VTimeZone == true)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Owner Field Verified", "Payload Field verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Owner field verification failed", "Payload field verification");
                Assert.Fail();
            }
            if (VCity == true)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Owner Field Verified", "Payload Field verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Owner field verification failed", "Payload field verification");
                Assert.Fail();
            }
            if (VStage == true)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Owner Field Verified", "Payload Field verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Owner field verification failed", "Payload field verification");
                Assert.Fail();
            }
            if (VTourStatus == true)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Owner Field Verified", "Payload Field verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Owner field verification failed", "Payload field verification");
                Assert.Fail();
            }
            if (Vowning_team == true)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Owner Field Verified", "Payload Field verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Owner field verification failed", "Payload field verification");
                Assert.Fail();
            }
            if (Vowning_user == true)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Owner Field Verified", "Payload Field verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Owner field verification failed", "Payload field verification");
                Assert.Fail();
            }
            if (VCountry == true)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Owner Field Verified", "Payload Field verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Owner field verification failed", "Payload field verification");
                Assert.Fail();
            }
            if (VBrand == true)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Owner Field Verified", "Payload Field verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Owner field verification failed", "Payload field verification");
                Assert.Fail();
            }
            if (VLanguage == true)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Owner Field Verified", "Payload Field verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Owner field verification failed", "Payload field verification");
                Assert.Fail();
            }
            if (VProduct == true)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Owner Field Verified", "Payload Field verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Owner field verification failed", "Payload field verification");
                Assert.Fail();
            }
            if (VLeadPriority == true)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Owner Field Verified", "Payload Field verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Owner field verification failed", "Payload field verification");
                Assert.Fail();
            }
            if (VMajorSource == true)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Owner Field Verified", "Payload Field verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Owner field verification failed", "Payload field verification");
                Assert.Fail();
            }
            if (VMinorSource == true)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Owner Field Verified", "Payload Field verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Owner field verification failed", "Payload field verification");
                Assert.Fail();
            }
            if (VCRM == true)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Owner Field Verified", "Payload Field verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Owner field verification failed", "Payload field verification");
                Assert.Fail();
            }
            if (VEnvironment == true)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Owner Field Verified", "Payload Field verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Owner field verification failed", "Payload field verification");
                Assert.Fail();
            }
            if (VEntityType == true)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Owner Field Verified", "Payload Field verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Owner field verification failed", "Payload field verification");
                Assert.Fail();
            }
            if (VAge == true)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Owner Field Verified", "Payload Field verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Owner field verification failed", "Payload field verification");
                Assert.Fail();
            }


        }

        //Method to navigate to opportunity from payload.
        public void NavigatetOppFromPayloadDailer(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(3);

            WaitUntil(driver, Control("SelectOppFromPayload", "Opportunity"), 180);
            Element(driver, Control("SelectOppFromPayload", "Opportunity")).Click();

            ThinkTime(6);

        }



        /// <summary>
        /// Method to Selecting Role from dashboard dropdown
        /// </summary>
        /// <param name="driver"></param>
        /// <param name="testInReport"></param>
        /// <param name="testName"></param>
        /// <param name="testDataIteration"></param>


        public void RoleSelectionDashBoardDropDown(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string Role)
        {

            driver.SwitchTo().DefaultContent();
            ThinkTime(1);
            WaitUntil(driver, Control("DashboardRoleDropDown", "Generic"), 180);
            ElementHighlight(driver, Control("DashboardRoleDropDown", "Generic"));
            Element(driver, Control("DashboardRoleDropDown", "Generic")).Click();
            WaitUntil(driver, Control("dashboardRole", Role, "Generic"), 180);
            Element(driver, Control("dashboardRole", Role, "Generic")).Click();
            ThinkTime(1);
            String DashboardRole = Element(driver, Control("SelectedDashboard", "Generic")).Text;
            if (DashboardRole == Role)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "User is able to select DashBoard Role", " DashBoard Role");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "User is not able to select DashBoard Role", "DashBoard Role");
                Assert.Fail();
            }
        }



        /// <summary>
        /// Method to check Number of records showing on GSc Agent Dashboard
        /// </summary>
        /// <param name="driver"></param>
        /// <param name="testInReport"></param>
        /// <param name="testName"></param>
        /// <param name="testDataIteration"></param>

        public void numberOfCaseDiaplayedOnGscAgentDashboard(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string displayed)
        {
            driver.SwitchTo().DefaultContent();
            ThinkTime(5);

            MoveToElement(driver, Control("RecordCount", "Generic"));
            String RecordCount = Element(driver, Control("RecordCount", "Generic")).Text.ToString();
            if (RecordCount.Contains("14"))
            {
                string strCount = Element(driver, Control("CaseCount", "Generic")).GetAttribute("data-row-count");
                if (strCount == "14")
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Number of Cases displayed is 14", "GSC agent login");

                }

                else
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "fail", "Number of Cases diplayed is not 14", "GSC agent login");
                    Assert.Fail("Number of Cases displayed is not 14");
                }
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "The user does not have 14 records", "GSC agent login");
            }


        }


        /// <summary>
        /// Method for selecting an active case
        /// </summary>
        /// <param name="driver"></param>
        /// <param name="testInReport"></param>
        /// <param name="testName"></param>
        /// <param name="testDataIteration"></param>
        public void SelectingActiveFirstRecord(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string selectedCaseindex)
        {
            ThinkTime(1);
            WaitUntil(driver, Control("SelectCaseNumber", selectedCaseindex, "Generic"), 180);
            MoveToElement(driver, Control("selectCase", selectedCaseindex, "Generic"));
            ActionsDoubleClick(driver, Control("selectCase", selectedCaseindex, "Generic"));
            ThinkTime(3);

        }

        public void SelectingOpportunity(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string selectedOpportunityindex)
        {
            ThinkTime(1);
            WaitUntil(driver, Control("SelectOpportunity", selectedOpportunityindex, "Generic"), 10);
            ActionsDoubleClick(driver, Control("selectCase", selectedOpportunityindex, "Generic"));
            ThinkTime(3);

        }
        /// <summary>
        /// Method for selecting an active case
        /// </summary>
        /// <param name="driver"></param>
        /// <param name="testInReport"></param>
        /// <param name="testName"></param>
        /// <param name="testDataIteration"></param>
        public void VerifyAssignButton(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            WaitUntil(driver, Control("HeaderFiled", "Generic"), 60);
            ElementHighlight(driver, Control("HeaderFiled", "Generic"));
            if (Elements(driver, Control("AssignButtonCheck", "Generic")) == 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Assign Button is not dispalyed", "");


            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Assign button is visible", "");
                Assert.Fail("Assign button is there in the ribbon");
            }




        }
        /// <summary>
        /// Method to add note
        /// </summary>
        /// <param name="driver"></param>
        /// <param name="testInReport"></param>
        /// <param name="testName"></param>
        /// <param name="testDataIteration"></param>
        /// <param name="assignTo"></param>
        public void AddNote(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string NoteTitle, string NoteDescription)
        {
            ThinkTime(5);
            MoveToElement(driver, Control("AddtitleField", "Case"));
            WaitUntil(driver, Control("AddtitleField", "Case"), 60);
            ElementHighlight(driver, Control("AddtitleField", "Case"));
            Element(driver, Control("AddtitleField", "Case")).Click();
            Element(driver, Control("Addtitle", "Case")).SendKeys(NoteTitle);
            WaitUntil(driver, Control("AddNoteDescriptionField", "Case"), 60);
            Element(driver, Control("AddNoteDescriptionField", "Case")).SendKeys(NoteDescription);
            ElementHighlight(driver, Control("AddNoteButton", "Case"));
            String s = System.DateTime.Now.ToString("MM/d/yyyy h:mm tt");
            Console.WriteLine(s);
            Element(driver, Control("AddNoteButton", "Case")).Click();
            AddLog(driver, testInReport, testName, testDataIteration, "pass", "Able to add note", "Add note verification");
            ThinkTime(2);
            ElementHighlight(driver, Control("AddNoteClick", "Case"));
            Element(driver, Control("AddNoteClick", "Case")).Click();
            ThinkTime(2);
            WaitUntil(driver, Control("AddNoteVerifcation", "Generic"), 60);
            ElementHighlight(driver, Control("AddNoteVerifcation", "Generic"));
            String y = Element(driver, Control("AddNoteVerifcation", "Generic")).GetAttribute("textContent");
            Console.WriteLine(y);
            ThinkTime(2);



        }



        //To verify the Dashboard Views are showing correctly

        public void DashboardViewVerification(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string ViewSelector, string ViewSelector1)
        {
            driver.SwitchTo().DefaultContent();
            ThinkTime(1);

            //verify the my active cases-GSc title
            WaitUntil(driver, Control("myActiveCasesVerify", "Generic"), 60);
            ElementHighlight(driver, Control("myActiveCasesVerify", "Generic"));
            string myActiveCase = Element(driver, Control("myActiveCasesVerify", "Generic")).Text;
            if (myActiveCase == ViewSelector)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "user is able to view My Active Cases Scetion", "My Active Cases");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "user is able to view My Active Cases Scetion", "My Active Cases");
                Assert.Fail();
            }
            ThinkTime(3);
            //WaitUntil(driver, Control("ActiveCasePageNo", "Generic"), 60);
            //MoveToElement(driver, Control("ActiveCasePageNo", "Generic"));

            // Element(driver, Control("DashboardScroll", "Generic")).Click();
            //Element(driver, Control("DashboardScroll", "Generic")).SendKeys(Keys.PageDown);
            scrollVerticalMiddleafter(driver, testInReport, testName, testDataIteration);

            //verify the GSC Open cases-In Progress with centre
            ThinkTime(1);
            WaitUntil(driver, Control("gscOpenCasesTitle", "Generic"), 60);
            MoveToElement(driver, Control("gscOpenCasesTitle", "Generic"));
            ElementHighlight(driver, Control("gscOpenCasesTitle", "Generic"));
            string gscOpenCases = Element(driver, Control("gscOpenCasesTitle", "Generic")).Text;
            if (myActiveCase == ViewSelector1)
            {
                ThinkTime(1);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "user is able to view GSC Open Cases Scetion", "GSC Open Cases - In Progress with Centre");

            }

            else
            {
                ThinkTime(1);
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "user is able to view GSC Open Cases Scetion", "GSC Open Cases - In Progress with Centre");
                //Assert.Fail();

            }

        }
        /// <summary>
        /// Method to check status Footer value in CRM Application Case Record 
        /// </summary>
        /// <param name="driver"></param>
        /// <param name="testInReport"></param>
        /// <param name="testName"></param>
        /// <param name="testDataIteration"></param>
        /// <param name="verificationFor"></param>
        /// <param name="footerStatus"></param>
        public void VerifyFooterStatus(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string verificationFor, string footerStatus)
        {

            ThinkTime(5);
            try
            {
                driver.SwitchTo().Frame("InlineDialog_Iframe");
                ThinkTime(2);
                Element(driver, Control("emailWarningCloseBtn", "Login")).Click();
                ThinkTime(3);

            }
            catch
            {
                Console.WriteLine("Email warning");
            }
            ThinkTime(3);
            driver.SwitchTo().DefaultContent();
            ThinkTime(3);

            driver.SwitchTo().Frame("contentIFrame1");
            ThinkTime(2);
            string footerStatusValue = Element(driver, Control("statusFooterValue", "Generic")).Text;

            if (verificationFor == "Canceling Case")
            {
                if (footerStatusValue == "Canceled")
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Record is " + footerStatusValue + " and read only", "Verifying Record Status");


                }
                else
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Record status value is " + footerStatusValue, "Verification fails for Record Status");
                    Assert.IsTrue(false);
                }
            }
            else if (verificationFor == "Resolving Case")
            {
                if (footerStatusValue == "Resolved")
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Record is " + footerStatusValue + " and read only", "Verifying Record Status");
                }
                else
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Record status value is " + footerStatusValue, "Verification fails for Record Status");
                    Assert.IsTrue(false);
                }
            }
            else if (verificationFor == "Active Case")
            {
                if (footerStatusValue == "Active")
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Record is " + footerStatusValue + " and editable", "Verifying Record Status");
                }
                else
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Record status value is " + footerStatusValue, "Verification fails for Record Status");
                    Assert.IsTrue(false);
                }
            }
            else if (verificationFor == "Updating Case")
            {
                if (footerStatusValue == "Active")
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Record is " + footerStatusValue + " and editable", "Verifying Record Status");

                }
                else
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Record status value is " + footerStatusValue, "Verification fails for Record Status");
                    Assert.IsTrue(false);
                }

            }


        }

        /// <summary>
        /// Method to check status Footer value in CRM Application Records 
        /// </summary>
        /// <param name="driver"></param>
        /// <param name="testInReport"></param>
        /// <param name="testName"></param>
        public void ReadOnly(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(5);
            driver.SwitchTo().DefaultContent();
            ThinkTime(2);
            //driver.Navigate().Refresh();
            //ThinkTime(10);
            AutomaticFrameSwitch(driver);
            ThinkTime(2);
            string readOnly = Element(driver, Control("statusFooter", "Generic")).Text;
            if (readOnly == "Read only")
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Record is read only", "Verifying Record Status");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Record is not read only", "Verification fails for Record Status");
                Assert.IsTrue(false);

            }
        }




        public void VerifyAdmin_Users_Details(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            driver.SwitchTo().DefaultContent();
            ThinkTime(2);
            SwitchToFrame(driver, "contentIFrame0");
            ThinkTime(2);
            if (Element(driver, Control("EnabledUsers", "LSCDashBoard")).Displayed)
            {
                ThinkTime(2);
                Element(driver, Control("EnabledUsers_SelectUser", "LSCDashBoard")).Click();

            }
            else
            {
                ThinkTime(1);
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "not able to select user", "LSC Admin-Users");

            }
            driver.SwitchTo().DefaultContent();
            ThinkTime(2);
            ////generic.AutomaticFrameSwitch(driver);
            ////ThinkTime(2);
            SwitchToFrame(driver, "contentIFrame1");
            ThinkTime(2);
            if (Element(driver, Control("User", "LSCDashBoard")).Displayed)
            {

                ThinkTime(2);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Selected User details are opened", "LSC Admin-Users");

            }
            else
            {
                ThinkTime(1);
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Selected User details are not opened", "LSC Admin-Users");

            }
            if (Element(driver, Control("AccInformation", "LSCDashBoard")).Displayed)
            {
                Element(driver, Control("AccInformation", "LSCDashBoard")).Click();
                ThinkTime(2);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Selected User details are opened", "LSC Admin-Users AccInfo");

            }
            else
            {
                ThinkTime(1);
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Selected User details are not opened", "LSC Admin-Users AccInfo");

            }

            if (Element(driver, Control("Posts", "LSCDashBoard")).Displayed)
            {
                Element(driver, Control("Posts", "LSCDashBoard")).Click();
                ThinkTime(2);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Selected User details are opened", "LSC Admin-Users Posts");

            }
            else
            {

                ThinkTime(1);
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Selected User details are not opened", "LSC Admin-Users Posts");

            }
            if (Element(driver, Control("Teams", "LSCDashBoard")).Displayed)
            {

                ThinkTime(2);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Selected User details are opened", "LSC Admin-Users Teams");

            }
            else
            {
                ThinkTime(1);
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Selected User details are not opened", "LSC Admin-Users Teams");

            }
            ThinkTime(1);

            if (Element(driver, Control("UserInfomation", "LSCDashBoard")).Displayed)
            {
                Element(driver, Control("UserInfomation", "LSCDashBoard")).Click();
                ThinkTime(2);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Selected User details are opened", "LSC Admin-Users UserInfomation");

            }
            else
            {
                ThinkTime(1);
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Selected User details are not opened", "LSC Admin-Users UserInfomation");

            }
            ThinkTime(1);
            MoveToElement(driver, Control("OrgInfomation", "LSCDashBoard"));
            if (Element(driver, Control("OrgInfomation", "LSCDashBoard")).Displayed)
            {
                Element(driver, Control("OrgInfomation", "LSCDashBoard")).Click();
                ThinkTime(2);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Selected User details are opened", "LSC Admin-Users OrgInfomation");

            }
            else
            {
                ThinkTime(1);
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Selected User details are not opened", "LSC Admin-Users OrgInfomation");

            }
            ThinkTime(1);
            MoveToElement(driver, Control("QueueInfo", "LSCDashBoard"));
            if (Element(driver, Control("QueueInfo", "LSCDashBoard")).Displayed)
            {
                Element(driver, Control("QueueInfo", "LSCDashBoard")).Click();
                ThinkTime(2);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Selected User details are opened", "LSC Admin-Users QueueInfo");

            }
            else
            {
                ThinkTime(1);
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Selected User details are not opened", "LSC Admin-Users QueueInfo");

            }
        }

        public void SelectingGSC_From_D365_DropDown(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            driver.SwitchTo().DefaultContent();
            ThinkTime(2);

            if (Element(driver, Control("Dynami365_Drop", "Generic")).Displayed)
            {
                Element(driver, Control("Dynami365_Drop", "Generic")).Click();
                ThinkTime(1);
                Element(driver, Control("SelectingGSC_D365", "GSCDashBoard")).Click();
                ThinkTime(2);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "User is able toSelect GSC ", "GSC-D365");

            }
            else
            {
                ThinkTime(1);
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "User is not able to Select GSC ", "GSC-D365");

            }
        }

        public void SelectingAdmin_Users_From_CostomerService_DropDown_ForGSCAdmin(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            driver.SwitchTo().DefaultContent();
            ThinkTime(2);


            if (Element(driver, Control("SandBox_DropDown", "GSCDashBoard")).Displayed)
            {
                Element(driver, Control("SandBox_DropDown", "GSCDashBoard")).Click();
                ThinkTime(1);
                Element(driver, Control("Admin", "GSCDashBoard")).Click();
                ThinkTime(1);
                Element(driver, Control("CSAdmin_Users", "LSCDashBoard")).Click();
                ThinkTime(2);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "User is able toSelect LSC Admin", "LSC Admin-Users");

            }
            else
            {
                ThinkTime(1);
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "User is not able to Select LSC Admin", "LSC Admin-Users");

            }
        }



        public void SelectingAllcases_SelectView(IWebDriver driver)
        {
            ThinkTime(2);
            SwitchToFrame(driver, "contentIFrame0");
            ThinkTime(2);
            //clicks on the All cases option in a Select view dropdown 
            Element(driver, Control("SelectView_DropDown", "Generic")).Click();
            ThinkTime(2);

            MoveToElement(driver, Control("Select_AllCases", "Generic"));
            Element(driver, Control("Select_AllCases", "Generic")).Click();
        }
        //verifying In-ProgreggUpdate  Status Reason from filter dropdown



        /// Devi
        /// <summary>
        /// Method to select specified dashboard from Systemdashboard in CRM Application Records 
        /// </summary>
        /// <param name="driver"></param>
        /// <param name="testInReport"></param>
        /// <param name="testName"></param>
        /// <param name="role"></param>
        public void selectDashboard(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string role, String dashBoard, String SystemDashboard, String userDashboard)
        {
            driver.SwitchTo().DefaultContent();
            ThinkTime(2);
            SwitchToFrame(driver, "contentIFrame0");
            ThinkTime(2);
            if (Elements(driver, Control(SystemDashboard, dashBoard)) > 0)
            {
                Element(driver, Control(SystemDashboard, dashBoard)).Click();
                ThinkTime(1);
                Element(driver, Control(userDashboard, dashBoard)).Click();
                ThinkTime(1);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "User is able to click the system dashboard and Select" + role, role);

            }
            else
            {
                ThinkTime(1);
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "User is unable to Select" + role, role);
            }

        }

        /// <summary>
        /// Method to check load next button on dashboard in CRM Application Records 
        /// </summary>
        /// <param name="driver"></param>
        /// <param name="testInReport"></param>
        /// <param name="testName"></param>
        /// <param name="role"></param>
        public void LoadNextPageButton(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string role, string DashBoard, String CasesWithOtherTeam, String CasesNextPage_Btn, String LoadNextPage, String MyActiveCasesPageNo)
        {
            driver.SwitchTo().DefaultContent();
            ThinkTime(2);
            AutomaticFrameSwitch(driver);
            ThinkTime(2);


            MoveToElement(driver, Control(CasesWithOtherTeam, DashBoard));
            if (Elements(driver, Control(CasesWithOtherTeam, DashBoard)) > 0)
            {
                MoveToElement(driver, Control(CasesNextPage_Btn, DashBoard));
                ThinkTime(2);
                Element(driver, Control(CasesNextPage_Btn, DashBoard)).Click();
                ThinkTime(1);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "User is able to Click LoadNext Page Button", role + "Load Next Page");
                ThinkTime(2);
                MoveToElement(driver, Control(LoadNextPage, DashBoard));
                String pageNo = Element(driver, Control(MyActiveCasesPageNo, DashBoard)).Text;
                if (pageNo == "2")
                {

                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "User is able to View Page 2", role + " Load Next Page2");

                }
                else
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "User is not able to View Page 2", role + " Load Next Page2");
                }
            }
            else
            {
                ThinkTime(1);
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "User is not able to Click LoadNext Page Button", role + "Load Next Page2");
            }


        }

        /// <summary>
        /// Method to check load previous button on dashboard in CRM Application Records 
        /// </summary>
        /// <param name="driver"></param>
        /// <param name="testInReport"></param>
        /// <param name="testName"></param>
        /// <param name="role"></param>
        public void LoadPreviousPageButton(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string role, string DashBoard, String CasesWithOtherTeam, String LoadPreviousPage, String LoadPreviousPage1, String MyActiveCasesPageNo)
        {

            driver.SwitchTo().DefaultContent();
            ThinkTime(2);
            AutomaticFrameSwitch(driver);
            ThinkTime(2);
            MoveToElement(driver, Control(CasesWithOtherTeam, DashBoard));

            if (Elements(driver, Control(LoadPreviousPage, DashBoard)) > 0)
            {
                Element(driver, Control(LoadPreviousPage, DashBoard)).Click();
                ThinkTime(2);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "User is able to View Previous Page", "LSC Manager- Load Previous Page");
                MoveToElement(driver, Control(LoadPreviousPage1, DashBoard));
                String pageNo = Element(driver, Control(MyActiveCasesPageNo, DashBoard)).Text;
                if (pageNo == "1")
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "User is able to View Page 1", "LSC Manager- Load Previous Page2");

                }
                else
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "User is not able to View Page 1", "LSC Manager- Load Previous Page2");
                }

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "User is not able to View Previous Page", "LSC Manager- Load Previous Page");
            }
            ThinkTime(2);

        }



        /// <summary>
        /// Method to check view record button of the charts on dashboard
        /// </summary>
        /// <param name="driver"></param>
        /// <param name="testInReport"></param>
        /// <param name="testName"></param>
        /// <param name="caseNumber"></param>
        /// <param name="role"></param>
        // 
        public void viewRecordButton(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, String role, String dashBoard, String CasesByBussiness_Record, String TopTen_Graph)
        {

            driver.SwitchTo().DefaultContent();
            ThinkTime(2);
            AutomaticFrameSwitch(driver);
            ThinkTime(2);


            SwitchToFrame(driver, "dashboardFrame");
            ThinkTime(2);

            JSClick(driver, Control(CasesByBussiness_Record, dashBoard));
            ThinkTime(3);
            string parentWindowHandle = driver.CurrentWindowHandle;
            WindowHandling(driver);
            ThinkTime(1);
            driver.Manage().Window.Maximize();
            ThinkTime(1);
            driver.SwitchTo().DefaultContent();
            ThinkTime(2);
            driver.SwitchTo().Frame("contentIFrame0");
            driver.Close();
            ThinkTime(1);
            Console.WriteLine("closed window");
            WindowHandling(driver, parentWindowHandle);
            ThinkTime(1);
            Console.WriteLine("parent window");

            driver.SwitchTo().DefaultContent();
            ThinkTime(2);
            AutomaticFrameSwitch(driver);
            ThinkTime(2);
            SwitchToFrame(driver, "dashboardFrame");
            ThinkTime(2);

            Element(driver, Control(TopTen_Graph, dashBoard)).Click();
            ThinkTime(3);
            // string parentWindowHandle = driver.CurrentWindowHandle;
            WindowHandling(driver);
            ThinkTime(1);
            driver.Manage().Window.Maximize();
            ThinkTime(1);
            driver.SwitchTo().DefaultContent();
            ThinkTime(2);
            driver.SwitchTo().Frame("contentIFrame0");
            ThinkTime(2);
            driver.Close();
            ThinkTime(1);
            Console.WriteLine("closed window");
            WindowHandling(driver, parentWindowHandle);
            ThinkTime(1);
            Console.WriteLine("parent window");

        }




        ///Devi
        /// <summary>
        /// Method to check the case status
        /// </summary>
        /// <param name="driver"></param>
        /// <param name="testInReport"></param>
        /// <param name="testName"></param>
        /// 
        // /test
        public string VerifyCaseStatusfromCase(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            string currentstatus;
            ThinkTime(3);
            WaitUntil(driver, Control("moreHeaderFieldsButton", "Generic"), 60);
            if (Elements(driver, Control("moreHeaderFieldsButton", "Generic")) > 0)
            {

                ActionsClick(driver, Control("moreHeaderFieldsButton", "Generic"));
                WaitUntil(driver, Control("FlyoutContainer", "Generic"), 180);
                MoveToElement(driver, Control("FlyoutContainer", "Generic"));
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "The More Header Field button is clicked", " & FlyoutContainer is enabled.");
                WaitUntil(driver, Control("statusReasonLabel", "Generic"), 60);
                ElementHighlight(driver, Control("statusReasonLabel", "Generic"));
                MoveToElement(driver, Control("statusReason", "Generic"));
                currentstatus = Element(driver, Control("statusReason", "Generic")).Text.ToString();
                ThinkTime(2);
                return currentstatus;

            }
            else
            {
                currentstatus = "Status is not getting correctly";
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "The More Header Field button is not working properl. ", " So the status reason verification is failed");
                Assert.Fail();
            }
            return currentstatus;
        }







        /// <summary>
        /// Method to check view record button of the charts on dashboard
        /// </summary>
        /// <param name="driver"></param>
        /// <param name="testInReport"></param>
        /// <param name="testName"></param>
        /// <param name="caseNumber"></param>
        /// <param name="role"></param>
        // 
        public void Verify_seeAllRecords(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, String role)
        {
            driver.SwitchTo().DefaultContent();
            ThinkTime(2);



            switch (role)
            {
                case "GSC Agent":

                    SwitchToFrame(driver, "dashboardFrame");
                    if (Element(driver, Control("GSCOpenCases", "GSCDashBoard")).Displayed)
                    {

                        ThinkTime(2);


                        if (Element(driver, Control("GSCOpenCases_PageNo", "GSCDashBoard")).Displayed)
                        {

                            Element(driver, Control("GSCOpenCases_SeeAllRecords", "GSCDashBoard")).Click();
                            int pageNumber = Convert.ToInt32(Element(driver, Control("GSCOpenCases_PageNo", "GSCDashBoard")).Text);
                            Console.WriteLine(pageNumber);
                            ThinkTime(1);
                            string parentWindowHandle1 = driver.CurrentWindowHandle;
                            WindowHandling(driver);
                            ThinkTime(1);
                            driver.Manage().Window.Maximize();
                            ThinkTime(1);
                            driver.SwitchTo().DefaultContent();
                            ThinkTime(2);
                            driver.SwitchTo().Frame("contentIFrame0");
                            if (pageNumber > 14)
                            {
                                int shownRecordsCount = Convert.ToInt32(Element(driver, Control("CasesPageNo_AllRecordWindow", "GSCDashBoard")).Text);
                                if (shownRecordsCount == pageNumber)
                                {
                                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "The total cases are showing on the window correctly", "GSC Agent cases");
                                }
                                else
                                {
                                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "The total cases are not showing on the window correctly", "GSC Agent cases");
                                }

                            }
                            else
                            {
                                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "The cases count is less than 14.", "GSC Agent cases");
                            }
                            driver.Close();
                            ThinkTime(1);
                            Console.WriteLine("closed window");
                            WindowHandling(driver, parentWindowHandle1);
                            ThinkTime(1);
                            Console.WriteLine("parent window");
                        }
                        else
                        {
                            AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Page Number is not dispalying correctly", "GSC Agent cases");

                        }
                    }
                    else
                    {
                        ThinkTime(2);
                        AddLog(driver, testInReport, testName, testDataIteration, "Fail", "My active cases are not showing in GSC agent dashboard", "GSC Agent cases");
                    }



                    break;


                default:
                    Console.WriteLine("No correct role passed");
                    break;
            }
        }


        /// <summary>
        /// Method to check the ribbon button functionality
        /// </summary>
        /// <param name="driver"></param>
        /// <param name="testInReport"></param>
        /// <param name="testName"></param>
        /// <param name="role"></param>
        /// <param name="status"></param>
        /// <param name="dashBoard"></param>
        /// <param name="subCategory"></param>
        /// <param name="caseType"></param>
        // 

        public void VerifyribbonButton(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, String role, String status, String subCategory, String caseType)
        {

            switch (role)
            {
                case "LSC Agent":
                    switch (status)
                    {
                        case "In Progress (with Centre)":
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "Resolve Case", "Visible");
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "New", "Visible");
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "Cancel Case", "Visible");
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "Route", "Visible");
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "Email a Link", "Visible");
                            break;
                        case "In Progress - Update Case":
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "Resolve Case", "Visible");
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "New", "Visible");
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "Cancel Case", "Visible");
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "Route", "Visible");
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "Email a Link", "Visible");
                            break;
                        case "On Hold":
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "Resolve Case", "Visible");
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "New", "Visible");
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "Cancel Case", "Visible");
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "Route", "Visible");
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "Email a Link", "Visible");
                            break;
                        case "Closed by Centre":
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "Resolve Case", "Visible");
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "New", "Visible");
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "Cancel Case", "Visible");
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "Route", "Visible");
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "Email a Link", "Visible");
                            break;
                        case "Updated by Centre":
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "Resolve Case", "Visible");
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "Pass to Centre", "Visible");
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "New", "Visible");
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "Cancel Case", "Visible");
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "Route", "Visible");
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "Email a Link", "Visible");
                            break;
                        case "Resolved":
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "New", "Visible");
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "Update case", "Visible");
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "Re-Open", "Visible");
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "Email a Link", "Visible");
                            break;
                        case "Merged":
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "New", "Visible");
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "Update case", "Visible");
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "Re-Open", "Visible");
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "Email a Link", "Visible");

                            break;
                        case "Cancelled":
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "New", "Visible");
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "Update case", "Visible");
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "Re-Open", "Visible");
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "Email a Link", "Visible");
                            break;
                        default:
                            AddLog(driver, testInReport, testName, testDataIteration, "Fail", "No proper role passed", "Unexpected Status");
                            Assert.Fail("No proper status passed");
                            break;
                    }
                    break;
                case "LSC Manager":
                    switch (status)
                    {
                        case "In Progress (with Centre)":

                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "Resolve Case", "Visible");
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "New", "Visible");
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "Assign", "Visible");
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "Route", "Visible");
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "Email a Link", "Visible");
                            break;
                        case "In Progress - Update Case":
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "Resolve Case", "Visible");
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "New", "Visible");
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "Assign", "Visible");
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "Route", "Visible");
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "Email a Link", "Visible");
                            break;
                        case "On Hold":
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "Resolve Case", "Visible");
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "New", "Visible");
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "Assign", "Visible");
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "Route", "Visible");
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "Email a Link", "Visible");
                            break;
                        case "Closed by Centre":
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "Resolve Case", "Visible");
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "New", "Visible");
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "Assign", "Visible");
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "Route", "Visible");
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "Email a Link", "Visible");
                            break;
                        case "Updated by Centre":
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "Resolve Case", "Visible");
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "Pass to Centre", "Visible");
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "New", "Visible");
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "Assign", "Visible");
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "Route", "Visible");
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "Email a Link", "Visible");
                            break;
                        case "Resolved":
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "New", "Visible");
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "Update case", "Visible");
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "Re-Open", "Visible");
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "Email a Link", "Visible");
                            break;
                        case "Merged":
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "New", "Visible");
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "Update case", "Visible");
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "Re-Open", "Visible");
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "Email a Link", "Visible");
                            break;
                        case "Cancelled":
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "New", "Visible");
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "Update case", "Visible");
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "Re-Open", "Visible");
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "Email a Link", "Visible");
                            break;
                        default:
                            AddLog(driver, testInReport, testName, testDataIteration, "Fail", "No proper role passed", "Unexpected Status");
                            Assert.Fail("No proper status passed");
                            break;
                    }
                    break;

                case "LSC Admin":
                    switch (status)
                    {
                        case "In Progress (with Centre)":
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "Resolve Case", "Visible");
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "Close by Centre", "Visible");
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "New", "Visible");
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "Route", "Visible");
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "Assign", "Visible");
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "Email a Link", "Visible");

                            break;
                        case "In Progress - Update Case":
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "Resolve Case", "Visible");
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "Reply", "Visible");
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "New", "Visible");
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "Assign", "Visible");
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "Cancel Case", "Visible");
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "Email a Link", "Visible");
                            break;
                        case "On Hold":
                        case "Closed by Centre":
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "Resolve Case", "Visible");
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "New", "Visible");
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "Route", "Visible");
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "Assign", "Visible");
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "Email a Link", "Visible");
                            break;
                        case "Updated by Centre":
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "Resolve Case", "Visible");
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "Pass to Centre", "Visible");
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "New", "Visible");
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "Assign", "Visible");
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "Reply", "Visible");
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "Email a Link", "Visible");
                            break;
                        case "Resolved":
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "New", "Visible");
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "Update case", "Visible");
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "Re-Open", "Visible");
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "Email a Link", "Visible");
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "Reply", "Visible");
                            break;
                        case "Merged":
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "New", "Visible");
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "Update case", "Visible");
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "Re-Open", "Visible");
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "Email a Link", "Visible");
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "Reply", "Visible");
                            break;
                        case "Cancelled":
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "New", "Visible");
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "Update case", "Visible");
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "Re-Open", "Visible");
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "Email a Link", "Visible");
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "Reply", "Visible");
                            break;
                        default:
                            AddLog(driver, testInReport, testName, testDataIteration, "Fail", "No proper status passed" + status, "Unexpected Status");
                            Assert.Fail("No proper status passed");
                            break;
                    }
                    break;

                case "GSC Admin":

                    switch (status)
                    {
                        case "In Progress":
                            if (subCategory == "Early Termination")
                            {

                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Reply", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Assign", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Route", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Email a Link", "Visible");

                            }
                            else
                            {
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Reply", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Cancel Case", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Resolve Case", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Pass to Centre", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Assign", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Route", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Email a Link", "Visible");
                            }
                            break;

                        case "In Progress (with Centre)":
                            if (subCategory == "Early Termination")
                            {
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Reply", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Cancel Case", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Close by Centre", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Assign", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Route", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Email a Link", "Visible");
                            }
                            else
                            {
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Reply", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Cancel Case", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Resolve Case", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Close by Centre", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Assign", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Route", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Email a Link", "Visible");

                            }
                            break;

                        case "In Progress - Update Case":

                            if (subCategory == "Early Termination")
                            {
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Cancel Case", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Email a Link", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Reply", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Assign", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Route", "Visible");
                            }
                            else
                            {
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Cancel Case", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Resolve Case", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Email a Link", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Reply", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Assign", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Route", "Visible");
                            }
                            break;
                        case "Closed by Centre":
                            if (subCategory == "Early Termination")
                            {

                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Email a Link", "Visible");

                            }
                            else
                            {
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Resolve Case", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Route", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Email a Link", "Visible");

                            }
                            break;

                        case "Updated by Centre":
                            if (subCategory == "Early Termination")
                            {

                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Reply", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Route", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Email a Link", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Cancel Case", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Assign", "Visible");

                            }
                            else
                            {
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Reply", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Pass to Centre", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Route", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Email a Link", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Cancel Case", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Resolve Case", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Assign", "Visible");

                            }
                            break;


                        case "On Hold":
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "Reply", "Visible");
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "Assign", "Visible");
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "Route", "Visible");
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "Cancel Case", "Visible");
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "Resolve Case", "Visible");
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "Email a Link", "Visible");
                            break;

                        case "Resolved":
                            if (subCategory == "Early Termination")
                            {

                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Reply", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Email a Link", "Visible");

                            }
                            else
                            {
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Reply", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Re-Open", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Update case", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Email a Link", "Visible");


                            }
                            break;
                        case "Merged":
                            if (subCategory == "Early Termination")
                            {

                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Reply", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Email a Link", "Visible");

                            }
                            else
                            {
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Reply", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Re-Open", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Update case", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Email a Link", "Visible");

                            }
                            break;
                        case "Cancelled":
                            if (subCategory == "Early Termination")
                            {

                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Reply", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Email a Link", "Visible");

                            }
                            else
                            {
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Reply", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Re-Open", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Update case", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Email a Link", "Visible");

                            }
                            break;
                        default:
                            AddLog(driver, testInReport, testName, testDataIteration, "Fail", "No proper status passed" + status, "Unexpected Status");
                            Assert.Fail("No proper status passed");
                            break;
                    }
                    break;
                case "GSC Agent":
                    switch (status)
                    {
                        case "In Progress":
                            if (subCategory == "Early Termination")
                            {

                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Route", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Email a Link", "Visible");

                            }
                            else
                            {
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Resolve Case", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Pass to Centre", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Route", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Email a Link", "Visible");
                            }
                            break;
                        case "In Progress (with Centre)":
                            if (subCategory == "Early Termination")
                            {

                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Email a Link", "Visible");

                            }
                            else
                            {
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Resolve Case", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Route", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Email a Link", "Visible");

                            }
                            break;
                        case "In Progress - Update Case":
                            if (subCategory == "Early Termination")
                            {


                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Email a Link", "Visible");

                            }
                            else
                            {
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Resolve Case", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Route", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Email a Link", "Visible");

                            }
                            break;
                        case "Closed by Centre":
                            if (subCategory == "Early Termination")
                            {


                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Email a Link", "Visible");

                            }
                            else
                            {
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Resolve Case", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Route", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Email a Link", "Visible");

                            }
                            break;
                        case "Updated by Centre":
                            if (subCategory == "Early Termination")
                            {


                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Email a Link", "Visible");

                            }
                            else
                            {
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Resolve Case", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Pass to Centre", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Route", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Email a Link", "Visible");

                            }
                            break;


                        case "On Hold":
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "Cancel Case", "Visible");
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "Resolve Case", "Visible");
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "Email a Link", "Visible");
                            break;

                        case "Resolved":
                            if (subCategory == "Early Termination")
                            {

                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Email a Link", "Visible");

                            }
                            else
                            {

                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Re-Open", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Update case", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Email a Link", "Visible");

                            }
                            break;
                        case "Merged":
                            if (subCategory == "Early Termination")
                            {

                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Email a Link", "Visible");

                            }
                            else
                            {
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Re-Open", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Update case", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Email a Link", "Visible");

                            }
                            break;
                        case "Cancelled":
                            if (subCategory == "Early Termination")
                            {

                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Email a Link", "Visible");

                            }
                            else
                            {
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Re-Open", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Update case", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Email a Link", "Visible");

                            }

                            break;
                        default:
                            AddLog(driver, testInReport, testName, testDataIteration, "Fail", "No proper status passed " + status, "Unexpected Status");
                            Assert.Fail("No proper status passed");
                            break;
                    }
                    break;

                case "GSC Manager":
                    switch (status)
                    {
                        case "In Progress":
                            if (subCategory == "Early Termination")
                            {

                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Assign", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Email a Link", "Visible");

                            }
                            else
                            {
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Cancel Case", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Resolve Case", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Pass to Centre", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Assign", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Email a Link", "Visible");
                            }
                            break;
                        case "In Progress (with Centre)":
                            if (subCategory == "Early Termination")
                            {

                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Cancel Case", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Resolve Case", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Email a Link", "Visible");

                            }
                            else
                            {
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Resolve Case", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Cancel Case", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Assign", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Email a Link", "Visible");

                            }
                            break;
                        case "In Progress - Update Case":
                            if (subCategory == "Early Termination")
                            {

                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Cancel Case", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Resolve Case", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Email a Link", "Visible");

                            }
                            else
                            {

                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Resolve Case", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Assign", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Email a Link", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Cancel Case", "Visible");


                            }
                            break;
                        case "Closed by Centre":
                            if (subCategory == "Early Termination")
                            {

                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Cancel Case", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Email a Link", "Visible");

                            }
                            else
                            {

                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Cancel Case", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Resolve Case", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Assign", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Email a Link", "Visible");

                            }
                            break;
                        case "Updated by Centre":
                            if (subCategory == "Early Termination")
                            {
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Pass to Centre", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Cancel Case", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Assign", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Email a Link", "Visible");

                            }
                            else
                            {
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Resolve Case", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Pass to Centre", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Assign", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Email a Link", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Cancel Case", "Visible");


                            }
                            break;

                        case "On Hold":
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "Cancel Case", "Visible");
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "Resolve Case", "Visible");
                            headerBtnVerify(driver, testInReport, testName, testDataIteration, "Email a Link", "Visible");
                            break;

                        case "Resolved":
                            if (subCategory == "Early Termination")
                            {

                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Email a Link", "Visible");

                            }
                            else
                            {
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Update case", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Re-Open", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Email a Link", "Visible");
                            }
                            break;
                        case "Merged":
                            if (subCategory == "Early Termination")
                            {

                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Email a Link", "Visible");

                            }
                            else
                            {
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Re-Open", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Update case", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Email a Link", "Visible");

                            }
                            break;
                        case "Cancelled":
                            if (subCategory == "Early Termination")
                            {

                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Email a Link", "Visible");

                            }
                            else
                            {
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Re-Open", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Update case", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Email a Link", "Visible");

                            }
                            break;
                        default:
                            AddLog(driver, testInReport, testName, testDataIteration, "Fail", "No proper status passed " + status, "Unexpected Status");
                            Assert.Fail("No proper status passed");
                            break;
                    }
                    break;


                case "Centre User":
                    if (caseType == "LSC")
                    {

                        switch (status)
                        {
                            case "In Progress (with Centre)":
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Reply", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Close by Centre", "Visible");
                                break;
                            case "Updated by Centre":
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Reply", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Pass to Centre", "Visible");
                                break;
                            case "In Progress – Update Case":
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Reply", "Visible");
                                break;
                            case "Closed by Centre":
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Reply", "Visible");
                                break;
                            case "On Hold":
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Reply", "Visible");
                                break;
                            case "Resolved":
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Reply", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Re-Open", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Update case", "Visible");
                                break;
                            case "Merged":
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Reply", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Re-Open", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Update case", "Visible");
                                break;
                            case "Cancelled":
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Reply", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Re-Open", "Visible");
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Update case", "Visible");
                                break;
                            default:
                                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "No proper status passed " + status, "Unexpected Status");
                                Assert.Fail("No proper status passed");
                                break;
                        }
                        break;
                    }
                    else if (caseType == "GSC")
                    {
                        switch (status)
                        {
                            case "In Progress":
                                if (subCategory == "Early Termination")
                                {

                                    headerBtnVerify(driver, testInReport, testName, testDataIteration, "Reply", "Visible");
                                }
                                else
                                {
                                    headerBtnVerify(driver, testInReport, testName, testDataIteration, "Reply", "Visible");
                                    headerBtnVerify(driver, testInReport, testName, testDataIteration, "Pass to Centre", "Visible");

                                }
                                break;

                            case "In Progress (with Centre)":
                                if (subCategory == "Early Termination")
                                {
                                    headerBtnVerify(driver, testInReport, testName, testDataIteration, "Reply", "Visible");
                                    headerBtnVerify(driver, testInReport, testName, testDataIteration, "Close by Centre", "Visible");


                                }
                                else
                                {
                                    headerBtnVerify(driver, testInReport, testName, testDataIteration, "Reply", "Visible");
                                    headerBtnVerify(driver, testInReport, testName, testDataIteration, "Close by Centre", "Visible");

                                }
                                break;

                            case "Updated by Centre":
                                if (subCategory == "Early Termination")
                                {
                                    headerBtnVerify(driver, testInReport, testName, testDataIteration, "Reply", "Visible");

                                }
                                else
                                {
                                    headerBtnVerify(driver, testInReport, testName, testDataIteration, "Reply", "Visible");
                                    headerBtnVerify(driver, testInReport, testName, testDataIteration, "Pass to Centre", "Visible");

                                }
                                break;


                            case "In Progress – Update Case":
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Reply", "Visible");
                                break;
                            case "On Hold":
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Reply", "Visible");
                                break;
                            case "Closed by Centre":
                                headerBtnVerify(driver, testInReport, testName, testDataIteration, "Reply", "Visible");
                                break;
                            case "Resolved":
                                if (subCategory == "Early Termination")
                                {

                                    headerBtnVerify(driver, testInReport, testName, testDataIteration, "Reply", "Visible");

                                }
                                else
                                {
                                    headerBtnVerify(driver, testInReport, testName, testDataIteration, "Reply", "Visible");
                                    headerBtnVerify(driver, testInReport, testName, testDataIteration, "Re-Open", "Visible");
                                    headerBtnVerify(driver, testInReport, testName, testDataIteration, "Update case", "Visible");

                                }
                                break;
                            case "Merged":
                                if (subCategory == "Early Termination")
                                {

                                    headerBtnVerify(driver, testInReport, testName, testDataIteration, "Reply", "Visible");

                                }
                                else
                                {
                                    headerBtnVerify(driver, testInReport, testName, testDataIteration, "Reply", "Visible");
                                    headerBtnVerify(driver, testInReport, testName, testDataIteration, "Re-Open", "Visible");
                                    headerBtnVerify(driver, testInReport, testName, testDataIteration, "Update case", "Visible");

                                }
                                break;
                            case "Cancelled":
                                if (subCategory == "Early Termination")
                                {

                                    headerBtnVerify(driver, testInReport, testName, testDataIteration, "Reply", "Visible");

                                }
                                else
                                {
                                    headerBtnVerify(driver, testInReport, testName, testDataIteration, "Reply", "Visible");
                                    headerBtnVerify(driver, testInReport, testName, testDataIteration, "Re-Open", "Visible");
                                    headerBtnVerify(driver, testInReport, testName, testDataIteration, "Update case", "Visible");

                                }
                                break;
                            default:
                                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "No proper status passed " + status, "Unexpected Status");
                                Assert.Fail("The passed status is not correct");
                                break;
                        }
                    }
                    else
                    {
                        AddLog(driver, testInReport, testName, testDataIteration, "Fail", "No proper case type is passed " + status, "Unexpected Case");
                        Assert.Fail("Unexpected case type");
                    }

                    break;
                default:
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", role + "The passed role is not correct", " ");
                    Assert.Fail("The passed role is not correct");
                    break;
            }

        }

        public String CreateNewContactwithlanguageandemail(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string Accountname, string Enteremail)
        {

            // Enter COntact name
            string CurrentTime = System.DateTime.Now.ToString();
            String Lname = "Testcontact";
            string NewContactLname = Lname + CurrentTime;
            ThinkTime(2);
            WaitUntil(driver, Control("Contactbew", "CaseCreation"), 60);
            Element(driver, Control("Contactbew", "CaseCreation")).Click();
            ThinkTime(7);

            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            //HidingPureCloudNew(driver, testInReport, testName, testDataIteration);
            // WaitUntil(driver, Control("OpportunityNewButton", "EnterpriseSales"), 70);

            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            ThinkTime(2);
            WaitUntil(driver, Control("LastName", "CaseCreation"), 30);
            Element(driver, Control("LastName", "CaseCreation")).Click();
            Element(driver, Control("LastName", "CaseCreation")).SendKeys(NewContactLname);

            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Name entered", "Name entered");

            // Enter Account
            ThinkTime(2);
            // scrollDownContactPage(driver, testInReport, testName, testDataIteration);
            ThinkTime(3);
            WaitUntil(driver, Control("TestContactInput", "CaseCreation"), 30);
            MoveToElement(driver, Control("TestContactInput", "CaseCreation"));
            Element(driver, Control("TestContactInput", "CaseCreation")).Click();
            Element(driver, Control("TestContactInput", "CaseCreation")).SendKeys(Accountname);
            ThinkTime(3);
            ThinkTime(2);
            WaitUntil(driver, Control("SelectDDvalue", "CaseCreation"), 30);
            Element(driver, Control("SelectDDvalue", "CaseCreation")).Click();
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Accountname entered", "Accountname entered");

            // Enter email
            ThinkTime(2);

            scrollDownCasePageCUST(driver, testInReport, testName, testDataIteration, "300");
            WaitUntil(driver, Control("emailinput", "CaseCreation"), 60);
            Element(driver, Control("emailinput", "CaseCreation")).Click();
            Element(driver, Control("emailinput", "CaseCreation")).SendKeys("testmail@iwgplc.com");
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "email entered", "email entered");



            // Save Footer
            saveFooter(driver, testInReport, testName, testDataIteration);
            ThinkTime(5);
            ThinkTime(2);
            WaitUntil(driver, Control("GetCaseID", "CaseCreation"), 30);
            string getCaseId = Element(driver, Control("GetCaseID", "CaseCreation")).GetAttribute("title");
            return getCaseId;

        }

        /// <summary>
        /// Method for navigating to left pane & selecting specified app
        /// </summary>
        /// <param name="driver"></param>
        /// <param name="testInReport"></param>
        /// <param name="testName"></param>
        /// <param name="MainDropEntity"></param>
        /// <param name="role"></param>
        /// <param name="entity"></param>
        public void NavigateToMainDropDown(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string MainDropEntity)
        {

            ThinkTime(2);
            WaitUntil(driver, Control("AppLandingPage", "CommonObj"), 180);
            SwitchToFrame(driver, "AppLandingPage");
            ThinkTime(2);
            WaitUntil(driver, Control("selectApp", MainDropEntity, "CommonObj"), 60);
            Element(driver, Control("selectApp", MainDropEntity, "CommonObj")).Click();
            ThinkTime(2);
            //WaitUntil(driver, Control("Dynamics365", "CommonObj"), 120);
            //Element(driver, Control("Dynamics365", "CommonObj")).Click();



        }
        public void ValidateLogin(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {

            ThinkTime(2);
            WaitUntil(driver, Control("AppLandingPage", "CommonObj"), 30);
            if (Elements(driver, Control("AppLandingPage", "CommonObj")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Login Passed", "Login Passed");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Login Failed", "Login Failed");
            }
        }
        public void NavigateToMainDropDown1(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string MainDropEntity)
        {

            ThinkTime(2);
            WaitUntil(driver, Control("AppLandingPage", "CommonObj"), 60);
            SwitchToFrame(driver, "AppLandingPage");
            ThinkTime(2);
            WaitUntil(driver, Control("selectApp", MainDropEntity, "CommonObj"), 60);
            Element(driver, Control("selectApp", MainDropEntity, "CommonObj")).Click();

        }


        public void MoveToAdvanceSettings(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(2);
            WaitUntil(driver, Control("SettingButton", "Generic"), 240);
            MoveToElement(driver, Control("SettingButton", "Generic"));
            Element(driver, Control("SettingButton", "Generic")).Click();
            ThinkTime(2);
            WaitUntil(driver, Control("AdvancedSettings", "Generic"), 240);
            MoveToElement(driver, Control("AdvancedSettings", "Generic"));
            Element(driver, Control("AdvancedSettings", "Generic")).Click();
            ThinkTime(4);
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Advanced settings page is opened", "");

        }

        public void MoveToAdvanceSettingsNew(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(2);
            WaitUntil(driver, Control("SettingButton", "Generic"), 60);
            MoveToElement(driver, Control("SettingButton", "Generic"));
            Element(driver, Control("SettingButton", "Generic")).Click();
            ThinkTime(2);
            WaitUntil(driver, Control("AdvancedSettings", "Generic"), 60);
            MoveToElement(driver, Control("AdvancedSettings", "Generic"));
            Element(driver, Control("AdvancedSettings", "Generic")).Click();
            ThinkTime(4);
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Advanced settings page is opened", "");
            driver.SwitchTo().DefaultContent();
            string parentWindowHandle = driver.CurrentWindowHandle;
            WindowHandling(driver);
        }

        public void MoveToSecurityRole(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string role)
        {
            ThinkTime(2);
            WaitUntil(driver, Control("SettingDropdown", "Generic"), 60);
            MoveToElement(driver, Control("SettingDropdown", "Generic"));
            Element(driver, Control("SettingDropdown", "Generic")).Click();
            ThinkTime(3);

            WaitUntil(driver, Control("SecurityButtonNew", "Generic"), 60);
            MoveToElement(driver, Control("SecurityButtonNew", "Generic"));
            Element(driver, Control("SecurityButtonNew", "Generic")).Click();
            ThinkTime(3);
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "New Settings", "New Settings page");

            SwitchToFrame(driver, "contentIFrame0");
            ThinkTime(3);
            WaitUntil(driver, Control("SecurityLink", "Generic"), 120);
            MoveToElement(driver, Control("SecurityLink", "Generic"));
            Element(driver, Control("SecurityLink", "Generic")).Click();
            ThinkTime(3);

            // SwitchToFrame(driver, "contentIFrame0");
            SwitchToFrame(driver, "ViewArea");
            ThinkTime(3);

            if (Elements(driver, Control("SelectRole", role, "Generic")) > 0)
            {

                MoveToElement(driver, Control("SelectRole", role, "Generic"));
                ActionsClick(driver, Control("SelectRole", role, "Generic"));
                ThinkTime(4);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Role selected", "Role selected page");
            }
            else
            {
                MoveToElement(driver, Control("SettingsNextPage", "Generic"));
                ActionsClick(driver, Control("SettingsNextPage", "Generic"));
                ThinkTime(4);
                WaitUntil(driver, Control("SelectRole", role, "Generic"), 60);
                MoveToElement(driver, Control("SelectRole", role, "Generic"));
                ActionsClick(driver, Control("SelectRole", role, "Generic"));
                ThinkTime(4);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Role selected", "Role selected page");

            }

            //SwitchToFrame(driver, "contentIFrame0");
            driver.SwitchTo().DefaultContent();
            string parentWindowHandle1 = driver.CurrentWindowHandle;
            WindowHandling(driver);

            ThinkTime(3);

            //driver.Manage().Window.Maximize();
            //ThinkTime(3);

        }

        public void MoveToSecurityRoleforInteractionSync(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string role1, string role2)
        {
            ThinkTime(2);
            WaitUntil(driver, Control("SettingDropdown", "Generic"), 60);
            MoveToElement(driver, Control("SettingDropdown", "Generic"));
            Element(driver, Control("SettingDropdown", "Generic")).Click();
            ThinkTime(3);

            WaitUntil(driver, Control("SecurityButtonNew", "Generic"), 60);
            MoveToElement(driver, Control("SecurityButtonNew", "Generic"));
            Element(driver, Control("SecurityButtonNew", "Generic")).Click();
            ThinkTime(3);
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "New Settings", "New Settings page");

            SwitchToFrame(driver, "contentIFrame0");
            ThinkTime(3);
            WaitUntil(driver, Control("SecurityLink", "Generic"), 120);
            MoveToElement(driver, Control("SecurityLink", "Generic"));
            Element(driver, Control("SecurityLink", "Generic")).Click();
            ThinkTime(3);

            // SwitchToFrame(driver, "contentIFrame0");
            SwitchToFrame(driver, "ViewArea");
            ThinkTime(3);

            if (Elements(driver, Control("SelectRole", role1, "Generic")) > 0)
            {

                MoveToElement(driver, Control("SelectRole", role1, "Generic"));
                ActionsClick(driver, Control("SelectRole", role1, "Generic"));
                ThinkTime(4);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Role selected", "Role selected page");
            }
            else if (Elements(driver, Control("SelectRole", role2, "Generic")) > 0)
            {

                MoveToElement(driver, Control("SelectRole", role2, "Generic"));
                ActionsClick(driver, Control("SelectRole", role2, "Generic"));
                ThinkTime(4);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Role selected", "Role selected page");
            }
            else if (Elements(driver, Control("SelectRole", role1, "Generic")) < 0)
            {
                MoveToElement(driver, Control("SettingsNextPage", "Generic"));
                ActionsClick(driver, Control("SettingsNextPage", "Generic"));
                ThinkTime(4);
                WaitUntil(driver, Control("SelectRole", role1, "Generic"), 60);
                MoveToElement(driver, Control("SelectRole", role1, "Generic"));
                ActionsClick(driver, Control("SelectRole", role1, "Generic"));
                ThinkTime(4);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Role selected", "Role selected page");

            }
            else
            {
                MoveToElement(driver, Control("SettingsNextPage", "Generic"));
                ActionsClick(driver, Control("SettingsNextPage", "Generic"));
                ThinkTime(4);
                WaitUntil(driver, Control("SelectRole", role2, "Generic"), 60);
                MoveToElement(driver, Control("SelectRole", role2, "Generic"));
                ActionsClick(driver, Control("SelectRole", role2, "Generic"));
                ThinkTime(4);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Role selected", "Role selected page");

            }

            //SwitchToFrame(driver, "contentIFrame0");
            driver.SwitchTo().DefaultContent();
            string parentWindowHandle1 = driver.CurrentWindowHandle;
            WindowHandling(driver);

            ThinkTime(3);

            //driver.Manage().Window.Maximize();
            //ThinkTime(3);

        }

        public void ValidatePermIWGInternal(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string tab)
        {
            ThinkTime(2);
            WaitUntil(driver, Control("SecurityTabs", tab, "Generic"), 120);
            MoveToElement(driver, Control("SecurityTabs", tab, "Generic"));
            Element(driver, Control("SecurityTabs", tab, "Generic")).Click();

            ThinkTime(4);
            WaitUntil(driver, Control("SecurityFields", "Generic"), 30);

            //Validating Create for user level permission
            string[] RoleCreateUserPrv = { "Action Card", "Action Card User Settings", "Data Import", "Import Source File", "Note", "Opportunity Relationship", "Report", "Saved View", "Sync Error", "User Chart", "User Dashboard", "User Entity Instance Data", "User Entity UI Settings" };
            string PerUserCreate1 = "The Create privilege on "; string PerUserCreate2 = " is set to User, click to change.";
            int arraysizeCreateUser = RoleCreateUserPrv.Length;


            for (int i = 0; i < arraysizeCreateUser; i++)
            {

                if (arraysizeCreateUser == 0)
                { break; }
                //String TitleValue = Element(driver, By.XPath("//span[text()='"+RoleCreateUserPrv[i]+"']//following::img['"+j+"']")).GetAttribute("title");
                string PerUserMerge = PerUserCreate1 + RoleCreateUserPrv[i] + PerUserCreate2;
                string getRoleCreateUserPrv = Element(driver, Control("CreatePermObj", RoleCreateUserPrv[i], "CommonObj")).GetAttribute("title");
                if (getRoleCreateUserPrv == PerUserMerge)
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "The Create privilege on " + RoleCreateUserPrv[i] + " is set to User and its correct", "The Create privilege on " + RoleCreateUserPrv[i] + " is set to User and its correct");
                }
                else
                {
                    //Assert.Fail("incorrect Permission");
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Permission for the entity " + RoleCreateUserPrv[i] + " is not correct", "Permission for the entity " + RoleCreateUserPrv[i] + " is not correct");
                }
            }

            //Validating Create for None permission
            string[] RoleCreateNonePrv = { "Announcement", "Category", "Connection", "Connection Role", "Data Performance Dashboard", "Duplicate Detection Rule", "Language", "Queue", "Relationship Role", "SharePoint Site", "Subject" };
            string PerNoneCreate1 = "The Create privilege on "; string PerNoneCreate2 = " is set to None Selected, click to change.";
            int arraysizeCreateNone = RoleCreateNonePrv.Length;
            for (int i = 0; i < arraysizeCreateNone; i++)
            {
                if (arraysizeCreateNone == 0)
                { break; }
                string PerNoneMerge = PerNoneCreate1 + RoleCreateNonePrv[i] + PerNoneCreate2;
                string getRoleCreateNonePrv = Element(driver, Control("CreatePermObj", RoleCreateNonePrv[i], "CommonObj")).GetAttribute("title");
                if (getRoleCreateNonePrv == PerNoneMerge)
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "The Create privilege on " + RoleCreateNonePrv[i] + " is set to None Selected and its correct", "Permission for the entity " + RoleCreateNonePrv[i] + " is correct");
                }
                else
                {
                    //Assert.Fail("incorrect Permission");
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Permission for the entity " + RoleCreateNonePrv[i] + " is not correct", "Permission for the entity " + RoleCreateNonePrv[i] + " is not correct");
                }
            }

            //Validating Create for Business unit level permission
            string[] RoleCreateBUPrv = { "Activity", "Data Map", "Lead" };
            string PerBUCreate1 = "The Create privilege on "; string PerBUCreate2 = " is set to Business Unit, click to change.";
            int arraysizeCreateBU = RoleCreateBUPrv.Length;
            for (int i = 0; i < arraysizeCreateBU; i++)
            {
                if (arraysizeCreateBU == 0)
                { break; }
                string PerBUMerge = PerBUCreate1 + RoleCreateBUPrv[i] + PerBUCreate2;
                string getRoleCreateBUPrv = Element(driver, Control("CreatePermObj", RoleCreateBUPrv[i], "CommonObj")).GetAttribute("title");
                if (getRoleCreateBUPrv == PerBUMerge)
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "The Create privilege on " + RoleCreateBUPrv[i] + " is set to None Selected and its correct", "Permission for the entity " + RoleCreateBUPrv[i] + " is correct");
                }
                else
                {
                    //Assert.Fail("incorrect Permission");
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Permission for the entity " + RoleCreateBUPrv[i] + " is not correct", "Permission for the entity " + RoleCreateBUPrv[i] + " is not correct");
                }
            }

            //Validating Create for Organizational level permission
            string[] RoleCreateOrgPrv = { "Account", "Contact", "Document Location", "Opportunity", "Post", "Trace" };
            string PerOrgCreate1 = "The Create privilege on "; string PerOrgCreate2 = " is set to Organization, click to change.";
            int arraysizeCreateOrg = RoleCreateOrgPrv.Length;
            for (int i = 0; i < arraysizeCreateOrg; i++)
            {
                if (arraysizeCreateOrg == 0)
                { break; }
                string PerOrgMerge = PerOrgCreate1 + RoleCreateOrgPrv[i] + PerOrgCreate2;
                string getRoleCreateOrgPrv = Element(driver, Control("CreatePermObj", RoleCreateOrgPrv[i], "CommonObj")).GetAttribute("title");
                if (getRoleCreateOrgPrv == PerOrgMerge)
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "The Create privilege on " + RoleCreateOrgPrv[i] + " is set to None Selected and its correct", "Permission for the entity " + RoleCreateOrgPrv[i] + " is correct");
                }
                else
                {
                    //Assert.Fail("incorrect Permission");
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Permission for the entity " + RoleCreateOrgPrv[i] + " is not correct", "Permission for the entity " + RoleCreateOrgPrv[i] + " is not correct");
                }
            }

            //Validating Create for Parent Child Business unit level permission
            string[] RoleCreateParBUPrv = { };
            string PerParBUCreate1 = "The Create privilege on "; string PerParBUCreate2 = " is set to Parent: Child Business Units, click to change.";
            int arraysizeCreateParBU = RoleCreateParBUPrv.Length;

            for (int i = 0; i < arraysizeCreateParBU; i++)
            {
                if (arraysizeCreateParBU == 0)
                { break; }
                string PerParBUMerge = PerParBUCreate1 + RoleCreateParBUPrv[i] + PerParBUCreate2;
                string getRoleCreateParBUPrv = Element(driver, Control("CreatePermObj", RoleCreateParBUPrv[i], "CommonObj")).GetAttribute("title");
                if (getRoleCreateParBUPrv == PerParBUMerge)
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "The Create privilege on " + RoleCreateParBUPrv[i] + " is set to None Selected and its correct", "Permission for the entity " + RoleCreateParBUPrv[i] + " is correct");
                }
                else
                {
                    //Assert.Fail("incorrect Permission");
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Permission for the entity " + RoleCreateParBUPrv[i] + " is not correct", "Permission for the entity " + RoleCreateParBUPrv[i] + " is not correct");
                }
            }
            // --------
            // End of Create 
            //---------

            //Validating Read for user level permission

            string[] RoleReadUserPrv = { "Action Card", "Action Card User Settings", "Data Import", "Import Source File", "Queue", "Report", "Saved View", "Sync Error", "User Chart", "User Dashboard", "User Entity Instance Data", "User Entity UI Settings" };
            string PerUserRead1 = "The Read privilege on "; string PerUserRead2 = " is set to User, click to change.";
            int arraysizeReadUser = RoleReadUserPrv.Length;


            for (int i = 0; i < arraysizeReadUser; i++)
            {
                if (arraysizeReadUser == 0)
                { break; }
                string PerUserMerge = PerUserRead1 + RoleReadUserPrv[i] + PerUserRead2;
                string getRoleReadUserPrv = Element(driver, Control("ReadPermObj", RoleReadUserPrv[i], "CommonObj")).GetAttribute("title");
                if (getRoleReadUserPrv == PerUserMerge)
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "The Read privilege on " + RoleReadUserPrv[i] + " is set to User and its correct", "The Read privilege on " + RoleReadUserPrv[i] + " is set to User and its correct");
                }
                else
                {
                    //Assert.Fail("incorrect Permission");
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Permission for the entity " + RoleReadUserPrv[i] + " is not correct", "Permission for the entity " + RoleReadUserPrv[i] + " is not correct");
                }
            }

            //Validating Read for None permission
            string[] RoleReadNonePrv = { "Data Performance Dashboard" };
            string PerNoneRead1 = "The Read privilege on "; string PerNoneRead2 = " is set to None Selected, click to change.";
            int arraysizeReadNone = RoleReadNonePrv.Length;
            for (int i = 0; i < arraysizeReadNone; i++)
            {
                if (arraysizeReadNone == 0)
                { break; }
                string PerNoneMerge = PerNoneRead1 + RoleReadNonePrv[i] + PerNoneRead2;
                string getRoleReadNonePrv = Element(driver, Control("ReadPermObj", RoleReadNonePrv[i], "CommonObj")).GetAttribute("title");
                if (getRoleReadNonePrv == PerNoneMerge)
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "The Read privilege on " + RoleReadNonePrv[i] + " is set to None Selected and its correct", "Permission for the entity " + RoleReadNonePrv[i] + " is correct");
                }
                else
                {
                    //Assert.Fail("incorrect Permission");
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Permission for the entity " + RoleReadNonePrv[i] + " is not correct", "Permission for the entity " + RoleReadNonePrv[i] + " is not correct");
                }
            }

            //Validating Read for Business unit level permission
            string[] RoleReadBUPrv = { };
            string PerBURead1 = "The Read privilege on "; string PerBURead2 = " is set to Business Unit, click to change.";
            int arraysizeReadBU = RoleReadBUPrv.Length;
            for (int i = 0; i < arraysizeReadBU; i++)
            {
                if (arraysizeReadBU == 0)
                { break; }
                string PerBUMerge = PerBURead1 + RoleReadBUPrv[i] + PerBURead2;
                string getRoleReadBUPrv = Element(driver, Control("ReadPermObj", RoleReadBUPrv[i], "CommonObj")).GetAttribute("title");
                if (getRoleReadBUPrv == PerBUMerge)
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "The Read privilege on " + RoleReadBUPrv[i] + " is set to None Selected and its correct", "Permission for the entity " + RoleReadBUPrv[i] + " is correct");
                }
                else
                {
                    //Assert.Fail("incorrect Permission");
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Permission for the entity " + RoleReadBUPrv[i] + " is not correct", "Permission for the entity " + RoleReadBUPrv[i] + " is not correct");
                }
            }

            //Validating Read for Organizational level permission
            string[] RoleReadOrgPrv = { "Account", "Activity", "Announcement", "Category", "Connection", "Connection Role", "Contact", "Data Map", "Document Location", "Duplicate Detection Rule", "Language", "Lead", "Note", "Opportunity", "Opportunity Relationship", "Post", "Relationship Role", "SharePoint Site", "Subject", "Trace" };
            string PerOrgRead1 = "The Read privilege on "; string PerOrgRead2 = " is set to Organization, click to change.";
            int arraysizeReadOrg = RoleReadOrgPrv.Length;
            for (int i = 0; i < arraysizeReadOrg; i++)
            {
                if (arraysizeReadOrg == 0)
                { break; }
                string PerOrgMerge = PerOrgRead1 + RoleReadOrgPrv[i] + PerOrgRead2;
                string getRoleReadOrgPrv = Element(driver, Control("ReadPermObj", RoleReadOrgPrv[i], "CommonObj")).GetAttribute("title");
                if (getRoleReadOrgPrv == PerOrgMerge)
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "The Read privilege on " + RoleReadOrgPrv[i] + " is set to None Selected and its correct", "Permission for the entity " + RoleReadOrgPrv[i] + " is correct");
                }
                else
                {
                    //Assert.Fail("incorrect Permission");
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Permission for the entity " + RoleReadOrgPrv[i] + " is not correct", "Permission for the entity " + RoleReadOrgPrv[i] + " is not correct");
                }
            }

            //Validating Read for Parent Child Business unit level permission
            string[] RoleReadParBUPrv = { };
            string PerParBURead1 = "The Read privilege on "; string PerParBURead2 = " is set to Parent: Child Business Units, click to change.";
            int arraysizeReadParBU = RoleReadParBUPrv.Length;

            for (int i = 0; i < arraysizeReadParBU; i++)
            {
                if (arraysizeReadParBU == 0)
                { break; }
                string PerParBUMerge = PerParBURead1 + RoleReadParBUPrv[i] + PerParBURead2;
                string getRoleReadParBUPrv = Element(driver, Control("ReadPermObj", RoleReadParBUPrv[i], "CommonObj")).GetAttribute("title");
                if (getRoleReadParBUPrv == PerParBUMerge)
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "The Read privilege on " + RoleReadParBUPrv[i] + " is set to None Selected and its correct", "Permission for the entity " + RoleReadParBUPrv[i] + " is correct");
                }
                else
                {
                    //Assert.Fail("incorrect Permission");
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Permission for the entity " + RoleReadParBUPrv[i] + " is not correct", "Permission for the entity " + RoleReadParBUPrv[i] + " is not correct");
                }
            }


            // --------
            // End of Read 
            //---------



            //Validating Write for user level permission
            string[] RoleWriteUserPrv = { "Action Card", "Action Card User Settings", "Data Import", "Import Source File", "Note", "Opportunity Relationship", "Report", "Saved View", "Sync Error", "User Chart", "User Dashboard", "User Entity Instance Data", "User Entity UI Settings" };
            string PerUserWrite1 = "The Write privilege on "; string PerUserWrite2 = " is set to User, click to change.";
            int arraysizeWriteUser = RoleWriteUserPrv.Length;


            for (int i = 0; i < arraysizeWriteUser; i++)
            {
                if (arraysizeWriteUser == 0)
                { break; }
                string PerUserMerge = PerUserWrite1 + RoleWriteUserPrv[i] + PerUserWrite2;
                string getRoleWriteUserPrv = Element(driver, Control("WritePermObj", RoleWriteUserPrv[i], "CommonObj")).GetAttribute("title");
                string getRoleDelUserPrv = Element(driver, Control("DelPermObj", RoleWriteUserPrv[i], "CommonObj")).GetAttribute("title");
                string getRoleAppUserPrv = Element(driver, Control("AppPermObj", RoleWriteUserPrv[i], "CommonObj")).GetAttribute("title");
                string getRoleAppToUserPrv = Element(driver, Control("AppToPermObj", RoleWriteUserPrv[i], "CommonObj")).GetAttribute("title");
                string getRoleAssignUserPrv = Element(driver, Control("AssignPermObj", RoleWriteUserPrv[i], "CommonObj")).GetAttribute("title");
                string getRoleShareUserPrv = Element(driver, Control("SharePermObj", RoleWriteUserPrv[i], "CommonObj")).GetAttribute("title");


                if (getRoleWriteUserPrv == PerUserMerge)
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "The Write privilege on " + RoleWriteUserPrv[i] + " is set to User and its correct", "The Write privilege on " + RoleWriteUserPrv[i] + " is set to User and its correct");
                }
                else if (getRoleDelUserPrv == PerUserMerge)
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "The Write privilege on " + RoleWriteUserPrv[i] + " is set to User and its correct", "The Write privilege on " + RoleWriteUserPrv[i] + " is set to User and its correct");
                }
                else if (getRoleDelUserPrv == PerUserMerge)
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "The Write privilege on " + RoleWriteUserPrv[i] + " is set to User and its correct", "The Write privilege on " + RoleWriteUserPrv[i] + " is set to User and its correct");
                }
                else if (getRoleAppUserPrv == PerUserMerge)
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "The Write privilege on " + RoleWriteUserPrv[i] + " is set to User and its correct", "The Write privilege on " + RoleWriteUserPrv[i] + " is set to User and its correct");
                }
                else if (getRoleAppToUserPrv == PerUserMerge)
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "The Write privilege on " + RoleWriteUserPrv[i] + " is set to User and its correct", "The Write privilege on " + RoleWriteUserPrv[i] + " is set to User and its correct");
                }

                else if (getRoleAssignUserPrv == PerUserMerge)
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "The Write privilege on " + RoleWriteUserPrv[i] + " is set to User and its correct", "The Write privilege on " + RoleWriteUserPrv[i] + " is set to User and its correct");
                }
                else if (getRoleShareUserPrv == PerUserMerge)
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "The Write privilege on " + RoleWriteUserPrv[i] + " is set to User and its correct", "The Write privilege on " + RoleWriteUserPrv[i] + " is set to User and its correct");
                }

                else
                {
                    //Assert.Fail("incorrect Permission");
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Permission for the entity " + RoleWriteUserPrv[i] + " is not correct", "Permission for the entity " + RoleWriteUserPrv[i] + " is not correct");
                }
            }

            //Validating Write for None permission
            string[] RoleWriteNonePrv = { "Announcement", "Category", "Connection", "Connection Role", "Data Performance Dashboard", "Duplicate Detection Rule", "Language", "Queue", "Relationship Role", "SharePoint Site", "Subject" };
            string PerNoneWrite1 = "The Write privilege on "; string PerNoneWrite2 = " is set to None Selected, click to change.";
            int arraysizeWriteNone = RoleWriteNonePrv.Length;
            for (int i = 0; i < arraysizeWriteNone; i++)
            {
                if (arraysizeWriteNone == 0)
                { break; }
                string PerNoneMerge = PerNoneWrite1 + RoleWriteNonePrv[i] + PerNoneWrite2;
                string getRoleWriteNonePrv = Element(driver, Control("WritePermObj", RoleWriteNonePrv[i], "CommonObj")).GetAttribute("title");
                if (getRoleWriteNonePrv == PerNoneMerge)
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "The Write privilege on " + RoleWriteNonePrv[i] + " is set to None Selected and its correct", "Permission for the entity " + RoleWriteNonePrv[i] + " is correct");
                }
                else
                {
                    //Assert.Fail("incorrect Permission");
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Permission for the entity " + RoleWriteNonePrv[i] + " is not correct", "Permission for the entity " + RoleWriteNonePrv[i] + " is not correct");
                }
            }

            //Validating Write for Business unit level permission
            string[] RoleWriteBUPrv = { "Data Map" };
            string PerBUWrite1 = "The Write privilege on "; string PerBUWrite2 = " is set to Business Unit, click to change.";
            int arraysizeWriteBU = RoleWriteBUPrv.Length;
            for (int i = 0; i < arraysizeWriteBU; i++)
            {
                if (arraysizeWriteBU == 0)
                { break; }
                string PerBUMerge = PerBUWrite1 + RoleWriteBUPrv[i] + PerBUWrite2;
                string getRoleWriteBUPrv = Element(driver, Control("WritePermObj", RoleWriteBUPrv[i], "CommonObj")).GetAttribute("title");
                if (getRoleWriteBUPrv == PerBUMerge)
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "The Write privilege on " + RoleWriteBUPrv[i] + " is set to None Selected and its correct", "Permission for the entity " + RoleWriteBUPrv[i] + " is correct");
                }
                else
                {
                    //Assert.Fail("incorrect Permission");
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Permission for the entity " + RoleWriteBUPrv[i] + " is not correct", "Permission for the entity " + RoleWriteBUPrv[i] + " is not correct");
                }
            }

            //Validating Write for Organizational level permission
            string[] RoleWriteOrgPrv = { "Account", "Activity", "Contact", "Document Location", "Lead", "Opportunity" };
            string PerOrgWrite1 = "The Write privilege on "; string PerOrgWrite2 = " is set to Organization, click to change.";
            int arraysizeWriteOrg = RoleWriteOrgPrv.Length;
            for (int i = 0; i < arraysizeWriteOrg; i++)
            {
                if (arraysizeWriteOrg == 0)
                { break; }
                string PerOrgMerge = PerOrgWrite1 + RoleWriteOrgPrv[i] + PerOrgWrite2;
                string getRoleWriteOrgPrv = Element(driver, Control("WritePermObj", RoleWriteOrgPrv[i], "CommonObj")).GetAttribute("title");
                if (getRoleWriteOrgPrv == PerOrgMerge)
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "The Write privilege on " + RoleWriteOrgPrv[i] + " is set to None Selected and its correct", "Permission for the entity " + RoleWriteOrgPrv[i] + " is correct");
                }
                else
                {
                    //Assert.Fail("incorrect Permission");
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Permission for the entity " + RoleWriteOrgPrv[i] + " is not correct", "Permission for the entity " + RoleWriteOrgPrv[i] + " is not correct");
                }
            }

            //Validating Write for Parent Child Business unit level permission
            string[] RoleWriteParBUPrv = { };
            string PerParBUWrite1 = "The Write privilege on "; string PerParBUWrite2 = " is set to Parent: Child Business Units, click to change.";
            int arraysizeWriteParBU = RoleWriteParBUPrv.Length;

            for (int i = 0; i < arraysizeWriteParBU; i++)
            {
                if (arraysizeWriteParBU == 0)
                { break; }
                string PerParBUMerge = PerParBUWrite1 + RoleWriteParBUPrv[i] + PerParBUWrite2;
                string getRoleWriteParBUPrv = Element(driver, Control("WritePermObj", RoleWriteParBUPrv[i], "CommonObj")).GetAttribute("title");
                if (getRoleWriteParBUPrv == PerParBUMerge)
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "The Write privilege on " + RoleWriteParBUPrv[i] + " is set to None Selected and its correct", "Permission for the entity " + RoleWriteParBUPrv[i] + " is correct");
                }
                else
                {
                    //Assert.Fail("incorrect Permission");
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Permission for the entity " + RoleWriteParBUPrv[i] + " is not correct", "Permission for the entity " + RoleWriteParBUPrv[i] + " is not correct");
                }
            }


        }
        public void GoToSecurityTab(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string tab)
        {
            ThinkTime(2);
            WaitUntil(driver, Control("SecurityTabs", tab, "Generic"), 120);
            MoveToElement(driver, Control("SecurityTabs", tab, "Generic"));
            Element(driver, Control("SecurityTabs", tab, "Generic")).Click();

            ThinkTime(4);
            WaitUntil(driver, Control("SecurityFields", "Generic"), 30);
        }

        public void ValidatePermIWGInternalCreate(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {

            //Validating Create for user level permission
            string[] RoleCreateUserPrv = { "Action Card", "Action Card User Settings", "Data Import", "Import Source File", "Note", "Opportunity Relationship", "Report", "Saved View", "Sync Error", "User Chart", "User Dashboard", "User Entity Instance Data", "User Entity UI Settings" };
            string PerUserCreate1 = "The Create privilege on "; string PerUserCreate2 = " is set to User, click to change.";
            int arraysizeCreateUser = RoleCreateUserPrv.Length;


            for (int i = 0; i < arraysizeCreateUser; i++)
            {

                if (arraysizeCreateUser == 0)
                { break; }
                for (int m = 1; m < 8; m++)
                {
                    string PerParUserMerge = PerUserCreate1 + RoleCreateUserPrv[i] + PerUserCreate2;

                    String TitleValue = Element(driver, By.XPath("//span[text()='" + RoleCreateUserPrv[i] + "']//following::img[ " + m + " ]")).GetAttribute("title");
                    if (TitleValue == PerParUserMerge)
                    {
                        AddLog(driver, testInReport, testName, testDataIteration, "Pass", "The Create privilege on " + RoleCreateUserPrv[i] + " is set to Parnt and its correct", "Permission for the entity " + RoleCreateUserPrv[i] + " is correct");
                        break;
                    }
                    else if (TitleValue != PerParUserMerge && m == 7)
                    {
                        //Assert.Fail("Wrong Permission");
                        AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Create Permission for the entity " + RoleCreateUserPrv[i] + " is not correct and should be" + PerParUserMerge, "Permission for the entity " + RoleCreateUserPrv[i] + " is not correct");
                    }
                }
            }
            //Validating Create for Org level permission
            string[] RoleCreateOrgPrv = { "Account", "Contact", "Document Location", "Opportunity", "Post", "Trace" };
            string PerOrgCreate1 = "The Create privilege on "; string PerOrgCreate2 = " is set to Organization, click to change.";
            int arraysizeCreateOrg = RoleCreateOrgPrv.Length;


            for (int i = 0; i < arraysizeCreateOrg; i++)
            {

                if (arraysizeCreateOrg == 0)
                { break; }
                for (int m = 1; m < 8; m++)
                {
                    string PerParOrgMerge = PerOrgCreate1 + RoleCreateOrgPrv[i] + PerOrgCreate2;

                    String TitleValue = Element(driver, By.XPath("//span[text()='" + RoleCreateOrgPrv[i] + "']//following::img[ " + m + " ]")).GetAttribute("title");
                    if (TitleValue == PerParOrgMerge)
                    {
                        AddLog(driver, testInReport, testName, testDataIteration, "Pass", "The Create privilege on " + RoleCreateOrgPrv[i] + " is set to Parnt and its correct", "Permission for the entity " + RoleCreateOrgPrv[i] + " is correct");
                        break;
                    }
                    else if (TitleValue != PerParOrgMerge && m == 7)
                    {
                        //Assert.Fail("Wrong Permission");
                        AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Create Permission for the entity " + RoleCreateOrgPrv[i] + " is not correct and should be" + PerParOrgMerge, "Permission for the entity " + RoleCreateOrgPrv[i] + " is not correct");
                    }

                }

            }
            //Validating Create for None level permission
            string[] RoleCreateNonePrv = { "Announcement", "Category", "Connection", "Connection Role", "Data Performance Dashboard", "Duplicate Detection Rule", "Language", "Queue", "Relationship Role", "SharePoint Site", "Subject" };
            string PerNoneCreate1 = "The Create privilege on "; string PerNoneCreate2 = " is set to None Selected, click to change.";
            int arraysizeCreateNone = RoleCreateNonePrv.Length;


            for (int i = 0; i < arraysizeCreateNone; i++)
            {

                if (arraysizeCreateNone == 0)
                { break; }
                for (int m = 1; m < 8; m++)
                {
                    string PerParNoneMerge = PerNoneCreate1 + RoleCreateNonePrv[i] + PerNoneCreate2;

                    String TitleValue = Element(driver, By.XPath("//span[text()='" + RoleCreateNonePrv[i] + "']//following::img[ " + m + " ]")).GetAttribute("title");
                    if (TitleValue == PerParNoneMerge)
                    {
                        AddLog(driver, testInReport, testName, testDataIteration, "Pass", "The Create privilege on " + RoleCreateNonePrv[i] + " is set to Parnt and its correct", "Permission for the entity " + RoleCreateNonePrv[i] + " is correct");
                        break;
                    }
                    else if (TitleValue != PerParNoneMerge && m == 7)
                    {
                        //Assert.Fail("Wrong Permission");
                        AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Create Permission for the entity " + RoleCreateNonePrv[i] + " is not correct and should be" + PerParNoneMerge, "Permission for the entity " + RoleCreateNonePrv[i] + " is not correct");
                    }
                }
            }
            //Validating Create for BU level permission
            string[] RoleCreateBUPrv = { "Activity", "Data Map", "Lead" };
            string PerBUCreate1 = "The Create privilege on "; string PerBUCreate2 = " is set to Business Unit, click to change.";
            int arraysizeCreateBU = RoleCreateBUPrv.Length;


            for (int i = 0; i < arraysizeCreateBU; i++)
            {

                if (arraysizeCreateBU == 0)
                { break; }






                for (int m = 1; m < 8; m++)
                {
                    string PerParBUMerge = PerBUCreate1 + RoleCreateBUPrv[i] + PerBUCreate2;

                    String TitleValue = Element(driver, By.XPath("//span[text()='" + RoleCreateBUPrv[i] + "']//following::img[ " + m + " ]")).GetAttribute("title");
                    if (TitleValue == PerParBUMerge)
                    {
                        AddLog(driver, testInReport, testName, testDataIteration, "Pass", "The Create privilege on " + RoleCreateBUPrv[i] + " is set to Parnt and its correct", "Permission for the entity " + RoleCreateBUPrv[i] + " is correct");
                        break;
                    }
                    else if (TitleValue != PerParBUMerge && m == 7)
                    {
                        //Assert.Fail("Wrong Permission");
                        AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Create Permission for the entity " + RoleCreateBUPrv[i] + " is not correct and should be" + PerParBUMerge, "Permission for the entity " + RoleCreateBUPrv[i] + " is not correct");
                    }
                }
            }

            //Validating Create for Parnt level permission
            string[] RoleCreateParntPrv = { };
            string PerParntCreate1 = "The Create privilege on "; string PerParntCreate2 = " is set to Parent: Child Business Units, click to change.";
            int arraysizeCreateParnt = RoleCreateParntPrv.Length;


            for (int i = 0; i < arraysizeCreateParnt; i++)
            {

                if (arraysizeCreateParnt == 0)
                { break; }
                for (int m = 1; m < 8; m++)
                {
                    string PerParParntMerge = PerParntCreate1 + RoleCreateParntPrv[i] + PerParntCreate2;

                    String TitleValue = Element(driver, By.XPath("//span[text()='" + RoleCreateParntPrv[i] + "']//following::img[ " + m + " ]")).GetAttribute("title");

                    if (TitleValue == PerParParntMerge)
                    {
                        AddLog(driver, testInReport, testName, testDataIteration, "Pass", "The Create privilege on " + RoleCreateParntPrv[i] + " is set to Parnt and its correct", "Permission for the entity " + RoleCreateParntPrv[i] + " is correct");
                        break;
                    }
                    else if (TitleValue != PerParParntMerge && m == 7)
                    {
                        //Assert.Fail("Wrong Permission");
                        AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Create Permission for the entity " + RoleCreateParntPrv[i] + " is not correct and should be" + PerParParntMerge, "Permission for the entity " + RoleCreateParntPrv[i] + " is not correct");
                    }

                }


            }

        }



        public void ValidatePermIWGInternalWrite(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            //Validating Write for Organizational level permission
            string[] RoleWriteOrgPrv = { "Account", "Activity", "Contact", "Document Location", "Lead", "Opportunity" };
            string PerOrgWrite1 = "The Write privilege on "; string PerOrgWrite2 = " is set to Organization, click to change.";
            int arraysizeWriteOrg = RoleWriteOrgPrv.Length;

            for (int i = 0; i < arraysizeWriteOrg; i++)
            {
                string PerParUserMerge = PerOrgWrite1 + RoleWriteOrgPrv[i] + PerOrgWrite2;
                if (arraysizeWriteOrg == 0)
                { break; }
                for (int m = 1; m < 8; m++)
                {
                    String TitleValue = Element(driver, By.XPath("//span[text()='" + RoleWriteOrgPrv[i] + "']//following::img[ " + m + " ]")).GetAttribute("title");


                    if (TitleValue == PerParUserMerge)
                    {
                        AddLog(driver, testInReport, testName, testDataIteration, "Pass", "The Write privilege on " + RoleWriteOrgPrv[i] + " is set to Organization and its correct", "Permission for the entity " + RoleWriteOrgPrv[i] + " is correct");
                        break;
                    }
                    else if (TitleValue != PerParUserMerge && m == 7)
                    {
                        //Assert.Fail("Wrong Permission");
                        AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Write Permission for the entity " + RoleWriteOrgPrv[i] + " is not correct and should be " + PerParUserMerge, "Permission for the entity " + RoleWriteOrgPrv[i] + " is not correct");
                    }

                }

            }
        }





        //public void SecurityMatrixNew1(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string Role, string tab)
        //{

        //    string projectPath = Helper.SetProjectPath();
        //    string projectPath1 = "ExcelData\\" + Role + ".xlsx";
        // //   string controlPath1 = projectPath + projectPath1;
        //    //





        // <string> rowValue = new List<string> { };

        //var ExcelFilePath = "C:\\Files\\Sales2.xlsx";
        //  Microsoft.Office.Interop.Excel.Application xlApp = new Microsoft.Office.Interop.Excel.Application();
        // Microsoft.Office.Interop.Excel.Workbook xlWorkbook = xlApp.Workbooks.Open(controlPath1);
        // Microsoft.Office.Interop.Excel.Worksheet xlWorksheet = xlWorkbook.Worksheets.get_Item(tab);

        //     Microsoft.Office.Interop.Excel.Range xlRange = xlWorksheet.UsedRange;
        //    int rowCount = xlRange.Rows.Count;
        //    int colCount = xlRange.Columns.Count;


        //    string val1 = "";
        //    for (int i = 2; i <= rowCount; i++)
        //    {
        //        string Entity = xlRange.Cells[i, 1].Value2.ToString();

        //        for (int j = 2; j <= colCount; j++)
        //        {
        //            string Action = xlRange.Cells[1, j].Value2.ToString();
        //            string val = xlRange.Cells[i, j].Value2.ToString();
        //            if (val == "U")
        //            {
        //                val1 = "User";
        //            }
        //            if (val == "O")
        //            {
        //                val1 = "Organization";
        //            }
        //            if (val == "BU")
        //            {
        //                val1 = "Business Unit";
        //            }
        //            if (val == "-")
        //            {
        //                val1 = "None Selected";
        //            }
        //            if (val == "PBU")
        //            {
        //                val1 = "Parent: Child Business Units";

        //            }

        //            string ObjUserNew = "The " + Entity + " privilege is set to " + val1 + ", click to change.";
        //            if (Elements(driver, Control("getsecurityRole", ObjUserNew, "CommonObj")) > 0)
        //            {
        //                if (val1 == "Parent: Child Business Units")
        //                {
        //                    val1 = "Parent Child Business Units";
        //                }
        //                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "The privilege on " + Entity + " is set to " + val1 + " and its correct", "Permission for the " + Entity + " of " + val1 + " is correct");
        //                //xlRange.Cells[i, j].Interior.Color = System.Drawing.ColorTranslator.ToOle(System.Drawing.Color.Green);
        //              //  xlWorkbook.Save();


        //            }
        //            else
        //            {
        //                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "The " + Action + " privilege on " + Entity + " with " + val1 + " level is wrong", "The " + Action + " privilege on " + Entity + " with " + val1 + " level is wrong");
        //                //xlRange.Cells[i, j].Interior.Color = System.Drawing.ColorTranslator.ToOle(System.Drawing.Color.Red);
        //              //  xlWorkbook.Save();
        //                }
        //        }
        //    }
        //    //xlWorkbook.Close();
        //    xlApp.Quit();
        //}
        public void SecurityMatrixNew(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string Role, string tab)
        {

            string projectPath = Helper.SetProjectPath();
            string projectPath1 = "ExcelData\\" + Role + ".xlsx";
            string controlPath1 = projectPath + projectPath1;
            //List<string> rowValue = new List<string> { };

            Microsoft.Office.Interop.Excel.Application xlApp = new Microsoft.Office.Interop.Excel.Application();
            Microsoft.Office.Interop.Excel.Workbook xlWorkbook = xlApp.Workbooks.Open(controlPath1);
            Microsoft.Office.Interop.Excel.Worksheet xlWorksheet = xlWorkbook.Worksheets.get_Item(tab);

            Microsoft.Office.Interop.Excel.Range xlRange = xlWorksheet.UsedRange;
            int rowCount = xlRange.Rows.Count;
            int colCount = xlRange.Columns.Count;




            string val1 = "";
            for (int i = 2; i <= rowCount; i++)
            {
                string Entity = xlRange.Cells[i, 1].Value2.ToString();

                for (int j = 2; j <= colCount; j++)
                {
                    string Action = xlRange.Cells[1, j].Value2.ToString();
                    string val = xlRange.Cells[i, j].Value2.ToString();
                    if (val == "U")
                    {
                        val1 = "User";
                    }
                    if (val == "O")
                    {
                        val1 = "Organization";
                    }
                    if (val == "BU")
                    {
                        val1 = "Business Unit";
                    }
                    if (val == "-")
                    {
                        val1 = "None Selected";
                    }
                    if (val == "PBU")
                    {
                        val1 = "Parent: Child Business Units";

                    }
                    string ObjUser = "The " + Action + " privilege on " + Entity + " is set to " + val1 + ", click to change.";
                    string ObjUser1 = "The " + Action + " privilege on " + Entity + " is set to User, click to change.";
                    string ObjUser2 = "The " + Action + " privilege on " + Entity + " is set to Organization, click to change.";
                    string ObjUser3 = "The " + Action + " privilege on " + Entity + " is set to Business Unit, click to change.";
                    string ObjUser4 = "The " + Action + " privilege on " + Entity + " is set to Parent: Child Business Units, click to change.";
                    string ObjUserNew = "The " + Entity + " privilege is set to " + val1 + ", click to change.";



                    if (Elements(driver, Control("getsecurityRole", ObjUser, "CommonObj")) > 0)
                    {
                        if (val1 == "Parent: Child Business Units")
                        {
                            val1 = "Parent Child Business Units";
                        }
                        if (Entity == "Facility/Equipment")
                        {
                            Entity = "Facility";
                        }
                        AddLog(driver, testInReport, testName, testDataIteration, "Pass", "The " + Action + " privilege on " + Entity + " is set to " + val1 + " and its correct", "Permission for the " + Entity + " of " + val1 + " is correct");
                        //xlRange.Cells[i, j].Interior.Color = System.Drawing.ColorTranslator.ToOle(System.Drawing.Color.Green);
                        //  xlWorkbook.Save();


                    }
                    if (Elements(driver, Control("getsecurityRole", ObjUser, "CommonObj")) == 0 && val1 != "None Selected")
                    {
                        if (val1 == "Parent: Child Business Units")
                        {
                            val1 = "Parent Child Business Units";
                        }
                        if (Entity == "Facility/Equipment")
                        {
                            Entity = "Facility";
                        }
                        AddLog(driver, testInReport, testName, testDataIteration, "Fail", "The " + Action + " privilege on " + Entity + " with " + val1 + " level is wrong", "The " + Action + " privilege on " + Entity + " with " + val1 + " level is wrong");
                        //xlRange.Cells[i, j].Interior.Color = System.Drawing.ColorTranslator.ToOle(System.Drawing.Color.Red);
                        //  xlWorkbook.Save();
                    }
                    if (Elements(driver, Control("getsecurityRole", ObjUser, "CommonObj")) == 0 && val1 == "None Selected")
                    {
                        if (Elements(driver, Control("getsecurityRole", "ObjUser1", "CommonObj")) > 0 || Elements(driver, Control("getsecurityRole", "ObjUser2", "CommonObj")) > 0 || Elements(driver, Control("getsecurityRole", "ObjUser3", "CommonObj")) > 0
                           || Elements(driver, Control("getsecurityRole", "ObjUser4", "CommonObj")) > 0)
                        {

                            if (val1 == "Parent: Child Business Units")
                            {
                                val1 = "Parent Child Business Units";
                            }
                            if (Entity == "Facility/Equipment")
                            {
                                Entity = "Facility";
                            }
                            AddLog(driver, testInReport, testName, testDataIteration, "Fail", "The " + Action + " privilege on " + Entity + " with " + val1 + " level is wrong", "The " + Action + " privilege on " + Entity + " with " + val1 + " level is wrong");
                            //xlRange.Cells[i, j].Interior.Color = System.Drawing.ColorTranslator.ToOle(System.Drawing.Color.Red);
                            //  xlWorkbook.Save();
                        }
                        else
                        {
                            if (val1 == "Parent: Child Business Units")
                            {
                                val1 = "Parent Child Business Units";
                            }
                            if (Entity == "Facility/Equipment")
                            {
                                Entity = "Facility";
                            }
                            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "The " + Action + " privilege on " + Entity + " is set to " + val1 + " and its correct", "Permission for the " + Entity + " of " + val1 + " is correct");
                            //xlRange.Cells[i, j].Interior.Color = System.Drawing.ColorTranslator.ToOle(System.Drawing.Color.Green);
                            //  xlWorkbook.Save();


                        }
                    }




                }
            }
            xlWorkbook.Close();
            xlApp.Quit();
        }

        public void SecurityMatrix(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string Role, string tab)
        {

            string projectPath = Helper.SetProjectPath();
            string projectPath1 = "ExcelData\\" + Role + ".xlsx";
            string controlPath1 = projectPath + projectPath1;
            //List<string> rowValue = new List<string> { };

            //var ExcelFilePath = "C:\\Files\\Sales2.xlsx";
            Microsoft.Office.Interop.Excel.Application xlApp = new Microsoft.Office.Interop.Excel.Application();
            Microsoft.Office.Interop.Excel.Workbook xlWorkbook = xlApp.Workbooks.Open(controlPath1);
            Microsoft.Office.Interop.Excel.Worksheet xlWorksheet = xlWorkbook.Worksheets.get_Item(tab);

            Microsoft.Office.Interop.Excel.Range xlRange = xlWorksheet.UsedRange;
            int rowCount = xlRange.Rows.Count;
            int colCount = xlRange.Columns.Count;


            string val1 = "";
            for (int i = 2; i <= rowCount; i++)
            {
                string Entity = xlRange.Cells[i, 1].Value2.ToString();

                for (int j = 2; j <= colCount; j++)
                {
                    string Action = xlRange.Cells[1, j].Value2.ToString();
                    string val = xlRange.Cells[i, j].Value2.ToString();
                    if (val == "U")
                    {
                        val1 = "User";
                    }
                    if (val == "O")
                    {
                        val1 = "Organization";
                    }
                    if (val == "BU")
                    {
                        val1 = "Business Unit";
                    }
                    if (val == "-")
                    {
                        val1 = "None Selected";
                    }
                    if (val == "PBU")
                    {
                        val1 = "Parent: Child Business Units";

                    }
                    string ObjUser = "The " + Action + " privilege on " + Entity + " is set to " + val1 + ", click to change.";
                    for (int n = 1; n <= 8; n++)
                    {
                        String TitleValue = Element(driver, By.XPath("//span[text()='" + Entity + "']//following::img[ " + n + " ]")).GetAttribute("title");


                        if (TitleValue == ObjUser)
                        {
                            if (val1 == "Parent: Child Business Units")
                            {
                                val1 = "Parent Child Business Units";
                            }
                            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "The " + Action + " privilege on " + Entity + " is set to " + val1 + " and its correct", "Permission for the " + Entity + " of " + val1 + " is correct");
                            //xlRange.Cells[i, j].Interior.Color = System.Drawing.ColorTranslator.ToOle(System.Drawing.Color.Green);
                            //  xlWorkbook.Save();
                            break;


                        }

                        if (TitleValue != ObjUser && n != 8 && val1 == "None Selected")
                        {
                            string[] GetArrayValue = new string[] { "Organization is,", "Business Unit,", "Parent: Child Business Units,", "User," };
                            int arraysize = GetArrayValue.Length;
                            for (int m = 0; m < arraysize; m++)
                            {
                                if (TitleValue.Contains(GetArrayValue[m]))
                                {
                                    if (val1 == "Parent: Child Business Units")
                                    {
                                        val1 = "Parent Child Business Units";
                                    }
                                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "The " + Action + " privilege on " + Entity + " with " + val1 + " level is wrong", "The " + Action + " privilege on " + Entity + " with " + val1 + " level is wrong");
                                    //xlRange.Cells[i, j].Interior.Color = System.Drawing.ColorTranslator.ToOle(System.Drawing.Color.Red);
                                    //  xlWorkbook.Save();
                                    break;
                                }
                                break;
                            }
                        }
                        if (TitleValue != ObjUser && n == 8 && val1 == "None Selected")
                        {
                            string[] GetArrayValue = new string[] { "Organization is,", "Business Unit,", "Parent: Child Business Units,", "User," };
                            int arraysize = GetArrayValue.Length;
                            for (int m = 0; m < arraysize; m++)
                            {
                                if (TitleValue.Contains(GetArrayValue[m]))
                                {
                                    if (val1 == "Parent: Child Business Units")
                                    {
                                        val1 = "Parent Child Business Units";
                                    }
                                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "The " + Action + " privilege on " + Entity + " with " + val1 + " level is wrong", "The " + Action + " privilege on " + Entity + " with " + val1 + " level is wrong");
                                    //xlRange.Cells[i, j].Interior.Color = System.Drawing.ColorTranslator.ToOle(System.Drawing.Color.Red);
                                    //  xlWorkbook.Save();
                                    break;
                                }
                                break;
                            }
                        }
                        else
                        {
                            if (val1 == "Parent: Child Business Units")
                            {
                                val1 = "Parent Child Business Units";
                            }
                            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "The " + Action + " privilege on " + Entity + " is set to " + val1 + " and its correct", "Permission for the " + Entity + " of " + val1 + " is correct");
                            //xlRange.Cells[i, j].Interior.Color = System.Drawing.ColorTranslator.ToOle(System.Drawing.Color.Green);
                            //  xlWorkbook.Save();


                        }


                        if (TitleValue != ObjUser && n == 8 && val1 != "None Selected")
                        {
                            if (val1 == "Parent: Child Business Units")
                            {
                                val1 = "Parent Child Business Units";
                            }
                            //Assert.Fail("Wrong Permission");
                            AddLog(driver, testInReport, testName, testDataIteration, "Fail", "The " + Action + " privilege on " + Entity + " with " + val1 + " level is wrong", "The " + Action + " privilege on " + Entity + " with " + val1 + " level is wrong");
                            //xlRange.Cells[i, j].Interior.Color = System.Drawing.ColorTranslator.ToOle(System.Drawing.Color.Red);
                            //  xlWorkbook.Save();
                        }

                    }
                }




            }

            xlWorkbook.Close();
            xlApp.Quit();
        }
        public void ValidateRoleMapping(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string type, string permission)
        {

            string[] GetArrayValue = { };
            if (type == "Write" && permission == "Organization")
            {
                GetArrayValue = new string[] { "Account", "Activity", "Contact", "Document Location", "Lead", "Opportunity" };

            }
            else if (type == "Create" && permission == "None Selected")
            {

                GetArrayValue = new string[] { "Announcement", "Category", "Connection", "Connection Role", "Data Performance Dashboard", "Duplicate Detection Rule", "Language", "Queue", "Relationship Role", "SharePoint Site", "Subject" };
            }
            else if (type == "Create" && permission == "Business Unit")
            {
                GetArrayValue = new string[] { "Activity", "Data Map", "Lead" };
            }
            string value1 = "The " + type + " privilege on "; string value2 = " is set to " + permission + ", click to change.";
            int arraysize = GetArrayValue.Length;

            for (int i = 0; i < arraysize; i++)
            {
                string Valuefromsheet = value1 + GetArrayValue[i] + value2;
                if (arraysize == 0)
                { break; }
                for (int m = 1; m < 8; m++)
                {
                    String TitleValue = Element(driver, By.XPath("//span[text()='" + GetArrayValue[i] + "']//following::img[ " + m + " ]")).GetAttribute("title");


                    if (TitleValue == Valuefromsheet)
                    {
                        AddLog(driver, testInReport, testName, testDataIteration, "Pass", "The " + type + " privilege on " + GetArrayValue[i] + " is set to " + permission + " and its correct", "Permission for the entity " + GetArrayValue[i] + " is correct");
                        break;
                    }
                    else if (TitleValue != Valuefromsheet && m == 7)
                    {
                        //Assert.Fail("Wrong Permission");
                        AddLog(driver, testInReport, testName, testDataIteration, "Fail", type + " Permission for the entity " + GetArrayValue[i] + " is not correct and should be " + Valuefromsheet, "Permission for the entity " + GetArrayValue[i] + " is not correct");
                    }

                }

            }
        }



        public void ValidatePermIWGInternalAppend(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            //Validating Append for Organizational level permission
            string[] RoleAppendOrgPrv = { "Account", "Activity", "Category", "Contact", "Document Location", "Language", "Lead", "Opportunity", "Opportunity Relationship", "Post", "Queue", "Trace" };
            string PerOrgAppend1 = "The Append privilege on "; string PerOrgAppend2 = " is set to Organization, click to change.";
            int arraysizeAppendOrg = RoleAppendOrgPrv.Length;

            for (int i = 0; i < arraysizeAppendOrg; i++)
            {
                string PerParUserMerge = PerOrgAppend1 + RoleAppendOrgPrv[i] + PerOrgAppend2;
                if (arraysizeAppendOrg == 0)
                { break; }
                for (int m = 1; m < 8; m++)
                {
                    String TitleValue = Element(driver, By.XPath("//span[text()='" + RoleAppendOrgPrv[i] + "']//following::img[ " + m + " ]")).GetAttribute("title");


                    if (TitleValue == PerParUserMerge)
                    {
                        AddLog(driver, testInReport, testName, testDataIteration, "Pass", "The Append privilege on " + RoleAppendOrgPrv[i] + " is set to Organization and its correct", "Permission for the entity " + RoleAppendOrgPrv[i] + " is correct");
                        break;
                    }
                    else if (TitleValue != PerParUserMerge && m == 7)
                    {
                        //Assert.Fail("Wrong Permission");
                        AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Append Permission for the entity " + RoleAppendOrgPrv[i] + " is not correct and should be" + PerParUserMerge, "Permission for the entity " + RoleAppendOrgPrv[i] + " is not correct");
                    }

                }

            }
            //Validating Append for BU level permission
            string[] RoleAppendBUPrv = { "Data Map", "Note" };
            string PerBUAppend1 = "The Append privilege on "; string PerBUAppend2 = " is set to Business Unit, click to change.";
            int arraysizeAppendBU = RoleAppendBUPrv.Length;

            for (int i = 0; i < arraysizeAppendBU; i++)
            {
                string PerParUserMerge = PerBUAppend1 + RoleAppendBUPrv[i] + PerBUAppend2;
                if (arraysizeAppendBU == 0)
                { break; }
                for (int m = 1; m < 8; m++)
                {
                    String TitleValue = Element(driver, By.XPath("//span[text()='" + RoleAppendBUPrv[i] + "']//following::img[ " + m + " ]")).GetAttribute("title");


                    if (TitleValue == PerParUserMerge)
                    {
                        AddLog(driver, testInReport, testName, testDataIteration, "Pass", "The Append privilege on " + RoleAppendBUPrv[i] + " is set to BUanization and its correct", "Permission for the entity " + RoleAppendBUPrv[i] + " is correct");
                        break;
                    }
                    else if (TitleValue != PerParUserMerge && m == 7)
                    {
                        //Assert.Fail("Wrong Permission");
                        AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Append Permission for the entity " + RoleAppendBUPrv[i] + " is not correct and should be" + PerParUserMerge, "Permission for the entity " + RoleAppendBUPrv[i] + " is not correct");
                    }

                }

            }


            //Validating Append for User level permission
            string[] RoleAppendUserPrv = { "Action Card", "Data Import", "Import Source File", "Report", "Sync Error" };
            string PerUserAppend1 = "The Append privilege on "; string PerUserAppend2 = " is set to User, click to change.";
            int arraysizeAppendUser = RoleAppendUserPrv.Length;

            for (int i = 0; i < arraysizeAppendUser; i++)
            {
                string PerParUserMerge = PerUserAppend1 + RoleAppendUserPrv[i] + PerUserAppend2;
                if (arraysizeAppendUser == 0)
                { break; }
                for (int m = 1; m < 8; m++)
                {
                    String TitleValue = Element(driver, By.XPath("//span[text()='" + RoleAppendUserPrv[i] + "']//following::img[ " + m + " ]")).GetAttribute("title");


                    if (TitleValue == PerParUserMerge)
                    {
                        AddLog(driver, testInReport, testName, testDataIteration, "Pass", "The Append privilege on " + RoleAppendUserPrv[i] + " is set to User and its correct", "Permission for the entity " + RoleAppendUserPrv[i] + " is correct");
                        break;
                    }
                    else if (TitleValue != PerParUserMerge && m == 7)
                    {
                        //Assert.Fail("Wrong Permission");
                        AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Append Permission for the entity " + RoleAppendUserPrv[i] + " is not correct and should be" + PerParUserMerge, "Permission for the entity " + RoleAppendUserPrv[i] + " is not correct");
                    }

                }

            }
            //Validating Append for None level permission
            string[] RoleAppendNonePrv = { "Action Card User Settings", "Announcement", "Connection", "Connection Role", "Data Performance Dashboard", "Duplicate Detection Rule", "Relationship Role", "Saved View", "SharePoint Site", "Subject", "User Chart", "User Dashboard", "User Entity Instance Data", "User Entity UI Settings" };
            string PerNoneAppend1 = "The Append privilege on "; string PerNoneAppend2 = " is set to None Selected, click to change.";
            int arraysizeAppendNone = RoleAppendNonePrv.Length;

            for (int i = 0; i < arraysizeAppendNone; i++)
            {
                string PerParNoneMerge = PerNoneAppend1 + RoleAppendNonePrv[i] + PerNoneAppend2;
                if (arraysizeAppendNone == 0)
                { break; }
                for (int m = 1; m < 8; m++)
                {
                    String TitleValue = Element(driver, By.XPath("//span[text()='" + RoleAppendNonePrv[i] + "']//following::img[ " + m + " ]")).GetAttribute("title");


                    if (TitleValue == PerParNoneMerge)
                    {
                        AddLog(driver, testInReport, testName, testDataIteration, "Pass", "The Append privilege on " + RoleAppendNonePrv[i] + " is set to None and its correct", "Permission for the entity " + RoleAppendNonePrv[i] + " is correct");
                        break;
                    }
                    else if (TitleValue != PerParNoneMerge && m == 7)
                    {
                        //Assert.Fail("Wrong Permission");
                        AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Append Permission for the entity " + RoleAppendNonePrv[i] + " is not correct and should be" + PerParNoneMerge, "Permission for the entity " + RoleAppendNonePrv[i] + " is not correct");
                    }

                }

            }
        }

        //New Security roles verification Opportunity Write Permission as BU.
        public void SelectSecuritySheet(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string tab)
        {
            ThinkTime(10);
            WaitUntil(driver, Control("SecurityTabs", tab, "Generic"), 240);
            MoveToElement(driver, Control("SecurityTabs", tab, "Generic"));
            Element(driver, Control("SecurityTabs", tab, "Generic")).Click();

            ThinkTime(4);
            WaitUntil(driver, Control("SecurityFields", "Generic"), 30);
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Security Tab selected", "Security Tab selected page");

        }

        //New Security roles verification Opportunity Write Permission as BU.
        public void OppWritePermssnBU(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {


            if (Elements(driver, Control("OpportunityWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Role permission verification", "Role permission verification page");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
        }


        //New Security roles verification Activity Write Permission as BU.
        public void ActivityWritePermssnBU(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(4);
            WaitUntil(driver, Control("SecurityFields", "Generic"), 30);

            if (Elements(driver, Control("ActivityWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
        }

        //New Security roles verification of core record.
        public void SalesMinimumService(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string tab)
        {
            ThinkTime(10);
            WaitUntil(driver, Control("SecurityTabs", tab, "Generic"), 240);
            MoveToElement(driver, Control("SecurityTabs", tab, "Generic"));
            Element(driver, Control("SecurityTabs", tab, "Generic")).Click();

            ThinkTime(4);
            WaitUntil(driver, Control("SecurityFields", "Generic"), 30);


            if (Elements(driver, Control("BRB_create", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("BRB_read", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("BRB_write", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("BRB_delete", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("BRB_append", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("BRB_appendto", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("BRB_assign", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("BRB_share", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
        }

        //New Security roles verification of core record.
        public void SalesMinimumCustomEntities(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string tab)
        {
            ThinkTime(10);
            WaitUntil(driver, Control("SecurityTabs", tab, "Generic"), 240);
            MoveToElement(driver, Control("SecurityTabs", tab, "Generic"));
            Element(driver, Control("SecurityTabs", tab, "Generic")).Click();

            ThinkTime(4);
            WaitUntil(driver, Control("SecurityFields", "Generic"), 30);


            if (Elements(driver, Control("AccountKPI_create", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("AccountKPI_read", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("Account_write", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("AccountKPI_delete", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("AccountKPI_append", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("AccountKPI_appendto", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("ActionCard_create", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("ActionCard_read", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("ActionCard_write", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("ActionCard_delete", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("ActionCard_append", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("ActionCard_appendto", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("ActionCard_assign", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("ActionCard_share", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("ActivityAna_create", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("ActivityAna_read", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("ActivityAna_write", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("ActivityAna_delete", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("ActivityAna_append", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("ActivityAna_appendto", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("ContactKPI_create", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("ContactKPI_read", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("ContactKPI_write", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("ContactKPI_delete", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("ContactKPI_append", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("ContactKPI_appendto", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("LeadKPI_create", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("LeadKPI_read", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("LeadKPI_write", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("LeadKPI_delete", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("LeadKPI_append", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("LeadKPI_appendto", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("MostCont_create", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("MostCont_read", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("MostCont_write", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("MostCont_delete", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("MostCont_append", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("MostCont_appendto", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("MostContBy_create", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("MostContBy_read", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("MostContBy_write", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("MostContBy_delete", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("MostContBy_append", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("MostContBy_appendto", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("OppKPI_create", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("OppKPI_read", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("OppKPI_write", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("OppKPI_delete", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("OppKPI_append", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("OppKPI_appendto", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("PredctveModel_create", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("PredctveModel_read", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("PredctveModel_write", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("PredctveModel_delete", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("PredctveModel_append", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("PredctveModel_appendto", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("PredctveScore_create", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("PredctveScore_read", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("PredctveScore_write", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("PredctveScore_delete", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("PredctveScore_append", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("PredctveScore_appendto", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("Relatnshp_create", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("Relatnshp_read", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("Relatnshp_write", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("Relatnshp_delete", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("Relatnshp_append", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("Relatnshp_appendto", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("SIKey_create", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("SIKey_read", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("SIKey_write", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("SIKey_delete", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("SIKey_append", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("SIKey_appendto", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            driver.Close();

        }

        //New Security roles verification of core record.
        public void SalesMinimumCoreRecord(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string tab)
        {
            ThinkTime(10);
            WaitUntil(driver, Control("SecurityTabs", tab, "Generic"), 240);
            MoveToElement(driver, Control("SecurityTabs", tab, "Generic"));
            Element(driver, Control("SecurityTabs", tab, "Generic")).Click();

            ThinkTime(4);
            WaitUntil(driver, Control("SecurityFields", "Generic"), 30);


            if (Elements(driver, Control("Account_read", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("Account_create", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("Account_write", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("Account_delete", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("Account_append", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("Account_appendto", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("Account_assign", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("Account_share", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("Actioncard_read", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("Actioncard_create", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("Actioncard_write", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("Actioncard_delete", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("Actioncard_append", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("Actioncard_appendto", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("Actioncard_assign", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("Activity_create", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("Activity_read", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("Activity_append", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("Activity_appendto", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("Activity_write", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("Activity_delete", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("Activity_assign", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("Activity_share", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("Connection_create", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("Connection_read", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("Connection_write", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("Connection_delete", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("Connection_assign", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("Connection_share", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("Contact_create", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("Contact_read", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("Contact_write", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("Contact_delete", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("Contact_append", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("Contact_appendto", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("Contact_assign", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("Contact_share", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

        }

        public void Openandverifylanguagereadonly(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string Readonlymsg)
        {
            ThinkTime(3);
            WaitUntil(driver, Control("Languageselected", "Opportunity"), 240);
            MoveToElement(driver, Control("Languageselected", "Opportunity"));
            Element(driver, Control("Languageselected", "Opportunity")).Click();
            ThinkTime(3);
            string Warningmsg = Element(driver, Control("Readonlymsg", "Opportunity")).GetAttribute("innerText");

            if (Warningmsg == Readonlymsg)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Language is Read Only", "Language is Read Only");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Language is not Read Only", "Language is not Read Only");
            }
        }
        //New Security roles verification of core record.
        public void SecurityRolesCoreRecord(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string tab)
        {
            ThinkTime(10);
            WaitUntil(driver, Control("SecurityTabs", tab, "Generic"), 240);
            MoveToElement(driver, Control("SecurityTabs", tab, "Generic"));
            Element(driver, Control("SecurityTabs", tab, "Generic")).Click();

            ThinkTime(4);
            WaitUntil(driver, Control("SecurityFields", "Generic"), 30);


            if (Elements(driver, Control("AccountCreate", "SecurityRoles")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("ADAccountCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SMAccountCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("AccountRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("AccountWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SMAccountWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("AccountDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SMAccountDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("AccountAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("AccountAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("AccountAssign", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("ADAccountAssign", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("AccountShare", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("ActivityCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SMActivityCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ActivityRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ActivityWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SMActivityWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ActivityDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SMActivityDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ActivityAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ActivityAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ActivityAssign", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SMActivityAssign", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ActivityShare", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("ActionCardCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ActionCardRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ActionCardWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ActionCardDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ActionCardAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ActionCardAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ActionCardAssign", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ActionUserCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ActionUserRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ActionUserWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ActionUserWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ActionUserDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("AnnouncementCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("AnnouncementRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("AnnouncementWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("AnnouncementDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("AnnouncementAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("CategoryCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("CategoryRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("CategoryWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("CategoryDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("CategoryAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("CategoryAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("CategoryAssign", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("CategoryShare", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ConnectionCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SAConnectionCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ConnectionRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ConnectionWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SAConnectionWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ConnectionDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SAConnectionDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ConnectionAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SAConnectionAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ConnectionAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SAConnectionAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ConnectionAssign", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SAConnectionAssign", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ConnectionShare", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SAConnectionShare", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("ConnectionRoleCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ConnectionRoleRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ConnectionRoleWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ConnectionRoleDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ConnectionRoleAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ConnectionRoleAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ContactCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else if (Elements(driver, Control("ADContactCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SMContactCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ContactRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ContactWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SMContactWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ContactDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SMContactDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ContactAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ContactAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ContactAssign", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("ADContactAssign", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ContactShare", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("DataImportCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("DataImportRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("DataImportWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("DataImportDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("DataImportAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("DataImportAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("DataImportAssign", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("DataImportShare", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("DataMapCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("DataMapRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("DataMapWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("DataMapDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("DataMapAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("DataMapAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("DataMapAssign", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("DataMapShare", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("DataPerfDashbdCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("DataPerfDashbdRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("DataPerfDashbdWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("DataPerfDashbdDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("DataPerfDashbdAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("DataPerfDashbdAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("DocumentLoctnCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("DocumentLoctnRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("DocumentLoctnWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("DocumentLoctnDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("DocumentLoctnAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("DocumentLoctnAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("DocumentLoctnAssign", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("DocumentLoctnShare", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("DuplicateCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("DuplicateRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("DuplicateWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("DuplicateDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("DuplicateAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("DuplicateAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("DuplicateAssign", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("DuplicateShare", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("ImpSrcfileCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ImpSrcfileRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ImpSrcfileWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ImpSrcfileDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ImpSrcfileAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ImpSrcfileAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ImpSrcfileAssign", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ImpSrcfileShare", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("LanguageCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("LanguageRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("LanguageWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("LanguageDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("LanguageAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("LanguageAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("LeadCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SMLeadCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("LeadRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("LeadWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SMLeadWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("LeadDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SMLeadDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("LeadAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("LeadAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("LeadAssign", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SMLeadAssign", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("LeadShare", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("NoteCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("NoteRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("NoteWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("NoteDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("NoteAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("NoteAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("NoteAssign", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("NoteShare", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("OpportunityCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("ADOpportunityCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SMOpportunityCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("OpportunityRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("OpportunityWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SMOpportunityWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("OpportunityDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("OpportunityAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("OpportunityAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("OpportunityAssign", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("ADOpportunityAssign", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("OpportunityShare", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("OppRelationshipCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("OppRelationshipRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("OppRelationshipWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("OppRelationshipDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("OppRelationshipAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("OppRelationshipAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("OppRelationshipAssign", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("OppRelationshipShare", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("PostCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("PostRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("PostDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("PostAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("PostAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("QueueCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("QueueRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("QueueWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("QueueDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("QueueAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("QueueAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("QueueAssign", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("QueueShare", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("RelationshipRoleCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("RelationshipRoleRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("RelationshipRoleWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("RelationshipRoleDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("RelationshipRoleAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("RelationshipRoleAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("ReportCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ReportRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ReportWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ReportDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ReportAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ReportAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ReportAssign", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ReportShare", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("SavedViewCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("SavedViewRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("SavedViewWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("SavedViewDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("SavedViewAssign", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("SavedViewShare", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("SharePointCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("SharePointRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("SharePointWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("SharePointDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("SharePointAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("SharePointAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("SharePointAssign", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("SharePointShare", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("SubjectCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("SubjectRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("SubjectWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("SubjectDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("SubjectAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("SubjectAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("SyncErrorCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("SyncErrorRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("SyncErrorWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("SyncErrorDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("SyncErrorAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("SyncErrorAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("SyncErrorAssign", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("SyncErrorShare", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("TraceCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("TraceRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("TraceDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("TraceAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("TraceAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("UserChartCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("UserChartRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("UserChartWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("UserChartDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("UserChartAssign", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("UserChartShare", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("UserDashboardCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("UserDashboardRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("UserDashboardWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("UserDashboardDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("UserDashboardAssign", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("UserDashboardShare", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("UserInstanceDataCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("UserInstanceDataRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("UserInstanceDataWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("UserInstanceDataDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("UserInstanceDataAssign", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("UserInstanceDataShare", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("UserUICreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("UserUIRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("UserUIWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("UserUIDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("UserUIShare", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("ViewAuditHist", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("ViewAuditSumm", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("WebWizardCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("WebWizardRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("WebWizardWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("WebWizardDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("WebAccessCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("WebAccessRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("WebAccessWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("WebAccessDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("WizardPageCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("WizardPageRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("WizardPageWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("WizardPageDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("Publish", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("BulkDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("PublishEmail", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("PublishReports", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }



        }



        //New Security roles verification of Marketing.
        public void SecurityRolesMarketing(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string tab)
        {
            ThinkTime(10);
            WaitUntil(driver, Control("SecurityTabs", tab, "Generic"), 240);
            MoveToElement(driver, Control("SecurityTabs", tab, "Generic"));
            Element(driver, Control("SecurityTabs", tab, "Generic")).Click();

            ThinkTime(4);
            WaitUntil(driver, Control("SecurityFields", "Generic"), 30);

            if (Elements(driver, Control("CampaignCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("CampaignRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("CampaignWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("CampaignDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("CampaignAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("CampaignAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("CampaignAssign", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("CampaignShare", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("MarketingLCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("MarketingLRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("MarketingLWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("MarketingLDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("MarketingLAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("MarketingLAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("MarketingLAssign", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("MarketingLShare", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
        }



        //New Security roles verification of Sales.
        public void SecurityRolesSales(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string tab)
        {
            ThinkTime(10);
            WaitUntil(driver, Control("SecurityTabs", tab, "Generic"), 240);
            MoveToElement(driver, Control("SecurityTabs", tab, "Generic"));
            Element(driver, Control("SecurityTabs", tab, "Generic")).Click();

            ThinkTime(4);
            WaitUntil(driver, Control("SecurityFields", "Generic"), 30);


            if (Elements(driver, Control("CompetitorCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("CompetitorRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("CompetitorWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("CompetitorDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("CompetitorAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("CompetitorAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("InvoiceCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("InvoiceRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("InvoiceWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("InvoiceDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("InvoiceAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("InvoiceAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("InvoiceAssign", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("InvoiceShare", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("OrderCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("OrderRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("OrderWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("OrderDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("OrderAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("OrderAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("OrderAssign", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("OrderShare", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("ProductCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ProductRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ProductWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ProductDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ProductAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ProductAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("QuoteCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("QuoteRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("QuoteWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SAQuoteWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("QuoteDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("QuoteAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SMQuoteAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("QuoteAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SMQuoteAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("QuoteAssign", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SAQuoteAssign", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("QuoteShare", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SMQuoteShare", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("TerritoryCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("TerritoryRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("TerritoryWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("TerritoryDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("TerritoryAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("TerritoryAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }



        }

        //New Security roles verification of Service.
        public void SecurityRolesService(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string tab)
        {
            ThinkTime(10);
            WaitUntil(driver, Control("SecurityTabs", tab, "Generic"), 240);
            MoveToElement(driver, Control("SecurityTabs", tab, "Generic"));
            Element(driver, Control("SecurityTabs", tab, "Generic")).Click();

            ThinkTime(4);
            WaitUntil(driver, Control("SecurityFields", "Generic"), 30);

            if (Elements(driver, Control("ArticleCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ArticleRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ArticleWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ArticleDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ArticleAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ArticleAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ArticleTemplateCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ArticleTemplateRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ArticleTemplateWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ArticleTemplateDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ArticleTemplateAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("BookableResourceCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SMBookableResourceCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("BookableResourceRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("BookableResourceWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SABookableResourceWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("BookableResourceDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("BookableResourceAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("ADBookableResourceAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("BookableResourceAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("ADBookableResourceAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("BookableResourceAssign", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SMBookableResourceAssign", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("BookableResourceShare", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("ADBookableResourceShare", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("BRBookingCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SMBRBookingCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("BRBookingRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("BRBookingWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SMBRBookingWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("BRBookingDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("BRBookingAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("ADBRBookingAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("BRBookingAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("ADBRBookingAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("BRBookingAssign", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SMBRBookingAssign", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("BRBookingShare", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("ADBRBookingShare", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("BRBookingHeaderCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SMBRBookingHeaderCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }


            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("BRBookingHeaderRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("BRBookingHeaderWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SMBRBookingHeaderWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }


            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("BRBookingHeaderDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("BRBookingHeaderAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("ADBRBookingHeaderAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("BRBookingHeaderAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("ADBRBookingHeaderAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("BRBookingHeaderAssign", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SMBRBookingHeaderAssign", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }


            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("BRBookingHeaderShare", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("ADBRBookingHeaderShare", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("BRCategoryCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SMBRCategoryCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("BRCategoryRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("BRCategoryWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SMBRCategoryWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("BRCategoryDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("BRCategoryAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("ADBRCategoryAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("BRCategoryAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("ADBRCategoryAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("BRCategoryAssign", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SMBRCategoryAssign", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("BRCategoryShare", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("ADBRCategoryShare", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("BRCategoryAssnCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SMBRCategoryAssnCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("BRCategoryAssnRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("BRCategoryAssnWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SMBRCategoryAssnWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }


            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("BRCategoryAssnDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("BRCategoryAssnAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("ADBRCategoryAssnAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("BRCategoryAssnAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("ADBRCategoryAssnAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("BRCategoryAssnAssign", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SMBRCategoryAssnAssign", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("BRCategoryAssnShare", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("ADBRCategoryAssnShare", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("BRCharacteristicCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SMBRCharacteristicCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }


            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("BRCharacteristicRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("BRCharacteristicWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SMBRCharacteristicWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("BRCharacteristicDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("BRCharacteristicAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("ADBRCharacteristicAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("BRCharacteristicAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("ADBRCharacteristicAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("BRCharacteristicAssign", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SMBRCharacteristicAssign", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }


            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("BRCharacteristicShare", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("ADBRCharacteristicShare", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("BRGroupCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SMBRGroupCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("BRGroupRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("BRGroupWrite ", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SMBRGroupWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("BRGroupDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("BRGroupAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("ADBRGroupAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("BRGroupAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("ADBRGroupAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("BRGroupAssign", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SMBRGroupAssign", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("BRGroupShare", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("ADBRGroupShare", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("BookingStatusCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SMBookingStatusCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("BookingStatusRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("BookingStatusWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SMBookingStatusWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("BookingStatusDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("BookingStatusAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("ADBookingStatusAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("BookingStatusAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("ADBookingStatusAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("BookingStatusAssign", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SMBookingStatusAssign", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("BookingStatusShare", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("ADBookingStatusShare", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("CaseCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("CaseRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("CaseWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("CaseDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("CaseAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("CaseAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("CaseAssign", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("CaseShare", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("KnowledgeArticleCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("KnowledgeArticleRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("KnowledgeArticleWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("KnowledgeArticleDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("KnowledgeArticleAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("KnowledgeArticleAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("KnowledgeArticleAssign", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("KnowledgeArticleShare", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("KnowledgeViewsCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("KnowledgeViewsRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("KnowledgeViewsWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("KnowledgeViewsDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("KnowledgeViewsAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("KnowledgeViewsAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("KnowledgeViewsAssign", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("KnowledgeViewsShare", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("ApproveKA", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("PublishKA", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("PublishA", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }



        }


        //New Security roles verification of Business Management.
        public void SecurityRolesBusinessManagement(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string tab)
        {
            ThinkTime(10);
            WaitUntil(driver, Control("SecurityTabs", tab, "Generic"), 240);
            MoveToElement(driver, Control("SecurityTabs", tab, "Generic"));
            Element(driver, Control("SecurityTabs", tab, "Generic")).Click();

            ThinkTime(4);
            WaitUntil(driver, Control("SecurityFields", "Generic"), 30);


            if (Elements(driver, Control("BusinessUnitCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("BusinessUnitRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("BusinessUnitWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("BusinessUnitDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("BusinessUnitAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("BusinessUnitAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ChannelGroupCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ChannelGroupRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ChannelGroupWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ChannelGroupDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ChannelGroupAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ChannelGroupAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("CurrencyCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("CurrencyRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("CurrencyWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("CurrencyDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("CurrencyAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("CurrencyAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("DocumentTemplateCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("DocumentTemplateRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("DocumentTemplateWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("DocumentTemplateDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("DocumentTemplateAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("DocumentTemplateAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("GoalCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("GoalRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("GoalWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("GoalDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("GoalAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("GoalAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("GoalAssign", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("GoalShare", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("GoalMetricCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("GoalMetricRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("GoalMetricWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("GoalMetricDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("GoalMetricAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("GoalMetricAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("OrganizationRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("OrganizationWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("OrganizationAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("PersonalDocTemplateCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("PersonalDocTemplateRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("PersonalDocTemplateWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("PersonalDocTemplateDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("PersonalDocTemplateAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("PersonalDocTemplateAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("PersonalDocTemplateAssign", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("PersonalDocTemplateShare", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("PositionCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("PositionRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("PositionWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("PositionDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("PositionAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("PositionAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("RollupQueryCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("RollupQueryRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("RollupQueryWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("RollupQueryDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("RollupQueryAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("RollupQueryAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("RollupQueryAssign", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("RollupQueryShare", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("SecurityRoleCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("SecurityRoleRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("SecurityRoleWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("SecurityRoleDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("SecurityRoleAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("SecurityRoleAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("SecurityRoleAssign", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("TeamCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("TeamRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("TeamWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SATeamWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("TeamDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("TeamAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SATeamAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("TeamAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SATeamAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("UserCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("UserRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("UserWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SAUserWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("UserAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("UserAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("UserSettingsCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("UserSettingsRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("UserSettingsWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("UserSettingsDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("UserSettingsAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("ExporttoExcel", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("ADExporttoExcel", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("SynctoOutlook", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("AssignManager", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("AssignTerritory", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("EnableDisableBU", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("Dynamics365Mobile", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("Print", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("UseDynamicsforOutlook", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ApproveEmailAdd", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("AssignPostnUser", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SAAssignPostnUser", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("BulkEdit", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("EnableDisableUser", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("Merge", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("PerformSyncRollups", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("ReparentBU", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("ReparentUser", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SAReparentUser", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

        }

        //New Security roles verification of Service Management.
        public void SecurityRolesServiceManagement(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string tab)
        {
            ThinkTime(10);
            WaitUntil(driver, Control("SecurityTabs", tab, "Generic"), 240);
            MoveToElement(driver, Control("SecurityTabs", tab, "Generic"));
            Element(driver, Control("SecurityTabs", tab, "Generic")).Click();

            ThinkTime(4);
            WaitUntil(driver, Control("SecurityFields", "Generic"), 30);


            if (Elements(driver, Control("CalendarCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SACalendarCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("CalendarRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SACalendarRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("CalendarWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SACalendarWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("CalendarDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("CalendarAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("CalendarAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("EntitlementCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("EntitlementRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("EntitlementWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("EntitlementDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("EntitlementAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("EntitlementAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("EntitlementAssign", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("EntitlementShare", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("FacilityEquipmentCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("FacilityEquipmentRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("FacilityEquipmentWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("FacilityEquipmentDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("FacilityEquipmentAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("FacilityEquipmentAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("KnowledgeRecordCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("KnowledgeRecordRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("KnowledgeRecordWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("KnowledgeRecordDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("KnowledgeRecordAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("KnowledgeRecordAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("ServiceCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ServiceRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ServiceWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ServiceDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ServiceAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ServiceAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("SiteCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("SiteRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("SiteWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("SiteDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("SiteAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }


        }

        //New Security roles verification of Customization.
        public void SecurityRolesCustomization(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string tab)
        {
            ThinkTime(10);
            WaitUntil(driver, Control("SecurityTabs", tab, "Generic"), 240);
            MoveToElement(driver, Control("SecurityTabs", tab, "Generic"));
            Element(driver, Control("SecurityTabs", tab, "Generic")).Click();

            ThinkTime(4);
            WaitUntil(driver, Control("SecurityFields", "Generic"), 30);


            if (Elements(driver, Control("AppConfCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("AppConfRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("AppConfWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("AppConfDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("ModelAppCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ModelAppRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ModelAppWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ModelAppDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ModelAppAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ModelAppAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("OptionSetCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("OptionSetRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("OptionSetWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("OptionSetDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("ProcessCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ProcessRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ProcessWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ProcessDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ProcessAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("ADProcessAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ProcessAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("ProcessAssign", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("ADProcessAssign", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("ProcessShare", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("ADProcessShare", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("ProcessConfgtnCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ProcessConfgtnRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ProcessConfgtnWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ProcessConfgtnDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("ProcessSessionCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ProcessSessionRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ProcessSessionWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ProcessSessionDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ProcessSessionAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ProcessSessionAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("ProcessSessionAssign", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("ProcessSessionShare", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("SystemJobCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("SystemJobRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("SystemJobWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("SystemJobDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("SystemJobAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("SystemJobAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("SystemJobAssign", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("SystemJobShare", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("ViewCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ViewRead ", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ViewWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ViewDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("VirtualEntityDSCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("VirtualEntityDSRead ", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("VirtualEntityDSWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("VirtualEntityDSDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("WebResourceCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("WebResourceRead ", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("WebResourceWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("WebResourceDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("ActiveBPF", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ActiveRTP", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ExecuteWork", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("ActivateBussRule", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }


        }


        //New Security roles verification of Business Process Flows.
        public void SecurityRolesBusinessPF(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string tab)
        {
            ThinkTime(10);
            WaitUntil(driver, Control("SecurityTabs", tab, "Generic"), 240);
            MoveToElement(driver, Control("SecurityTabs", tab, "Generic"));
            Element(driver, Control("SecurityTabs", tab, "Generic")).Click();

            ThinkTime(4);
            WaitUntil(driver, Control("SecurityFields", "Generic"), 30);


            if (Elements(driver, Control("ExpiredProcessCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ExpiredProcessRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ExpiredProcessWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ExpiredProcessDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ExpiredProcessAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ExpiredProcessAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("LeadToOppCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("LeadToOppRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("LeadToOppWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("LeadToOppDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("LeadToOppAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("LeadToOppAppedTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("NewProcessCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("NewProcessRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("NewProcessWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("NewProcessDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("NewProcessAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("NewProcessAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("OppSalesProcessCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("OppSalesProcessRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("OppSalesProcessWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("OppSalesProcessDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("OppSalesProcessAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("OppSalesProcessAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("PhoneToCaseCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("PhoneToCaseRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("PhoneToCaseWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("PhoneToCaseDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("PhoneToCaseAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("PhoneToCaseAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("EnterpriseOppBPFCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("EnterpriseOppBPFRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("EnterpriseOppBPFWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("EnterpriseOppBPFDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("EnterpriseOppBPFAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("EnterpriseOppBPFAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ITSalesBPFCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ITSalesBPFRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ITSalesBPFWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ITSalesBPFDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ITSalesBPFAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ITSalesBPFAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("TranslationProcessCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("TranslationProcessRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("TranslationProcessWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("TranslationProcessDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("TranslationProcessAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("TranslationProcessAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }


        }

        //New Security roles verification of Custom Entities.
        public void SecurityRolesCustomEntities(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string tab)
        {
            ThinkTime(10);
            WaitUntil(driver, Control("SecurityTabs", tab, "Generic"), 240);
            MoveToElement(driver, Control("SecurityTabs", tab, "Generic"));
            Element(driver, Control("SecurityTabs", tab, "Generic")).Click();

            ThinkTime(4);
            WaitUntil(driver, Control("SecurityFields", "Generic"), 30);

            if (Elements(driver, Control("AccountKPICreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("AccountKPIRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("AccountKPIWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("AccountKPIDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("AccountKPIAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("AccountKPIAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("AccountContactCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("AccountContactRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("AccountContactWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("AccountContactDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("AccountContactAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("AccountContactAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("ActnCardUseCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ActnCardUseRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ActnCardUseWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ActnCardUseDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ActnCardUseAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ActnCardUseAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("ActnCardUseAssign", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("ActnCardUseShare", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("BRAssctnCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SABRAssctnCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("BRAssctnRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("BRAssctnWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SABRAssctnWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }


            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("BRAssctnDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SABRAssctnDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("BRAssctnAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("BRAssctnAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("BRAssctnAssign", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SABRAssctnAssign", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("BRAssctnShare", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SABRAssctnShare", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("BRCatgryLoctnCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("ADBRCatgryLoctnCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("BRCatgryLoctnRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("BRCatgryLoctnWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("ADBRCatgryLoctnWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("BRCatgryLoctnDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("ADBRCatgryLoctnDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("BRCatgryLoctnAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("ADBRCatgryLoctnAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("BRCatgryLoctnAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SABRCatgryLoctnAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("BRCatgryLoctnAssign", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SABRCatgryLoctnAssign", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("BRCatgryLoctnShare", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SABRCatgryLoctnShare", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("BRCharLoctnCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("ADBRCharLoctnCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }


            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("BRCharLoctnRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("BRCharLoctnWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("ADBRCharLoctnWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }


            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("BRCharLoctnDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("ADBRCharLoctnDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }


            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("BRCharLoctnAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("ADBRCharLoctnAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }



            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("BRCharLoctnAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SABRCharLoctnAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("BRCharLoctnAssign", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SABRCharLoctnAssign", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("BRCharLoctnShare", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SABRCharLoctnShare", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("ChannelProviderCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ChannelProviderRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SAChannelProviderRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ChannelProviderWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ChannelProviderDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ChannelProviderAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ChannelProviderAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("CommntnProfCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("CommntnProfRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("CommntnProfWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("CommntnProfDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("CommntnProfAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("CommntnProfAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("CommntnRqstCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SACommntnRqstCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("CommntnRqstRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SACommntnRqstRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("CommntnRqstWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SACommntnRqstWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("CommntnRqstDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("CommntnRqstAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SACommntnRqstAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("CommntnRqstAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SACommntnRqstAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("CommntnRqstAssign", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("CommntnRqstShare", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("CommRqstTempCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("CommRqstTempRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SACommRqstTempRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("CommRqstTempWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("CommRqstTempDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("CommRqstTempAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("CommRqstTempAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("CommRqstTempAssign", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("CommRqstTempShare", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("ContactKPICreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ContactKPIRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ContactKPIWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ContactKPIDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ContactKPIAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ContactKPIAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("CountryCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("CountryRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("CountryWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("CountryDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("CountryAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("CountryAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("EmailReadCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("EmailReadRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("EmailReadWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("EmailReadDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("EmailReadAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("EmailReadAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("EmailReadAssign", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("EmailReadShare", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("EmployeeAllctnCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("ADEmployeeAllctnCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("EmployeeAllctnRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("EmployeeAllctnWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("ADEmployeeAllctnWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("EmployeeAllctnDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SAEmployeeAllctnDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("EmployeeAllctnAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("ADEmployeeAllctnAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("EmployeeAllctnAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("ADEmployeeAllctnAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("FilterCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("FilterRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("FilterWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("FilterDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("FilterAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("FilterAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("FilterAssign", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("FilterShare", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("GeographyCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("ADGeographyCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("GeographyRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("GeographyWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("GeographyDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("ADGeographyDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("GeographyAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("GeographyAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("IntractnSyncPCCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("IntractnSyncPCRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("ADIntractnSyncPCRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("IntractnSyncPCWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("IntractnSyncPCDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("IntractnSyncPCAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("IntractnSyncPCAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("IntractnSyncPCAssign", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("IntractnSyncPCShare", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("IWGRefDataCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("IWGRefDataRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("IWGRefDataWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("IWGRefDataDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("IWGRefDataAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("IWGRefDataAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("IWGSecRoleCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("IWGSecRoleRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("IWGSecRoleWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("IWGSecRoleDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("IWGSecRoleAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("IWGSecRoleAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("IWGSecRoleAssign", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("IWGSecRoleShare", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("CLanguageCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("CLanguageRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("CLanguageWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("CLanguageDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("CLanguageAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("CLanguageAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("LeadKPICreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("LeadKPIRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("LeadKPIWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("LeadKPIDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("LeadKPIAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("LeadKPIAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("LocationCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("LocationRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("LocationWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("LocationDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("LocationAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("LocationAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("MostContCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("MostContRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("MostContWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("MostContDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("MostContactedAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("MostContactedAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("MostContByCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("MostContByRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("MostContByWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("MostContByDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("MostContByAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("MostContByAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("OppBrokerCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("ADOppBrokerCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("OppBrokerRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("ADOppBrokerRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("OppBrokerWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("ADOppBrokerWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("OppBrokerDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("OppBrokerAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("ADOppBrokerAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("OppBrokerAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("ADOppBrokerAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("OppBrokerAssign", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("ADOppBrokerAssign", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("OppBrokerShare", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("ADOppBrokerShare", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("OppKPICreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("OppKPIRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("OppKPIWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("OppKPIDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("OppKPIAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("OppKPIAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }


            if (Elements(driver, Control("OrganztlUnitCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("OrganztlUnitRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("OrganztlUnitWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SAOrganztlUnitWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("OrganztlUnitDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("OrganztlUnitAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("OrganztlUnitAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("OrgUnitHrCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("OrgUnitHrRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("OrgUnitHrWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SAOrgUnitHrWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("OrgUnitHrDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("OrgUnitHrAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("OrgUnitHrAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("PostConfigCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("PostConfigRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("PostConfigWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("PostConfigDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("PostConfigAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("PostConfigAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("PostRuleConfigCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("PostRuleConfigRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("PostRuleConfigWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("PostRuleConfigDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("PostRuleConfigAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("PostRuleConfigAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("PredictiveModelConfigCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("PredictiveModelConfigRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("PredictiveModelConfigWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("PredictiveModelConfigDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("PredictiveModelConfigAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("PredictiveModelConfigAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("PredictiveModelConfigAssign", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("PredictiveModelConfigShare", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("PredictiveScoreCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("PredictiveScoreRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("PredictiveScoreWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("PredictiveScoreDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("PredictiveScoreAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("PredictiveScoreAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("PdtVariantCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("PdtVariantRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("PdtVariantWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("PdtVariantDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("PdtVariantAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("PdtVariantAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("ProfileAlbumCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ProfileAlbumRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ProfileAlbumWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ProfileAlbumDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ProfileAlbumAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ProfileAlbumAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("ProfileAlbumAssign", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("ProfileAlbumShare", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }


            if (Elements(driver, Control("RelatnshpAnalyticsCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("RelatnshpAnalyticsRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("RelatnshpAnalyticsWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("RelatnshpAnalyticsDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("RelatnshpAnalyticsAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("RelatnshpAnalyticsAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("ReqmntCharCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SAReqmntCharCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ReqmntCharRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ReqmntCharWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SAReqmntCharWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ReqmntCharDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SAReqmntCharDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ReqmntCharAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SAReqmntCharAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ReqmntCharAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SAReqmntCharAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("ReqmntCharAssign", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SAReqmntCharAssign", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("ReqmntCharShare", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SAReqmntCharShare", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("ReqmntOrgUCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SAReqmntOrgUCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ReqmntOrgURead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ReqmntOrgUWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SAReqmntOrgUWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ReqmntOrgUDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SAReqmntOrgUDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ReqmntOrgUAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SAReqmntOrgUAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ReqmntOrgUAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SAReqmntOrgUAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("ReqmntOrgUAssign", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SAReqmntOrgUAssign", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("ReqmntOrgUShare", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SAReqmntOrgUShare", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("ReqmntReltnCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SAReqmntReltnCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ReqmntReltnRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ReqmntReltnWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SAReqmntReltnWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ReqmntReltnDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SAReqmntReltnDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ReqmntReltnAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SAReqmntReltnAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ReqmntReltnAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SAReqmntReltnAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("ReqmntReltnAssign", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SAReqmntReltnAssign", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }


            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("ReqmntReltnShare", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SAReqmntReltnShare", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("ReqmntRCCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SAReqmntRCCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ReqmntRCRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ReqmntRCWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SAReqmntRCWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ReqmntRCDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SAReqmntRCDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ReqmntRCAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SAReqmntRCAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ReqmntRCAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SAReqmntRCAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("ReqmntRCAssign", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SAReqmntRCAssign", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("ReqmntRCShare", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SAReqmntRCShare", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("ReqmntRPCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SAReqmntRPCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ReqmntRPRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ReqmntRPWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SAReqmntRPWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ReqmntRPDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SAReqmntRPDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ReqmntRPAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SAReqmntRPAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ReqmntRPAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SAReqmntRPAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("ReqmntRPAssign", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SAReqmntRPAssign", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("ReqmntRPShare", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SAReqmntRPShare", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("ReqmntStatusCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SAReqmntStatusCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ReqmntStatusRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ReqmntStatusWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SAReqmntStatusWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ReqmntStatusDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SAReqmntStatusDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ReqmntStatusAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SAReqmntStatusAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ReqmntStatusAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SAReqmntStatusAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("ReqmntStatusAssign", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SAReqmntStatusAssign", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("ReqmntStatusShare", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SAReqmntStatusShare", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("ResReqmntCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SAResReqmntCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ResReqmntRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ResReqmntWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SAResReqmntWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ResReqmntDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SAResReqmntDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ResReqmntAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SAResReqmntAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ResReqmntAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SAResReqmntAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("ResReqmntAssign", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SAResReqmntAssign", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("ResReqmntShare", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SAResReqmntShare", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("ResReqmntDetailCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SAResReqmntDetailCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ResReqmntDetailRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ResReqmntDetailWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SAResReqmntDetailWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ResReqmntDetailDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SAResReqmntDetailDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ResReqmntDetailAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SAResReqmntDetailAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("ResReqmntDetailAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SAResReqmntDetailAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("ResReqmntDetailAssign", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SAResReqmntDetailAssign", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("ResReqmntDetailShare", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SAResReqmntDetailShare", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("RoleTypeCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("RoleTypeRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("RoleTypeWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("RoleTypeDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("RoleTypeAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("RoleTypeAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else if (Elements(driver, Control("SARoleTypeAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("SIKeyValueConfigCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("SIKeyValueConfigRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("SIKeyValueConfigWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("SIKeyValueConfigDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("SIKeyValueConfigAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("SIKeyValueConfigAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("SourceCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("SourceRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("SourceWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("SourceDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("SourceAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("SourceAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("SurveyRspnseCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("SurveyRspnseRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("SurveyRspnseWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("SurveyRspnseDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("SurveyRspnseAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("SurveyRspnseAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("SurveyRspnseAssign", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("SurveyRspnseShare", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("TeamAlloctnCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("TeamAlloctnRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("TeamAlloctnWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("TeamAlloctnDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("TeamAlloctnAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("TeamAlloctnAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }
            if (Elements(driver, Control("WallViewCreate", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("WallViewRead", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("WallViewWrite", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("WallViewDelete", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("WallViewAppend", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            if (Elements(driver, Control("WallViewAppendTo", "SecurityRoles")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SecurityRoles Verification", "SecurityRoles Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SecurityRole Verification", "SecurityRoles Verification");
                Assert.Fail("SecurityRole is not updated");
            }

            driver.Close();

        }






        public string MoveToTeamAdvancedSettings(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            //Actions action;
            IWebElement ele;
            string parentWindowHandle = driver.CurrentWindowHandle;
            WindowHandling(driver);
            ThinkTime(10);
            WaitUntil(driver, Control("SettingDropdown", "Generic"), 240);
            MoveToElement(driver, Control("SettingDropdown", "Generic"));
            Element(driver, Control("SettingDropdown", "Generic")).Click();
            ThinkTime(3);

            WaitUntil(driver, Control("SecurityButton", "Generic"), 240);
            MoveToElement(driver, Control("SecurityButton", "Generic"));
            Element(driver, Control("SecurityButton", "Generic")).Click();
            ThinkTime(5);

            SwitchToFrame(driver, "contentIFrame0");

            WaitUntil(driver, Control("SelectTeams", "Generic"), 240);
            MoveToElement(driver, Control("SelectTeams", "Generic"));
            ActionsClick(driver, Control("SelectTeams", "Generic"));
            ThinkTime(7);
            SwitchToFrame(driver, "ViewArea");
            ThinkTime(5);

            return parentWindowHandle;
        }

        public string MoveToTeamAdvancedSettingsRoles(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            // Actions action;
            IWebElement ele;
            string parentWindowHandle = driver.CurrentWindowHandle;
            WindowHandling(driver);
            ThinkTime(10);
            WaitUntil(driver, Control("SettingDropdown", "Generic"), 240);
            MoveToElement(driver, Control("SettingDropdown", "Generic"));
            Element(driver, Control("SettingDropdown", "Generic")).Click();
            ThinkTime(3);

            WaitUntil(driver, Control("SecurityButton", "Generic"), 240);
            MoveToElement(driver, Control("SecurityButton", "Generic"));
            Element(driver, Control("SecurityButton", "Generic")).Click();
            ThinkTime(5);

            SwitchToFrame(driver, "contentIFrame0");

            WaitUntil(driver, Control("SecurityUser", "Generic"), 240);
            MoveToElement(driver, Control("SecurityUser", "Generic"));
            ActionsClick(driver, Control("SecurityUser", "Generic"));
            ThinkTime(7);
            SwitchToFrame(driver, "ViewArea");
            ThinkTime(5);

            return parentWindowHandle;
        }
        public string MoveToTeamAdvancedSettingsRolesNew(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            // Actions action;
            IWebElement ele;
            string parentWindowHandle = driver.CurrentWindowHandle;
            WindowHandling(driver);
            ThinkTime(10);
            WaitUntil(driver, Control("SettingDropdown", "Generic"), 240);
            MoveToElement(driver, Control("SettingDropdown", "Generic"));
            Element(driver, Control("SettingDropdown", "Generic")).Click();
            ThinkTime(3);

            WaitUntil(driver, Control("SecurityButton", "Generic"), 240);
            MoveToElement(driver, Control("SecurityButton", "Generic"));
            Element(driver, Control("SecurityButton", "Generic")).Click();
            ThinkTime(5);

            SwitchToFrame(driver, "contentIFrame0");

            WaitUntil(driver, Control("SecurityUser", "Generic"), 240);
            MoveToElement(driver, Control("SecurityUser", "Generic"));
            ActionsClick(driver, Control("SecurityUser", "Generic"));


            return parentWindowHandle;
        }
        public void VerifyBarcelonahub(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string SearchTestrecord, string verifyemail)
        {

            ThinkTime(3);

            WaitUntil(driver, Control("SearchTeamname", "Generic"), 240);
            MoveToElement(driver, Control("SearchTeamname", "Generic"));
            Element(driver, Control("SearchTeamname", "Generic")).SendKeys(Keys.Control + "a");
            Element(driver, Control("SearchTeamname", "Generic")).SendKeys(Keys.Delete);
            ThinkTime(2);
            Element(driver, Control("SearchTeamname", "Generic")).SendKeys(SearchTestrecord);
            ThinkTime(7);
            Element(driver, Control("Searchbutton", "Generic")).Click();
            ThinkTime(5);
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Email verification passed", "Email verification passed");

            int email = Elements(driver, Control("VerifyEmail", verifyemail, "Generic"));
            int UATemail = Elements(driver, Control("VerifyEmail", "crm_ist_pilot@regus.com", "Generic"));

            if (email > 0 || UATemail > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Email verification passed", "Email verification passed");

            }
            else
            {

                Assert.Fail("Incorrect email is listed");
            }
            ThinkTime(3);
            // driver.Quit();




        }

        public void ValidateRole(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string SearchUserName, string Value1, string Value2)
        {

            ThinkTime(3);

            WaitUntil(driver, Control("SearchTeamname", "Generic"), 240);
            MoveToElement(driver, Control("SearchTeamname", "Generic"));
            Element(driver, Control("SearchTeamname", "Generic")).SendKeys(Keys.Control + "a");
            Element(driver, Control("SearchTeamname", "Generic")).SendKeys(Keys.Delete);
            ThinkTime(2);
            WaitUntil(driver, Control("SearchTeamname", "Generic"), 50);
            Element(driver, Control("SearchTeamname", "Generic")).SendKeys(SearchUserName);
            ThinkTime(2);
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", SearchUserName + " User name added ", SearchUserName + " User name added ");

            WaitUntil(driver, Control("Searchbutton", "Generic"), 50);
            Element(driver, Control("Searchbutton", "Generic")).Click();
            ThinkTime(2);
            WaitUntil(driver, Control("SelectUserForRole", "Generic"), 50);
            Element(driver, Control("SelectUserForRole", "Generic")).Click();
            ThinkTime(2);
            ThinkTime(2);
            WaitUntil(driver, Control("settingArrowDown", "Generic"), 50);
            Element(driver, Control("settingArrowDown", "Generic")).Click();
            ThinkTime(2);
            ThinkTime(2);
            WaitUntil(driver, Control("securityRolesOption", "Generic"), 50);
            Element(driver, Control("securityRolesOption", "Generic")).Click();
            ThinkTime(5);


            SwitchToFrame(driver, "contentIFrame0");
            SwitchToFrame(driver, "areaRolesFrame");

            ThinkTime(5);
            // Element(driver, Control("getValueRole", Value1, "Generic")).Click();
            int Role1 = Elements(driver, Control("getValueRole", Value1, "Generic"));
            if (Role1 > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", Value1 + " assigned properly for " + SearchUserName, Value1 + " assigned properly for " + SearchUserName);
            }
            else
            {
                //
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", Value1 + " not assigned properly for " + SearchUserName, Value1 + " not assigned properly for " + SearchUserName);
                Assert.Fail(Value1 + " not assigned for " + SearchUserName);

            }
            int Role2 = Elements(driver, Control("getValueRole", Value2, "Generic"));
            if (Role2 > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", Value2 + " assigned properly for " + SearchUserName, Value2 + " assigned properly for " + SearchUserName);
            }
            else
            {
                //
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", Value2 + " not assigned properly for " + SearchUserName, Value2 + " not assigned properly for " + SearchUserName);
                Assert.Fail(Value2 + " not assigned for " + SearchUserName);

            }

        }

        public void ValidateRolewith3(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string SearchUserName, string Value1, string Value2, string Value3)
        {

            ThinkTime(3);

            WaitUntil(driver, Control("SearchTeamname", "Generic"), 240);
            MoveToElement(driver, Control("SearchTeamname", "Generic"));
            Element(driver, Control("SearchTeamname", "Generic")).SendKeys(Keys.Control + "a");
            Element(driver, Control("SearchTeamname", "Generic")).SendKeys(Keys.Delete);
            ThinkTime(2);
            WaitUntil(driver, Control("SearchTeamname", "Generic"), 50);
            Element(driver, Control("SearchTeamname", "Generic")).SendKeys(SearchUserName);
            ThinkTime(2);
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", SearchUserName + " User name added ", SearchUserName + " User name added ");

            WaitUntil(driver, Control("Searchbutton", "Generic"), 50);
            Element(driver, Control("Searchbutton", "Generic")).Click();
            ThinkTime(2);
            WaitUntil(driver, Control("SelectUserForRole", "Generic"), 50);
            Element(driver, Control("SelectUserForRole", "Generic")).Click();
            ThinkTime(2);
            ThinkTime(2);
            WaitUntil(driver, Control("settingArrowDown", "Generic"), 50);
            Element(driver, Control("settingArrowDown", "Generic")).Click();
            ThinkTime(2);
            ThinkTime(2);
            WaitUntil(driver, Control("securityRolesOption", "Generic"), 50);
            Element(driver, Control("securityRolesOption", "Generic")).Click();
            ThinkTime(5);


            SwitchToFrame(driver, "contentIFrame0");
            SwitchToFrame(driver, "areaRolesFrame");

            ThinkTime(5);
            // Element(driver, Control("getValueRole", Value1, "Generic")).Click();
            int Role1 = Elements(driver, Control("getValueRole", Value1, "Generic"));
            if (Role1 > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", Value1 + " assigned properly for " + SearchUserName, Value1 + " assigned properly for " + SearchUserName);
            }
            else
            {
                //
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", Value1 + " not assigned properly for " + SearchUserName, Value1 + " not assigned properly for " + SearchUserName);
                Assert.Fail(Value1 + " not assigned for " + SearchUserName);
            }
            int Role2 = Elements(driver, Control("getValueRole", Value2, "Generic"));
            if (Role2 > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", Value2 + " assigned properly for " + SearchUserName, Value2 + " assigned properly for " + SearchUserName);
            }
            else
            {
                //
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", Value2 + " not assigned properly for " + SearchUserName, Value2 + " not assigned properly for " + SearchUserName);
                Assert.Fail(Value2 + " not assigned for " + SearchUserName);

            }
            int Role3 = Elements(driver, Control("getValueRole", Value3, "Generic"));
            if (Role3 > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", Value3 + " assigned properly for " + SearchUserName, Value3 + " assigned properly for " + SearchUserName);
            }
            else
            {
                //
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", Value3 + " not assigned properly for " + SearchUserName, Value3 + " not assigned properly for " + SearchUserName);
                Assert.Fail(Value3 + " not assigned for " + SearchUserName);

            }

        }

        public void CheckRolesReg(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string SearchUserName, string Value1, string Value2, string Value3)
        {


            for (int i = 0; i <= 2; i++)
            {
                driver.SwitchTo().DefaultContent();
                ThinkTime(5);
                SwitchToFrame(driver, "contentIFrame0");
                ThinkTime(5);
                //SwitchToFrame(driver, "ViewArea");
                //ThinkTime(2);
                WaitUntil(driver, Control("SearchID", "CommonObj"), 240);
                MoveToElement(driver, Control("SearchID", "CommonObj"));
                Element(driver, Control("SearchID", "CommonObj")).SendKeys(Keys.Control + "a");
                Element(driver, Control("SearchID", "CommonObj")).SendKeys(Keys.Delete);
                ThinkTime(2);
                WaitUntil(driver, Control("SearchID", "CommonObj"), 50);
                Element(driver, Control("SearchID", "CommonObj")).SendKeys(SearchUserName);
                ThinkTime(2);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", SearchUserName + " User name added ", SearchUserName + " User name added ");

                WaitUntil(driver, Control("Searchbutton", "Generic"), 50);
                Element(driver, Control("Searchbutton", "Generic")).Click();
                ThinkTime(2);
                WaitUntil(driver, Control("SelectUserForRole", "Generic"), 50);
                Element(driver, Control("SelectUserForRole", "Generic")).Click();
                ThinkTime(2);
                ThinkTime(2);
                WaitUntil(driver, Control("settingArrowDown", "Generic"), 50);
                Element(driver, Control("settingArrowDown", "Generic")).Click();
                ThinkTime(2);
                ThinkTime(2);
                WaitUntil(driver, Control("securityRolesOption", "Generic"), 50);
                Element(driver, Control("securityRolesOption", "Generic")).Click();
                ThinkTime(5);


                SwitchToFrame(driver, "contentIFrame0");
                SwitchToFrame(driver, "areaRolesFrame");

                ThinkTime(5);

                // Element(driver, Control("getValueRole", Value1, "Generic")).Click();
                int Role1 = Elements(driver, Control("getValueRole", Value1, "Generic"));
                if (Role1 > 0)
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", Value1 + " assigned properly for " + SearchUserName, Value1 + " assigned properly for " + SearchUserName);
                }
                ThinkTime(2);
                driver.SwitchTo().DefaultContent();
                //ThinkTime(2);
                Element(driver, Control("CloseButton", "CommonObj")).Click();

            }

        }

        public void NewVersionSecurityCheckfn(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {


            string projectPath = Helper.SetProjectPath();
            string projectPath1 = "ExcelData\\test.xlsx";
            string controlPath1 = projectPath + projectPath1;
            //List<string> rowValue = new List<string> { };

            Microsoft.Office.Interop.Excel.Application xlApp = new Microsoft.Office.Interop.Excel.Application();
            Microsoft.Office.Interop.Excel.Workbook xlWorkbook = xlApp.Workbooks.Open(controlPath1);
            Microsoft.Office.Interop.Excel.Worksheet xlWorksheet = xlWorkbook.Worksheets.get_Item("test");

            Microsoft.Office.Interop.Excel.Range xlRange = xlWorksheet.UsedRange;
            int rowCount = xlRange.Rows.Count;
            int colCount = xlRange.Columns.Count;


            int z = 1;

            for (int i = 2; i <= rowCount; i++)
            {
                string UserID = xlRange.Cells[i, 1].Value2.ToString();

                ThinkTime(2);
                WaitUntil(driver, Control("SearchTeamname", "CommonObj"), 50);
                Element(driver, Control("SearchTeamname", "CommonObj")).SendKeys(UserID);
                ThinkTime(2);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", UserID + " User name added ", UserID + " User name added ");
                ThinkTime(2);
                WaitUntil(driver, Control("Searchbutton", "Generic"), 50);
                Element(driver, Control("Searchbutton", "Generic")).Click();
                ThinkTime(2);
                WaitUntil(driver, Control("getPassive", "CommonObj"), 50);
                string passive = Element(driver, Control("getPassive", "CommonObj")).Text;
                ThinkTime(2);
                WaitUntil(driver, Control("SelectUserForRole", "Generic"), 50);
                Element(driver, Control("SelectUserForRole", "Generic")).Click();

                ThinkTime(2);
                WaitUntil(driver, Control("settingArrowDown", "Generic"), 50);
                Element(driver, Control("settingArrowDown", "Generic")).Click();
                ThinkTime(2);

                WaitUntil(driver, Control("securityRolesOption", "Generic"), 50);
                Element(driver, Control("securityRolesOption", "Generic")).Click();
                ThinkTime(5);
                string parentWindowHandle = driver.CurrentWindowHandle;

                SwitchToFrame(driver, "contentIFrame0");
                SwitchToFrame(driver, "areaRolesFrame");
                ThinkTime(5);
                // Element(driver, Control("getValueRole", Value1, "Generic")).Click();

                for (int j = 2; j <= colCount; j++)
                {

                    string val = xlRange.Cells[i, j].Value2.ToString();
                    int Role1 = Elements(driver, Control("getValueRole", val, "Generic"));
                    if (Role1 > 0)
                    {

                        // AddLog(driver, testInReport, testName, testDataIteration, "Pass", val + " assigned properly for " + UserID, Value1 + " assigned properly for " + UserID);
                        xlRange.Cells[i, j].Interior.Color = System.Drawing.ColorTranslator.ToOle(System.Drawing.Color.Green);
                        xlWorkbook.Save();
                    }


                    else if (val == "NA")
                    {
                        xlRange.Cells[i, j].Interior.Color = System.Drawing.ColorTranslator.ToOle(System.Drawing.Color.Black);
                        xlWorkbook.Save();
                    }
                    else if (passive.Contains("PASSIVE"))
                    {
                        xlRange.Cells[i, j].Interior.Color = System.Drawing.ColorTranslator.ToOle(System.Drawing.Color.Yellow);
                        xlWorkbook.Save();
                    }

                    else
                    {
                        //
                        // AddLog(driver, testInReport, testName, testDataIteration, "Fail", val + " not assigned properly for " + UserID, val + " not assigned properly for " + UserID);
                        //Assert.Fail(Value1 + " not assigned for " + UserID);
                        xlRange.Cells[i, j].Interior.Color = System.Drawing.ColorTranslator.ToOle(System.Drawing.Color.Red);
                        xlWorkbook.Save();
                    }


                }

                ThinkTime(3);
                driver.SwitchTo().DefaultContent();
                WaitUntil(driver, Control("CloseButton", "CommonObj"), 240);
                MoveToElement(driver, Control("CloseButton", "CommonObj"));
                Element(driver, Control("CloseButton", "CommonObj")).Click();

                ThinkTime(2);
                SwitchToFrame(driver, "contentIFrame" + z);
                SwitchToFrame(driver, "ViewArea");
                z++;
            }
            xlWorkbook.Close();
            xlApp.Quit();

        }
        public void LearnExceltoList(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {


            string projectPath = Helper.SetProjectPath();
            string projectPath1 = "ExcelData\\test.xlsx";
            string controlPath1 = projectPath + projectPath1;
            //List<string> rowValue = new List<string> { };

            Microsoft.Office.Interop.Excel.Application xlApp = new Microsoft.Office.Interop.Excel.Application();
            Microsoft.Office.Interop.Excel.Workbook xlWorkbook = xlApp.Workbooks.Open(controlPath1);
            Microsoft.Office.Interop.Excel.Worksheet xlWorksheet = xlWorkbook.Worksheets.get_Item("test");

            Microsoft.Office.Interop.Excel.Range xlRange = xlWorksheet.UsedRange;
            int rowCount = xlRange.Rows.Count;
            int colCount = xlRange.Columns.Count;


            int z = 1;

            for (int i = 2; i <= rowCount; i++)
            {
                string UserID = xlRange.Cells[i, 1].Value2.ToString();

                ThinkTime(2);
                WaitUntil(driver, Control("SearchTeamname", "Generic"), 50);
                Element(driver, Control("SearchTeamname", "Generic")).SendKeys(UserID);
                ThinkTime(2);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", UserID + " User name added ", UserID + " User name added ");

                WaitUntil(driver, Control("Searchbutton", "Generic"), 50);
                Element(driver, Control("Searchbutton", "Generic")).Click();
                ThinkTime(2);
                WaitUntil(driver, Control("SelectUserForRole", "Generic"), 50);
                Element(driver, Control("SelectUserForRole", "Generic")).Click();
                ThinkTime(2);
                WaitUntil(driver, Control("getPassive", "CommonObj"), 50);
                string passive = Element(driver, Control("getPassive", "CommonObj")).GetAttribute("title");
                ThinkTime(2);
                WaitUntil(driver, Control("settingArrowDown", "Generic"), 50);
                Element(driver, Control("settingArrowDown", "Generic")).Click();
                ThinkTime(2);

                WaitUntil(driver, Control("securityRolesOption", "Generic"), 50);
                Element(driver, Control("securityRolesOption", "Generic")).Click();
                ThinkTime(5);
                string parentWindowHandle = driver.CurrentWindowHandle;

                SwitchToFrame(driver, "contentIFrame0");
                SwitchToFrame(driver, "areaRolesFrame");
                ThinkTime(5);
                // Element(driver, Control("getValueRole", Value1, "Generic")).Click();

                for (int j = 2; j <= colCount; j++)
                {

                    string val = xlRange.Cells[i, j].Value2.ToString();
                    int Role1 = Elements(driver, Control("getValueRole", val, "Generic"));
                    if (Role1 > 0)
                    {

                        // AddLog(driver, testInReport, testName, testDataIteration, "Pass", val + " assigned properly for " + UserID, Value1 + " assigned properly for " + UserID);
                        xlRange.Cells[i, j].Interior.Color = System.Drawing.ColorTranslator.ToOle(System.Drawing.Color.Green);
                        xlWorkbook.Save();
                    }
                    else
                    {
                        if (val == "NA")
                        {
                            xlRange.Cells[i, j].Interior.Color = System.Drawing.ColorTranslator.ToOle(System.Drawing.Color.Yellow);
                            xlWorkbook.Save();
                        }
                        //
                        // AddLog(driver, testInReport, testName, testDataIteration, "Fail", val + " not assigned properly for " + UserID, val + " not assigned properly for " + UserID);
                        //Assert.Fail(Value1 + " not assigned for " + UserID);
                        xlRange.Cells[i, j].Interior.Color = System.Drawing.ColorTranslator.ToOle(System.Drawing.Color.Red);
                        xlWorkbook.Save();
                    }
                }

                ThinkTime(3);
                driver.SwitchTo().DefaultContent();
                WaitUntil(driver, Control("CloseButton", "CommonObj"), 240);
                MoveToElement(driver, Control("CloseButton", "CommonObj"));
                Element(driver, Control("CloseButton", "CommonObj")).Click();

                ThinkTime(2);
                SwitchToFrame(driver, "contentIFrame" + z);
                SwitchToFrame(driver, "ViewArea");
                z++;
            }
            xlWorkbook.Close();
            xlApp.Quit();

        }
        public void ValidateRolewith6(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string SearchUserName, string Value1, string Value2, string Value3, string Value4, string Value5, string Value6)
        {

            ThinkTime(3);

            WaitUntil(driver, Control("SearchTeamname", "Generic"), 240);
            MoveToElement(driver, Control("SearchTeamname", "Generic"));
            Element(driver, Control("SearchTeamname", "Generic")).SendKeys(Keys.Control + "a");
            Element(driver, Control("SearchTeamname", "Generic")).SendKeys(Keys.Delete);
            ThinkTime(2);
            WaitUntil(driver, Control("SearchTeamname", "Generic"), 50);
            Element(driver, Control("SearchTeamname", "Generic")).SendKeys(SearchUserName);
            ThinkTime(2);
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", SearchUserName + " User name added ", SearchUserName + " User name added ");

            WaitUntil(driver, Control("Searchbutton", "Generic"), 50);
            Element(driver, Control("Searchbutton", "Generic")).Click();
            ThinkTime(2);
            WaitUntil(driver, Control("SelectUserForRole", "Generic"), 50);
            Element(driver, Control("SelectUserForRole", "Generic")).Click();
            ThinkTime(2);
            ThinkTime(2);
            WaitUntil(driver, Control("settingArrowDown", "Generic"), 50);
            Element(driver, Control("settingArrowDown", "Generic")).Click();
            ThinkTime(2);
            ThinkTime(2);
            WaitUntil(driver, Control("securityRolesOption", "Generic"), 50);
            Element(driver, Control("securityRolesOption", "Generic")).Click();
            ThinkTime(5);
            string parentWindowHandle = driver.CurrentWindowHandle;

            SwitchToFrame(driver, "contentIFrame0");
            SwitchToFrame(driver, "areaRolesFrame");

            ThinkTime(5);
            // Element(driver, Control("getValueRole", Value1, "Generic")).Click();
            int Role1 = Elements(driver, Control("getValueRole", Value1, "Generic"));
            if (Role1 > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", Value1 + " assigned properly for " + SearchUserName, Value1 + " assigned properly for " + SearchUserName);
            }
            else
            {
                //
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", Value1 + " not assigned properly for " + SearchUserName, Value1 + " not assigned properly for " + SearchUserName);
                Assert.Fail(Value1 + " not assigned for " + SearchUserName);

            }
            int Role2 = Elements(driver, Control("getValueRole", Value2, "Generic"));
            if (Role2 > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "IWG Sales Country Manager assigned properly for " + SearchUserName, "IWG Sales Country Manager assigned properly for " + SearchUserName);

            }
            else
            {
                //
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "IWG Sales Country Manager not assigned properly for " + SearchUserName, "IWG Sales Country Manager not assigned properly for " + SearchUserName);
                Assert.Fail(Value2 + " not assigned for " + SearchUserName);

            }
            int Role3 = Elements(driver, Control("getValueRole", Value3, "Generic"));
            if (Role3 > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", Value3 + " assigned properly for " + SearchUserName, Value3 + " assigned properly for " + SearchUserName);
            }
            else
            {
                //
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", Value3 + " not assigned properly for " + SearchUserName, Value3 + " not assigned properly for " + SearchUserName);
                Assert.Fail(Value3 + " not assigned for " + SearchUserName);

            }

            int Role4 = Elements(driver, Control("getValueRole", Value4, "Generic"));
            if (Role4 > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", Value4 + " assigned properly for " + SearchUserName, Value4 + " assigned properly for " + SearchUserName);
            }
            else
            {
                //
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", Value4 + " not assigned properly for " + SearchUserName, Value4 + " not assigned properly for " + SearchUserName);
                Assert.Fail(Value4 + " not assigned for " + SearchUserName);

            }
            int Role5 = Elements(driver, Control("getValueRole", Value5, "Generic"));
            if (Role5 > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", Value5 + " assigned properly for " + SearchUserName, Value5 + " assigned properly for " + SearchUserName);
            }
            else
            {
                //
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", Value5 + " not assigned properly for " + SearchUserName, Value5 + " not assigned properly for " + SearchUserName);
                Assert.Fail(Value5 + " not assigned for " + SearchUserName);

            }
            //scrollDownOpportunity(driver, testInReport, testName, testDataIteration);
            int Role6 = Elements(driver, Control("getValueRole", Value6, "Generic"));
            if (Role6 > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", Value6 + " assigned properly for " + SearchUserName, Value6 + " assigned properly for " + SearchUserName);
            }
            else
            {
                //
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", Value6 + " not assigned properly for " + SearchUserName, Value6 + " not assigned properly for " + SearchUserName);
                Assert.Fail(Value6 + " not assigned for " + SearchUserName);

            }


        }

        public void ValidateRolewith4(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string SearchUserName, string Value1, string Value2, string Value3, string Value4)
        {

            ThinkTime(3);

            WaitUntil(driver, Control("SearchTeamname", "Generic"), 240);
            MoveToElement(driver, Control("SearchTeamname", "Generic"));
            Element(driver, Control("SearchTeamname", "Generic")).SendKeys(Keys.Control + "a");
            Element(driver, Control("SearchTeamname", "Generic")).SendKeys(Keys.Delete);
            ThinkTime(2);
            WaitUntil(driver, Control("SearchTeamname", "Generic"), 50);
            Element(driver, Control("SearchTeamname", "Generic")).SendKeys(SearchUserName);
            ThinkTime(2);
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", SearchUserName + " User name added ", SearchUserName + " User name added ");

            WaitUntil(driver, Control("Searchbutton", "Generic"), 50);
            Element(driver, Control("Searchbutton", "Generic")).Click();
            ThinkTime(2);
            WaitUntil(driver, Control("SelectUserForRole", "Generic"), 50);
            Element(driver, Control("SelectUserForRole", "Generic")).Click();
            ThinkTime(2);
            ThinkTime(2);
            WaitUntil(driver, Control("settingArrowDown", "Generic"), 50);
            Element(driver, Control("settingArrowDown", "Generic")).Click();
            ThinkTime(2);
            ThinkTime(2);
            WaitUntil(driver, Control("securityRolesOption", "Generic"), 50);
            Element(driver, Control("securityRolesOption", "Generic")).Click();
            ThinkTime(5);
            string parentWindowHandle = driver.CurrentWindowHandle;

            SwitchToFrame(driver, "contentIFrame0");
            SwitchToFrame(driver, "areaRolesFrame");

            ThinkTime(5);
            // Element(driver, Control("getValueRole", Value1, "Generic")).Click();
            int Role1 = Elements(driver, Control("getValueRole", Value1, "Generic"));
            if (Role1 > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", Value1 + " assigned properly for " + SearchUserName, Value1 + " assigned properly for " + SearchUserName);
            }
            else
            {
                //
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", Value1 + " not assigned properly for " + SearchUserName, Value1 + " not assigned properly for " + SearchUserName);
                Assert.Fail(Value1 + " not assigned for " + SearchUserName);

            }
            int Role2 = Elements(driver, Control("getValueRole", Value2, "Generic"));
            if (Role2 > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", Value2 + " assigned properly for " + SearchUserName, Value2 + " assigned properly for " + SearchUserName);
            }
            else
            {
                //
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", Value2 + " not assigned properly for " + SearchUserName, Value2 + " not assigned properly for " + SearchUserName);
                Assert.Fail(Value2 + " not assigned for " + SearchUserName);

            }
            int Role3 = Elements(driver, Control("getValueRole", Value3, "Generic"));
            if (Role3 > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", Value3 + " assigned properly for " + SearchUserName, Value3 + " assigned properly for " + SearchUserName);
            }
            else
            {
                //
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", Value3 + " not assigned properly for " + SearchUserName, Value3 + " not assigned properly for " + SearchUserName);
                Assert.Fail(Value3 + " not assigned for " + SearchUserName);

            }

            int Role4 = Elements(driver, Control("getValueRole", Value4, "Generic"));
            if (Role4 > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", Value4 + " assigned properly for " + SearchUserName, Value4 + " assigned properly for " + SearchUserName);
            }
            else
            {
                //
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", Value4 + " not assigned properly for " + SearchUserName, Value4 + " not assigned properly for " + SearchUserName);
                Assert.Fail(Value4 + " not assigned for " + SearchUserName);

            }

            driver.Close();

        }


        public void MoveToUserAdvancedSettings(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string SearchTestrecord)
        {
            driver.SwitchTo().DefaultContent();
            string parentWindowHandle = driver.CurrentWindowHandle;
            WindowHandling(driver);
            string parentWindowHandle1 = driver.CurrentWindowHandle;
            WindowHandling(driver);
            ThinkTime(2);


            WaitUntil(driver, Control("SettingDropdown", "Generic"), 240);
            MoveToElement(driver, Control("SettingDropdown", "Generic"));
            Element(driver, Control("SettingDropdown", "Generic")).Click();
            ThinkTime(3);

            WaitUntil(driver, Control("SecurityButton", "Generic"), 240);
            MoveToElement(driver, Control("SecurityButton", "Generic"));
            Element(driver, Control("SecurityButton", "Generic")).Click();
            ThinkTime(3);

            SwitchToFrame(driver, "contentIFrame0");
            WaitUntil(driver, Control("SecurityLink", "Generic"), 240);
            MoveToElement(driver, Control("SecurityLink", "Generic"));
            Element(driver, Control("SecurityLink", "Generic")).Click();
            ThinkTime(3);

            SwitchToFrame(driver, "ViewArea");
            ThinkTime(3);
            WaitUntil(driver, Control("SelectRole", "Generic"), 240);
            MoveToElement(driver, Control("SelectRole", "Generic"));
            ActionsClick(driver, Control("SelectRole", "Generic"));
            ThinkTime(4);

            SwitchToFrame(driver, "contentIFrame0");

            ThinkTime(3);

            WaitUntil(driver, Control("SelectCoreRecords", "Generic"), 240);
            MoveToElement(driver, Control("SelectCoreRecords", "Generic"));
            Element(driver, Control("SelectCoreRecords", "Generic")).Click();

            ThinkTime(4);


            WaitUntil(driver, Control("TeamSearch", "AdvanceFind"), 240);
            MoveToElement(driver, Control("TeamSearch", "AdvanceFind"));
            Element(driver, Control("TeamSearch", "AdvanceFind")).SendKeys("SearchTestrecord");
            ThinkTime(2);
            WaitUntil(driver, Control("TeamSearchButton", "AdvanceFind"), 240);
            MoveToElement(driver, Control("TeamSearchButton", "AdvanceFind"));
            Element(driver, Control("TeamSearchButton", "AdvanceFind")).Click();
            ThinkTime(4);

            if (Elements(driver, Control("NoRecord", "AdvanceFind")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "User is unable to add the Manila KL team", "User is unable to add the Manila KL team");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "User is able to add the Manila KL team", "User is able to add the Manila KL team");

            }

            MoveToElement(driver, Control("TeamSearch", "AdvanceFind"));
            Element(driver, Control("TeamSearch", "AdvanceFind")).SendKeys(Keys.Control + "a");
            Element(driver, Control("TeamSearch", "AdvanceFind")).SendKeys(Keys.Backspace);
            Element(driver, Control("TeamSearch", "AdvanceFind")).SendKeys("Kuala Lumpur LSC English");
            ThinkTime(2);

            MoveToElement(driver, Control("TeamSearchButton", "AdvanceFind"));
            JSClick(driver, Control("TeamSearchButton", "AdvanceFind"));
            //Element(driver, Control("TeamSearchButton", "AdvanceFind")).Click();
            ThinkTime(4);

            int ResultCount = Elements(driver, Control("SeachResult", "AdvanceFind"));
            if (ResultCount > 0)
            {
                WaitUntil(driver, Control("FirstItem", "AdvanceFind"), 240);
                MoveToElement(driver, Control("FirstItem", "AdvanceFind"));
                JSClick(driver, Control("FirstItem", "AdvanceFind"));
                // Element(driver, Control("FirstItem", "AdvanceFind")).Click();
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "User is able to add the kuala Lumpur Team", "User is able to add the kuala Lumpur Team");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "User is unable to add the kuala Lumpur Team", "User is unable to add the kuala Lumpur Team");

            }
            //driver.Close();
            WindowHandling(driver, parentWindowHandle);

        }


        //Out of office setting
        public void OutofOfficeSetting(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {

            ThinkTime(5);
            driver.SwitchTo().DefaultContent();
            ThinkTime(2);
            WaitUntil(driver, Control("AppLauncherCRM", "Generic"), 30);
            Element(driver, Control("AppLauncherCRM", "Generic")).Click();
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "AppLauncher Opened", "AppLauncher Opened");
            ThinkTime(5);

            WaitUntil(driver, Control("OutlookLink", "Generic"), 30);
            Element(driver, Control("OutlookLink", "Generic")).Click();
            //Actions action = new Actions(driver);
            //action.KeyDown(Keys.Control).MoveToElement(Element(driver, Control("OutlookLink", "Generic"))).Click().Perform();
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "OutlookLink Clicked", "OutlookLink Clicked");
            ThinkTime(5);
            //WindowHandling(driver);
            WaitUntil(driver, Control("OutlookMailLink", "Generic"), 60);
            Element(driver, Control("OutlookMailLink", "Generic")).Click();
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "OutlookMailLink Clicked", "OutlookMailLink Clicked");
            //WindowHandling(driver);
            try
            {
                ThinkTime(5);
                DateTime now = DateTime.Now;
                // DateTime AddMin = now.AddMinutes(-270);
                string datetimeNow = now.ToString("dddddddddddd, MMMMMMMM d");
                String datetimeStr = datetimeNow.Substring(0, 3);
                if (datetimeStr == "Sun" || datetimeStr == "Mon" || datetimeStr == "Tue" || datetimeStr == "Wed" || datetimeStr == "Thu")
                {


                    string Nextdate = now.AddDays(1).ToString("yyyy/MM/dd").Replace("/", "-");
                    IWebElement DateCalSel = driver.FindElement(By.XPath("//div[@data-tabid='surfaceMonthHeader_" + Nextdate + "']"));
                    ThinkTime(5);
                    DateCalSel.Click();
                    new Actions(driver).DoubleClick(DateCalSel).Perform();
                }
                else if (datetimeStr == "Fri")
                {

                    string Nextdate = now.AddDays(3).ToString("yyyy/MM/dd").Replace("/", "-");
                    IWebElement DateCalSel = driver.FindElement(By.XPath("//div[@data-tabid='surfaceMonthHeader_" + Nextdate + "']"));
                    ThinkTime(5);
                    DateCalSel.Click();
                    new Actions(driver).DoubleClick(DateCalSel).Perform();
                }
                else if (datetimeStr == "Sat")
                {

                    string Nextdate = now.AddDays(2).ToString("yyyy/MM/dd").Replace("/", "-");
                    IWebElement DateCalSel = driver.FindElement(By.XPath("//div[@data-tabid='surfaceMonthHeader_" + Nextdate + "']"));
                    ThinkTime(5);
                    DateCalSel.Click();
                    new Actions(driver).DoubleClick(DateCalSel).Perform();
                }


                //string Nextdate = DateTime.Now.AddDays(1).ToString("yyyy/MM/dd").Replace("/", "-");
                //IWebElement DateCalSel = driver.FindElement(By.XPath("//div[@data-tabid='surfaceMonthHeader_" + Nextdate + "']"));

                ThinkTime(5);
                WaitUntil(driver, Control("AddDetailsCal", "Generic"), 30);
                Element(driver, Control("AddDetailsCal", "Generic")).SendKeys("AutoMate1");
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Title Entered", "Title Entered");
                ThinkTime(5);
                WaitUntil(driver, Control("StartTimeCal", "Generic"), 30);
                Element(driver, Control("StartTimeCal", "Generic")).Clear();
                ThinkTime(2);
                Element(driver, Control("StartTimeCal", "Generic")).SendKeys("09:00 AM");
                ThinkTime(5);
                WaitUntil(driver, Control("EndTimeCal", "Generic"), 30);
                Element(driver, Control("EndTimeCal", "Generic")).Clear();
                ThinkTime(2);
                Element(driver, Control("EndTimeCal", "Generic")).SendKeys("10:00 AM");
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Start and End date Entered", "Start and End date Entered");
                ThinkTime(5);
                Element(driver, Control("BusyDrop", "Generic")).Click();
                WaitUntil(driver, Control("AwayDrop", "Generic"), 30);
                Element(driver, Control("AwayDrop", "Generic")).Click();
                WaitUntil(driver, Control("SaveCal", "Generic"), 30);
                Element(driver, Control("SaveCal", "Generic")).Click();
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Out of office triggered", "Out of office triggered");
            }
            catch (Exception e) { }
            ThinkTime(2);
            WaitUntil(driver, Control("SignOutObj", "CommonObj"), 30);
            Element(driver, Control("SignOutObj", "CommonObj")).Click();
            ThinkTime(2);
            WaitUntil(driver, Control("SignoutConfirm", "CommonObj"), 30);
            Element(driver, Control("SignoutConfirm", "CommonObj")).Click();
            //WaitUntil(driver, Control("AppLauncherCRM", "Generic"), 30);
            //Element(driver, Control("AppLauncherCRM", "Generic")).Click();
            //WaitUntil(driver, Control("SalesLink", "Generic"), 30);
            //Element(driver, Control("SalesLink", "Generic")).Click();
            //ThinkTime(2);
            //driver.Navigate().GoToUrl(hitUrl);


        }
        //Delete the outof Office
        public void DelOutofOffice(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {

            ThinkTime(5);
            driver.SwitchTo().DefaultContent();
            ThinkTime(2);
            WaitUntil(driver, Control("AppLauncherCRM", "Generic"), 30);
            Element(driver, Control("AppLauncherCRM", "Generic")).Click();
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "AppLauncher Opened", "AppLauncher Opened");
            ThinkTime(5);

            WaitUntil(driver, Control("OutlookLink", "Generic"), 30);
            Element(driver, Control("OutlookLink", "Generic")).Click();
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "OutlookLink Clicked", "OutlookLink Clicked");
            ThinkTime(5);
            WaitUntil(driver, Control("OutlookMailLink", "Generic"), 60);
            Element(driver, Control("OutlookMailLink", "Generic")).Click();
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "OutlookMailLink Clicked", "OutlookMailLink Clicked");
            ThinkTime(3);

            DateTime now = DateTime.Now;
            //DateTime AddMin = now.AddMinutes(-270);
            string datetimeNow = now.ToString("dddddddddddd, MMMMMMMM d");
            String datetimeStr = datetimeNow.Substring(0, 3);
            if (datetimeStr == "Sun" || datetimeStr == "Mon" || datetimeStr == "Tue" || datetimeStr == "Wed" || datetimeStr == "Thu")
            {
                string Nextdate = now.AddDays(1).ToString("yyyy/MM/dd").Replace("/", "-");
                IWebElement DateCalSel = driver.FindElement(By.XPath("//div[@data-tabid='surfaceMonthHeader_" + Nextdate + "']"));
                DateCalSel.Click();
            }
            else if (datetimeStr == "Fri")
            {
                string Nextdate = now.AddDays(3).ToString("yyyy/MM/dd").Replace("/", "-");
                IWebElement DateCalSel = driver.FindElement(By.XPath("//div[@data-tabid='surfaceMonthHeader_" + Nextdate + "']"));
                DateCalSel.Click();
            }
            else if (datetimeStr == "Sat")
            {

                string Nextdate = now.AddDays(2).ToString("yyyy/MM/dd").Replace("/", "-");
                IWebElement DateCalSel = driver.FindElement(By.XPath("//div[@data-tabid='surfaceMonthHeader_" + Nextdate + "']"));
                DateCalSel.Click();
            }






            ThinkTime(2);
            WaitUntil(driver, Control("FindAway", "Generic"), 60);
            Element(driver, Control("FindAway", "Generic")).Click();
            WaitUntil(driver, Control("DeleteBtnAway", "Generic"), 60);
            Element(driver, Control("DeleteBtnAway", "Generic")).Click();
            ThinkTime(2);
            WaitUntil(driver, Control("DeleteBtnAway2", "Generic"), 60);
            Element(driver, Control("DeleteBtnAway2", "Generic")).Click();
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Away Deleted", "Away Deleted");
            WaitUntil(driver, Control("AppLauncherCRM", "Generic"), 30);
            Element(driver, Control("AppLauncherCRM", "Generic")).Click();
            WaitUntil(driver, Control("SalesLink", "Generic"), 30);
            Element(driver, Control("SalesLink", "Generic")).Click();
            ThinkTime(2);
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Back to Home", "Back to Home");
        }


        public void EnterContactNumber(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string Contactno)
        {
            ThinkTime(2);
            WaitUntil(driver, Control("BusinessPhone", "Contacts"), 30);
            Element(driver, Control("BusinessPhone", "Contacts")).SendKeys(Contactno);
            ThinkTime(7);
            if (Elements(driver, Control("ScriptDialg", "Opportunity")) > 0)
            {
                Element(driver, Control("HandleScriptError", "Opportunity")).Click();
                ThinkTime(3);
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "No Script error present", "No Script error present");

            }
            ThinkTime(3);
            saveFooter(driver, testInReport, testName, testDataIteration);

        }






        public void Callandverifyconnectionestablished(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string callicon)
        {
            ThinkTime(4);
            string parentWindowHandle = driver.CurrentWindowHandle;
            WindowHandling(driver);
            ThinkTime(1);
            //driver.Manage().Window.Maximize();
            //ThinkTime(1);
            //driver.SwitchTo().DefaultContent();
            //ThinkTime(2);
            // Click on Call icon
            WaitUntil(driver, Control("CallMobileagent", callicon, "Contacts"), 30);
            ThinkTime(1);
            MoveToElement(driver, Control("CallMobileagent", callicon, "Contacts"));
            ThinkTime(1);
            Element(driver, Control("CallMobileagent", callicon, "Contacts")).Click();
            ThinkTime(3);
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Cloud Interaction", "Cloud interaction verification");
            SwitchToFrame(driver, "SidePanelIFrame");
            ThinkTime(1);
            SwitchToFrameElement(driver, By.XPath("//iframe[@title='InteractionSync for PureCloud']"));
            ThinkTime(2);
            SwitchToFrameElement(driver, By.XPath("//iframe[@id='isynccif']"));
            ThinkTime(1);
            ThinkTime(1);
            int call = Elements(driver, Control("verrifycloudcallconnected", "Contacts"));
            if (call > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Cloud Interaction", "Cloud interaction verification");
                ThinkTime(1);
            }
            else
            {

                Assert.Fail("Call not connected");
            }
            driver.SwitchTo().DefaultContent();

        }

        public void Callbrokeropportunity(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            scrollUpOpportunityEnterprise(driver, testInReport, testName, testDataIteration);
            ThinkTime(4);
            string parentWindowHandle = driver.CurrentWindowHandle;
            WindowHandling(driver);
            WindowHandling(driver);
            ThinkTime(1);
            //driver.Manage().Window.Maximize();
            //ThinkTime(1);
            //driver.SwitchTo().DefaultContent();
            //ThinkTime(2);
            //scrollDownOpportunityEnterprise(driver, testInReport, testName, testDataIteration);


            // Click on Call icon
            WaitUntil(driver, Control("CallMobileagentbroker", "Contacts"), 30);
            ThinkTime(1);
            MoveToElement(driver, Control("CallMobileagentbroker", "Contacts"));
            ThinkTime(1);
            Element(driver, Control("CallMobileagentbroker", "Contacts")).Click();
            ThinkTime(3);
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Cloud Interaction", "Cloud interaction verification");
            SwitchToFrame(driver, "SidePanelIFrame");
            ThinkTime(1);
            SwitchToFrameElement(driver, By.XPath("//iframe[@title='InteractionSync for PureCloud']"));
            ThinkTime(2);
            SwitchToFrameElement(driver, By.XPath("//iframe[@id='isynccif']"));
            ThinkTime(1);
            ThinkTime(1);
            int call = Elements(driver, Control("verrifycloudcallconnected", "Contacts"));
            if (call > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Cloud Interaction", "Cloud interaction verification");
                ThinkTime(1);
            }
            else
            {

                Assert.Fail("Call not connected");
            }
            driver.SwitchTo().DefaultContent();

        }




        public void Verifycloudinteraction(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string MobileNo, string BusinessNo, string callmob, string callbus)
        {

            string parentWindowHandle = driver.CurrentWindowHandle;
            WindowHandling(driver);
            WindowHandling(driver);
            ThinkTime(1);
            //driver.Manage().Window.Maximize();
            //ThinkTime(1);
            //driver.SwitchTo().DefaultContent();
            //ThinkTime(2); ThinkTime(3);
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            scrollDownOpportunityEnterpriseCust(driver, testInReport, testName, testDataIteration, "100");
            ThinkTime(3);
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            ThinkTime(4);
            WaitUntil(driver, Control("Mobilenumber", "Contacts"), 30);
            MoveToElement(driver, Control("Mobilenumber", "Contacts"));
            Element(driver, Control("Mobilenumber", "Contacts")).SendKeys(MobileNo);
            ThinkTime(4);
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            //Element(driver, Control("Mobilenumber", "Contacts")).Click();
            ThinkTime(1);
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            // Click on Call icon
            WaitUntil(driver, Control("CallMobileagent", callmob, "Contacts"), 30);
            ThinkTime(1);
            MoveToElement(driver, Control("CallMobileagent", callmob, "Contacts"));
            ThinkTime(1);
            Element(driver, Control("CallMobileagent", callmob, "Contacts")).Click();
            ThinkTime(3);
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Cloud Interaction", "Cloud interaction verification");

            SwitchToFrame(driver, "SidePanelIFrame");
            ThinkTime(1);
            SwitchToFrameElement(driver, By.XPath("//iframe[@title='InteractionSync for PureCloud']"));
            ThinkTime(2);
            SwitchToFrameElement(driver, By.XPath("//iframe[@id='isynccif']"));
            ThinkTime(1);

            //   SwitchToFrame(driver, "isynccif");
            ThinkTime(1);
            int call = Elements(driver, Control("verrifycloudcallconnected", "Contacts"));
            if (call > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Cloud Interaction", "Cloud interaction verification");
                ThinkTime(4);
                // Disconnect
                Element(driver, Control("cloudcalldisconnect", "Contacts")).Click();
                ThinkTime(3);
                if (Elements(driver, Control("verifycloudcalldisconnected", "Contacts")) > 0)
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Cloud Interaction", "Cloud interaction verification");
                    ThinkTime(3);
                }
                else
                {
                    Assert.Fail("Call not disconnected");
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Cloud Interaction", "Cloud interaction verification");

                }
            }
            else
            {
                Assert.Fail("Call not connected");
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Cloud Interaction", "Cloud interaction verification");

            }

            // Click on Call icon

            if (Elements(driver, Control("ScriptDialg", "Opportunity")) > 0)
            {
                Element(driver, Control("HandleScriptError", "Opportunity")).Click();
                ThinkTime(3);
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "No Script error present", "No Script error present");

            }

            string parentWindowHandle1 = driver.CurrentWindowHandle;
            WindowHandling(driver);
            WindowHandling(driver);
            ThinkTime(1);
            //driver.Manage().Window.Maximize();
            //ThinkTime(1);
            driver.SwitchTo().DefaultContent();
            //ThinkTime(2);
            WaitUntil(driver, Control("Businessnumber", "Contacts"), 30);
            MoveToElement(driver, Control("Businessnumber", "Contacts"));
            Element(driver, Control("Businessnumber", "Contacts")).SendKeys(BusinessNo);
            ThinkTime(3);
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            MoveToElement(driver, Control("Callbusinessagent", callbus, "Contacts"));

            Element(driver, Control("Callbusinessagent", callbus, "Contacts")).Click();
            ThinkTime(3);
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Cloud Interaction", "Cloud interaction verification");
            SwitchToFrame(driver, "SidePanelIFrame");
            ThinkTime(10);
            SwitchToFrameElement(driver, By.XPath("//iframe[@title='InteractionSync for PureCloud']"));
            ThinkTime(2);
            SwitchToFrameElement(driver, By.XPath("//iframe[@id='isynccif']"));
            ThinkTime(1);
            WaitUntil(driver, Control("verrifycloudcallconnected", "Contacts"), 30);
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            // Verify call is conected
            if (Elements(driver, Control("verrifycloudcallconnected", "Contacts")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Cloud Interaction", "Cloud interaction verification");
                ThinkTime(3);

                // Disconnect the call

                Element(driver, Control("cloudcalldisconnect", "Contacts")).Click();
                ThinkTime(3);
                if (Elements(driver, Control("verifycloudcalldisconnected", "Contacts")) > 0)
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Cloud Interaction", "Cloud interaction verification");
                    ThinkTime(3);
                }
                else
                {
                    Assert.Fail("Call not disconnected");
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Cloud Interaction", "Cloud interaction verification");

                }
            }
            else
            {
                Assert.Fail("Call not connected");
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Cloud Interaction", "Cloud interaction verification");

            }

        }


        public void VerifycloudinteractionforLead(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string MobileNo, string BusinessNo, string callmob, string callbus)
        {

            string parentWindowHandle = driver.CurrentWindowHandle;
            WindowHandling(driver);
            ThinkTime(1);
            driver.Manage().Window.Maximize();
            ThinkTime(1);
            driver.SwitchTo().DefaultContent();
            ThinkTime(2); ThinkTime(3);

            scrollDownOpportunityEnterprise(driver, testInReport, testName, testDataIteration);
            ThinkTime(3);
            WaitUntil(driver, Control("Mobilenumber", "Contacts"), 30);
            MoveToElement(driver, Control("Mobilenumber", "Contacts"));
            Element(driver, Control("Mobilenumber", "Contacts")).SendKeys(MobileNo);
            ThinkTime(4);
            Element(driver, Control("Mobilenumber", "Contacts")).Click();
            ThinkTime(1);

            // Click on Call icon
            WaitUntil(driver, Control("Callbusinessagent", callmob, "Contacts"), 30);
            ThinkTime(1);
            MoveToElement(driver, Control("Callbusinessagent", callmob, "Contacts"));
            ThinkTime(1);
            Element(driver, Control("Callbusinessagent", callmob, "Contacts")).Click();
            ThinkTime(3);
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Cloud Interaction", "Cloud interaction verification");

            SwitchToFrame(driver, "SidePanelIFrame");
            ThinkTime(1);
            SwitchToFrameElement(driver, By.XPath("//iframe[@title='InteractionSync for PureCloud']"));
            ThinkTime(2);
            SwitchToFrameElement(driver, By.XPath("//iframe[@id='isynccif']"));
            ThinkTime(1);

            //   SwitchToFrame(driver, "isynccif");
            ThinkTime(1);
            int call = Elements(driver, Control("verrifycloudcallconnected", "Contacts"));
            if (call > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Cloud Interaction", "Cloud interaction verification");
                ThinkTime(4);
                // Disconnect
                Element(driver, Control("cloudcalldisconnect", "Contacts")).Click();
                ThinkTime(3);
                if (Elements(driver, Control("verifycloudcalldisconnected", "Contacts")) > 0)
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Cloud Interaction", "Cloud interaction verification");
                    ThinkTime(3);
                }
                else
                {
                    Assert.Fail("Call not disconnected");
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Cloud Interaction", "Cloud interaction verification");

                }
            }
            else
            {
                Assert.Fail("Call not connected");
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Cloud Interaction", "Cloud interaction verification");

            }

            // Click on Call icon

            string parentWindowHandle1 = driver.CurrentWindowHandle;
            WindowHandling(driver);
            ThinkTime(1);
            driver.Manage().Window.Maximize();
            ThinkTime(1);
            driver.SwitchTo().DefaultContent();
            ThinkTime(2);
            WaitUntil(driver, Control("Businessnumber", "Contacts"), 30);
            MoveToElement(driver, Control("Businessnumber", "Contacts"));
            Element(driver, Control("Businessnumber", "Contacts")).SendKeys(BusinessNo);
            ThinkTime(3);
            MoveToElement(driver, Control("CallMobileagent", callbus, "Contacts"));

            Element(driver, Control("CallMobileagent", callbus, "Contacts")).Click();
            ThinkTime(3);
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Cloud Interaction", "Cloud interaction verification");
            SwitchToFrame(driver, "SidePanelIFrame");
            ThinkTime(10);
            SwitchToFrameElement(driver, By.XPath("//iframe[@title='InteractionSync for PureCloud']"));
            ThinkTime(2);
            SwitchToFrameElement(driver, By.XPath("//iframe[@id='isynccif']"));
            ThinkTime(1);
            WaitUntil(driver, Control("verrifycloudcallconnected", "Contacts"), 30);

            // Verify call is conected
            if (Elements(driver, Control("verrifycloudcallconnected", "Contacts")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Cloud Interaction", "Cloud interaction verification");
                ThinkTime(3);

                // Disconnect the call

                Element(driver, Control("cloudcalldisconnect", "Contacts")).Click();
                ThinkTime(3);
                if (Elements(driver, Control("verifycloudcalldisconnected", "Contacts")) > 0)
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Cloud Interaction", "Cloud interaction verification");
                    ThinkTime(3);
                }
                else
                {
                    Assert.Fail("Call not disconnected");
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Cloud Interaction", "Cloud interaction verification");

                }
            }
            else
            {
                Assert.Fail("Call not connected");
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Cloud Interaction", "Cloud interaction verification");

            }

        }


        public void VerifycloudinteractionLead(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string MobileNo, string BusinessNo, string callmob, string callbus)
        {
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration); ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration); ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            string parentWindowHandle = driver.CurrentWindowHandle;
            WindowHandling(driver);
            WindowHandling(driver);
            ThinkTime(1);
            //driver.Manage().Window.Maximize();
            ThinkTime(1);
            driver.SwitchTo().DefaultContent();
            ThinkTime(2);


            scrollDownContactPage(driver, testInReport, testName, testDataIteration);
            // scrollDownContactPageEnterprise(driver, testInReport, testName, testDataIteration);
            ThinkTime(3);
            WaitUntil(driver, Control("Mobilenumber1", "Contacts"), 30);
            MoveToElement(driver, Control("Mobilenumber1", "Contacts"));
            Element(driver, Control("Mobilenumber1", "Contacts")).SendKeys(MobileNo);
            ThinkTime(3);
            //Element(driver, Control("Mobilenumber1", "Contacts")).Click();
            //ThinkTime(1);

            // Click on Call icon
            WaitUntil(driver, Control("Callbusinessagent1", callmob, "Contacts"), 30);
            ThinkTime(1);
            MoveToElement(driver, Control("Callbusinessagent1", callmob, "Contacts"));
            ThinkTime(1);
            Element(driver, Control("Callbusinessagent1", callmob, "Contacts")).Click();
            ThinkTime(3);
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Cloud Interaction", "Cloud interaction verification");

            SwitchToFrame(driver, "SidePanelIFrame");
            ThinkTime(1);
            SwitchToFrameElement(driver, By.XPath("//iframe[@title='InteractionSync for PureCloud']"));
            ThinkTime(2);
            SwitchToFrameElement(driver, By.XPath("//iframe[@id='isynccif']"));
            ThinkTime(1);

            //   SwitchToFrame(driver, "isynccif");
            ThinkTime(5);
            int call = Elements(driver, Control("verrifycloudcallconnected1", "Contacts"));
            if (call > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Cloud Interaction", "Cloud interaction verification");
                ThinkTime(1);
                // Disconnect
                Element(driver, Control("cloudcalldisconnect1", "Contacts")).Click();
                ThinkTime(3);
                if (Elements(driver, Control("verifycloudcalldisconnected1", "Contacts")) > 0)
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Cloud Interaction", "Cloud interaction verification");
                    ThinkTime(3);
                }
                else
                {
                    Assert.Fail("Call not disconnected");
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Cloud Interaction", "Cloud interaction verification");

                }
            }
            else
            {
                Assert.Fail("Call not connected");
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Cloud Interaction", "Cloud interaction verification");

            }

            // Click on Call icon

            string parentWindowHandle1 = driver.CurrentWindowHandle;
            WindowHandling(driver);
            WindowHandling(driver);
            ThinkTime(1);
            driver.Manage().Window.Maximize();
            ThinkTime(1);
            driver.SwitchTo().DefaultContent();
            ThinkTime(2);
            //WaitUntil(driver, Control("Businessnumber1", "Contacts"), 30);
            //MoveToElement(driver, Control("Businessnumber1", "Contacts"));
            //Element(driver, Control("Businessnumber1", "Contacts")).SendKeys(BusinessNo);
            //ThinkTime(3);
            //MoveToElement(driver, Control("CallMobileagent1", callbus, "Contacts"));

            //Element(driver, Control("CallMobileagent1", callbus, "Contacts")).Click();
            //ThinkTime(3);
            //AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Cloud Interaction", "Cloud interaction verification");
            //SwitchToFrame(driver, "SidePanelIFrame");
            //ThinkTime(10);
            //SwitchToFrameElement(driver, By.XPath("//iframe[@title='InteractionSync for PureCloud']"));
            //ThinkTime(2);
            //SwitchToFrameElement(driver, By.XPath("//iframe[@id='isynccif']"));
            //ThinkTime(1);
            //WaitUntil(driver, Control("verrifycloudcallconnected1", "Contacts"), 30);

            //// Verify call is conected
            //if (Elements(driver, Control("verrifycloudcallconnected1", "Contacts")) > 0)
            //{
            //    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Cloud Interaction", "Cloud interaction verification");
            //    ThinkTime(3);

            //    // Disconnect the call

            //    Element(driver, Control("cloudcalldisconnect1", "Contacts")).Click();
            //    ThinkTime(3);
            //    if (Elements(driver, Control("verifycloudcalldisconnected1", "Contacts")) > 0)
            //    {
            //        AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Cloud Interaction", "Cloud interaction verification");
            //        ThinkTime(3);
            //    }
            //    else
            //    {
            //        Assert.Fail("Call not disconnected");
            //        AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Cloud Interaction", "Cloud interaction verification");

            //    }
            //}
            //else
            //{
            //    Assert.Fail("Call not connected");
            //    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Cloud Interaction", "Cloud interaction verification");

            //}

        }

        public void VerifyOpportunityFollowUp(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string Topic, string Account, string CloseDate, string Revenue, string Contact, string phone, string Owner, string pipeline, string Status)
        {
            ThinkTime(2);
            WaitUntil(driver, Control("MoreCommandsBtn", "Dashboards"), 60);
            Element(driver, Control("MoreCommandsBtn", "Dashboards")).Click();
            ThinkTime(2);
            WaitUntil(driver, Control("SeeAllRecordAssociateBtn", "GenericOld"), 60);
            MoveToElement(driver, Control("SeeAllRecordAssociateBtn", "GenericOld"));
            Element(driver, Control("SeeAllRecordAssociateBtn", "GenericOld")).Click();
            ThinkTime(3);

            MoveToElement(driver, Control("Header", Topic, "Dashboards"));
            string TopicColumn = Element(driver, Control("Header", Topic, "Dashboards")).Text.ToString();
            if (TopicColumn == Topic)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "TopicColumn is present", "TopicColumn is present");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "fail", "TopicColumn is not present", "TopicColumn is not present");
            }
            ThinkTime(3);

            MoveToElement(driver, Control("Header", Account, "Dashboards"));
            string AccountColumn = Element(driver, Control("Header", Topic, "Dashboards")).Text.ToString();
            if (AccountColumn == Account)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "AccountColumn is present", "AccountColumn is present");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "fail", "AccountColumn is not present", "AccountColumn is not present");
            }
            ThinkTime(3);

            MoveToElement(driver, Control("Header", Contact, "Dashboards"));
            string ContactColumn = Element(driver, Control("Header", Contact, "Dashboards")).Text.ToString();
            if (ContactColumn == Contact)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "ContactColumn is present", "ContactColumn is present");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "fail", "ContactColumn is not present", "ContactColumn is not present");
            }
            ThinkTime(3);

            MoveToElement(driver, Control("Header", phone, "Dashboards"));
            string phoneColumn = Element(driver, Control("Header", phone, "Dashboards")).Text.ToString();
            if (phoneColumn == phone)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "phoneColumn is present", "phoneColumn is present");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "fail", "phoneColumn is not present", "phoneColumn is not present");
            }
            ThinkTime(3);

            MoveToElement(driver, Control("Header", CloseDate, "Dashboards"));
            string CloseDateColumn = Element(driver, Control("Header", CloseDate, "Dashboards")).Text.ToString();
            if (CloseDateColumn == CloseDate)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "CloseDateColumn is present", "CloseDateColumn is present");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "fail", "CloseDateColumn is not present", "CloseDateColumn is not present");
            }
            ThinkTime(3);

            MoveToElement(driver, Control("Header", Revenue, "Dashboards"));
            string RevenueColumn = Element(driver, Control("Header", Revenue, "Dashboards")).Text.ToString();
            if (RevenueColumn == Revenue)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "RevenueColumn is present", "RevenueColumn is present");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "fail", "RevenueColumn is not present", "RevenueColumn is not present");
            }

            ThinkTime(3);

            MoveToElement(driver, Control("Header", Owner, "Dashboards"));
            string OwnerColumn = Element(driver, Control("Header", Owner, "Dashboards")).Text.ToString();
            if (OwnerColumn == Owner)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "OwnerColumn is present", "OwnerColumn is present");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "fail", "OwnerColumn is not present", "OwnerColumn is not present");
            }
            ThinkTime(3);

            MoveToElement(driver, Control("Header", pipeline, "Dashboards"));
            string pipelineColumn = Element(driver, Control("Header", pipeline, "Dashboards")).Text.ToString();
            if (pipelineColumn == pipeline)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "pipelineColumn is present", "pipelineColumn is present");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "fail", "pipelineColumn is not present", "pipelineColumn is not present");
            }
            ThinkTime(3);

            MoveToElement(driver, Control("Header", Status, "Dashboards"));
            string StatusColumn = Element(driver, Control("Header", Status, "Dashboards")).Text.ToString();
            if (StatusColumn == Status)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "StatusColumn is present", "StatusColumn is present");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "fail", "StatusColumn is not present", "StatusColumn is not present");
            }
            ThinkTime(3);
        }

        public void VerifyCustomerTabField(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string Topic, string Opptype, string Contact, string phone, string email, string company, string customer)
        {

            ThinkTime(5);
            WaitUntil(driver, Control("Opportunityfields", Topic, "Opportunity"), 30);
            MoveToElement(driver, Control("Opportunityfields", Topic, "Opportunity"));
            string TopicColumn = Element(driver, Control("Opportunityfields", Topic, "Opportunity")).Text.ToString();
            if (TopicColumn == Topic)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "TopicColumn is present", "TopicColumn is present");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "fail", "TopicColumn is not present", "TopicColumn is not present");
            }
            ThinkTime(3);

            MoveToElement(driver, Control("Opportunityfields", Opptype, "Opportunity"));
            string AccountColumn = Element(driver, Control("Opportunityfields", Opptype, "Opportunity")).Text.ToString();
            if (AccountColumn == Opptype)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Opportunity sub type  is present", "Opportunity sub type Column is present");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "fail", "Opportunity sub type Column is not present", "Opportunity sub type is not present");
            }
            ThinkTime(3);

            MoveToElement(driver, Control("Opportunityfields", Contact, "Opportunity"));
            string ContactColumn = Element(driver, Control("Opportunityfields", Contact, "Opportunity")).Text.ToString();
            if (ContactColumn == Contact)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "ContactColumn is present", "ContactColumn is present");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "fail", "ContactColumn is not present", "ContactColumn is not present");
            }
            ThinkTime(3);

            MoveToElement(driver, Control("Opportunityfields", phone, "Opportunity"));
            string phoneColumn = Element(driver, Control("Opportunityfields", phone, "Opportunity")).Text.ToString();
            if (phoneColumn == phone)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "phoneColumn is present", "phoneColumn is present");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "fail", "phoneColumn is not present", "phoneColumn is not present");
            }
            ThinkTime(3);


            MoveToElement(driver, Control("Opportunityfields", email, "Opportunity"));
            string OwnerColumn = Element(driver, Control("Opportunityfields", email, "Opportunity")).Text.ToString();
            if (OwnerColumn == email)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "email Column is present", "email Column is present");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "fail", "email Column is not present", "email Column is not present");
            }
            ThinkTime(3);

            MoveToElement(driver, Control("Opportunityfields", company, "Opportunity"));
            string companyColumn = Element(driver, Control("Opportunityfields", company, "Opportunity")).Text.ToString();
            if (companyColumn == company)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "companyColumn is present", "companyColumn is present");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "fail", "companyColumn is not present", "companyColumn is not present");
            }
            ThinkTime(3);
            MoveToElement(driver, Control("Opportunityfields", customer, "Opportunity"));
            string customerColumn = Element(driver, Control("Opportunityfields", customer, "Opportunity")).Text.ToString();
            if (customerColumn == customer)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "customerColumn is present", "customerColumn is present");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "fail", "customerColumn is not present", "customerColumn is not present");
            }
            ThinkTime(3);

        }
        public void VerifySalesOppFields(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string Topic, string Account, string CloseDate, string Revenue, string Contact, string phone, string Owner)
        {

            WaitUntil(driver, Control("MoreCommandsBtn2", "Dashboards"), 120);
            Element(driver, Control("MoreCommandsBtn2", "Dashboards")).Click();
            MoveToElement(driver, Control("SeeAllRecordAssociateBtn", "GenericOld"));
            Element(driver, Control("SeeAllRecordAssociateBtn", "GenericOld")).Click();
            ThinkTime(3);

            WaitUntil(driver, Control("Header", Topic, "Dashboards"), 360);
            MoveToElement(driver, Control("Header", Topic, "Dashboards"));
            string TopicColumn = Element(driver, Control("Header", Topic, "Dashboards")).Text.ToString();
            if (TopicColumn == Topic)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "TopicColumn is present", "TopicColumn is present");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "fail", "TopicColumn is not present", "TopicColumn is not present");
            }
            ThinkTime(3);

            MoveToElement(driver, Control("Header", Account, "Dashboards"));
            string AccountColumn = Element(driver, Control("Header", Topic, "Dashboards")).Text.ToString();
            if (AccountColumn == Account)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "AccountColumn is present", "AccountColumn is present");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "fail", "AccountColumn is not present", "AccountColumn is not present");
            }
            ThinkTime(3);

            MoveToElement(driver, Control("Header", CloseDate, "Dashboards"));
            string CloseDateColumn = Element(driver, Control("Header", CloseDate, "Dashboards")).Text.ToString();
            if (CloseDateColumn == CloseDate)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "CloseDateColumn is present", "CloseDateColumn is present");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "fail", "CloseDateColumn is not present", "CloseDateColumn is not present");
            }
            ThinkTime(3);

            MoveToElement(driver, Control("Header", Revenue, "Dashboards"));
            string RevenueColumn = Element(driver, Control("Header", Revenue, "Dashboards")).Text.ToString();
            if (RevenueColumn == Revenue)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "RevenueColumn is present", "RevenueColumn is present");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "fail", "RevenueColumn is not present", "RevenueColumn is not present");
            }
            ThinkTime(3);

            MoveToElement(driver, Control("Header", Contact, "Dashboards"));
            string ContactColumn = Element(driver, Control("Header", Contact, "Dashboards")).Text.ToString();
            if (ContactColumn == Contact)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "ContactColumn is present", "ContactColumn is present");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "fail", "ContactColumn is not present", "ContactColumn is not present");
            }
            ThinkTime(3);

            MoveToElement(driver, Control("Header", phone, "Dashboards"));
            string phoneColumn = Element(driver, Control("Header", phone, "Dashboards")).Text.ToString();
            if (phoneColumn == phone)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "phoneColumn is present", "phoneColumn is present");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "fail", "phoneColumn is not present", "phoneColumn is not present");
            }
            ThinkTime(3);

            MoveToElement(driver, Control("Header", Owner, "Dashboards"));
            string OwnerColumn = Element(driver, Control("Header", Owner, "Dashboards")).Text.ToString();
            if (OwnerColumn == Owner)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "OwnerColumn is present", "OwnerColumn is present");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "fail", "OwnerColumn is not present", "OwnerColumn is not present");
            }
            ThinkTime(3);


        }



        public void VerifyMyActivitiesForThisWeek(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string Topic, string Account, string CloseDate, string Revenue, string Contact, string phone, string Owner, string pipeline, string Status)
        {

            WaitUntil(driver, Control("Morecomd", "Dashboards"), 12);
            Element(driver, Control("Morecomd", "Dashboards")).Click();
            MoveToElement(driver, Control("SeeAllRecordAssociateBtn", "GenericOld"));
            Element(driver, Control("SeeAllRecordAssociateBtn", "GenericOld")).Click();
            ThinkTime(3);

            MoveToElement(driver, Control("Header", Topic, "Dashboards"));
            string TopicColumn = Element(driver, Control("Header", Topic, "Dashboards")).Text.ToString();
            if (TopicColumn == Topic)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "TopicColumn is present", "TopicColumn is present");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "fail", "TopicColumn is not present", "TopicColumn is not present");
            }
            ThinkTime(3);

            MoveToElement(driver, Control("Header", Account, "Dashboards"));
            string AccountColumn = Element(driver, Control("Header", Topic, "Dashboards")).Text.ToString();
            if (AccountColumn == Account)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "AccountColumn is present", "AccountColumn is present");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "fail", "AccountColumn is not present", "AccountColumn is not present");
            }
            ThinkTime(3);

            MoveToElement(driver, Control("Header", CloseDate, "Dashboards"));
            string CloseDateColumn = Element(driver, Control("Header", CloseDate, "Dashboards")).Text.ToString();
            if (CloseDateColumn == CloseDate)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "CloseDateColumn is present", "CloseDateColumn is present");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "fail", "CloseDateColumn is not present", "CloseDateColumn is not present");
            }
            ThinkTime(3);

            MoveToElement(driver, Control("Header", Revenue, "Dashboards"));
            string RevenueColumn = Element(driver, Control("Header", Revenue, "Dashboards")).Text.ToString();
            if (RevenueColumn == Revenue)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "RevenueColumn is present", "RevenueColumn is present");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "fail", "RevenueColumn is not present", "RevenueColumn is not present");
            }
            ThinkTime(3);

            MoveToElement(driver, Control("Header", Contact, "Dashboards"));
            string ContactColumn = Element(driver, Control("Header", Contact, "Dashboards")).Text.ToString();
            if (ContactColumn == Contact)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "ContactColumn is present", "ContactColumn is present");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "fail", "ContactColumn is not present", "ContactColumn is not present");
            }
            ThinkTime(3);

            MoveToElement(driver, Control("Header", phone, "Dashboards"));
            string phoneColumn = Element(driver, Control("Header", phone, "Dashboards")).Text.ToString();
            if (phoneColumn == phone)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "phoneColumn is present", "phoneColumn is present");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "fail", "phoneColumn is not present", "phoneColumn is not present");
            }
            ThinkTime(3);

            MoveToElement(driver, Control("Header", Owner, "Dashboards"));
            string OwnerColumn = Element(driver, Control("Header", Owner, "Dashboards")).Text.ToString();
            if (OwnerColumn == Owner)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "OwnerColumn is present", "OwnerColumn is present");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "fail", "OwnerColumn is not present", "OwnerColumn is not present");
            }
            ThinkTime(3);

            MoveToElement(driver, Control("Header", pipeline, "Dashboards"));
            string pipelineColumn = Element(driver, Control("Header", pipeline, "Dashboards")).Text.ToString();
            if (pipelineColumn == pipeline)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "pipelineColumn is present", "pipelineColumn is present");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "fail", "pipelineColumn is not present", "pipelineColumn is not present");
            }
            ThinkTime(3);

            MoveToElement(driver, Control("Header", Status, "Dashboards"));
            string StatusColumn = Element(driver, Control("Header", Status, "Dashboards")).Text.ToString();
            if (StatusColumn == Status)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "StatusColumn is present", "StatusColumn is present");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "fail", "StatusColumn is not present", "StatusColumn is not present");
            }
            ThinkTime(3);
        }


        public void VerifyRetentionDevelopmentKPI(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string Customers, string Activities, string Opportunities, string OpportunitiesFunnel)

        {
            MoveToElement(driver, Control("HeadingDrop", Customers, "Dashboards"));
            string CustomersHeading = Element(driver, Control("HeadingDrop", Customers, "Dashboards")).Text.ToString();
            if (CustomersHeading == Customers)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "CustomersHeading is present", "CustomersHeading is present");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "fail", "CustomersHeading is not present", "CustomersHeading is not present");
            }
            ThinkTime(3);

            MoveToElement(driver, Control("HeadingDrop", Activities, "Dashboards"));
            string ActivitiesHeading = Element(driver, Control("HeadingDrop", Activities, "Dashboards")).Text.ToString();
            if (ActivitiesHeading == Activities)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "ActivitiesHeading is present", "ActivitiesHeading is present");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "fail", "ActivitiesHeading is not present", "ActivitiesHeading is not present");
            }
            ThinkTime(3);

            MoveToElement(driver, Control("HeadingDrop", Opportunities, "Dashboards"));
            string OpportunitiesHeading = Element(driver, Control("HeadingDrop", Opportunities, "Dashboards")).Text.ToString();
            if (OpportunitiesHeading == Opportunities)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "OpportunitiesHeading is present", "OpportunitiesHeading is present");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "fail", "OpportunitiesHeading is not present", "OpportunitiesHeading is not present");
            }
            ThinkTime(3);

            scrollMiddleDown(driver, testInReport, testName, testDataIteration);
            ThinkTime(15);

            scrollUpDashboard(driver, testInReport, testName, testDataIteration);

            ThinkTime(4);

            MoveToElement(driver, Control("OppFunnel", "Dashboards"));
            string OpporFunnel = Element(driver, Control("OppFunnel", "Dashboards")).Text.ToString();
            if (OpporFunnel == OpportunitiesFunnel)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "OpportunitiesFunnel is present", "OpportunitiesFunnel is present");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "fail", "OpportunitiesFunnel is not present", "OpportunitiesFunnel is not present");
            }
            ThinkTime(3);


        }

        public void VerifyBrandField(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string Customers)

        {
            ThinkTime(3);
            MoveToElement(driver, Control("CustomerHeading", "Opportunity"));
            string CustomersHeading = Element(driver, Control("CustomerHeading", "Opportunity")).GetAttribute("innerText").ToString();
            if (CustomersHeading.Contains(Customers))
            {

                AddLog(driver, testInReport, testName, testDataIteration, "fail", "Brand is autopopulated", "Brand is autopopulated");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Brand is not autopopulated", "Brand is not autopopulated");
            }
            ThinkTime(3);

            //NavigateToEntity(driver, testInReport, testName, testDataIteration, "Opportunities");

            //ThinkTime(3);
            //MoveToElement(driver, Control("Discardbutton", "Opportunity"));
            //Element(driver, Control("Discardbutton", "Opportunity")).Click();
        }


        public void VerifyMyCustomersField(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string Topic, string Account, string CloseDate, string Revenue, string Contact, string phone, string Owner, string pipeline, string Status)
        {

            WaitUntil(driver, Control("AcMorecomd", "Dashboards"), 12);
            Element(driver, Control("AcMorecomd", "Dashboards")).Click();
            MoveToElement(driver, Control("SeeAllRecordAssociateBtn", "GenericOld"));
            Element(driver, Control("SeeAllRecordAssociateBtn", "GenericOld")).Click();
            ThinkTime(10);

            MoveToElement(driver, Control("Header", Topic, "Dashboards"));
            string TopicColumn = Element(driver, Control("Header", Topic, "Dashboards")).Text.ToString();
            if (TopicColumn == Topic)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "TopicColumn is present", "TopicColumn is present");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "fail", "TopicColumn is not present", "TopicColumn is not present");
            }
            ThinkTime(3);

            MoveToElement(driver, Control("Header", Account, "Dashboards"));
            string AccountColumn = Element(driver, Control("Header", Topic, "Dashboards")).Text.ToString();
            if (AccountColumn == Account)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "AccountColumn is present", "AccountColumn is present");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "fail", "AccountColumn is not present", "AccountColumn is not present");
            }
            ThinkTime(3);

            MoveToElement(driver, Control("Header", CloseDate, "Dashboards"));
            string CloseDateColumn = Element(driver, Control("Header", CloseDate, "Dashboards")).Text.ToString();
            if (CloseDateColumn == CloseDate)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "CloseDateColumn is present", "CloseDateColumn is present");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "fail", "CloseDateColumn is not present", "CloseDateColumn is not present");
            }
            ThinkTime(3);

            MoveToElement(driver, Control("Header", Revenue, "Dashboards"));
            string RevenueColumn = Element(driver, Control("Header", Revenue, "Dashboards")).Text.ToString();
            if (RevenueColumn == Revenue)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "RevenueColumn is present", "RevenueColumn is present");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "fail", "RevenueColumn is not present", "RevenueColumn is not present");
            }
            ThinkTime(3);

            MoveToElement(driver, Control("Header", Contact, "Dashboards"));
            string ContactColumn = Element(driver, Control("Header", Contact, "Dashboards")).Text.ToString();
            if (ContactColumn == Contact)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "ContactColumn is present", "ContactColumn is present");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "fail", "ContactColumn is not present", "ContactColumn is not present");
            }
            ThinkTime(3);

            MoveToElement(driver, Control("Header", phone, "Dashboards"));
            string phoneColumn = Element(driver, Control("Header", phone, "Dashboards")).Text.ToString();
            if (phoneColumn == phone)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "phoneColumn is present", "phoneColumn is present");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "fail", "phoneColumn is not present", "phoneColumn is not present");
            }
            ThinkTime(3);

            MoveToElement(driver, Control("Header", Owner, "Dashboards"));
            string OwnerColumn = Element(driver, Control("Header", Owner, "Dashboards")).Text.ToString();
            if (OwnerColumn == Owner)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "OwnerColumn is present", "OwnerColumn is present");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "fail", "OwnerColumn is not present", "OwnerColumn is not present");
            }
            ThinkTime(3);
            scrollRight(driver, testInReport, testName, testDataIteration, "Scroll");
            MoveToElement(driver, Control("Header", pipeline, "Dashboards"));
            string pipelineColumn = Element(driver, Control("Header", pipeline, "Dashboards")).Text.ToString();
            if (pipelineColumn == pipeline)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "pipelineColumn is present", "pipelineColumn is present");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "fail", "pipelineColumn is not present", "pipelineColumn is not present");
            }
            ThinkTime(3);

            MoveToElement(driver, Control("Header", Status, "Dashboards"));
            string StatusColumn = Element(driver, Control("Header", Status, "Dashboards")).Text.ToString();
            if (StatusColumn == Status)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "StatusColumn is present", "StatusColumn is present");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "fail", "StatusColumn is not present", "StatusColumn is not present");
            }
            ThinkTime(3);
        }

        //Function to verify the Read Only Status
        public void VerifyReadOnlyStatus(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            driver.SwitchTo().DefaultContent();

            if (Elements(driver, Control("ReadOnly", "Generic")) == 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Case is not Read Only", "ReadOnly");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Case is  Read Only", "ReadOnly");
            }
        }

        //Function to verify any buttons

        public void RibbonButtonAvailable(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string Button)
        {
            WaitUntil(driver, Control("RibbonButton", Button, "Generic"), 30);

            if (Elements(driver, Control("RibbonButton", Button, "Generic")) == 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Button is not available", "Button");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Button is available", "Button");

            }

        }




        public void Selecting_Role_DashBoard_DropDown(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string role, string LSCrole)
        {

            driver.SwitchTo().DefaultContent();
            ThinkTime(2);
            SwitchToFrame(driver, "contentIFrame0");

            WaitUntil(driver, Control("Dashboard_DropDown", "Generic"), 60);
            ElementHighlight(driver, Control("Dashboard_DropDown", "Generic"));
            Element(driver, Control("Dashboard_DropDown", "Generic")).Click();

            WaitUntil(driver, Control("Dashboard_DropBtn", LSCrole, "Generic"), 60);
            Element(driver, Control("Dashboard_DropBtn", LSCrole, "Generic")).Click();

            String LSCRole = Element(driver, Control("Dashboard_Role", "Generic")).Text;
            Console.WriteLine(LSCRole);
            if (LSCRole == LSCrole)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "User is able to select DashBoard Role", " DashBoard Role");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "User is not able to select DashBoard Role", "DashBoard Role");
            }
        }




        public void Verify_CaseFields(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string role, string Generic, string UnReadIncoming, string CaseNumber_Field, string Category_Field, string SubCategory_Field, string Source_Field, string Company_Field, string Contact_Field, string Centre_Field, string CentreNumber_Field, string Region_Field, string Country_Field, string HiddenFrom_Field, string Priority_Field, string CreatedOn_Field, string SLA_ExpiryDate_Field, string AssignedTeam_Field, string AssignedUser_Field, string StatusReason_Field, string SLAFlag_Field, string LastReplied_Field, string AssignedDate_Field)
        {

            driver.SwitchTo().DefaultContent();
            ThinkTime(2);

            AutomaticFrameSwitch(driver);
            ThinkTime(2);
            SwitchToFrame(driver, "dashboardFrame");
            ThinkTime(2);
            WaitUntil(driver, Control(UnReadIncoming, Generic), 60);
            IsDisplayed(driver, testInReport, testName, testDataIteration, "UnReadIncoming");
            string unreadIncomingEmail = Element(driver, Control(UnReadIncoming, Generic)).Text;


            WaitUntil(driver, Control(CaseNumber_Field, Generic), 60);
            IsDisplayed(driver, testInReport, testName, testDataIteration, "CaseNumber_Field");
            string CaseNumber = Element(driver, Control(CaseNumber_Field, Generic)).Text;





            WaitUntil(driver, Control(Category_Field, Generic), 60);
            IsDisplayed(driver, testInReport, testName, testDataIteration, "Category_Field");
            string Catagory = Element(driver, Control(Category_Field, Generic)).Text;


            WaitUntil(driver, Control(SubCategory_Field, Generic), 60);
            IsDisplayed(driver, testInReport, testName, testDataIteration, "SubCategory_Field");
            string SubCategory = Element(driver, Control(SubCategory_Field, Generic)).Text;



            WaitUntil(driver, Control(Company_Field, Generic), 60);
            IsDisplayed(driver, testInReport, testName, testDataIteration, "Company_Field");
            string Company = Element(driver, Control(Company_Field, Generic)).Text;


            WaitUntil(driver, Control(Contact_Field, Generic), 60);
            IsDisplayed(driver, testInReport, testName, testDataIteration, "Contact_Field");
            string Contact = Element(driver, Control(Contact_Field, Generic)).Text;


            WaitUntil(driver, Control(Centre_Field, Generic), 60);
            IsDisplayed(driver, testInReport, testName, testDataIteration, "Centre_Field");
            string Centre = Element(driver, Control(Centre_Field, Generic)).Text;


            WaitUntil(driver, Control(CentreNumber_Field, Generic), 60);
            IsDisplayed(driver, testInReport, testName, testDataIteration, "CentreNumber_Field");
            string CenterNumber = Element(driver, Control(CentreNumber_Field, Generic)).Text;


            WaitUntil(driver, Control(Region_Field, Generic), 60);
            MoveToElement(driver, Control(Region_Field, Generic));
            IsDisplayed(driver, testInReport, testName, testDataIteration, "Region_Field");
            string Region = Element(driver, Control(Region_Field, Generic)).Text;


            WaitUntil(driver, Control(Country_Field, Generic), 60);
            MoveToElement(driver, Control(Country_Field, Generic));
            IsDisplayed(driver, testInReport, testName, testDataIteration, "Country_Field");
            string Country = Element(driver, Control(Country_Field, Generic)).Text;


            WaitUntil(driver, Control(HiddenFrom_Field, Generic), 60);
            MoveToElement(driver, Control(HiddenFrom_Field, Generic));
            IsDisplayed(driver, testInReport, testName, testDataIteration, "HiddenFrom_Field");
            string HiddenFrom = Element(driver, Control(HiddenFrom_Field, Generic)).Text;


            WaitUntil(driver, Control(Priority_Field, Generic), 60);
            MoveToElement(driver, Control(Priority_Field, Generic));
            IsDisplayed(driver, testInReport, testName, testDataIteration, "Priority_Field");
            string Priority = Element(driver, Control(Priority_Field, Generic)).Text;


            WaitUntil(driver, Control(CreatedOn_Field, Generic), 60);
            MoveToElement(driver, Control(CreatedOn_Field, Generic));
            IsDisplayed(driver, testInReport, testName, testDataIteration, "CreatedOn_Field");
            string CreatedOn = Element(driver, Control(CreatedOn_Field, Generic)).Text;


            WaitUntil(driver, Control(SLA_ExpiryDate_Field, Generic), 60);
            MoveToElement(driver, Control(SLA_ExpiryDate_Field, Generic));
            IsDisplayed(driver, testInReport, testName, testDataIteration, "SLA_ExpiryDate_Field");
            string ExpiryDate = Element(driver, Control(SLA_ExpiryDate_Field, Generic)).Text;


            WaitUntil(driver, Control(AssignedTeam_Field, Generic), 60);
            MoveToElement(driver, Control(AssignedTeam_Field, Generic));
            IsDisplayed(driver, testInReport, testName, testDataIteration, "AssignedTeam_Field");
            string AssignedTeam = Element(driver, Control(AssignedTeam_Field, Generic)).Text;


            WaitUntil(driver, Control(AssignedUser_Field, Generic), 60);
            MoveToElement(driver, Control(AssignedUser_Field, Generic));
            IsDisplayed(driver, testInReport, testName, testDataIteration, "AssignedUser_Field");
            string AssignedUser = Element(driver, Control(AssignedUser_Field, Generic)).Text;


            WaitUntil(driver, Control(StatusReason_Field, Generic), 60);
            MoveToElement(driver, Control(StatusReason_Field, Generic));
            IsDisplayed(driver, testInReport, testName, testDataIteration, "StatusReason_Field");
            string StatusReason = Element(driver, Control(StatusReason_Field, Generic)).Text;


            switch (role)
            {
                case "LSC Agent":
                    WaitUntil(driver, Control(Source_Field, Generic), 60);
                    MoveToElement(driver, Control(Source_Field, Generic));
                    IsDisplayed(driver, testInReport, testName, testDataIteration, "Source_Field");

                    break;

                case "GSC Agent":
                    WaitUntil(driver, Control(LastReplied_Field, Generic), 60);
                    MoveToElement(driver, Control(LastReplied_Field, Generic));
                    IsDisplayed(driver, testInReport, testName, testDataIteration, "LastReplied_Field");

                    WaitUntil(driver, Control(AssignedDate_Field, Generic), 60);
                    MoveToElement(driver, Control(AssignedDate_Field, Generic));
                    IsDisplayed(driver, testInReport, testName, testDataIteration, "AssignedDate_Field");
                    break;

            }

        }




        //For checking whether the element is displayed on not in the page

        public void IsDisplayed(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string element)
        {
            try
            {
                if (Element(driver, Control(element, "Generic")).Displayed)
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Element displayed correctly", " " + element);
                }
                else
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Element is not displayed correctly", " " + element);
                    Assert.Fail("Element is not displayed correctly");
                }
            }
            catch (Exception e)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Element is npot available", " " + element);
                Assert.Fail("Element is not displayed correctly");
            }

        }


        public void VerifyDBFieldisenabled(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(15);
            driver.SwitchTo().Frame("WebResource_BusinessProfileViewer");
            IList<IWebElement> obj = driver.FindElements(Control("editable", "Accounts"));
            int count = Elements(driver, Control("editable", "Accounts"));

            for (int i = 0; i < count; i++)
            {
                string editable = obj[i].GetProperty("isContentEditable").ToString();

                if (editable == "False")
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Field" + i + " is non editable", "DBFields");
                }

                else
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "DB Fields are editable", "DBFields");
                    Assert.Fail("Account DB business profile summary section is editable");
                }

            }

        }


        //For checking whether the element is displayed on not in the page

        public void IsDisplayedwithData(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string element, string data)
        {
            try
            {
                ElementHighlight(driver, Control(element, data, "Generic"));
                if (Element(driver, Control(element, data, "Generic")).Displayed)
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", data + "Element displayed correctly", " " + element);
                }
                else
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", data + "Element is not displayed correctly", " " + element);
                    Assert.Fail("Element is not displayed correctly");
                }
            }
            catch (Exception e)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Element is not available", " " + element);
                Assert.Fail("Element is not available : " + e);
            }

        }


        public void Dashboard_ViewSelector_Sections_verification(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string ViewSelector, string ViewSelector1)
        {
            AutomaticFrameSwitch(driver);
            ThinkTime(2);

            try
            {

                //verify the my active cases-GSc title
                WaitUntil(driver, Control("myActiveCasesVerify", "Generic"), 60);
                ElementHighlight(driver, Control("myActiveCasesVerify", "Generic"));
                string myActiveCase = Element(driver, Control("myActiveCasesVerify", "Generic")).Text;

                if (myActiveCase == ViewSelector)
                {
                    ThinkTime(1);
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "user is able to view My Active Cases Scetion", "My Active Cases");

                }

                else
                {
                    ThinkTime(1);
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "user is able to view My Active Cases Scetion", "My Active Cases");

                }

                //verify the GSC Open cases-In Progress with centre
                WaitUntil(driver, Control("gscOpenCasesTitle", "Generic"), 60);
                MoveToElement(driver, Control("gscOpenCasesTitle", "Generic"));
                ElementHighlight(driver, Control("gscOpenCasesTitle", "Generic"));
                string gscOpenCases = Element(driver, Control("gscOpenCasesTitle", "Generic")).Text;


                Console.WriteLine(gscOpenCases);
                if (myActiveCase == ViewSelector1)
                {
                    ThinkTime(1);
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "user is able to view GSC Open Cases Scetion", "GSC Open Cases - In Progress with Centre");

                }

                else
                {
                    ThinkTime(1);
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "user is able to view GSC Open Cases Scetion", "GSC Open Cases - In Progress with Centre");

                }
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
            }
        }

        public void Dashboards_AddNewCaseRecord(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string role)

        {


            driver.SwitchTo().DefaultContent();
            ThinkTime(2);

            AutomaticFrameSwitch(driver, "dashboardFrame");
            ThinkTime(2);
            WaitUntil(driver, Control("AddCaseRecord", "Generic"), 30);
            Element(driver, Control("AddCaseRecord", "Generic")).Click();


        }

        public void Dashboards_listofSystem_ViewFilter(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string Generic, string MyActiveDropDown, string MyActiveCaseDrop_Value, string SystemFilterView)

        {
            try
            {

                driver.SwitchTo().DefaultContent();
                ThinkTime(2);

                AutomaticFrameSwitch(driver, "dashboardFrame");
                ThinkTime(2);



                WaitUntil(driver, Control("SeeAllRecordAssociateBtn", "Generic"), 60);
                MoveToElement(driver, Control("SeeAllRecordAssociateBtn", "Generic"));
                if (Elements(driver, Control("SeeAllRecordAssociateBtn", "Generic")) > 0)
                {
                    Element(driver, Control("SeeAllRecordAssociateBtn", "LSCDashBoard")).Click();
                    WaitUntil(driver, Control("SeeAllRecordAssociateBtn", "LSCDashBoard"), 30);
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "My active case page is successfully displayed", "See the records associated Button");

                }
                else
                {
                    ThinkTime(1);
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "My active case is not displayed", "See the records associated Button");

                }

                ThinkTime(3);
                string parentWindowHandle = driver.CurrentWindowHandle;


                WindowHandling(driver);
                ThinkTime(1);
                driver.Manage().Window.Maximize();
                ThinkTime(1);
                driver.SwitchTo().DefaultContent();
                ThinkTime(2);
                driver.SwitchTo().Frame("contentIFrame0");

                WaitUntil(driver, Control(MyActiveDropDown, Generic), 30);
                Element(driver, Control(MyActiveDropDown, Generic)).Click();

                WaitUntil(driver, Control("SystemView", "Generic"), 60);
                ElementHighlight(driver, Control("SystemView", "Generic"));
                Element(driver, Control(MyActiveCaseDrop_Value, SystemFilterView, Generic)).Click();
                if (SystemFilterView == "All Cases")

                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "User is able to select Views From System Filter", "System View Filter");

                }
                else
                {
                    ThinkTime(1);
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "User is not able to select Views From System Filter", "System View Filter");
                }

                driver.Close();
                ThinkTime(1);
                Console.WriteLine("closed window");
                WindowHandling(driver, parentWindowHandle);
                ThinkTime(1);
                Console.WriteLine("parent window");

            }
            catch (Exception e)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", " cases display page is not displayed :\n " + e, "Cases Display Page error");
                throw;
            }

        }


        /// <summary>
        /// Method to check load next button on dashboard in CRM Application Records 
        /// </summary>
        /// <param name="driver"></param>
        /// <param name="testInReport"></param>
        /// <param name="testName"></param>
        /// <param name="role"></param>
        public void LoadNextPageButton(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string role, string CurrentPageNo, string NextPageNo)
        {


            driver.SwitchTo().DefaultContent();
            ThinkTime(3);

            WaitUntil(driver, Control("Lsc_RecordCount", "Generic"), 60);
            MoveToElement(driver, Control("Lsc_RecordCount", "Generic"));
            String RecordCount = Element(driver, Control("Lsc_RecordCount", "Generic")).Text.ToString();
            if (RecordCount.Contains("11"))
            {
                Console.WriteLine(RecordCount);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Number of Cases displayed is 1 - 11", "Current Page Records or Previos page");
                CurrentPageNo = Element(driver, Control("CurrentPage", "Generic")).Text;
                Console.WriteLine(CurrentPageNo);
                if (CurrentPageNo == "Page 1")
                {
                    ThinkTime(2);
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Current page is Page 1", "Page 1");
                }
                else
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Current page is not Page 1", "Page 1");
                    Assert.Fail();
                }

                WaitUntil(driver, Control("LoadNextPage_Btn", "Generic"), 60);
                MoveToElement(driver, Control("LoadNextPage_Btn", "Generic"));
                Element(driver, Control("LoadNextPage_Btn", "Generic")).Click();
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Clicked on Next Page button", "Page 2");

                NextPageNo = Element(driver, Control("NextPage", "Generic")).Text;
                if (NextPageNo == "Page 2")
                {

                    ThinkTime(2);
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Nex page is Page 2 is displayed", "Load next Button");
                }
                else
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Nex page is Page 2 is not displayed", "Load next Button");
                    Assert.Fail();
                }
                Console.WriteLine(NextPageNo);
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "User only have records less than 11", "Current Page Records or Previos page");

            }


        }




        public void LoadPreviousPageButton(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string role, string CurrentPageNo, string NextPageNo)
        {
            driver.SwitchTo().DefaultContent();
            ThinkTime(2);

            WaitUntil(driver, Control("LoadPreviousPage_Btn", "Generic"), 60);
            Element(driver, Control("LoadPreviousPage_Btn", "Generic")).Click();
            CurrentPageNo = Element(driver, Control("CurrentPage", "Generic")).Text;
            Console.WriteLine(CurrentPageNo);
            if (CurrentPageNo == "Page 1")
            {
                ThinkTime(2);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Current page is Page 1", "PreviousPage1");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Current page is not Page 1", "PreviousPage1");
                Assert.Fail();
            }
        }
        /// <summary>
        /// Method to check particular record search functionality on dashboard in CRM Application Records 
        /// </summary>
        /// <param name="driver"></param>
        /// <param name="testInReport"></param>
        /// <param name="testName"></param>
        /// <param name="caseNumber"></param>
        /// <param name="role"></param>
        // 
        public void SearchParticularRecord(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, String casenumber)
        {

            WaitUntil(driver, Control("CaseSearchBar", "Generic"), 60);
            ElementHighlight(driver, Control("CaseSearchBar", "Generic"));
            MoveToElement(driver, Control("CaseSearchBar", "Generic"));
            Element(driver, Control("CaseSearchBar", "Generic")).Clear();
            Element(driver, Control("CaseSearchBar", "Generic")).SendKeys(casenumber);
            ThinkTime(2);
            ElementHighlight(driver, Control("CaseSearchBar_SearchBtn", "Generic"));
            ActionsClick(driver, Control("CaseSearchBar_SearchBtn", "Generic"));
            ThinkTime(4);

            if ((Element(driver, Control("SearchedResultCaseNumber", casenumber, "Generic")).Text.ToString()) == casenumber)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "The" + casenumber + " is showing correctly in the search result", " Record Search");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "User is not able to Search Particular Record", " Record Search");
                Assert.Fail("User is not able to Search Particular Record");

            }
            ThinkTime(2);

        }



        /// <summary>
        /// Method to check load previous button on dashboard in CRM Application Records 
        /// </summary>
        /// <param name="driver"></param>
        /// <param name="testInReport"></param>
        /// <param name="testName"></param>
        /// <param name="role"></param>
        public void LoadPreviousPageButton(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string role, string NexPageViewSel)
        {

            AutomaticFrameSwitch(driver);
            ThinkTime(2);
            SwitchToFrame(driver, "dashboardFrame");
            ThinkTime(2);

            WaitUntil(driver, Control("CasesWithOtherTeam_Drop", "Generic"), 60);
            MoveToElement(driver, Control("CasesWithOtherTeam_Drop", "Generic"));
            Element(driver, Control("CasesWithOtherTeam_Drop", "Generic")).Click();

            WaitUntil(driver, Control("ViewSelection_NextPage", NexPageViewSel, "Generic"), 60);
            Element(driver, Control("ViewSelection_NextPage", NexPageViewSel, "Generic")).Click();


            if (Elements(driver, Control("CasesWithOtherTeam", "Generic")) > 0)
            {
                ElementHighlight(driver, Control("CasesWithOtherTeam", "Generic"));
                WaitUntil(driver, Control("CasesNextPage_Btn", "Generic"), 60);
                MoveToElement(driver, Control("CasesNextPage_Btn", "Generic"));
                Element(driver, Control("CasesNextPage_Btn", "Generic")).Click();

                WaitUntil(driver, Control("CasesPreviousPage_Btn", "Generic"), 60);
                Element(driver, Control("CasesPreviousPage_Btn", "Generic")).Click();
                ThinkTime(2);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "User is able to View Previous Page", "LSC Manager- Load Previous Page");
                MoveToElement(driver, Control("MyActiveCasesPageNo", "Generic"));
                String pageNo = Element(driver, Control("MyActiveCasesPageNo", "Generic")).Text;
                if (pageNo == "1")
                {
                    Console.WriteLine(pageNo);
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "User is able to View Page 1", "LSC Manager- Load Previous Page2");

                }
                else
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "User is not able to View Page 1", "LSC Manager- Load Previous Page2");
                }
            }

            else

            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "User is not able to View Previous Page", "LSC Manager- Load Previous Page");

            }
            ThinkTime(2);

        }



        public void Dashboard_Select_CreatePersonalView(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string ViewSelector1, string CreatePersonalView)
        {

            SwitchToFrame(driver, "dashboardFrame");
            ThinkTime(2);
            try
            {
                WaitUntil(driver, Control("gscOpenCasesTitle", "Generic"), 60);
                MoveToElement(driver, Control("gscOpenCasesTitle", "Generic"));
                ElementHighlight(driver, Control("gscOpenCasesTitle", "Generic"));
                string gscOpenCases = Element(driver, Control("gscOpenCasesTitle", "Generic")).Text;
                Console.WriteLine(gscOpenCases);
                Element(driver, Control("gscOpenCasesTitle", "Generic")).Click();
                WaitUntil(driver, Control("ViewSelection_NextPage", CreatePersonalView, "Generic"), 60);
                Element(driver, Control("ViewSelection_NextPage", CreatePersonalView, "Generic")).Click();

                if (gscOpenCases == ViewSelector1)
                {
                    ThinkTime(1);
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "user is able to view GSC Open Cases Scetion", "GSC Open Cases - In Progress with Centre");

                }

                else
                {
                    ThinkTime(1);
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "user is able to view GSC Open Cases Scetion", "GSC Open Cases - In Progress with Centre");

                }
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
            }
        }

        public void CreatingPersonalView(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string lookUpEntity, string UseSavedViewEntity, string AdvancedStatus, string AdvancedEqual, string PopUpWindow, string AdvancedFind_Desc)
        {
            try
            {

                ThinkTime(1);
                string parentWindowHandle = driver.CurrentWindowHandle;


                WindowHandling(driver);
                ThinkTime(1);
                driver.Manage().Window.Maximize();
                ThinkTime(1);
                driver.SwitchTo().DefaultContent();
                ThinkTime(2);
                SwitchToFrame(driver, "contentIFrame0");

                WaitUntil(driver, Control("AdvanceFindLookUpSelect", "AdvanceSearch"), 60);
                Element(driver, Control("AdvanceFindLookUpSelect", "AdvanceSearch")).Click();
                Console.WriteLine("lookup");
                Select(Element(driver, Control("AdvanceFindLookUpSelect", "AdvanceSearch"))).SelectByText(lookUpEntity);

                WaitUntil(driver, Control("SavedQuerrySelector", "AdvanceSearch"), 60);
                Element(driver, Control("SavedQuerrySelector", "AdvanceSearch")).Click();
                Select(Element(driver, Control("SavedQuerrySelector", "AdvanceSearch"))).SelectByText(UseSavedViewEntity);

                WaitUntil(driver, Control("AdvancedStatus_DropBtn", "AdvanceSearch"), 60);
                Element(driver, Control("AdvancedStatus_DropBtn", "AdvanceSearch")).Click();
                Select(Element(driver, Control("AdvancedStatus_Drop", "AdvanceSearch"))).SelectByText(AdvancedStatus);

                WaitUntil(driver, Control("AdvancedEquals_DropBtn", "AdvanceSearch"), 60);
                Element(driver, Control("AdvancedEquals_DropBtn", "AdvanceSearch")).Click();
                Select(Element(driver, Control("AdvancedEquals_Drop", "AdvanceSearch"))).SelectByText(AdvancedEqual);


                driver.SwitchTo().DefaultContent();
                WaitUntil(driver, Control("AdvanceFindSaveAs", "AdvanceSearch"), 60);
                Element(driver, Control("AdvanceFindSaveAs", "AdvanceSearch")).Click();

                ThinkTime(2);
                SwitchToFrame(driver, "InlineDialog_Iframe");
                ElementHighlight(driver, Control("AdvancedSaveAs_Popup", "AdvanceSearch"));
                string PopUp = Element(driver, Control("AdvancedSaveAs_Popup", "AdvanceSearch")).Text;
                Console.WriteLine("AdvancedFindPopUp" + PopUp);
                if (PopUpWindow == PopUp)
                {
                    ThinkTime(1);
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "New pop window is displayed", "Save as New View-PopUp");

                }
                else
                {
                    ThinkTime(1);
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "New pop window is not displayed", "Save as New View-PopUp");

                }
                WaitUntil(driver, Control("AdvancedFind_Desc", "AdvanceSearch"), 60);
                Element(driver, Control("AdvancedFind_Desc", "AdvanceSearch")).Click();
                Element(driver, Control("AdvancedFind_Desc", "AdvanceSearch")).SendKeys(AdvancedFind_Desc);

                WaitUntil(driver, Control("AdvancedFind_SaveBtn", "AdvanceSearch"), 60);
                Element(driver, Control("AdvancedFind_SaveBtn", "AdvanceSearch")).Click();

                WaitUntil(driver, Control("SavedView_Btn", "AdvanceSearch"), 60);
                Element(driver, Control("SavedView_Btn", "AdvanceSearch")).Click();

                ThinkTime(2);
                SwitchToFrame(driver, "contentIFrame0");
                WaitUntil(driver, Control("Saved_NewView", "AdvanceSearch"), 60);
                ElementHighlight(driver, Control("Saved_NewView", "AdvanceSearch"));
                WaitUntil(driver, Control("Saved_NewView", "AdvanceSearch"), 60);
                string SavedNewView = Element(driver, Control("Saved_NewView", "AdvanceSearch")).Text;
                Console.WriteLine(SavedNewView);
                if (UseSavedViewEntity == SavedNewView)
                {
                    ThinkTime(1);
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "New View is successfully created", "Saved-New View");

                }
                else
                {
                    ThinkTime(1);
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "New View is not created", "Saved-New View");

                }
                driver.Close();
                ThinkTime(1);
                Console.WriteLine("closed window");
                WindowHandling(driver, parentWindowHandle);
                ThinkTime(1);
                Console.WriteLine("parent window");

            }
            catch (Exception e)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Unexpected error and unable to login :\n " + e, "Unexpectederrorandunabletologin");
                throw;
            }
        }


        public void Verify_NumberOfCasesDisplayed(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, String role, string pageNumber, string NexPageViewSel, string CasesDisplayed)
        {
            SwitchToFrame(driver, "dashboardFrame");
            ThinkTime(2);
            MoveToElement(driver, Control("PageNoVerify", "Generic"));
            if (Elements(driver, Control("PageNoVerify", "Generic")) == 0)
            {
                Element(driver, Control("GscOpenCasesTitle", "Generic")).Click();
                WaitUntil(driver, Control("ViewSelection_NextPage", NexPageViewSel, "Generic"), 60);
                Element(driver, Control("ViewSelection_NextPage", NexPageViewSel, "Generic")).Click();
                ThinkTime(1);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "the number of cases is not displayed is 14(default) of total cases", "Cases Display");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "the number of cases is not displayed is 14(default) of total cases", "Cases Display");

            }
            MoveToElement(driver, Control("CasesDisplayed", "Generic"));

            int shownRecordsCount = Convert.ToInt32(Element(driver, Control("CasesDisplayed", "Generic")).Text);
            if (shownRecordsCount > 14)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "The total cases are showing on the window correctly", "GSC Agent cases");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "The total cases are not showing on the window correctly", "GSC Agent cases");
            }


        }


        public void DashboardslistofSystemViewFilter(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string SelectView, string ViewSelector)

        {


            driver.SwitchTo().DefaultContent();

            WaitUntil(driver, Control("MoreCommandsBtn2", "Generic"), 180);
            Element(driver, Control("MoreCommandsBtn2", "Generic")).Click();

            WaitUntil(driver, Control("SeeAllRecordAssociateBtn", "Generic"), 180);
            Element(driver, Control("SeeAllRecordAssociateBtn", "Generic")).Click();

            driver.SwitchTo().DefaultContent();
            ThinkTime(3);
            ElementHighlight(driver, Control("myActiveCasesVerify", "Generic"));

            if ((Element(driver, Control("myActiveCasesVerify", "Generic")).Text == ViewSelector))
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "user is able to view My Active Cases Scetion", "My Active Cases");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "user is able to view My Active Cases Scetion", "My Active Cases");
                Assert.Fail();
            }

            Element(driver, Control("myActiveCasesVerify", "Generic")).Click();

            WaitUntil(driver, Control("SelectSystemView", SelectView, "Generic"), 60);
            Element(driver, Control("SelectSystemView", SelectView, "Generic")).Click();
            ThinkTime(4);

            if (Element(driver, Control("SystemView", "Generic")).Text.ToString() == SelectView)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "user is able to select view", "selecting view");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "user is not able to Select view", "selecting view");
                Assert.Fail();
            }



        }

        public void ClickNewCase(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {

            driver.SwitchTo().DefaultContent();
            WaitUntil(driver, Control("NewCase", "Generic"), 60);
            if (Element(driver, Control("NewCase", "Generic")).Displayed)
            {
                Element(driver, Control("NewCase", "Generic")).Click();
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "", "new Case button is clicked");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "", "new Case button is not present");
                Assert.Fail("new Case button is not present");
            }
        }

        public void NewCaseCreationFields(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string UserRole, string company, string contact, string type, string Product, string Category, string SubCategory, string source, string subSource, string priority)
        {


            driver.SwitchTo().DefaultContent();
            ThinkTime(5);
            WaitUntil(driver, Control("typeFieldLabel", "Generic"), 180);
            Element(driver, Control("typeFieldLabel", "Generic")).Click();
            WaitUntil(driver, Control("typeFieldValue", type, "Generic"), 60);
            Element(driver, Control("typeFieldValue", type, "Generic")).Click();
            WaitUntil(driver, Control("categoryFieldInput", "Generic"), 60);
            Element(driver, Control("categoryFieldInput", "Generic")).Click();
            Element(driver, Control("categoryFieldInput", "Generic")).Clear();
            Element(driver, Control("categoryFieldInput", "Generic")).SendKeys(Category);
            ThinkTime(2);

            Element(driver, Control("categoryFieldInput", "Generic")).SendKeys(Keys.Enter);
            WaitUntil(driver, Control("categoryFieldSearch", "Generic"), 60);
            Element(driver, Control("categoryFieldSearch", "Generic")).Click();
            WaitUntil(driver, Control("lookupOption", Category, "Generic"), 180);
            Element(driver, Control("lookupOption", Category, "Generic")).Click();

            WaitUntil(driver, Control("subCategoryFieldInput", "Generic"), 60);
            Element(driver, Control("subCategoryFieldInput", "Generic")).Click();
            Element(driver, Control("subCategoryFieldInput", "Generic")).Clear();
            Element(driver, Control("subCategoryFieldInput", "Generic")).SendKeys(SubCategory);
            Element(driver, Control("subCategoryFieldInput", "Generic")).SendKeys(Keys.Enter);
            WaitUntil(driver, Control("subCategoryFieldSearch", "Generic"), 60);
            Element(driver, Control("subCategoryFieldSearch", "Generic")).Click();
            WaitUntil(driver, Control("lookupOption", SubCategory, "Generic"), 180);
            Element(driver, Control("lookupOption", SubCategory, "Generic")).Click();

            WaitUntil(driver, Control("sourceFieldLInput", "Generic"), 60);
            Element(driver, Control("sourceFieldLInput", "Generic")).Click();
            Element(driver, Control("sourceFieldLInput", "Generic")).Clear();
            Element(driver, Control("sourceFieldLInput", "Generic")).SendKeys(source);
            Element(driver, Control("sourceFieldLInput", "Generic")).SendKeys(Keys.Enter);
            WaitUntil(driver, Control("sourceFieldSearch", "Generic"), 180);
            Element(driver, Control("sourceFieldSearch", "Generic")).Click();
            WaitUntil(driver, Control("lookupOption", source, "Generic"), 180);
            Element(driver, Control("lookupOption", source, "Generic")).Click();
            WaitUntil(driver, Control("subSourceFieldLabel", "Generic"), 180);
            MoveToElement(driver, Control("subSourceFieldLabel", "Generic"));

            Element(driver, Control("subSourceFieldLabel", "Generic")).Click();

            WaitUntil(driver, Control("subSourceFieldLInput", "Generic"), 180);
            Element(driver, Control("subSourceFieldLInput", "Generic")).SendKeys(subSource);

            WaitUntil(driver, Control("subSourceFieldSearch", "Generic"), 180);
            Element(driver, Control("subSourceFieldSearch", "Generic")).Click();

            WaitUntil(driver, Control("lookupOption", subSource, "Generic"), 180);
            Element(driver, Control("lookupOption", subSource, "Generic")).Click();
            ThinkTime(3);

            WaitUntil(driver, Control("contactFieldInput", "Generic"), 90);
            Element(driver, Control("contactFieldInput", "Generic")).Click();
            Element(driver, Control("contactFieldInput", "Generic")).Clear();
            Element(driver, Control("contactFieldInput", "Generic")).SendKeys(contact);
            Element(driver, Control("contactFieldInput", "Generic")).SendKeys(Keys.Enter);
            WaitUntil(driver, Control("contactFieldSearch", "Generic"), 60);
            Element(driver, Control("contactFieldSearch", "Generic")).Click();
            WaitUntil(driver, Control("lookupOption", contact, "Generic"), 180);
            Element(driver, Control("lookupOption", contact, "Generic")).Click();


            if (UserRole == "LSC Agent")
            {
                WaitUntil(driver, Control("companyFieldInput", "Generic"), 90);
                if (Element(driver, Control("companyFieldInput", "Generic")).Displayed)
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Company field is shown", "Product field");
                    WaitUntil(driver, Control("productFieldInput", "Generic"), 60);
                    if (Element(driver, Control("productFieldInput", "Generic")).Displayed)
                    {
                        Element(driver, Control("productFieldInput", "Generic")).Click();
                        Element(driver, Control("productFieldInput", "Generic")).Clear();
                        Element(driver, Control("productFieldInput", "Generic")).SendKeys(Product);
                        Element(driver, Control("productFieldInput", "Generic")).SendKeys(Keys.Enter);
                        Element(driver, Control("productFieldSearch", "Generic")).Click();
                        WaitUntil(driver, Control("lookupOption", Product, "Generic"), 180);
                        Element(driver, Control("lookupOption", Product, "Generic")).Click();
                    }
                    else
                    {
                        AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Product field is hidden", "Product field");
                        Assert.Fail("Product field is hidden");
                    }
                }
                else
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "companyField is hidden", "Product field");
                    Assert.Fail("CompanyField is hidden is hidden");
                }


            }

            saveFooter(driver, testInReport, testName, testDataIteration);
        }

        public void VerifyNewCaseCreation(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            driver.SwitchTo().DefaultContent();
            ThinkTime(3);
            WaitUntil(driver, Control("CaseNumber", "Generic"), 60);
            string CaseNum = Element(driver, Control("CaseNumber", "Generic")).Text;
            Console.WriteLine(CaseNum);
            if (CaseNum != "New Case")
            {
                ThinkTime(1);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "", "Casenumber created");

            }
            else
            {
                ThinkTime(1);
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Casenumber is  not created", "Casenumber not created");
                Assert.Fail("Casenumber is  not created");
            }


        }


        public void DashboardButtons(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string Button)
        {
            ThinkTime(3);
            WaitUntil(driver, Control("DashboardButton", Button, "Generic"), 180);
            MoveToElement(driver, Control("DashboardButton", Button, "Generic"));
            Element(driver, Control("DashboardButton", Button, "Generic")).Click();

        }

        public void AdvanceSearch(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(3);
            WaitUntil(driver, Control("DashboardButton", "Dashboards"), 180);
            MoveToElement(driver, Control("DashboardButton", "Dashboards"));
            Element(driver, Control("DashboardButton", "Dashboards")).Click();

        }

        public void Verifyadvancefindmultiplerecords(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string more1, string header1, string userrole)
        {
            // Click on the first See more in the dashboard to view all records
            WaitUntil(driver, Control("KPIViews", header1, "Dashboards"), 30);
            ActionsClick(driver, Control("ITInsideSalesMorebutton", more1, "36.1_Dashboard"));
            ThinkTime(2);
            WaitUntil(driver, Control("SeeAllRecordAssociateBtn", "GenericOld"), 360);
            ActionsClick(driver, Control("SeeAllRecordAssociateBtn", "GenericOld"));
            ThinkTime(2);

            // Go to Advance Find and verify the status
            AdvanceFindFieldVerification(driver, testInReport, testName, testDataIteration, header1);

            // Navigate back to dashboard 
            NavigateToEntity(driver, testInReport, testName, testDataIteration, "Dashboards");
            //SelectValuesFromDashboardDropDown(driver, testInReport, testName, testDataIteration, userrole);

        }

        public void Verifyadvancefindmultiplerecords1(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string more1, string header1, string userrole)
        {
            // Click on the first See more in the dashboard to view all records KPIViewsVerify
            //WaitUntil(driver, Control("KPIViews", header1, "Dashboards"), 30);
            WaitUntil(driver, Control("KPIViewsVerify", header1, "Dashboards"), 30);
            ActionsClick(driver, Control("ITInsideSalesMoreButton", more1, "36.1_Dashboard"));
            ThinkTime(2);
            WaitUntil(driver, Control("SeeAllRecordAssociateBtn", "GenericOld"), 360);
            ActionsClick(driver, Control("SeeAllRecordAssociateBtn", "GenericOld"));
            ThinkTime(2);

            // Go to Advance Find and verify the status
            AdvanceFindFieldVerification(driver, testInReport, testName, testDataIteration, header1);

            // Navigate back to dashboard 
            NavigateToEntity(driver, testInReport, testName, testDataIteration, "Dashboards");
            //SelectValuesFromDashboardDropDown(driver, testInReport, testName, testDataIteration, userrole);

        }
        public void Manager_Verifyadvancefilterfornewrecordsindashboardheader(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string more1, string more2, string more3, string more4, string more5, string more6, string header1, string header2, string header3, string header4, string header5, string header6, string userrole)
        {
            NavigateToEntity(driver, testInReport, testName, testDataIteration, "Dashboards");
            SelectValuesFromDashboardDropDown(driver, testInReport, testName, testDataIteration, userrole);

            // Click on New Opps - All dropdown values and verify the filter status 
            WaitUntil(driver, Control("KPIViews1", header2, "Dashboards"), 30);
            ThinkTime(2);
            // Verify the dropdown values
            //string[] dropdown1 = { "a6", "34", "f5" };
            ThinkTime(1);
            string[] dropdownvalue = { "New IT Sales Opportunities", "New Opps - IT Sales Support", "New Opps - Move ins D-3", "New Opps - Move ins M-3", "New Opps - New customer D-1" };
            string[] more = { "New IT Sales Opportunities", "New Opps - IT Sales Support", "New Opps - Move ins D-3", "New Opps - Move ins M-3", "New Opps - New customer D-1" };
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "", "Pass");

            try
            {
                for (int i = 0; i < 4; i++)
                {
                    ThinkTime(2);
                    ActionsClick(driver, Control("Managerdashdropdowntwice", "34de", "36.1_Dashboard"));
                    ThinkTime(1);
                    Element(driver, Control("SelectDropdownOption", dropdownvalue[i], "Opportunity")).Click();
                    ThinkTime(2);
                    ActionsClick(driver, Control("ITInsideSalesmanagerMorebutton1", more[i], "36.1_Dashboard"));
                    ThinkTime(2);
                    ActionsClick(driver, Control("SeeAllRecordAssociateBtn", "GenericOld"));
                    ThinkTime(2);
                    AdvanceFindFieldVerification(driver, testInReport, testName, testDataIteration, dropdownvalue[i]);
                    ThinkTime(2);

                    NavigateToEntity(driver, testInReport, testName, testDataIteration, "Dashboards");
                    ThinkTime(2);
                    SelectValuesFromDashboardDropDown(driver, testInReport, testName, testDataIteration, userrole);
                    ThinkTime(4);

                }
            }
            catch (Exception e) { }


        }

        //Method to Click Advance find.
        public void ClickAdvanceFindButton(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(4);

            WaitUntil(driver, Control("AdvanceFindButton", "SharePoint"), 30);
            Element(driver, Control("AdvanceFindButton", "SharePoint")).Click();
        }

        //Method to click Advance find header Buttons.
        public void ClickAdvanceFindNewQuerryButton(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(4);

            WaitUntil(driver, Control("NewQuerryButton", "SharePoint"), 30);
            Element(driver, Control("NewQuerryButton", "SharePoint")).Click();
        }

        //Method to Click Advance Find Result Button.
        public void ClickAdvanceFindResultButton(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(4);

            WaitUntil(driver, Control("ViewResultBUtton", "SharePoint"), 30);
            Element(driver, Control("ViewResultBUtton", "SharePoint")).Click();
        }

        //Method to select Value Dropdown.
        public void SelectValueFromDropDown(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string Value, string ContactValue)
        {
            ThinkTime(4);

            WaitUntil(driver, Control("SelectAdFindButton1", "SharePoint"), 30);
            Element(driver, Control("SelectAdFindButton1", "SharePoint")).Click();

            WaitUntil(driver, Control("SelectDropDown", "SharePoint"), 30);
            Element(driver, Control("SelectDropDown", "SharePoint")).Click();
            Element(driver, Control("SelectDropDown", "SharePoint")).SendKeys(Value);
            ThinkTime(7);

            Select(Element(driver, Control("SelectDropDown", "SharePoint"))).SelectByText(Value);

            WaitUntil(driver, Control("EnterValueButton", "SharePoint"), 30);
            Element(driver, Control("EnterValueButton", "SharePoint")).Click();

            WaitUntil(driver, Control("SearchValue", "SharePoint"), 30);
            Element(driver, Control("SearchValue", "SharePoint")).Click();

            ThinkTime(12);

            driver.SwitchTo().DefaultContent();
            SwitchToFrame(driver, "InlineDialog_Iframe");

            WaitUntil(driver, Control("SearchRecordValue", "SharePoint"), 30);
            Element(driver, Control("SearchRecordValue", "SharePoint")).Click();
            Element(driver, Control("SearchRecordValue", "SharePoint")).SendKeys(ContactValue);

            Element(driver, Control("SearchValueRecordButton", "SharePoint")).Click();

            Element(driver, Control("SelectValueResult", ContactValue, "SharePoint")).Click();

            Element(driver, Control("SelectSearchValue", "SharePoint")).Click();

            Element(driver, Control("ClickButtonAdd", "SharePoint")).Click();
        }



        //Method to Find Value in Advance Find.
        public string FindValueInAdvanceFind(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string SelectValue, string ContactValue)
        {
            ThinkTime(4);
            driver.SwitchTo().DefaultContent();
            string parentWindowHandle = driver.CurrentWindowHandle;
            WindowHandling(driver);
            driver.Manage().Window.Maximize();

            ClickAdvanceFindNewQuerryButton(driver, testInReport, testName, testDataIteration);

            driver.SwitchTo().DefaultContent();
            SwitchToFrame(driver, "contentIFrame0");

            SelectValueFromDropDown(driver, testInReport, testName, testDataIteration, SelectValue, ContactValue);

            driver.SwitchTo().DefaultContent();

            ClickAdvanceFindResultButton(driver, testInReport, testName, testDataIteration);
            ThinkTime(7);

            driver.SwitchTo().DefaultContent();

            SwitchToFrame(driver, "contentIFrame0");
            SwitchToFrame(driver, "resultFrame");

            // Element(driver, Control("SelectResultValue", ContactValue, "SharePoint")).Click();
            ActionsDoubleClick(driver, Control("SelectResultValue", ContactValue, "SharePoint"));

            ThinkTime(4);

            WindowHandling(driver);
            driver.Manage().Window.Maximize();
            return parentWindowHandle;
            // WindowHandling(driver, parentWindowHandle);
        }



        public void Manager_Verifyadvancefilterforopenrecordsindashboardheader(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string more1, string more2, string more3, string more4, string more5, string more6, string header1, string header2, string header3, string header4, string header5, string header6, string userrole)
        {
            NavigateToEntity(driver, testInReport, testName, testDataIteration, "Dashboards");
            SelectValuesFromDashboardDropDown(driver, testInReport, testName, testDataIteration, userrole);

            // Click on Open Opps - All dropdown values and verify the filter status 
            WaitUntil(driver, Control("KPIViews1", header1, "Dashboards"), 90);
            ThinkTime(2);
            string[] dropdownvalue = { "Open IT Sales opportunities", "Open Opps - IT Sales Support", "Open Opps – Move ins D-3", "Open Opps – Move ins M-3", "Open Opps - New customers D-1" };
            string[] more = { "Open IT Sales opportunities", "Open Opps - IT Sales Support", "Open Opps – Move ins D-3", "Open Opps – Move ins M-3", "Open Opps - New customers D-1" };
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "", "Pass");
            try
            {
                for (int i = 0; i < 4; i++)
                {
                    ThinkTime(2);
                    WaitUntil(driver, Control("Managerdashdropdowntwice", "a6f", "36.1_Dashboard"), 30);
                    ActionsClick(driver, Control("Managerdashdropdowntwice", "a6f", "36.1_Dashboard"));
                    ThinkTime(5);
                    JSClick(driver, Control("SelectDropdownOption", dropdownvalue[i], "Opportunity"));

                    ThinkTime(15);
                    //WaitUntil(driver, Control("ITInsideSalesmanagerMorebutton1", more1,"36.1_Dashboard"), 360);
                    ActionsClick(driver, Control("ITInsideSalesmanagerMorebutton1", more[i], "36.1_Dashboard"));
                    ThinkTime(5);
                    WaitUntil(driver, Control("SeeAllRecordAssociateBtn", "GenericOld"), 360);
                    ActionsClick(driver, Control("SeeAllRecordAssociateBtn", "GenericOld"));
                    ThinkTime(2);
                    AdvanceFindFieldVerification(driver, testInReport, testName, testDataIteration, dropdownvalue[i]);
                    ThinkTime(2);

                    NavigateToEntity(driver, testInReport, testName, testDataIteration, "Dashboards");
                    ThinkTime(10);
                    SelectValuesFromDashboardDropDown(driver, testInReport, testName, testDataIteration, userrole);
                    ThinkTime(4);
                }
            }
            catch (Exception e)
            { }




        }



        public void Manager_Verifyadvancefilterforopenrecordsindashboardheader1(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string more1, string more2, string more3, string more4, string more5, string more6, string header1, string header2, string header3, string header4, string header5, string header6, string userrole)
        {
            NavigateToEntity(driver, testInReport, testName, testDataIteration, "Dashboards");
            SelectValuesFromDashboardDropDown(driver, testInReport, testName, testDataIteration, userrole);

            // Click on Open Opps - All dropdown values and verify the filter status 
            WaitUntil(driver, Control("KPIViews", header1, "Dashboards"), 360);
            ThinkTime(2);
            string[] dropdownvalue = { "Open Opps - IT Sales Support", "Open Opps – Move ins D-3", "Open Opps – Move ins M-3", "Open Opps - New customers D-1" };

            for (int i = 0; i < 4; i++)
            {
                ThinkTime(2);
                WaitUntil(driver, Control("Managerdashdropdowntwice", "a6f", "36.1_Dashboard"), 360);
                ActionsClick(driver, Control("Managerdashdropdowntwice", "a6f", "36.1_Dashboard"));
                WaitUntil(driver, Control("SelectDropdownOption", dropdownvalue[i], "Opportunity"), 360);
                Element(driver, Control("SelectDropdownOption", dropdownvalue[i], "Opportunity")).Click();
                WaitUntil(driver, Control("ITInsideSalesmanagerMorbutton", more1, "36.1_Dashboard"), 360);
                ActionsClick(driver, Control("ITInsideSalesmanagerMorbutton", more1, "36.1_Dashboard"));
                ThinkTime(5);
                WaitUntil(driver, Control("SeeAllRecordAssociateBtn", "GenericOld"), 360);
                ActionsClick(driver, Control("SeeAllRecordAssociateBtn", "GenericOld"));
                ThinkTime(2);
                AdvanceFindFieldVerification(driver, testInReport, testName, testDataIteration, dropdownvalue[i]);
                ThinkTime(2);

                NavigateToEntity(driver, testInReport, testName, testDataIteration, "Dashboards");
                ThinkTime(10);
                SelectValuesFromDashboardDropDown(driver, testInReport, testName, testDataIteration, userrole);
                ThinkTime(4);

            }


        }





        public void Verifyadvancefilterforallrecordsindashboardheader(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string more1, string more2, string more3, string more4, string header1, string header2, string header3, string header4, string userrole)
        {
            // Click on More and select to see all records
            WaitUntil(driver, Control("KPIViews", header1, "Dashboards"), 30);
            ActionsClick(driver, Control("ITInsideSalesMorebutton", more1, "36.1_Dashboard"));
            ThinkTime(2);
            ActionsClick(driver, Control("SeeAllRecordAssociateBtn", "GenericOld"));
            ThinkTime(2);

            // Go to Advance Find and verify the status
            AdvanceFindFieldVerification(driver, testInReport, testName, testDataIteration, header1);
            NavigateToEntity(driver, testInReport, testName, testDataIteration, "Dashboards");
            SelectValuesFromDashboardDropDown(driver, testInReport, testName, testDataIteration, userrole);

            // Click on More and select to see all records
            WaitUntil(driver, Control("KPIViews", header2, "Dashboards"), 30);
            ThinkTime(2);
            ActionsClick(driver, Control("ITInsideSalesMorebutton", more2, "36.1_Dashboard"));
            ThinkTime(2);
            ActionsClick(driver, Control("SeeAllRecordAssociateBtn", "GenericOld"));
            ThinkTime(2);

            // Go to Advance Find and verify the status
            AdvanceFindFieldVerification(driver, testInReport, testName, testDataIteration, header2);
            NavigateToEntity(driver, testInReport, testName, testDataIteration, "Dashboards");
            SelectValuesFromDashboardDropDown(driver, testInReport, testName, testDataIteration, userrole);
            ThinkTime(2);
            scrollDownDashboard(driver, testInReport, testName, testDataIteration);
            ThinkTime(2);
            scrollDownDashboard(driver, testInReport, testName, testDataIteration);
            ThinkTime(3);
            /*
                        // Click on More and select to see all records
                        WaitUntil(driver, Control("KPIViews", header3, "Dashboards"), 30);
                        ThinkTime(2);
                        ActionsClick(driver, Control("ITInsideSalesMorebutton", more3, "36.1_Dashboard"));
                        ThinkTime(2);
                        ActionsClick(driver, Control("SeeAllRecordAssociateBtn", "GenericOld"));
                        ThinkTime(2);

                        // Go to Advance Find and verify the status
                        AdvanceFindFieldVerification(driver, testInReport, testName, testDataIteration, header3);
                        NavigateToEntity(driver, testInReport, testName, testDataIteration, "Dashboards");
                        SelectValuesFromDashboardDropDown(driver, testInReport, testName, testDataIteration, userrole);
                        ThinkTime(2);
                        scrollDownDashboard(driver, testInReport, testName, testDataIteration);

                        */
            ThinkTime(3);
            // Click on More and select to see all records
            WaitUntil(driver, Control("KPIViews", header4, "Dashboards"), 30);
            ActionsClick(driver, Control("ITInsideSalesMorebutton", more4, "36.1_Dashboard"));
            ThinkTime(2);
            ActionsClick(driver, Control("ViewRecord", "36.1_Dashboard"));
            ThinkTime(2);

            // Go to Advance Find and verify the status
            AdvanceFindFieldVerification(driver, testInReport, testName, testDataIteration, header4);
            NavigateToEntity(driver, testInReport, testName, testDataIteration, "Dashboards");


        }

        public void Verifyadvancefilterforallrecordsindashboardheader1(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string more1, string more2, string more3, string more4, string header1, string header2, string header3, string header4, string userrole)
        {
            // Click on More and select to see all records KPIViewsVerify
            ThinkTime(10);
            //WaitUntil(driver, Control("KPIViews", header1, "Dashboards"), 360);
            WaitUntil(driver, Control("KPIViewsVerify", header1, "Dashboards"), 90);
            ActionsClick(driver, Control("ITInsideSalesMoreButtonNew", more1, "36.1_Dashboard"));
            ThinkTime(2);
            WaitUntil(driver, Control("SeeAllRecordAssociateBtn", "GenericOld"), 180);
            ActionsClick(driver, Control("SeeAllRecordAssociateBtn", "GenericOld"));
            ThinkTime(2);

            // Go to Advance Find and verify the status
            AdvanceFindFieldVerification(driver, testInReport, testName, testDataIteration, header1);
            NavigateToEntity(driver, testInReport, testName, testDataIteration, "Dashboards");
            SelectValuesFromDashboardDropDown(driver, testInReport, testName, testDataIteration, userrole);

            // Click on More and select to see all records
            //WaitUntil(driver, Control("KPIViews", header2, "Dashboards"), 30);
            WaitUntil(driver, Control("KPIViewsVerify", header2, "Dashboards"), 30);
            ThinkTime(2);
            ActionsClick(driver, Control("ITInsideSalesMoreButton", more2, "36.1_Dashboard"));
            ThinkTime(2);
            ActionsClick(driver, Control("SeeAllRecordAssociateBtn", "GenericOld"));
            ThinkTime(2);

            // Go to Advance Find and verify the status
            AdvanceFindFieldVerification(driver, testInReport, testName, testDataIteration, header2);
            NavigateToEntity(driver, testInReport, testName, testDataIteration, "Dashboards");
            SelectValuesFromDashboardDropDown(driver, testInReport, testName, testDataIteration, userrole);
            ThinkTime(2);
            scrollDownDashboard(driver, testInReport, testName, testDataIteration);
            ThinkTime(2);
            scrollDownDashboard(driver, testInReport, testName, testDataIteration);
            ThinkTime(3);
            /*
                        // Click on More and select to see all records
                        WaitUntil(driver, Control("KPIViews", header3, "Dashboards"), 30);
                        ThinkTime(2);
                        ActionsClick(driver, Control("ITInsideSalesMorebutton", more3, "36.1_Dashboard"));
                        ThinkTime(2);
                        ActionsClick(driver, Control("SeeAllRecordAssociateBtn", "GenericOld"));
                        ThinkTime(2);

                        // Go to Advance Find and verify the status
                        AdvanceFindFieldVerification(driver, testInReport, testName, testDataIteration, header3);
                        NavigateToEntity(driver, testInReport, testName, testDataIteration, "Dashboards");
                        SelectValuesFromDashboardDropDown(driver, testInReport, testName, testDataIteration, userrole);
                        ThinkTime(2);
                        scrollDownDashboard(driver, testInReport, testName, testDataIteration);

                        */
            ThinkTime(3);
            // Click on More and select to see all records
            WaitUntil(driver, Control("KPIViewsheader3", header4, "Dashboards"), 30);
            ActionsClick(driver, Control("ITInsideSalesMoreBUTTON", more4, "36.1_Dashboard"));
            ThinkTime(2);
            ActionsClick(driver, Control("ViewRecord", "36.1_Dashboard"));
            ThinkTime(2);

            // Go to Advance Find and verify the status
            AdvanceFindFieldVerification(driver, testInReport, testName, testDataIteration, header4);
            NavigateToEntity(driver, testInReport, testName, testDataIteration, "Dashboards");


        }

        public void Verifyadvancefilterforactivityandchartrecords(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string more4, string more5, string header4, string header5, string userrole)
        {
            try
            {
                // Click on More and select to see all records
                WaitUntil(driver, Control("KPIViews1", header4, "Dashboards"), 60);
                ThinkTime(2);
                WaitUntil(driver, Control("ITInsideSalesmanagerMorebutton1", more4, "36.1_Dashboard"), 60);
                ActionsClick(driver, Control("ITInsideSalesmanagerMorebutton1", more4, "36.1_Dashboard"));
                ThinkTime(2);
                WaitUntil(driver, Control("SeeAllRecordAssociateBtn", "GenericOld"), 60);
                ActionsClick(driver, Control("SeeAllRecordAssociateBtn", "GenericOld"));
                ThinkTime(2);

                // Go to Advance Find and verify the status
                AdvanceFindFieldVerification(driver, testInReport, testName, testDataIteration, header4);
                NavigateToEntity(driver, testInReport, testName, testDataIteration, "Dashboards");
                SelectValuesFromDashboardDropDown(driver, testInReport, testName, testDataIteration, userrole);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "", "Pass");


                // Click on More and select to see all records
                ThinkTime(2);
                scrollDownDashboard(driver, testInReport, testName, testDataIteration);
                ThinkTime(3);
                WaitUntil(driver, Control("ITSalessupportdashboardchart", header5, "36.1_Dashboard"), 360);
                ActionsClick(driver, Control("ITSalessupportMorebutton", more5, "36.1_Dashboard"));
                ThinkTime(2);
                ActionsClick(driver, Control("ViewRecord", "36.1_Dashboard"));
                ThinkTime(2);

                // Go to Advance Find and verify the status
                AdvanceFindFieldVerification(driver, testInReport, testName, testDataIteration, "Open IT Sales opportunities");
                NavigateToEntity(driver, testInReport, testName, testDataIteration, "Dashboards");
                SelectValuesFromDashboardDropDown(driver, testInReport, testName, testDataIteration, userrole);
                ThinkTime(2);
                scrollDownDashboard(driver, testInReport, testName, testDataIteration);
                ThinkTime(2);
                scrollDownDashboard(driver, testInReport, testName, testDataIteration);
                ThinkTime(3);
            }
            catch (Exception e)
            { }


        }










        public void Verifyadvancefilterforinsidesalesrecordsindashboardheader(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string more1, string more2, string more3, string more4, string header1, string header2, string header3, string header4, string userrole)
        {
            // Select the more button and select see all records
            WaitUntil(driver, Control("ITSalessupportdashboardheader", header1, "36.1_Dashboard"), 30);
            ActionsClick(driver, Control("ITSalessupportMorebutton", more1, "36.1_Dashboard"));
            ThinkTime(2);
            ActionsClick(driver, Control("SeeAllRecordAssociateBtn", "GenericOld"));
            ThinkTime(2);

            // Go to Advance Find and verify the status
            AdvanceFindFieldVerification(driver, testInReport, testName, testDataIteration, "Unassigned Opps - IT Sales Support Requests");
            NavigateToEntity(driver, testInReport, testName, testDataIteration, "Dashboards");
            SelectValuesFromDashboardDropDown(driver, testInReport, testName, testDataIteration, userrole);

            // Select the more button and select see all records
            WaitUntil(driver, Control("ITSalessupportdashboardheader", header2, "36.1_Dashboard"), 360);
            WaitUntil(driver, Control("ITSalessupportMorebutton", more2, "36.1_Dashboard"), 360);
            ActionsClick(driver, Control("ITSalessupportMorebutton", more2, "36.1_Dashboard"));
            ThinkTime(2);
            ActionsClick(driver, Control("SeeAllRecordAssociateBtn", "GenericOld"));
            ThinkTime(2);

            // Go to Advance Find and verify the status
            AdvanceFindFieldVerification(driver, testInReport, testName, testDataIteration, "My Open IT Sales Opportunities");
            NavigateToEntity(driver, testInReport, testName, testDataIteration, "Dashboards");
            SelectValuesFromDashboardDropDown(driver, testInReport, testName, testDataIteration, userrole);
            ThinkTime(2);
            scrollDownDashboard(driver, testInReport, testName, testDataIteration);
            ThinkTime(2);
            scrollDownDashboard(driver, testInReport, testName, testDataIteration);
            ThinkTime(3);
            /*
            // Select the more button and select see all records
            WaitUntil(driver, Control("ITSalessupportdashboardheader", header3, "36.1_Dashboard"), 30);
            ActionsClick(driver, Control("ITSalessupportMorebutton", more3, "36.1_Dashboard"));
            ThinkTime(2);
            ActionsClick(driver, Control("SeeAllRecordAssociateBtn", "GenericOld"));
            ThinkTime(2);

            // Go to Advance Find and verify the status
            AdvanceFindFieldVerification(driver, testInReport, testName, testDataIteration, "My open IT Sales activities");
           NavigateToEntity(driver, testInReport, testName, testDataIteration, "Dashboards");
            SelectValuesFromDashboardDropDown(driver, testInReport, testName, testDataIteration, userrole);
            ThinkTime(2);
            scrollDownDashboard(driver, testInReport, testName, testDataIteration);
            ThinkTime(3);
            */
            // Select the more button and select see all records
            ThinkTime(3);
            WaitUntil(driver, Control("ITSalessupportdashboardchart", header4, "36.1_Dashboard"), 30);
            ActionsClick(driver, Control("ITSalessupportMorebutton", more4, "36.1_Dashboard"));
            ThinkTime(2);
            ActionsClick(driver, Control("ViewRecord", "36.1_Dashboard"));
            ThinkTime(2);

            // Go to Advance Find and verify the status
            AdvanceFindFieldVerification(driver, testInReport, testName, testDataIteration, "My Open IT Sales Opportunities");
            NavigateToEntity(driver, testInReport, testName, testDataIteration, "Dashboards");


        }











        public void AdvanceFindFieldVerification(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string UseSavedViewEntity)
        {

            string parentWindowHandle = driver.CurrentWindowHandle;

            // Click Advance Find
            AdvancedFind(driver, testInReport, testName, testDataIteration);
            ThinkTime(10);

            // Switch to the new window
            SwitchToFrame(driver, "contentIFrame0");
            ThinkTime(6);

            // Verify the saved view is auto populated from the previous view
            WaitUntil(driver, Control("Savedview", "Generic"), 360);
            SelectElement selectobj = new SelectElement(driver.FindElement(By.XPath("//select[@name='savedQuerySelector']")));
            string SavedNewView1 = selectobj.SelectedOption.Text;

            if (SavedNewView1 == UseSavedViewEntity)
            {
                ThinkTime(1);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "New View is successfully created", "Saved-New View");

            }
            else
            {
                ThinkTime(1);
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "New View is not created", "Saved-New View");
                Assert.Fail();

            }

            // Verify the status is displayed as Silent
            WaitUntil(driver, Control("Statusfieldopp1", "Generic"), 60);
            ElementHighlight(driver, Control("Statusfieldopp1", "Generic"));
            WaitUntil(driver, Control("Statusfieldopp2", "Generic"), 60);
            ElementHighlight(driver, Control("Statusfieldopp2", "Generic"));
            WaitUntil(driver, Control("Opportunitystatus", "Generic"), 60);
            ElementHighlight(driver, Control("Opportunitystatus", "Generic"));

            string Field = Element(driver, Control("Opportunitystatus", "Generic")).Text.ToString();
            if (Field == "Silent")
            {
                ThinkTime(1);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Status reason filed verified", "IT sales manager- AdvancedEqual  field verification");

            }

            else
            {
                ThinkTime(1);
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Status reason filed verification failed", "IT sales manager- AdvancedEqual  field verification");
                Assert.Fail("verification failed");
            }


            driver.Close();
            WindowHandling(driver, parentWindowHandle);

        }



        //ThinkTime(1);
        //Console.WriteLine("closed window");

        //ThinkTime(1);
        //string parentWindowHandle = driver.CurrentWindowHandle;


        //WindowHandling(driver);
        //ThinkTime(1);


        //catch (Exception e)
        //{
        //    Console.WriteLine(e);
        //}




        public void FilterResults(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {

            driver.SwitchTo().DefaultContent();
            string parentWindowHandle = driver.CurrentWindowHandle;
            WindowHandling(driver);
            driver.Manage().Window.Maximize();
            ThinkTime(5);
            string parentWindowHandle1 = driver.CurrentWindowHandle;
            WindowHandling(driver);
            driver.Manage().Window.Maximize();
            ThinkTime(10);
            SwitchToFrame(driver, "contentIFrame0");
            ThinkTime(6);
            Element(driver, Control("Advancesearcheditcolumnsribbon", "Appointment")).Click();
            SwitchToFrame(driver, "viewEditor");
            Element(driver, Control("Addcolumnbutton", "Appointment")).Click();
            driver.SwitchTo().DefaultContent();
            ThinkTime(3);
            SwitchToFrame(driver, "InlineDialog1_Iframe");
            ThinkTime(4);
            MoveToElement(driver, Control("Selectbrandcheckbox", "Appointment"));
            Element(driver, Control("Selectbrandcheckbox", "Appointment")).Click();
            Element(driver, Control("OKButton", "Generic")).Click();
            driver.SwitchTo().DefaultContent();
            ThinkTime(3);
            SwitchToFrame(driver, "InlineDialog_Iframe");
            ThinkTime(2);
            Element(driver, Control("EditColumnsPopupOk", "Generic")).Click();
            driver.SwitchTo().DefaultContent();
            //Element(driver, Control("advFindRibbons", Resultsbutton, "Generic")).Click();
            //ThinkTime(3);
            //SwitchToFrame(driver, "contentIFrame0");
            //SwitchToFrame(driver, "resultFrame");
            //WaitUntil(driver, Control("LastColumn", "Generic"), 30);
            //string s = Element(driver, Control("LastColumn", "Generic")).Text;
            //int p;
            //AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Case Reactivation Count Column", "Orginal Reactivation");
            IList<IWebElement> Block = driver.FindElements(By.XPath("//button[@id='butBegin']"));
            Block[1].Click();










            //Element(driver, Control("FieldList", "GenericOld")).Click();
            //ThinkTime(6);
            //Select(Element(driver, Control("FieldOptions", "GenericOld"))).SelectByText("");
            //Element(driver, Control("CaseIDText", "AdvanceFind")).Click();
            //Element(driver, Control("CaseID", "AdvanceFind")).SendKeys("");
            //driver.SwitchTo().DefaultContent();
            //Element(driver, Control("advFindRibbons", Columnbutton, "AdvanceFind")).Click();
            //ThinkTime(4);
            //SwitchToFrame(driver, "InlineDialog_Iframe");
            //ThinkTime(4);
            //SwitchToFrame(driver, "viewEditor");
            //ThinkTime(3);
            //Element(driver, Control("AddColumns", "AdvanceFind")).Click();
            //driver.SwitchTo().DefaultContent();
            //ThinkTime(3);
            //SwitchToFrame(driver, "InlineDialog1_Iframe");
            //ThinkTime(4);
            //MoveToElement(driver, Control("CaseReactivationCount", "Generic"));
            //Element(driver, Control("CaseReactivationCount", "Generic")).Click();
            //Element(driver, Control("OKButton", "Generic")).Click();
            //driver.SwitchTo().DefaultContent();
            //ThinkTime(3);
            //SwitchToFrame(driver, "InlineDialog_Iframe");
            //ThinkTime(2);
            //Element(driver, Control("EditColumnsPopupOk", "Generic")).Click();
            //driver.SwitchTo().DefaultContent();
            //Element(driver, Control("advFindRibbons", Resultsbutton, "Generic")).Click();
            //ThinkTime(3);
            //SwitchToFrame(driver, "contentIFrame0");
            //SwitchToFrame(driver, "resultFrame");
            //WaitUntil(driver, Control("LastColumn", "Generic"), 30);
            //string s = Element(driver, Control("LastColumn", "Generic")).Text;
            //int p;
            //AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Case Reactivation Count Column", "Orginal Reactivation");
            //if (s != "")
            //{
            //    p = Int32.Parse(s);
            //    Console.WriteLine(p);
            //    Console.WriteLine(" Case Reactivation Count:" + p);
            //}
            //else
            //{
            //    p = 0;
            //    Console.WriteLine(" Case Reactivation Count:" + p);
            //}

            driver.Close();
            WindowHandling(driver, parentWindowHandle);

            //return p;

        }
        public void AddColumninadvancefind(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string selectcolumn, string parentWindowHandle)
        {
            ThinkTime(4);
            Element(driver, Control("Advancesearcheditcolumnsribbon", "Appointment")).Click();
            ThinkTime(10);

            driver.SwitchTo().Frame("InlineDialog_Iframe");
            ThinkTime(4);
            driver.SwitchTo().Frame("viewEditor");
            ThinkTime(4);

            Element(driver, Control("Addcolumnbutton", "Appointment")).Click();
            ThinkTime(5);
            driver.SwitchTo().DefaultContent();
            ThinkTime(3);
            SwitchToFrame(driver, "InlineDialog1_Iframe");
            ThinkTime(4);
            MoveToElement(driver, Control("Addcolumnname", selectcolumn, "Appointment"));
            Element(driver, Control("Addcolumnname", selectcolumn, "Appointment")).Click();
            ThinkTime(1);
            Element(driver, Control("OKButton", "Generic")).Click();
            driver.SwitchTo().DefaultContent();
            ThinkTime(3);
            SwitchToFrame(driver, "InlineDialog_Iframe");
            ThinkTime(2);
            Element(driver, Control("EditColumnsPopupOk", "Generic")).Click();
            //driver.SwitchTo().DefaultContent(); IList<IWebElement> Block = driver.FindElements(By.XPath("//button[@id='butBegin']"));
            //Block[1].Click();

            driver.Close();
            WindowHandling(driver, parentWindowHandle);


        }

        /// <summary>
        /// Select record AfterSearching
        /// </summary>
        /// <param name="driver"></param>
        public void SelectingOptionFromRelated(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string obj, string tab, string name="")
        {

            

            //WaitUntil(driver, Control("QuickSearch", "Generic"), 70);
            //Element(driver, Control("QuickSearch", "Generic")).SendKeys(Keys.Delete);
            //Element(driver, Control("QuickSearch", "Generic")).SendKeys(name);
            //Element(driver, Control("QuickSearch", "Generic")).SendKeys(Keys.Enter);


            WaitUntil(driver, Control("QuickSearch", "Generic"), 70);
            Element(driver, Control("QuickSearch", "Generic")).SendKeys(Keys.Delete);
            Element(driver, Control("QuickSearch", "Generic")).SendKeys(name);
            Element(driver, Control("QuickSearch", "Generic")).SendKeys(Keys.Enter);
            ThinkTime(4);
            if (Elements(driver, Control("NoData", "Generic")) == 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Record is  Available", "Activity");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Info", "No Record Available.Please create one", "Activity");
                Assert.Fail("Record is not  available.Please create one");
            }
            Element(driver, Control("Employee", name, "Generic")).Click();


            TablistSelection(driver, testInReport, testName, testDataIteration, "Related");
            RelatedTab(driver, testInReport, testName, testDataIteration, "Work Orders");

            /*
            WaitUntil(driver, Control("RelatedTab", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("RelatedTab", "EnterpriseSales"));
            ThinkTime(3);
            Element(driver, Control("RelatedTab", "EnterpriseSales")).Click();
            ThinkTime(3);
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Related ", "");

            //scrollMiddle(driver, testInReport, testName, testDataIteration, "Scroll");


            WaitUntil(driver, Control("Workorders", "ITSales"), 30);
            MoveToElement(driver, Control("Workorders", "ITSales"));
            ThinkTime(3);
            Element(driver, Control("Workorders", "ITSales")).Click();
            */
            /*
             * 

            //driver.SwitchTo().DefaultContent();
            //ThinkTime(1);

            WaitUntil(driver, Control("Related", "Generic"), 60);
            MoveToElement(driver, Control("Related", "Generic"));//ActionsClick
            Element(driver, Control("Related", "Generic")).Click();
            //WaitUntil(driver, Control("RelatedContainer", "Generic"), 60);
            //MoveToElement(driver, Control("RelatedContainer", "Generic"));

            WaitUntil(driver, Control(obj, tab, "Generic"), 60);
            MoveToElement(driver, Control(obj,tab, "Generic"));
            Element(driver, Control(obj, tab, "Generic")).Click();


            //WaitUntil(driver, Control("RelatedTab", "EnterpriseSales"), 30);
            //MoveToElement(driver, Control("RelatedTab", "EnterpriseSales"));
            //ThinkTime(3);
            //Element(driver, Control("RelatedTab", "EnterpriseSales")).Click();
            //ThinkTime(3);

            */
        }

        public void ContactFieldEntry(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string ContactMandatory)
        {
            driver.SwitchTo().DefaultContent();
            ThinkTime(5);
            WaitUntil(driver, Control("contactFieldInput", "Generic"), 90);
            Element(driver, Control("contactFieldInput", "Generic")).Click();
            Element(driver, Control("contactFieldInput", "Generic")).Clear();
            Element(driver, Control("contactFieldInput", "Generic")).SendKeys(ContactMandatory);
            Element(driver, Control("contactFieldInput", "Generic")).SendKeys(Keys.Enter);
            WaitUntil(driver, Control("contactFieldSearch", "Generic"), 60);
            Element(driver, Control("contactFieldSearch", "Generic")).Click();

            WaitUntil(driver, Control("ContactValidationError", "Generic"), 90);
            if (Element(driver, Control("ContactValidationError", "Generic")).Displayed)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "New Contact lookup Error is Displayed", "New-Contact lookup Error");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "New Contact lookup Error is Displayed", "New-Contact lookup Error");
                Assert.Fail();
            }

        }




        public void CreatingNewContactFromNewCasePage(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string FName, string LName)

        {

            driver.SwitchTo().DefaultContent();
            ThinkTime(3);
            WaitUntil(driver, Control("contactFieldInput", "Generic"), 90);
            Element(driver, Control("contactFieldInput", "Generic")).Click();
            Element(driver, Control("contactFieldInput", "Generic")).Clear();

            WaitUntil(driver, Control("contactFieldSearch", "Generic"), 60);
            Element(driver, Control("contactFieldSearch", "Generic")).Click();

            WaitUntil(driver, Control("ContactNewLookup", "Generic"), 90);
            Element(driver, Control("ContactNewLookup", "Generic")).Click(); ;

            WaitUntil(driver, Control("CreateQuickContact", "Generic"), 90);
            if (Element(driver, Control("CreateQuickContact", "Generic")).Displayed)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "New Contact lookup is present", "New-Contact lookup");
                WaitUntil(driver, Control("ContactFirstName", "Generic"), 90);
                Element(driver, Control("ContactFirstName", "Generic")).Click();
                Element(driver, Control("ContactFirstName", "Generic")).Clear();
                Element(driver, Control("ContactFirstName", "Generic")).SendKeys(LName);

                WaitUntil(driver, Control("ContactLastName", "Generic"), 90);
                Element(driver, Control("ContactLastName", "Generic")).Click();
                Element(driver, Control("ContactLastName", "Generic")).Clear();
                Element(driver, Control("ContactLastName", "Generic")).SendKeys(LName);

                WaitUntil(driver, Control("ContactSaveAndClose", "Generic"), 90);
                Element(driver, Control("ContactSaveAndClose", "Generic")).Click();
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "New Contact lookup is not present", "New-Contact lookup");
                Assert.Fail();
            }

            if (Element(driver, Control("ContactValue", "Generic")).Text.ToString() == LName)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Contact is Created", "Contact Name");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Contact is not Created", "Contact Name");
                Assert.Fail();
            }


        }



        public void CaseMandatoryFieldsValidationError(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            driver.SwitchTo().DefaultContent();
            ThinkTime(2);
            if (Element(driver, Control("CaseNumber", "Generic")).Displayed)
            {
                ThinkTime(2);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "NewCase Page", "Case Page");
                ThinkTime(5);

                WaitUntil(driver, Control("CompayValidationError", "Generic"), 60);
                IsDisplayed(driver, testInReport, testName, testDataIteration, "CompayValidationError");

                WaitUntil(driver, Control("ContactValidationError", "Generic"), 60);
                IsDisplayed(driver, testInReport, testName, testDataIteration, "ContactValidationError");

                WaitUntil(driver, Control("CenterValidationError", "Generic"), 60);
                IsDisplayed(driver, testInReport, testName, testDataIteration, "CenterValidationError");

                WaitUntil(driver, Control("TypeValidationError", "Generic"), 60);
                IsDisplayed(driver, testInReport, testName, testDataIteration, "TypeValidationError");

                WaitUntil(driver, Control("ProductValidationError", "Generic"), 60);
                IsDisplayed(driver, testInReport, testName, testDataIteration, "ProductValidationError");

                WaitUntil(driver, Control("CategoryValidationError", "Generic"), 60);
                IsDisplayed(driver, testInReport, testName, testDataIteration, "CategoryValidationError");

                MoveToElement(driver, Control("SourceValidationError", "Generic"));
                WaitUntil(driver, Control("SourceValidationError", "Generic"), 60);
                IsDisplayed(driver, testInReport, testName, testDataIteration, "SourceValidationError");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "NewCase Page", "Case Page");
                Assert.Fail();
            }
        }

        /// <summary>
        /// Method to check Audit summary page Fields. 
        /// </summary>
        /// <param name="driver"></param>
        /// <param name="testInReport"></param>
        /// <param name="testName"></param>


        public void AuditSummaryPageDetails(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string AuditSummary)
        {


            driver.SwitchTo().DefaultContent();
            ThinkTime(2);
            SwitchToFrame(driver, "audit_iframe");

            if (Element(driver, Control("AuditHistoryPage", "Generic")).Displayed)
            {


                ElementHighlight(driver, Control("AuditHistoryPage", "Generic"));
                ThinkTime(2);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Audit Summary View page is displayed", "Audit Summary View");

                WaitUntil(driver, Control("ChangedDatebtn", "Generic"), 60);
                MoveToElement(driver, Control("ChangedDatebtn", "Generic"));
                IsDisplayed(driver, testInReport, testName, testDataIteration, "ChangedDatebtn");

                WaitUntil(driver, Control("ChangedByBtn", "Generic"), 60);
                MoveToElement(driver, Control("ChangedByBtn", "Generic"));
                IsDisplayed(driver, testInReport, testName, testDataIteration, "ChangedByBtn");

                WaitUntil(driver, Control("Eventbtn", "Generic"), 60);
                IsDisplayed(driver, testInReport, testName, testDataIteration, "Eventbtn");

                WaitUntil(driver, Control("ChangedField", "Generic"), 60);
                IsDisplayed(driver, testInReport, testName, testDataIteration, "ChangedField");

                WaitUntil(driver, Control("OldValue", "Generic"), 60);
                IsDisplayed(driver, testInReport, testName, testDataIteration, "OldValue");

                WaitUntil(driver, Control("NewValue", "Generic"), 60);
                ElementHighlight(driver, Control("NewValue", "Generic"));
                IsDisplayed(driver, testInReport, testName, testDataIteration, "NewValue");


            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Audit Summary View page is displayed", "Audit Summary View");
                Assert.Fail();
            }
        }



        public string EditingInitialDescription(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string Case_Newvalue)
        {

            driver.SwitchTo().DefaultContent();


            WaitUntil(driver, Control("InitialDescription", "Generic"), 240);
            MoveToElement(driver, Control("InitialDescription", "Generic"));
            ThinkTime(2);
            Element(driver, Control("InitialDescription", "Generic")).Click();
            string OldValue = Element(driver, Control("InitialDescription", "Generic")).Text.ToString();
            ThinkTime(3);
            Element(driver, Control("InitialDescription", "Generic")).SendKeys(Keys.Control + "a");
            Element(driver, Control("InitialDescription", "Generic")).SendKeys(Keys.Delete);

            Element(driver, Control("InitialDescVal", "Generic")).Clear();
            ThinkTime(1);
            string NewValue = Case_Newvalue + System.DateTime.Now.ToString();
            Element(driver, Control("InitialDescription", "Generic")).SendKeys(NewValue);

            saveFooter(driver, testInReport, testName, testDataIteration);
            ThinkTime(2);
            String EditedText = Element(driver, Control("InitialDescription", "Generic")).Text.ToString();

            if (OldValue == EditedText)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Case is not updated correcly", "Case not updated");
                Assert.Fail("Case is not updated correcly");
            }
            else
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "The text is saved correctly", " Edited correctly");
            }
            ThinkTime(2);

            return NewValue;

        }
        public void CaseFieldsVerificationforAllCases(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            driver.SwitchTo().DefaultContent();
            ThinkTime(2);

            WaitUntil(driver, Control("CaseNumber_Field", "Generic"), 60);
            ElementHighlight(driver, Control("CaseNumber_Field", "Generic"));
            IsDisplayed(driver, testInReport, testName, testDataIteration, "CaseNumber_Field");

            WaitUntil(driver, Control("BusinessArea_Field", "Generic"), 60);
            ElementHighlight(driver, Control("BusinessArea_Field", "Generic"));
            IsDisplayed(driver, testInReport, testName, testDataIteration, "BusinessArea_Field");

            WaitUntil(driver, Control("StatusReason_Field", "Generic"), 60);
            ElementHighlight(driver, Control("StatusReason_Field", "Generic"));
            IsDisplayed(driver, testInReport, testName, testDataIteration, "StatusReason_Field");

            WaitUntil(driver, Control("CreatedOn_Field5", "Generic"), 60);
            ElementHighlight(driver, Control("CreatedOn_Field5", "Generic"));
            IsDisplayed(driver, testInReport, testName, testDataIteration, "CreatedOn_Field5");

            WaitUntil(driver, Control("Priority_Field", "Generic"), 60);
            ElementHighlight(driver, Control("Priority_Field", "Generic"));
            IsDisplayed(driver, testInReport, testName, testDataIteration, "Priority_Field");


            WaitUntil(driver, Control("AssignedTeam_Field2", "Generic"), 60);
            ElementHighlight(driver, Control("AssignedTeam_Field2", "Generic"));
            IsDisplayed(driver, testInReport, testName, testDataIteration, "AssignedTeam_Field2");

            WaitUntil(driver, Control("AssignedUser_Field2", "Generic"), 60);
            ElementHighlight(driver, Control("AssignedUser_Field2", "Generic"));
            IsDisplayed(driver, testInReport, testName, testDataIteration, "AssignedUser_Field2");

            scrollMiddle(driver, testInReport, testName, testDataIteration, "Scroll");

            WaitUntil(driver, Control("AssignedDate_Field2", "Generic"), 60);
            ElementHighlight(driver, Control("AssignedDate_Field2", "Generic"));
            IsDisplayed(driver, testInReport, testName, testDataIteration, "AssignedDate_Field2");

            WaitUntil(driver, Control("Category_Field2", "Generic"), 60);
            ElementHighlight(driver, Control("Category_Field2", "Generic"));
            IsDisplayed(driver, testInReport, testName, testDataIteration, "Category_Field2");

            WaitUntil(driver, Control("SubCategory_Field2", "Generic"), 60);
            ElementHighlight(driver, Control("SubCategory_Field", "Generic"));
            IsDisplayed(driver, testInReport, testName, testDataIteration, "SubCategory_Field2");

            WaitUntil(driver, Control("Company_Field2", "Generic"), 60);
            ElementHighlight(driver, Control("Company_Field2", "Generic"));
            IsDisplayed(driver, testInReport, testName, testDataIteration, "Company_Field2");

            WaitUntil(driver, Control("Contact_Field2", "Generic"), 60);
            ElementHighlight(driver, Control("Contact_Field2", "Generic"));
            IsDisplayed(driver, testInReport, testName, testDataIteration, "Contact_Field2");

            scrollRight(driver, testInReport, testName, testDataIteration, "Scroll");

            WaitUntil(driver, Control("CentreNumber_Field2", "Generic"), 60);
            ElementHighlight(driver, Control("CentreNumber_Field2", "Generic"));
            IsDisplayed(driver, testInReport, testName, testDataIteration, "CentreNumber_Field2");

            WaitUntil(driver, Control("Centre_Field2", "Generic"), 60);
            ElementHighlight(driver, Control("Centre_Field2", "Generic"));
            IsDisplayed(driver, testInReport, testName, testDataIteration, "Centre_Field2");

            WaitUntil(driver, Control("Country_Field2", "Generic"), 60);
            ElementHighlight(driver, Control("Country_Field2", "Generic"));
            IsDisplayed(driver, testInReport, testName, testDataIteration, "Country_Field2");

            WaitUntil(driver, Control("HiddenFrom_Field2", "Generic"), 60);
            ElementHighlight(driver, Control("HiddenFrom_Field2", "Generic"));
            IsDisplayed(driver, testInReport, testName, testDataIteration, "HiddenFrom_Field2");





        }
        public void CaseFieldsVerification(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string role)
        {

            driver.SwitchTo().DefaultContent();
            ThinkTime(2);


            WaitUntil(driver, Control("UnReadIncoming", "Generic"), 60);
            ThinkTime(3);
            ElementHighlight(driver, Control("UnReadIncoming", "Generic"));
            IsDisplayed(driver, testInReport, testName, testDataIteration, "UnReadIncoming");


            WaitUntil(driver, Control("CaseNumber_Field", "Generic"), 60);
            ElementHighlight(driver, Control("CaseNumber_Field", "Generic"));
            IsDisplayed(driver, testInReport, testName, testDataIteration, "CaseNumber_Field");


            WaitUntil(driver, Control("Category_Field", "Generic"), 60);
            ElementHighlight(driver, Control("Category_Field", "Generic"));
            IsDisplayed(driver, testInReport, testName, testDataIteration, "Category_Field");


            WaitUntil(driver, Control("SubCategory_Field", "Generic"), 60);
            ElementHighlight(driver, Control("SubCategory_Field", "Generic"));
            IsDisplayed(driver, testInReport, testName, testDataIteration, "SubCategory_Field");


            WaitUntil(driver, Control("Company_Field", "Generic"), 60);
            ElementHighlight(driver, Control("Company_Field", "Generic"));
            IsDisplayed(driver, testInReport, testName, testDataIteration, "Company_Field");


            WaitUntil(driver, Control("Contact_Field", "Generic"), 60);
            ElementHighlight(driver, Control("Contact_Field", "Generic"));
            IsDisplayed(driver, testInReport, testName, testDataIteration, "Contact_Field");

            scrollMiddle(driver, testInReport, testName, testDataIteration, "Scroll");
            WaitUntil(driver, Control("CentreNumber_Field", "Generic"), 60);
            ElementHighlight(driver, Control("CentreNumber_Field", "Generic"));
            IsDisplayed(driver, testInReport, testName, testDataIteration, "CentreNumber_Field");


            WaitUntil(driver, Control("Centre_Field", "Generic"), 60);
            ElementHighlight(driver, Control("Centre_Field", "Generic"));
            IsDisplayed(driver, testInReport, testName, testDataIteration, "Centre_Field");

            WaitUntil(driver, Control("Region_Field", "Generic"), 60);
            MoveToElement(driver, Control("Region_Field", "Generic"));
            ElementHighlight(driver, Control("Region_Field", "Generic"));
            IsDisplayed(driver, testInReport, testName, testDataIteration, "Region_Field");

            WaitUntil(driver, Control("Country_Field", "Generic"), 60);
            ElementHighlight(driver, Control("Country_Field", "Generic"));
            MoveToElement(driver, Control("Country_Field", "Generic"));
            IsDisplayed(driver, testInReport, testName, testDataIteration, "Country_Field");

            scrollRight(driver, testInReport, testName, testDataIteration, "Scroll");
            WaitUntil(driver, Control("CreatedOn_Field", "Generic"), 60);
            MoveToElement(driver, Control("CreatedOn_Field", "Generic"));
            IsDisplayed(driver, testInReport, testName, testDataIteration, "CreatedOn_Field");

            WaitUntil(driver, Control("Priority_Field", "Generic"), 60);
            MoveToElement(driver, Control("Priority_Field", "Generic"));
            ElementHighlight(driver, Control("Priority_Field", "Generic"));
            IsDisplayed(driver, testInReport, testName, testDataIteration, "Priority_Field");

            WaitUntil(driver, Control("HiddenFrom_Field", "Generic"), 60);
            MoveToElement(driver, Control("HiddenFrom_Field", "Generic"));
            ElementHighlight(driver, Control("HiddenFrom_Field", "Generic"));
            IsDisplayed(driver, testInReport, testName, testDataIteration, "HiddenFrom_Field");

            WaitUntil(driver, Control("SLA_ExpiryDate_Field", "Generic"), 60);
            MoveToElement(driver, Control("SLA_ExpiryDate_Field", "Generic"));
            ElementHighlight(driver, Control("SLA_ExpiryDate_Field", "Generic"));
            IsDisplayed(driver, testInReport, testName, testDataIteration, "SLA_ExpiryDate_Field");

            scrollMiddle(driver, testInReport, testName, testDataIteration, "Scroll");
            WaitUntil(driver, Control("AssignedTeam_Field", "Generic"), 60);
            MoveToElement(driver, Control("AssignedTeam_Field", "Generic"));
            ElementHighlight(driver, Control("AssignedTeam_Field", "Generic"));
            IsDisplayed(driver, testInReport, testName, testDataIteration, "AssignedTeam_Field");


            WaitUntil(driver, Control("AssignedUser_Field", "Generic"), 60);
            MoveToElement(driver, Control("AssignedUser_Field", "Generic"));
            ElementHighlight(driver, Control("AssignedUser_Field", "Generic"));
            IsDisplayed(driver, testInReport, testName, testDataIteration, "AssignedUser_Field");


            WaitUntil(driver, Control("StatusReason_Field", "Generic"), 60);
            MoveToElement(driver, Control("StatusReason_Field", "Generic"));
            ElementHighlight(driver, Control("StatusReason_Field", "Generic"));
            IsDisplayed(driver, testInReport, testName, testDataIteration, "StatusReason_Field");


            switch (role)
            {
                case "LSC Agent":
                    scrollLeft(driver, testInReport, testName, testDataIteration, "Scroll");
                    WaitUntil(driver, Control("Source_Field", "Generic"), 60);
                    MoveToElement(driver, Control("Source_Field", "Generic"));
                    ElementHighlight(driver, Control("Source_Field", "Generic"));
                    IsDisplayed(driver, testInReport, testName, testDataIteration, "Source_Field");

                    break;

                case "GSC Agent":
                    scrollLeftMiddle(driver, testInReport, testName, testDataIteration, "Scroll");
                    WaitUntil(driver, Control("LastReplied_Field", "Generic"), 60);
                    MoveToElement(driver, Control("LastReplied_Field", "Generic"));
                    IsDisplayed(driver, testInReport, testName, testDataIteration, "LastReplied_Field");

                    WaitUntil(driver, Control("AssignedDate_Field", "Generic"), 60);
                    MoveToElement(driver, Control("AssignedDate_Field", "Generic"));
                    ElementHighlight(driver, Control("AssignedDate_Field", "Generic"));
                    IsDisplayed(driver, testInReport, testName, testDataIteration, "AssignedDate_Field");
                    break;

            }

        }


        public void SelectValuesFromDashboardDropDown(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string role)
        {
            ThinkTime(5);
            WaitUntil(driver, Control("DashboardSelector", "Generic"), 30);
            Element(driver, Control("DashboardSelector", "Generic")).Click();
            ThinkTime(5);
            AddLog(driver, testInReport, testName, testDataIteration, "Info", "Roles are available", "Dashboard Roles");
            //driver.SwitchTo().DefaultContent();
            ThinkTime(3);
            WaitUntil(driver, Control("Dashboardrole1", role, "Generic"), 90);
            ThinkTime(2);
            Element(driver, Control("Dashboardrole1", role, "Generic")).Click();
            ThinkTime(2);
            WaitUntil(driver, Control("DashboardSelected", "Generic"), 360);
            if (!Element(driver, Control("DashboardSelected", "Generic")).Text.ToString().Equals(role))
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "User is not able to select DashBoard Role", "DashBoard Role");
                Assert.Fail("User is not able to select DashBoard Role");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "User is able to select DashBoard Role", " DashBoard Role");
            }
            driver.Navigate().Refresh();
            ThinkTime(5);
        }


        public void VerifyExcelButton(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string excelbutton)
        {

            ThinkTime(10);
            if (Elements(driver, Control("ExportToExcel", excelbutton, "Dashboards")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Export to Excel Button Exists", "DashBoard Role");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Purpose stage does not exists", "DashBoard Role");

            }



        }





        public void Selectdropdownvalue(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string Option)
        {


            ThinkTime(12);
            WaitUntil(driver, Control("activeCaseSelector", "GenericOld"), 360);
            MoveToElement(driver, Control("activeCaseSelector", "GenericOld"));
            ElementHighlight(driver, Control("activeCaseSelector", "GenericOld"));
            Element(driver, Control("activeCaseSelector", "GenericOld")).Click();
            ThinkTime(5);
            WaitUntil(driver, Control("SelectDropdownOption", Option, "Opportunity"), 360);
            Element(driver, Control("SelectDropdownOption", Option, "Opportunity")).Click();
            ThinkTime(4);
            if (Elements(driver, Control("ScriptDialg", "Opportunity")) > 0)
            {
                Element(driver, Control("HandleScriptError", "Opportunity")).Click();
                ThinkTime(3);
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "No Script error present", "No Script error present");



            }

            ThinkTime(4);
        }

        //Generic function to choose option from drop down

        public void SelectValuesFromDropDown(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string Option)
        {


            ThinkTime(4);
            WaitUntil(driver, Control("activeCaseSelector", "GenericOld"), 120);
            Element(driver, Control("activeCaseSelector", "GenericOld")).Click();
            ThinkTime(2);
            WaitUntil(driver, Control("SelectDropdownOption", Option, "Opportunity"), 120);
            Element(driver, Control("SelectDropdownOption", Option, "Opportunity")).Click();
            ThinkTime(4);
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);

            ThinkTime(4);
            String CaseView = Element(driver, Control("SelectedView", "GenericOld")).Text;
            if (CaseView == Option)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "User is able to select DashBoard Role", " DashBoard Role");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "User is not able to select DashBoard Role", "DashBoard Role");
                Assert.Fail("User is not able to select DashBoard Role");
            }

        }

        public void SelectValuesFromDropDownActivities(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string Option, string Option1)
        {


            ThinkTime(5);
            WaitUntil(driver, Control("activeCaseSelector", "GenericOld"), 90);
            Element(driver, Control("activeCaseSelector", "GenericOld")).Click();
            ThinkTime(5);
            WaitUntil(driver, Control("SelectDropdownOption", Option, "Opportunity"), 360);
            Element(driver, Control("SelectDropdownOption", Option, "Opportunity")).Click();
            ThinkTime(3);

            ThinkTime(5);
            WaitUntil(driver, Control("activeCaseSelector", "GenericOld"), 90);
            Element(driver, Control("activeCaseSelector", "GenericOld")).Click();
            ThinkTime(5);
            Element(driver, Control("SelectDropdownOption", Option, "Opportunity")).SendKeys(Keys.ArrowUp);

            ThinkTime(4);
            Element(driver, Control("SelectDropdownOption", Option1, "Opportunity")).SendKeys(Keys.Enter);

            ThinkTime(4);
            if (Elements(driver, Control("ScriptDialg", "Opportunity")) > 0)
            {
                Element(driver, Control("HandleScriptError", "Opportunity")).Click();
                ThinkTime(3);
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "No Script error present", "No Script error present");



            }

            ThinkTime(4);
            String CaseView = Element(driver, Control("SelectedView", "GenericOld")).Text;
            if (CaseView == Option1)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "User is able to select DashBoard Role", " DashBoard Role");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "User is not able to select DashBoard Role", "DashBoard Role");
                Assert.Fail("User is not able to select DashBoard Role");
            }

        }

        //Method to select Actiity Type.
        public void SelectActivityType(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string Option)
        {
            ThinkTime(3);

            WaitUntil(driver, Control("ActivityTypeDropDownButton", "ITSales"), 30);
            Element(driver, Control("ActivityTypeDropDownButton", "ITSales")).Click();

            WaitUntil(driver, Control("SelectActivityTypeValue", Option, "ITSales"), 30);
            Element(driver, Control("SelectActivityTypeValue", Option, "ITSales")).Click();

            WaitUntil(driver, Control("ActivitySearchButtonClick", "ITSales"), 30);
            Element(driver, Control("ActivitySearchButtonClick", "ITSales")).Click();

        }



        public void VerifyRenamedOppUpdated(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string Option)
        {
            ThinkTime(5);
            Element(driver, Control("activeCaseSelector", "GenericOld")).Click();
            ThinkTime(5);

            if (Elements(driver, Control("SelectDropdownOption", Option, "Opportunity")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "oppurtunity name not updated", "DashBoard Role");
                Assert.Fail("oppurtunity name not updated");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "oppurtunity name not updated", "DashBoard Role");

            }
        }

        //Method to check columns inside IT sales manager dashboard
        public void VerifyColumnManagerdashboard(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(5);
            WaitUntil(driver, Control("ReferenceColumn", "Opportunity"), 30);
            Element(driver, Control("ReferenceColumn", "Opportunity")).Click();
            ThinkTime(5);
            if (Elements(driver, Control("ReferenceColumn", "Opportunity")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Column exists", "DashBoard Role");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Column does not exists", "DashBoard Role");
                Assert.Fail("Column does not exists");
            }
            ThinkTime(3);

            if (Elements(driver, Control("PipelineColumn", "Opportunity")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Column exists", "DashBoard Role");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Column does not exists", "DashBoard Role");
                Assert.Fail("Column does not exists");
            }
            ThinkTime(3);

            if (Elements(driver, Control("OwnerColumn", "Opportunity")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Column exists", "DashBoard Role");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Column does not exists", "DashBoard Role");
                Assert.Fail("Column does not exists");
            }
            ThinkTime(3);

            if (Elements(driver, Control("CreatedOnColumn", "Opportunity")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Column exists", "DashBoard Role");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Column does not exists", "DashBoard Role");
                Assert.Fail("Column does not exists");
            }
            ThinkTime(3);

            if (Elements(driver, Control("SaleType", "Opportunity")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Column exists", "DashBoard Role");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Column does not exists", "DashBoard Role");
                Assert.Fail("Column does not exists");
            }
            ThinkTime(3);

            if (Elements(driver, Control("EmailColumn", "Opportunity")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Column exists", "DashBoard Role");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Column does not exists", "DashBoard Role");
                Assert.Fail("Column does not exists");
            }
            ThinkTime(3);

            if (Elements(driver, Control("TopicCloumn", "Opportunity")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Column exists", "DashBoard Role");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Column does not exists", "DashBoard Role");
                Assert.Fail("Column does not exists");
            }
            ThinkTime(3);

            if (Elements(driver, Control("OPPSubtypecolumn", "Opportunity")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Column exists", "DashBoard Role");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Column does not exists", "DashBoard Role");
                Assert.Fail("Column does not exists");
            }
            ThinkTime(3);

            if (Elements(driver, Control("AccountColumn", "Opportunity")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Column exists", "DashBoard Role");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Column does not exists", "DashBoard Role");
                Assert.Fail("Column does not exists");
            }
            ThinkTime(3);

            if (Elements(driver, Control("CompanyIDColumn", "Opportunity")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Column exists", "DashBoard Role");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Column does not exists", "DashBoard Role");
                Assert.Fail("Column does not exists");
            }
            ThinkTime(3);

            if (Elements(driver, Control("CountryIDColumn", "Opportunity")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Column exists", "DashBoard Role");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Column does not exists", "DashBoard Role");
                Assert.Fail("Column does not exists");
            }
            ThinkTime(3);
            scrollMiddle(driver, testInReport, testName, testDataIteration, "Scroll");
            ThinkTime(5);
            WaitUntil(driver, Control("CustomerIDColumn", "Opportunity"), 30);
            Element(driver, Control("CustomerIDColumn", "Opportunity")).Click();
            ThinkTime(5);
            if (Elements(driver, Control("CustomerIDColumn", "Opportunity")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Column exists", "DashBoard Role");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Column does not exists", "DashBoard Role");
                Assert.Fail("Column does not exists");
            }
            ThinkTime(3);
            if (Elements(driver, Control("ProductidColumn", "Opportunity")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Column exists", "DashBoard Role");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Column does not exists", "DashBoard Role");
                Assert.Fail("Column does not exists");
            }
            ThinkTime(3);
            if (Elements(driver, Control("Corporate", "Opportunity")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Column exists", "DashBoard Role");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Column does not exists", "DashBoard Role");
                Assert.Fail("Column does not exists");
            }
            ThinkTime(3);
            if (Elements(driver, Control("Alternativecolumn", "Opportunity")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Column exists", "DashBoard Role");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Column does not exists", "DashBoard Role");
                Assert.Fail("Column does not exists");
            }
            ThinkTime(3);
            if (Elements(driver, Control("ContactIDColumn", "Opportunity")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Column exists", "DashBoard Role");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Column does not exists", "DashBoard Role");
                Assert.Fail("Column does not exists");
            }
            ThinkTime(3);
            if (Elements(driver, Control("AlternativeIDColumn", "Opportunity")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Column exists", "DashBoard Role");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Column does not exists", "DashBoard Role");
                Assert.Fail("Column does not exists");
            }
            ThinkTime(3);
            if (Elements(driver, Control("BussinessPhoneColumn", "Opportunity")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Column exists", "DashBoard Role");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Column does not exists", "DashBoard Role");
                Assert.Fail("Column does not exists");
            }
            ThinkTime(3);
            if (Elements(driver, Control("AlternativemailColumn", "Opportunity")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Column exists", "DashBoard Role");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Column does not exists", "DashBoard Role");
                Assert.Fail("Column does not exists");
            }
            ThinkTime(3);
            if (Elements(driver, Control("EmailContactColumn", "Opportunity")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Column exists", "DashBoard Role");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Column does not exists", "DashBoard Role");
                Assert.Fail("Column does not exists");
            }
            ThinkTime(3);

            scrollRightMiddle(driver, testInReport, testName, testDataIteration, "Scroll");
            ThinkTime(5);
            Element(driver, Control("LanguageColumn", "Opportunity")).Click();
            if (Elements(driver, Control("LanguageColumn", "Opportunity")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Column exists", "DashBoard Role");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Column does not exists", "DashBoard Role");
                Assert.Fail("Column does not exists");
            }
            ThinkTime(3);
            if (Elements(driver, Control("JobTitleColumn", "Opportunity")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Column exists", "DashBoard Role");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Column does not exists", "DashBoard Role");
                Assert.Fail("Column does not exists");
            }
            ThinkTime(3);

            Element(driver, Control("JobLevelColumn", "Opportunity")).Click();
            ThinkTime(5);
            if (Elements(driver, Control("JobLevelColumn", "Opportunity")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Column exists", "DashBoard Role");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Column does not exists", "DashBoard Role");
                Assert.Fail("Column does not exists");
            }
            ThinkTime(3);
            if (Elements(driver, Control("CountryColumn", "Opportunity")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Column exists", "DashBoard Role");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Column does not exists", "DashBoard Role");
                Assert.Fail("Column does not exists");
            }
            ThinkTime(3);
            if (Elements(driver, Control("BrandIDColumn", "Opportunity")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Column exists", "DashBoard Role");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Column does not exists", "DashBoard Role");
                Assert.Fail("Column does not exists");
            }
            ThinkTime(3);
            if (Elements(driver, Control("NameCenterColumn", "Opportunity")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Column exists", "DashBoard Role");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Column does not exists", "DashBoard Role");
                Assert.Fail("Column does not exists");
            }
            ThinkTime(3);
            if (Elements(driver, Control("CenterNumberColumn", "Opportunity")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Column exists", "DashBoard Role");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Column does not exists", "DashBoard Role");
                Assert.Fail("Column does not exists");
            }
            ThinkTime(3);
            scrollRight(driver, testInReport, testName, testDataIteration, "Scroll");
            ThinkTime(5);
            Element(driver, Control("EmailCenterColumn", "Opportunity")).Click();
            ThinkTime(5);
            if (Elements(driver, Control("EmailCenterColumn", "Opportunity")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Column exists", "DashBoard Role");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Column does not exists", "DashBoard Role");
                Assert.Fail("Column does not exists");
            }
            ThinkTime(3);
            if (Elements(driver, Control("MainPhoneColumn", "Opportunity")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Column exists", "DashBoard Role");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Column does not exists", "DashBoard Role");
                Assert.Fail("Column does not exists");
            }
            ThinkTime(3);
            if (Elements(driver, Control("NumberofUsersColumn", "Opportunity")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Column exists", "DashBoard Role");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Column does not exists", "DashBoard Role");
                Assert.Fail("Column does not exists");
            }
            ThinkTime(3);
            if (Elements(driver, Control("StartDateColumn", "Opportunity")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Column exists", "DashBoard Role");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Column does not exists", "DashBoard Role");
                Assert.Fail("Column does not exists");
            }
            ThinkTime(3);
            if (Elements(driver, Control("EnddateColumn", "Opportunity")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Column exists", "DashBoard Role");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Column does not exists", "DashBoard Role");
                Assert.Fail("Column does not exists");
            }
            ThinkTime(3);
            if (Elements(driver, Control("DurationColumn", "Opportunity")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Column exists", "DashBoard Role");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Column does not exists", "DashBoard Role");
                Assert.Fail("Column does not exists");
            }
            ThinkTime(3);
            if (Elements(driver, Control("TicketNumberColumn", "Opportunity")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Column exists", "DashBoard Role");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Column does not exists", "DashBoard Role");
                Assert.Fail("Column does not exists");
            }
            ThinkTime(3);
            if (Elements(driver, Control("SetUpFeeColumn", "Opportunity")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Column exists", "DashBoard Role");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Column does not exists", "DashBoard Role");
                Assert.Fail("Column does not exists");
            }
            ThinkTime(3);
            if (Elements(driver, Control("QuantityColumn", "Opportunity")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Column exists", "DashBoard Role");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Column does not exists", "DashBoard Role");
                Assert.Fail("Column does not exists");
            }
            ThinkTime(3);
            if (Elements(driver, Control("MonthlyFeeColumn", "Opportunity")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Column exists", "DashBoard Role");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Column does not exists", "DashBoard Role");
                Assert.Fail("Column does not exists");
            }
            ThinkTime(3);
            if (Elements(driver, Control("TotalContractValueColumn", "Opportunity")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Column exists", "DashBoard Role");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Column does not exists", "DashBoard Role");
                Assert.Fail("Column does not exists");
            }
            ThinkTime(3);
        }

        //Method to create new activity in timeline.
        public void CreateNewActivityButtonOpportunity(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string Activity)
        {
            ThinkTime(3);

            WaitUntil(driver, Control("AddNewActivityButton", "ITSales"), 30);
            Element(driver, Control("AddNewActivityButton", "ITSales")).Click();

            WaitUntil(driver, Control("ActivityButtonSelect", Activity, "ITSales"), 30);
            Element(driver, Control("ActivityButtonSelect", Activity, "ITSales")).Click();

        }

        //Method to create new opportunity in IT sales with Contact.
        public void CreateNewOppITSalesWithData(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string TestContact)
        {
            ThinkTime(3);

            WaitUntil(driver, Control("NewOppButton", "ITSales"), 30);
            //MoveToElement(driver, Control("Customertypefield", "36.1_Dashboard"));
            Element(driver, Control("NewOppButton", "ITSales")).Click();

            ThinkTime(7);

            scrollDownITSalesOpportunityPage(driver, testInReport, testName, testDataIteration);
            try
            {
                WaitUntil(driver, Control("CustomerInput", "ITSales"), 30);
                Element(driver, Control("CustomerInput", "ITSales")).Click();
                Element(driver, Control("CustomerInput", "ITSales")).SendKeys(TestContact);
                ThinkTime(2);
                WaitUntil(driver, Control("CustomerDropdownSelect", "ITSales"), 30);
                Element(driver, Control("CustomerDropdownSelect", "ITSales")).Click();
            }
            catch (Exception E)
            {

            }
            //scrollDownITSalesOpportunityPage(driver, testInReport, testName, testDataIteration);

            saveFooter(driver, testInReport, testName, testDataIteration);

        }


        //Method to navigate to related opportunity IT sales.

        public void NavigateToRelatedTabOppsITSales(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string RelatedTabEntity)
        {
            WaitUntil(driver, Control("RelatedTab", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("RelatedTab", "EnterpriseSales"));
            ThinkTime(3);
            Element(driver, Control("RelatedTab", "EnterpriseSales")).Click();
            ThinkTime(3);
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Related ", "");

            WaitUntil(driver, Control("ITSalesRelatedOpp", "ITSales"), 30);
            MoveToElement(driver, Control("ITSalesRelatedOpp", "ITSales"));
            ThinkTime(3);
            Element(driver, Control("ITSalesRelatedOpp", "ITSales")).Click();

        }


        //Method to Navigate to 

        public void NavigateTabsContact(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string Tab)
        {
            ThinkTime(9);

            WaitUntil(driver, Control("SelectTabUnderContact", Tab, "ITSales"), 30);
            Element(driver, Control("SelectTabUnderContact", Tab, "ITSales")).Click();


        }

        //Method to quick create a new opp from contact.
        public void QuickCreateOppFromContact(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string Time, string Count, string Topic)
        {
            ThinkTime(7);


            string topic1 = Topic + Time + Count;

            WaitUntil(driver, Control("NewOppButtonQuickCreate", "ITSales"), 30);
            Element(driver, Control("NewOppButtonQuickCreate", "ITSales")).Click();

            ThinkTime(7);

            WaitUntil(driver, Control("QuickCreateTopicInput", "ITSales"), 30);
            Element(driver, Control("QuickCreateTopicInput", "ITSales")).Click();
            Element(driver, Control("QuickCreateTopicInput", "ITSales")).SendKeys(topic1);

            WaitUntil(driver, Control("QuickCreateOppType", "ITSales"), 30);
            Element(driver, Control("QuickCreateOppType", "ITSales")).Click();
            Select(Element(driver, Control("QuickCreateOppType", "Generic"))).SelectByText("IT Sales");

            WaitUntil(driver, Control("QuickCreateSave", "ITSales"), 30);
            Element(driver, Control("QuickCreateSave", "ITSales")).Click();


        }
        //Method to quick create a new opp from contact udpated
        public String QuickCreateOppFromContactWithRet(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string Time, string Count, string Topic)
        {
            ThinkTime(7);


            string topic1 = Topic + Time + Count;

            WaitUntil(driver, Control("NewOppButtonQuickCreate", "ITSales"), 30);
            Element(driver, Control("NewOppButtonQuickCreate", "ITSales")).Click();

            ThinkTime(7);

            WaitUntil(driver, Control("QuickCreateTopicInput", "ITSales"), 30);
            Element(driver, Control("QuickCreateTopicInput", "ITSales")).Click();
            Element(driver, Control("QuickCreateTopicInput", "ITSales")).SendKeys(topic1);

            WaitUntil(driver, Control("QuickCreateOppType", "ITSales"), 30);
            Element(driver, Control("QuickCreateOppType", "ITSales")).Click();
            Select(Element(driver, Control("QuickCreateOppType", "Generic"))).SelectByText("IT Sales");

            WaitUntil(driver, Control("QuickCreateSave", "ITSales"), 30);
            Element(driver, Control("QuickCreateSave", "ITSales")).Click();
            return topic1;

        }


        //Method to quick create a new opp from contact.
        public void QuickCreateOppFromContact1(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string Time, string Count, string Topic, string country, string source, string major, string minor)
        {
            ThinkTime(7);


            string topic1 = Topic + Time + Count;

            WaitUntil(driver, Control("NewOppButtonQuickCreate", "ITSales"), 30);
            Element(driver, Control("NewOppButtonQuickCreate", "ITSales")).Click();

            ThinkTime(10);

            WaitUntil(driver, Control("QuickCreateTopicInput", "ITSales"), 30);
            Element(driver, Control("QuickCreateTopicInput", "ITSales")).Click();
            Element(driver, Control("QuickCreateTopicInput", "ITSales")).SendKeys(topic1);
            ThinkTime(2);

            WaitUntil(driver, Control("QuickCreateCountryname", "ITSales"), 30);
            Element(driver, Control("QuickCreateCountryname", "ITSales")).Click();
            Element(driver, Control("QuickCreateCountryname", "ITSales")).SendKeys(Keys.Control + "a");
            Element(driver, Control("QuickCreateCountryname", "ITSales")).SendKeys(Keys.Delete);
            Element(driver, Control("QuickCreateCountryname", "ITSales")).SendKeys(country);
            ThinkTime(4);
            //WaitUntil(driver, Control("SelectDropDownToField", "ITSales"), 30);
            Element(driver, Control("SelectDropDownToField", "ITSales")).Click();
            ThinkTime(2);

            WaitUntil(driver, Control("QuickCreateChannel", "ITSales"), 30);
            Element(driver, Control("QuickCreateChannel", "ITSales")).Click();
            Element(driver, Control("QuickCreateChannel", "ITSales")).SendKeys(source);
            ThinkTime(2);
            WaitUntil(driver, Control("SelectDropDownToField", "ITSales"), 30);
            Element(driver, Control("SelectDropDownToField", "ITSales")).Click();
            ThinkTime(2);

            WaitUntil(driver, Control("QuickCreateMajor", "ITSales"), 30);
            Element(driver, Control("QuickCreateMajor", "ITSales")).Click();
            Element(driver, Control("QuickCreateMajor", "ITSales")).SendKeys(major);
            ThinkTime(2);
            WaitUntil(driver, Control("SelectDropDownToField", "ITSales"), 30);
            Element(driver, Control("SelectDropDownToField", "ITSales")).Click();
            ThinkTime(2);

            WaitUntil(driver, Control("QuickCreateMinor", "ITSales"), 30);
            Element(driver, Control("QuickCreateMinor", "ITSales")).Click();
            Element(driver, Control("QuickCreateMinor", "ITSales")).SendKeys(minor);
            ThinkTime(2);
            WaitUntil(driver, Control("SelectDropDownToField", "ITSales"), 30);
            //WaitUntil(driver, Control("SelectDropDownToField", "ITSales"), 30);
            Element(driver, Control("SelectDropDownToField", "ITSales")).Click();
            ThinkTime(2);

            WaitUntil(driver, Control("QuickCreateSave", "ITSales"), 30);
            Element(driver, Control("QuickCreateSave", "ITSales")).Click();

            ThinkTime(5);
            WaitUntil(driver, Control("SelectOpp", "ITSales"), 30);
            Element(driver, Control("SelectOpp", "ITSales")).Click();

        }


        //Method to create new contact  IT sales for email verification.

        public void CreateNewContactITSalesWithData(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string Time)
        {

            string NewLname = "Lname" + Time;

            ThinkTime(3);

            WaitUntil(driver, Control("NewOppButton", "ITSales"), 30);
            //MoveToElement(driver, Control("Customertypefield", "36.1_Dashboard"));
            Element(driver, Control("NewOppButton", "ITSales")).Click();


            ThinkTime(3);

            //scrollDownITSalesOpportunityPage(driver, testInReport, testName, testDataIteration);

            WaitUntil(driver, Control("ITSalesNewContactLnameInput", "ITSales"), 30);
            Element(driver, Control("ITSalesNewContactLnameInput", "ITSales")).Click();
            Element(driver, Control("ITSalesNewContactLnameInput", "ITSales")).SendKeys(NewLname);

            ThinkTime(3);

            //WaitUntil(driver, Control("ITSalesCompanyAccountInput", "ITSales"), 30);
            //Element(driver, Control("ITSalesCompanyAccountInput", "ITSales")).Click();
            //Element(driver, Control("ITSalesCompanyAccountInput", "ITSales")).SendKeys("TestAccount");
            //ThinkTime(10);
            //WaitUntil(driver, Control("CustomerDropdownSelect", "ITSales"), 30);
            //Element(driver, Control("CustomerDropdownSelect", "ITSales")).Click();


            //ITSalesEmailInput
            WaitUntil(driver, Control("ITSalesEmailInput", "ITSales"), 30);
            Element(driver, Control("ITSalesEmailInput", "ITSales")).Click();
            Element(driver, Control("ITSalesEmailInput", "ITSales")).SendKeys("TestEmail@gmail.com");
            scrollDownContactPage(driver, testInReport, testName, testDataIteration);
            ThinkTime(2);
            WaitUntil(driver, Control("ContactLanguage", "EnterpriseSales"), 70);
            MoveToElement(driver, Control("ContactLanguage", "EnterpriseSales"));

            Element(driver, Control("ContactLanguage", "EnterpriseSales")).SendKeys(Keys.Control + "a");
            Element(driver, Control("ContactLanguage", "EnterpriseSales")).SendKeys(Keys.Delete);
            Element(driver, Control("ContactLanguage", "EnterpriseSales")).SendKeys("Uk english");
            ThinkTime(2);
            WaitUntil(driver, Control("ContactLanguageDropdownSelect", "EnterpriseSales"), 70);
            MoveToElement(driver, Control("ContactLanguageDropdownSelect", "EnterpriseSales"));
            Element(driver, Control("ContactLanguageDropdownSelect", "EnterpriseSales")).Click();
            ThinkTime(2);

            saveFooter(driver, testInReport, testName, testDataIteration);

        }


        //Method to create a contact to Emial outlook tacking.

        public void CreateNewContactITSalesEmailTrack(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string Time)
        {

            string NewLname = "EmailContact" + Time;

            ThinkTime(3);

            WaitUntil(driver, Control("NewOppButton", "ITSales"), 30);
            Element(driver, Control("NewOppButton", "ITSales")).Click();


            ThinkTime(7);


            WaitUntil(driver, Control("QCContactLnameInput", "ITSales"), 120);
            Element(driver, Control("QCContactLnameInput", "ITSales")).Click();
            Element(driver, Control("QCContactLnameInput", "ITSales")).SendKeys(NewLname);

            ThinkTime(5);

            WaitUntil(driver, Control("ITSalesCompanyAccountInput", "ITSales"), 120);
            Element(driver, Control("ITSalesCompanyAccountInput", "ITSales")).Click();
            Element(driver, Control("ITSalesCompanyAccountInput", "ITSales")).SendKeys(Keys.Control + "a");
            Element(driver, Control("ITSalesCompanyAccountInput", "ITSales")).SendKeys(Keys.Delete);
            Element(driver, Control("ITSalesCompanyAccountInput", "ITSales")).SendKeys("TestAccount");
            ThinkTime(8);
            WaitUntil(driver, Control("SelectDropDownToField", "ITSales"), 120);
            Element(driver, Control("SelectDropDownToField", "ITSales")).Click();
            ThinkTime(2);

            //ITSalesEmailInput
            WaitUntil(driver, Control("ITSalesEmailInput", "ITSales"), 120);
            Element(driver, Control("ITSalesEmailInput", "ITSales")).Click();
            Element(driver, Control("ITSalesEmailInput", "ITSales")).SendKeys("crm.test8@regus.com");

            scrollDownITSalesOpportunityPage(driver, testInReport, testName, testDataIteration);
            //scrollDownITSalesOpportunityPage(driver, testInReport, testName, testDataIteration);

            WaitUntil(driver, Control("ITSalesContactLanguageInput", "ITSales"), 120);
            Element(driver, Control("ITSalesContactLanguageInput", "ITSales")).Click();
            Element(driver, Control("ITSalesContactLanguageInput", "ITSales")).SendKeys(Keys.Control + "a");
            Element(driver, Control("ITSalesContactLanguageInput", "ITSales")).SendKeys(Keys.Delete);
            Element(driver, Control("ITSalesContactLanguageInput", "ITSales")).SendKeys("UK English");

            ThinkTime(4);

            WaitUntil(driver, Control("CustomerDropdownSelect", "ITSales"), 30);
            Element(driver, Control("CustomerDropdownSelect", "ITSales")).Click();
            ThinkTime(2);
            saveFooter(driver, testInReport, testName, testDataIteration);

        }

        public void CreateNewContactITSales(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string Time)
        {

            string NewLname = "EmailContact" + Time;

            ThinkTime(3);

            WaitUntil(driver, Control("NewOppButton", "ITSales"), 30);
            Element(driver, Control("NewOppButton", "ITSales")).Click();


            ThinkTime(3);


            WaitUntil(driver, Control("ITSalesNewContactLnameInput", "ITSales"), 30);
            Element(driver, Control("ITSalesNewContactLnameInput", "ITSales")).Click();
            Element(driver, Control("ITSalesNewContactLnameInput", "ITSales")).SendKeys(NewLname);

            ThinkTime(3);




            //ITSalesEmailInput
            WaitUntil(driver, Control("ITSalesEmailInput", "ITSales"), 30);
            Element(driver, Control("ITSalesEmailInput", "ITSales")).Click();
            Element(driver, Control("ITSalesEmailInput", "ITSales")).SendKeys("crm.test8@regus.com");

            scrollDownITSalesOpportunityPage(driver, testInReport, testName, testDataIteration);


            WaitUntil(driver, Control("ITSalesContactLanguageInput", "ITSales"), 30);
            Element(driver, Control("ITSalesContactLanguageInput", "ITSales")).Click();
            Element(driver, Control("ITSalesContactLanguageInput", "ITSales")).SendKeys("UK English");

            ThinkTime(3);

            WaitUntil(driver, Control("CustomerDropdownSelect", "ITSales"), 30);
            Element(driver, Control("CustomerDropdownSelect", "ITSales")).Click();

            saveFooter(driver, testInReport, testName, testDataIteration);

        }


        //Method to Open record relative Views.
        public void OpenRecordRelativeView(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(3);

            WaitUntil(driver, Control("OpenRecordQuickRelative", "ITSales"), 30);
            Element(driver, Control("OpenRecordQuickRelative", "ITSales")).Click();

        }


        //Method to create a new contact for email verification it sales manager.

        public void CreateNewContactITSalesManagerWithData(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {

            ThinkTime(3);

            WaitUntil(driver, Control("NewOppButton", "ITSales"), 30);
            //MoveToElement(driver, Control("Customertypefield", "36.1_Dashboard"));
            Element(driver, Control("NewOppButton", "ITSales")).Click();


            ThinkTime(3);


            WaitUntil(driver, Control("ITSalesNewContactLnameInput", "ITSales"), 30);
            Element(driver, Control("ITSalesNewContactLnameInput", "ITSales")).Click();
            MoveToElement(driver, Control("ITSalesNewContactLnameInput", "ITSales"));
            Element(driver, Control("ITSalesNewContactLnameInput", "EnterpriseSales")).SendKeys(Keys.Control + "a");
            Element(driver, Control("ITSalesNewContactLnameInput", "EnterpriseSales")).SendKeys(Keys.Delete);
            Element(driver, Control("ITSalesNewContactLnameInput", "ITSales")).SendKeys("Lname73");




            if (Elements(driver, Control("ITSalesCompanyAccountInput", "ITSales")) > 0)
            {
                ThinkTime(3);

                WaitUntil(driver, Control("ITSalesCompanyAccountInput", "ITSales"), 30);
                Element(driver, Control("ITSalesCompanyAccountInput", "ITSales")).Click();
                MoveToElement(driver, Control("ITSalesCompanyAccountInput", "ITSales"));
                Element(driver, Control("ITSalesCompanyAccountInput", "EnterpriseSales")).SendKeys(Keys.Control + "a");
                Element(driver, Control("ITSalesCompanyAccountInput", "EnterpriseSales")).SendKeys(Keys.Delete);
                Element(driver, Control("ITSalesCompanyAccountInput", "ITSales")).SendKeys("TestAccount");
            }
            else
            {
                ThinkTime(3);

                WaitUntil(driver, Control("AccountName", "CommonObj"), 30);
                Element(driver, Control("AccountName", "CommonObj")).Click();
                MoveToElement(driver, Control("AccountName", "CommonObj"));
                Element(driver, Control("AccountName", "CommonObj")).SendKeys(Keys.Control + "a");
                Element(driver, Control("AccountName", "CommonObj")).SendKeys(Keys.Delete);
                Element(driver, Control("AccountName", "CommonObj")).SendKeys("TestAccount");

            }
            ThinkTime(2);
            WaitUntil(driver, Control("CustomerDropdownSelect", "ITSales"), 30);
            Element(driver, Control("CustomerDropdownSelect", "ITSales")).Click();
            scrollDownContactCust(driver, testInReport, testName, testDataIteration, "200");
            ThinkTime(2);
            //ITSalesEmailInput
            WaitUntil(driver, Control("ITSalesEmailInput", "ITSales"), 30);
            Element(driver, Control("ITSalesEmailInput", "ITSales")).Click();
            MoveToElement(driver, Control("ITSalesEmailInput", "ITSales"));
            Element(driver, Control("ITSalesEmailInput", "EnterpriseSales")).SendKeys(Keys.Control + "a");
            Element(driver, Control("ITSalesEmailInput", "EnterpriseSales")).SendKeys(Keys.Delete);
            Element(driver, Control("ITSalesEmailInput", "ITSales")).SendKeys("TestEmail@gmail.com");
            scrollDownContactCust(driver, testInReport, testName, testDataIteration, "200");
            //scrollDownITSalesOpportunityPage(driver, testInReport, testName, testDataIteration);
            ThinkTime(2);
            WaitUntil(driver, Control("ITSalesContactLanguageInput", "ITSales"), 30);
            MoveToElement(driver, Control("ITSalesContactLanguageInput", "ITSales"));
            Element(driver, Control("ITSalesContactLanguageInput", "EnterpriseSales")).SendKeys(Keys.Control + "a");
            Element(driver, Control("ITSalesContactLanguageInput", "EnterpriseSales")).SendKeys(Keys.Delete);
            Element(driver, Control("ITSalesContactLanguageInput", "ITSales")).Click();
            Element(driver, Control("ITSalesContactLanguageInput", "ITSales")).SendKeys("UK English");

            ThinkTime(3);

            WaitUntil(driver, Control("CustomerDropdownSelect", "ITSales"), 30);
            Element(driver, Control("CustomerDropdownSelect", "ITSales")).Click();

            saveFooter(driver, testInReport, testName, testDataIteration);

        }


        //Method to get reference id for opportunity.
        public string GetReferenceIDOpportunity(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(3);

            WaitUntil(driver, Control("GetReferenceOpportunity", "ITSales"), 30);
            string Reference = Element(driver, Control("GetReferenceOpportunity", "ITSales")).GetAttribute("defaultValue");

            return Reference;
        }

        //Method to create email activity Sprint40.1.
        public void CreateNewEmailActivity(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(3);

            string TestSubject = "Test Email Track";
            try
            {
                WaitUntil(driver, Control("EmailFrom", "ITSales"), 30);
                Element(driver, Control("EmailFrom", "ITSales")).Click();
                Element(driver, Control("EmailFrom", "ITSales")).SendKeys("Customer Services");
                ThinkTime(2);
                WaitUntil(driver, Control("Languagedropdown", "EnterpriseSales"), 30);
                Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();
                ThinkTime(1);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "New Email activity token verified Successfully", "Email Activity token verification");

            }
            catch (Exception E)
            {

            }

            ThinkTime(3);
            WaitUntil(driver, Control("EmailSubjectInput", "ITSales"), 30);
            Element(driver, Control("EmailSubjectInput", "ITSales")).Click();
            Element(driver, Control("EmailSubjectInput", "ITSales")).SendKeys(TestSubject);
            ThinkTime(3);
            WaitUntil(driver, Control("SendButtonEmail", "ITSales"), 30);
            Element(driver, Control("SendButtonEmail", "ITSales")).Click();
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "New Email activity  verified Successfully", "Email Activity  verification");

            ThinkTime(3);

            if (Elements(driver, Control("Nosenderwarning", "ITSales")) > 0)
            {
                WaitUntil(driver, Control("EmailFromField", "ITSales"), 30);
                Element(driver, Control("EmailFromField", "ITSales")).Click();

                WaitUntil(driver, Control("EmailFromField", "ITSales"), 30);
                Element(driver, Control("EmailFromField", "ITSales")).Click();
                Element(driver, Control("EmailFromField", "ITSales")).SendKeys("Account help desk");
                ThinkTime(3);

                Element(driver, Control("SelectDropDownToField", "ITSales")).Click();

                WaitUntil(driver, Control("SendButtonEmail", "ITSales"), 30);
                Element(driver, Control("SendButtonEmail", "ITSales")).Click();

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "New Email activity token verified Successfully", "Email Activity token verification");
                WaitUntil(driver, Control("SendButtonEmail", "ITSales"), 30);
                Element(driver, Control("SendButtonEmail", "ITSales")).Click();

                //  saveFooter(driver, testInReport, testName, testDataIteration);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "New Email activity  verified Successfully", "Email Activity  verification");

                ThinkTime(3);
            }




            else if (Elements(driver, Control("NoRecipientFoundPopUp", "ITSales")) > 0)
            {

                WaitUntil(driver, Control("NoRecipientFoundPopUpOKButton", "ITSales"), 30);
                Element(driver, Control("NoRecipientFoundPopUpOKButton", "ITSales")).Click();

                WaitUntil(driver, Control("EmailToFieldInput", "ITSales"), 30);
                Element(driver, Control("EmailToFieldInput", "ITSales")).Click();
                Element(driver, Control("EmailToFieldInput", "ITSales")).SendKeys("TestAccount");
                ThinkTime(3);

                Element(driver, Control("SelectDropDownToField", "ITSales")).Click();

                WaitUntil(driver, Control("SendButtonEmail", "ITSales"), 30);
                Element(driver, Control("SendButtonEmail", "ITSales")).Click();
                ThinkTime(3);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "New Email activity token verified Successfully", "Email Activity token verification");

            }

            else
            {


                AddLog(driver, testInReport, testName, testDataIteration, "", "No emial popup handled", "Email Acivity verification");

            }

        }




        //Method to create email activity Sprint40.1.
        public void createneweamilopp(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string from)
        {
            ThinkTime(3);

            string TestSubject = "Test Email Track";
            try
            {

                if (Elements(driver, Control("FromField", "ITSales")) > 0)
                {
                    MoveToElement(driver, Control("FromField", "ITSales"));
                    Element(driver, Control("FromEmailCloseButton", "ITSales")).Click();
                }


                ThinkTime(5);

                WaitUntil(driver, Control("EmailFrom", "ITSales"), 30);
                Element(driver, Control("EmailFrom", "ITSales")).Click();
                Element(driver, Control("EmailFrom", "ITSales")).SendKeys(from);
                ThinkTime(2);
                WaitUntil(driver, Control("Languagedropdown", "EnterpriseSales"), 30);
                Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();
                ThinkTime(1);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "New Email activity token verified Successfully", "Email Activity token verification");



            }

            catch (Exception E)
            {

            }


            WaitUntil(driver, Control("EmailSubjectInput", "ITSales"), 30);
            Element(driver, Control("EmailSubjectInput", "ITSales")).Click();
            Element(driver, Control("EmailSubjectInput", "ITSales")).SendKeys(TestSubject);

            WaitUntil(driver, Control("SendButtonEmail", "ITSales"), 30);
            Element(driver, Control("SendButtonEmail", "ITSales")).Click();
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "New Email activity  verified Successfully", "Email Activity  verification");

            ThinkTime(3);

            if (Elements(driver, Control("NoRecipientFoundPopUp", "ITSales")) > 0)
            {

                WaitUntil(driver, Control("NoRecipientFoundPopUpOKButton", "ITSales"), 30);
                Element(driver, Control("NoRecipientFoundPopUpOKButton", "ITSales")).Click();

                WaitUntil(driver, Control("EmailToFieldInput", "ITSales"), 30);
                Element(driver, Control("EmailToFieldInput", "ITSales")).Click();
                Element(driver, Control("EmailToFieldInput", "ITSales")).SendKeys("TestAccount");
                ThinkTime(3);

                Element(driver, Control("SelectDropDownToField", "ITSales")).Click();

                WaitUntil(driver, Control("SendButtonEmail", "ITSales"), 30);
                Element(driver, Control("SendButtonEmail", "ITSales")).Click();

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "New Email activity token verified Successfully", "Email Activity token verification");

            }

            else
            {


                AddLog(driver, testInReport, testName, testDataIteration, "", "No emial popup handled", "Email Acivity verification");

            }

        }


        public void openoppertunityemailrecord(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)

        {
            ThinkTime(5);
            WaitUntil(driver, Control("opptimelinehighlight", "ITSales"), 180);
            ThinkTime(3);
            MoveToElement(driver, Control("opptimelinehighlight", "ITSales"));
            Element(driver, Control("opptimelinehighlight", "ITSales")).Click();
            ThinkTime(2);
            MoveToElement(driver, Control("opptimeline_openrecord", "ITSales"));
            WaitUntil(driver, Control("opptimeline_openrecord", "ITSales"), 80);
            ElementHighlight(driver, Control("opptimeline_openrecord", "ITSales"));
            JSClick(driver, Control("opptimeline_openrecord", "ITSales"));
            ThinkTime(3);
        }
        public string AssignuserCreateNewEmailActivity(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(10);
            WaitUntil(driver, Control("Emailbutton", "Generic"), 120);
            Element(driver, Control("Emailbutton", "Generic")).Click();
            ThinkTime(10);
            string TestSubject = "Test Email Track";
            try
            {
                WaitUntil(driver, Control("EmailFrom", "ITSales"), 120);
                //Element(driver, Control("EmailFrom", "ITSales")).Click();
                Element(driver, Control("EmailFrom", "ITSales")).SendKeys(Keys.Control + "a");
                Element(driver, Control("EmailFrom", "ITSales")).SendKeys(Keys.Delete);
                Element(driver, Control("EmailFrom", "ITSales")).SendKeys("Alan Cura");
                ThinkTime(5);
                ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
                ThinkTime(5);
                Element(driver, Control("SelectDropDownToField", "ITSales")).Click();
                //WaitUntil(driver, Control("Languagedropdown", "EnterpriseSales"), 120);
                //MoveToElement(driver, Control("Languagedropdown", "EnterpriseSales"));
                //Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();
            }
            catch (Exception E)
            {

            }


            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            WaitUntil(driver, Control("EmailSubjectInput", "ITSales"), 100);
            // Element(driver, Control("EmailSubjectInput", "ITSales")).Click();
            Element(driver, Control("EmailSubjectInput", "ITSales")).SendKeys(Keys.Control + "a");
            Element(driver, Control("EmailSubjectInput", "ITSales")).SendKeys(Keys.Delete);
            Element(driver, Control("EmailSubjectInput", "ITSales")).SendKeys(TestSubject);

            WaitUntil(driver, Control("SendButtonEmail", "ITSales"), 120);
            Element(driver, Control("SendButtonEmail", "ITSales")).Click();

            ThinkTime(3);

            if (Elements(driver, Control("NoRecipientFoundPopUp", "ITSales")) > 0)
            {

                WaitUntil(driver, Control("NoRecipientFoundPopUpOKButton", "ITSales"), 30);
                Element(driver, Control("NoRecipientFoundPopUpOKButton", "ITSales")).Click();

                WaitUntil(driver, Control("EmailToFieldInput", "ITSales"), 120);
                Element(driver, Control("EmailToFieldInput", "ITSales")).Click();
                Element(driver, Control("EmailToFieldInput", "ITSales")).SendKeys("TestAccount");
                ThinkTime(3);

                Element(driver, Control("SelectDropDownToField", "ITSales")).Click();
                saveFooter(driver, testInReport, testName, testDataIteration);

                //WaitUntil(driver, Control("SendButtonEmail", "ITSales"), 30);
                //Element(driver, Control("SendButtonEmail", "ITSales")).Click();


            }

            else
            {


                AddLog(driver, testInReport, testName, testDataIteration, "", "No emial popup handled", "Email Acivity verification");

            }

            return TestSubject;

        }
        //Method to create a new Email activity for email tacker.
        public void CreateNewEmailActivityEmailTraker(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string Time)
        {
            ThinkTime(6);
            //string VerEmail = Element(driver, Control("IdentifyEmailHead", "CommonObj")).Text;
            //if (VerEmail != "Email")
            //{

            //    Element(driver, Control("SelectExpectedCon", "Email", "CommonObj")).Click();
            //}
            string TestSubject = "Test Email Track" + Time;
            ThinkTime(2);
            WaitUntil(driver, Control("EmailSubjectInput", "ITSales"), 30);
            Element(driver, Control("EmailSubjectInput", "ITSales")).Click();

            ThinkTime(7);

            Element(driver, Control("EmailSubjectInput", "ITSales")).SendKeys(TestSubject);

            scrollDownEmail(driver, testInReport, testName, testDataIteration);

            Element(driver, Control("EmailSubjectInput", "ITSales")).SendKeys(Keys.Tab);

            ThinkTime(5);

            Element(driver, Control("EmialExpandButton", "ITSales")).Click();

            ThinkTime(5);

            ////Element(driver, Control("EmialExpandButton", "ITSales")).SendKeys(Keys.Tab);

            Element(driver, Control("ButtonAfterExpand", "ITSales")).SendKeys(Keys.Tab);


            driver.SwitchTo().Frame(0);

            //Element(driver, Control("Emialselect", "ITSales")).Click();

            //Element(driver, Control("BulletButtonInput", "ITSales")).Click();

            driver.SwitchTo().Frame(Element(driver, Control("EmialIframe", "ITSales")));

            ThinkTime(3);
            WaitUntil(driver, Control("EmialBodyInput", "ITSales"), 30);
            Element(driver, Control("EmialBodyInput", "ITSales")).SendKeys("Hi Jhon ,Could you please notify the date for tour");
            ThinkTime(2);

            driver.SwitchTo().DefaultContent();

            Element(driver, Control("ButtonAfterExpand", "ITSales")).Click();
            ThinkTime(3);
            WaitUntil(driver, Control("SendButtonEmail", "ITSales"), 30);
            Element(driver, Control("SendButtonEmail", "ITSales")).Click();

            ThinkTime(3);

            if (Elements(driver, Control("NoRecipientFoundPopUp", "ITSales")) > 0)
            {

                WaitUntil(driver, Control("NoRecipientFoundPopUpOKButton", "ITSales"), 30);
                Element(driver, Control("NoRecipientFoundPopUpOKButton", "ITSales")).Click();

                WaitUntil(driver, Control("EmailToFieldInput", "ITSales"), 30);
                Element(driver, Control("EmailToFieldInput", "ITSales")).Click();
                Element(driver, Control("EmailToFieldInput", "ITSales")).SendKeys("TestAccount");
                ThinkTime(3);

                Element(driver, Control("SelectDropDownToField", "ITSales")).Click();

                WaitUntil(driver, Control("SendButtonEmail", "ITSales"), 30);
                Element(driver, Control("SendButtonEmail", "ITSales")).Click();


            }

            else
            {


                AddLog(driver, testInReport, testName, testDataIteration, "", "No emial popup handled", "Email Acivity verification");

            }

        }



        //VerifyNewEmailActivityRecord
        public string ReturnEmailActivityNo(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(5);

            WaitUntil(driver, Control("GetEmialNumber", "ITSales"), 30);
            string EmialNo = Element(driver, Control("GetEmialNumber", "ITSales")).GetAttribute("innerText");

            string pattern = "[a-z]+";

            string[] result = Regex.Split(EmialNo, pattern, RegexOptions.IgnoreCase, TimeSpan.FromMilliseconds(500));

            char[] charsToTrim = { ':' };
            string Value = result[4];
            string Result = Value.Trim(charsToTrim);

            return Result;

        }


        //Method to Navigate to Integrated outlook.
        public void NavigateToOutlook(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(10);

            WaitUntil(driver, Control("AppLauncherButton", "ITSales"), 30);
            Element(driver, Control("AppLauncherButton", "ITSales")).Click();

            MoveToElement(driver, Control("OutlookTab", "ITSales"));
            WaitUntil(driver, Control("OutlookTabMoreButton", "ITSales"), 30);
            Element(driver, Control("OutlookTabMoreButton", "ITSales")).Click();

            WaitUntil(driver, Control("OpenNewTabOutlook", "ITSales"), 30);
            Element(driver, Control("OpenNewTabOutlook", "ITSales")).Click();
        }

        //Method to Search and find emial in Outlook.
        public void SearchAndVerifysystemEmailOutlook(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string Emailsubject, string contactname, string Oppid, string message, string fromname, string secopp = "")
        {
            ThinkTime(7);

            driver.SwitchTo().DefaultContent();
            string parentWindowHandle = driver.CurrentWindowHandle;
            WindowHandling(driver);

            ThinkTime(15);

            //Search Emial in Outlook.

            //WaitUntil(driver, Control("OutlookSearchBarInput", "ITSales"), 30);
            //Element(driver, Control("OutlookSearchBarInput", "ITSales")).Click();
            //Element(driver, Control("OutlookSearchBarInput", "ITSales")).SendKeys(Emailsubject);

            //WaitUntil(driver, Control("OutlookSearchBarButton", "ITSales"), 30);
            //Element(driver, Control("OutlookSearchBarButton", "ITSales")).Click();

            //ThinkTime(3);

            //WaitUntil(driver, Control("OutlookSearchBarButton", "ITSales"), 30);
            //Element(driver, Control("OutlookSearchBarButton", "ITSales")).Click();
            ThinkTime(15);
            WaitUntil(driver, Control("Verifyemailsubject", Emailsubject, "ITSales"), 30);
            ThinkTime(15);
            Element(driver, Control("Verifyemailsubject", Emailsubject, "ITSales")).Click();

            if (Elements(driver, Control("Verifyemailsubject", Emailsubject, "ITSales")) > 0)
            {
                Element(driver, Control("Verifyemailsubject", Emailsubject, "ITSales")).Click();
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "New Email activity verified Successfully in Outlook", "Email Activity verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Email Activity verification failed in outlook", "Email Acivity verification");
                Assert.Fail("No email in the timeline of outlook");
            }

            string emailcontent = Element(driver, Control("Outlookbodycontent", "ITSales")).GetAttribute("innerText");
            bool custname = emailcontent.Contains(contactname);
            bool opprefer = emailcontent.Contains(Oppid);
            bool opprefer1 = emailcontent.Contains(secopp);
            bool content = emailcontent.Contains(message);
            bool from = emailcontent.Contains(fromname);

            if (custname == true && content == true && from == true)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "New Email activity verified Successfully in Outlook", "Email Activity verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Email Activity verification failed in outlook", "Email Acivity verification");
                Assert.Fail("Incorrect email content in the timeline of outlook");
            }
            if (opprefer == true || opprefer1 == true)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "New Email activity verified Successfully in Outlook", "Email Activity verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Email Activity verification failed in outlook", "Email Acivity verification");
                Assert.Fail("Incorrect email content in the timeline of outlook");
            }
            //ThinkTime(2);
            //WaitUntil(driver, Control("Selectallmails", "ITSales"), 30);
            //Element(driver, Control("Selectallmails", "ITSales")).Click();
            //ThinkTime(5);
            //WaitUntil(driver, Control("Deleteallmails", "ITSales"), 30);
            //Element(driver, Control("Deleteallmails", "ITSales")).Click();
            //ThinkTime(5);
            //if (Elements(driver, Control("Deleteallbutton", "ITSales")) > 0)
            //{
            //    Element(driver, Control("Deleteallbutton", "ITSales")).Click();
            //    ThinkTime(10);
            //}
            //else
            //{
            //    WaitUntil(driver, Control("Deleteallbutton1", "ITSales"), 30);
            //    Element(driver, Control("Deleteallbutton1", "ITSales")).Click();
            //    ThinkTime(10);
            //}
            driver.Close();
            driver.SwitchTo().Window(parentWindowHandle);

        }






        //Method to Search and find emial in Outlook.
        public void SearchAndVerifyEmailOutlook(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string Time, string EmialNo)
        {
            ThinkTime(7);

            string EmialSubject = "Test Email Track" + Time;

            driver.SwitchTo().DefaultContent();
            string parentWindowHandle = driver.CurrentWindowHandle;
            WindowHandling(driver);

            ThinkTime(7);

            //Search Emial in Outlook.

            WaitUntil(driver, Control("OutlookSearchBarInput", "ITSales"), 30);
            Element(driver, Control("OutlookSearchBarInput", "ITSales")).Click();
            Element(driver, Control("OutlookSearchBarInput", "ITSales")).SendKeys(EmialNo);

            WaitUntil(driver, Control("OutlookSearchBarButton", "ITSales"), 30);
            Element(driver, Control("OutlookSearchBarButton", "ITSales")).Click();

            ThinkTime(3);

            WaitUntil(driver, Control("OutlookSearchBarButton", "ITSales"), 30);
            Element(driver, Control("OutlookSearchBarButton", "ITSales")).Click();

            WaitUntil(driver, Control("TestEmialOpen", "ITSales"), 30);
            Element(driver, Control("TestEmialOpen", "ITSales")).Click();

            if (Elements(driver, Control("VerifyEmialNumber", EmialNo, "ITSales")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "New Email activity verified Successfully in Outlook", "Email Activity verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Email Activity verification failed in outlook", "Email Acivity verification");
                Assert.Fail("No email in the timeline of outlook");
            }


        }

        //Method to reply emial in Outlook.

        public void ReplyEmialInOutlook(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(5);

            string ReplyEmial = "Hi Sir, We can have the tour on Next Monday.";

            WaitUntil(driver, Control("ReplyEmialButtonOutlook", "ITSales"), 30);
            Element(driver, Control("ReplyEmialButtonOutlook", "ITSales")).Click();

            WaitUntil(driver, Control("ReplyEmialBodyInputOutlook", "ITSales"), 30);
            Element(driver, Control("ReplyEmialBodyInputOutlook", "ITSales")).Click();
            Element(driver, Control("ReplyEmialBodyInputOutlook", "ITSales")).SendKeys(ReplyEmial);

            WaitUntil(driver, Control("ReplyEmialOutlookSendButton", "ITSales"), 30);
            Element(driver, Control("ReplyEmialOutlookSendButton", "ITSales")).Click();

        }


        //Method to track Emial from outlook to dynamics.
        public void TrackEmialFromOutlookToDynamics(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(5);

            WaitUntil(driver, Control("CollapseEmialRecords", "ITSales"), 30);
            Element(driver, Control("CollapseEmialRecords", "ITSales")).Click();

            WaitUntil(driver, Control("ExpandEmialRecords", "ITSales"), 30);
            Element(driver, Control("ExpandEmialRecords", "ITSales")).Click();

            WaitUntil(driver, Control("MoreInfoButtonForReplyMail", "ITSales"), 30);
            Element(driver, Control("MoreInfoButtonForReplyMail", "ITSales")).Click();

            //ScrollDownMoreView

            //SelectD365ValueDropDown

        }


        //Method to verify email activity Sprint40.1.
        public void VerifyEmailActivity(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(2);

            WaitUntil(driver, Control("VerifyNewEmailActivityRecord", "ITSales"), 30);
            if (Elements(driver, Control("VerifyNewEmailActivityRecord", "ITSales")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "New Email activity verified Successfully", "Email Activity verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Email Activity verification failed", "Email Acivity verification");
                Assert.Fail("No email in the timeline");
            }
        }

        public void VerifyEmailActivitytoken(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(2);

            int token = Elements(driver, Control("Emailtoken", "ITSales"));

            if (token > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "New Email activity token verified Successfully", "Email Activity token verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Email Activity token verification failed", "Email Acivity token verification");
                Assert.Fail("No email in the timeline");
            }
            //saveFooter(driver, testInReport, testName, testDataIteration);
        }















        //Method to Verify No Email Activity is  created.
        public void VerifyNoEmailActivity(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(7);


            if (Elements(driver, Control("VerifyNewEmailActivityRecord", "ITSales")) == 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Email Activity verification failed", "Email Acivity verification");
                Assert.Fail("No email in the timeline");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "New Email activity verified Successfully", "Email Activity verification");
            }
        }



        //Scroll down IT Sales Opportunity.
        public void scrollDownITSalesOpportunityPage(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ElementHighlight(driver, Control("scrollDownOpportunity", "Opportunity"));
            IWebElement scroll = Element(driver, Control("scrollDownOpportunity", "Opportunity"));
            ElementHighlight(driver, Control("scrollDownOpportunity", "Opportunity"));
            IJavaScriptExecutor js = (IJavaScriptExecutor)driver;
            js.ExecuteScript("arguments[0].scrollTop+=300", scroll);
            // js.ExecuteScript("arguments[0].scrollTop+=990", scroll);

        }

        //Scroll down IT Sales contacts.
        public void scrollDownITSalesContactpage(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string value)
        {
            ThinkTime(2);
            WaitUntil(driver, Control("scrollpageCont", "Opportunity"), 60);
            ElementHighlight(driver, Control("scrollpageCont", "Opportunity"));
            IWebElement scroll = Element(driver, Control("scrollpageCont", "Opportunity"));
            ElementHighlight(driver, Control("scrollpageCont", "Opportunity"));
            IJavaScriptExecutor js = (IJavaScriptExecutor)driver;
            js.ExecuteScript("arguments[0].scrollTop+=" + value, scroll);
            // js.ExecuteScript("arguments[0].scrollTop+=990", scroll);

        }



        public void CloseTour(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            SelectOpportunityTab(driver, testInReport, testName, testDataIteration, "Summary");
            SelectanyOpportunitybutton(driver, testInReport, testName, testDataIteration, "Refresh");
            MoveToElement(driver, Control("Tourbookedlabel", "Opportunity"));
            ThinkTime(2);
            Element(driver, Control("CloseTour", "Opportunity")).Click();
            ThinkTime(4);
            Element(driver, Control("Tourcloseconfirm", "Opportunity")).Click();
            ThinkTime(4);
            if (Elements(driver, Control("CloseTour", "Opportunity")) > 0)
            {
                Element(driver, Control("CloseTour", "Opportunity")).Click();
                ThinkTime(4);
            }

        }
        public void SelectsubmenuFromDropDown(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string Option)
        {


            ThinkTime(10);
            WaitUntil(driver, Control("kpione", "36.1_Dashboard"), 360);
            Element(driver, Control("kpione", "36.1_Dashboard")).Click();
            //Element(driver, Control("activeCaseSelector", "GenericOld")).Click();
            ThinkTime(5);
            WaitUntil(driver, Control("SelectDropdownOption", Option, "Opportunity"), 80);
            Element(driver, Control("SelectDropdownOption", Option, "Opportunity")).Click();
            ThinkTime(4);
            //String CaseView = Element(driver, Control("Selecteddashboardvalue", "36.1_Dashboard")).Text;
            //if (CaseView == Option)
            //{

            //    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "User is able to select DashBoard Role", " DashBoard Role");

            //}
            //else
            //{
            //    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "User is not able to select DashBoard Role", "DashBoard Role");
            //    Assert.Fail("User is not able to select DashBoard Role");
            //}

        }


        public void VerifyOpportunityLocation(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string location)
        {

            WaitUntil(driver, Control("ContactInfo", location, "Contacts"), 180);
            ThinkTime(5);
            ElementHighlight(driver, Control("Opportunityfields", "Generic"));
            int locationcentre = Elements(driver, Control("Opportunityfields", "Generic"));
            if (locationcentre > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Location and Centre is present", " Location details verification");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Location and Centre is not present", "Location details missing");
                Assert.Fail("Location details missing inside Opportunity");
            }

        }

        /*  public void SelectValuesFromDashboardDropDown(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string Option)
          {

              ThinkTime(30);
              Element(driver, Control("Dashdropdown", "Dashboards")).Click();
              ThinkTime(4);
              MoveToElement(driver, Control("dropdownValue", Option, "Dashboards"));
              Element(driver, Control("dropdownValue", Option, "Dashboards")).Click();
              ThinkTime(4);
              String CaseView = Element(driver, Control("SelectedView", Option, "Dashboards")).Text;
              if (CaseView == Option)
              {

                  AddLog(driver, testInReport, testName, testDataIteration, "Pass", "User is able to select DashBoard Role", "DashBoard Role");

              }
              else
              {
                  AddLog(driver, testInReport, testName, testDataIteration, "Fail", "User is not able to select DashBoard Role", "DashBoard Role");
                  Assert.Fail("User is not able to select DashBoard Role");
              }

          }
          */
        public void SelectValuesFromSalesOpportunity(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string Option)
        {

            WaitUntil(driver, Control("OpenSales", Option, "Dashboards"), 180);
            MoveToElement(driver, Control("OpenSales", Option, "Dashboards"));
            ThinkTime(4);
            String CaseView = Element(driver, Control("SelectedView", Option, "Dashboards")).Text;
            if (CaseView == Option)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", Option + " is visible", Option + " is visible");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", Option + " is not visible", Option + " is not visible");
                Assert.Fail("Open IT Sales opportunities is not visible");
            }

        }


        public void VerifyOpportunitySourcedetails(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(8);
            // WaitUntil(driver, Control("Opportunityfields", Option, "Opportunity"), 180);
            ElementHighlight(driver, Control("OpportunityfieldsSaletype", "Generic"));
            int Saletype = Elements(driver, Control("OpportunityfieldsSaletype", "Generic"));

            //ElementHighlight(driver, Control("OpportunityfieldsChannel", "Generic"));
            //int channel = Elements(driver, Control("OpportunityfieldsChannel", "Generic"));

            //ElementHighlight(driver, Control("OpportunityfieldsOwner", "Generic"));
            //int saleowner = Elements(driver, Control("OpportunityfieldsOwner", "Generic"));

            ElementHighlight(driver, Control("OpportunityfieldsEmail", "Generic"));
            int email = Elements(driver, Control("OpportunityfieldsEmail", "Generic"));

            ElementHighlight(driver, Control("OpportunityfieldsDate", "Generic"));
            int createdon = Elements(driver, Control("OpportunityfieldsDate", "Generic"));

            if (Saletype > 0 && email > 0 && createdon > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Opportunity source fields are displayed", " Opportunity source fields are displayed");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Opportunity source fields are not displayed", "Opportunity source fields are not displayed");
                Assert.Fail("Opportunity source fields are not displayed");
            }

        }

        public void VerifyOpportunitydescriptiondetails(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string descriptiontext)
        {

            // WaitUntil(driver, Control("Opportunityfields", Option, "Opportunity"), 180);
            int Description = Elements(driver, Control("Descriptionfields", "Generic"));

            if (Description > 0)
            {
                ElementHighlight(driver, Control("Descriptionfields", "Generic"));
                ThinkTime(3);
                Element(driver, Control("Descriptiontext", "Generic")).Click();
                WaitUntil(driver, Control("Descriptionfields", "Generic"), 60);
                ThinkTime(10);
                Element(driver, Control("Descriptiontext", "Generic")).SendKeys(Keys.Control + "a");
                Element(driver, Control("Descriptiontext", "Generic")).SendKeys(Keys.Delete);
                Element(driver, Control("Descriptiontext", "Generic")).SendKeys(descriptiontext);
                //Element(driver, Control("OpportunityfieldsSaletype", "Generic")).Click();
                //ThinkTime(5);
                if (Elements(driver, Control("Descriptiontext1", "Generic")) > 0)
                {

                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Opportunity Description fields are displayed", " Opportunity Description fields are displayed");

                }

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Opportunity Description fields are not displayed", "Opportunity Description fields are not displayed");
                Assert.Fail("Opportunity Description fields are not displayed");
            }

        }

        public void Verifychannelownerdatefieldsremoved(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            int date = Elements(driver, Control("OpportunityFormField", "Est. Close Date", "Opportunity"));
            int Channel = Elements(driver, Control("ChannelFieldTitle", "Opportunity"));
            int Owner = Elements(driver, Control("SalesQwnerTitle", "Opportunity"));


            if (date > 0 && Channel > 0 && Owner > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Channel, owner and date field is  displayed", "Opportunity detail field verification");
                Assert.Fail("Removed fields are present");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Channe;, owner and source not displayed", "Opportunity detail field verification");


            }
            int Channel1 = Elements(driver, Control("OpportunityFormField", "Channel", "Opportunity"));
            int Owner1 = Elements(driver, Control("OpportunityFormField", "Owner", "Opportunity"));


            WaitUntil(driver, Control("BPFQualifyStage", "Opportunity"), 30);
            MoveToElement(driver, Control("BPFQualifyStage", "Opportunity"));
            ElementHighlight(driver, Control("BPFQualifyStage", "Opportunity"));
            Element(driver, Control("BPFQualifyStage", "Opportunity")).Click();

            if (date > 0 && Channel1 > 0 && Owner1 > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Channel, owner and date field is  displayed", "Opportunity detail field verification");
                Assert.Fail("Removed fields are present");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Channe;, owner and source not displayed", "Opportunity detail field verification");


            }

            WaitUntil(driver, Control("BPFDevelopStage", "Opportunity"), 30);
            MoveToElement(driver, Control("BPFDevelopStage", "Opportunity"));
            ElementHighlight(driver, Control("BPFDevelopStage", "Opportunity"));
            Element(driver, Control("BPFDevelopStage", "Opportunity")).Click();

            if (date > 0 && Channel1 > 0 && Owner1 > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Channel, owner and date field is  displayed", "Opportunity detail field verification");
                Assert.Fail("Removed fields are present");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Channe;, owner and source not displayed", "Opportunity detail field verification");


            }


            WaitUntil(driver, Control("BPFProposeStage", "Opportunity"), 30);
            MoveToElement(driver, Control("BPFProposeStage", "Opportunity"));
            ElementHighlight(driver, Control("BPFProposeStage", "Opportunity"));
            Element(driver, Control("BPFProposeStage", "Opportunity")).Click();
            if (date > 0 && Channel1 > 0 && Owner1 > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Channel, owner and date field is  displayed", "Opportunity detail field verification");
                Assert.Fail("Removed fields are present");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Channe;, owner and source not displayed", "Opportunity detail field verification");


            }

            //Close stage field verification.
            WaitUntil(driver, Control("BPFCloswStage", "Opportunity"), 30);
            MoveToElement(driver, Control("BPFCloswStage", "Opportunity"));
            ElementHighlight(driver, Control("BPFCloswStage", "Opportunity"));

            Element(driver, Control("BPFCloswStage", "Opportunity")).Click();
            if (date > 0 && Channel1 > 0 && Owner1 > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Channel, owner and date field is  displayed", "Opportunity detail field verification");
                Assert.Fail("Removed fields are present");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Channe;, owner and source not displayed", "Opportunity detail field verification");


            }


        }
        public void VerifyOpportunitydetailstab(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            // WaitUntil(driver, Control("Opportunityfields", Option, "Opportunity"), 180);

            ThinkTime(5);
            //Element(driver, Control("detailslabel1", "Generic")).Click();
            //ElementHighlight(driver, Control("detailslabel1", "Generic"));
            int Details1 = Elements(driver, Control("detailslabel1", "Generic"));

            // ElementHighlight(driver, Control("detailslabel2", "Generic"));  
            int Details2 = Elements(driver, Control("detailslabel2", "Generic"));

            // ElementHighlight(driver, Control("detailslabel3", "Generic"));
            int Details3 = Elements(driver, Control("detailslabel3", "Generic"));

            // ElementHighlight(driver, Control("detailslabel4", "Generic"));
            int Details4 = Elements(driver, Control("detailslabel4", "Generic"));
            scrollDownOpportunityEnterprise(driver, testInReport, testName, testDataIteration);

            // ElementHighlight(driver, Control("detailslabel5", "Generic"));
            int Details5 = Elements(driver, Control("detailslabel5", "Generic"));

            // ElementHighlight(driver, Control("detailslabel6", "Generic"));
            int Details6 = Elements(driver, Control("detailslabel6", "Generic"));

            // ElementHighlight(driver, Control("detailslabel7", "Generic"));
            //int Details7 = Elements(driver, Control("detailslabel7", "Generic"));

            // ElementHighlight(driver, Control("detailslabel8",  "Generic"));
            int Details8 = Elements(driver, Control("detailslabel8", "Generic"));

            // ElementHighlight(driver, Control("detailslabel9",  "Generic"));
            int Details9 = Elements(driver, Control("detailslabel9", "Generic"));

            // ElementHighlight(driver, Control("detailslabel10",  "Generic"));
            int Details10 = Elements(driver, Control("detailslabel10", "Generic"));

            if (Details1 > 0 && Details2 > 0 && Details3 > 0 && Details4 > 0 && Details5 > 0 && Details6 > 0 && Details8 > 0 && Details9 > 0 && Details10 > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Opportunity Details fields are displayed", " Opportunity Details fields are displayed");

            }


            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Opportunity Description fields are not displayed", "Opportunity Description fields are not displayed");
                Assert.Fail("Opportunity details fields are not displayed");
            }

        }
















        /// <summary>
        /// Summary description for JiraUpdate 
        /// </summary

        public void IntegrationTest(String json, String token)
        {

            String accesstoken = token.Replace('"', ' ').Trim();
            Console.WriteLine(token);
            // API Initiation
            HttpClient client = new HttpClient();
            client.DefaultRequestHeaders.Accept.Clear();
            client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
            client.DefaultRequestHeaders.Add("Authorization", "Bearer " + accesstoken);


            // API Request
            var httpContent = new StringContent(json, Encoding.UTF8, "application/json");
            var res = client.PostAsync("https://xray.cloud.xpand-it.com/api/v1/import/execution", httpContent);

            // API Result
            try
            {
                res.Result.EnsureSuccessStatusCode();

                // Console.WriteLine("Response " + res.Result.Content.ReadAsStringAsync().Result + Environment.NewLine);

            }

            // Exception Handling
            catch (Exception ex)
            {
                // Console.WriteLine("Error " + res + " Error " + ex.ToString());
            }
            string result = "";
            //  Console.WriteLine("Response: {0}", result);
        }



        /// <summary>
        /// Generating Access token for Jira Update
        /// </summary

        public String AccessTokenGeneration(String json)
        {

            // API Initiation
            HttpClient client = new HttpClient();
            client.DefaultRequestHeaders.Accept.Clear();
            client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
            // Console.WriteLine(json);


            // API Request
            var httpContent = new StringContent(json, Encoding.UTF8, "application/json");
            var res = client.PostAsync("https://xray.cloud.xpand-it.com/api/v1/authenticate", httpContent);


            String token = res.Result.Content.ReadAsStringAsync().Result;
            // API Result
            try
            {
                res.Result.EnsureSuccessStatusCode();

                //  Console.WriteLine("Response " + res.Result.Content.ReadAsStringAsync().Result + Environment.NewLine);

            }

            // Exception Handling
            catch (Exception ex)
            {
                // Console.WriteLine("Error " + res + " Error " + ex.ToString());
            }
            string result = "";
            //Console.WriteLine("Response: {0}", result);
            return token;
        }

        //Function to create and save a view
        public void CreateandSaveView_Filter(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string lookfor, string savedview)
        {
            AdvancedFind(driver, testInReport, testName, testDataIteration);

            driver.SwitchTo().DefaultContent();
            string parentWindowHandle = driver.CurrentWindowHandle;
            WindowHandling(driver);
            driver.Manage().Window.Maximize();
            ThinkTime(3);
            SwitchToFrame(driver, "contentIFrame0");
            Select(Element(driver, Control("AdvanceFindLookUpSelect", "Generic"))).SelectByText(lookfor);
            Element(driver, Control("SavedQuerrySelector", "Generic")).Click();
            ThinkTime(3);
            Select(Element(driver, Control("SavedQuerrySelector", "Generic"))).SelectByText(savedview);
            driver.SwitchTo().DefaultContent();
            ThinkTime(2);
            Element(driver, Control("AdvanceFindSaveAs", "Generic")).Click();
            ThinkTime(2);
            SwitchToFrame(driver, "InlineDialog_Iframe");
            if (Element(driver, Control("Saveviewdialog", "Generic")).Displayed)
            {
                //Enter Name and Description
                string s = System.DateTime.Now.ToString();
                String name = "TestName" + s;
                Element(driver, Control("AdvancedFind_Name", "Generic")).SendKeys(Keys.Control + "a");
                Element(driver, Control("AdvancedFind_Name", "Generic")).SendKeys(Keys.Delete);
                Element(driver, Control("AdvancedFind_Name", "Generic")).SendKeys(name);
                Element(driver, Control("AdvancedFind_Description", "Generic")).SendKeys("Test Description");
                //Hit save button in pop up
                Element(driver, Control("saveBtnOnInlineFrame", "Generic")).Click();
                ThinkTime(5);
                SwitchToFrame(driver, "contentIFrame0");
                Select(Element(driver, Control("SavedQuerrySelector", "Generic"))).SelectByText(name);
                string text = Element(driver, Control("SavedQuerrySelector", "Generic")).Text.ToString();
                if (!text.Contains(name))
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "User is able to save View", "SaveView");
                    Assert.Fail("Incorrect view");
                }

                else
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "able to save View", "SaveView");
                }

            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Save view dialog is not available", "SaveViewDialog");
                Assert.Fail("Save view Dialog is not displayed");
            }

            driver.Close();
            WindowHandling(driver, parentWindowHandle);

        }

        /// <summary>
        /// COUNT THE VIEW
        /// </summary>
        /// <param name="driver"></param>
        /// <param name="testInReport"></param>
        /// <param name="testName"></param>
        /// <param name="testDataIteration"></param>
        public void GscAgentSeeAllRecordCaseDisplyed(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {

            driver.SwitchTo().DefaultContent();
            ThinkTime(2);
            ElementHighlight(driver, Control("SeeAllRecordAssociateBtn", "Case"));
            Element(driver, Control("SeeAllRecordAssociateBtn", "Case")).Click();
            WaitUntil(driver, Control("LabelCount", "Case"), 60);
            ElementHighlight(driver, Control("LabelCount", "Case"));

            string strCount = Element(driver, Control("CaseCount", "Generic")).GetAttribute("data-row-count");
            Console.WriteLine(strCount);
            int p;
            p = Int32.Parse(strCount);
            if (p > 14)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Number of Cases displayed is more than 14", "GSC agent login");

            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "fail", "Number of Cases diplayed is less than 14", "GSC agent login");
                Assert.Fail("Number of Cases displayed is not 14 or more than 14");
            }
            //}
            //else
            //{
            //    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "The user does not have 14 records", "GSC agent login");
            //}
        }


        //Generic Function to select any of the system view from the case list screen

        public void SelectSystemViewFilter(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string Filter)
        {
            driver.SwitchTo().DefaultContent();
            ThinkTime(2);
            SwitchToFrame(driver, "contentIFrame0");

            if (Element(driver, Control("MyActiveCase_LSC", "LSCDashBoard")).Displayed)
            {
                Element(driver, Control("MyActiveCase_LSC", "LSCDashBoard")).Click();
                MoveToElement(driver, Control("MyActive_Value", "LSCDashBoard"));
                Element(driver, Control("MyActive_Value", "LSCDashBoard")).Click();
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "System View is available", "ListofView");

            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "System View is not available", "ListofView");
            }
        }

        public String sendTestCaseJSON(String testExecutionKey, String key, String teststatus, String comment)
        {

            JObject sendObj = new JObject();
            sendObj.Add("testExecutionKey", testExecutionKey);
            JArray testCaseArray = new JArray();
            JObject testCaseObj = new JObject();
            testCaseObj.Add("testKey", key);
            testCaseObj.Add("status", teststatus);
            //  testCaseObj.Add("start", startTime);
            //testCaseObj.Add("finish", endTime);
            testCaseObj.Add("comment", comment);
            testCaseArray.Add(testCaseObj);
            sendObj.Add("tests", testCaseArray);
            // Console.WriteLine(key + "\n" + teststatus + "\n" + startTime + "\n" + endTime + "\n" + comment);
            String output = JsonConvert.SerializeObject(sendObj);
            return output;

        }

        public String accessTokenJSON(String clientid, String password)
        {
            JObject sendObj = new JObject();
            sendObj.Add("client_id", clientid);
            sendObj.Add("client_secret", password);
            Console.WriteLine(clientid + "\n" + password + "\n");
            String output = JsonConvert.SerializeObject(sendObj);
            return output;
        }
        public String GenerateComment(String status)
        {
            String comment;
            if (status == "Failed")
            {
                comment = "The test case is Failed:- Please refer the test report for more details.";
            }
            else
            {
                comment = "Successfully completed test case execution.";
            }
            return comment;

        }

        public String gettingTestkey(String testname)

        {


            string resultString = Regex.Match(testname, @"\d+").Value;
            //Console.WriteLine(resultString);
            string str = "TEST-" + resultString;
            //Console.WriteLine(str);
            return str;


        }

        //For scrolling container's right pane
        public void scrollRight(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string Scroll)
        {
            WaitUntil(driver, Control(Scroll, "GenericOld"), 180);
            IWebElement scroll = Element(driver, Control(Scroll, "GenericOld"));
            MoveToElement(driver, Control(Scroll, "GenericOld"));
            IJavaScriptExecutor js = (IJavaScriptExecutor)driver;
            js.ExecuteScript("arguments[0].scrollLeft = arguments[0].scrollWidth", scroll);
        }


        //Method to scroll right activity page.
        public void scrollRightActivity(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            IWebElement scroll = Element(driver, Control("ScrollRightActivity", "ITSales"));
            //ElementHighlight(driver, Control("ScrollRightActivity", "ITSales"));
            ThinkTime(3);
            IJavaScriptExecutor js = (IJavaScriptExecutor)driver;
            js.ExecuteScript("arguments[0].scrollLeft = arguments[0].scrollWidth", scroll);
        }


        //For scrolling container's left pane
        public void scrollLeft(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string Scroll)
        {
            IWebElement scroll = Element(driver, Control(Scroll, "GenericOld"));
            WaitUntil(driver, Control(Scroll, "GenericOld"), 180);
            MoveToElement(driver, Control(Scroll, "GenericOld"));
            IJavaScriptExecutor js = (IJavaScriptExecutor)driver;
            js.ExecuteScript("arguments[0].scrollLeft=[arguments[0].scrollWidth - arguments[0].scrollRight]", scroll);

        }


        //For scrolling container's left pane
        public void scrollMiddle(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string Scroll)
        {
            WaitUntil(driver, Control(Scroll, "GenericOld"), 180);
            IWebElement scroll = Element(driver, Control(Scroll, "GenericOld"));
            MoveToElement(driver, Control(Scroll, "GenericOld"));
            IJavaScriptExecutor js = (IJavaScriptExecutor)driver;
            js.ExecuteScript("arguments[0].scrollLeft+=900", scroll);
            ThinkTime(5);
        }

        public void scrollRightMiddle(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string Scroll)
        {
            WaitUntil(driver, Control(Scroll, "GenericOld"), 180);
            IWebElement scroll = Element(driver, Control(Scroll, "GenericOld"));
            MoveToElement(driver, Control(Scroll, "GenericOld"));
            IJavaScriptExecutor js = (IJavaScriptExecutor)driver;
            js.ExecuteScript("arguments[0].scrollLeft+=1150", scroll);
        }

        //For scrolling container's left pane
        public void scrollMiddleDashboard(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string Scroll)
        {
            IWebElement scroll = Element(driver, Control("DashboardScroll", "GenericOld"));
            ElementHighlight(driver, Control("DashboardScroll", "GenericOld"));
            IJavaScriptExecutor js = (IJavaScriptExecutor)driver;
            js.ExecuteScript("arguments[0].scrollTop+=350", scroll);
        }


        //For scrolling container's left pane
        public void scrollLeftMiddle(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string Scroll)
        {
            WaitUntil(driver, Control(Scroll, "Generic"), 180);
            IWebElement scroll = Element(driver, Control(Scroll, "Generic"));
            MoveToElement(driver, Control(Scroll, "Generic"));
            IJavaScriptExecutor js = (IJavaScriptExecutor)driver;
            js.ExecuteScript("arguments[0].scrollLeft-=900", scroll);
        }


        //For scrolling the container vertically
        public void scrollVerticalMiddle(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string Scroll)
        {

            IWebElement scroll = Element(driver, Control(Scroll, "Generic"));
            ElementHighlight(driver, Control(Scroll, "Generic"));
            ThinkTime(3);
            IJavaScriptExecutor js = (IJavaScriptExecutor)driver;
            js.ExecuteScript("arguments[0].scrollTop+=550", scroll);

        }

        public void scrollVerticalMiddleafter(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {

            IWebElement scroll = Element(driver, Control("DashboardScroll", "GenericOld"));
            ElementHighlight(driver, Control("DashboardScroll", "GenericOld"));
            ThinkTime(3);
            IJavaScriptExecutor js = (IJavaScriptExecutor)driver;
            js.ExecuteScript("arguments[0].scrollTop+=600", scroll);

        }


        //For scrolling down the container
        public void scrollDown(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {

            IWebElement scroll = Element(driver, Control("DashboardScroll", "GenericOld"));
            ElementHighlight(driver, Control("DashboardScroll", "GenericOld"));
            IJavaScriptExecutor js = (IJavaScriptExecutor)driver;
            js.ExecuteScript("arguments[0].scrollTop=arguments[0].scrollHeight", scroll);

        }

        //For scrolling down the container
        public void ScrolldownTourpage(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {

            ElementHighlight(driver, Control("ScrollTourpage", "GenericOld"));
            IWebElement scroll = Element(driver, Control("ScrollTourpage", "GenericOld"));
            ElementHighlight(driver, Control("ScrollTourpage", "GenericOld"));
            IJavaScriptExecutor js = (IJavaScriptExecutor)driver;
            js.ExecuteScript("arguments[0].scrollTop+=400", scroll);
        }


        //For scrolling down the container
        public void scrollMiddleDown(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(6);
            IWebElement scroll = Element(driver, Control("DashboardScroll", "GenericOld"));
            ElementHighlight(driver, Control("DashboardScroll", "GenericOld"));
            IJavaScriptExecutor js = (IJavaScriptExecutor)driver;
            js.ExecuteScript("arguments[0].scrollTop+=300", scroll);
            //Element(driver, Control("DashboardScroll", "GenericOld")).Click();
            ThinkTime(6);
        }

        //For scrolling down the container
        public void scrollDownUserpage(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(6);
            IWebElement scroll = Element(driver, Control("Scrolldown", "Generic"));
            ElementHighlight(driver, Control("Scrolldown", "Generic"));
            IJavaScriptExecutor js = (IJavaScriptExecutor)driver;
            js.ExecuteScript("arguments[0].scrollTop+=300", scroll);
            //Element(driver, Control("DashboardScroll", "GenericOld")).Click();
            ThinkTime(6);
        }

        //Method to scroll user settings setup page
        public void scrollDownUserpage1(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(6);
            IWebElement scroll = Element(driver, Control("Userscroll", "Generic"));
            ElementHighlight(driver, Control("Userscroll", "Generic"));
            IJavaScriptExecutor js = (IJavaScriptExecutor)driver;
            js.ExecuteScript("arguments[0].scrollTop+=600", scroll);
            //Element(driver, Control("DashboardScroll", "GenericOld")).Click();
            ThinkTime(6);
        }

        //Method to scroll up dashboard.
        public void scrollUpDashboard(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {

            IWebElement scroll = Element(driver, Control("DashboardScroll", "GenericOld"));
            ElementHighlight(driver, Control("DashboardScroll", "GenericOld"));
            IJavaScriptExecutor js = (IJavaScriptExecutor)driver;
            js.ExecuteScript("arguments[0].scrollTop-=100", scroll);

        }
        public void ClickActivitydb(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(3);
            Element(driver, Control("DBActivities", "Dashboards")).Click();
            ThinkTime(3);
            Element(driver, Control("DBActivities", "Dashboards")).Click();
            ThinkTime(3);

        }

        //For scrolling down the container
        public void scrollDownDashboard(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(10);
            IWebElement scroll = Element(driver, Control("DashboardScroll", "GenericOld"));
            ElementHighlight(driver, Control("DashboardScroll", "GenericOld"));
            IJavaScriptExecutor js = (IJavaScriptExecutor)driver;
            js.ExecuteScript("arguments[0].scrollTop+=1000", scroll);
            ThinkTime(6);

        }

        //For scrolling down the container
        public void scrollDownBookTour(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {

            IWebElement scroll = Element(driver, Control("BookATourScrollDown", "Generic"));
            ElementHighlight(driver, Control("BookATourScrollDown", "Generic"));
            IJavaScriptExecutor js = (IJavaScriptExecutor)driver;
            js.ExecuteScript("arguments[0].scrollTop+=750", scroll);

        }

        //Method to Scroll Down Email Page.
        public void scrollDownEmail(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {

            IWebElement scroll = Element(driver, Control("ScrollEmial", "ITSales"));
            ElementHighlight(driver, Control("ScrollEmial", "ITSales"));
            IJavaScriptExecutor js = (IJavaScriptExecutor)driver;
            js.ExecuteScript("arguments[0].scrollTop+=400", scroll);

        }


        //For scrolling down the container in Case Viewing page.
        public void scrollDownCasePage(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {

            IWebElement scroll = Element(driver, Control("CaseScroll", "CaseCreation"));
            ElementHighlight(driver, Control("CaseScroll", "CaseCreation"));
            IJavaScriptExecutor js = (IJavaScriptExecutor)driver;
            js.ExecuteScript("arguments[0].scrollTop+=950", scroll);

        }

        //For scrolling down the container in Opportunity page in IT Sales.
        public void scrollDownOpportunityPage(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ElementHighlight(driver, Control("scrollDownOpportunity", "Opportunity"));
            IWebElement scroll = Element(driver, Control("scrollDownOpportunity", "Opportunity"));
            ElementHighlight(driver, Control("scrollDownOpportunity", "Opportunity"));
            IJavaScriptExecutor js = (IJavaScriptExecutor)driver;
            js.ExecuteScript("arguments[0].scrollTop+=400", scroll);

            // js.ExecuteScript("arguments[0].scrollTop+=990", scroll);

        }



        //For scrolling down the container in Opportunity page in IT Sales.
        public void scrollDownOpportunityPageITSales(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {

            IWebElement scroll = Element(driver, Control("scrollDownOpportunity", "Opportunity"));
            ElementHighlight(driver, Control("scrollDownOpportunity", "Opportunity"));
            IJavaScriptExecutor js = (IJavaScriptExecutor)driver;
            js.ExecuteScript("arguments[0].scrollTop+=370", scroll);

        }

        //For scrolling down the container in Opportunity page in IT Sales.
        public void scrollDownOpportunityPageITSales1(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {

            IWebElement scroll = Element(driver, Control("scrollDownOpportunity", "Opportunity"));
            ElementHighlight(driver, Control("scrollDownOpportunity", "Opportunity"));
            IJavaScriptExecutor js = (IJavaScriptExecutor)driver;
            js.ExecuteScript("arguments[0].scrollTop+=290", scroll);

        }

        //Scroll Down Oppertunity.
        public void scrollDownOpportunity(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {

            IWebElement scroll = Element(driver, Control("scrollDownOpportunity", "Opportunity"));
            ElementHighlight(driver, Control("scrollDownOpportunity", "Opportunity"));
            IJavaScriptExecutor js = (IJavaScriptExecutor)driver;
            js.ExecuteScript("arguments[0].scrollTop+=170", scroll);

        }

        //Scroll down QuickCreateContact
        public void scrollDownQCContact(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {

            IWebElement scroll = Element(driver, Control("QuickCreateContactScroll", "Opportunity"));
            ElementHighlight(driver, Control("QuickCreateContactScroll", "Opportunity"));
            IJavaScriptExecutor js = (IJavaScriptExecutor)driver;
            js.ExecuteScript("arguments[0].scrollTop+=170", scroll);

        }



        //ScrollDownPhoneCall
        //Scroll Down phone call.
        public void scrollDownPhonecall(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {

            IWebElement scroll = Element(driver, Control("ScrollDownPhoneCall", "Opportunity"));
            ElementHighlight(driver, Control("ScrollDownPhoneCall", "Opportunity"));
            IJavaScriptExecutor js = (IJavaScriptExecutor)driver;
            js.ExecuteScript("arguments[0].scrollTop+=350", scroll);

        }


        //Method to Scroll New Contact opportunity.
        public void scrollDownOpportunityNewContact(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {

            IWebElement scroll = Element(driver, Control("ScrollOppNewContact", "Opportunity"));
            ElementHighlight(driver, Control("ScrollOppNewContact", "Opportunity"));
            IJavaScriptExecutor js = (IJavaScriptExecutor)driver;
            js.ExecuteScript("arguments[0].scrollTop+=300", scroll);

        }


        //ScrollDownOpportunityE
        //For scrolling down the container in Opportunity page in IT Sales.
        public void scrollDownOpportunityEnterprise(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(2);
            WaitUntil(driver, Control("scrollDownOpportunity", "Opportunity"), 60);
            IWebElement scroll = Element(driver, Control("scrollDownOpportunity", "Opportunity"));
            ElementHighlight(driver, Control("scrollDownOpportunity", "Opportunity"));
            IJavaScriptExecutor js = (IJavaScriptExecutor)driver;
            js.ExecuteScript("arguments[0].scrollTop+=600", scroll);
            ThinkTime(3);


        }


        //ScrollDownOpportunityE
        //For scrolling down the container in Opportunity page in IT Sales.
        public void scrollDownLeadContact(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(2);
            WaitUntil(driver, Control("ScrollDownOpportunityE", "EnterpriseSales"), 60);
            IWebElement scroll = Element(driver, Control("ScrollDownOpportunityE", "EnterpriseSales"));
            ElementHighlight(driver, Control("ScrollDownOpportunityE", "EnterpriseSales"));
            IJavaScriptExecutor js = (IJavaScriptExecutor)driver;
            js.ExecuteScript("arguments[0].scrollTop+=350", scroll);
            ThinkTime(3);


        }

        //ScrollUpOpportunityE
        //For scrolling up the container in Opportunity page in IT Sales.
        public void scrollUpOpportunityEnterprise(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(2);
            WaitUntil(driver, Control("ScrollDownOpportunityE", "EnterpriseSales"), 60);
            IWebElement scroll = Element(driver, Control("ScrollDownOpportunityE", "EnterpriseSales"));
            ElementHighlight(driver, Control("ScrollDownOpportunityE", "EnterpriseSales"));
            IJavaScriptExecutor js = (IJavaScriptExecutor)driver;
            js.ExecuteScript("arguments[0].scrollTop-=500", scroll);
            ThinkTime(3);


        }



        public void scrollDownOpportunityEnterprise3(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(2);
            WaitUntil(driver, Control("ScrollDownOpportunityE", "EnterpriseSales"), 60);
            IWebElement scroll = Element(driver, Control("ScrollDownOpportunityE", "EnterpriseSales"));
            ElementHighlight(driver, Control("ScrollDownOpportunityE", "EnterpriseSales"));
            IJavaScriptExecutor js = (IJavaScriptExecutor)driver;
            js.ExecuteScript("arguments[0].scrollTop+=1500", scroll);
            ThinkTime(3);


        }
        public void scrollDownOpportunityEnterprise1(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(9);
            IWebElement scroll = Element(driver, Control("ScrollDownOpportunityE", "EnterpriseSales"));
            ElementHighlight(driver, Control("ScrollDownOpportunityE", "EnterpriseSales"));
            IJavaScriptExecutor js = (IJavaScriptExecutor)driver;
            js.ExecuteScript("arguments[0].scrollTop+=350", scroll);

        }
        public void scrollDownOpportunityEnterpriseCust(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string Val)
        {
            ThinkTime(2);
            WaitUntil(driver, Control("ScrollDownOpportunityE", "EnterpriseSales"), 60);
            IWebElement scroll = Element(driver, Control("ScrollDownOpportunityE", "EnterpriseSales"));
            ElementHighlight(driver, Control("ScrollDownOpportunityE", "EnterpriseSales"));
            IJavaScriptExecutor js = (IJavaScriptExecutor)driver;
            js.ExecuteScript("arguments[0].scrollTop+=" + Val, scroll);

        }
        public void scrollDownPhoneCust(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string Val)
        {
            ThinkTime(2);
            WaitUntil(driver, Control("PhoneScroll", "CommonObj"), 60);
            IWebElement scroll = Element(driver, Control("PhoneScroll", "CommonObj"));
            ElementHighlight(driver, Control("PhoneScroll", "CommonObj"));
            IJavaScriptExecutor js = (IJavaScriptExecutor)driver;
            js.ExecuteScript("arguments[0].scrollTop+=" + Val, scroll);

        }
        public void scrollDownContactCust(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string Val)
        {
            ThinkTime(2);
            WaitUntil(driver, Control("ScrollContactpage", "CommonObj"), 60);
            IWebElement scroll = Element(driver, Control("ScrollContactpage", "CommonObj"));
            ElementHighlight(driver, Control("ScrollContactpage", "CommonObj"));
            IJavaScriptExecutor js = (IJavaScriptExecutor)driver;
            js.ExecuteScript("arguments[0].scrollTop+=" + Val, scroll);

        }
        public void scrollDownOpportunityEnterprise2(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(9);
            IWebElement scroll = Element(driver, Control("ScrollDownOpportunityE", "EnterpriseSales"));
            ElementHighlight(driver, Control("ScrollDownOpportunityE", "EnterpriseSales"));
            IJavaScriptExecutor js = (IJavaScriptExecutor)driver;
            js.ExecuteScript("arguments[0].scrollTop+=650", scroll);

        }


        //For scrolling down the container in Opportunity page in IT Sales.
        public void scrollMiddleOpportunityPage(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {

            IWebElement scroll = Element(driver, Control("scrollDownOpportunity", "Opportunity"));
            ElementHighlight(driver, Control("scrollDownOpportunity", "Opportunity"));
            IJavaScriptExecutor js = (IJavaScriptExecutor)driver;
            js.ExecuteScript("arguments[0].scrollTop+=500", scroll);

        }



        //For scrolling down the container in accounts page in IT Sales.
        public void scrollMiddleaccounts(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {

            IWebElement scroll = Element(driver, Control("scrollDownOpportunity", "Opportunity"));
            ElementHighlight(driver, Control("scrollDownOpportunity", "Opportunity"));
            IJavaScriptExecutor js = (IJavaScriptExecutor)driver;
            js.ExecuteScript("arguments[0].scrollTop+=scrollbottom", scroll);

        }


        public void scrollDownaccounts(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {

            IWebElement scroll = Element(driver, Control("scrollDownOpportunity", "Opportunity"));
            ElementHighlight(driver, Control("scrollDownOpportunity", "Opportunity"));
            IJavaScriptExecutor js = (IJavaScriptExecutor)driver;
            js.ExecuteScript("arguments[0].scrollTop+=990", scroll);

        }

        //For scrolling down New contact page IT Service

        public void scrollDownContactPage(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {

            IWebElement scroll = Element(driver, Control("scrollDownOpportunity", "Opportunity"));
            ElementHighlight(driver, Control("scrollDownOpportunity", "Opportunity"));
            IJavaScriptExecutor js = (IJavaScriptExecutor)driver;
            js.ExecuteScript("arguments[0].scrollTop+=900", scroll);

        }

        public void scrollDownContactCustTest(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string Val)
        {
            ThinkTime(2);
            WaitUntil( driver, Control("scrollDownOpportunity", "Opportunity"), 60);
            IWebElement scroll = Element(driver, Control("scrollDownOpportunity", "Opportunity"));

            ElementHighlight(driver, Control("scrollDownOpportunity", "Opportunity"));
            IJavaScriptExecutor js = (IJavaScriptExecutor)driver;
            js.ExecuteScript("arguments[0].scrollTop+=" + Val, scroll);
        }


        public void scrollDownContactPageSales(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {

            IWebElement scroll = Element(driver, Control("scrolldowncontact", "Opportunity"));
            ElementHighlight(driver, Control("scrolldowncontact", "Opportunity"));
            IJavaScriptExecutor js = (IJavaScriptExecutor)driver;
            js.ExecuteScript("arguments[0].scrollTop+=600", scroll);

        }


        //For scrolling down New contact page Enterprise Sales Service

        public void scrollDownContactPageEnterprise(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {

            ElementHighlight(driver, Control("scrollDownOpportunity", "Opportunity"));
            IWebElement scroll = Element(driver, Control("scrollDownOpportunity", "Opportunity"));
            ElementHighlight(driver, Control("scrollDownOpportunity", "Opportunity"));
            IJavaScriptExecutor js = (IJavaScriptExecutor)driver;
            js.ExecuteScript("arguments[0].scrollTop+=600", scroll);


        }

        public void scrollDownLeadPage(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {

            IWebElement scroll = Element(driver, Control("scrollDownOpportunity", "Opportunity"));
            ElementHighlight(driver, Control("scrollDownOpportunity", "Opportunity"));
            IJavaScriptExecutor js = (IJavaScriptExecutor)driver;
            js.ExecuteScript("arguments[0].scrollTop+=850", scroll);

        }

        public void scrollUpMiddle(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {

            IWebElement scroll = Element(driver, Control("scrollDownOpportunity", "Opportunity"));
            ElementHighlight(driver, Control("scrollDownOpportunity", "Opportunity"));
            IJavaScriptExecutor js = (IJavaScriptExecutor)driver;
            js.ExecuteScript("arguments[0].scrollTop-=1000", scroll);

        }



        //For scrolling Up the container.
        public void scrollUpPage(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {

            IWebElement scroll = Element(driver, Control("scrollDownOpportunity", "Opportunity"));
            ElementHighlight(driver, Control("scrollDownOpportunity", "Opportunity"));
            IJavaScriptExecutor js = (IJavaScriptExecutor)driver;
            js.ExecuteScript("arguments[0].scrollTop-=1300", scroll);

        }

        public void scrollUpaccounts(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {

            IWebElement scroll = Element(driver, Control("scrollDownOpportunity", "Opportunity"));
            ElementHighlight(driver, Control("scrollDownOpportunity", "Opportunity"));
            IJavaScriptExecutor js = (IJavaScriptExecutor)driver;
            js.ExecuteScript("arguments[0].scrollTop-=900", scroll);

        }

        public void scrollUpPagedashboard(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {

            IWebElement scroll = Element(driver, Control("Dashscroll", "Dashboards"));
            ElementHighlight(driver, Control("Dashscroll", "Dashboards"));
            IJavaScriptExecutor js = (IJavaScriptExecutor)driver;
            js.ExecuteScript("arguments[0].scrollTop-=1000", scroll);

        }



        //For filter the corresponding status reason


        public void StatusReasonFilter(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string StatusReason)
        {

            driver.SwitchTo().DefaultContent();
            ThinkTime(4);
            WaitUntil(driver, Control("StatusReasonButton", "Generic"), 180);
            MoveToElement(driver, Control("StatusReasonButton", "Generic"));
            ActionsClick(driver, Control("StatusReasonButton", "Generic"));
            WaitUntil(driver, Control("SelectAllCheckBox", "Generic"), 180);
            Element(driver, Control("SelectAllCheckBox", "Generic")).Click();
            ThinkTime(3);
            WaitUntil(driver, Control("SelectingStatusReasonEntity", StatusReason, "Generic"), 180);
            Element(driver, Control("SelectingStatusReasonEntity", StatusReason, "Generic")).Click();
            ThinkTime(2);
            WaitUntil(driver, Control("ApplyButton", "Generic"), 180);
            Element(driver, Control("ApplyButton", "Generic")).Click();
            ThinkTime(2);


        }
        public void LSCAgentAllCaseViewVerification(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string StatusReason)
        {




        }


        //gokul
        //To Verify Category Mandatory Field message
        public void VerifyCategoryErrorMessage(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {

            WaitUntil(driver, Control("categoryselect", "CaseForms"), 240);
            MoveToElement(driver, Control("categoryselect", "CaseForms"));
            ThinkTime(2);
            Element(driver, Control("categoryDelete", "CaseForms")).Click();

            if (Elements(driver, Control("categoryerrormessage", "CaseForms")) == 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Mandatory Field message is not shown", "");
                Assert.Fail("Couldnt find Error message");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Mandatory Field message is shown", "");
            }


        }



        //gokul
        //To Verify SubCategory Mandatory Field message
        public void VerifySubCategoryErrorMessage(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {

            WaitUntil(driver, Control("Subcategoryselect", "CaseForms"), 240);
            MoveToElement(driver, Control("Subcategoryselect", "CaseForms"));
            ThinkTime(2);
            Element(driver, Control("SubcategoryDelete", "CaseForms")).Click();

            if (Elements(driver, Control("SubCategoryerrormessage", "CaseForms")) == 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Mandatory Field message is not shown", "");
                Assert.Fail("Couldnt find Error message");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Mandatory Field message is shown", "");
            }


        }


        //To Verify Assign Date column in Dashboard view.

        public void VerifyAssignDateInDashboard(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {


            ThinkTime(4);
            if (Elements(driver, Control("AssignDate", "Generic")) == 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Assign Column is not dispalyed", "");


            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Assign Column is visible", "");
                Assert.Fail("Assign Column is available");
            }


        }



        //To verify Approval status and Resolve Case
        public void VerifyApprovalStatus(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string ExpectedValue)
        {

            WaitUntil(driver, Control("TerminationApproval", "Generic"), 240);
            string Actualvalue = Element(driver, Control("TerminationApproval", "Generic")).GetAttribute("title");
            if (Actualvalue.Equals(ExpectedValue))
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Status rejected", "");
                HeaderButtonwithoutConfirmation(driver, testInReport, testName, testDataIteration, "Resolve Case");
            }
            else
            {
                WaitUntil(driver, Control("TerminationApproval", "Generic"), 240);
                MoveToElement(driver, Control("TerminationApproval", "Generic"));
                Element(driver, Control("TerminationApproval", "Generic")).Click();
                Element(driver, Control("RejectedOption", "Generic")).Click();
                ThinkTime(4);
                SaveCase(driver, testInReport, testName, testDataIteration);
                HeaderButtonwithoutConfirmation(driver, testInReport, testName, testDataIteration, "Resolve Case");
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Case resolved", "");
            }
        }




        public void SaveCase(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            driver.SwitchTo().DefaultContent();
            WaitUntil(driver, Control("SaveCase", "CaseForms"), 35);
            MoveToElement(driver, Control("SaveCase", "CaseForms"));
            Element(driver, Control("SaveCase", "CaseForms")).Click();
            ThinkTime(2);
            Element(driver, Control("notification", "CaseForms")).Click();
            if (Elements(driver, Control("notificationtext", "CaseForms")) == 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Mandatory Field message is not shown", "");
                Assert.Fail("Couldnt find Error message");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Mandatory Field message is shown", "");
            }
        }



        //For filter the corresponding status reason

        public void UnselectStatusReason(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string StatusReason)
        {
            driver.SwitchTo().DefaultContent();
            scrollRight(driver, testInReport, testName, testDataIteration, "Scroll");
            WaitUntil(driver, Control("StatusReasonButton", "Generic"), 60);
            MoveToElement(driver, Control("StatusReasonButton", "Generic"));
            Element(driver, Control("StatusReasonButton", "Generic")).Click();
            WaitUntil(driver, Control("SelectAllCheckBox", "Generic"), 60);
            ThinkTime(3);
            WaitUntil(driver, Control("UnselectStatusReason", StatusReason, "Generic"), 60);
            Element(driver, Control("UnselectStatusReason", StatusReason, "Generic")).Click();
            WaitUntil(driver, Control("ApplyButton", "Generic"), 60);
            Element(driver, Control("ApplyButton", "Generic")).Click();
            ThinkTime(2);
            scrollLeft(driver, testInReport, testName, testDataIteration, "Scroll");

        }


        //To Filter types of cases

        public void TypesOfCases(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string caseType)
        {
            driver.SwitchTo().DefaultContent();

            ThinkTime(2);
            WaitUntil(driver, Control("SubAreaButton", "Generic"), 60);
            MoveToElement(driver, Control("SubAreaButton", "Generic"));
            Element(driver, Control("SubAreaButton", "Generic")).Click();
            WaitUntil(driver, Control("SelectAllCheckBox", "Generic"), 60);
            Element(driver, Control("SelectAllCheckBox", "Generic")).Click();
            ThinkTime(3);
            WaitUntil(driver, Control("subareaentity", caseType, "Generic"), 60);
            Element(driver, Control("subareaentity", caseType, "Generic")).Click();
            WaitUntil(driver, Control("ApplyButton", "Generic"), 60);
            Element(driver, Control("ApplyButton", "Generic")).Click();


        }



        //filter Business Area Button

        public void SelectBusinessArea(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string caseType)
        {
            driver.SwitchTo().DefaultContent();

            ThinkTime(2);
            WaitUntil(driver, Control("BusinessAreaButton", "Generic"), 60);
            MoveToElement(driver, Control("BusinessAreaButton", "Generic"));
            Element(driver, Control("BusinessAreaButton", "Generic")).Click();
            WaitUntil(driver, Control("SelectAllCheckBox", "Generic"), 60);
            Element(driver, Control("SelectAllCheckBox", "Generic")).Click();
            ThinkTime(3);
            WaitUntil(driver, Control("subareaentity", caseType, "Generic"), 60);
            Element(driver, Control("subareaentity", caseType, "Generic")).Click();
            WaitUntil(driver, Control("ApplyButton", "Generic"), 60);
            Element(driver, Control("ApplyButton", "Generic")).Click();


        }

        public void SelectOpportunities(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string caseType)
        {
            driver.SwitchTo().DefaultContent();

            ThinkTime(2);
            WaitUntil(driver, Control("Opportunities", "Generic"), 60);
            Element(driver, Control("Opportunities", "Generic")).Click();
            ThinkTime(10);
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Opportunities is selected", "Navigate to detailed list page");

        }


        /// <summary> /// <summary>
        /// Gokul
        /// Method for comparing status for Centre user
        /// </summary>
        /// <param name="driver"></param>
        /// <param name="testInReport"></param>
        /// <param name="testName"></param>
        /// <param name="testDataIteration"></param>

        public void StatusComparisonCentre(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string type, string previousStatus, string updatedStatus)
        {
            switch (type)
            {
                case "Different":
                    {
                        if (previousStatus != updatedStatus)
                        {
                            ThinkTime(2);
                            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "The status is changed correctly", "CloseCase Verification succeded");
                        }
                        else


                        {
                            AddLog(driver, testInReport, testName, testDataIteration, "Fail", "The status is not changed correctly", "StatusVerification Failed");
                            Assert.Fail();
                        }
                    }
                    break;

                default:
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Unidentified operation on pop-up", "Unexpected error");
                    break;
            }
        }





        //Filter using specific sub-category

        public void VerifySubCategory(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string selection, string text)

        {
            WaitUntil(driver, Control("Sub_category", "Generic"), 180);
            MoveToElement(driver, Control("Sub_category", "Generic"));
            WaitUntil(driver, Control("SubCatagoryButton", "Generic"), 180);
            ElementHighlight(driver, Control("SubCatagoryButton", "Generic"));
            ActionsClick(driver, Control("SubCatagoryButton", "Generic"));
            WaitUntil(driver, Control("Subcategorydropdown", "Generic"), 180);
            Element(driver, Control("Subcategorydropdown", "Generic")).Click();
            WaitUntil(driver, Control("Selectoption", selection, "Generic"), 60);
            Element(driver, Control("Selectoption", selection, "Generic")).Click();

            WaitUntil(driver, Control("ConditionValueField", "Generic"), 180);
            Element(driver, Control("ConditionValueField", "Generic")).Click();
            Element(driver, Control("ConditionValueField", "Generic")).SendKeys(text);
            WaitUntil(driver, Control("ApplyButtonContains", "Generic"), 180);
            Element(driver, Control("ApplyButtonContains", "Generic")).Click();
            ThinkTime(2);


        }

        public void VerifyAssignedUser(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string selection, string text)

        {
            WaitUntil(driver, Control("AssignedUser_1", "Generic"), 180);
            MoveToElement(driver, Control("AssignedUser_1", "Generic"));
            WaitUntil(driver, Control("AssignedUserButton_1", "Generic"), 180);
            ElementHighlight(driver, Control("AssignedUserButton_1", "Generic"));
            ActionsClick(driver, Control("AssignedUserButton_1", "Generic"));
            WaitUntil(driver, Control("Subcategorydropdown", "Generic"), 180);
            Element(driver, Control("Subcategorydropdown", "Generic")).Click();
            WaitUntil(driver, Control("Selectoption", selection, "Generic"), 60);
            Element(driver, Control("Selectoption", selection, "Generic")).Click();

            WaitUntil(driver, Control("ConditionValueField", "Generic"), 180);
            Element(driver, Control("ConditionValueField", "Generic")).Click();
            Element(driver, Control("ConditionValueField", "Generic")).SendKeys(text);
            WaitUntil(driver, Control("ApplyButtonContains", "Generic"), 180);
            Element(driver, Control("ApplyButtonContains", "Generic")).Click();
            ThinkTime(2);
        }

        public void VerifyAssignedTeam(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string selection, string text)

        {
            WaitUntil(driver, Control("AssignedTeam_1", "Generic"), 180);
            MoveToElement(driver, Control("AssignedTeam_1", "Generic"));
            WaitUntil(driver, Control("AssignedTeamButton_1", "Generic"), 180);
            ElementHighlight(driver, Control("AssignedTeamButton_1", "Generic"));
            ActionsClick(driver, Control("AssignedTeamButton_1", "Generic"));
            WaitUntil(driver, Control("Subcategorydropdown", "Generic"), 180);
            Element(driver, Control("Subcategorydropdown", "Generic")).Click();
            WaitUntil(driver, Control("Selectoption", selection, "Generic"), 60);
            Element(driver, Control("Selectoption", selection, "Generic")).Click();

            WaitUntil(driver, Control("ConditionValueField", "Generic"), 180);
            Element(driver, Control("ConditionValueField", "Generic")).Click();
            Element(driver, Control("ConditionValueField", "Generic")).SendKeys(text);
            WaitUntil(driver, Control("ApplyButtonContains", "Generic"), 180);
            Element(driver, Control("ApplyButtonContains", "Generic")).Click();
            ThinkTime(2);
        }

        //Search and verify activity in associated activity view.
        public void SearchActivityRecord(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string Subject)
        {
            ThinkTime(3);

            WaitUntil(driver, Control("SearchActivityRecordInput", "Opportunity"), 180);
            Element(driver, Control("SearchActivityRecordInput", "Opportunity")).Click();
            Element(driver, Control("SearchActivityRecordInput", "Opportunity")).SendKeys(Subject);

            WaitUntil(driver, Control("SearchActivityRecordButton", "Opportunity"), 180);
            Element(driver, Control("SearchActivityRecordButton", "Opportunity")).Click();

        }

        //Verify Activity owner.
        public void VerifyActivityOwner(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string Owner)
        {
            ThinkTime(3);
            string GetOwner = Element(driver, Control("SearchActivityRecordButton", "Opportunity")).GetAttribute("outerText");

            if (Owner == GetOwner)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Assigned owner verified", "Verify Owner");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Assigned owner verification failed", "Verify Owner");
                Assert.Fail("Owner Verificarion failed");
            }

            WaitUntil(driver, Control("CloseSearchResult", "Opportunity"), 180);
            Element(driver, Control("CloseSearchResult", "Opportunity")).Click();
        }

        //Method to Open activities record.
        public void OpenActivityAssociatedView(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(3);

            WaitUntil(driver, Control("OpenActivity", "Opportunity"), 180);
            Element(driver, Control("OpenActivity", "Opportunity")).Click();

        }

        //Navigate to Activities associated view.
        public void NavigateActivitiesAssociatedView(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(3);

            WaitUntil(driver, Control("OverflowButtonActivities", "Opportunity"), 180);
            Element(driver, Control("OverflowButtonActivities", "Opportunity")).Click();

            WaitUntil(driver, Control("SelectActivitiesAssociatedview", "Opportunity"), 180);
            Element(driver, Control("SelectActivitiesAssociatedview", "Opportunity")).Click();

        }

        //Method to verify assigned owner.
        public void VerifyAssignedTeam(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string Owner)
        {
            ThinkTime(3);

            WaitUntil(driver, Control("VerifyAssignedLeadMoreButton", "Opportunity"), 180);
            Element(driver, Control("VerifyAssignedLeadMoreButton", "Opportunity")).Click();

            string GetOwner = Element(driver, Control("VerifyAssignedOwner", "Opportunity")).GetAttribute("innerText");

            if (Owner == GetOwner)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Assigned owner verified", "Verify Owner");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Assigned owner verification failed", "Verify Owner");
                Assert.Fail("Owner Verificarion failed");
            }

        }

        //Method to Verify Assigned user is not updated.
        public void VerifyAssignedTeamNotUpdated(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string Owner)
        {
            ThinkTime(3);

            WaitUntil(driver, Control("VerifyAssignedLeadMoreButton", "Opportunity"), 180);
            Element(driver, Control("VerifyAssignedLeadMoreButton", "Opportunity")).Click();

            string GetOwner = Element(driver, Control("VerifyAssignedOwner", "Opportunity")).GetAttribute("innerText");

            if (Owner != GetOwner)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Assigned owner verified", "Verify Owner");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Assigned owner verification failed", "Verify Owner");
                Assert.Fail("Owner Verificarion failed");
            }

        }



        //Method to verifyAssign permission error.
        public void VerifyAssignedPermissionError(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(3);

            if (Elements(driver, Control("VerifyAssignedOwnerError", "Opportunity")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Permission Error message is shown", "");
                WaitUntil(driver, Control("VerifyAssignedOwnerErrorOKButton", "Opportunity"), 180);
                Element(driver, Control("VerifyAssignedOwnerErrorOKButton", "Opportunity")).Click();

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Permission Error message is not shown", "");
                Assert.Fail("Couldnt find Error message");
            }
        }




        public void SandBoxButtons(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string Button)
        {
            Element(driver, Control("AdvancedFilter", Button, "Generic")).Click();



        }

        /// <summary>
        /// Return web element using By control properties
        /// </summary>
        /// <param name="driver"></param>
        /// <param name="object1"></param>
        /// <returns></returns>
        public int Elements(IWebDriver driver, By by)
        {

            int elements = driver.FindElements(by).Count;
            return elements;
        }


        public bool FindElements(IWebDriver driver, By by, ExtentTest testInReport, string testName, string testDataIteration, string casedetails)
        {

            IList<IWebElement> obj = driver.FindElements(by);

            for (int i = 0; i < obj.Count; i++)
            {
                if (obj[i].Text.Contains(casedetails))
                {


                    Flag = true;

                }

                else
                {
                    i++;

                }


            }
            return Flag;

        }


        //Verify the case fields in LSC
        public void VerifyLSCCaseFields(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string casenumber)
        {
            // Resolvein
            //Verify case number field is in particular format



            if (Regex.IsMatch(Element(driver, Control("CaseReference", casenumber, "Generic")).Text, @"([A-Z]{1}\-[0-9]{5}\-[A-Z0-9]{4})"))
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Case reference is in proper format", "CaseReference");
            }

            else
            {
                Console.WriteLine(Element(driver, Control("CaseReference", casenumber, "Generic")).Text);
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Case reference is not in proper format", "CaseReference");
                Assert.Fail("Case Reference is not in proper format");
            }

            IJavaScriptExecutor js = (IJavaScriptExecutor)driver;
            js.ExecuteScript("arguments[0].scrollIntoView(true);", Element(driver, Control("ServiceLevel", "Generic")));

            //Verify SLA Expires is in date format
            WaitUntil(driver, Control("SLAExpires", "Generic"), 30);
            string date = Element(driver, Control("SLAExpires", "Generic")).GetAttribute("value");
            DateTime dt;
            if (DateTime.TryParseExact(date, "M/dd/yyyy", CultureInfo.InvariantCulture, DateTimeStyles.None, out dt))
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Appropriate Date format", "DateFormat");

            }
            else if (DateTime.TryParseExact(date, "MM/dd/yyyy", CultureInfo.InvariantCulture, DateTimeStyles.None, out dt))
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Appropriate Date format", "DateFormat");
                Console.WriteLine("Valid date");
            }

            else if (DateTime.TryParseExact(date, "M/d/yyyy", CultureInfo.InvariantCulture, DateTimeStyles.None, out dt))
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Appropriate Date format", "DateFormat");
                Console.WriteLine("Valid date");
            }

            else if (DateTime.TryParseExact(date, "MM/d/yyyy", CultureInfo.InvariantCulture, DateTimeStyles.None, out dt))
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Appropriate Date format", "DateFormat");
                Console.WriteLine("Valid date");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "InAppropriate Date format", "DateFormat");
                Console.WriteLine("InValid date");
                Assert.Fail("Invalid Date");
            }

            js.ExecuteScript("arguments[0].scrollIntoView(true);", Element(driver, Control("CategoryAsterisk", "Generic")));

            //Verify category field
            if (!Element(driver, Control("CategoryAsterisk", "Generic")).Displayed)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Category field is not marked as Mandatory", "CategoryField");
                Assert.Fail("Category field is not marked as mandatory");
            }

            else

            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Category field is marked as mandatory", "CategoryField");
            }


            MoveToElement(driver, Control("SubCategoryAsterisk", "Generic"));

            //Verify sub category field
            if (!Element(driver, Control("SubCategoryAsterisk", "Generic")).Displayed)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Category field is not marked as Mandatory", "SubCategoryField");
                Assert.Fail("Sub Category field is not marked as mandatory");
            }

            else

            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Sub Category field is marked as mandatory", "SubCategoryField");
            }

            //Created Date 
            if (!Element(driver, Control("LockedCreatedDate", "Generic")).Displayed)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Date Field is editable", "CreatedDateField");
                Assert.Fail("Date Field is editable");
            }

            else
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Date field is read only", "CreatedDateField");
            }


            //Verify status reason is not editable
            Element(driver, Control("HeaderFieldExpand", "Generic")).Click();

            WaitUntil(driver, Control("LockStatusReason", "Generic"), 180);
            if (Element(driver, Control("LockStatusReason", "Generic")).Displayed)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Status Reason is Read only", "StatusReason");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Status Reason is not Read only", "StatusReason");
                Assert.Fail("Status Reason is not read only");
            }


            //Verify Centre name is a mandatory field
            js.ExecuteScript("arguments[0].scrollIntoView(true);", Element(driver, Control("CentreName", "Generic")));
            if (!Element(driver, Control("CentreName", "Generic")).Displayed)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Centre Name is not a mandatory field", "CentreName");
                Assert.Fail("Centre Name is not Mandatory");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Centre Name is a Mandatory field", "CentreName");

            }

            //Country name is read only
            js.ExecuteScript("arguments[0].scrollIntoView(true);", Element(driver, Control("LockCountryName", "Generic")));
            if (Element(driver, Control("LockCountryName", "Generic")).Displayed)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Country Name is read only", "CountryName");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Country Name is not read only", "CountryName");
                Assert.Fail("Country Name is not read only");
            }

            //Company ID and Company name
            js.ExecuteScript("arguments[0].scrollIntoView(true);", Element(driver, Control("LockCompanyId", "Generic")));
            if (Element(driver, Control("LockCompanyId", "Generic")).Displayed)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Company ID is read only", "CompanyID");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Company ID is not read only", "CompanyID");
                Assert.Fail("Company ID is not read only");
            }

            //Company name is mandatory
            js.ExecuteScript("arguments[0].scrollIntoView(true);", Element(driver, Control("CompanyNameAsterisk", "Generic")));
            if (!Element(driver, Control("CompanyNameAsterisk", "Generic")).Displayed)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Company name is not mandatory", "CompanyName");
                Assert.Fail("Company name is not mandatory");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Company name is  mandatory", "CompanyName");
            }


            //Contact is mandatory
            js.ExecuteScript("arguments[0].scrollIntoView(true);", Element(driver, Control("ContactAsterisk", "Generic")));
            if (!Element(driver, Control("ContactAsterisk", "Generic")).Displayed)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Contact is not mandatory", "Contact");
                Assert.Fail("Company name is not mandatory");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Contact  is  mandatory", "Contact");
            }

            //Verify assigned user read only
            Element(driver, Control("HeaderFieldExpand", "Generic")).Click();
            WaitUntil(driver, Control("LockedAssignedUser", "Generic"), 180);
            if (Element(driver, Control("LockedAssignedUser", "Generic")).Displayed)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Assigned user is read only", "AssignedUser");


            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Assigned user is not read only", "AssignedUser");
                Assert.Fail("Assigned user is not  read only");
            }


            //priority
            js.ExecuteScript("arguments[0].scrollIntoView(true);", Element(driver, Control("Priority", "Generic")));
            if (!Element(driver, Control("Priority", "Generic")).Enabled)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Priority is not ediatble", "Priority");
                Assert.Fail("Priority is not editable");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Priority  is  editable", "Priority");
            }

            //Initial Description

            js.ExecuteScript("arguments[0].scrollIntoView(true);", Element(driver, Control("InitialDescription", "Generic")));
            if (!Element(driver, Control("InitialDescription", "Generic")).Enabled)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Initial Description is not ediatble", "InitialDescription");
                Assert.Fail("Description is not editable");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Initial Description  is  editable", "InitialDescription");
            }

            //Verify summary
            js.ExecuteScript("arguments[0].scrollIntoView(true);", Element(driver, Control("SummaryTab", "Generic")));
            if (!Element(driver, Control("SummaryTab", "Generic")).Displayed)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "summary tab is not displayed", "SummaryTab");
                Assert.Fail("SummaryTab is not displayed");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Summary Tab is displayed", "SummaryTab");
            }


        }


        public void VerifyingOldValueAndNewValue(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string NewValue)
        {

            driver.SwitchTo().DefaultContent();
            ThinkTime(4);
            SwitchToFrame(driver, "audit_iframe");

            WaitUntil(driver, Control("TableNewValue", "Generic"), 60);
            string CurrentValue = Element(driver, Control("TableNewValue", "Generic")).Text.ToString();

            if (CurrentValue == NewValue)
            {
                ThinkTime(1);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "new value is upadated Audit history", "Compare Old value & New Value");
            }
            else
            {
                ThinkTime(1);
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "new value is not upadated Audit history", "Compare Old value & New Value");
                Assert.Fail("verify Audit History");
            }

        }



        //To Filter types of cases based on Business areas


        public void TypesOfAreas(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string BusinessArea)
        {
            driver.SwitchTo().DefaultContent();

            ThinkTime(2);
            //scrollRight(driver, testInReport, testName, testDataIteration, "Scroll");
            WaitUntil(driver, Control("BusinessArea", "Generic"), 60);
            MoveToElement(driver, Control("BusinessArea", "Generic"));
            Element(driver, Control("BusinessArea", "Generic")).Click();
            WaitUntil(driver, Control("SelectAllCheckBox", "Generic"), 60);
            Element(driver, Control("SelectAllCheckBox", "Generic")).Click();
            ThinkTime(3);
            WaitUntil(driver, Control("subareaentity", BusinessArea, "Generic"), 60);
            Element(driver, Control("subareaentity", BusinessArea, "Generic")).Click();
            WaitUntil(driver, Control("ApplyButton", "Generic"), 60);
            Element(driver, Control("ApplyButton", "Generic")).Click();
            //scrollLeft(driver, testInReport, testName, testDataIteration, "Scroll");

        }


        public void HidingPureCloud(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(20);
            WaitUntil(driver, Control("PureCloud", "Generic"), 60);
            if (Elements(driver, Control("PureCloudButton", "Generic")) > 0)
            {
                MoveToElement(driver, Control("PureCloudButton", "Generic"));
                Element(driver, Control("PureCloudButton", "Generic")).Click();
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Purecloud button clicked correctly", " Hidden Purecloud");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Purecloud is not showing in the application", " ");
                Assert.Fail("Missing Purecloud application");
            }

        }
        public void verifyCSTo(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            if (Elements(driver, Control("VerifyCSTo", "CommonObj")) == 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Button not present", " Button not present");
            }
            else
            {
                Assert.Fail("Button is available ");
            }
        }





        public void HidingPureCloud1(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(20);

            if (Elements(driver, Control("PureCloudButton", "Generic")) > 0)
            {
                MoveToElement(driver, Control("PureCloudButton", "Generic"));
                Element(driver, Control("PureCloudButton", "Generic")).Click();
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Purecloud button clicked correctly", " Hidden Purecloud");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Purecloud is not showing in the application", " ");

            }

        }

        //Login of PureCloud
        public void LoginPurecloud(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, String UserName, String Pass)
        {


            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            string parentWindowHandle = driver.CurrentWindowHandle;
            WindowHandling(driver);
            ThinkTime(1);

            SwitchToFrame(driver, "SidePanelIFrame");
            ThinkTime(1);
            SwitchToFrameElement(driver, By.XPath("//iframe[@title='InteractionSync for PureCloud']"));
            ThinkTime(2);
            SwitchToFrameElement(driver, By.XPath("//iframe[@id='isynccif']"));
            ThinkTime(1);


            //  WaitUntil(driver, Control("PureCloud", "Generic"), 60);
            ThinkTime(3);
            if (Elements(driver, Control("PureCloudCredPreUser", "Generic")) > 0)
            {

                MoveToElement(driver, Control("PureCloudCredPreUser", "Generic"));
                Element(driver, Control("PureCloudCredPreUser", "Generic")).Click();
                Element(driver, Control("PureCloudCredPreUser", "Generic")).SendKeys(UserName);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Purecloud username entered successfully", "Purecloud username entered successfully");

                MoveToElement(driver, Control("PureCloudCredPrePass", "Generic"));
                Element(driver, Control("PureCloudCredPrePass", "Generic")).Click();
                Element(driver, Control("PureCloudCredPrePass", "Generic")).SendKeys(Pass);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Purecloud Password entered successfully", "Purecloud Password entered successfully");
                ThinkTime(2);
                Element(driver, Control("PureCloudCredPrePass", "Generic")).SendKeys(Keys.Enter);
                ThinkTime(2);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Purecloud login clicked successfully", "Purecloud login clicked successfully");

            }
            string parentWindowHandle1 = driver.CurrentWindowHandle;
            WindowHandling(driver);
            ThinkTime(1);
            //driver.Manage().Window.Maximize();
            //ThinkTime(1);
            driver.SwitchTo().DefaultContent();

            //else
            //{
            //    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Purecloud is not showing in the application", " ");
            //    Assert.Fail("Missing Purecloud application");
            //}

        }
        public void LogoutPurecloud(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {

            //WindowHandling(driver);
            // WindowHandling(driver);
            ThinkTime(15);
            WaitUntil(driver, Control("SidePanelFrame", "CommonObj"), 60);
            SwitchToFrame(driver, "SidePanelIFrame");
            ThinkTime(2);
            WaitUntil(driver, Control("PurecloudIframe", "CommonObj"), 60);
            SwitchToFrameElement(driver, By.XPath("//iframe[@title='InteractionSync for PureCloud']"));
            ThinkTime(2);
            WaitUntil(driver, Control("isynccifframe", "CommonObj"), 60);
            SwitchToFrameElement(driver, By.XPath("//iframe[@id='isynccif']"));


            //if (Elements(driver, Control("cloudcalldisconnect", "Contacts")) > 0)
            //{
            //    WaitUntil(driver, Control("LogoutRibbon", "Contacts"), 60);
            //    MoveToElement(driver, Control("LogoutRibbon", "Contacts"));
            //    Element(driver, Control("LogoutRibbon", "Contacts")).Click();
            //    ThinkTime(2);
            //    WaitUntil(driver, Control("LogoutButtonCloud", "Contacts"), 60);
            //    MoveToElement(driver, Control("LogoutButtonCloud", "Contacts"));
            //    Element(driver, Control("LogoutButtonCloud", "Contacts")).Click();
            //}
            ThinkTime(3);
            WaitUntil(driver, Control("PureCloudHome", "Generic"), 60);
            MoveToElement(driver, Control("PureCloudHome", "Generic"));
            Element(driver, Control("PureCloudHome", "Generic")).Click();
            ThinkTime(3);
            WaitUntil(driver, Control("PureCloudMore", "Generic"), 60);
            MoveToElement(driver, Control("PureCloudMore", "Generic"));
            Element(driver, Control("PureCloudMore", "Generic")).Click();
            ThinkTime(3);
            WaitUntil(driver, Control("PureCloudSettings", "Generic"), 60);
            MoveToElement(driver, Control("PureCloudSettings", "Generic"));
            Element(driver, Control("PureCloudSettings", "Generic")).Click();
            ThinkTime(3);
            WaitUntil(driver, Control("PureCloudWebRtc", "Generic"), 60);
            MoveToElement(driver, Control("PureCloudWebRtc", "Generic"));
            Element(driver, Control("PureCloudWebRtc", "Generic")).Click();
            ThinkTime(5);
            WaitUntil(driver, Control("PureCloudCheckbox", "Generic"), 60);

            Element(driver, Control("PureCloudCheckbox", "Generic")).Click();




            ThinkTime(1);

            string parentWindowHandle1 = driver.CurrentWindowHandle;
            WindowHandling(driver);
            ThinkTime(1);
            //driver.Manage().Window.Maximize();
            //ThinkTime(1);
            driver.SwitchTo().DefaultContent();

            //else
            //{
            //    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Purecloud is not showing in the application", " ");
            //    Assert.Fail("Missing Purecloud application");
            //}

        }



        //Hide the purecloud
        public void HidingPureCloudNew(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(8);
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            string parentWindowHandle = driver.CurrentWindowHandle;
            try
            {
                LogoutPurecloud(driver, testInReport, testName, testDataIteration);
            }
            catch (Exception e)
            {
                string parentWindowHandle1 = driver.CurrentWindowHandle;
                WindowHandling(driver);
                ThinkTime(1);
                //driver.Manage().Window.Maximize();
                //ThinkTime(1);
                driver.SwitchTo().DefaultContent();
            }
            ThinkTime(3);
            if (Elements(driver, Control("PureCloudButtonNew", "Generic")) > 0)
            {
                MoveToElement(driver, Control("PureCloudButtonNew", "Generic"));
                if (Elements(driver, Control("ScriptDialg", "Opportunity")) > 0)
                {
                    Element(driver, Control("HandleScriptError", "Opportunity")).Click();
                    ThinkTime(3);
                }
                else
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "No Script error present", "No Script error present");
                }

                Element(driver, Control("PureCloudButtonNew", "Generic")).Click();
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Purecloud button clicked correctly", " Hidden Purecloud");
            }

            //else
            //{
            //    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Purecloud is not showing in the application", " ");
            //    Assert.Fail("Missing Purecloud application");
            //}

        }


        //Hide the purecloud
        public void HidingPureCloudNew1(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);


            WaitUntil(driver, Control("PureCloudButtonNew", "Generic"), 360);
            ThinkTime(3);
            if (Elements(driver, Control("PureCloudButtonNew", "Generic")) > 0)
            {
                MoveToElement(driver, Control("PureCloudButtonNew", "Generic"));
                if (Elements(driver, Control("ScriptDialg", "Opportunity")) > 0)
                {
                    Element(driver, Control("HandleScriptError", "Opportunity")).Click();
                    ThinkTime(3);
                }
                else
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "No Script error present", "No Script error present");
                }

                Element(driver, Control("PureCloudButtonNew", "Generic")).Click();
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Purecloud button clicked correctly", " Hidden Purecloud");
            }

            //else
            //{
            //    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Purecloud is not showing in the application", " ");
            //    Assert.Fail("Missing Purecloud application");
            //}

        }

        //Move to Change Area like CS Admin, Customer Service
        public void MoveToChangeArea(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string area)
        {

            WaitUntil(driver, Control("AreaSwitcher", "Generic"), 180);
            Element(driver, Control("AreaSwitcher", "Generic")).Click();
            WaitUntil(driver, Control("ChangeArea", area, "Generic"), 180);
            Element(driver, Control("ChangeArea", area, "Generic")).Click();
            ThinkTime(3);
        }

        /// <summary>
        /// Navigate to settings 
        /// </summary>
        /// <param name="driver"></param>
        /// <param name="testInReport"></param>
        /// <param name="testName"></param>
        /// <param name="testDataIteration"></param>

        public void NavigateTosettings(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(3);
            WaitUntil(driver, Control("AreaSwitcher", "GenericOld"), 180);
            Element(driver, Control("AreaSwitcher", "GenericOld")).Click();
            WaitUntil(driver, Control("Settings", "Generic"), 180);
            Element(driver, Control("Settings", "Generic")).Click();
            ThinkTime(3);



        }

        public void ScrollToElement(IWebDriver driver, By by)
        {
            var elem = Element(driver, by);
            IJavaScriptExecutor js = (IJavaScriptExecutor)driver;
            js.ExecuteScript("arguments[0].scrollIntoView(true);", elem);



        }


        public void usersetupadmin(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string lookUpEntity)
        {

            ThinkTime(3);
            MoveToElement(driver, Control("FirstUser", "Generic"));
            ActionsDoubleClick(driver, Control("FirstUser", "Generic"));
            ThinkTime(10);
            ElementHighlight(driver, Control("UserSetup", "Generic"));
            WaitUntil(driver, Control("UserSetup", "Generic"), 180);
            MoveToElement(driver, Control("UserSetup", "Generic"));
            Element(driver, Control("UserSetup", "Generic")).Click();
            ThinkTime(2);

            // scrollDownUserpage(driver, testInReport, testName, testDataIteration);
            scrollDownUserpage1(driver, testInReport, testName, testDataIteration);


            WaitUntil(driver, Control("saleshub", "Generic"), 180);
            MoveToElement(driver, Control("saleshub", "Generic"));
            Select(Element(driver, Control("saleshub", "Generic"))).SelectByText(lookUpEntity);

            ScrollToElement(driver, Control("saleshub", "Generic"));
            ThinkTime(2);
            ///language
            /// scrollDownUserpage(driver, testInReport, testName, testDataIteration);
            ElementHighlight(driver, Control("Morecommandlanguage", "Generic"));
            MoveToElement(driver, Control("Morecommandlanguage", "Generic"));
            Element(driver, Control("Morecommandlanguage", "Generic")).Click();

            ThinkTime(2); Element(driver, Control("Addnewitem", "Generic")).Click();
            ThinkTime(5);


            if (Elements(driver, Control("VerifyaddbuttoninUserpage", "Generic")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "New Record add permission", "New Record add permission");
                Element(driver, Control("Closebutton", "Generic")).Click();
                ThinkTime(3);
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "New Record add permission", "New Record add permission");


            }
            //WaitUntil(driver, Control("inputrecord", "Generic"), 180);
            //MoveToElement(driver, Control("inputrecord", "Generic"));
            //Element(driver, Control("inputrecord", "Generic")).SendKeys("UK English");
            //WaitUntil(driver, Control("Selectrecord", "Generic"), 180);

            //MoveToElement(driver, Control("Selectrecord", "Generic"));
            //Element(driver, Control("Selectrecord", "UK English", "Generic")).Click();

            //MoveToElement(driver, Control("addrecord", "Generic"));
            //Element(driver, Control("addrecord", "Generic")).Click();
            ///skill by product

            WaitUntil(driver, Control("Moreskillproduct", "Generic"), 180);
            MoveToElement(driver, Control("Moreskillproduct", "Generic"));
            Element(driver, Control("Moreskillproduct", "Generic")).Click();
            ThinkTime(2); Element(driver, Control("Addnewitem", "Generic")).Click();
            ThinkTime(5);

            if (Elements(driver, Control("VerifyaddbuttoninUserpage", "Generic")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "New Record add permission", "New Record add permission");
                Element(driver, Control("Closebutton", "Generic")).Click();
                ThinkTime(3);
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "New Record add permission", "New Record add permission");


            }
            //WaitUntil(driver, Control("inputrecord", "Generic"), 180);
            //MoveToElement(driver, Control("inputrecord", "Generic"));
            //Element(driver, Control("inputrecord", "Generic")).SendKeys("Day Office");
            //WaitUntil(driver, Control("Selectrecord", "Generic"), 180);

            //MoveToElement(driver, Control("Selectrecord", "Generic"));
            //Element(driver, Control("Selectrecord", "Day Office", "Generic")).Click();

            //MoveToElement(driver, Control("addrecord", "Generic"));
            //Element(driver, Control("addrecord", "Generic")).Click();

            ////skill by brand
            scrollDownUserpage(driver, testInReport, testName, testDataIteration);

            ThinkTime(2);
            WaitUntil(driver, Control("Moreskillbrand", "Generic"), 180);
            MoveToElement(driver, Control("Moreskillbrand", "Generic"));
            Element(driver, Control("Moreskillbrand", "Generic")).Click();
            ThinkTime(2); Element(driver, Control("Addnewitem", "Generic")).Click();
            ThinkTime(3);
            if (Elements(driver, Control("VerifyaddbuttoninUserpage", "Generic")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "New Record add permission", "New Record add permission");
                Element(driver, Control("Closebutton", "Generic")).Click();
                ThinkTime(3);
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "New Record add permission", "New Record add permission");


            }
            //WaitUntil(driver, Control("inputrecord", "Generic"), 180);
            //MoveToElement(driver, Control("inputrecord", "Generic"));
            //Element(driver, Control("inputrecord", "Generic")).SendKeys("CAM");
            //WaitUntil(driver, Control("Selectrecord", "Generic"), 180);

            //MoveToElement(driver, Control("Selectrecord", "Generic"));
            //Element(driver, Control("Selectrecord", "CAM", "Generic")).Click();

            //MoveToElement(driver, Control("addrecord", "Generic"));
            //Element(driver, Control("addrecord", "Generic")).Click();

            //Element(driver, Control("Savebutton", "Generic")).Click();

        }












        public void DBVerification(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            int header1 = Elements(driver, Control("DBTourheader1", "Dashboards"));
            int header2 = Elements(driver, Control("DBTourheader2", "Dashboards"));
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "DB Header present", "DB Headers");

            scrollMiddleDown(driver, testInReport, testName, testDataIteration);

            int header3 = Elements(driver, Control("DBTourheader3", "Dashboards"));
            int header4 = Elements(driver, Control("DBTourheader4", "Dashboards"));
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "DB Header present", "DB Headers");

            scrollMiddleDown(driver, testInReport, testName, testDataIteration);

            int header5 = Elements(driver, Control("DBTourheader5", "Dashboards"));
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "DB Header present", "DB Headers");

            if (header1 > 0 && header2 > 0 && header3 > 0 && header4 > 0 && header5 > 0)
            {
                ThinkTime(2);
                scrollUpDashboard(driver, testInReport, testName, testDataIteration);
            }
        }

        public void QualifiedOppsthismonth(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            WaitUntil(driver, Control("QualifiedOppthismonth", "Dashboards"), 30);
            int value1 = Elements(driver, Control("QualifiedOppthismonth", "Dashboards"));
            if (value1 > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Available KPIs are correct", "DashboardKPI");
                ThinkTime(2);
                ActionsClick(driver, Control("DBMore1header", "Dashboards"));
                ThinkTime(2);
                ActionsClick(driver, Control("SeeAllRecordAssociateBtn", "GenericOld"));
                ThinkTime(5);

                WaitUntil(driver, Control("QualifiedOppthismonthtopic", "Dashboards"), 30);
                int Topic = Elements(driver, Control("QualifiedOppthismonthtopic", "Dashboards"));
                WaitUntil(driver, Control("QualifiedOppthismonthcustomer", "Dashboards"), 30);
                int Customer = Elements(driver, Control("QualifiedOppthismonthcustomer", "Dashboards"));
                WaitUntil(driver, Control("QualifiedOppthismonthaccount", "Dashboards"), 30);
                int Account = Elements(driver, Control("QualifiedOppthismonthaccount", "Dashboards"));
                WaitUntil(driver, Control("QualifiedOppthismonthbrand", "Dashboards"), 30);
                int Brand = Elements(driver, Control("QualifiedOppthismonthbrand", "Dashboards"));
                WaitUntil(driver, Control("QualifiedOppthismonthproduct", "Dashboards"), 30);
                int Product = Elements(driver, Control("QualifiedOppthismonthproduct", "Dashboards"));
                WaitUntil(driver, Control("QualifiedOppthismonthlocation", "Dashboards"), 30);
                int Location = Elements(driver, Control("QualifiedOppthismonthlocation", "Dashboards"));

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "DB Header present", "DB Headers");
                scrollRight(driver, testInReport, testName, testDataIteration, "Scroll");

                WaitUntil(driver, Control("QualifiedOppthismonthcentre", "Dashboards"), 30);
                int Centre = Elements(driver, Control("QualifiedOppthismonthcentre", "Dashboards"));
                WaitUntil(driver, Control("ToursbookedOwner", "Dashboards"), 30);
                int Owner = Elements(driver, Control("ToursbookedOwner", "Dashboards"));
                WaitUntil(driver, Control("QualifiedOppthismonthstartdate", "Dashboards"), 30);
                int Date = Elements(driver, Control("QualifiedOppthismonthstartdate", "Dashboards"));
                WaitUntil(driver, Control("QualifiedOppthismonthstatus", "Dashboards"), 30);
                int Status = Elements(driver, Control("QualifiedOppthismonthstatus", "Dashboards"));
                WaitUntil(driver, Control("QualifiedOppthismonthstatusreason", "Dashboards"), 30);
                int StatusReason = Elements(driver, Control("QualifiedOppthismonthstatusreason", "Dashboards"));
                WaitUntil(driver, Control("QualifiedOppthismonthorder", "Dashboards"), 30);
                int Order = Elements(driver, Control("QualifiedOppthismonthorder", "Dashboards"));
                WaitUntil(driver, Control("QualifiedOppthismonthpayment", "Dashboards"), 30);
                int Payment = Elements(driver, Control("QualifiedOppthismonthpayment", "Dashboards"));
                WaitUntil(driver, Control("QualifiedOppthismonthcreated", "Dashboards"), 30);
                int Createdon = Elements(driver, Control("QualifiedOppthismonthcreated", "Dashboards"));
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "DB Header present", "DB Headers");

                if (Topic > 0 && Customer > 0 && Account > 0 && Brand > 0 && Product > 0 && Location > 0 && Centre > 0 && Owner > 0 && Date > 0 && Status > 0 && StatusReason > 0 && Order > 0 && Payment > 0 && Createdon > 0)
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "DB Header present", "DB Headers");

                }
                else
                {
                    Assert.Fail("Column headers missing");
                }
            }
        }

        public void QualifiedOppslastmonth(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {

            ThinkTime(5);
            SelectValuesFromDropDown(driver, testInReport, testName, testDataIteration, "Qualified Opportunities last Month");
            ThinkTime(5);
            WaitUntil(driver, Control("QualifiedOppthismonthtopic", "Dashboards"), 30);
            int Topic = Elements(driver, Control("QualifiedOppthismonthtopic", "Dashboards"));
            WaitUntil(driver, Control("QualifiedOppthismonthcustomer", "Dashboards"), 30);
            int Customer = Elements(driver, Control("QualifiedOppthismonthcustomer", "Dashboards"));
            WaitUntil(driver, Control("QualifiedOppthismonthaccount", "Dashboards"), 30);
            int Account = Elements(driver, Control("QualifiedOppthismonthaccount", "Dashboards"));
            WaitUntil(driver, Control("QualifiedOppthismonthbrand", "Dashboards"), 30);
            int Brand = Elements(driver, Control("QualifiedOppthismonthbrand", "Dashboards"));
            WaitUntil(driver, Control("QualifiedOppthismonthproduct", "Dashboards"), 30);
            int Product = Elements(driver, Control("QualifiedOppthismonthproduct", "Dashboards"));
            WaitUntil(driver, Control("QualifiedOppthismonthlocation", "Dashboards"), 30);
            int Location = Elements(driver, Control("QualifiedOppthismonthlocation", "Dashboards"));

            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "DB Header present", "DB Headers");
            scrollRight(driver, testInReport, testName, testDataIteration, "Scroll");

            WaitUntil(driver, Control("QualifiedOppthismonthcentre", "Dashboards"), 30);
            int Centre = Elements(driver, Control("QualifiedOppthismonthcentre", "Dashboards"));
            WaitUntil(driver, Control("ToursbookedOwner", "Dashboards"), 30);
            int Owner = Elements(driver, Control("ToursbookedOwner", "Dashboards"));
            WaitUntil(driver, Control("QualifiedOppthismonthstartdate", "Dashboards"), 30);
            int Date = Elements(driver, Control("QualifiedOppthismonthstartdate", "Dashboards"));
            WaitUntil(driver, Control("QualifiedOppthismonthstatus", "Dashboards"), 30);
            int Status = Elements(driver, Control("QualifiedOppthismonthstatus", "Dashboards"));
            WaitUntil(driver, Control("QualifiedOppthismonthstatusreason", "Dashboards"), 30);
            int StatusReason = Elements(driver, Control("QualifiedOppthismonthstatusreason", "Dashboards"));
            WaitUntil(driver, Control("QualifiedOppthismonthorder", "Dashboards"), 30);
            int Order = Elements(driver, Control("QualifiedOppthismonthorder", "Dashboards"));
            WaitUntil(driver, Control("QualifiedOppthismonthpayment", "Dashboards"), 30);
            int Payment = Elements(driver, Control("QualifiedOppthismonthpayment", "Dashboards"));
            WaitUntil(driver, Control("QualifiedOppthismonthcreated", "Dashboards"), 30);
            int Createdon = Elements(driver, Control("QualifiedOppthismonthcreated", "Dashboards"));
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "DB Header present", "DB Headers");

            if (Topic > 0 && Customer > 0 && Account > 0 && Brand > 0 && Product > 0 && Location > 0 && Centre > 0 && Owner > 0 && Date > 0 && Status > 0 && StatusReason > 0 && Order > 0 && Payment > 0 && Createdon > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "DB Header present", "DB Headers");

            }
            else
            {
                Assert.Fail("Column headers missing");
            }
        }

        public void Toursbookedthismonthfilterby(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string Username)
        {
            WaitUntil(driver, Control("Toursbooked", "Dashboards"), 30);
            int value1 = Elements(driver, Control("Toursbooked", "Dashboards"));
            if (value1 > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Available KPIs are correct", "DashboardKPI");
                ThinkTime(2);
                ActionsClick(driver, Control("DBMore2header", "Dashboards"));
                ThinkTime(2);
                ActionsClick(driver, Control("SeeAllRecordAssociateBtn", "GenericOld"));
                ThinkTime(5);
            }
            WaitUntil(driver, Control("Ownerdropdown1", "Dashboards"), 30);
            ThinkTime(2);
            MoveToElement(driver, Control("Ownerdropdown1", "Dashboards"));
            ThinkTime(5);
            ElementHighlight(driver, Control("Ownerdropdown1", "Dashboards"));
            ActionsClick(driver, Control("Ownerdropdown1", "Dashboards"));
            ThinkTime(2);
            ActionsClick(driver, Control("Filterby", "Dashboards"));
            ThinkTime(2);
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Filterby results", "Filterby results");
            ThinkTime(2);
            ActionsClick(driver, Control("Filterbyvalue", "Dashboards"));
            ThinkTime(2);
            Element(driver, Control("Filterbyvalue", "Dashboards")).SendKeys(Username);
            ThinkTime(2);
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Filterby results", "Filterby results");
            ThinkTime(2);
            MoveToElement(driver, Control("Filterbyvaluedropdown", "Dashboards"));
            ThinkTime(2);
            Element(driver, Control("Filterbyvaluedropdown", "Dashboards")).Click();
            ThinkTime(2);
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Filterby results", "Filterby results");
            ThinkTime(2);
            Element(driver, Control("ApplyFilter", "Dashboards")).Click();
            ThinkTime(2);
            WaitUntil(driver, Control("Resultsfilterbyowner", Username, "Dashboards"), 30);
            int Owner = Elements(driver, Control("Resultsfilterbyowner", Username, "Dashboards"));
            if (Owner > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Filterby results", "Filterby results");
                ThinkTime(2);
            }
            else
            {
                Assert.Fail("Filter results are incorrcet");
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Filterby results", "Filterby results");
                ThinkTime(2);
            }
            WaitUntil(driver, Control("Centredropdown", "Dashboards"), 30);
            ThinkTime(2);
            MoveToElement(driver, Control("Centredropdown", "Dashboards"));
            ThinkTime(5);
            ElementHighlight(driver, Control("Centredropdown", "Dashboards"));
            Element(driver, Control("Centredropdown", "Dashboards")).Click();
            ThinkTime(2);
            Element(driver, Control("Filterby", "Dashboards")).Click();
            ThinkTime(2);
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Filterby results", "Filterby results");
            ThinkTime(2);
            Element(driver, Control("Filterbyvalue", "Dashboards")).Click();
            ThinkTime(2);
            Element(driver, Control("Filterbyvalue", "Dashboards")).SendKeys("Alberta, Calgary - Crowfoot Centre");
            ThinkTime(2);
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Filterby results", "Filterby results");
            ThinkTime(2);
            MoveToElement(driver, Control("Filterbyvaluedropdown", "Dashboards"));
            ThinkTime(2);
            Element(driver, Control("Filterbyvaluedropdown", "Dashboards")).Click();
            ThinkTime(2);
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Filterby results", "Filterby results");
            ThinkTime(2);
            Element(driver, Control("ApplyFilter", "Dashboards")).Click();
            ThinkTime(2);
            int Centre = Elements(driver, Control("Resultsfilterbycentre", "Dashboards"));
            if (Centre > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Filterby results", "Filterby results");
                ThinkTime(2);
            }
            else
            {
                Assert.Fail("Filter results are incorrcet");
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Filterby results", "Filterby results");
                ThinkTime(2);
            }
        }

        public void Toursbookedthismonth(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            WaitUntil(driver, Control("Toursbooked", "Dashboards"), 30);
            int value1 = Elements(driver, Control("Toursbooked", "Dashboards"));
            if (value1 > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Available KPIs are correct", "DashboardKPI");
                ThinkTime(2);
                ActionsClick(driver, Control("DBMore2header", "Dashboards"));
                ThinkTime(2);
                ActionsClick(driver, Control("SeeAllRecordAssociateBtn", "GenericOld"));
                ThinkTime(5);
            }

            WaitUntil(driver, Control("ToursbookedSubject", "Dashboards"), 30);
            int Subject = Elements(driver, Control("ToursbookedSubject", "Dashboards"));
            WaitUntil(driver, Control("ToursbookedCreatedby", "Dashboards"), 30);
            int Created = Elements(driver, Control("ToursbookedCreatedby", "Dashboards"));
            WaitUntil(driver, Control("ToursbookedOwner", "Dashboards"), 30);
            int Owner = Elements(driver, Control("ToursbookedOwner", "Dashboards"));
            WaitUntil(driver, Control("ToursbookedRegarding", "Dashboards"), 30);
            int Regarding = Elements(driver, Control("ToursbookedRegarding", "Dashboards"));
            WaitUntil(driver, Control("Toursbookedstatus", "Dashboards"), 30);
            int Status = Elements(driver, Control("Toursbookedstatus", "Dashboards"));
            WaitUntil(driver, Control("Toursbookedstarttime", "Dashboards"), 30);
            int Starttime = Elements(driver, Control("Toursbookedstarttime", "Dashboards"));
            WaitUntil(driver, Control("Toursbookedendtime", "Dashboards"), 30);
            int Endtime = Elements(driver, Control("Toursbookedendtime", "Dashboards"));
            WaitUntil(driver, Control("Toursbookedcentre", "Dashboards"), 30);
            int Centre = Elements(driver, Control("Toursbookedcentre", "Dashboards"));
            WaitUntil(driver, Control("Toursbookeddate", "Dashboards"), 30);
            int Tourbooked = Elements(driver, Control("Toursbookeddate", "Dashboards"));
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "DB Header present", "DB Headers");

            if (Subject > 0 && Created > 0 && Owner > 0 && Regarding > 0 && Status > 0 && Starttime > 0 && Endtime > 0 && Centre > 0 && Tourbooked > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "DB Header present", "DB Headers");

            }

            else
            {
                Assert.Fail("Column headers are missing");
            }
        }

        public void Toursbookedlastmonth(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(5);
            SelectValuesFromDropDown(driver, testInReport, testName, testDataIteration, "Tours Booked for Last Calendar Month");
            ThinkTime(5);

            WaitUntil(driver, Control("ToursbookedSubject", "Dashboards"), 30);
            int Subject = Elements(driver, Control("ToursbookedSubject", "Dashboards"));
            WaitUntil(driver, Control("ToursbookedCreatedby", "Dashboards"), 30);
            int Created = Elements(driver, Control("ToursbookedCreatedby", "Dashboards"));
            WaitUntil(driver, Control("ToursbookedOwner", "Dashboards"), 30);
            int Owner = Elements(driver, Control("ToursbookedOwner", "Dashboards"));
            WaitUntil(driver, Control("ToursbookedRegarding", "Dashboards"), 30);
            int Regarding = Elements(driver, Control("ToursbookedRegarding", "Dashboards"));
            // WaitUntil(driver, Control("QualifiedOppthismonthstatusreason", "Dashboards"), 30);
            //int Status = Elements(driver, Control("QualifiedOppthismonthstatusreason", "Dashboards"));
            WaitUntil(driver, Control("Toursbookedstarttime", "Dashboards"), 30);
            int Starttime = Elements(driver, Control("Toursbookedstarttime", "Dashboards"));
            WaitUntil(driver, Control("Toursbookedendtime", "Dashboards"), 30);
            int Endtime = Elements(driver, Control("Toursbookedendtime", "Dashboards"));
            WaitUntil(driver, Control("Toursbookedcentre", "Dashboards"), 30);
            int Centre = Elements(driver, Control("Toursbookedcentre", "Dashboards"));
            WaitUntil(driver, Control("Toursbookeddate", "Dashboards"), 30);
            int Tourbooked = Elements(driver, Control("Toursbookeddate", "Dashboards"));
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "DB Header present", "DB Headers");

            if (Subject > 0 && Created > 0 && Owner > 0 && Regarding > 0 && Starttime > 0 && Endtime > 0 && Centre > 0 && Tourbooked > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "DB Header present", "DB Headers");

            }

            else
            {
                Assert.Fail("Column headers are missing");
            }
        }

        public void selectDashMyToursthismonth(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(2);
            driver.SwitchTo().DefaultContent();
            WaitUntil(driver, Control("Performanceheader3", "Dashboards"), 30);
            int value1 = Elements(driver, Control("Performanceheader3", "Dashboards"));

            if (value1 > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Available KPIs are correct", "DashboardKPI");
                ThinkTime(2);
                ElementHighlight(driver, Control("PerformanceMore3", "Dashboards"));
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Morebutton is highlighted", "Morebutton is highlighted");
                ThinkTime(2);
                ActionsClick(driver, Control("PerformanceMore3", "Dashboards"));
                ThinkTime(2);
                ActionsClick(driver, Control("Seeall", "GenericOld"));
                //ThinkTime(5);
            }
            ThinkTime(5);
            //   Element(driver, Control("ClosePiechart", "Dashboards")).Click();
            //  ThinkTime(2);
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "DB Header present", "DB Headers");

        }

        public void Selectdashdropdownvalue(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string value)
        {
            ThinkTime(2);
            Element(driver, Control("Firstmore", "Dashboards")).Click();
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "DB dropdown present", "DB Headers");
            //"My Tours Booked for last calendar month
            ThinkTime(2);
            ActionsClick(driver, Control("Dashadvvalue", value, "Dashboards"));
            ThinkTime(2);
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "DB value selected", "DB Headers");

            ThinkTime(2);
            ActionsClick(driver, Control("PerformanceMore1", "Dashboards"));
            ThinkTime(2);
            ActionsClick(driver, Control("ViewRecord", "36.1_Dashboard"));
            ThinkTime(5);

            Element(driver, Control("ClosePiechart", "Dashboards")).Click();
            ThinkTime(2);
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "DB Header present", "DB Headers");



        }


        public void DashMyTours(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            WaitUntil(driver, Control("Performanceheader1", "Dashboards"), 30);
            int value1 = Elements(driver, Control("Performanceheader1", "Dashboards"));

            if (value1 > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Available KPIs are correct", "DashboardKPI");
                ThinkTime(2);
                ActionsClick(driver, Control("PerformanceMore1", "Dashboards"));
                ThinkTime(2);
                ActionsClick(driver, Control("ViewRecord", "36.1_Dashboard"));
                ThinkTime(2);
                //ActionsClick(driver, Control("SeeAllRecordAssociateBtn", "GenericOld"));
                //ThinkTime(5);
            }
            ThinkTime(5);
            Element(driver, Control("ClosePiechart", "Dashboards")).Click();
            ThinkTime(2);
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "DB Header present", "DB Headers");

            WaitUntil(driver, Control("PerfSubject", "Dashboards"), 30);
            int Subject = Elements(driver, Control("PerfSubject", "Dashboards"));
            WaitUntil(driver, Control("Pertour", "Dashboards"), 30);
            int Pertour = Elements(driver, Control("Pertour", "Dashboards"));
            WaitUntil(driver, Control("Perowner", "Dashboards"), 30);
            int Owner = Elements(driver, Control("Perowner", "Dashboards"));
            WaitUntil(driver, Control("Perregarding", "Dashboards"), 30);
            int Regarding = Elements(driver, Control("Perregarding", "Dashboards"));
            WaitUntil(driver, Control("Perstatus", "Dashboards"), 30);
            int Status = Elements(driver, Control("Perstatus", "Dashboards"));
            WaitUntil(driver, Control("Perstarttour", "Dashboards"), 30);
            int Starttime = Elements(driver, Control("Perstarttour", "Dashboards"));
            WaitUntil(driver, Control("PerEndtour", "Dashboards"), 30);
            int Endtime = Elements(driver, Control("PerEndtour", "Dashboards"));
            WaitUntil(driver, Control("PerCentre", "Dashboards"), 30);
            int Centre = Elements(driver, Control("PerCentre", "Dashboards"));
            WaitUntil(driver, Control("Percreatedon", "Dashboards"), 30);
            int Percreatedon = Elements(driver, Control("Percreatedon", "Dashboards"));

            if (Subject > 0 && Pertour > 0 && Owner > 0 && Regarding > 0 && Status > 0 && Starttime > 0 && Endtime > 0 && Centre > 0 && Percreatedon > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "DB Header present", "DB Headers");

            }

            else
            {
                Assert.Fail("Column headers are missing");
            }
        }

        public void DashAdvFiltersforcompletedtours(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string filter, string value, string button)
        {
            ThinkTime(2);
            WaitUntil(driver, Control("Fiilterfunnelforcompletedtours", "Dashboards"), 30);
            Element(driver, Control("Fiilterfunnelforcompletedtours", "Dashboards")).Click();
            ThinkTime(5);

            WaitUntil(driver, Control("DashadvFilter", filter, "Dashboards"), 30);
            int FilterCondition = Elements(driver, Control("DashadvFilter", filter, "Dashboards"));
            ThinkTime(2);
            WaitUntil(driver, Control("Dashadvvalue", value, "Dashboards"), 30);
            int FilterValue = Elements(driver, Control("Dashadvvalue", value, "Dashboards"));
            ThinkTime(2);

            if (FilterCondition > 0 && FilterValue > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Adv filters present", "Adv Filter verification");
                ThinkTime(2);
            }

            else
            {
                Assert.Fail("Adv filters are missing for dashboard");
            }

            ThinkTime(2);
            MoveToElement(driver, Control("Dashadvvalue", button, "Dashboards"));
            WaitUntil(driver, Control("Dashadvvalue", button, "Dashboards"), 120);
            Element(driver, Control("Dashadvvalue", button, "Dashboards")).Click();
            ThinkTime(3);

        }






        public void DashAdvFilters(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string filter, string value, string button)
        {
            ThinkTime(5);
            int value4 = Elements(driver, Control("dashboardadvfilter", "Dashboards"));
            ElementHighlight(driver, Control("dashboardadvfilter", "Dashboards"));
            WaitUntil(driver, Control("dashboardadvfilter", "Dashboards"), 30);
            Element(driver, Control("dashboardadvfilter", "Dashboards")).Click();
            ThinkTime(3);

            WaitUntil(driver, Control("DashadvFilter", filter, "Dashboards"), 30);
            int FilterCondition = Elements(driver, Control("DashadvFilter", filter, "Dashboards"));

            WaitUntil(driver, Control("Dashadvvalue", value, "Dashboards"), 30);
            int FilterValue = Elements(driver, Control("Dashadvvalue", value, "Dashboards"));


            if (FilterCondition > 0 && FilterValue > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Adv filters present", "Adv Filter verification");

            }

            else
            {
                Assert.Fail("Adv filters are missing for dashboard");
            }

            ThinkTime(2);
            WaitUntil(driver, Control("Dashadvvalue", button, "Dashboards"), 30);
            Element(driver, Control("Dashadvvalue", button, "Dashboards")).Click();
            ThinkTime(3);

        }

        public void SearchToursinDb(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string searchlist)
        {
            ThinkTime(5);
            WaitUntil(driver, Control("SearchtourinDb", "Dashboards"), 30);
            Element(driver, Control("SearchtourinDb", "Dashboards")).Click();
            ThinkTime(3);
            Element(driver, Control("SearchtourinDb", "Dashboards")).SendKeys(searchlist);
            ThinkTime(3);
            Element(driver, Control("Searchicon", "Dashboards")).Click();
            ThinkTime(3);

        }

        public void OKButton(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(1);
            Element(driver, Control("Tourcloseconfirm", "Opportunity")).Click();
            ThinkTime(4);
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Tour closed today is displayed", "Tour closed on DB");

        }

        public void CloseTourinDb(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string Tourname)
        {
            if (Elements(driver, Control("CloseTourindb", "Opportunity")) > 0)
            {
                Element(driver, Control("CloseTourindb", "Opportunity")).Click();
                ThinkTime(4);
                Element(driver, Control("Tourcloseconfirm", "Opportunity")).Click();
                ThinkTime(4);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Tour closed today is displayed", "Tour closed on DB");
                driver.Navigate().Back();
                // Search for the new tour
                //SearchToursinDb(driver, testInReport, testName, testDataIteration, Tourname);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Tour closed today is displayed", "Tour closed on DB");
                //SelectingActiveCell(driver, testInReport, testName, testDataIteration);
                //AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Tour closed today is displayed", "Tour closed on DB");
                Element(driver, Control("Activitystatus", "Tour")).Click();
                ThinkTime(4);
                Element(driver, Control("Filterbydb", "Tour")).Click();
                ThinkTime(4);
                Element(driver, Control("Filterbyvalues", "Tour")).Click();
                ThinkTime(4);
                Element(driver, Control("Completefilter", "Tour")).Click();
                Element(driver, Control("Completefilter", "Tour")).Click();
                ThinkTime(4);
                ThinkTime(2);
                WaitUntil(driver, Control("Dashadvvalue", "Apply", "Dashboards"), 30);
                Element(driver, Control("Dashadvvalue", "Apply", "Dashboards")).Click();
                ThinkTime(3);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Tour Filter results displayed", "Tour filter results displayed on DB");
            }

            else
            {
                driver.Navigate().Back();
                Element(driver, Control("Activitystatus", "Tour")).Click();
                ThinkTime(4);
                Element(driver, Control("Filterbydb", "Tour")).Click();
                ThinkTime(4);
                Element(driver, Control("Filterbyvalues", "Tour")).Click();
                ThinkTime(4);
                int filter1 = Elements(driver, Control("Cancelfilter", "Tour"));
                int filter2 = Elements(driver, Control("Completefilter", "Tour"));
                int filter3 = Elements(driver, Control("Scheduledfilter", "Tour"));
                int filter4 = Elements(driver, Control("Openfilter", "Tour"));
                if (filter1 > 0 && filter2 > 0 && filter3 > 0 && filter4 > 0)
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Tour Filters displayed", "Tour filters displayed on DB");
                }

                else
                {
                    Assert.Fail("Filter not available in db");
                }

                //if(condition == "Canceltour")
                //{
                //    Element(driver, Control("Cancelfilter", "Tour")).Click();
                //    Element(driver, Control("Filterbydb", "Tour")).Click();
                //    ThinkTime(4);
                //    ThinkTime(2);
                //    WaitUntil(driver, Control("Dashadvvalue", "Apply", "Dashboards"), 30);
                //    Element(driver, Control("Dashadvvalue", "Apply", "Dashboards")).Click();
                //    ThinkTime(3);
                //    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Tour Filter results displayed", "Tour filter results displayed on DB");
                //}

            }
        }


        public void Untreatedleads(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            WaitUntil(driver, Control("Processheaderleads", "Dashboards"), 30);
            int value1 = Elements(driver, Control("Processheaderleads", "Dashboards"));

            if (value1 > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Available KPIs are correct", "DashboardKPI");
                ThinkTime(2);
                ActionsClick(driver, Control("LeadMore", "Dashboards"));
                ThinkTime(2);
                ActionsClick(driver, Control("SeeAllRecordAssociateBtn", "GenericOld"));
                ThinkTime(5);
            }

            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "DB Header present", "DB Headers");

            WaitUntil(driver, Control("LeadName", "Dashboards"), 30);
            int Name = Elements(driver, Control("LeadName", "Dashboards"));
            WaitUntil(driver, Control("Perstatusreason", "Dashboards"), 30);
            int Perstatusreason = Elements(driver, Control("Perstatusreason", "Dashboards"));
            WaitUntil(driver, Control("OppCountry", "Dashboards"), 30);
            int Country = Elements(driver, Control("OppCountry", "Dashboards"));
            WaitUntil(driver, Control("Percreatedon", "Dashboards"), 30);
            int Percreatedon = Elements(driver, Control("Percreatedon", "Dashboards"));

            WaitUntil(driver, Control("Perowner", "Dashboards"), 30);
            int Perowner = Elements(driver, Control("Perowner", "Dashboards"));

            if (Name > 0 && Perstatusreason > 0 && Country > 0 && Percreatedon > 0 && Perowner > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "DB Header present", "DB Headers");

            }

            else
            {
                Assert.Fail("Column headers are missing");
            }
        }




        public void DashBookedTour(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            WaitUntil(driver, Control("Performanceheader3", "Dashboards"), 30);
            int value1 = Elements(driver, Control("Performanceheader3", "Dashboards"));

            if (value1 > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Available KPIs are correct", "DashboardKPI");
                ThinkTime(2);
                ActionsClick(driver, Control("PerformanceMore3", "Dashboards"));
                ThinkTime(2);
                ActionsClick(driver, Control("SeeAllRecordAssociateBtn", "GenericOld"));
                ThinkTime(5);
            }
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "DB Header present", "DB Headers");

            WaitUntil(driver, Control("PerfSubject", "Dashboards"), 30);
            int Subject = Elements(driver, Control("PerfSubject", "Dashboards"));
            WaitUntil(driver, Control("Pertour", "Dashboards"), 30);
            int Pertour = Elements(driver, Control("Pertour", "Dashboards"));
            WaitUntil(driver, Control("Perowner", "Dashboards"), 30);
            int Owner = Elements(driver, Control("Perowner", "Dashboards"));
            WaitUntil(driver, Control("Perregarding", "Dashboards"), 30);
            int Regarding = Elements(driver, Control("Perregarding", "Dashboards"));
            WaitUntil(driver, Control("Perstatus", "Dashboards"), 30);
            int Status = Elements(driver, Control("Perstatus", "Dashboards"));
            WaitUntil(driver, Control("Perstarttour", "Dashboards"), 30);
            int Starttime = Elements(driver, Control("Perstarttour", "Dashboards"));
            WaitUntil(driver, Control("PerEndtour", "Dashboards"), 30);
            int Endtime = Elements(driver, Control("PerEndtour", "Dashboards"));
            WaitUntil(driver, Control("PerCentre", "Dashboards"), 30);
            int Centre = Elements(driver, Control("PerCentre", "Dashboards"));
            WaitUntil(driver, Control("Percreatedon", "Dashboards"), 30);
            int Percreatedon = Elements(driver, Control("Percreatedon", "Dashboards"));

            if (Subject > 0 && Pertour > 0 && Owner > 0 && Regarding > 0 && Status > 0 && Starttime > 0 && Endtime > 0 && Centre > 0 && Percreatedon > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "DB Header present", "DB Headers");

            }

            else
            {
                Assert.Fail("Column headers are missing");
            }
        }

        public void DashBookedTourlastmonth(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            SelectValuesFromDropDown(driver, testInReport, testName, testDataIteration, "My Tours Booked for last calendar month");
            ThinkTime(2);
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "DB Header present", "DB Headers");

            WaitUntil(driver, Control("PerfSubject", "Dashboards"), 30);
            int Subject = Elements(driver, Control("PerfSubject", "Dashboards"));
            WaitUntil(driver, Control("Pertour", "Dashboards"), 30);
            int Pertour = Elements(driver, Control("Pertour", "Dashboards"));
            WaitUntil(driver, Control("Perowner", "Dashboards"), 30);
            int Owner = Elements(driver, Control("Perowner", "Dashboards"));
            WaitUntil(driver, Control("Perregarding", "Dashboards"), 30);
            int Regarding = Elements(driver, Control("Perregarding", "Dashboards"));
            WaitUntil(driver, Control("Perstatus", "Dashboards"), 30);
            int Status = Elements(driver, Control("Perstatus", "Dashboards"));
            WaitUntil(driver, Control("Perstarttour", "Dashboards"), 30);
            int Starttime = Elements(driver, Control("Perstarttour", "Dashboards"));
            WaitUntil(driver, Control("PerEndtour", "Dashboards"), 30);
            int Endtime = Elements(driver, Control("PerEndtour", "Dashboards"));
            WaitUntil(driver, Control("PerCentre", "Dashboards"), 30);
            int Centre = Elements(driver, Control("PerCentre", "Dashboards"));
            WaitUntil(driver, Control("Percreatedon", "Dashboards"), 30);
            int Percreatedon = Elements(driver, Control("Percreatedon", "Dashboards"));

            if (Subject > 0 && Pertour > 0 && Owner > 0 && Regarding > 0 && Status > 0 && Starttime > 0 && Endtime > 0 && Centre > 0 && Percreatedon > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "DB Header present", "DB Headers");

            }

            else
            {
                Assert.Fail("Column headers are missing");
            }
        }

        public void Dashcompletedtourthismonth(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(2);
            driver.SwitchTo().DefaultContent();
            ThinkTime(2);
            MoveToElement(driver, Control("Performanceheader4", "Dashboards"));
            WaitUntil(driver, Control("Performanceheader4", "Dashboards"), 30);
            int value1 = Elements(driver, Control("Performanceheader4", "Dashboards"));

            if (value1 > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Available KPIs are correct", "DashboardKPI");
                ThinkTime(2);
                MoveToElement(driver, Control("PerformanceMore4", "Dashboards"));
                ActionsClick(driver, Control("PerformanceMore4", "Dashboards"));
                ThinkTime(2);
                ActionsClick(driver, Control("SeeAllRecordAssociateBtn", "GenericOld"));
                ThinkTime(5);
            }

        }


        public void Dashcompletedtourlastmonth1(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string defaultvalue, string newvalue)
        {
            ThinkTime(3);
            MoveToElement(driver, Control("Completedtoursdropdown", defaultvalue, "Dashboards"));
            ThinkTime(2);
            ElementHighlight(driver, Control("Completedtoursdropdown", defaultvalue, "Dashboards"));
            Element(driver, Control("Completedtoursdropdown", defaultvalue, "Dashboards")).Click();
            ThinkTime(2);
            Element(driver, Control("DBSelectdropdownvalue", newvalue, "Dashboards")).Click();
            ThinkTime(2);


            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Available KPIs are correct", "DashboardKPI");
            ThinkTime(2);
            ActionsClick(driver, Control("PerformanceMore4b", "Dashboards"));
            ThinkTime(2);
            ActionsClick(driver, Control("SeeAllRecordAssociateBtn", "GenericOld"));
            ThinkTime(5);


        }


        public void Dashcompletedtour(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            WaitUntil(driver, Control("Performanceheader4", "Dashboards"), 30);
            int value1 = Elements(driver, Control("Performanceheader4", "Dashboards"));

            if (value1 > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Available KPIs are correct", "DashboardKPI");
                ThinkTime(2);
                WaitUntil(driver, Control("PerformanceMore4", "Dashboards"), 30);
                ActionsClick(driver, Control("PerformanceMore4", "Dashboards"));
                ThinkTime(2);
                ActionsClick(driver, Control("SeeAllRecordAssociateBtn", "GenericOld"));
                ThinkTime(5);
            }

            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "DB Header present", "DB Headers");

            WaitUntil(driver, Control("PerfSubject", "Dashboards"), 30);
            int Subject = Elements(driver, Control("PerfSubject", "Dashboards"));
            WaitUntil(driver, Control("Pertour", "Dashboards"), 30);
            int Pertour = Elements(driver, Control("Pertour", "Dashboards"));
            WaitUntil(driver, Control("Perowner", "Dashboards"), 30);
            int Owner = Elements(driver, Control("Perowner", "Dashboards"));
            WaitUntil(driver, Control("Perregarding", "Dashboards"), 30);
            int Regarding = Elements(driver, Control("Perregarding", "Dashboards"));
            WaitUntil(driver, Control("Perstatus", "Dashboards"), 30);
            int Status = Elements(driver, Control("Perstatus", "Dashboards"));
            WaitUntil(driver, Control("Perstarttour", "Dashboards"), 30);
            int Starttime = Elements(driver, Control("Perstarttour", "Dashboards"));
            WaitUntil(driver, Control("PerEndtour", "Dashboards"), 30);
            int Endtime = Elements(driver, Control("PerEndtour", "Dashboards"));
            WaitUntil(driver, Control("PerCentre", "Dashboards"), 30);
            int Centre = Elements(driver, Control("PerCentre", "Dashboards"));
            WaitUntil(driver, Control("Percreatedon", "Dashboards"), 30);
            int Percreatedon = Elements(driver, Control("Percreatedon", "Dashboards"));

            if (Subject > 0 && Pertour > 0 && Owner > 0 && Regarding > 0 && Status > 0 && Starttime > 0 && Endtime > 0 && Centre > 0 && Percreatedon > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "DB Header present", "DB Headers");

            }

            else
            {
                Assert.Fail("Column headers are missing");
            }
        }

        public void Dashcompletedtourlastmonth(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {

            SelectValuesFromDropDown(driver, testInReport, testName, testDataIteration, "My Completed Tours for last calendar month");
            ThinkTime(2);
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "DB Header present", "DB Headers");

            WaitUntil(driver, Control("PerfSubject", "Dashboards"), 30);
            int Subject = Elements(driver, Control("PerfSubject", "Dashboards"));
            WaitUntil(driver, Control("Pertour", "Dashboards"), 30);
            int Pertour = Elements(driver, Control("Pertour", "Dashboards"));
            WaitUntil(driver, Control("Perowner", "Dashboards"), 30);
            int Owner = Elements(driver, Control("Perowner", "Dashboards"));
            WaitUntil(driver, Control("Perregarding", "Dashboards"), 30);
            int Regarding = Elements(driver, Control("Perregarding", "Dashboards"));
            WaitUntil(driver, Control("Perstatus", "Dashboards"), 30);
            int Status = Elements(driver, Control("Perstatus", "Dashboards"));
            WaitUntil(driver, Control("Perstarttour", "Dashboards"), 30);
            int Starttime = Elements(driver, Control("Perstarttour", "Dashboards"));
            WaitUntil(driver, Control("PerEndtour", "Dashboards"), 30);
            int Endtime = Elements(driver, Control("PerEndtour", "Dashboards"));
            WaitUntil(driver, Control("PerCentre", "Dashboards"), 30);
            int Centre = Elements(driver, Control("PerCentre", "Dashboards"));
            WaitUntil(driver, Control("Percreatedon", "Dashboards"), 30);
            int Percreatedon = Elements(driver, Control("Percreatedon", "Dashboards"));

            if (Subject > 0 && Pertour > 0 && Owner > 0 && Regarding > 0 && Status > 0 && Starttime > 0 && Endtime > 0 && Centre > 0 && Percreatedon > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "DB Header present", "DB Headers");

            }

            else
            {
                Assert.Fail("Column headers are missing");
            }
        }



        public void DashMyOpps(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            WaitUntil(driver, Control("Performanceheader2", "Dashboards"), 30);
            int value1 = Elements(driver, Control("Performanceheader2", "Dashboards"));

            if (value1 > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Available KPIs are correct", "DashboardKPI");
                ThinkTime(2);
                ActionsClick(driver, Control("PerformanceMore2", "Dashboards"));
                ThinkTime(2);
                ActionsClick(driver, Control("ViewRecord", "36.1_Dashboard"));
                ThinkTime(2);
                //ActionsClick(driver, Control("SeeAllRecordAssociateBtn", "GenericOld"));
                //ThinkTime(5);
            }
            ThinkTime(5);
            Element(driver, Control("ClosePiechart", "Dashboards")).Click();
            ThinkTime(2);
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "DB Header present", "DB Headers");

            WaitUntil(driver, Control("OppReference", "Dashboards"), 30);
            int OppReference = Elements(driver, Control("OppReference", "Dashboards"));
            WaitUntil(driver, Control("OppCountry", "Dashboards"), 30);
            int OppCountry = Elements(driver, Control("OppCountry", "Dashboards"));
            WaitUntil(driver, Control("OppName", "Dashboards"), 30);
            int Topic = Elements(driver, Control("OppName", "Dashboards"));
            WaitUntil(driver, Control("OppAccount", "Dashboards"), 30);
            int OppAccount = Elements(driver, Control("OppAccount", "Dashboards"));
            WaitUntil(driver, Control("OppContact", "Dashboards"), 30);
            int OppContact = Elements(driver, Control("OppContact", "Dashboards"));
            WaitUntil(driver, Control("Percreatedon", "Dashboards"), 30);
            int Percreatedon = Elements(driver, Control("Percreatedon", "Dashboards"));
            WaitUntil(driver, Control("Perstatusreason", "Dashboards"), 30);
            int Perstatusreason = Elements(driver, Control("Perstatusreason", "Dashboards"));
            WaitUntil(driver, Control("Perowner", "Dashboards"), 30);
            int Perowner = Elements(driver, Control("Perowner", "Dashboards"));

            if (OppReference > 0 && OppCountry > 0 && Topic > 0 && OppAccount > 0 && OppContact > 0 && Percreatedon > 0 && Perstatusreason > 0 && Perowner > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "DB Header present", "DB Headers");

            }

            else
            {
                Assert.Fail("Column headers are missing");
            }
        }

        public void Dashdirectsales(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            WaitUntil(driver, Control("Performanceheader5", "Dashboards"), 30);
            int value1 = Elements(driver, Control("Performanceheader5", "Dashboards"));

            if (value1 > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Available KPIs are correct", "DashboardKPI");
                ThinkTime(2);
                ActionsClick(driver, Control("PerformanceMore5", "Dashboards"));
                ThinkTime(2);
                ActionsClick(driver, Control("SeeAllRecordAssociateBtn", "GenericOld"));
                ThinkTime(5);
            }
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "DB Header present", "DB Headers");

            WaitUntil(driver, Control("OppReference", "Dashboards"), 30);
            int OppReference = Elements(driver, Control("OppReference", "Dashboards"));
            WaitUntil(driver, Control("OppCountry", "Dashboards"), 30);
            int OppCountry = Elements(driver, Control("OppCountry", "Dashboards"));
            WaitUntil(driver, Control("OppName", "Dashboards"), 30);
            int Topic = Elements(driver, Control("OppName", "Dashboards"));
            WaitUntil(driver, Control("OppAccount", "Dashboards"), 30);
            int OppAccount = Elements(driver, Control("OppAccount", "Dashboards"));
            WaitUntil(driver, Control("OppContact", "Dashboards"), 30);
            int OppContact = Elements(driver, Control("OppContact", "Dashboards"));
            WaitUntil(driver, Control("PerClosedate", "Dashboards"), 30);
            int PerClosedate = Elements(driver, Control("PerClosedate", "Dashboards"));
            WaitUntil(driver, Control("PerEstimatedRevenue", "Dashboards"), 30);
            int PerEstimatedRevenue = Elements(driver, Control("PerEstimatedRevenue", "Dashboards"));
            WaitUntil(driver, Control("Perstatusreason", "Dashboards"), 30);
            int Perstatusreason = Elements(driver, Control("Perstatusreason", "Dashboards"));
            WaitUntil(driver, Control("Perowner", "Dashboards"), 30);
            int Perowner = Elements(driver, Control("Perowner", "Dashboards"));

            if (OppReference > 0 && OppCountry > 0 && Topic > 0 && OppAccount > 0 && OppContact > 0 && PerClosedate > 0 && PerEstimatedRevenue > 0 && Perstatusreason > 0 && Perowner > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "DB Header present", "DB Headers");

            }

            else
            {
                Assert.Fail("Column headers are missing");
            }
        }
        public void Dashdirectsaleslastmonth(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            SelectValuesFromDropDown(driver, testInReport, testName, testDataIteration, "My Direct Sales for last calendar month");
            ThinkTime(2);
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "DB Header present", "DB Headers");

            WaitUntil(driver, Control("OppReference", "Dashboards"), 30);
            int OppReference = Elements(driver, Control("OppReference", "Dashboards"));
            WaitUntil(driver, Control("OppCountry", "Dashboards"), 30);
            int OppCountry = Elements(driver, Control("OppCountry", "Dashboards"));
            WaitUntil(driver, Control("OppName", "Dashboards"), 30);
            int Topic = Elements(driver, Control("OppName", "Dashboards"));
            WaitUntil(driver, Control("OppAccount", "Dashboards"), 30);
            int OppAccount = Elements(driver, Control("OppAccount", "Dashboards"));
            WaitUntil(driver, Control("OppContact", "Dashboards"), 30);
            int OppContact = Elements(driver, Control("OppContact", "Dashboards"));
            WaitUntil(driver, Control("PerClosedate", "Dashboards"), 30);
            int PerClosedate = Elements(driver, Control("PerClosedate", "Dashboards"));
            WaitUntil(driver, Control("PerEstimatedRevenue", "Dashboards"), 30);
            int PerEstimatedRevenue = Elements(driver, Control("PerEstimatedRevenue", "Dashboards"));
            WaitUntil(driver, Control("Perstatusreason", "Dashboards"), 30);
            int Perstatusreason = Elements(driver, Control("Perstatusreason", "Dashboards"));
            WaitUntil(driver, Control("Perowner", "Dashboards"), 30);
            int Perowner = Elements(driver, Control("Perowner", "Dashboards"));

            if (OppReference > 0 && OppCountry > 0 && Topic > 0 && OppAccount > 0 && OppContact > 0 && PerClosedate > 0 && PerEstimatedRevenue > 0 && Perstatusreason > 0 && Perowner > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "DB Header present", "DB Headers");

            }

            else
            {
                Assert.Fail("Column headers are missing");
            }
        }
        public void Dashpotentialdirect(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            WaitUntil(driver, Control("Performanceheader6", "Dashboards"), 30);
            int value1 = Elements(driver, Control("Performanceheader6", "Dashboards"));

            if (value1 > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Available KPIs are correct", "DashboardKPI");
                ThinkTime(2);
                ActionsClick(driver, Control("PerformanceMore6", "Dashboards"));
                ThinkTime(2);
                ActionsClick(driver, Control("SeeAllRecordAssociateBtn", "GenericOld"));
                ThinkTime(5);
            }
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "DB Header present", "DB Headers");

            WaitUntil(driver, Control("OppReference", "Dashboards"), 30);
            int OppReference = Elements(driver, Control("OppReference", "Dashboards"));
            WaitUntil(driver, Control("OppCountry", "Dashboards"), 30);
            int OppCountry = Elements(driver, Control("OppCountry", "Dashboards"));
            WaitUntil(driver, Control("OppName", "Dashboards"), 30);
            int Topic = Elements(driver, Control("OppName", "Dashboards"));
            WaitUntil(driver, Control("OppAccount", "Dashboards"), 30);
            int OppAccount = Elements(driver, Control("OppAccount", "Dashboards"));
            WaitUntil(driver, Control("OppContact", "Dashboards"), 30);
            int OppContact = Elements(driver, Control("OppContact", "Dashboards"));

            WaitUntil(driver, Control("Percreatedon", "Dashboards"), 30);
            int Percreatedon = Elements(driver, Control("Percreatedon", "Dashboards"));
            WaitUntil(driver, Control("PerEstimatedRevenue", "Dashboards"), 30);
            int PerEstimatedRevenue = Elements(driver, Control("PerEstimatedRevenue", "Dashboards"));
            WaitUntil(driver, Control("Perstatusreason", "Dashboards"), 30);
            int Perstatusreason = Elements(driver, Control("Perstatusreason", "Dashboards"));
            WaitUntil(driver, Control("Perowner", "Dashboards"), 30);
            int Perowner = Elements(driver, Control("Perowner", "Dashboards"));

            if (OppReference > 0 && OppCountry > 0 && Topic > 0 && OppAccount > 0 && OppContact > 0 && Percreatedon > 0 && PerEstimatedRevenue > 0 && Perstatusreason > 0 && Perowner > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "DB Header present", "DB Headers");

            }

            else
            {
                Assert.Fail("Column headers are missing");
            }
        }


        public void DashSalesAssist(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            WaitUntil(driver, Control("Performanceheader7", "Dashboards"), 30);
            int value1 = Elements(driver, Control("Performanceheader7", "Dashboards"));

            if (value1 > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Available KPIs are correct", "DashboardKPI");
                ThinkTime(2);
                ActionsClick(driver, Control("PerformanceMore7", "Dashboards"));
                ThinkTime(2);
                ActionsClick(driver, Control("SeeAllRecordAssociateBtn", "GenericOld"));
                ThinkTime(5);
            }
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "DB Header present", "DB Headers");

            WaitUntil(driver, Control("PerClosedate", "Dashboards"), 30);
            int OppReference = Elements(driver, Control("PerClosedate", "Dashboards"));
            WaitUntil(driver, Control("OppCountry", "Dashboards"), 30);
            int OppCountry = Elements(driver, Control("OppCountry", "Dashboards"));
            WaitUntil(driver, Control("OppName", "Dashboards"), 30);
            int Topic = Elements(driver, Control("OppName", "Dashboards"));
            WaitUntil(driver, Control("OppAccount", "Dashboards"), 30);
            int OppAccount = Elements(driver, Control("OppAccount", "Dashboards"));
            WaitUntil(driver, Control("OppContact", "Dashboards"), 30);
            int OppContact = Elements(driver, Control("OppContact", "Dashboards"));

            WaitUntil(driver, Control("Percreatedon", "Dashboards"), 30);
            int Percreatedon = Elements(driver, Control("Percreatedon", "Dashboards"));
            WaitUntil(driver, Control("PerEstimatedRevenue", "Dashboards"), 30);
            int PerEstimatedRevenue = Elements(driver, Control("PerEstimatedRevenue", "Dashboards"));
            WaitUntil(driver, Control("Perstatusreason", "Dashboards"), 30);
            int Perstatusreason = Elements(driver, Control("Perstatusreason", "Dashboards"));
            WaitUntil(driver, Control("Perowner", "Dashboards"), 30);
            int Perowner = Elements(driver, Control("Perowner", "Dashboards"));

            if (OppReference > 0 && OppCountry > 0 && Topic > 0 && OppAccount > 0 && OppContact > 0 && Percreatedon > 0 && PerEstimatedRevenue > 0 && Perstatusreason > 0 && Perowner > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "DB Header present", "DB Headers");

            }

            else
            {
                Assert.Fail("Column headers are missing");
            }
        }

        public void DashSalesAssistlastmonth(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            SelectValuesFromDropDown(driver, testInReport, testName, testDataIteration, "My Sales Assist for last calendar month");
            ThinkTime(2);
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "DB Header present", "DB Headers");

            WaitUntil(driver, Control("OppReference", "Dashboards"), 30);
            int OppReference = Elements(driver, Control("OppReference", "Dashboards"));
            WaitUntil(driver, Control("OppCountry", "Dashboards"), 30);
            int OppCountry = Elements(driver, Control("OppCountry", "Dashboards"));
            WaitUntil(driver, Control("OppName", "Dashboards"), 30);
            int Topic = Elements(driver, Control("OppName", "Dashboards"));
            WaitUntil(driver, Control("OppAccount", "Dashboards"), 30);
            int OppAccount = Elements(driver, Control("OppAccount", "Dashboards"));
            WaitUntil(driver, Control("OppContact", "Dashboards"), 30);
            int OppContact = Elements(driver, Control("OppContact", "Dashboards"));

            WaitUntil(driver, Control("Percreatedon", "Dashboards"), 30);
            int Percreatedon = Elements(driver, Control("Percreatedon", "Dashboards"));
            WaitUntil(driver, Control("PerEstimatedRevenue", "Dashboards"), 30);
            int PerEstimatedRevenue = Elements(driver, Control("PerEstimatedRevenue", "Dashboards"));
            WaitUntil(driver, Control("Perstatusreason", "Dashboards"), 30);
            int Perstatusreason = Elements(driver, Control("Perstatusreason", "Dashboards"));
            WaitUntil(driver, Control("Perowner", "Dashboards"), 30);
            int Perowner = Elements(driver, Control("Perowner", "Dashboards"));

            if (OppReference > 0 && OppCountry > 0 && Topic > 0 && OppAccount > 0 && OppContact > 0 && Percreatedon > 0 && PerEstimatedRevenue > 0 && Perstatusreason > 0 && Perowner > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "DB Header present", "DB Headers");

            }

            else
            {
                Assert.Fail("Column headers are missing");
            }
        }

        public void DashPotentialSalesAssist(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            SelectValuesFromDropDown(driver, testInReport, testName, testDataIteration, "My Potential Sales Assist for this calendar month");
            ThinkTime(2);
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "DB Header present", "DB Headers");

            WaitUntil(driver, Control("OppReference", "Dashboards"), 30);
            int OppReference = Elements(driver, Control("OppReference", "Dashboards"));
            WaitUntil(driver, Control("OppCountry", "Dashboards"), 30);
            int OppCountry = Elements(driver, Control("OppCountry", "Dashboards"));
            WaitUntil(driver, Control("OppName", "Dashboards"), 30);
            int Topic = Elements(driver, Control("OppName", "Dashboards"));
            WaitUntil(driver, Control("OppAccount", "Dashboards"), 30);
            int OppAccount = Elements(driver, Control("OppAccount", "Dashboards"));
            WaitUntil(driver, Control("OppContact", "Dashboards"), 30);
            int OppContact = Elements(driver, Control("OppContact", "Dashboards"));
            ThinkTime(2);
            scrollRight(driver, testInReport, testName, testDataIteration, "Scroll");
            ThinkTime(2);
            WaitUntil(driver, Control("Percreatedon", "Dashboards"), 30);
            int Percreatedon = Elements(driver, Control("Percreatedon", "Dashboards"));
            WaitUntil(driver, Control("PerEstimatedRevenue", "Dashboards"), 30);
            int PerEstimatedRevenue = Elements(driver, Control("PerEstimatedRevenue", "Dashboards"));
            WaitUntil(driver, Control("Perstatusreason", "Dashboards"), 30);
            int Perstatusreason = Elements(driver, Control("Perstatusreason", "Dashboards"));
            WaitUntil(driver, Control("Perowner", "Dashboards"), 30);
            int Perowner = Elements(driver, Control("Perowner", "Dashboards"));

            if (OppReference > 0 && OppCountry > 0 && Topic > 0 && OppAccount > 0 && OppContact > 0 && Percreatedon > 0 && PerEstimatedRevenue > 0 && Perstatusreason > 0 && Perowner > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "DB Header present", "DB Headers");

            }

            else
            {
                Assert.Fail("Column headers are missing");
            }
        }

        public void DashActivitiscolumns(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            //WaitUntil(driver, Control("DashActivities", "Dashboards"), 30);
            //int value1 = Elements(driver, Control("DashActivities", "Dashboards"));

            //if (value1 > 0)
            //{
            //    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Available KPIs are correct", "DashboardKPI");
            //    ThinkTime(2);
            //    ActionsClick(driver, Control("SalesMore1", "Dashboards"));
            //    ThinkTime(2);
            //    ActionsClick(driver, Control("SeeAllRecordAssociateBtn", "GenericOld"));
            //    ThinkTime(5);
            //}
            ThinkTime(5);
            int Activityduedate = Elements(driver, Control("Activityduedate", "Dashboards"));
            int Activitytype = Elements(driver, Control("Activitytype", "Dashboards"));
            int Activityregarding = Elements(driver, Control("Activityregarding", "Dashboards"));
            int Activityowner = Elements(driver, Control("Activityowner", "Dashboards"));
            int Activityphone = Elements(driver, Control("Activityphone", "Dashboards"));

            if (Activityphone > 0 && Activitytype > 0 && Activityregarding > 0 && Activityowner > 0 && Activityphone > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Available KPIs are correct", "DashboardKPI");
                ThinkTime(2);
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Available KPIs are correct", "DashboardKPI");
                ThinkTime(2);
                Assert.Fail("Column headers are incorrect");
            }
        }

        public void DashOpenleadscolumns(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(2);
            WaitUntil(driver, Control("DashLeads", "Dashboards"), 30);
            int value1 = Elements(driver, Control("DashLeads", "Dashboards"));

            //if (value1 > 0)
            //{
            //    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Available KPIs are correct", "DashboardKPI");
            //    ThinkTime(2);
            //    ActionsClick(driver, Control("LeadsMore1", "Dashboards"));
            //    ThinkTime(2);
            //    ActionsClick(driver, Control("SeeAllRecordAssociateBtn", "GenericOld"));
            //    ThinkTime(5);
            //}
            ThinkTime(2);
            WaitUntil(driver, Control("LeadName", "Dashboards"), 30);
            int LeadName = Elements(driver, Control("LeadName", "Dashboards"));
            int LeadStatus = Elements(driver, Control("LeadStatus", "Dashboards"));
            int LeadCreatedon = Elements(driver, Control("LeadCreatedon", "Dashboards"));

            if (LeadName > 0 && LeadStatus > 0 && LeadCreatedon > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Available KPIs are correct", "DashboardKPI");
                ThinkTime(2);
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Available KPIs are correct", "DashboardKPI");
                ThinkTime(2);
                Assert.Fail("Column headers are incorrect");
            }
        }

        public void Dashcallbackcolumns(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            WaitUntil(driver, Control("Dashcall", "Dashboards"), 30);
            int value1 = Elements(driver, Control("Dashcall", "Dashboards"));

            if (value1 > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Available KPIs are correct", "DashboardKPI");
                ThinkTime(2);
                ActionsClick(driver, Control("CallsMore1", "Dashboards"));
                ThinkTime(2);
                ActionsClick(driver, Control("SeeAllRecordAssociateBtn", "GenericOld"));
                ThinkTime(7);
            }
            int Activitytype = Elements(driver, Control("Activitytype", "Dashboards"));
            int CallsSubject = Elements(driver, Control("CallsSubject", "Dashboards"));
            int Activityregarding = Elements(driver, Control("Activityregarding", "Dashboards"));

            int Callto = Elements(driver, Control("Callto", "Dashboards"));
            int Activityduedate = Elements(driver, Control("Activityduedate", "Dashboards"));
            int Activityowner = Elements(driver, Control("Activityowner", "Dashboards"));


            if (Activitytype > 0 && CallsSubject > 0 && Activityregarding > 0 && Callto > 0 && Activityduedate > 0 && Activityowner > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Available KPIs are correct", "DashboardKPI");
                ThinkTime(2);
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Available KPIs are correct", "DashboardKPI");
                ThinkTime(2);
                Assert.Fail("Column headers are incorrect");
            }
        }

        public void DashOppcolumns(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            //HidingPureCloud(driver, testInReport, testName, testDataIteration);
            WaitUntil(driver, Control("Dashopps", "Dashboards"), 30);
            int value1 = Elements(driver, Control("Dashopps", "Dashboards"));

            if (value1 > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Available KPIs are correct", "DashboardKPI");
                ThinkTime(2);
                ActionsClick(driver, Control("OppMore1", "Dashboards"));
                ThinkTime(2);
                ActionsClick(driver, Control("SeeAllRecordAssociateBtn", "GenericOld"));
                ThinkTime(7);
            }
            int OppReference = Elements(driver, Control("OppReference", "Dashboards"));
            int OppCountry = Elements(driver, Control("OppCountry", "Dashboards"));
            int OppName = Elements(driver, Control("OppName", "Dashboards"));

            int OppAccount = Elements(driver, Control("OppAccount", "Dashboards"));
            int OppContact = Elements(driver, Control("OppContact", "Dashboards"));

            //scrollRight(driver, testInReport, testName, testDataIteration, "Scroll");
            int LeadCreatedon = Elements(driver, Control("LeadCreatedon", "Dashboards"));

            int LeadStatus = Elements(driver, Control("LeadStatus", "Dashboards"));
            int Activityowner = Elements(driver, Control("Activityowner", "Dashboards"));


            if (OppReference > 0 && OppCountry > 0 && OppName > 0 && OppAccount > 0 && OppContact > 0 && LeadCreatedon > 0 && LeadStatus > 0 && Activityowner > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Available KPIs are correct", "DashboardKPI");
                ThinkTime(2);
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Available KPIs are correct", "DashboardKPI");
                ThinkTime(2);
                Assert.Fail("Column headers are incorrect");
            }
        }

        public void Tourscompletedthismonth(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            WaitUntil(driver, Control("Tourscompletedthismonth", "Dashboards"), 30);
            int value1 = Elements(driver, Control("Tourscompletedthismonth", "Dashboards"));
            if (value1 > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Available KPIs are correct", "DashboardKPI");
                ThinkTime(2);
                ActionsClick(driver, Control("DBMore3header", "Dashboards"));
                ThinkTime(2);
                ActionsClick(driver, Control("SeeAllRecordAssociateBtn", "GenericOld"));
                ThinkTime(5);
            }

            WaitUntil(driver, Control("TourscompletedthismonthSubject", "Dashboards"), 30);
            int Subject = Elements(driver, Control("TourscompletedthismonthSubject", "Dashboards"));
            WaitUntil(driver, Control("TourscompletedthismonthCreatedby", "Dashboards"), 30);
            int Created = Elements(driver, Control("TourscompletedthismonthCreatedby", "Dashboards"));
            WaitUntil(driver, Control("TourscompletedthismonthOwner", "Dashboards"), 30);
            int Owner = Elements(driver, Control("TourscompletedthismonthOwner", "Dashboards"));
            WaitUntil(driver, Control("TourscompletedthismonthRegarding", "Dashboards"), 30);
            int Regarding = Elements(driver, Control("TourscompletedthismonthRegarding", "Dashboards"));
            WaitUntil(driver, Control("TourscompletedthismonthStatus", "Dashboards"), 30);
            int Status = Elements(driver, Control("TourscompletedthismonthStatus", "Dashboards"));
            WaitUntil(driver, Control("TourscompletedthismonthStarttime", "Dashboards"), 30);
            int Starttime = Elements(driver, Control("TourscompletedthismonthStarttime", "Dashboards"));
            WaitUntil(driver, Control("TourscompletedthismonthEndtime", "Dashboards"), 30);
            int Endtime = Elements(driver, Control("TourscompletedthismonthEndtime", "Dashboards"));
            WaitUntil(driver, Control("TourscompletedthismonthCentre", "Dashboards"), 30);
            int Centre = Elements(driver, Control("TourscompletedthismonthCentre", "Dashboards"));
            WaitUntil(driver, Control("TourscompletedthismonthDatecreated", "Dashboards"), 30);
            int Tourbooked = Elements(driver, Control("TourscompletedthismonthDatecreated", "Dashboards"));
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "DB Header present", "DB Headers");

            if (Subject > 0 && Created > 0 && Owner > 0 && Regarding > 0 && Status > 0 && Starttime > 0 && Endtime > 0 && Centre > 0 && Tourbooked > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "DB Header present", "DB Headers");

            }

            else
            {
                Assert.Fail("Column headers are missing");
            }
        }

        public void Tourscompletedlastmonth(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(5);
            SelectValuesFromDropDown(driver, testInReport, testName, testDataIteration, "Tours Completed last Calendar Month");
            ThinkTime(5);
            WaitUntil(driver, Control("TourscompletedthismonthSubject", "Dashboards"), 30);
            int Subject = Elements(driver, Control("TourscompletedthismonthSubject", "Dashboards"));
            WaitUntil(driver, Control("TourscompletedthismonthCreatedby", "Dashboards"), 30);
            int Created = Elements(driver, Control("TourscompletedthismonthCreatedby", "Dashboards"));
            WaitUntil(driver, Control("TourscompletedthismonthOwner", "Dashboards"), 30);
            int Owner = Elements(driver, Control("TourscompletedthismonthOwner", "Dashboards"));
            WaitUntil(driver, Control("TourscompletedthismonthRegarding", "Dashboards"), 30);
            int Regarding = Elements(driver, Control("TourscompletedthismonthRegarding", "Dashboards"));
            // WaitUntil(driver, Control("QualifiedOppthismonthstatusreason", "Dashboards"), 30);
            //  int Status = Elements(driver, Control("QualifiedOppthismonthstatusreason", "Dashboards"));
            WaitUntil(driver, Control("TourscompletedthismonthStarttime", "Dashboards"), 30);
            int Starttime = Elements(driver, Control("TourscompletedthismonthStarttime", "Dashboards"));
            WaitUntil(driver, Control("TourscompletedthismonthEndtime", "Dashboards"), 30);
            int Endtime = Elements(driver, Control("TourscompletedthismonthEndtime", "Dashboards"));
            WaitUntil(driver, Control("TourscompletedthismonthCentre", "Dashboards"), 30);
            int Centre = Elements(driver, Control("TourscompletedthismonthCentre", "Dashboards"));
            WaitUntil(driver, Control("TourscompletedthismonthDatecreated", "Dashboards"), 30);
            int Tourbooked = Elements(driver, Control("TourscompletedthismonthDatecreated", "Dashboards"));
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "DB Header present", "DB Headers");

            if (Subject > 0 && Created > 0 && Owner > 0 && Regarding > 0 && Starttime > 0 && Endtime > 0 && Centre > 0 && Tourbooked > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "DB Header present", "DB Headers");

            }

            else
            {
                Assert.Fail("Column headers are missing");
            }
        }


        public void Dealsnotwon(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            WaitUntil(driver, Control("Dealssignednotwon", "Dashboards"), 30);
            int value1 = Elements(driver, Control("Dealssignednotwon", "Dashboards"));
            if (value1 > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Available KPIs are correct", "DashboardKPI");
                ThinkTime(2);
                ActionsClick(driver, Control("DBMore4header", "Dashboards"));
                ThinkTime(2);
                ActionsClick(driver, Control("SeeAllRecordAssociateBtn", "GenericOld"));
                ThinkTime(5);
            }

            WaitUntil(driver, Control("DealssignednotwonTopic", "Dashboards"), 30);
            int Topic = Elements(driver, Control("DealssignednotwonTopic", "Dashboards"));
            WaitUntil(driver, Control("DealssignednotwonCustomer", "Dashboards"), 30);
            int Customer = Elements(driver, Control("DealssignednotwonCustomer", "Dashboards"));
            WaitUntil(driver, Control("Dealssignednotwonowner", "Dashboards"), 30);
            int Owner = Elements(driver, Control("Dealssignednotwonowner", "Dashboards"));
            WaitUntil(driver, Control("DealssignednotwonRevenue", "Dashboards"), 30);
            int Revenue = Elements(driver, Control("DealssignednotwonRevenue", "Dashboards"));
            WaitUntil(driver, Control("DealssignednotwonPeople", "Dashboards"), 30);
            int People = Elements(driver, Control("DealssignednotwonPeople", "Dashboards"));
            WaitUntil(driver, Control("DealssignednotwonCentre", "Dashboards"), 30);
            int Centre = Elements(driver, Control("DealssignednotwonCentre", "Dashboards"));
            WaitUntil(driver, Control("DealssignednotwonProduct", "Dashboards"), 30);
            int Product = Elements(driver, Control("DealssignednotwonProduct", "Dashboards"));

            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "DB Header present", "DB Headers");

            if (Topic > 0 && Customer > 0 && Owner > 0 && Revenue > 0 && People > 0 && Centre > 0 && Product > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "DB Header present", "DB Headers");

            }

            else
            {
                Assert.Fail("Column headers are missing");
            }

        }

        public void Dealswonthismonth(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            WaitUntil(driver, Control("Dealswonthismonth", "Dashboards"), 30);
            int value1 = Elements(driver, Control("Dealswonthismonth", "Dashboards"));
            if (value1 > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Available KPIs are correct", "DashboardKPI");
                ThinkTime(2);
                ActionsClick(driver, Control("DBMore5header", "Dashboards"));
                ThinkTime(2);
                ActionsClick(driver, Control("SeeAllRecordAssociateBtn", "GenericOld"));
                ThinkTime(5);
            }
            WaitUntil(driver, Control("DealssignednotwonTopic", "Dashboards"), 30);
            int Topic = Elements(driver, Control("DealssignednotwonTopic", "Dashboards"));
            WaitUntil(driver, Control("DealssignednotwonCustomer", "Dashboards"), 30);
            int Customer = Elements(driver, Control("DealssignednotwonCustomer", "Dashboards"));
            WaitUntil(driver, Control("Dealssignednotwonowner", "Dashboards"), 30);
            int Owner = Elements(driver, Control("Dealssignednotwonowner", "Dashboards"));
            WaitUntil(driver, Control("DealssignednotwonRevenue", "Dashboards"), 30);
            int Revenue = Elements(driver, Control("DealssignednotwonRevenue", "Dashboards"));
            WaitUntil(driver, Control("DealssignednotwonPeople", "Dashboards"), 30);
            int People = Elements(driver, Control("DealssignednotwonPeople", "Dashboards"));
            WaitUntil(driver, Control("DealssignednotwonCentre", "Dashboards"), 30);
            int Centre = Elements(driver, Control("DealssignednotwonCentre", "Dashboards"));
            WaitUntil(driver, Control("DealssignednotwonProduct", "Dashboards"), 30);
            int Product = Elements(driver, Control("DealssignednotwonProduct", "Dashboards"));

            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "DB Header present", "DB Headers");

            if (Topic > 0 && Customer > 0 && Owner > 0 && Revenue > 0 && People > 0 && Centre > 0 && Product > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "DB Header present", "DB Headers");

            }

            else
            {
                Assert.Fail("Column headers are missing");
            }

        }

        public void Dealswonlastmonth(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(5);
            SelectValuesFromDropDown(driver, testInReport, testName, testDataIteration, "Deals Won Last Month");
            ThinkTime(5);

            WaitUntil(driver, Control("DealssignednotwonTopic", "Dashboards"), 30);
            int Topic = Elements(driver, Control("DealssignednotwonTopic", "Dashboards"));
            WaitUntil(driver, Control("DealssignednotwonCustomer", "Dashboards"), 30);
            int Customer = Elements(driver, Control("DealssignednotwonCustomer", "Dashboards"));
            WaitUntil(driver, Control("Dealssignednotwonowner", "Dashboards"), 30);
            int Owner = Elements(driver, Control("Dealssignednotwonowner", "Dashboards"));
            WaitUntil(driver, Control("DealssignednotwonRevenue", "Dashboards"), 30);
            int Revenue = Elements(driver, Control("DealssignednotwonRevenue", "Dashboards"));
            WaitUntil(driver, Control("DealssignednotwonPeople", "Dashboards"), 30);
            int People = Elements(driver, Control("DealssignednotwonPeople", "Dashboards"));
            WaitUntil(driver, Control("DealssignednotwonCentre", "Dashboards"), 30);
            int Centre = Elements(driver, Control("DealssignednotwonCentre", "Dashboards"));
            WaitUntil(driver, Control("DealssignednotwonProduct", "Dashboards"), 30);
            int Product = Elements(driver, Control("DealssignednotwonProduct", "Dashboards"));

            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "DB Header present", "DB Headers");

            if (Topic > 0 && Customer > 0 && Owner > 0 && Revenue > 0 && People > 0 && Centre > 0 && Product > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "DB Header present", "DB Headers");

            }

            else
            {
                Assert.Fail("Column headers are missing");
            }
        }

        //Move to Assign a case
        public void AssigningCase(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string tab, string lookup, String team)
        {

            WaitUntil(driver, Control("Tablist", tab, "Generic"), 180);
            ElementHighlight(driver, Control("Tablist", tab, "Generic"));
            Element(driver, Control("Tablist", tab, "Generic")).Click();
            ThinkTime(2);
            ElementHighlight(driver, Control("AssignTeam", "Generic"));
            // WaitUntil(driver, Control("EnterData", "Generic"), 180);
            //ElementHighlight(driver, Control("EnterData", "Generic"));
            MoveToElement(driver, Control("AssignTeam", "Generic"));
            //   Element(driver, Control("AssignTeam", "Generic")).Click();
            ThinkTime(2);
            WaitUntil(driver, Control("lookup", "Generic"), 180);
            Element(driver, Control("lookup", "Generic")).Click();
            ThinkTime(2);
            ElementHighlight(driver, Control("EnterData", "Generic"));
            MoveToElement(driver, Control("EnterData", "Generic"));

            Element(driver, Control("EnterData", "Generic")).SendKeys(team);


            ThinkTime(3);
            Element(driver, Control("AssignSearchButton", "Generic")).Click();
            WaitUntil(driver, Control("SelectTeam", team, "Generic"), 180);
            Element(driver, Control("SelectTeam", team, "Generic")).Click();
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Team is assigned", "Assign Team");
            //Element(driver, Control("AssignSearchButton", "Generic")).Click();
            saveFooter(driver, testInReport, testName, testDataIteration);


        }


        //Method to assign a opportunity to another user.
        public void AssignOpportunity(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string AssignTo, string UserTeamName)
        {
            ThinkTime(3);

            if (AssignTo == "Team")
            {
                Element(driver, Control("OppUserTeamAssignButton", "Opportunity")).Click();
            }

            else
            {
                WaitUntil(driver, Control("OppOverFlowButtonClick", "Opportunity"), 180);
                Element(driver, Control("OppOverFlowButtonClick", "Opportunity")).Click();

                SelectanyOpportunitybutton(driver, testInReport, testName, testDataIteration, "Assign");
                ThinkTime(3);

                WaitUntil(driver, Control("OppAssignToInput", "Opportunity"), 180);
                Element(driver, Control("OppAssignToInput", "Opportunity")).Click();

                WaitUntil(driver, Control("OppUserTeamInput", "Opportunity"), 180);
                Element(driver, Control("OppUserTeamInput", "Opportunity")).Click();
                Element(driver, Control("OppUserTeamInput", "Opportunity")).SendKeys(UserTeamName);
                ThinkTime(7);
                Element(driver, Control("DropDownResultSelect", "Opportunity")).Click();

                Element(driver, Control("OppUserTeamAssignButton", "Opportunity")).Click();
            }

        }

        //Method to verify activity assign for sales agent.
        public void AssignActivitySales(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(3);

            SelectanyActivityHeaderbutton(driver, testInReport, testName, testDataIteration, "Assign");

            IAlert simpleAlert = driver.SwitchTo().Alert();

            string text = driver.SwitchTo().Alert().Text;

            simpleAlert.Accept();

            string AlertText = "User doesn't have privileges to assign!";

            if (AlertText == text)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Alert Verified", "Alert Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Alert Verification failed", "Alert Verification");
                Assert.Fail("Alert Verification Failed");

            }

        }


        //Method to assign activity sales.
        public void AssignActivitySales(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string AssignTo, string UserTeamName)
        {
            ThinkTime(3);

            if (AssignTo == "Team")
            {
                Element(driver, Control("OppUserTeamAssignButton", "Opportunity")).Click();
            }

            else
            {
                //WaitUntil(driver, Control("OppOverFlowButtonClick", "Opportunity"), 180);
                //Element(driver, Control("OppOverFlowButtonClick", "Opportunity")).Click();

                SelectanyActivityHeaderbutton(driver, testInReport, testName, testDataIteration, "Assign");
                ThinkTime(3);

                WaitUntil(driver, Control("OppAssignToInput", "Opportunity"), 180);
                Element(driver, Control("OppAssignToInput", "Opportunity")).Click();

                WaitUntil(driver, Control("OppUserTeamInput", "Opportunity"), 180);
                Element(driver, Control("OppUserTeamInput", "Opportunity")).Click();
                Element(driver, Control("OppUserTeamInput", "Opportunity")).SendKeys(UserTeamName);
                ThinkTime(7);
                Element(driver, Control("DropDownResultSelect", "Opportunity")).Click();

                Element(driver, Control("OppUserTeamAssignButton", "Opportunity")).Click();
            }

        }


        //Method to Update Acitivie and save .
        public void UpdateActiviy(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(3);

            WaitUntil(driver, Control("ActivityDuedateInput", "Opportunity"), 180);
            Element(driver, Control("ActivityDuedateInput", "Opportunity")).Click();

            WaitUntil(driver, Control("SelectActiveDueDate", "Opportunity"), 180);
            Element(driver, Control("SelectActiveDueDate", "Opportunity")).Click();

            WaitUntil(driver, Control("SaveActivityRecord", "Opportunity"), 180);
            Element(driver, Control("SaveActivityRecord", "Opportunity")).Click();

        }

        //Method to Navigate to regarding opportunity.
        public void NavigateToRegardingOpp(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(3);

            WaitUntil(driver, Control("NavigateToRelatedOpp", "Opportunity"), 180);
            Element(driver, Control("NavigateToRelatedOpp", "Opportunity")).Click();

        }

        //Method to assign Lead to another user.

        public string SelectingResolutionCase(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string selectedCaseindex)
        {
            ThinkTime(1);
            WaitUntil(driver, Control("CaseResolution", selectedCaseindex, "Generic"), 180);
            MoveToElement(driver, Control("selectCase", selectedCaseindex, "Generic"));
            Element(driver, Control("selectCase", selectedCaseindex, "Generic")).Click();
            ThinkTime(2);
            String caseNumber = Element(driver, Control("SelectCaseNumber", selectedCaseindex, "Generic")).Text.ToString();
            ThinkTime(3);
            return caseNumber;

        }


        public void NewLSCCreation(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, String Contact, String Type, string Product, string Category, string SubCategory, string Source, string SubSource, string Priority)
        {

            WaitUntil(driver, Control("LSCContactField", "Case"), 180);
            Element(driver, Control("ContactSearch", "Case")).Click();
            Element(driver, Control("LSCContactField", "Case")).SendKeys(Contact);
            ThinkTime(5);
            Element(driver, Control("ListContact", Contact, "Case")).Click();
            ThinkTime(5);
            WaitUntil(driver, Control("typeFieldLabel", "Case"), 30);
            Select(Element(driver, Control("typeFieldLabel", "Case"))).SelectByText(Type);
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "", "Type Field Entered");
            ThinkTime(5);
            Element(driver, Control("productFieldLabel", "Case")).SendKeys(Keys.Control + "a");
            Element(driver, Control("productFieldLabel", "Case")).SendKeys(Keys.Delete);
            Element(driver, Control("productFieldLabel", "Case")).SendKeys(Product);
            ThinkTime(2);
            Element(driver, Control("ListProduct", Product, "Case")).Click();
            ThinkTime(5);
            Element(driver, Control("categoryFieldLabel", "Case")).SendKeys(Keys.Control + "a");
            Element(driver, Control("categoryFieldLabel", "Case")).SendKeys(Keys.Delete);
            Element(driver, Control("categoryFieldLabel", "Case")).SendKeys(Category);
            ThinkTime(3);
            Element(driver, Control("ListCategory", Category, "Case")).Click();
            ThinkTime(5);
            Element(driver, Control("subcategoryFieldLabel", "Case")).SendKeys(Keys.Control + "a");
            Element(driver, Control("subcategoryFieldLabel", "Case")).SendKeys(Keys.Delete);
            Element(driver, Control("subcategoryFieldLabel", "Case")).SendKeys(Category);
            ThinkTime(3);
            Element(driver, Control("ListsubCategory", SubCategory, "Case")).Click();
            ThinkTime(5);
            Element(driver, Control("sourceFieldLabel", "Case")).SendKeys(Keys.Control + "a");
            Element(driver, Control("sourceFieldLabel", "Case")).SendKeys(Keys.Delete);
            Element(driver, Control("sourceFieldLabel", "Case")).SendKeys(Source);
            ThinkTime(3);
            Element(driver, Control("ListSource", Source, "Case")).Click();
            ThinkTime(5);
            Element(driver, Control("subSourceFieldLabel", "Case")).SendKeys(Keys.Control + "a");
            Element(driver, Control("subSourceFieldLabel", "Case")).SendKeys(Keys.Delete);
            Element(driver, Control("subSourceFieldLabel", "Case")).SendKeys(SubSource);
            ThinkTime(3);
            Element(driver, Control("ListSubSource", SubSource, "Case")).Click();
            ThinkTime(30);
            Select(Element(driver, Control("priorityFieldLabel", "Case"))).SelectByText(Priority);
            //ThinkTime(5);
            //HandlingEditPopUp(driver, testInReport, testName, testDataIteration);
            saveFooter(driver, testInReport, testName, testDataIteration);





        }

        public void verifyprocessstageqaulify(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string contactname)
        {
            ThinkTime(2);
            if (Elements(driver, Control("ProcessIndicatorQaulify", "36.1_Dashboard")) > 0)
            {
                MoveToElement(driver, Control("ProcessIndicatorQaulify", "36.1_Dashboard"));
                ThinkTime(3);
                Element(driver, Control("ProcessIndicatorQaulify", "36.1_Dashboard")).Click();
                ThinkTime(3);
                //WaitUntil(driver, Control("QualifyContactname", "36.1_Dashboard"), 180);
                //MoveToElement(driver, Control("QualifyContactname", "36.1_Dashboard"));
                //ThinkTime(3);
                //Element(driver, Control("QualifyContactname", "36.1_Dashboard")).SendKeys(contactname);
                //ThinkTime(3);
                WaitUntil(driver, Control("Qualifyprocesscontactname", contactname, "36.1_Dashboard"), 180);
                string populatedcontactname = Element(driver, Control("Qualifyprocesscontactname", contactname, "36.1_Dashboard")).GetAttribute("title").ToString();
                if (populatedcontactname == contactname)
                {
                    WaitUntil(driver, Control("NextStageButton", "Opportunity"), 180);
                    if (Elements(driver, Control("NextStageButton", "Opportunity")) > 0)
                    {
                        AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Processverification Success Opp record is in qualify stage", "Processverification");
                    }

                    else
                    {
                        AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Processverification Success Opp record is not in qualify stage", "Processverification");
                        Assert.Fail("Processverification Success Opp record is not in qualify stage");
                    }

                }
            }

        }

        public void verifyprocessstageqaulify1(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string contactname)
        {
            ThinkTime(2);
            if (Elements(driver, Control("ProcessIndicatorQaulify", "36.1_Dashboard")) > 0)
            {
                MoveToElement(driver, Control("ProcessIndicatorQaulify", "36.1_Dashboard"));
                ThinkTime(3);
                Element(driver, Control("ProcessIndicatorQaulify", "36.1_Dashboard")).Click();
                ThinkTime(3);


                WaitUntil(driver, Control("NextStageButton", "Opportunity"), 180);
                if (Elements(driver, Control("NextStageButton", "Opportunity")) > 0)
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Processverification Success Opp record is in qualify stage", "Processverification");
                }

                else
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Processverification Success Opp record is not in qualify stage", "Processverification");
                    Assert.Fail("Processverification Success Opp record is not in qualify stage");
                }


            }

        }


        public void EnterOppdetailsviaprocessstage(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string stage, string duration, string people, string durationvalue, string peoplevalue, string status)
        {
            ThinkTime(3);
            WaitUntil(driver, Control("SelectProcessstage", stage, "36.1_Dashboard"), 60);
            Element(driver, Control("SelectProcessstage", stage, "36.1_Dashboard")).Click();
            ThinkTime(3);
            WaitUntil(driver, Control("NextStageButton", "Opportunity"), 60);
            Element(driver, Control("NextStageButton", "Opportunity")).Click();
            ThinkTime(2);
            WaitUntil(driver, Control("Durationprocesstage", "Opportunity"), 60);
            Element(driver, Control("Durationprocesstage", "Opportunity")).Click();
            Element(driver, Control("Durationprocesstage", "Opportunity")).SendKeys(durationvalue);
            ThinkTime(3);
            //MoveToElement(driver, Control("SelectProcessstage", "Develop", "36.1_Dashboard"));
            //ThinkTime(1);
            //Element(driver, Control("SelectProcessstage", "Develop", "36.1_Dashboard")).Click();
            //ThinkTime(3);
            //MoveToElement(driver, Control("Enterprocessstagefieldvalues",people, "Opportunity"));
            //ThinkTime(1);
            ////Element(driver, Control("Enterprocessstagefieldvalues", people, "Opportunity")).Click();
            //Element(driver, Control("Enterprocessstagefieldvalues", people, "Opportunity")).SendKeys(peoplevalue);
            //ThinkTime(3);
            ThinkTime(2);
            WaitUntil(driver, Control("NextStageButton", "Opportunity"), 60);
            Element(driver, Control("NextStageButton", "Opportunity")).Click();
            ThinkTime(2);
            WaitUntil(driver, Control("PaymentRecieved", "36.1_Dashboard"), 30);
            Element(driver, Control("PaymentRecieved", "36.1_Dashboard")).Click();
            ThinkTime(2);
            WaitUntil(driver, Control("NextStageButton", "Opportunity"), 60);
            Element(driver, Control("NextStageButton", "Opportunity")).Click();
            ThinkTime(3);
            ThinkTime(3);
            WaitUntil(driver, Control("SelectProcessstage", stage, "36.1_Dashboard"), 60);
            Element(driver, Control("SelectProcessstage", stage, "36.1_Dashboard")).Click();
            //Element(driver, Control("SelectProcessstageNew", status, "36.1_Dashboard")).Click();
            //ThinkTime(3);
            //Element(driver, Control("Finishprocesstage", "36.1_Dashboard")).Click();
            ThinkTime(2);
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Completed as Won", "Completed as Won");
        }

        public void VerifyProposestage(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string stage, string duration, string people, string durationvalue, string peoplevalue, string status)
        {
            ThinkTime(15);

            MoveToElement(driver, Control("SelectQualifybutton", stage, "36.1_Dashboard"));
            ThinkTime(3);
            Element(driver, Control("SelectQualifybutton", stage, "36.1_Dashboard")).Click();
            ThinkTime(3);

            Element(driver, Control("NextStageButton", "Opportunity")).Click();
            ThinkTime(2);

            MoveToElement(driver, Control("Enterprocessstagefieldvalues", duration, "Opportunity"));
            ThinkTime(3);
            Element(driver, Control("Enterprocessstagefieldvalues", duration, "Opportunity")).Click();
            ThinkTime(3);
            Element(driver, Control("Enterprocessstagefieldvalues", duration, "Opportunity")).SendKeys(durationvalue);
            ThinkTime(3);


            MoveToElement(driver, Control("Enterprocessstagefieldvaluespeople", "Opportunity"));
            ThinkTime(3);
            Element(driver, Control("Enterprocessstagefieldvaluespeople", "Opportunity")).Click();
            ThinkTime(3);
            Element(driver, Control("Enterprocessstagefieldvaluespeople", "Opportunity")).SendKeys(peoplevalue);
            ThinkTime(3);

            Element(driver, Control("NextStageButton", "Opportunity")).Click();
            ThinkTime(5);
            WaitUntil(driver, Control("PaymentRecieved", "36.1_Dashboard"), 120);
            Element(driver, Control("paymentreceivedyes", "36.1_Dashboard")).Click();

            ThinkTime(3);

            Element(driver, Control("NextStageButton", "Opportunity")).Click();

            ThinkTime(2);

            WaitUntil(driver, Control("Finishprocesstage", "36.1_Dashboard"), 30);
            Element(driver, Control("Finishprocesstage", "36.1_Dashboard")).Click();
            SelectanyOpportunitybutton(driver, testInReport, testName, testDataIteration, "Refresh");
            //if (Elements(driver, Control("PaymentReceivedcheckboxfalse", "36.1_Dashboard")) > 0)
            //{
            //    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Payment feild is false", "Payment feild is false");

            //}

            //else
            //{
            //    Assert.Fail("Payment feild is true");

            //}
            //ThinkTime(3);

        }

        //Verify Centre in Tour stage in Opportunity
        public void VerifyCentreinTourSatge(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {

            ThinkTime(3);
            WaitUntil(driver, Control("TourStage", "36.1_Dashboard"), 30);
            MoveToElement(driver, Control("TourStage", "36.1_Dashboard"));
            Element(driver, Control("TourStage", "36.1_Dashboard")).Click();
            ThinkTime(3);
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Tour Stage Selected", "Process Flow verification");
            ThinkTime(2);

            WaitUntil(driver, Control("BusinesscentreSelected", "36.1_Dashboard"), 30);
            MoveToElement(driver, Control("BusinesscentreSelected", "36.1_Dashboard"));
            Element(driver, Control("BusinesscentreSelected", "36.1_Dashboard")).Click();
            ThinkTime(5);
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Business centre in Tour Selecetd", "Process flow verification");
            ThinkTime(3);

            WaitUntil(driver, Control("OrganizationalUnit", "36.1_Dashboard"), 30);
            MoveToElement(driver, Control("OrganizationalUnit", "36.1_Dashboard"));
            if (Elements(driver, Control("OrganizationalUnit", "36.1_Dashboard")) > 0)
            {
                Element(driver, Control("OrganizationalUnit", "36.1_Dashboard"));
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Business centre in Tour Selecetd", "Process flow verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Not an Organizational unit", "Process flow verification");
                Assert.Fail("Organizational unit verified");
            }

        }

        public void VerifyProposestageforPRNo(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string stage, string duration, string people, string durationvalue, string peoplevalue, string status)
        {
            ThinkTime(2);
            WaitUntil(driver, Control("SelectQualifybutton", stage, "36.1_Dashboard"), 120);
            MoveToElement(driver, Control("SelectQualifybutton", stage, "36.1_Dashboard"));
            ThinkTime(3);
            Element(driver, Control("SelectQualifybutton", stage, "36.1_Dashboard")).Click();
            ThinkTime(3);

            Element(driver, Control("NextStageButton", "Opportunity")).Click();
            ThinkTime(2);

            MoveToElement(driver, Control("Enterprocessstagefieldvalues", duration, "Opportunity"));
            ThinkTime(3);
            Element(driver, Control("Enterprocessstagefieldvalues", duration, "Opportunity")).Click();
            ThinkTime(3);
            Element(driver, Control("Enterprocessstagefieldvalues", duration, "Opportunity")).SendKeys(durationvalue);
            ThinkTime(3);


            MoveToElement(driver, Control("Enterprocessstagefieldvaluespeople", "Opportunity"));
            ThinkTime(3);
            Element(driver, Control("Enterprocessstagefieldvaluespeople", "Opportunity")).Click();
            ThinkTime(3);
            Element(driver, Control("Enterprocessstagefieldvaluespeople", "Opportunity")).SendKeys(peoplevalue);
            ThinkTime(3);

            Element(driver, Control("NextStageButton", "Opportunity")).Click();
            //ThinkTime(5);
            //WaitUntil(driver, Control("PaymentRecieved", "36.1_Dashboard"), 120);
            //Element(driver, Control("paymentreceivedyes", "36.1_Dashboard")).Click();

            ThinkTime(3);

            Element(driver, Control("NextStageButton", "Opportunity")).Click();

            ThinkTime(2);
            //if (Elements(driver, Control("PaymentReceivedcheckboxfalse", "36.1_Dashboard")) > 0)
            //{
            //    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Payment feild is false", "Payment feild is false");

            //}

            //else
            //{
            //    Assert.Fail("Payment feild is true");

            //}
            //ThinkTime(3);

        }

        public void VerifyProposestagewon(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string stage, string duration, string people, string durationvalue, string peoplevalue, string status)
        {
            ThinkTime(5);
            WaitUntil(driver, Control("SelectProcessstage", stage, "36.1_Dashboard"), 30);
            MoveToElement(driver, Control("SelectProcessstage", stage, "36.1_Dashboard"));
            ThinkTime(3);
            Element(driver, Control("SelectProcessstage", stage, "36.1_Dashboard")).Click();
            ThinkTime(2);
            WaitUntil(driver, Control("NextStageButton", "Opportunity"), 30);
            Element(driver, Control("NextStageButton", "Opportunity")).Click();
            ThinkTime(2);

            MoveToElement(driver, Control("Enterprocessstagefieldvalues", "36.1_Dashboard"));
            ThinkTime(3);
            Element(driver, Control("Enterprocessstagefieldvalues", duration, "Opportunity")).Click();
            ThinkTime(3);
            Element(driver, Control("Enterprocessstagefieldvalues", duration, "Opportunity")).SendKeys(durationvalue);
            ThinkTime(3);

            MoveToElement(driver, Control("Enterprocessstagefieldvaluespeople", "Opportunity"));
            ThinkTime(3);
            Element(driver, Control("Enterprocessstagefieldvaluespeople", "Opportunity")).Click();
            ThinkTime(3);
            Element(driver, Control("Enterprocessstagefieldvaluespeople", "Opportunity")).SendKeys(peoplevalue);
            ThinkTime(3);

            ThinkTime(2);
            WaitUntil(driver, Control("NextStageButton", "Opportunity"), 30);
            Element(driver, Control("NextStageButton", "Opportunity")).Click();
            ThinkTime(5);
            WaitUntil(driver, Control("PaymentRecieved", "36.1_Dashboard"), 30);
            Element(driver, Control("PaymentRecieved", "36.1_Dashboard")).Click();
            ThinkTime(2);
            WaitUntil(driver, Control("NextStageButton", "Opportunity"), 30);
            Element(driver, Control("NextStageButton", "Opportunity")).Click();
            ThinkTime(2);
            WaitUntil(driver, Control("Finishprocesstage", "36.1_Dashboard"), 30);
            Element(driver, Control("Finishprocesstage", "36.1_Dashboard")).Click();
            SelectanyOpportunitybutton(driver, testInReport, testName, testDataIteration, "Refresh");


        }

        public void FilterResultswithadditionalfilter(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string LookFor, string selectkey, string condition, string value, string parentwindow)
        {
            //string parentWindowHandle = driver.CurrentWindowHandle;
            //WindowHandling(driver);
            //driver.Manage().Window.Maximize();
            ThinkTime(9);
            SwitchToFrame(driver, "contentIFrame0");
            Select(Element(driver, Control("Looksfordrop", "Generic"))).SelectByText(LookFor);
            ThinkTime(2);
            //  Select(Element(driver, Control("LookforSaved", "Generic"))).SelectByText(SavedView);
            MoveToElement(driver, Control("advFindEmptyField", "36.1_Dashboard"));
            ThinkTime(5);

            MoveToElement(driver, Control("AdvanceFindselectoption", "36.1_Dashboard"));
            ThinkTime(3);
            Element(driver, Control("Advanvedindselectvalue", "36.1_Dashboard")).SendKeys(selectkey);
            ThinkTime(4);

            ElementHighlight(driver, Control("AdvanceFindconditionoption", "36.1_Dashboard"));
            ThinkTime(2);
            Element(driver, Control("AdvanceFindconditionoption", "36.1_Dashboard")).Click();
            ThinkTime(2);
            Select(Element(driver, Control("AdvanceFindconditionoption", "36.1_Dashboard"))).SelectByValue(condition);
            ThinkTime(2);

            MoveToElement(driver, Control("AdvanceFindadditionalvalue", "36.1_Dashboard"));
            //  Element(driver, Control("AdvancedFindinputvalue", "36.1_Dashboard")).Click();
            Element(driver, Control("AdvancedFindinputvalue", "36.1_Dashboard")).SendKeys(value);

            ThinkTime(2);

            driver.SwitchTo().DefaultContent();
            Element(driver, Control("Results", "Generic")).Click();

            ThinkTime(5);
            SwitchToFrame(driver, "contentIFrame0");
            SwitchToFrame(driver, "resultFrame");
            ThinkTime(2);
            MoveToElement(driver, Control("AdvanceFindSortbykey", "36.1_Dashboard"));
            Element(driver, Control("AdvanceFindSortbykey", "36.1_Dashboard")).Click();
            ThinkTime(2);
            Element(driver, Control("ITSalesSilentOlderThanValue", "36.1_Dashboard")).Click();
            ThinkTime(2);
            WindowHandling(driver);
            driver.Manage().Window.Maximize();
            if (Elements(driver, Control("Populatedkeyvalue", "36.1_Dashboard")) > 0)
            {
                WaitUntil(driver, Control("Defaultvaluepopulated", "36.1_Dashboard"), 360);
                string valuedisplayed = Element(driver, Control("Defaultvaluepopulated", "36.1_Dashboard")).GetAttribute("defaultValue");
                if (valuedisplayed == "14")
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Key value verification", "Value displayed as 10");

                }
                else
                {
                    Assert.Fail("Incorrect value is displayed");
                }
            }

            else
            {
                Assert.Fail("ITSalesSilentOlderThanValue key is not displayed");
            }
            // driver.Close();
            // WindowHandling(driver);
            // driver.Close();
            driver.SwitchTo().Window(parentwindow);
            ThinkTime(3);
            // driver.SwitchTo().DefaultContent();
        }











        public void FilterResults(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string LookFor, string SavedView, string casenumber)
        {
            ThinkTime(3);
            SwitchToFrame(driver, "contentIFrame0");
            Select(Element(driver, Control("Looksfordrop", "Generic"))).SelectByText(LookFor);
            ThinkTime(3);
            Select(Element(driver, Control("LookforSaved", "Generic"))).SelectByText(SavedView);
            ThinkTime(2);
            driver.SwitchTo().DefaultContent();
            Element(driver, Control("Results", "Generic")).Click();

            /*  driver.SwitchTo().DefaultContent();
              string parentWindowHandle = driver.CurrentWindowHandle;
              WindowHandling(driver);
              driver.Manage().Window.Maximize();
              ThinkTime(5);
              //SwitchToFrame(driver, "contentIFrame0");
              MoveToElement(driver, Control("Looksfordrop", "Generic"));
              Element(driver, Control("Looksfordrop", "Generic")).Click();
              Element(driver, Control("Looksfordrop", LookFor, "Generic")).Click();
              ThinkTime(5);

              MoveToElement(driver, Control("SavedView", "AdvanceFind"));
              Element(driver, Control("SavedView", "AdvanceFind")).Click();
              Element(driver, Control("LookForOption", SavedView, "AdvanceFind")).Click();
              ThinkTime(5);
              driver.SwitchTo().DefaultContent();
              MoveToElement(driver, Control("Results", "Generic"));
              Element(driver, Control("Results", "Generic")).Click();
              */
            ThinkTime(5);
            SwitchToFrame(driver, "contentIFrame0");
            SwitchToFrame(driver, "resultFrame");
            ThinkTime(2);

            MoveToElement(driver, Control("SelectRecord", "Generic"));
            ActionsDoubleClick(driver, Control("SelectRecord", "Generic"));

        }


        public void VerifyServiceProvider(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {

            driver.SwitchTo().DefaultContent();
            string parentWindowHandle = driver.CurrentWindowHandle;
            WindowHandling(driver);
            driver.Manage().Window.Maximize();
            ThinkTime(5);
            scrollDownaccounts(driver, testInReport, testName, testDataIteration);
            scrollDownaccounts(driver, testInReport, testName, testDataIteration);

            //WaitUntil(driver, Control("Serviceproviderenabledverify", "AdvanceFind"), 180);
            //MoveToElement(driver, Control("Serviceproviderenabledverify", "AdvanceFind"));
            int serviceProvider = Elements(driver, Control("Serviceproviderenabledverify", "Generic"));

            if (serviceProvider > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Service provider is in Yes Condition", "Service provider is in Yes Condition");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Service provider is not in Yes Condition", "Service provider is not in Yes Condition");
                Assert.Fail("Service provider is not in Yes Condition");
            }

        }

        public void ComparingCaseReactivationCount(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string status, int Count1, int Count2)
        {




            switch (status)
            {
                case "Increment":

                    if (Count2 != Count1 + 1)
                    {
                        AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Case Reactivation Count verification  is not successfull", "Case Reactivation");
                        Assert.Fail("Reactivation Count is not updated by one");
                    }

                    else
                    {

                        AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Case Reactivation Count verification  is  successfull", "Case Reactivation");

                    }

                    break;

                case "No change":

                    if (Count2 != Count1)
                    {
                        AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Case Reactivation Count verification is not successfull", "Case Reactivation");
                        Assert.Fail("Reactivation Count is updated by one without reopening");

                    }

                    else
                    {
                        AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Case Reactivation Count verification  is successfull", "Case Reactivation");
                    }

                    break;

                default:
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "No proper staus passed", "Unexpected Status");
                    Assert.Fail("No proper status passed");
                    break;

            }




        }

        public void HandleIgnoreandSavepopup(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(3);
            try
            {

                if (Elements(driver, Control("Ignoresavepopup", "Generic")) > 0)
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Ignore and Save pop up displayed", "Ignore and save");
                    Element(driver, Control("Ignoresavebutton", "Generic")).Click();
                    ThinkTime(3);
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Ignore and Save pop up closed", "Ignore and save closed");
                }

                else
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Pop Up element button is not visible ", "Not clicked correctly");
                    Assert.Fail("Issue on finding the Pop Up element");
                }
            }

            catch (Exception e)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Info", "No Ignore and save window to handle", " ");
            }
        }


        public string ChangingDateTimeFormatAF(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string givenDate)
        {



            String date1 = (givenDate.Substring(0, givenDate.Length - 10));
            String date2 = (givenDate.Substring(givenDate.Length - 6, 2));
            String date = date1 + " " + date2;
            return date;
        }

        public void ComparingTwoStrings(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string verification, string value1, string value2)
        {

            Console.WriteLine("creationdate" + value1);

            Console.WriteLine("AdvanceFindd" + value2);


            if (value1 == value2)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", verification + " worked successly", "Comparison");

            }

            else
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Fail", verification + " failed", "Comparison");
                Assert.Fail("Different values passed");

            }

        }




        /// <summary>
        /// 
        /// </summary>
        /// <param name="driver"></param>
        /// <param name="testInReport"></param>
        /// <param name="testName"></param>
        /// <param name="testDataIteration"></param>
        /// <param name="verification"></param>
        /// <param name="value1"></param>
        /// <param name="value2"></param>
        public void VerifyStatusCreationDate(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string verification, string value1, string value2)
        {
            Console.WriteLine("Value1 " + value1);
            Console.WriteLine("Value2 " + value2);


            if (value1 == value2)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", verification + " worked successly", "Comparison");

            }

            else
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Actual Creation Date & time from case is " + value1 + " and value from Advance find is " + value2, "Comparison Failed");
                Assert.Fail("Different values passed");

            }

        }



        public void VerifySearchResults(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string casenumber, string status, string creationdate)
        {

            string result = status + " " + "-" + " " + creationdate;

            if (!FindElements(driver, Control("SearchResult", "Generic"), testInReport, testName, testDataIteration, result))
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Search Results are incorrect", "SearchResults");
                Assert.Fail("Incorrect Search Results");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Search Results are correct", "SearchResults");
            }


        }


        //Selecting Category Serch from search page
        public void RelevantSearchCaseTimeStatusFetch(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string casenumber, string status, string creationdate)
        {

            string result = status + " " + "-" + " " + creationdate;

            if (!FindElements(driver, Control("SearchResult", "Generic"), testInReport, testName, testDataIteration, result))
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Search Results are incorrect", "SearchResults");
                Assert.Fail("Incorrect Search Results");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Search Results are correct", "SearchResults");
            }


        }



        //For selecting Relavant or Categorized search
        public void selectSearch(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string search, string casenumber, string category)
        {
            ThinkTime(30);
            Element(driver, Control("SearchSelectbox", "Generic")).Click();
            Element(driver, Control("SearchSelect", search, "Generic")).Click();
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", search + " search selected", "SearchSelection");
            WaitUntil(driver, Control("SearchBoxCS", "Generic"), 180);
            Element(driver, Control("SearchBoxCS", "Generic")).SendKeys(casenumber);
            if (search == "Categorized Search")
            {
                Element(driver, Control("FilterbuttonCS", "Generic")).Click();
                Element(driver, Control("FiteronOptionCS", category, "Generic")).Click();
                Element(driver, Control("SearchButtonCS", "Generic")).Click();
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", " search button clicked", "Search button");
            }
            else
            {
                Element(driver, Control("SearchbuttonRS", "Generic")).Click();
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", " search button clicked", "Search button");

            }


        }


        //For selecting Relavant or Categorized search
        public String VerifySearchResultGlobalSearch(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string casenumber, String type)
        {
            String StatusDateTime = "No Status & Date and Time";
            ThinkTime(3);
            switch (type)
            {
                case "Categorized Search":
                    {
                        if (Elements(driver, Control("CaseCSresult", casenumber, "Generic")) > 0)
                        {
                            AddLog(driver, testInReport, testName, testDataIteration, "Pass", casenumber + " listed correctly", "Case search result");
                            if (Elements(driver, Control("CaseCSStatusTime", casenumber, "Generic")) > 0)
                            {
                                AddLog(driver, testInReport, testName, testDataIteration, "Pass", casenumber + "status & creation date entry is diplayed", "Case search result");
                                StatusDateTime = Element(driver, Control("CaseCSStatusTime", casenumber, "Generic")).Text.ToString();
                            }
                            else
                            {
                                AddLog(driver, testInReport, testName, testDataIteration, "Fail", casenumber + "status & creation date entry is missing", "Case search result missing");
                                Assert.Fail(casenumber + "status & creation date entry is missing");

                            }
                        }
                        else
                        {
                            AddLog(driver, testInReport, testName, testDataIteration, "Fail", casenumber + " not listed correctly", "SearchSelection");
                            Assert.Fail("Search Result is not showing correctly");
                        }
                    }
                    break;

                case "Relevant Search":
                    {
                        if (Elements(driver, Control("CaseRSresult", casenumber, "Generic")) > 0)
                        {
                            AddLog(driver, testInReport, testName, testDataIteration, "Pass", casenumber + " listed correctly", "Case search result");
                            if (Elements(driver, Control("CaseRSstatusTime", casenumber, "Generic")) > 0)
                            {
                                AddLog(driver, testInReport, testName, testDataIteration, "Pass", casenumber + "status & creation date entry is diplayed", "Case search result");
                                StatusDateTime = Element(driver, Control("CaseRSstatusTime", casenumber, "Generic")).Text.ToString();
                            }
                            else
                            {
                                AddLog(driver, testInReport, testName, testDataIteration, "Fail", casenumber + "status & creation date entry is missing", "Case search result missing");
                                Assert.Fail(casenumber + "status & creation date entry is missing");

                            }
                        }
                        else
                        {
                            AddLog(driver, testInReport, testName, testDataIteration, "Fail", casenumber + " result entry is missing", "Case search result missing");
                            Assert.Fail(casenumber + " result entry is missing");
                        }
                    }
                    break;

                default:
                    {
                        AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Incorrect Search type", "Incorrect search Type");
                        Assert.Fail("Incorrect Search type");
                    }
                    break;
            }
            return StatusDateTime;

        }



        public string SaveCreationDateTime(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {

            WaitUntil(driver, Control("createdOn", "Generic"), 30);
            string date = Element(driver, Control("createdOn", "Generic")).GetAttribute("value");
            string time = Element(driver, Control("CreatedTime", "CaseForms")).GetAttribute("value");
            String dateTime = (date + " " + time).ToString();
            dateTime.Trim();
            return dateTime;
        }


        public string SaveCreationDate(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {

            WaitUntil(driver, Control("createdOn", "Generic"), 30);
            string s = Element(driver, Control("createdOn", "Generic")).GetAttribute("value");

            return s;
        }

        public string CreationDate_Centrecase(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            WaitUntil(driver, Control("CreatedDate_Centre", "CaseForms"), 30);
            string s = Element(driver, Control("CreatedDate_Centre", "CaseForms")).Text;
            return s;


        }


        public string DateConvertion(string Input)
        {
            var date = DateTime.ParseExact(Input, "dd/M/yyyy hh:mm:ss tt",
                                            CultureInfo.InvariantCulture);

            return date.ToString("yyyy-MM-dd");
        }

        public string DateConvertionNew(string Input)
        {
            var date = DateTime.ParseExact(Input, "dd/M/yyyy hh:mm:ss",
                                            CultureInfo.InvariantCulture);

            return date.ToString("MMM dd");
        }


        public void contactvalidation(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, String Contact, String LName)
        {

            saveFooter(driver, testInReport, testName, testDataIteration);
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Mandatory Field", "Manadatory Message displayed for Category Field");

            driver.SwitchTo().DefaultContent();
            ThinkTime(3);
            WaitUntil(driver, Control("contactFieldInput", "Generic"), 90);
            Element(driver, Control("contactFieldInput", "Generic")).Click();
            Element(driver, Control("LSCContactField", "CaseForms")).SendKeys(Contact);
            WaitUntil(driver, Control("ContactNewLookup", "Generic"), 90);
            Element(driver, Control("ContactNewLookup", "Generic")).Click();
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Quick create contact", "Create Quick contact lookup");
            WaitUntil(driver, Control("QuickContactSaveAndClose", "Generic"), 90);
            Element(driver, Control("QuickContactSaveAndClose", "Generic")).Click();
            WaitUntil(driver, Control("LastnameError", "Generic"), 60);
            IsDisplayed(driver, testInReport, testName, testDataIteration, "LastnameError");
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Last name error message is displayed", "Lastname Error");
            WaitUntil(driver, Control("ContactLastName", "Generic"), 90);
            Element(driver, Control("ContactLastName", "Generic")).Click();
            Element(driver, Control("ContactLastName", "Generic")).Clear();
            Element(driver, Control("ContactLastName", "Generic")).SendKeys(LName);
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Last name value passed", "Lastname Value");
            WaitUntil(driver, Control("QuickContactSaveAndClose", "Generic"), 90);
            Element(driver, Control("QuickContactSaveAndClose", "Generic")).Click();
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Contact saved", "Contact saved");
        }


        /// <summary>
        /// Method to check the case status
        /// </summary>
        /// <param name="driver"></param>
        /// <param name="testInReport"></param>
        /// <param name="testName"></param>
        public void SelectLookUpOption(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string fieldElement, string lookUpElement, string option)
        {
            WaitUntil(driver, Control(fieldElement, "CaseForms"), 240);
            MoveToElement(driver, Control(fieldElement, "CaseForms"));
            Element(driver, Control(fieldElement, "CaseForms")).SendKeys(Keys.Control + "a");
            Element(driver, Control(fieldElement, "CaseForms")).SendKeys(Keys.Delete);
            Element(driver, Control(fieldElement, "CaseForms")).SendKeys(option);
            ThinkTime(5);
            MoveToElement(driver, Control(lookUpElement, option, "CaseForms"));
            ActionsClick(driver, Control(lookUpElement, option, "CaseForms"));
            ThinkTime(5);
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", option + " selection working properly", "SubCategory Selection");
        }


        /// <summary>
        /// Method to check the case status
        /// </summary>
        /// <param name="driver"></param>
        /// <param name="testInReport"></param>
        /// <param name="testName"></param>

        public void VerifyOpportunityEditable(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {

            VerifyETCaseiseditableCheck(driver, testInReport, testName, testDataIteration, "subsource", "Billing System (Titan)", "Subsource");

        }

        //Verify ET Case is editable

        public void VerifyETCaseiseditableCheck(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string field, string Product, string field2)
        {

            if (Elements(driver, Control("Editablefieldlist", field, "CaseActivities")) < 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", field + " is not editable", "EditableFields");
                Assert.Fail("Case fields are not editable");
            }

            else
            {
                SelectLookUpOption(driver, testInReport, testName, testDataIteration, "Fieldclear", "ListProduct", field, Product, field2);
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", field + " is editable", "EditableFields");

            }
        }



        //gokul
        /// <summary>
        /// Method to check the case status
        /// </summary>


        public void SelectLookUpOption(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string fieldElement, string lookUpElement, string option, string data, string option2)
        {


            WaitUntil(driver, Control("Selectrow", option, "CaseForms"), 240);
            MoveToElement(driver, Control("Selectrow", option, "CaseForms"));
            ThinkTime(4);
            Element(driver, Control("Deletedata", option, "CaseForms")).Click();
            WaitUntil(driver, Control(fieldElement, option2, "CaseForms"), 240);
            MoveToElement(driver, Control(fieldElement, option2, "CaseForms"));
            Element(driver, Control(fieldElement, option2, "CaseForms")).SendKeys(data);
            ThinkTime(5);
            Element(driver, Control("Selectelement", option, "CaseForms")).Click();

            AddLog(driver, testInReport, testName, testDataIteration, "Pass", option + " selection working properly", "SubCategory Selection");
        }



        //Sales
        //Generic function to select any of the tabs in opportunity form

        public void SelectOpportunityTab(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string tab)
        {
            ThinkTime(2);
            WaitUntil(driver, Control("OpportunityTabs", tab, "Generic"), 360);
            Element(driver, Control("OpportunityTabs", tab, "Generic")).Click();
            ThinkTime(3);
        }




        public void selectrelatedtablist(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string tab)
        {
            ThinkTime(10);
            WaitUntil(driver, Control("Relatedlist", tab, "Generic"), 360);
            Element(driver, Control("Relatedlist", tab, "Generic")).Click();
            ThinkTime(3);
        }


        //Generic function to identify the BPF State
        public string VerifyBPFinOpportunityScreen(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(2);
            WaitUntil(driver, Control("BPFStage", "Opportunity"), 60);
            string s = Element(driver, Control("BPFStage", "Opportunity")).Text.ToString();
            AddLog(driver, testInReport, testName, testDataIteration, "Info", "BPF Stage is" + s, "BPFStage");
            return s;

        }


        //Generic function to verify sales pipeline field in Phone call is same as opportunity page
        public void VerifySalesPipeline(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string stage)
        {

            WaitUntil(driver, Control("SalesPipelineField", "Opportunity"), 30);
            scrollVerticalMiddle(driver, testInReport, testName, testDataIteration, "PhoneCallScroll");

            if (Element(driver, Control("SalesPipelineField", "Opportunity")).GetAttribute("value").Contains(stage))
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Sales Pipeline value is" + stage, "SalesPipeline");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Sales Pipeline value is not" + stage, "SalesPipeline");
                Assert.Fail("Sales Pipeline value in activity is not the same as Opportunity");
            }

        }



        public void Verifytourowner(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string Field)

        {
            ThinkTime(2);
            WaitUntil(driver, Control("verifytourowner", Field, "Generic"), 40);
            MoveToElement(driver, Control("verifytourowner", Field, "Generic"));
            ElementHighlight(driver, Control("verifytourowner", Field, "Generic"));

            if (Elements(driver, Control("verifytourowner", Field, "Generic")) > 0)
            {


                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Tourownerverified ", "Tour owner");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "fail", "Tourowner is wrong ", "Tour owner");
                Assert.Fail("Tour owner is wrong");
            }
        }



        //Generic function to select related tab and navigate to entities.
        public void SelectRelatedTab(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string Field)
        {
            ThinkTime(2);
            WaitUntil(driver, Control("RelatedTab1", "Generic"), 40);
            Element(driver, Control("RelatedTab1", "Generic")).Click();

            ThinkTime(2);
            WaitUntil(driver, Control("RelatedTabFields", Field, "Generic"), 40);
            Element(driver, Control("RelatedTabFields", Field, "Generic")).Click();

            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Navigated to Related tab ", "Tab navigation");
        }


        //Generic function to open a tour record.

        public void OpenTourRecord(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {

            WaitUntil(driver, Control("SelectTourRecord", "Generic"), 180);
            MoveToElement(driver, Control("SelectTourRecord", "Generic"));
            Element(driver, Control("SelectTourRecord", "Generic")).Click();

            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Tour record opened successfully", "Open Tour record");
        }

        //verify City field in tour record.

        public void VerifyCityFieldTourRecord(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            WaitUntil(driver, Control("LocationLockIcon", "Generic"), 360);
            if (Elements(driver, Control("LocationLockIcon", "Generic")) > 0)
            {
                ThinkTime(5);
                WaitUntil(driver, Control("VerifyCityField", "Generic"), 360);
                if (Elements(driver, Control("VerifyCityField", "Generic")) > 0)
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "verified City Field is not editable ", "City Field Verification");
                }

                else

                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Unable to verify City Field", "City Field Verification");
                    Assert.Fail("City Field Element not Visible");
                }

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Unable to verify Location Field", " Location Field Verification");
                Assert.Fail("Location field is not locked");
            }

        }


        public void VerifyCityFieldIsNonEditableLocked(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            WaitUntil(driver, Control("LocationLockIcon", "Generic"), 360);
            if (Elements(driver, Control("LocationLockIcon", "Generic")) > 0)
            {
                ThinkTime(5);
                WaitUntil(driver, Control("CentreLoc", "Generic"), 360);
                if (Elements(driver, Control("CentreLoc", "Generic")) > 0)
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "verified City Field is not editable ", "City Field Verification");
                }

                else

                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Unable to verify City Field", "City Field Verification");
                    Assert.Fail("City Field Element not Visible");
                }

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Unable to verify Location Field", " Location Field Verification");
                Assert.Fail("Location field is not locked");
            }

        }


        //Click on any buttons inside activities  screen
        public void Activitiesscreenbutton(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string newactivity)
        {
            ThinkTime(15);
            Element(driver, Control("Newactivity", newactivity, "phoneCall")).Click();
        }

        public void VerifyCentreField(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string button)
        {

            Activitiesscreenbutton(driver, testInReport, testName, testDataIteration, button);

            ThinkTime(7);
            WaitUntil(driver, Control("NewPhoneCallButton", "EnterpriseSales"), 30);
            Element(driver, Control("NewPhoneCallButton", "EnterpriseSales")).Click();

            ThinkTime(3);

            if (Elements(driver, Control("CentreField", "phoneCall")) > 0)

            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Centre field exists", "BussinessCentre");
                Assert.Fail("Centre field exists");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Centre field exists", "BussinessCentre");


            }

            ThinkTime(3);
            WaitUntil(driver, Control("CancelButton1", "phoneCall"), 70);
            MoveToElement(driver, Control("CancelButton1", "phoneCall"));
            Element(driver, Control("CancelButton1", "phoneCall")).Click();
            DiscardChanges(driver, testInReport, testName, testDataIteration);

        }

        public void VerifyCentreFieldinTask(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            scrollUpPage(driver, testInReport, testName, testDataIteration);
            //ThinkTime(7);
            //WaitUntil(driver, Control("TimelineADD", "phoneCall"), 60);
            //Element(driver, Control("TimelineADD", "phoneCall")).Click();
            //ThinkTime(3);
            //WaitUntil(driver, Control("Timelinephonecall", "phoneCall"), 60);
            //Element(driver, Control("Timelinephonecall", "phoneCall")).Click();

            ThinkTime(7);
            WaitUntil(driver, Control("AddTimeline", "phoneCall"), 60);
            Element(driver, Control("AddTimeline", "phoneCall")).Click();
            ThinkTime(5);
            WaitUntil(driver, Control("AddPhoneCallTimeline", "phoneCall"), 60);
            Element(driver, Control("AddPhoneCallTimeline", "phoneCall")).Click();
            ThinkTime(3);

            driver.SwitchTo().DefaultContent();
            string parentWindowHandle = driver.CurrentWindowHandle;
            WindowHandling(driver);

            ThinkTime(6);
            if (Elements(driver, Control("CentreField", "phoneCall")) > 0)

            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Centre field exists", "BussinessCentre");
                Assert.Fail("Centre field exists");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Centre field exists", "BussinessCentre");

            }

            ThinkTime(3);
            //WaitUntil(driver, Control("Subjectfield", "Opportunity"), 70);
            //MoveToElement(driver, Control("Subjectfield", "Opportunity"));
            //Element(driver, Control("Subjectfield", "Opportunity")).SendKeys("TestPhone");
            //ThinkTime(3);
            //WaitUntil(driver, Control("Saveregardingaccount", "Opportunity"), 70);
            //MoveToElement(driver, Control("Saveregardingaccount", "Opportunity"));
            //Element(driver, Control("Saveregardingaccount", "Opportunity")).Click();

            WaitUntil(driver, Control("CancelButton1", "phoneCall"), 70);
            MoveToElement(driver, Control("CancelButton1", "phoneCall"));
            Element(driver, Control("CancelButton1", "phoneCall")).Click();
            DiscardChanges(driver, testInReport, testName, testDataIteration);
        }

        public void VerifyCentreActivities(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string entity)
        {

            ThinkTime(5);
            WaitUntil(driver, Control("PhoneCall1", "phoneCall"), 70);
            MoveToElement(driver, Control("PhoneCall1", "phoneCall"));
            Element(driver, Control("PhoneCall1", "phoneCall")).Click();

            ThinkTime(5);
            if (Elements(driver, Control("CentreField", "phoneCall")) > 0)

            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Centre field exists", "BussinessCentre");
                Assert.Fail("Centre field exists");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Centre field exists", "BussinessCentre");


            }
            //Navigate to entity
            ThinkTime(3);
            if (Elements(driver, Control("ScriptDialg", "Opportunity")) > 0)
            {
                Element(driver, Control("HandleScriptError", "Opportunity")).Click();
                ThinkTime(3);
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "No Script error present", "No Script error present");

            }
            ThinkTime(5);
            WaitUntil(driver, Control("Submodule", entity, "GenericOld"), 60);
            Element(driver, Control("Submodule", entity, "GenericOld")).Click();
            //ThinkTime(20);

            //Discard changes
            ThinkTime(5);
            if (Elements(driver, Control("SavePopUp", "Contacts")) > 0)
            {

                WaitUntil(driver, Control("Discardbutton", "Opportunity"), 50);
                MoveToElement(driver, Control("Discardbutton", "Opportunity"));
                Element(driver, Control("Discardbutton", "Opportunity")).Click();

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Discard changes PopUp  Handled", "PopUp handling");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Discard changes PopUp is not visible", "PopUp handling");
                Assert.Fail("PopUp Handling Failed ");
            }

        }



        public void VerifyCentreQuickcreateform(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)

        {
            ThinkTime(7);
            //clcik quickcrete button
            WaitUntil(driver, Control("AddSymbol", "phoneCall"), 60);
            MoveToElement(driver, Control("AddSymbol", "phoneCall"));
            Element(driver, Control("AddSymbol", "phoneCall")).Click();

            ThinkTime(3);
            // select activiy
            WaitUntil(driver, Control("morecommandactivities", "phoneCall"), 100);
            MoveToElement(driver, Control("morecommandactivities", "phoneCall"));
            Element(driver, Control("morecommandactivities", "phoneCall")).Click();
            ThinkTime(3);
            //select phonecall
            WaitUntil(driver, Control("PhoneCall1", "phoneCall"), 70);
            MoveToElement(driver, Control("PhoneCall1", "phoneCall"));
            Element(driver, Control("PhoneCall1", "phoneCall")).Click();

            ThinkTime(3);
            if (Elements(driver, Control("CentreField", "phonecall")) > 0)

            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Centre field exists", "BussinessCentre");
                Assert.Fail("Centre field exists");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Centre field exists", "BussinessCentre");


            }
            ThinkTime(3);
            WaitUntil(driver, Control("CancelButton1", "phoneCall"), 70);
            MoveToElement(driver, Control("CancelButton1", "phoneCall"));
            Element(driver, Control("CancelButton1", "phoneCall")).Click();

            DiscardChanges(driver, testInReport, testName, testDataIteration);
        }




        public void VerifyCentreinOpenPhoneCall(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)

        {


            ThinkTime(3);
            if (Elements(driver, Control("CentreField", "phonecall")) > 0)

            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Centre field exists", "BussinessCentre");
                Assert.Fail("Centre field exists");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Centre field does not exists", "BussinessCentre");


            }


        }
        //Creating a new phone call activity
        public String[] CreateandVerifyPhoneCall(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string entity, string button, string newactivity, string receiver, string quickcreatebutton, string calloutcome, string action)
        {

            Activitiesscreenbutton(driver, testInReport, testName, testDataIteration, button);

            //ThinkTime(10);
            //ActionsClick(driver, Control("NewActivityButton", "EnterpriseSales"));
            ThinkTime(7);
            WaitUntil(driver, Control("NewPhoneCallButton", "EnterpriseSales"), 60);
            Element(driver, Control("NewPhoneCallButton", "EnterpriseSales")).Click();

            ThinkTime(5);

            WaitUntil(driver, Control("PhoneCallSubject", "Opportunity"), 120);
            Element(driver, Control("PhoneCallSubject", "Opportunity")).SendKeys(Keys.Control + "a");
            Element(driver, Control("PhoneCallSubject", "Opportunity")).SendKeys(Keys.Delete);
            Element(driver, Control("PhoneCallSubject", "Opportunity")).SendKeys(DateTime.Now.ToString());
            String s = Element(driver, Control("PhoneCallSubject", "Opportunity")).GetAttribute("value").ToString();
            Console.WriteLine(s);
            if (Elements(driver, Control("CallToInputField", "Opportunity")) > 0)
            {
                WaitUntil(driver, Control("CallToInputField", "Opportunity"), 30);
                ActionsClick(driver, Control("CallToInputField", "Opportunity"));
                //Element(driver, Control("CallToInputField", "Opportunity")).SendKeys(Keys.Control + "a");
                //Element(driver, Control("CallToInputField", "Opportunity")).SendKeys(Keys.Delete);
            }

            WaitUntil(driver, Control("CallToLabel", "Opportunity"), 30);
            // MoveToElement(driver, Control("CallToLabel", "Opportunity"));
            //Element(driver, Control("CallToDeleteButton", "Opportunity")).Click();

            //Element(driver, Control("CallToInputField1", "Opportunity")).Click();
            //Element(driver, Control("CallToInputField1", "Opportunity")).SendKeys(receiver);

            ThinkTime(3);

            //WaitUntil(driver, Control("CallToSelection", receiver, "Opportunity"), 30);
            //Element(driver, Control("CallToSelection", receiver, "Opportunity")).Click();
            //Element(driver, Control("Descriptionlabel", "Opportunity")).Click();


            ThinkTime(5);
            MoveToElement(driver, Control("Saveregardingaccount", "Opportunity"));
            Element(driver, Control("Saveregardingaccount", "Opportunity")).Click();


            string date = DateTime.Now.AddMinutes(1).ToString("M/d/yyyy h:mm tt").Replace("-", "/");
            ThinkTime(10);
            NavigateToEntity(driver, testInReport, testName, testDataIteration, entity);
            ThinkTime(3);
            SelectValuesFromDropDown(driver, testInReport, testName, testDataIteration, "IT Sales Phone Calls");
            SearchforRecord(driver, testInReport, testName, testDataIteration, s);

            //ClickParticularRecord(driver, testInReport, testName, testDataIteration, s);

            OpenFirstActiveContact(driver, testInReport, testName, testDataIteration);

            //Select the call outcome
            ThinkTime(15);
            Select(Element(driver, Control("CallOutcome", "Opportunity"))).SelectByText(calloutcome);

            // DateTime currentdate = System.DateTime.Now.AddMinutes(1);

            //date.Replace()
            Console.WriteLine(date);
            string day = DateTime.Now.Day.ToString();
            if (calloutcome == "Further Action Scheduled")
            {

                //Enter todays date
                Element(driver, Control("ScheduledTime", "Opportunity")).Click();
                MoveToElement(driver, Control("Date", day, "Opportunity"));
                Element(driver, Control("Date", day, "Opportunity")).Click();

            }
            string[] array = { s, day, date };

            //save footer
            saveFooter(driver, testInReport, testName, testDataIteration);
            ThinkTime(5);

            return array;

        }


        //Creating a new phone call activity
        public String[] CreateandVerifyPhoneCall1(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string entity, string button, string newactivity, string receiver, string quickcreatebutton, string calloutcome, string action)
        {

            Activitiesscreenbutton(driver, testInReport, testName, testDataIteration, button);

            //ThinkTime(10);
            //ActionsClick(driver, Control("NewActivityButton", "EnterpriseSales"));
            ThinkTime(7);
            WaitUntil(driver, Control("NewPhoneCallButton", "EnterpriseSales"), 30);
            Element(driver, Control("NewPhoneCallButton", "EnterpriseSales")).Click();

            ThinkTime(3);

            WaitUntil(driver, Control("PhoneCallSubject", "Opportunity"), 30);
            Element(driver, Control("PhoneCallSubject", "Opportunity")).SendKeys(Keys.Control + "a");
            Element(driver, Control("PhoneCallSubject", "Opportunity")).SendKeys(Keys.Delete);
            Element(driver, Control("PhoneCallSubject", "Opportunity")).SendKeys(DateTime.Now.ToString());
            String s = Element(driver, Control("PhoneCallSubject", "Opportunity")).GetAttribute("value").ToString();
            Console.WriteLine(s);
            if (Elements(driver, Control("CallToInputField", "Opportunity")) > 0)
            {
                WaitUntil(driver, Control("CallToInputField", "Opportunity"), 30);
                ActionsClick(driver, Control("CallToInputField", "Opportunity"));
                //Element(driver, Control("CallToInputField", "Opportunity")).SendKeys(Keys.Control + "a");
                //Element(driver, Control("CallToInputField", "Opportunity")).SendKeys(Keys.Delete);
            }

            WaitUntil(driver, Control("CallToLabel", "Opportunity"), 30);
            // MoveToElement(driver, Control("CallToLabel", "Opportunity"));
            //Element(driver, Control("CallToDeleteButton", "Opportunity")).Click();

            //Element(driver, Control("CallToInputField1", "Opportunity")).Click();
            //Element(driver, Control("CallToInputField1", "Opportunity")).SendKeys(receiver);

            ThinkTime(3);

            //WaitUntil(driver, Control("CallToSelection", receiver, "Opportunity"), 30);
            //Element(driver, Control("CallToSelection", receiver, "Opportunity")).Click();
            //Element(driver, Control("Descriptionlabel", "Opportunity")).Click();


            ThinkTime(5);
            MoveToElement(driver, Control("Saveregardingaccount", "Opportunity"));
            Element(driver, Control("Saveregardingaccount", "Opportunity")).Click();


            string date = DateTime.Now.AddMinutes(1).ToString("M/d/yyyy h:mm tt").Replace("-", "/");
            ThinkTime(10);
            NavigateToEntity(driver, testInReport, testName, testDataIteration, entity);
            SelectValuesFromDropDown(driver, testInReport, testName, testDataIteration, "My Assigned Open Activities - ALL");
            SearchforRecord(driver, testInReport, testName, testDataIteration, s);

            //ClickParticularRecord(driver, testInReport, testName, testDataIteration, s);

            OpenFirstActiveContact(driver, testInReport, testName, testDataIteration);

            //Select the call outcome
            ThinkTime(15);
            Select(Element(driver, Control("CallOutcome", "Opportunity"))).SelectByText(calloutcome);

            // DateTime currentdate = System.DateTime.Now.AddMinutes(1);
            scrollDownPhoneCust(driver, testInReport, testName, testDataIteration, "300");
            //date.Replace()
            Console.WriteLine(date);
            string day = DateTime.Now.Day.ToString();
            if (calloutcome == "Further Action Scheduled")
            {
                ThinkTime(2);
                WaitUntil(driver, Control("ScheduledTime", "Opportunity"), 30);
                //Enter todays date
                Element(driver, Control("ScheduledTime", "Opportunity")).Click();
                MoveToElement(driver, Control("Date", day, "Opportunity"));
                Element(driver, Control("Date", day, "Opportunity")).Click();

            }
            string[] array = { s, day, date };

            //save footer
            saveFooter(driver, testInReport, testName, testDataIteration);
            ThinkTime(5);

            return array;

        }









        public void OPPdonotsend(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string condition)

        {
            ThinkTime(7);

            //Select(Element(driver, Control("donotcontact", "Contacts"))).SelectByText(select);

            WaitUntil(driver, Control("donotcontact", "Contacts"), 70);
            MoveToElement(driver, Control("donotcontact", "Contacts"));
            Element(driver, Control("donotcontact", "Contacts")).Click();
            //string text = Element(driver, Control("donotcontact", "Contacts")).GetAttribute("innerText");

            switch (condition)
            {
                case "Yes":
                    if (Elements(driver, Control("donotcontactyes", "Contacts")) > 0)

                    {

                        AddLog(driver, testInReport, testName, testDataIteration, "Pass", "New Email activity is created", "EmailActivity");

                    }

                    else
                    {
                        AddLog(driver, testInReport, testName, testDataIteration, "Fail", "New Email activity is not created", "EmailActivity");
                        Assert.Fail("condition not changed");
                    }
                    break;
                case "No":
                    if (Elements(driver, Control("donotcontactNo", "Contacts")) > 0)

                    {

                        AddLog(driver, testInReport, testName, testDataIteration, "Pass", "New Email activity is created", "EmailActivity");

                    }

                    else
                    {
                        AddLog(driver, testInReport, testName, testDataIteration, "Fail", "New Email activity is not created", "EmailActivity");
                        Assert.Fail("condition not changed");
                    }
                    break;
                default:
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "No proper role passed", "Unexpected Status");
                    Assert.Fail("No proper condition passed");
                    break;
            }

        }


        public void contactpreferencedonotsend(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string Tab)

        {
            ThinkTime(7);

            WaitUntil(driver, Control("Navigatecontact", "Contacts"), 20);
            MoveToElement(driver, Control("Navigatecontact", "Contacts"));
            Element(driver, Control("Navigatecontact", "Contacts")).Click();

            ThinkTime(3);

            WaitUntil(driver, Control("ContactDetails", Tab, "Contacts"), 100);
            MoveToElement(driver, Control("ContactDetails", Tab, "Contacts"));
            Element(driver, Control("ContactDetails", Tab, "Contacts")).Click();
            ThinkTime(3);

            WaitUntil(driver, Control("donotcontact", "Contacts"), 70);
            MoveToElement(driver, Control("donotcontact", "Contacts"));
            Element(driver, Control("donotcontact", "Contacts")).Click();
            saveFooter(driver, testInReport, testName, testDataIteration);

            //string text = Element(driver, Control("donotcontact", "Contacts")).GetAttribute("innerText");

            //ThinkTime(3);
            //if (text== "Yes")

            //{
            //    AddLog(driver, testInReport, testName, testDataIteration, "pass", " field value changed", "contact field");
            //}
            //else
            //{

            //    AddLog(driver, testInReport, testName, testDataIteration, "fail", "field value not changed ", "contact field");
            //    Assert.Fail("valuenot changed");


            //}



        }

        public void contactpreferencesettoYes(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string Tab)

        {
            ThinkTime(7);

            WaitUntil(driver, Control("Navigatecontact", "Contacts"), 20);
            MoveToElement(driver, Control("Navigatecontact", "Contacts"));
            Element(driver, Control("Navigatecontact", "Contacts")).Click();

            ThinkTime(3);

            WaitUntil(driver, Control("ContactDetails", Tab, "Contacts"), 100);
            MoveToElement(driver, Control("ContactDetails", Tab, "Contacts"));
            Element(driver, Control("ContactDetails", Tab, "Contacts")).Click();
            ThinkTime(3);

            WaitUntil(driver, Control("donotcontact", "Contacts"), 70);
            MoveToElement(driver, Control("donotcontact", "Contacts"));
            Element(driver, Control("donotcontact", "Contacts")).Click();

        }









        public void contactpreferenceemailfield(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string Tab)

        {
            ThinkTime(7);

            WaitUntil(driver, Control("Navigatecontact", "Contacts"), 20);
            MoveToElement(driver, Control("Navigatecontact", "Contacts"));
            Element(driver, Control("Navigatecontact", "Contacts")).Click();

            ThinkTime(3);

            WaitUntil(driver, Control("ContactDetails", Tab, "Contacts"), 100);
            MoveToElement(driver, Control("ContactDetails", Tab, "Contacts"));
            Element(driver, Control("ContactDetails", Tab, "Contacts")).Click();
            ThinkTime(3);

            WaitUntil(driver, Control("contactprefrencemail", "Contacts"), 70);
            MoveToElement(driver, Control("contactprefrencemail", "Contacts"));
            Element(driver, Control("contactprefrencemail", "Contacts")).Click();
            //string text = Element(driver, Control("donotcontact", "Contacts")).GetAttribute("innerText");

            //ThinkTime(3);
            //if (text== "Yes")

            //{
            //    AddLog(driver, testInReport, testName, testDataIteration, "pass", " field value changed", "contact field");
            //}
            //else
            //{

            //    AddLog(driver, testInReport, testName, testDataIteration, "fail", "field value not changed ", "contact field");
            //    Assert.Fail("valuenot changed");


            //}



        }



        public void QuickCreatePhonecall(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string button, string newactivity, string receiver, string quickcreatebutton)
        {
            Activitiesscreenbutton(driver, testInReport, testName, testDataIteration, button);

            ThinkTime(10);

            Element(driver, Control("ButtonOpportunityscreen", newactivity, "Opportunity")).Click();

            WaitUntil(driver, Control("NewPhoneCallButton", "EnterpriseSales"), 30);
            Element(driver, Control("NewPhoneCallButton", "EnterpriseSales")).Click();

            WaitUntil(driver, Control("PhoneCallSubject", "Opportunity"), 30);
            Element(driver, Control("PhoneCallSubject", "Opportunity")).SendKeys(Keys.Control + "a");
            Element(driver, Control("PhoneCallSubject", "Opportunity")).SendKeys(Keys.Delete);
            Element(driver, Control("PhoneCallSubject", "Opportunity")).SendKeys(DateTime.Now.ToString());
            String s = Element(driver, Control("PhoneCallSubject", "Opportunity")).GetAttribute("value").ToString();

            //WaitUntil(driver, Control("CallToInputField", "Opportunity"), 30);
            //Element(driver, Control("CallToInputField", "Opportunity")).SendKeys(Keys.Control + "a");
            //Element(driver, Control("CallToInputField", "Opportunity")).SendKeys(Keys.Delete);

            WaitUntil(driver, Control("CallToLabel", "Opportunity"), 30);
            MoveToElement(driver, Control("CallToLabel", "Opportunity"));
            Element(driver, Control("CallToDeleteButton", "Opportunity")).Click();

            Element(driver, Control("CallToInputField1", "Opportunity")).Click();
            Element(driver, Control("CallToInputField1", "Opportunity")).SendKeys(receiver);

            ThinkTime(3);

            WaitUntil(driver, Control("CallToSelection", receiver, "Opportunity"), 30);
            Element(driver, Control("CallToSelection", receiver, "Opportunity")).Click();

            Element(driver, Control("SaveButttonActivity", quickcreatebutton, "Opportunity")).Click();
        }



        public void VerifywhethernewPhonecallActivityisCreated(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string subject, string date, string entity)
        {
            //NavigateToEntity(driver, testInReport, testName, testDataIteration, entity);

            //SearchforRecord(driver, testInReport, testName, testDataIteration, subject);

            ActionsDoubleClick(driver, Control("MarkCompletedPhone", "Opportunity"));

            WaitUntil(driver, Control("DueDate", "Opportunity"), 30);
            if (Element(driver, Control("DueDate", "Opportunity")).GetAttribute("value").Contains(date))
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Due Date is Correct", "DueDate");

            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Due Date is inCorrect", "DueDate");
                Assert.Fail("Due Date is incorrect");
            }
        }


        //Generic function to verify new email activity is created
        public void VerifywhethernewEmailActivityisCreated(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string subject)
        {
            ThinkTime(10);
            Element(driver, Control("ThreeDots1", "Opportunity")).Click();
            ThinkTime(10);
            Element(driver, Control("SeeAllRecords", "Opportunity")).Click();


            ThinkTime(10);
            //if (Elements(driver, Control("EmailActivityCreated", subject, date, "Opportunity")) > 0)
            if (Elements(driver, Control("EmailActivityCreated1", subject, "Opportunity")) > 0)

            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "New Email activity is created", "EmailActivity");

            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "New Email activity is not created", "EmailActivity");
                Assert.Fail("New Email Activity is not created with " + subject);
            }


        }
        public void SelectActivities(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(10);
            WaitUntil(driver, Control("refreshButton", "Contacts"), 120);
            Element(driver, Control("refreshButton", "Contacts")).Click();
            ThinkTime(10);
            WaitUntil(driver, Control("ActivitesSwitch", "Opportunity"), 60);
            MoveToElement(driver, Control("ActivitesSwitch", "Opportunity"));
            Element(driver, Control("ActivitesSwitch", "Opportunity")).Click();
            ThinkTime(5);
            WaitUntil(driver, Control("FirstEmail", "Opportunity"), 180);
            MoveToElement(driver, Control("FirstEmail", "Opportunity"));
            ActionsDoubleClick(driver, Control("FirstEmail", "Opportunity"));
            ThinkTime(3);


        }

        public void SelectActivities1(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(10);
            WaitUntil(driver, Control("refreshButton", "Contacts"), 120);
            Element(driver, Control("refreshButton", "Contacts")).Click();
            ThinkTime(10);
            WaitUntil(driver, Control("ActivitesSwitch", "Opportunity"), 60);
            MoveToElement(driver, Control("ActivitesSwitch", "Opportunity"));
            Element(driver, Control("ActivitesSwitch", "Opportunity")).Click();
            ThinkTime(5);
            //WaitUntil(driver, Control("FirstEmail", "Opportunity"), 180);
            //MoveToElement(driver, Control("FirstEmail", "Opportunity"));
            //ActionsDoubleClick(driver, Control("FirstEmail", "Opportunity"));
            ThinkTime(3);


        }


        public void OpenActiveActivity(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {

            ThinkTime(5);
            WaitUntil(driver, Control("FirstEmail", "Opportunity"), 180);
            MoveToElement(driver, Control("FirstEmail", "Opportunity"));
            ActionsDoubleClick(driver, Control("FirstEmail", "Opportunity"));
            ThinkTime(3);


        }
        public void SelectActivitiesType(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {

            ThinkTime(5);
            WaitUntil(driver, Control("SelctActivityTypeBtn", "Opportunity"), 180);
            MoveToElement(driver, Control("SelctActivityTypeBtn", "Opportunity"));
            Element(driver, Control("SelctActivityTypeBtn", "Opportunity")).Click();

            WaitUntil(driver, Control("SelctActivityType", "Opportunity"), 180);
            MoveToElement(driver, Control("SelctActivityType", "Opportunity"));
            Element(driver, Control("SelctActivityType", "Opportunity")).Click();
            ThinkTime(3);


        }


        //Generic function to verify new email activity is created
        public void VerifyPhoneisUpdatedonEmails(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string Phoneno)
        {
            ThinkTime(10);
            WaitUntil(driver, Control("refreshButton", "Contacts"), 30);
            Element(driver, Control("refreshButton", "Contacts")).Click();
            ThinkTime(10);
            WaitUntil(driver, Control("ActivitesSwitch", "Opportunity"), 60);
            MoveToElement(driver, Control("ActivitesSwitch", "Opportunity"));
            Element(driver, Control("ActivitesSwitch", "Opportunity")).Click();
            ThinkTime(5);
            WaitUntil(driver, Control("FirstEmail1", "Opportunity"), 30);
            MoveToElement(driver, Control("FirstEmail1", "Opportunity"));
            ActionsDoubleClick(driver, Control("FirstEmail1", "Opportunity"));
            ThinkTime(9);
            scrollDownOpportunityPage(driver, testInReport, testName, testDataIteration);
            SwitchToFrameElement(driver, Control("EmailBody", "Opportunity"));
            ThinkTime(2);


            if (Element(driver, Control("Phoneno", "Opportunity")).Displayed)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Phone no is updated and correct", "Phonevalidation");

            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Phone no  is not updated", "PhoneValidation");
                Assert.Fail("Phone no is not updated with " + Phoneno);
            }


        }


        //Search for record
        public void SearchforRecord(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string record)
        {
            ThinkTime(3);
            WaitUntil(driver, Control("CaseSearchBar", "GenericOld"), 60);
            ElementHighlight(driver, Control("CaseSearchBar", "GenericOld"));
            MoveToElement(driver, Control("CaseSearchBar", "GenericOld"));
            Element(driver, Control("CaseSearchBar", "GenericOld")).Clear();
            Element(driver, Control("CaseSearchBar", "GenericOld")).SendKeys(record);
            ThinkTime(2);
            WaitUntil(driver, Control("CaseSearchBar_SearchBtn", "GenericOld"), 60);
            ElementHighlight(driver, Control("CaseSearchBar_SearchBtn", "GenericOld"));
            ActionsClick(driver, Control("CaseSearchBar_SearchBtn", "GenericOld"));
            ThinkTime(4);
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Record Search completed", "Record Search completed");
        }

        public void ClickParticularRecord(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string record)
        {

            WaitUntil(driver, Control("Subject", record, "Opportunity"), 30);
            Element(driver, Control("Subject", record, "Opportunity")).Click();
        }
        public void ReOpenOpportunity(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string record)
        {

            WaitUntil(driver, Control("ReOpenOpportunity", record, "Opportunity"), 30);
            Element(driver, Control("ReOpenOpportunity", record, "Opportunity")).Click();
        }

        public void VerifyOppstatus(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {

            WaitUntil(driver, Control("verifyopportunitystatus", "Opportunity"), 30);
            string status = Element(driver, Control("verifyopportunitystatus", "Opportunity")).GetAttribute("innerText");

            if (status == "Project cancelled")
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Project status cancelled status is updated", "Opp status verifiation");

            }
            else
            {
                Assert.Fail("Status not updated to Project Cancelled");
            }


        }





        //Mark Complete Phone Call activity
        public void MarkComplete(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string Action)
        {
            ThinkTime(5);
            if (Elements(driver, Control("MarkCompleteButton", Action, "Opportunity")) > 0)
            {
                Element(driver, Control("MarkCompleteButton", Action, "Opportunity")).Click();
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Mark Complete button is available", "Mark Complete");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Mark Complete button is not available", "Mark Complete");
                Assert.Fail("Mark Complete button is not available");
            }
            //if (Element(driver, Control("MarkCompleteButton", Action, "Opportunity")).Displayed)


            //{
            //    AddLog(driver, testInReport, testName, testDataIteration, "Failed", "Mark Complete button is not performed", "Mark Complete");


            //}
            //else

            //{ AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Mark Complete  is peformed successfully", "Mark Complete");


            //}

        }




        //Verify Phone call activity is read only
        public void VerifyPhoneCallActivityisReadOnlyOnMarkComplete(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string entity, string subject)
        {

            ThinkTime(10);
            //NavigateToEntity(driver, testInReport, testName, testDataIteration, entity);
            //SelectValuesFromDropDown(driver,testInReport, testName, testDataIteration, "My open IT Sales activities");
            //SearchforRecord(driver, testInReport, testName, testDataIteration, subject);

            //ActionsDoubleClick(driver, Control("CompletedPhoneCall", "Opportunity"));
            //ThinkTime(10);

            if (Element(driver, Control("CallOutcomeDisabled", "Opportunity")).Displayed && Element(driver, Control("ReadOnlyTag", "Opportunity")).Displayed)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Phone Call activity is  read only", "PhoneCall Activity");

            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Phone Call activity is not read only", "PhoneCall Activity");
                Assert.Fail("Phone call activity is not read only");
            }

        }


        //Generic function to button in activities section
        public void VerifyActivities(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {

            ThinkTime(3);
            if (Elements(driver, Control("NoData", "Generic")) == 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Activity Available", "Activity");

            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Info", "No Activity Available.Please create one", "Activity");
                Assert.Fail("Activities are not  available.Please create one");

            }
        }









        //Verifying communication request activity not available with title
        public void Verifyactivitynotpresent(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string activitytitle)
        {
            if (Elements(driver, Control("Activitymorebutton", "Opportunity")) > 0)
            {

                ActionsClick(driver, Control("Activitymorebutton", "Opportunity"));
                ThinkTime(2);
                Element(driver, Control("RefreshActivity", "Opportunity")).Click();
                ThinkTime(5);
            }
            else
            {
                Element(driver, Control("RefreshActivity", "Opportunity")).Click();
                ThinkTime(2);
                Element(driver, Control("RefreshActivity", "Opportunity")).Click();
                ThinkTime(2);
                Element(driver, Control("RefreshActivity", "Opportunity")).Click();
                ThinkTime(2);
                Element(driver, Control("RefreshActivity", "Opportunity")).Click();
                ThinkTime(2);
                Element(driver, Control("RefreshActivity", "Opportunity")).Click();
                ThinkTime(2);
            }
            ThinkTime(5);

            if (Elements(driver, Control("CommunicationRequest", activitytitle, "phoneCall")) == 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", activitytitle + " Activity is not Available", "Activity");

            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", activitytitle + "Activity Generated", "Activity");

                Assert.Fail("Activities    available");

            }
        }


        //Verifying phonecall activity with title
        public void VerifyActivityTitle(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string activitytitle)
        {

            ThinkTime(3);
            WaitUntil(driver, Control("PhoneActivity", activitytitle, "phoneCall"), 60);
            if (Elements(driver, Control("PhoneActivity", activitytitle, "phoneCall")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", activitytitle + " Available", "Activity");

            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Info", activitytitle + "No Activity Available.Please create one", "Activity");
                Assert.Fail("Activities are not  available.Please create one");

            }
        }


        public void UpdateCalltofield(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string CallTo)
        {
            ThinkTime(2);
            WaitUntil(driver, Control("Entersecondcallto", "Opportunity"), 120);
            MoveToElement(driver, Control("Entersecondcallto", "Opportunity"));
            Element(driver, Control("Entersecondcallto", "Opportunity")).Click();
            Element(driver, Control("Entersecondcallto", "Opportunity")).SendKeys(CallTo);
            ThinkTime(2);
            WaitUntil(driver, Control("NewMinorSourceSelect", "Opportunity"), 120);
            MoveToElement(driver, Control("NewMinorSourceSelect", "Opportunity"));
            Element(driver, Control("NewMinorSourceSelect", "Opportunity")).Click();
            ThinkTime(2);
            saveFooter(driver, testInReport, testName, testDataIteration);



        }
        public void selectRequiredActivitty(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string activitytitle)
        {
            for (int i = 0; i <= 50; i++)
            {

                ThinkTime(5);
                if (Elements(driver, Control("Activitymorebutton", "Opportunity")) > 0)
                {

                    ActionsClick(driver, Control("Activitymorebutton", "Opportunity"));
                    ThinkTime(2);
                }


                ThinkTime(5);
                WaitUntil(driver, Control("RefreshActivity", "Opportunity"), 120);
                Element(driver, Control("RefreshActivity", "Opportunity")).Click();
                ThinkTime(2);
                if (Elements(driver, Control("CommunicationRequest", activitytitle, "phoneCall")) > 0)
                {
                    break;
                }
            }

            if (Elements(driver, Control("CommunicationRequest", activitytitle, "phoneCall")) > 0)
            {
                ThinkTime(5);
                Element(driver, Control("CommunicationRequest", activitytitle, "phoneCall")).Click();
                ThinkTime(2);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Communication request created", "Activity");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Info", "No Activity Available.Please create one", "Activity");
                Assert.Fail("Activities are not  available.Please create one");

            }



        }

        //Verifying Tour Confirmation CR generated or not
        public void VerifyTourConfirmationCR(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string activitytitle)
        {

            ThinkTime(5);
            if (Elements(driver, Control("Activitymorebutton", "Opportunity")) > 0)
            {

                ActionsClick(driver, Control("Activitymorebutton", "Opportunity"));
                Element(driver, Control("RefreshActivity", "Opportunity")).Click();
                ThinkTime(2);

                ThinkTime(5);

            }
            else
            {
                Element(driver, Control("RefreshActivity", "Opportunity")).Click();
                ThinkTime(2);
                Element(driver, Control("RefreshActivity", "Opportunity")).Click();
                ThinkTime(2);
                Element(driver, Control("RefreshActivity", "Opportunity")).Click();
                ThinkTime(2);
                Element(driver, Control("RefreshActivity", "Opportunity")).Click();
                ThinkTime(2);
                Element(driver, Control("RefreshActivity", "Opportunity")).Click();
                ThinkTime(2);
            }
            WaitUntil(driver, Control("CommunicationRequest", activitytitle, "phoneCall"), 120);
            if (Elements(driver, Control("CommunicationRequest", activitytitle, "phoneCall")) > 1)
            {
                ThinkTime(10);
                Element(driver, Control("CommunicationRequest", activitytitle, "phoneCall")).Click();
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Tour Confirmation Communication request created for rescheduling tour", "Activity");
            }
            else if (Elements(driver, Control("CommunicationRequest", activitytitle, "phoneCall")) > 0)
            {
                ThinkTime(10);
                Element(driver, Control("CommunicationRequest", activitytitle, "phoneCall")).Click();
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Tour Confirmation Communication request created", "Activity");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Info", "No Activity Available.Please create one", "Activity");
                Assert.Fail("Activities are not  available.Please create one");

            }



        }

        //Verifying Tour Confirmation CR generated or not
        public void VerifyNoTourConfirmationCR(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string activitytitle)
        {

            ThinkTime(5);
            if (Elements(driver, Control("Activitymorebutton", "Opportunity")) > 0)
            {

                ActionsClick(driver, Control("Activitymorebutton", "Opportunity"));
                Element(driver, Control("RefreshActivity", "Opportunity")).Click();
                ThinkTime(2);

                ThinkTime(5);

            }
            else
            {
                Element(driver, Control("RefreshActivity", "Opportunity")).Click();
                ThinkTime(2);
                Element(driver, Control("RefreshActivity", "Opportunity")).Click();
                ThinkTime(2);
                Element(driver, Control("RefreshActivity", "Opportunity")).Click();
                ThinkTime(2);
                Element(driver, Control("RefreshActivity", "Opportunity")).Click();
                ThinkTime(2);
                Element(driver, Control("RefreshActivity", "Opportunity")).Click();
                ThinkTime(2);
            }
            WaitUntil(driver, Control("CommunicationRequest", activitytitle, "phoneCall"), 120);
            if (Elements(driver, Control("CommunicationRequest", activitytitle, "phoneCall")) > 0)
            {
                ThinkTime(10);
                AddLog(driver, testInReport, testName, testDataIteration, "Info", "Tour Confirmation CR available", "Activity");
                Assert.Fail("Activities are available");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Tour Confirmation Communication request not created", "Activity");

            }



        }

        public void VerifyASMADHandoverRqst(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string activitytitle)
        {

            ThinkTime(5);
            if (Elements(driver, Control("Activitymorebutton", "Opportunity")) > 0)
            {

                ActionsClick(driver, Control("Activitymorebutton", "Opportunity"));
                Element(driver, Control("RefreshActivity", "Opportunity")).Click();
                ThinkTime(2);

                ThinkTime(5);

            }
            else
            {
                Element(driver, Control("RefreshActivity", "Opportunity")).Click();
                ThinkTime(2);
                Element(driver, Control("RefreshActivity", "Opportunity")).Click();
                ThinkTime(2);
                Element(driver, Control("RefreshActivity", "Opportunity")).Click();
                ThinkTime(2);
                Element(driver, Control("RefreshActivity", "Opportunity")).Click();
                ThinkTime(2);
                Element(driver, Control("RefreshActivity", "Opportunity")).Click();
                ThinkTime(2);
            }
            WaitUntil(driver, Control("CommunicationRequest", activitytitle, "phoneCall"), 120);
            if (Elements(driver, Control("CommunicationRequest", activitytitle, "phoneCall")) > 0)
            {
                ThinkTime(10);
                AddLog(driver, testInReport, testName, testDataIteration, "Info", "Communication request created", "Activity");
                Assert.Fail("Activities are not  available.Please create one");

            }

            else
            {
                Element(driver, Control("CommunicationRequest", activitytitle, "phoneCall")).Click();
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Communication request not created", "Activity");

            }



        }

        public void selectNoAnswerTourRqst(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string activitytitle, string task = "")
        {

            ThinkTime(5);
            if (Elements(driver, Control("Activitymorebutton", "Opportunity")) > 0)
            {

                ActionsClick(driver, Control("Activitymorebutton", "Opportunity"));
                Element(driver, Control("RefreshActivity", "Opportunity")).Click();
                ThinkTime(2);
                ActionsClick(driver, Control("Activitymorebutton", "Opportunity"));
                Element(driver, Control("RefreshActivity", "Opportunity")).Click();
                ThinkTime(2);
                ActionsClick(driver, Control("Activitymorebutton", "Opportunity"));
                Element(driver, Control("RefreshActivity", "Opportunity")).Click();
                ThinkTime(2);
                ActionsClick(driver, Control("Activitymorebutton", "Opportunity"));
                Element(driver, Control("RefreshActivity", "Opportunity")).Click();
                ThinkTime(2);
                ThinkTime(5);

            }
            else
            {
                Element(driver, Control("RefreshActivity", "Opportunity")).Click();
                ThinkTime(2);
                Element(driver, Control("RefreshActivity", "Opportunity")).Click();
                ThinkTime(2);
                Element(driver, Control("RefreshActivity", "Opportunity")).Click();
                ThinkTime(2);
                Element(driver, Control("RefreshActivity", "Opportunity")).Click();
                ThinkTime(2);
                Element(driver, Control("RefreshActivity", "Opportunity")).Click();
                ThinkTime(2);
            }
            WaitUntil(driver, Control("NoAnswerPostTour", activitytitle, "phoneCall"), 120);
            if (Elements(driver, Control("NoAnswerPostTour", activitytitle, "phoneCall")) > 0)
            {
                ThinkTime(10);
                Element(driver, Control("NoAnswerPostTour", activitytitle, "phoneCall")).Click();
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Communication request created", "Activity");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Info", "No Activity Available.Please create one", "Activity");
                Assert.Fail("Activities are not  available.Please create one");

            }




        }


        public void Selectconnection(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string activitytitle)
        {

            ThinkTime(5);

            WaitUntil(driver, Control("CommunicationRequest", activitytitle, "phoneCall"), 120);
            if (Elements(driver, Control("CommunicationRequest", activitytitle, "phoneCall")) > 0)
            {
                ThinkTime(10);
                Element(driver, Control("CommunicationRequest", activitytitle, "phoneCall")).Click();
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Communication request created", "Activity");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Info", "No Activity Available.Please create one", "Activity");
                Assert.Fail("Activities are not  available.Please create one");

            }

        }

        public void VerifynurturecommreqNo(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string activitytitle)
        {
            if (Elements(driver, Control("Activitymorebutton", "Opportunity")) > 0)
            {

                ActionsClick(driver, Control("Activitymorebutton", "Opportunity"));

                ThinkTime(5);
            }
            else
            {
                Element(driver, Control("RefreshActivity", "Opportunity")).Click();
                ThinkTime(2);
                Element(driver, Control("RefreshActivity", "Opportunity")).Click();
                ThinkTime(2);
                Element(driver, Control("RefreshActivity", "Opportunity")).Click();
                ThinkTime(2);
                Element(driver, Control("RefreshActivity", "Opportunity")).Click();
                ThinkTime(2);
                Element(driver, Control("RefreshActivity", "Opportunity")).Click();
                ThinkTime(2);
            }
            scrollDownOpportunityPage(driver, testInReport, testName, testDataIteration);
            ThinkTime(2);

            if (Elements(driver, Control("CommunicationRequest", activitytitle, "phoneCall")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Info", "Activity Available.", "Activity");
                Assert.Fail("Activities are available.");


            }

            else
            {
                ThinkTime(1);
                // Element(driver, Control("CommunicationRequest", activitytitle, "phoneCall")).Click();
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Communication request not created", "Activity");

            }



        }


        public void VerifynurturecommreqYes(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string activitytitle)
        {

            ThinkTime(5);
            Element(driver, Control("RefreshActivity", "Opportunity")).Click();
            ThinkTime(2);
            Element(driver, Control("RefreshActivity", "Opportunity")).Click();
            ThinkTime(2);
            Element(driver, Control("RefreshActivity", "Opportunity")).Click();
            ThinkTime(2);
            Element(driver, Control("RefreshActivity", "Opportunity")).Click();
            ThinkTime(2);
            Element(driver, Control("RefreshActivity", "Opportunity")).Click();
            ThinkTime(2);
            scrollDownOpportunityPage(driver, testInReport, testName, testDataIteration);
            ThinkTime(2);

            if (Elements(driver, Control("CommunicationRequest", activitytitle, "phoneCall")) > 0)
            {
                ThinkTime(1);
                // Element(driver, Control("CommunicationRequest", activitytitle, "phoneCall")).Click();
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Communication request not created", "Activity");

            }

            else
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Info", "Activity Available.", "Activity");
                Assert.Fail("Activities are available.");
            }



        }

        public void payloadfieldVerification(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string activitytitle, string field, string field2)
        {

            ThinkTime(3);
            WaitUntil(driver, Control("PhoneActivity", activitytitle, "phoneCall"), 60);
            if (Elements(driver, Control("PhoneActivity", activitytitle, "phoneCall")) > 0)
            {
                ThinkTime(10);
                Element(driver, Control("PhoneActivity", activitytitle, "phoneCall")).Click();
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Welcome Email journey communication request available", "Activity");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Info", "No Activity Available.Please create one", "Activity");
                Assert.Fail("Activities are not  available.Please create one");

            }

            ThinkTime(15);
            WaitUntil(driver, Control("Payload", "phoneCall"), 30);
            MoveToElement(driver, Control("Payload", ""));
            Element(driver, Control("Payload", "phoneCall")).Click();

            ThinkTime(2);
            driver.SwitchTo().DefaultContent();
            string parentWindowHandle = driver.CurrentWindowHandle;
            WindowHandling(driver);

            int language = Elements(driver, Control("payloadfield", field, "phoneCall"));
            if (language > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Language same as in the contact", "Language field verification");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Language varification", "Language field verification");

                Assert.Fail("field is not same as in the contact");

            }



            int fiedl2 = Elements(driver, Control("payloadfield", field2, "phoneCall"));
            if (fiedl2 > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Language same as in the contact", "Language field verification");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Language varification", "Language field verification");

                Assert.Fail("field is not same as in the contact");

            }

        }


        public void VerificationinPayload(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string languagecode)
        {

            ThinkTime(5);
            WaitUntil(driver, Control("Payload", "phoneCall"), 30);
            MoveToElement(driver, Control("Payload", "phoneCall"));
            Element(driver, Control("Payload", "phoneCall")).Click();

            ThinkTime(2);
            //driver.SwitchTo().DefaultContent();
            //string parentWindowHandle = driver.CurrentWindowHandle;
            //WindowHandling(driver);

            WaitUntil(driver, Control("Verifypayload", languagecode, "phoneCall"), 30);
            MoveToElement(driver, Control("Verifypayload", languagecode, "phoneCall"));
            int language = Elements(driver, Control("Verifypayload", languagecode, "phoneCall"));
            if (language > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Language same as in the contact", "Language field verification");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Language varification", "Language field verification");

                Assert.Fail("Language is not same as in the contact");

            }

        }


        public void LanguageChangeinContact(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(3);

            scrollDownContactPageEnterprise(driver, testInReport, testName, testDataIteration);
            ThinkTime(3);

            // Enter Language - UK English
            WaitUntil(driver, Control("ContactLanguage", "EnterpriseSales"), 70);
            MoveToElement(driver, Control("ContactLanguage", "EnterpriseSales"));
            ThinkTime(3);
            Element(driver, Control("ContactLanguage", "EnterpriseSales")).SendKeys(Keys.Control + "a");
            Element(driver, Control("ContactLanguage", "EnterpriseSales")).SendKeys(Keys.Delete);
            Element(driver, Control("ContactLanguage", "EnterpriseSales")).SendKeys("Uk english");
            ThinkTime(5);
            MoveToElement(driver, Control("ContactLanguageDropdownSelect", "EnterpriseSales"));
            ThinkTime(3);
            Element(driver, Control("ContactLanguageDropdownSelect", "EnterpriseSales")).Click();
            ThinkTime(3);
            // Save Footer
            if (Elements(driver, Control("ScriptDialg", "Opportunity")) > 0)
            {
                Element(driver, Control("HandleScriptError", "Opportunity")).Click();
                ThinkTime(3);
                saveFooter(driver, testInReport, testName, testDataIteration);
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "No Script error present", "No Script error present");



            }
            saveFooter(driver, testInReport, testName, testDataIteration);
            ThinkTime(5);

        }


        public void VerifyOppStatusandLanguage(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string ukEnglish)
        {

            //ThinkTime(10);
            //WaitUntil(driver, Control("verifyopportunitystatus", "Opportunity"), 180);
            //string statusreason = Element(driver, Control("verifyopportunitystatus", "Opportunity")).Text.ToString();
            //if (statusreason == "In Progress")
            //{
            //    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Opportunity status reason is 'In Progress'", "In Progress");

            //}
            //else
            //{
            //    Assert.Fail("Incorrect Status Reason");
            //}

            //ThinkTime(3);
            //scrollUpPage(driver, testInReport, testName, testDataIteration);

            ThinkTime(10);
            WaitUntil(driver, Control("FilledLanguage", ukEnglish, "phoneCall"), 30);
            MoveToElement(driver, Control("FilledLanguage", ukEnglish, "phoneCall"));

            int language = Elements(driver, Control("FilledLanguage", ukEnglish, "phoneCall"));
            if (language > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Language autopopulated same as in the contact", "Language field verification");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Language varification", "Language field verification");

                Assert.Fail("Language not autopopulated same as in the contact");

            }

        }



        public void VerifyTourCommRequestActivity(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string activitytitle)
        {
            ThinkTime(3);

            //WaitUntil(driver, Control("ActivityType", activitytitle, "phoneCall"), 30);


            if (Elements(driver, Control("ActivityType", activitytitle, "phoneCall")) == 0)
            {
                ThinkTime(10);
                scrollDownContactPageEnterprise(driver, testInReport, testName, testDataIteration);
                ThinkTime(5);
                Element(driver, Control("ActivityType", activitytitle, "phoneCall")).Click();
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Tour Booked email is available", "Activity");
            }
            else
            {
                Element(driver, Control("ActivityType", activitytitle, "phoneCall")).Click();
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Tour Booked email is available", "Activity");

                //AddLog(driver, testInReport, testName, testDataIteration, "Info", "No Activity Available.Please create one", "Activity");
                //Assert.Fail("Activities are not  available.Please create one");
            }
            ThinkTime(15);


        }


        public void FillTourOutcome(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string activitytitle, string select, string Touroutcome)
        {
            ThinkTime(3);

            WaitUntil(driver, Control("TourOutcomeButton", "phoneCall"), 30);
            MoveToElement(driver, Control("TourOutcomeButton", "phoneCall"));
            Element(driver, Control("TourOutcomeButton", "phoneCall")).Click();
            ThinkTime(5);
            WaitUntil(driver, Control("ArriveTour", "phoneCall"), 30);
            Element(driver, Control("ArriveTour", "phoneCall")).Click();
            ThinkTime(5);
            Select(Element(driver, Control("DidntArrive", "Tour"))).SelectByText(select);
            // driver.SwitchTo().DefaultContent();
            //MoveToElement(driver, Control("DidntArrive", "phoneCall"));
            //ElementHighlight(driver, Control("DidntArrive", "phoneCall"));
            //Element(driver, Control("DidntArrive", "phoneCall")).Click();
            ThinkTime(2);
            WaitUntil(driver, Control("OutcomeTour", "phoneCall"), 30);
            Element(driver, Control("OutcomeTour", "phoneCall")).Click();
            Select(Element(driver, Control("OutcomeTour", "Tour"))).SelectByText(Touroutcome);
            //MoveToElement(driver, Control("touroutcomeopn",opn, "phoneCall"));
            //Element(driver, Control("AnotherTour", opn, "phoneCall")).Click();
            ThinkTime(5);
            saveFooter(driver, testInReport, testName, testDataIteration);
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
        }




        public void LanguageChangeinContact(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string languageselect)
        {
            ThinkTime(3);
            scrollMiddleOpportunityPage(driver, testInReport, testName, testDataIteration);
            // scrollDownContactPageEnterprise(driver, testInReport, testName, testDataIteration);
            ThinkTime(3);

            // Enter Language - UK English
            //WaitUntil(driver, Control("ContactLanguage", "EnterpriseSales"), 70);
            //MoveToElement(driver, Control("ContactLanguage", "EnterpriseSales"));
            //ThinkTime(3);
            //Element(driver, Control("ContactLanguage", "EnterpriseSales")).SendKeys(Keys.Control + "a");
            //Element(driver, Control("ContactLanguage", "EnterpriseSales")).SendKeys(Keys.Delete);
            //Element(driver, Control("ContactLanguage", "EnterpriseSales")).SendKeys(languageselect);
            //ThinkTime(5);
            //MoveToElement(driver, Control("ContactLanguageDropdownSelect", "EnterpriseSales"));
            //ThinkTime(3);
            //Element(driver, Control("ContactLanguageDropdownSelect", "EnterpriseSales")).Click();
            //ThinkTime(3);
            //// Save Footer
            //if (Elements(driver, Control("ScriptDialg", "Opportunity")) > 0)
            //{
            //    Element(driver, Control("HandleScriptError", "Opportunity")).Click();
            //    ThinkTime(3);
            //    saveFooter(driver, testInReport, testName, testDataIteration);
            //}
            //else
            //{
            //    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "No Script error present", "No Script error present");



            //}

            WaitUntil(driver, Control("ContactLanguageField", "Generic"), 30);
            MoveToElement(driver, Control("ContactLanguageField", "Generic"));
            Element(driver, Control("ContactLanguageDelete", "Generic")).Click();

            WaitUntil(driver, Control("ContactLanguageInput", "Generic"), 30);
            MoveToElement(driver, Control("ContactLanguageInput", "Generic"));
            Element(driver, Control("ContactLanguageInput", "Generic")).Click();
            Element(driver, Control("ContactLanguageInput", "Generic")).SendKeys(languageselect);


            ThinkTime(2);
            WaitUntil(driver, Control("ITSalesCustomer", "Opportunity"), 30);
            MoveToElement(driver, Control("ITSalesCustomer", "Opportunity"));
            Element(driver, Control("ITSalesCustomer", "Opportunity")).Click();
            ThinkTime(2);
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);




            //WaitUntil(driver, Control("ContactLanguageDropdown", "Generic"), 30);
            //MoveToElement(driver, Control("ContactLanguageDropdown", "Generic"));
            //Element(driver, Control("ContactLanguageDropdown", "Generic")).Click();

            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Language Field updated Successfully", "Language Field Verification");

            saveFooter(driver, testInReport, testName, testDataIteration);
            ThinkTime(5);

        }



        public void VerifynextTourCommRequestActivity(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string activitytitle)
        {
            ThinkTime(3);
            scrollDownContactPageEnterprise(driver, testInReport, testName, testDataIteration);
            ThinkTime(5);
            WaitUntil(driver, Control("SecondActivityType", activitytitle, "phoneCall"), 30);
            if (Elements(driver, Control("SecondActivityType", activitytitle, "phoneCall")) > 0)
            {
                ThinkTime(10);
                Element(driver, Control("SecondActivityType", activitytitle, "phoneCall")).Click();
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Tour Booked email is available", "Activity");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Info", "No Activity Available.Please create one", "Activity");
                Assert.Fail("Activities are not  available.Please create one");
            }
            ThinkTime(15);

        }



        public void VerifyPostTourCommRequestActivity(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string activitytitle)
        {
            ThinkTime(3);
            scrollDownContactPageEnterprise(driver, testInReport, testName, testDataIteration);
            ThinkTime(5);
            WaitUntil(driver, Control("PostTourActivity", activitytitle, "phoneCall"), 30);
            if (Elements(driver, Control("PostTourActivity", activitytitle, "phoneCall")) > 0)
            {
                ThinkTime(10);
                Element(driver, Control("PostTourActivity", activitytitle, "phoneCall")).Click();
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Tour Booked email is available", "Activity");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Info", "No Activity Available.Please create one", "Activity");
                Assert.Fail("Activities are not  available.Please create one");
            }
            ThinkTime(15);

        }



        public void ChangingCountryinLead(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string country)
        {

            //ThinkTime(10);
            //SelectanyOpportunitybutton(driver, testInReport, testDataIteration, testName, "Refresh");
            //ThinkTime(3);
            //scrollDownContactPageEnterprise(driver, testInReport, testDataIteration, testName);
            //scrollDownContactPageEnterprise(driver, testInReport, testDataIteration, testName);
            //scrollDownLeadPage(driver, testInReport, testDataIteration, testName);
            scrollDownOpportunity(driver, testInReport, testDataIteration, testName);
            scrollDownOpportunity(driver, testInReport, testDataIteration, testName);
            scrollDownOpportunity(driver, testInReport, testDataIteration, testName);
            //scrollDownOpportunity(driver, testInReport, testDataIteration, testName);
            //scrollDownOpportunity(driver, testInReport, testDataIteration, testName);
            ThinkTime(3);

            WaitUntil(driver, Control("LeadCountry", "Accounts"), 120);
            MoveToElement(driver, Control("LeadCountry", "Accounts"));
            //Element(driver, Control("LeadCountry", "Accounts")).Click();
            ////WaitUntil(driver, Control("LeadCountryCancel", "Accounts"), 120);
            WaitUntil(driver, Control("LeadCountryCancel", "Accounts"), 120);
            MoveToElement(driver, Control("LeadCountryCancel", "Accounts"));
            Element(driver, Control("LeadCountryCancel", "Accounts")).Click();
            ThinkTime(3);
            Element(driver, Control("CountryInput", "Accounts")).Click();
            Element(driver, Control("CountryInput", "Accounts")).SendKeys(Keys.Control + "a");
            Element(driver, Control("CountryInput", "Accounts")).SendKeys(Keys.Delete);
            Element(driver, Control("CountryInput", "Accounts")).SendKeys(country);
            ThinkTime(2);
            WaitUntil(driver, Control("CountrySelect", "Accounts"), 30);
            MoveToElement(driver, Control("CountrySelect", "Accounts"));
            Element(driver, Control("CountrySelect", "Accounts")).Click();

            saveFooter(driver, testInReport, testName, testDataIteration);
            ThinkTime(10);
            if (Elements(driver, Control("ScriptDialg", "Opportunity")) > 0)
            {
                Element(driver, Control("HandleScriptError", "Opportunity")).Click();
                ThinkTime(3);
                saveFooter(driver, testInReport, testName, testDataIteration);
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "No Script error present", "No Script error present");
            }

        }


        public void VerifyLeadDefaultCurrency(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string currency)
        {

            ThinkTime(2);
            WaitUntil(driver, Control("LeadLname", "Generic"), 30);
            scrollDownLeadPage(driver, testInReport, testName, testDataIteration);
            //scrollDownContactPageEnterprise(driver, testInReport, testName, testDataIteration);
            //scrollDownContactPageEnterprise(driver, testInReport, testName, testDataIteration);
            // scrollDownContactPage(driver, testInReport, testName, testDataIteration);
            ThinkTime(2);

            WaitUntil(driver, Control("LeadCurrency", "phoneCall"), 30);
            string defaultcurrency = Element(driver, Control("LeadCurrency", "phoneCall")).Text.ToString();
            if (defaultcurrency == currency)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Default currency of Lead is 'British Pounds'", "British Pounds");

            }
            else
            {
                Assert.Fail("Incorrect Lead default currency");
            }

            ThinkTime(2);


        }

        public void VerifyLeadDefaultCurrencyNew(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string currency)
        {

            ThinkTime(2);
            WaitUntil(driver, Control("LeadLname", "Generic"), 30);
            scrollDownLeadPage(driver, testInReport, testName, testDataIteration);
            scrollDownLeadPage(driver, testInReport, testName, testDataIteration);

            ThinkTime(2);

            WaitUntil(driver, Control("LeadCurrency", "phoneCall"), 30);
            string defaultcurrency = Element(driver, Control("LeadCurrency", "phoneCall")).Text.ToString();
            if (defaultcurrency == currency)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Default currency of Lead is 'British Pounds'", "British Pounds");

            }
            else
            {
                Assert.Fail("Incorrect Lead default currency");
            }

            ThinkTime(2);


        }

        public void VerifyingTourRemainder(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string conditon)
        {

            ThinkTime(10);

            // scrollRightMiddle(driver, testInReport, testName, testDataIteration, "Scroll");

            ThinkTime(5);
            SwitchToFrame(driver, "contentIFrame0");
            SwitchToFrame(driver, "resultFrame");
            //driver.SwitchTo().Frame("resultFrame");
            ThinkTime(2);
            WaitUntil(driver, Control("ResultTourremiander", conditon, "Opportunity"), 120);
            string defaultcurrency = Element(driver, Control("ResultTourremiander", conditon, "Opportunity")).Text.ToString();
            if (defaultcurrency == conditon)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Default currency of Lead is 'British Pounds'", "British Pounds");

            }
            else
            {
                Assert.Fail("Incorrect Lead default currency");
            }

            ThinkTime(3);


        }



        public void Verifycolumnstatusinadvfind(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string status)
        {

            ThinkTime(10);

            // scrollRightMiddle(driver, testInReport, testName, testDataIteration, "Scroll");

            ThinkTime(5);
            SwitchToFrame(driver, "contentIFrame0");
            SwitchToFrame(driver, "resultFrame");
            //driver.SwitchTo().Frame("resultFrame");
            WaitUntil(driver, Control("ResultTourremiander", status, "Opportunity"), 30);
            string Getstatus = Element(driver, Control("ResultTourremiander", status, "Opportunity")).Text.ToString();
            if (Getstatus == status)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Status displayed correctly'", "Status displayed correctly");

            }
            else
            {
                Assert.Fail("Incorrect status displayed");
            }

            ThinkTime(3);


        }


        public void VerifyingCurrencyAdvFind(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string currency)
        {

            ThinkTime(10);

            // scrollRightMiddle(driver, testInReport, testName, testDataIteration, "Scroll");

            ThinkTime(5);
            SwitchToFrame(driver, "contentIFrame0");
            SwitchToFrame(driver, "resultFrame");
            //driver.SwitchTo().Frame("resultFrame");
            WaitUntil(driver, Control("ResultCurrencyNew", currency, "Opportunity"), 30);
            string defaultcurrency = Element(driver, Control("ResultCurrencyNew", currency, "Opportunity")).Text.ToString();
            if (defaultcurrency == currency)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Default currency of Lead is 'British Pounds'", "British Pounds");

            }
            else
            {
                Assert.Fail("Incorrect Lead default currency");
            }

            ThinkTime(3);


        }


        public void QuickCreateDefaultCurrency(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {

            ThinkTime(10);

            WaitUntil(driver, Control("LeadCurrency", "phoneCall"), 30);
            string defaultcurrency = Element(driver, Control("LeadCurrency", "phoneCall")).Text.ToString();
            if (defaultcurrency == "British Pounds")
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Default currency of Lead is 'British Pounds'", "British Pounds");

            }
            else
            {
                Assert.Fail("Incorrect Lead default currency");
            }


            WaitUntil(driver, Control("QuickCreateClose", "phoneCall"), 30);
            Element(driver, Control("QuickCreateClose", "phoneCall")).Click();
            ThinkTime(3);
        }


        public void VerifyOpportunityDefaultCurrency(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string symbol)
        {

            ThinkTime(2);
            WaitUntil(driver, Control("BPFProposeStage", "Opportunity"), 30);
            MoveToElement(driver, Control("BPFProposeStage", "Opportunity"));
            ElementHighlight(driver, Control("BPFProposeStage", "Opportunity"));
            Element(driver, Control("BPFProposeStage", "Opportunity")).Click();
            ThinkTime(2);
            WaitUntil(driver, Control("PotentialOrder", "phoneCall"), 30);
            MoveToElement(driver, Control("PotentialOrder", "phoneCall"));
            Element(driver, Control("PotentialOrder", "phoneCall")).Click();
            Element(driver, Control("PotentialOrder", "phoneCall")).SendKeys("200");
            ThinkTime(2);
            Element(driver, Control("PotentialOrder", "phoneCall")).SendKeys(Keys.Tab);
            ThinkTime(2);
            //WaitUntil(driver, Control("Order", "phoneCall"), 30);
            //MoveToElement(driver, Control("Order", "phoneCall"));
            //Element(driver, Control("Order", "phoneCall")).Click();
            WaitUntil(driver, Control("SymbolPound", symbol, "phoneCall"), 30);
            //MoveToElement(driver, Control("SymbolPound", symbol, "phoneCall"));

            int currency = Elements(driver, Control("SymbolPound", symbol, "phoneCall"));
            if (currency > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Currency same asthe country in the Opportuntiy", "Currency field verification");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Currency verification", "Currency field verification");

                Assert.Fail("field is not same as in the Opportunity");

            }

            //string defaultcurrency = Element(driver, Control("SymbolPound", symbol, "phoneCall")).Text.ToString();
            //if (defaultcurrency == "£200.00")
            //{
            //    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Default currency of Opportunity is '£'", "British Pounds");

            //}
            //else
            //{
            //    Assert.Fail("Incorrect Opportunity default currency");
            //}

            ThinkTime(3);

        }






        public void TourOutcome(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string activitytitle)
        {

            ThinkTime(3);
            WaitUntil(driver, Control("ActivityType", activitytitle, "phoneCall"), 30);
            if (Elements(driver, Control("ActivityType", activitytitle, "phoneCall")) > 0)
            {
                ThinkTime(10);
                Element(driver, Control("ActivityType", activitytitle, "phoneCall")).Click();
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Tour Booked email is available", "Activity");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Info", "No Activity Available.Please create one", "Activity");
                Assert.Fail("Activities are not  available.Please create one");

            }

            ThinkTime(15);
            WaitUntil(driver, Control("TourOutcomeButton", "phoneCall"), 30);
            MoveToElement(driver, Control("TourOutcomeButton", "phoneCall"));
            Element(driver, Control("TourOutcomeButton", "phoneCall")).Click();

            ThinkTime(5);
            WaitUntil(driver, Control("ArriveTour", "phoneCall"), 30);
            Element(driver, Control("ArriveTour", "phoneCall")).Click();
            ThinkTime(5);
            // driver.SwitchTo().DefaultContent();
            MoveToElement(driver, Control("DidntArrive", "phoneCall"));
            ElementHighlight(driver, Control("DidntArrive", "phoneCall"));
            Element(driver, Control("DidntArrive", "phoneCall")).Click();

            ThinkTime(2);
            WaitUntil(driver, Control("OutcomeTour", "phoneCall"), 30);
            Element(driver, Control("OutcomeTour", "phoneCall")).Click();
            MoveToElement(driver, Control("AnotherTour", "phoneCall"));
            Element(driver, Control("AnotherTour", "phoneCall")).Click();

            saveFooter(driver, testInReport, testName, testDataIteration);

            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);

        }


        //Selecting any active opportunity and itsales phone call from list
        public void VerifyAutowinTriggger(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(10);
            Element(driver, Control("HeaderFieldExpand", "Opportunity")).Click();
            AddLog(driver, testInReport, testName, testDataIteration, "StatusReason", "Status before trigger", "Status Reason Before Triggering");

            WaitUntil(driver, Control("StatusReason", "Opportunity"), 180);
            string s = Element(driver, Control("StatusReason", "Opportunity")).Text.ToString();
            Element(driver, Control("HeaderFieldExpand", "Opportunity")).Click();
            ThinkTime(5);
            WaitUntil(driver, Control("BPFProposeStage", "Opportunity"), 30);
            MoveToElement(driver, Control("BPFProposeStage", "Opportunity"));
            ElementHighlight(driver, Control("BPFProposeStage", "Opportunity"));
            Element(driver, Control("BPFProposeStage", "Opportunity")).Click();
            MoveToElement(driver, Control("OrderFIeld", "Opportunity"));
            Element(driver, Control("OrderFIeld", "Opportunity")).Click();
            ThinkTime(5);
            MoveToElement(driver, Control("PaymentField", "Opportunity"));

            Element(driver, Control("PaymentField", "Opportunity")).Click();
            ThinkTime(8);
            saveFooter(driver, testInReport, testName, testDataIteration);
            ThinkTime(4);
            Element(driver, Control("HeaderFieldExpand", "Opportunity")).Click();
            WaitUntil(driver, Control("StatusReason", "Opportunity"), 180);
            string w = Element(driver, Control("StatusReason", "Opportunity")).Text.ToString();
            if (Element(driver, Control("StatusReason", "Generic")).Text != w)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Auto-win Triggering Proccess Failed", "Auto-win Trigger");
                Assert.Fail("Incorrect Status Reason");

            }

            else if (s == w)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Auto-win Triggering Proccess Failed", "Auto-win Trigger");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Auto-win Triggering Proccess Succeeded", "Auto-win Trigger");

            }
        }
        //
        public string RetriveTheRecommandedBusinessCentreValue(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(20);
            //scrollMiddleDown(driver, testInReport, testName, testDataIteration);
            scrollMiddleOpportunityPage(driver, testInReport, testName, testDataIteration);
            WaitUntil(driver, Control("BusinessCentre", "Opportunity"), 360);
            MoveToElement(driver, Control("BusinessCentre", "Opportunity"));
            string RecBusinessCentre = Element(driver, Control("BusinessCentre", "Opportunity")).GetAttribute("title");

            return RecBusinessCentre;
        }

        //S
        public void VerifyRecBusinessCentreAutoPopulatedInCenterOfBookTour(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string recomendedBusiness)
        {
            ThinkTime(2);
            driver.SwitchTo().DefaultContent();
            string parentWindowHandle = driver.CurrentWindowHandle;
            WindowHandling(driver);
            //driver.SwitchTo().Frame("IFRAME_bookavisit");
            WaitUntil(driver, Control("Centre", "Opportunity"), 360);
            string RecBussinessCentre = Element(driver, Control("Centre", "Opportunity")).GetAttribute("value").ToString();
            if (RecBussinessCentre.Contains(recomendedBusiness))
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Centre Name is same as Recommeded Business Centre", "Centre");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Incorrect City Diary and Centre", "Centre");
                Assert.Fail("Centre Name is not same as Recommeded Business Centre");
            }
            Console.WriteLine(RecBussinessCentre);
        }

        //Selecting any active opportunity and itsales phone call from list
        public string SelectingActiveCell(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {

            WaitUntil(driver, Control("ActiveCell", "Generic"), 360);
            string s = Element(driver, Control("ActiveCell", "Generic")).Text.ToString();
            ActionsDoubleClick(driver, Control("ActiveCell", "Generic"));
            //Element(driver, Control("ActiveCell", "Generic")).Click();

            ThinkTime(10);
            return s;


        }

        public string Openedrecordheadertitle(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(10);
            string name = Element(driver, Control("HeaderTitle", "Opportunity")).GetAttribute("title");
            return name;
        }

        //Selecting any active opportunity and itsales phone call from list
        public void SelectingActiveCellEnterpriseSales(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            WaitUntil(driver, Control("SelectRecord", "EnterpriseSales"), 40);
            MoveToElement(driver, Control("SelectRecord", "EnterpriseSales"));
            ActionsDoubleClick(driver, Control("SelectRecord", "EnterpriseSales"));

        }


        //Selecting any active Account.

        public void SelectingActiveAccountEnterpriseSales(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(5);
            WaitUntil(driver, Control("SelectAccount", "EnterpriseSales"), 120);
            MoveToElement(driver, Control("SelectAccount", "EnterpriseSales"));
            ActionsDoubleClick(driver, Control("SelectAccount", "EnterpriseSales"));
            //JSClick(driver, Control("SelectAccountnew", "EnterpriseSales"));
        }

        public void SelectingActiveLead(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            WaitUntil(driver, Control("SelectLead", "Opportunity"), 360);
            MoveToElement(driver, Control("SelectLead", "Opportunity"));
            ActionsDoubleClick(driver, Control("SelectLead", "Opportunity"));
            //JSClick(driver, Control("SelectAccountnew", "EnterpriseSales"));
        }

        public void SelectingActiveLeadCust(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string Account)
        {
            WaitUntil(driver, Control("LeadSel", Account, "CommonObj"), 360);
            MoveToElement(driver, Control("LeadSel", Account, "CommonObj"));
            ActionsDoubleClick(driver, Control("LeadSel", Account, "CommonObj"));
            //JSClick(driver, Control("SelectAccountnew", "EnterpriseSales"));
        }

        public void selectmargincontact(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(10);
            //for (int i = 0; i < 12; i++)
            //{
            //    Actions action;
            //    action = new Actions(driver);
            //    action.SendKeys(Keys.Tab);
            //}
            ActionsClick(driver, Control("selectrow", "Opportunity"));
            ThinkTime(3);
        }

        public void verifyduplicaterecordinopenopp(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string expectedvalue)
        {
            ThinkTime(10);
            //for (int i = 0; i < 12; i++)
            //{
            //    Actions action;
            //    action = new Actions(driver);
            //    action.SendKeys(Keys.Tab);
            //}
            //ActionsClick(driver, Control("selectrow", "Opportunity"));
            ThinkTime(3);
            string oppname1 = Element(driver, Control("GetOppname", "Opportunity")).GetAttribute("title");

            ThinkTime(3);

            string oppname2 = Element(driver, Control("verifyduplicaterow", "Opportunity")).GetAttribute("title");

            if (oppname1 == expectedvalue || oppname2 == expectedvalue)
            {
                Assert.Fail("Duplicate records exist");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Duplicate record verification", "Dupe verification");


            }


        }


        public void verifyduplicaterecordinclosedopp(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string expectedvalue)
        {
            ThinkTime(10);
            //for (int i = 0; i < 12; i++)
            //{
            //    Actions action;
            //    action = new Actions(driver);
            //    action.SendKeys(Keys.Tab);
            //}
            //ActionsClick(driver, Control("selectrow", "Opportunity"));
            ThinkTime(3);
            // string oppname1 = Element(driver, Control("GetOppname", "Opportunity")).GetAttribute("title");

            ThinkTime(3);

            string oppname2 = Element(driver, Control("verifyduplicaterow", "Opportunity")).GetAttribute("title");

            if (oppname2 == expectedvalue)
            {
                Assert.Fail("Duplicate records exist");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Duplicate record verification", "Dupe verification");


            }


        }


        public void Referencefieldcheck(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(5);
            if (Elements(driver, Control("ScriptDialg", "Opportunity")) > 0)
            {
                Element(driver, Control("HandleScriptError", "Opportunity")).Click();
                ThinkTime(3);
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "No Script error present", "No Script error present");
            }
            ThinkTime(5);
            if (Elements(driver, Control("RefReadonly1", "Opportunity")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Reference is not editable", "No Error Prompt");
            }

            else

            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Reference is editable", "No Error Prompt");
                Assert.Fail("Reference is editable");
            }


        }

        public void RemovedSalesOwner(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {

            ThinkTime(5);
            if (Elements(driver, Control("ScriptDialg", "Opportunity")) > 0)
            {
                Element(driver, Control("HandleScriptError", "Opportunity")).Click();
                ThinkTime(3);
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "No Script error present", "No Script error present");
            }
            ThinkTime(5);
            if (Elements(driver, Control("SalesOwner", "Opportunity")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Sales Owner field exists", "No Error Prompt");
                Assert.Fail("Sales Owner field exists");

            }

            else

            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Sales Owner field does not exists", "No Error Prompt");
            }


        }



        public string selectmargin(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(10);
            ActionsClick(driver, Control("selectrow", "Opportunity"));
            ThinkTime(3);
            string oppname = Element(driver, Control("GetOppname", "Opportunity")).GetAttribute("title");
            return oppname;
        }

        //Selecting any accounts from the list
        public void SelectActiveCellContacts(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(5);
            //WaitUntil(driver, Control("ActiveCellContact", "Contacts"), 30);
            //ActionsDoubleClick(driver, Control("ActiveCellContact", "Contacts"));
            WaitUntil(driver, Control("ActiveCellContactmargin", "Contacts"), 80);
            ActionsDoubleClick(driver, Control("ActiveCellContactmargin", "Contacts"));
            ThinkTime(15);

            if (Elements(driver, Control("ScriptDialg", "Opportunity")) > 0)
            {
                Element(driver, Control("HandleScriptError", "Opportunity")).Click();
                ThinkTime(3);
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "No Script error present", "No Script error present");
            }
        }

        public void CheckingQuantityField(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(5);
            if (Elements(driver, Control("Quantity", "Opportunity")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Quantity Filed exists", "No Error Prompt");
            }

            else

            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Quantity Filed does not exists", "No Error Prompt");
                Assert.Fail("Quantity Filed does not exists");
            }
        }


        public void SelectActiveCellContact(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(3);
            WaitUntil(driver, Control("ActiveCellContactmargin", "Contacts"), 120);
            ActionsDoubleClick(driver, Control("ActiveCellContactmargin", "Contacts"));
            ThinkTime(7);
        }


        public void OpenSelectedActiveCellContact(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(3);
            WaitUntil(driver, Control("OpenAccount", "Accounts"), 30);
            ActionsDoubleClick(driver, Control("OpenAccount", "Accounts"));

            ThinkTime(7);
        }
        //To verify D&B Optimizer section is available
        public void VerifyDBSection(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(5);
            WaitUntil(driver, Control("dxbframe", "Accounts"), 180);
            driver.SwitchTo().Frame(Element(driver, Control("dxbframe", "Accounts")));
            // driver.SwitchTo().Frame("WebResource_BusinessProfileViewer");
            WaitUntil(driver, Control("DBFields", "Accounts"), 30);
            int dbfields = Elements(driver, Control("DBFields", "Accounts"));
            IList<IWebElement> field = driver.FindElements(Control("DBFields", "Accounts"));

            if (dbfields == 16)
            {
                for (int i = 0; i < dbfields; i++)
                {
                    string value = field[i].Text.ToString();
                    Console.WriteLine(value);
                }

                AddLog(driver, testInReport, testName, testDataIteration, "Info", "DB Optimizer section contains " + dbfields + " fields", "DBSection");
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "DB Optimizer section does contains fields for matching process", "DBSection");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "DB Optimizer section does not contains fields for matching process", "DBSection");
                Assert.Fail("D&B Section is missing the fields");
            }



        }

        //Verifying account page fields
        public void VerifyAccountfieldsisavailable(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {


            //driver.Manage().Window.z
            //scrollMiddleOpportunityPage(driver, testInReport, testName, testDataIteration);
            //ThinkTime(10);
            scrollMiddleaccounts(driver, testInReport, testName, testDataIteration);
            ThinkTime(10);
            scrollMiddleaccounts(driver, testInReport, testName, testDataIteration);
            ThinkTime(10);
            scrollMiddleaccounts(driver, testInReport, testName, testDataIteration);
            ThinkTime(10);
            int count = 21;
            IList<IWebElement> obj = driver.FindElements(Control("AccountFormFields", "Accounts"));
            //Console.WriteLine(count);
            String[] fieldname = { "Company Name", "Phone", "Website", "Corporate Account", "Parent Account", "Enterprise Key Account Manager", "D&B ID", "Key Account Manager", "Street 1", "Street 2", "Street 3", "City", "State/Province", "Country", "ZIP/Postal Code", "Broker", "Customer", "Prospect", "Supplier", "Service Provider" };




            for (int k = 1; k < count; k++)
            {
                for (int i = 0; i < k; i++)
                {

                    if (obj[k].Text.Equals(fieldname[i]))
                    {
                        Console.WriteLine(fieldname[i]);
                        break;
                    }
                    else
                    {

                        i++;
                        if (i > count)
                        {
                            Assert.Fail("fail");
                        }

                    }


                }

            }





        }

        // Method to Select Recommended Bussiness center(Book a tour)
        public void SelectRecomendedBussinessCentre(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string BussinessCentre)
        {

            ThinkTime(3);

            scrollDownBookTour(driver, testInReport, testName, testDataIteration);

            ThinkTime(7);

            if (Elements(driver, Control("RecomentedBussinessCentreLabel", "Opportunity")) > 0)
            {

                WaitUntil(driver, Control("RecomentedBussinessCentreLabel", "Opportunity"), 30);
                MoveToElement(driver, Control("RecomentedBussinessCentreLabel", "Opportunity"));
                Element(driver, Control("RecomentedBussinessCentreCloseButton", "Opportunity")).Click();

                WaitUntil(driver, Control("RecomentedBussinessCentreInputButton", "Opportunity"), 30);
                MoveToElement(driver, Control("RecomentedBussinessCentreInputButton", "Opportunity"));
                Element(driver, Control("RecomentedBussinessCentreInputButton", "Opportunity")).SendKeys(BussinessCentre);

                ThinkTime(2);
                MoveToElement(driver, Control("Languagedropdown", "EnterpriseSales"));
                Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();

            }

            else
            {
                WaitUntil(driver, Control("RecomentedBussinessCentreInputButton", "Opportunity"), 30);
                MoveToElement(driver, Control("RecomentedBussinessCentreInputButton", "Opportunity"));
                Element(driver, Control("RecomentedBussinessCentreInputButton", "Opportunity")).SendKeys(BussinessCentre);

                ThinkTime(2);
                MoveToElement(driver, Control("Languagedropdown", "EnterpriseSales"));
                Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();

            }

        }
        // Method to Select Recommended Bussiness center(Book a tour)
        public void SelectRecomendedBussinessCentre1(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string BussinessCentre)
        {
            scrollDownOpportunityEnterpriseCust(driver, testInReport, testName, testDataIteration, "600");
            if (Elements(driver, Control("RecomentedBussinessCentreLabel", "Opportunity")) > 0)
            {
                ThinkTime(5);
                WaitUntil(driver, Control("RecomentedBussinessCentreLabel", "Opportunity"), 30);
                MoveToElement(driver, Control("RecomentedBussinessCentreLabel", "Opportunity"));
                Element(driver, Control("RecomentedBussinessCentreCloseButton", "Opportunity")).Click();

                WaitUntil(driver, Control("RecomentedBussinessCentreInputButton", "Opportunity"), 30);
                MoveToElement(driver, Control("RecomentedBussinessCentreInputButton", "Opportunity"));
                Element(driver, Control("RecomentedBussinessCentreInputButton", "Opportunity")).SendKeys(BussinessCentre);

                ThinkTime(2);
                WaitUntil(driver, Control("Languagedropdown", "EnterpriseSales"), 360);
                MoveToElement(driver, Control("Languagedropdown", "EnterpriseSales"));
                Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();

            }

            else
            {
                WaitUntil(driver, Control("RecomentedBussinessCentreInputButton", "Opportunity"), 360);
                MoveToElement(driver, Control("RecomentedBussinessCentreInputButton", "Opportunity"));
                Element(driver, Control("RecomentedBussinessCentreInputButton", "Opportunity")).SendKeys(BussinessCentre);

                ThinkTime(2);
                WaitUntil(driver, Control("RecomentedBussinessCentreInputButton", "Opportunity"), 360);
                MoveToElement(driver, Control("Languagedropdown", "EnterpriseSales"));
                Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();

            }

        }

        // Method to Select Recommended Bussiness center(Book a tour)
        public void VerifyRecomendedBussinessCentre(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string BussinessCentre)
        {

            ThinkTime(3);

            scrollDownBookTour(driver, testInReport, testName, testDataIteration);
            ThinkTime(10);
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            ThinkTime(7);
            WaitUntil(driver, Control("RecomentedBussinessCentreInputButton", "Opportunity"), 360);
            MoveToElement(driver, Control("RecomentedBussinessCentreInputButton", "Opportunity"));
            Element(driver, Control("RecomentedBussinessCentreInputButton", "Opportunity")).SendKeys(BussinessCentre);


            ThinkTime(5);

            if (Elements(driver, Control("Languagedropdown", "EnterpriseSales")) > 0)

            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "closed centres is able to select", "BussinessCentre");
                Assert.Fail("D&B Section is missing the fields");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "closed centres is not able to select", "BussinessCentre");


            }

        }

        // Method to Select Recommended Bussiness center(Book a tour)
        public void VerifyRecomendedBussinessCentre1(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string BussinessCentre)
        {

            ThinkTime(3);

            //scrollDownBookTour(driver, testInReport, testName, testDataIteration);
            //scrollDownBookTour(driver, testInReport, testName, testDataIteration);
            ThinkTime(10);
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            ThinkTime(7);

            scrollDownOpportunityEnterpriseCust(driver, testInReport, testName, testDataIteration, "500");
            WaitUntil(driver, Control("OppBCentreLabel", "Opportunity"), 60);
            MoveToElement(driver, Control("OppBCentreLabel", "Opportunity"));
            Element(driver, Control("OppBCentreLabelClose", "Opportunity")).Click();
            ThinkTime(10);
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            ThinkTime(7);
            WaitUntil(driver, Control("RecomentedBussinessCentreInputButton", "Opportunity"), 60);
            MoveToElement(driver, Control("RecomentedBussinessCentreInputButton", "Opportunity"));
            Element(driver, Control("RecomentedBussinessCentreInputButton", "Opportunity")).SendKeys(BussinessCentre);


            ThinkTime(7);
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);

            ThinkTime(5);

            if (Elements(driver, Control("Languagedropdown", "EnterpriseSales")) > 0)

            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "closed centres is able to select", "BussinessCentre");
                Assert.Fail("D&B Section is missing the fields");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "closed centres is not able to select", "BussinessCentre");


            }
            ThinkTime(15);
        }

        // Method to Select Recommended Bussiness center(Book a tour)
        public void SelectRecomendedBussinessInput(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string BussinessCentre)
        {

            ThinkTime(3);

            scrollDownBookTour(driver, testInReport, testName, testDataIteration);

            ThinkTime(7);

            if (Elements(driver, Control("RecomentedBussinessCentreLabel", "Opportunity")) > 0)
            {

                WaitUntil(driver, Control("RecomentedBussinessCentreLabel", "Opportunity"), 30);
                MoveToElement(driver, Control("RecomentedBussinessCentreLabel", "Opportunity"));
                Element(driver, Control("RecomentedBussinessCentreCloseButton", "Opportunity")).Click();

                WaitUntil(driver, Control("RecomentedBussinessInputButton", "Opportunity"), 30);
                MoveToElement(driver, Control("RecomentedBussinessInputButton", "Opportunity"));
                Element(driver, Control("RecomentedBussinessInputButton", "Opportunity")).SendKeys(BussinessCentre);

                ThinkTime(2);
                MoveToElement(driver, Control("Languagedropdown", "EnterpriseSales"));
                Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();

            }

            else
            {
                WaitUntil(driver, Control("RecomentedBussinessCentreInputButton", "Opportunity"), 30);
                MoveToElement(driver, Control("RecomentedBussinessCentreInputButton", "Opportunity"));
                Element(driver, Control("RecomentedBussinessCentreInputButton", "Opportunity")).SendKeys(BussinessCentre);

                ThinkTime(2);
                MoveToElement(driver, Control("Languagedropdown", "EnterpriseSales"));
                Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();

            }

        }
        //public void ClearCacheItems()
        //{
        //    List<string> keys = new List<string>();
        //    IDictionaryEnumerator enumerator = Cache.GetEnumerator();
        //    while (enumerator.MoveNext())
        //        keys.Add(enumerator.Key.ToString());
        //    for (int i = 0; i < keys.Count; i++)
        //        Cache.Remove(keys[i]);
        //}

        //Method to Create new opportunity for book a tour with account type as Is Customer.
        public string CreateNewOppWithIsCustomerAccount(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string RecomendedBussinessCenre)
        {

            string Y1 = DateTime.Now.ToString("MMMM d");
            string Y2 = DateTime.Now.ToString("yyyy");
            string Y3 = Y1 + ", " + Y2;
            Console.WriteLine(Y1 + Y2);
            string Date = DateTime.Today.ToString("dd-MM-yyyy");
            DateTime Now = DateTime.Now;
            string Time = Date + Convert.ToString(Now.Hour) + Convert.ToString(Now.Millisecond);

            string Contact = "AutomatContact" + Time;
            string Company = "AutomatCompany" + Time;
            string email = "AutomatCompany" + Time + "@gmail.com";
            ThinkTime(2);
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);



            WaitUntil(driver, Control("NewButn", "Opportunity"), 30);
            MoveToElement(driver, Control("NewButn", "Opportunity"));
            Element(driver, Control("NewButn", "Opportunity")).Click();


            ThinkTime(2);
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);

            //create new contact.
            ThinkTime(2);
            WaitUntil(driver, Control("NewContactInput", "Opportunity"), 60);
            MoveToElement(driver, Control("NewContactInput", "Opportunity"));
            JSClick(driver, Control("NewContactInput", "Opportunity"));
            ThinkTime(2);
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);

            WaitUntil(driver, Control("NewContactButton", "Opportunity"), 60);
            MoveToElement(driver, Control("NewContactButton", "Opportunity"));
            Element(driver, Control("NewContactButton", "Opportunity")).Click();
            ThinkTime(2);


            ThinkTime(2);
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            ThinkTime(2);
            WaitUntil(driver, Control("NewContactLname", "Opportunity"), 30);
            MoveToElement(driver, Control("NewContactLname", "Opportunity"));
            Element(driver, Control("NewContactLname", "Opportunity")).Click();
            Element(driver, Control("NewContactLname", "Opportunity")).SendKeys(Contact);
            ThinkTime(2);



            WaitUntil(driver, Control("NewLanguageInput", "Opportunity"), 60);
            MoveToElement(driver, Control("NewLanguageInput", "Opportunity"));
            Element(driver, Control("NewLanguageInput", "Opportunity")).Click();
            Element(driver, Control("NewLanguageInput", "Opportunity")).SendKeys(Keys.Control + "a");
            Element(driver, Control("NewLanguageInput", "Opportunity")).SendKeys(Keys.Delete);
            Element(driver, Control("NewLanguageInput", "Opportunity")).Clear();

            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            WaitUntil(driver, Control("NewLanguageInput", "Opportunity"), 30);
            MoveToElement(driver, Control("NewLanguageInput", "Opportunity"));
            Element(driver, Control("NewLanguageInput", "Opportunity")).Click();
            Element(driver, Control("NewLanguageInput", "Opportunity")).SendKeys(Keys.Control + "a");
            Element(driver, Control("NewLanguageInput", "Opportunity")).SendKeys(Keys.Delete);
            Element(driver, Control("NewLanguageInput", "Opportunity")).SendKeys("UK english");
            ThinkTime(2);
            WaitUntil(driver, Control("ITSalesCustomer", "Opportunity"), 30);
            MoveToElement(driver, Control("ITSalesCustomer", "Opportunity"));
            Element(driver, Control("ITSalesCustomer", "Opportunity")).Click();
            ThinkTime(2);
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            WaitUntil(driver, Control("Contactemailfield", "36.1_Dashboard"), 30);
            Element(driver, Control("Contactemailfield", "36.1_Dashboard")).SendKeys(email);

            ThinkTime(2);
            WaitUntil(driver, Control("Quickcreatesave", "Opportunity"), 30);
            MoveToElement(driver, Control("Quickcreatesave", "Opportunity"));
            Element(driver, Control("Quickcreatesave", "Opportunity")).Click();
            ThinkTime(2);

            // Number of people
            // Number of people
            WaitUntil(driver, Control("Numberofpeople", "Opportunity"), 60);
            MoveToElement(driver, Control("Numberofpeople", "Opportunity"));
            ActionsClick(driver, Control("Numberofpeople", "Opportunity"));
            Element(driver, Control("Numberofpeople", "Opportunity")).SendKeys("13");

            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);

            ThinkTime(2);
            //Create new account.
            //scrollDownOpportunityEnterprise(driver, testInReport, testName, testDataIteration);
            WaitUntil(driver, Control("NewAccountInput", "Opportunity"), 60);
            MoveToElement(driver, Control("NewAccountInput", "Opportunity"));
            Element(driver, Control("NewAccountInput", "Opportunity")).Click();
            ThinkTime(2);
            WaitUntil(driver, Control("NewAccountButton", "Opportunity"), 30);
            MoveToElement(driver, Control("NewAccountButton", "Opportunity"));
            Element(driver, Control("NewAccountButton", "Opportunity")).Click();

            ThinkTime(2);
            WaitUntil(driver, Control("NewCompanyNameInput", "Opportunity"), 30);
            MoveToElement(driver, Control("NewCompanyNameInput", "Opportunity"));
            Element(driver, Control("NewCompanyNameInput", "Opportunity")).Click();
            Element(driver, Control("NewCompanyNameInput", "Opportunity")).SendKeys(Company);
            ThinkTime(2);
            WaitUntil(driver, Control("IsCustomerType", "Opportunity"), 30);
            MoveToElement(driver, Control("IsCustomerType", "Opportunity"));
            Element(driver, Control("IsCustomerType", "Opportunity")).Click();
            ThinkTime(2);
            WaitUntil(driver, Control("NewContactSaveButton", "Opportunity"), 30);
            MoveToElement(driver, Control("NewContactSaveButton", "Opportunity"));
            Element(driver, Control("NewContactSaveButton", "Opportunity")).Click();

            ThinkTime(3);


            //New Start Date


            SelectOpportunityTab(driver, testInReport, testName, testDataIteration, "Summary");
            ThinkTime(2);
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            WaitUntil(driver, Control("DatePickerViewButton", "Opportunity"), 60);
            MoveToElement(driver, Control("DatePickerViewButton", "Opportunity"));
            Element(driver, Control("DatePickerViewButton", "Opportunity")).Click();

            ThinkTime(2);
            WaitUntil(driver, Control("NewStartDate", Y3, "Opportunity"), 60);
            MoveToElement(driver, Control("NewStartDate", Y3, "Opportunity"));
            Element(driver, Control("NewStartDate", Y3, "Opportunity")).Click();
            scrollDownOpportunityEnterprise(driver, testInReport, testName, testDataIteration);

            ThinkTime(2);
            WaitUntil(driver, Control("RecomentedBussinessCentreInputButton", "Opportunity"), 30);
            MoveToElement(driver, Control("RecomentedBussinessCentreInputButton", "Opportunity"));
            Element(driver, Control("RecomentedBussinessCentreInputButton", "Opportunity")).Click();
            Element(driver, Control("RecomentedBussinessCentreInputButton", "Opportunity")).SendKeys(RecomendedBussinessCenre);

            ThinkTime(3);
            WaitUntil(driver, Control("Languagedropdown", "EnterpriseSales"), 100);
            MoveToElement(driver, Control("Languagedropdown", "EnterpriseSales"));
            Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();




            ThinkTime(2);

            WaitUntil(driver, Control("Channel", "Opportunity"), 360);
            MoveToElement(driver, Control("Channel", "Opportunity"));
            Element(driver, Control("Channel", "Opportunity")).SendKeys(Keys.Control + "a");
            Element(driver, Control("Channel", "Opportunity")).SendKeys(Keys.Delete);
            Element(driver, Control("Channel", "Opportunity")).SendKeys("Centre:");
            ThinkTime(2);
            WaitUntil(driver, Control("SelectSourceDropdown1", "Generic"), 30);
            MoveToElement(driver, Control("SelectSourceDropdown1", "Generic"));
            Element(driver, Control("SelectSourceDropdown1", "Generic")).Click();
            //scrollDownOpportunityEnterprise(driver, testInReport, testName, testDataIteration);
            scrollDownOpportunity(driver, testInReport, testName, testDataIteration);
            //scrollDownOpportunity(driver, testInReport, testName, testDataIteration);
            ThinkTime(2);
            //New Major Source
            WaitUntil(driver, Control("NewMajorSourceInput", "Opportunity"), 360);
            MoveToElement(driver, Control("NewMajorSourceInput", "Opportunity"));
            Element(driver, Control("NewMajorSourceInput", "Opportunity")).Click();
            ThinkTime(2);
            Element(driver, Control("NewMajorSourceInput", "Opportunity")).SendKeys(Keys.Control + "a");
            Element(driver, Control("NewMajorSourceInput", "Opportunity")).SendKeys(Keys.Delete);
            Element(driver, Control("NewMajorSourceInput", "Opportunity")).SendKeys("Existing");
            ThinkTime(2);
            WaitUntil(driver, Control("NewMajorSourceSelect", "Opportunity"), 360);
            MoveToElement(driver, Control("NewMajorSourceSelect", "Opportunity"));
            Element(driver, Control("NewMajorSourceSelect", "Opportunity")).Click();



            ThinkTime(2);
            WaitUntil(driver, Control("NewMinorSourceInput", "Opportunity"), 360);
            MoveToElement(driver, Control("NewMinorSourceInput", "Opportunity"));
            Element(driver, Control("NewMinorSourceInput", "Opportunity")).Click();
            ThinkTime(2);
            Element(driver, Control("NewMinorSourceInput", "Opportunity")).SendKeys(Keys.Control + "a");
            Element(driver, Control("NewMinorSourceInput", "Opportunity")).SendKeys(Keys.Delete);
            Element(driver, Control("NewMinorSourceInput", "Opportunity")).SendKeys("Acquisition");
            ThinkTime(2);
            WaitUntil(driver, Control("NewMinorSourceSelect", "Opportunity"), 360);
            MoveToElement(driver, Control("NewMinorSourceSelect", "Opportunity"));
            Element(driver, Control("NewMinorSourceSelect", "Opportunity")).Click();
            ThinkTime(3);

            saveFooter(driver, testInReport, testName, testDataIteration);
            ThinkTime(2);
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);

            return Contact;
        }




        //Method to Create new opportunity for book a tour.
        public string CreateNewOpportunityBookATour(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string RecomendedBussinessCenre)
        {

            string Y1 = DateTime.Now.ToString("MMMM d");
            string Y2 = DateTime.Now.ToString("yyyy");
            string Y3 = Y1 + ", " + Y2;
            Console.WriteLine(Y1 + Y2);
            string Date = DateTime.Today.ToString("dd-MM-yyyy");
            DateTime Now = DateTime.Now;
            string Time = Date + Convert.ToString(Now.Hour) + Convert.ToString(Now.Millisecond);

            string Contact = "AutomatContact" + Time;
            string Company = "AutomatCompany" + Time;
            string email = "AutomatCompany" + Time + "@gmail.com";
            ThinkTime(2);
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);



            WaitUntil(driver, Control("NewButn", "Opportunity"), 30);
            MoveToElement(driver, Control("NewButn", "Opportunity"));
            Element(driver, Control("NewButn", "Opportunity")).Click();
            ThinkTime(7);
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            ThinkTime(2);
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            ThinkTime(2);
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            ThinkTime(2);
            DiscardChanges(driver, testInReport, testName, testDataIteration);
            ThinkTime(2);
            WaitUntil(driver, Control("NewButn", "Opportunity"), 30);
            MoveToElement(driver, Control("NewButn", "Opportunity"));
            Element(driver, Control("NewButn", "Opportunity")).Click();
            ThinkTime(2);
            DiscardChanges(driver, testInReport, testName, testDataIteration);
            ThinkTime(4);


            //create new contact.
            ThinkTime(2);
            WaitUntil(driver, Control("NewContactInput", "Opportunity"), 60);
            MoveToElement(driver, Control("NewContactInput", "Opportunity"));
            JSClick(driver, Control("NewContactInput", "Opportunity"));
            ThinkTime(2);
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);

            WaitUntil(driver, Control("NewContactButton", "Opportunity"), 60);
            MoveToElement(driver, Control("NewContactButton", "Opportunity"));
            Element(driver, Control("NewContactButton", "Opportunity")).Click();
            ThinkTime(2);


            ThinkTime(2);
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            ThinkTime(2);
            WaitUntil(driver, Control("NewContactLname", "Opportunity"), 30);
            MoveToElement(driver, Control("NewContactLname", "Opportunity"));
            Element(driver, Control("NewContactLname", "Opportunity")).Click();
            Element(driver, Control("NewContactLname", "Opportunity")).SendKeys(Contact);
            ThinkTime(2);



            WaitUntil(driver, Control("NewLanguageInput", "Opportunity"), 60);
            MoveToElement(driver, Control("NewLanguageInput", "Opportunity"));
            Element(driver, Control("NewLanguageInput", "Opportunity")).Click();
            Element(driver, Control("NewLanguageInput", "Opportunity")).SendKeys(Keys.Control + "a");
            Element(driver, Control("NewLanguageInput", "Opportunity")).SendKeys(Keys.Delete);
            Element(driver, Control("NewLanguageInput", "Opportunity")).Clear();

            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            WaitUntil(driver, Control("NewLanguageInput", "Opportunity"), 30);
            MoveToElement(driver, Control("NewLanguageInput", "Opportunity"));
            Element(driver, Control("NewLanguageInput", "Opportunity")).Click();
            Element(driver, Control("NewLanguageInput", "Opportunity")).SendKeys(Keys.Control + "a");
            Element(driver, Control("NewLanguageInput", "Opportunity")).SendKeys(Keys.Delete);
            Element(driver, Control("NewLanguageInput", "Opportunity")).SendKeys("UK english");
            ThinkTime(2);
            WaitUntil(driver, Control("ITSalesCustomer", "Opportunity"), 30);
            MoveToElement(driver, Control("ITSalesCustomer", "Opportunity"));
            ThinkTime(5);
            Element(driver, Control("ITSalesCustomer", "Opportunity")).Click();
            ThinkTime(2);
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            WaitUntil(driver, Control("Contactemailfield", "36.1_Dashboard"), 30);
            Element(driver, Control("Contactemailfield", "36.1_Dashboard")).SendKeys(email);

            ThinkTime(2);
            WaitUntil(driver, Control("Quickcreatesave", "Opportunity"), 30);
            MoveToElement(driver, Control("Quickcreatesave", "Opportunity"));
            Element(driver, Control("Quickcreatesave", "Opportunity")).Click();
            ThinkTime(2);

            // Number of people
            // Number of people
            WaitUntil(driver, Control("Numberofpeople", "Opportunity"), 60);
            MoveToElement(driver, Control("Numberofpeople", "Opportunity"));
            ActionsClick(driver, Control("Numberofpeople", "Opportunity"));
            Element(driver, Control("Numberofpeople", "Opportunity")).SendKeys("13");

            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);

            ThinkTime(2);
            //Create new account.
            //scrollDownOpportunityEnterprise(driver, testInReport, testName, testDataIteration);
            WaitUntil(driver, Control("NewAccountInput", "Opportunity"), 60);
            MoveToElement(driver, Control("NewAccountInput", "Opportunity"));
            Element(driver, Control("NewAccountInput", "Opportunity")).Click();
            ThinkTime(2);
            WaitUntil(driver, Control("NewAccountButton", "Opportunity"), 30);
            MoveToElement(driver, Control("NewAccountButton", "Opportunity"));
            Element(driver, Control("NewAccountButton", "Opportunity")).Click();

            ThinkTime(5);
            WaitUntil(driver, Control("NewCompanyNameInput", "Opportunity"), 30);
            Element(driver, Control("NewCompanyNameInput", "Opportunity")).Click();
            Element(driver, Control("NewCompanyNameInput", "Opportunity")).SendKeys("test123");
            ThinkTime(2);
            WaitUntil(driver, Control("NewContactSaveButton", "Opportunity"), 30);
            MoveToElement(driver, Control("NewContactSaveButton", "Opportunity"));
            Element(driver, Control("NewContactSaveButton", "Opportunity")).Click();

            ThinkTime(3);


            //New Start Date


            SelectOpportunityTab(driver, testInReport, testName, testDataIteration, "Summary");
            ThinkTime(2);
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            WaitUntil(driver, Control("DatePickerViewButton", "Opportunity"), 60);
            MoveToElement(driver, Control("DatePickerViewButton", "Opportunity"));
            Element(driver, Control("DatePickerViewButton", "Opportunity")).Click();

            ThinkTime(2);
            WaitUntil(driver, Control("NewStartDate", Y3, "Opportunity"), 60);
            MoveToElement(driver, Control("NewStartDate", Y3, "Opportunity"));
            Element(driver, Control("NewStartDate", Y3, "Opportunity")).Click();
            scrollDownOpportunityEnterprise(driver, testInReport, testName, testDataIteration);

            ThinkTime(2);
            WaitUntil(driver, Control("RecomentedBussinessCentreInputButton", "Opportunity"), 30);
            MoveToElement(driver, Control("RecomentedBussinessCentreInputButton", "Opportunity"));
            Element(driver, Control("RecomentedBussinessCentreInputButton", "Opportunity")).Click();
            Element(driver, Control("RecomentedBussinessCentreInputButton", "Opportunity")).SendKeys(Keys.Control + "a");

            Element(driver, Control("RecomentedBussinessCentreInputButton", "Opportunity")).SendKeys(Keys.Delete);

            Element(driver, Control("RecomentedBussinessCentreInputButton", "Opportunity")).SendKeys(RecomendedBussinessCenre);

            ThinkTime(3);
            WaitUntil(driver, Control("Languagedropdown", "EnterpriseSales"), 100);
            MoveToElement(driver, Control("Languagedropdown", "EnterpriseSales"));
            Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();


            //scrollDownOpportunityEnterprise(driver, testInReport, testName, testDataIteration);
            //scrollDownOpportunity(driver, testInReport, testName, testDataIteration);
            //scrollDownOpportunity(driver, testInReport, testName, testDataIteration);
            scrollDownOpportunity(driver, testInReport, testName, testDataIteration);

            ThinkTime(2);

            WaitUntil(driver, Control("Channel", "Opportunity"), 360);
            MoveToElement(driver, Control("Channel", "Opportunity"));
            Element(driver, Control("Channel", "Opportunity")).SendKeys(Keys.Control + "a");
            Element(driver, Control("Channel", "Opportunity")).SendKeys(Keys.Delete);
            Element(driver, Control("Channel", "Opportunity")).SendKeys("Sales");
            scrollDownOpportunityEnterpriseCust(driver, testInReport, testName, testDataIteration, "300");
            ThinkTime(2);
            WaitUntil(driver, Control("NewMinorSourceSelect", "Opportunity"), 30);
            MoveToElement(driver, Control("NewMinorSourceSelect", "Opportunity"));
            Element(driver, Control("NewMinorSourceSelect", "Opportunity")).Click();
            //scrollDownOpportunityEnterprise(driver, testInReport, testName, testDataIteration);
            ThinkTime(2);
            //New Major Source
            WaitUntil(driver, Control("NewMajorSourceInput", "Opportunity"), 360);
            MoveToElement(driver, Control("NewMajorSourceInput", "Opportunity"));
            Element(driver, Control("NewMajorSourceInput", "Opportunity")).Click();
            ThinkTime(2);
            Element(driver, Control("NewMajorSourceInput", "Opportunity")).SendKeys(Keys.Control + "a");
            Element(driver, Control("NewMajorSourceInput", "Opportunity")).SendKeys(Keys.Delete);
            Element(driver, Control("NewMajorSourceInput", "Opportunity")).SendKeys("Existing");
            ThinkTime(2);
            WaitUntil(driver, Control("NewMajorSourceSelect", "Opportunity"), 360);
            MoveToElement(driver, Control("NewMajorSourceSelect", "Opportunity"));
            Element(driver, Control("NewMajorSourceSelect", "Opportunity")).Click();



            ThinkTime(2);
            WaitUntil(driver, Control("NewMinorSourceInput", "Opportunity"), 360);
            MoveToElement(driver, Control("NewMinorSourceInput", "Opportunity"));
            Element(driver, Control("NewMinorSourceInput", "Opportunity")).Click();
            ThinkTime(2);
            Element(driver, Control("NewMinorSourceInput", "Opportunity")).SendKeys(Keys.Control + "a");
            Element(driver, Control("NewMinorSourceInput", "Opportunity")).SendKeys(Keys.Delete);
            Element(driver, Control("NewMinorSourceInput", "Opportunity")).SendKeys("Acquisition");
            ThinkTime(2);
            WaitUntil(driver, Control("NewMinorSourceSelect", "Opportunity"), 360);
            MoveToElement(driver, Control("NewMinorSourceSelect", "Opportunity"));
            Element(driver, Control("NewMinorSourceSelect", "Opportunity")).Click();
            ThinkTime(3);

            saveFooter(driver, testInReport, testName, testDataIteration);
            ThinkTime(2);
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);

            return Contact;
        }

        public void SlotVerification(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)

        {

            string parentWindowHandle = driver.CurrentWindowHandle;
            WindowHandling(driver);
            ThinkTime(2);
            WaitUntil(driver, Control("CentreObj", "CommonObj"), 360);
            if (Elements(driver, Control("VerifySlots", "CommonObj")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Multiple slots available", "Multiple slots available");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Multiple slots not available", "Multiple slots not available");
                Assert.Fail("Multiple slots not available");
            }
            driver.Close();

            WindowHandling(driver, parentWindowHandle);

        }

        public void ScriptErrorExcep(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)

        {
            try
            {
                for (int l = 0; l < 10; l++)
                {
                    ThinkTime(2);
                    if (Elements(driver, Control("ScriptDialg", "Opportunity")) > 0)
                    {
                        Element(driver, Control("HandleScriptError", "Opportunity")).Click();
                        ThinkTime(2);
                    }

                    else
                    {
                        AddLog(driver, testInReport, testName, testDataIteration, "Pass", "No Script error present", "No Script error present");
                        break;
                    }
                }
            }
            catch (Exception e)
            {
            }
        }



        public void HandleScriptError(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {
            ThinkTime(3);

            //Handle Script Error

            if (Elements(driver, Control("ScriptDialg", "Opportunity")) > 0)
            {
                Element(driver, Control("HandleScriptError", "Opportunity")).Click();
                ThinkTime(3);
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "No Script error present", "No Script error present");

            }
        }

        public void QualifyLead(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {

            WaitUntil(driver, Control("Oppheader", "Qualify", "Opportunity"), 360);
            Element(driver, Control("Oppheader", "Qualify", "Opportunity")).Click();
            ThinkTime(10);
            //try

            //{
            //ThinkTime(3);
            Element(driver, Control("Qualifyok", "Opportunity")).Click();
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Qualify Continue is displayed", "Qualify continue is displayed");

            //}
            //catch
            //{

            //}


        }
        public void VerifyTopicAfterUpdateBusinessCentre(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string newBus)
        {
            scrollDownOpportunityEnterpriseCust(driver, testInReport, testName, testDataIteration, "600");

            ThinkTime(2);
            WaitUntil(driver, Control("delBusCen", "CommonObj"), 30);
            MoveToElement(driver, Control("delBusCen", "CommonObj"));
            ThinkTime(2);
            Element(driver, Control("delBusCen", "CommonObj")).SendKeys(Keys.Control + "a");
            Element(driver, Control("delBusCen", "CommonObj")).SendKeys(Keys.Delete);
            Element(driver, Control("RecBusInput", "CommonObj")).SendKeys(newBus);
            ThinkTime(2);
            WaitUntil(driver, Control("NewMinorSourceSelect", "Opportunity"), 30);
            Element(driver, Control("NewMinorSourceSelect", "Opportunity")).Click();
            ThinkTime(2);
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Entered Business center", "Entered Business center");
            saveFooter(driver, testInReport, testName, testDataIteration);
            SelectanyOpportunitybutton(driver, testInReport, testName, testDataIteration, "Refresh");
            ThinkTime(2);
            WaitUntil(driver, Control("GetOppTopic", "Opportunity"), 120);
            string GetTopic = Element(driver, Control("GetOppTopic", "Opportunity")).GetAttribute("innerText");
            if (GetTopic.Contains(newBus))
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Topic updated properly", "Topic updated properly");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Topic not updated", "Topic not updated");
                Assert.Fail("Topic not updated");
            }





        }

        public void VerifyLeadAutoQualified(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {
            ThinkTime(2);
            WaitUntil(driver, Control("LeadStatus", "Generic"), 200);
            ThinkTime(10);
            string LeadQualify = Element(driver, Control("LeadStatus", "Opportunity")).GetAttribute("aria-label");
            if (LeadQualify == "Qualified")
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Lead is Auto Qualified", "Auto Qualify LEAD");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Lead is Auto Qualified", "Auto Qualify LEAD");

            }



        }

        public void VerifyBrandAutoPopulatedAfterQualify(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)

        {
            ThinkTime(3);
            WaitUntil(driver, Control("Brandfield", "Opportunity"), 60);
            MoveToElement(driver, Control("Brandfield", "Opportunity"));
            string BrandValue = Element(driver, Control("Brandfield", "Opportunity")).GetAttribute("title");
            if (BrandValue == "Regus")
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Brand is not autopopulated", "Brand is not autopopulated");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "fail", "Brand is autopopulated", "Brand is autopopulated");
            }
        }

        public string CreateNewLeadWithOutBrand(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string LastName, string Email, string Source, string SourceSite, string MajorSource, string MinorSource, string TimeInSec)
        {
            //string Y1 = DateTime.Now.ToString("MMMM dd");
            //string Y2 = DateTime.Now.ToString("yyyy");
            //string Y3 = Y1 + ", " + Y2;
            ////LastName + Time;
            //string Date = DateTime.Today.ToString("dd-MM-yyyy");
            //DateTime Now = DateTime.Now;
            //string Time = Date + Convert.ToString(Now.Hour) + Convert.ToString(Now.Millisecond);


            string Time = DateTime.UtcNow.ToString("yyyy-MM-dd HH:mm:ss.fff", CultureInfo.InvariantCulture);
            string LName = LastName + Time;

            // Enter Lastname 
            ThinkTime(2);
            WaitUntil(driver, Control("LeadLname", "Generic"), 360);
            MoveToElement(driver, Control("LeadLname", "Generic"));
            Element(driver, Control("LeadLname", "Generic")).SendKeys(Keys.Control + "a");
            Element(driver, Control("LeadLname", "Generic")).SendKeys(Keys.Delete);
            Element(driver, Control("LeadLname", "Generic")).SendKeys(LName);
            Element(driver, Control("Lastnameclick", "Generic")).Click();

            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Last Name Field updated Successfully", "Last Name Field Verification");

            ThinkTime(3);

            //Select Email verification.

            WaitUntil(driver, Control("LeadEmail", "Generic"), 30);
            MoveToElement(driver, Control("LeadEmail", "Generic"));
            Element(driver, Control("LeadEmail", "Generic")).Click();
            ThinkTime(1);
            Element(driver, Control("LeadEmail", "Generic")).SendKeys(Keys.Control + "a");
            Element(driver, Control("LeadEmail", "Generic")).SendKeys(Keys.Delete);
            ThinkTime(2);
            Element(driver, Control("LeadEmail", "Generic")).SendKeys(Email);
            ThinkTime(5);

            if (Elements(driver, Control("ScriptDialg", "Opportunity")) > 0)
            {
                Element(driver, Control("HandleScriptError", "Opportunity")).Click();
                ThinkTime(3);
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "No Script error present", "No Script error present");

            }

            scrollDownOpportunity(driver, testInReport, testName, testDataIteration);
            scrollDownOpportunity(driver, testInReport, testName, testDataIteration);
            //  Element(driver, Control("Emialclick", "Generic")).Click();

            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Email Field updated Successfully", "Email Field Verification");

            //Select Source verification

            if (Elements(driver, Control("SourceVerification", "Generic")) > 0)
            {
                ThinkTime(2);
                WaitUntil(driver, Control("SourceVerification", "Generic"), 30);
                MoveToElement(driver, Control("SourceVerification", "Generic"));
                Element(driver, Control("SourceDeleteButton", "Generic")).Click();
                ThinkTime(2);
                WaitUntil(driver, Control("SourceInputField", "Generic"), 30);
                MoveToElement(driver, Control("SourceInputField", "Generic"));
                Element(driver, Control("SourceInputField", "Generic")).SendKeys(Source);
                ThinkTime(2);
                WaitUntil(driver, Control("SelectSourceDropdown", "Generic"), 30);
                MoveToElement(driver, Control("SelectSourceDropdown", "Generic"));
                Element(driver, Control("SelectSourceDropdown", "Generic")).Click();

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Source Field updated Successfully", "Source Field Verification");

            }

            else
            {
                ThinkTime(2);
                WaitUntil(driver, Control("SourceInputField", "Generic"), 30);
                MoveToElement(driver, Control("SourceInputField", "Generic"));
                Element(driver, Control("SourceInputField", "Generic")).SendKeys(Source);

                ThinkTime(2);
                WaitUntil(driver, Control("SelectSourceDropdown", "Generic"), 360);
                MoveToElement(driver, Control("SelectSourceDropdown", "Generic"));
                Element(driver, Control("SelectSourceDropdown", "Generic")).Click();

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Source Field updated Successfully", "Source Field Verification");

            }

            ThinkTime(2);
            WaitUntil(driver, Control("sourcesite", "Generic"), 360);
            Element(driver, Control("sourcesite", "Generic")).Click();
            Element(driver, Control("sourcesite", "Generic")).SendKeys(SourceSite);

            ThinkTime(10);
            //scrollDownOpportunityPage(driver, testInReport, testName, testDataIteration);

            //Select Major Source verification

            if (Elements(driver, Control("MajorSourceVerification", "Generic")) > 0)
            {
                ThinkTime(2);
                WaitUntil(driver, Control("MajorSourceVerification", "Generic"), 30);
                MoveToElement(driver, Control("MajorSourceVerification", "Generic"));
                Element(driver, Control("MajorSourceDeleteButton", "Generic")).Click();

                ThinkTime(2);
                WaitUntil(driver, Control("MajorSourceInputField", "Generic"), 30);
                MoveToElement(driver, Control("MajorSourceInputField", "Generic"));
                Element(driver, Control("MajorSourceInputField", "Generic")).SendKeys(MajorSource);
                ThinkTime(3);
                WaitUntil(driver, Control("SelectMSourceDropdown", "Generic"), 30);
                MoveToElement(driver, Control("SelectMSourceDropdown", "Generic"));
                Element(driver, Control("SelectMSourceDropdown", "Generic")).Click();

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Major Source Field updated Successfully", "Major Source Field Verification");

            }

            else
            {
                ThinkTime(2);
                WaitUntil(driver, Control("MajorSourceInputField", "Generic"), 360);
                MoveToElement(driver, Control("MajorSourceInputField", "Generic"));
                Element(driver, Control("MajorSourceInputField", "Generic")).Click();
                ThinkTime(2);
                Element(driver, Control("MajorSourceInputField", "Generic")).SendKeys(MajorSource);
                ThinkTime(3);
                WaitUntil(driver, Control("SelectMSourceDropdown", "Generic"), 360);
                MoveToElement(driver, Control("SelectMSourceDropdown", "Generic"));
                Element(driver, Control("SelectMSourceDropdown", "Generic")).Click();

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Major Source Field updated Successfully", "Major Source Field Verification");

            }


            //Select Minor Source verification

            if (Elements(driver, Control("MinorSourceVerification", "Generic")) > 0)
            {
                ThinkTime(2);
                WaitUntil(driver, Control("MinorSourceVerification", "Generic"), 30);
                MoveToElement(driver, Control("MinorSourceVerification", "Generic"));
                Element(driver, Control("MinorSourceDeleteButton", "Generic")).Click();

                ThinkTime(2);
                WaitUntil(driver, Control("MinorSourceInputButton", "Generic"), 30);
                MoveToElement(driver, Control("MinorSourceInputButton", "Generic"));
                Element(driver, Control("MinorSourceInputButton", "Generic")).Click();
                Element(driver, Control("MinorSourceInputButton", "Generic")).SendKeys(MinorSource);
                ThinkTime(3);
                WaitUntil(driver, Control("SelectMinorSourceDropdown", "Generic"), 30);
                MoveToElement(driver, Control("SelectMinorSourceDropdown", "Generic"));
                Element(driver, Control("SelectMinorSourceDropdown", "Generic")).Click();

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Minor Source Field updated Successfully", "Minor Source Field Verification");

            }

            else
            {
                scrollDownOpportunityEnterpriseCust(driver, testInReport, testName, testDataIteration, "100");
                ThinkTime(2);
                WaitUntil(driver, Control("MinorSourceInputButton", "Generic"), 30);
                MoveToElement(driver, Control("MinorSourceInputButton", "Generic"));
                Element(driver, Control("MinorSourceInputButton", "Generic")).Click();
                Element(driver, Control("MinorSourceInputButton", "Generic")).SendKeys(MinorSource);
                ThinkTime(3);
                WaitUntil(driver, Control("SelectMinorSourceDropdown", "Generic"), 30);
                MoveToElement(driver, Control("SelectMinorSourceDropdown", "Generic"));
                Element(driver, Control("SelectMinorSourceDropdown", "Generic")).Click();

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Minor Source Field updated Successfully", "Minor Source Field Verification");

            }
            ThinkTime(2);
            WaitUntil(driver, Control("SourceDetails", "Generic"), 360);
            Element(driver, Control("SourceDetails", "Generic")).Click();
            Element(driver, Control("SourceDetails", "Generic")).SendKeys("Testing");


            ThinkTime(10);
            scrollDownOpportunityPage(driver, testInReport, testName, testDataIteration);

            ThinkTime(2);
            WaitUntil(driver, Control("CountryInput", "Accounts"), 30);
            MoveToElement(driver, Control("CountryInput", "Accounts"));
            Element(driver, Control("CountryInput", "Accounts")).SendKeys(Keys.Control + "a");
            Element(driver, Control("CountryInput", "Accounts")).SendKeys(Keys.Delete);
            Element(driver, Control("CountryInput", "Accounts")).SendKeys("united kingdom");
            ThinkTime(2);
            WaitUntil(driver, Control("CountrySelect", "Accounts"), 30);
            MoveToElement(driver, Control("CountrySelect", "Accounts"));
            Element(driver, Control("CountrySelect", "Accounts")).Click();

            saveFooter(driver, testInReport, testName, testDataIteration);
            ThinkTime(8);
            return LName;
        }

        public void CreateNewOpportunityITSaleswithprevcontact(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string contactname, string Oppsubtype, string saletype, string custtype, string SendEmail)
        {
            ThinkTime(7);
            DateTime now = DateTime.Now;
            DateTime tomorow = now.AddDays(2);

            string Y1 = tomorow.ToString("MMMM d");
            string Y2 = tomorow.ToString("yyyy");
            string Y3 = Y1 + ", " + Y2;

            // Click New button
            WaitUntil(driver, Control("NewButtonOpportunity", "Opportunity"), 30);
            MoveToElement(driver, Control("NewButtonOpportunity", "Opportunity"));
            Element(driver, Control("NewButtonOpportunity", "Opportunity")).Click();

            ThinkTime(7);

            // Enter Opportunity Sub Type
            WaitUntil(driver, Control("Oppsubtype", "36.1_Dashboard"), 30);
            MoveToElement(driver, Control("Oppsubtype", "36.1_Dashboard"));
            Element(driver, Control("Oppsubtype", "36.1_Dashboard")).Click();
            Element(driver, Control("Oppsubtype", "36.1_Dashboard")).SendKeys(Oppsubtype);
            Element(driver, Control("Oppsubtype", "36.1_Dashboard")).SendKeys(Keys.Enter);

            // Number of people
            WaitUntil(driver, Control("Numberofusers", "36.1_Dashboard"), 30);
            MoveToElement(driver, Control("Numberofusers", "36.1_Dashboard"));
            ActionsClick(driver, Control("Numberofusers", "36.1_Dashboard"));
            Element(driver, Control("Numberofusers", "36.1_Dashboard")).SendKeys("8");

            //create new contact
            WaitUntil(driver, Control("Contactlookup", "Opportunity"), 30);
            MoveToElement(driver, Control("Contactlookup", "Opportunity"));
            Element(driver, Control("Contactlookup", "Opportunity")).Click();
            Element(driver, Control("Contactlookup", "Opportunity")).SendKeys(contactname);
            ThinkTime(6);
            WaitUntil(driver, Control("ITSalesCustomer", "Opportunity"), 360);
            MoveToElement(driver, Control("ITSalesCustomer", "Opportunity"));
            Element(driver, Control("ITSalesCustomer", "Opportunity")).Click();
            ThinkTime(2);

            // Enter Start date
            SelectOpportunityTab(driver, testInReport, testName, testDataIteration, "Summary");
            ThinkTime(1);

            MoveToElement(driver, Control("DatePickerViewButton", "Opportunity"));
            Element(driver, Control("DatePickerViewButton", "Opportunity")).Click();

            ThinkTime(7);

            MoveToElement(driver, Control("NewStartDate", Y3, "Opportunity"));
            Element(driver, Control("NewStartDate", Y3, "Opportunity")).Click();

            scrollDownOpportunityEnterprise(driver, testInReport, testName, testDataIteration);

            // Enter Sale type 
            WaitUntil(driver, Control("Saletype", "36.1_Dashboard"), 30);
            MoveToElement(driver, Control("Saletype", "36.1_Dashboard"));
            Element(driver, Control("Saletype", "36.1_Dashboard")).Click();
            Element(driver, Control("Saletype", "36.1_Dashboard")).SendKeys(saletype);
            Element(driver, Control("Saletype", "36.1_Dashboard")).SendKeys(Keys.Enter);

            // Enter Customer type 
            WaitUntil(driver, Control("Customertypefield", "36.1_Dashboard"), 30);
            MoveToElement(driver, Control("Customertypefield", "36.1_Dashboard"));
            Element(driver, Control("Customertypefield", "36.1_Dashboard")).Click();
            Element(driver, Control("Customertypefield", "36.1_Dashboard")).SendKeys(custtype);
            WaitUntil(driver, Control("CustomerTypeLookup", "Opportunity"), 360);
            Element(driver, Control("CustomerTypeLookup", "Opportunity")).Click();

            scrollDownOpportunityEnterprise(driver, testInReport, testName, testDataIteration);

            // Enter Alternative email
            ThinkTime(2);
            MoveToElement(driver, Control("Alternativeemail", "36.1_Dashboard"));
            ThinkTime(3);
            Element(driver, Control("Alternativeemail", "36.1_Dashboard")).SendKeys(SendEmail);
            ThinkTime(3);
            saveFooter(driver, testInReport, testName, testDataIteration);

        }

        public void verifyemailintimeline(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            if (Elements(driver, Control("Clicknewposttimeline", "36.1_Dashboard")) > 0)
            {
                Element(driver, Control("Clicknewposttimeline", "36.1_Dashboard")).Click();
                ThinkTime(2);
                Assert.Fail("No email in the timeline");
            }
        }


        public void CreateNewOpportunityITSales(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {

            string Y1 = DateTime.Now.ToString("MMMM dd");
            string Y2 = DateTime.Now.ToString("yyyy");
            string Y3 = Y1 + ", " + Y2;

            string Date = DateTime.Today.ToString("dd-MM-yyyy");
            DateTime Now = DateTime.Now;
            string Time = Date + Convert.ToString(Now.Hour) + Convert.ToString(Now.Millisecond);

            string Contact = "AutomatContact" + Time;
            string Company = "AutomatCompany" + Time;

            ThinkTime(7);
            WaitUntil(driver, Control("NewButtonOpportunity", "Opportunity"), 30);
            MoveToElement(driver, Control("NewButtonOpportunity", "Opportunity"));
            Element(driver, Control("NewButtonOpportunity", "Opportunity")).Click();

            ThinkTime(7);

            //create new contact.

            // scrollDownOpportunityEnterprise(driver, testInReport, testName, testDataIteration);
            string topic1 = "Topic" + Time + Now;

            WaitUntil(driver, Control("QuickCreateTopicInput", "ITSales"), 120);
            MoveToElement(driver, Control("QuickCreateTopicInput", "ITSales"));
            Element(driver, Control("QuickCreateTopicInput", "ITSales")).Click();
            ThinkTime(2);
            Element(driver, Control("QuickCreateTopicInput", "ITSales")).SendKeys(topic1);
            ThinkTime(2);

            WaitUntil(driver, Control("Customerlookup", "Opportunity"), 120);
            MoveToElement(driver, Control("Customerlookup", "Opportunity"));
            Element(driver, Control("Customerlookup", "Opportunity")).Click();
            Element(driver, Control("Customerlookup", "Opportunity")).SendKeys("Test company");
            ThinkTime(6);
            MoveToElement(driver, Control("CustomerSearch", "Opportunity"));
            Element(driver, Control("CustomerSearch", "Opportunity")).Click();
            ThinkTime(10);
            MoveToElement(driver, Control("OpportunityCustomerdropdown", "Opportunity"));
            Element(driver, Control("OpportunityCustomerdropdown", "Opportunity")).Click();
            ThinkTime(5);

            //SelectOpportunityTab(driver, testInReport, testName, testDataIteration, "Summary");

            //WaitUntil(driver, Control("Contactlookup", "Opportunity"), 30);
            //MoveToElement(driver, Control("Contactlookup", "Opportunity"));
            //Element(driver, Control("Contactlookup", "Opportunity")).Click();
            //Element(driver, Control("Contactlookup", "Opportunity")).SendKeys("yuuya mouri");
            //ThinkTime(6);
            //MoveToElement(driver, Control("Contactsearch", "Opportunity"));
            //Element(driver, Control("Contactsearch", "Opportunity")).Click();
            //ThinkTime(4);
            //MoveToElement(driver, Control("ITSalesCustomer", "Opportunity"));
            //Element(driver, Control("ITSalesCustomer", "Opportunity")).Click();
            //ThinkTime(5);
            saveFooter(driver, testInReport, testName, testDataIteration);
            ThinkTime(4);

        }


        public void Bookinfreeslot(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)

        {



            Actions action;

            IWebElement ele;

            //string parentWindowHandle = driver.CurrentWindowHandle;

            //WindowHandling(driver);

            //ThinkTime(3);



            // Check for Free slot to Book Tour

            for (int i = 7; i <= 28;)

            {

                ele = driver.FindElement(By.XPath("//td[@id='ASPxSchedulerAgentView_containerBlock_DXCntv0_" + i + "']"));

                action = new Actions(driver);

                action.ContextClick(ele).Build().Perform();


                if (Element(driver, Control("Opentour", "Opportunity")).Displayed)

                {

                    ThinkTime(3);

                    i += 2;

                }





                // Book a Tour in free slot

                else if (Element(driver, Control("Newtourappointment", "Opportunity")).Displayed)

                {



                    Element(driver, Control("Newtourappointment", "Opportunity")).Click();

                    ThinkTime(5);

                    Element(driver, Control("BookTouravailablebutton", "Opportunity")).Click();

                    ThinkTime(7);

                    Element(driver, Control("Tourbookclose", "Opportunity")).Click();

                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Free slot verified successfully", "Free slot verification");

                    ThinkTime(1);



                    //  action.ClickAndHold(ele).Build().Perform();

                    // IJavaScriptExecutor js = (IJavaScriptExecutor)driver;

                    //js.ExecuteScript("arguments[0].click", ele);





                    // mouse hover/click full details verification



                    // scrollDownOpportunityEnterprise(driver, testInReport, testName, testDataIteration);



                    // Verify the pop up details for the vertical slot

                    ThinkTime(2);

                    Element(driver, Control("SaveTour", "Opportunity")).Click();


                }
            }
        }


        public void Verifyschedulingdaydetails(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {

            String date = Element(driver, Control("SlotDay", "BookATour")).GetAttribute("title").ToString();




        }

        public void Slot2verification(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string Contact, string centre, string ASM)
        {

            string parentWindowHandle = driver.CurrentWindowHandle;
            WindowHandling(driver);
            ThinkTime(3);

            string parentWindowHandle1 = driver.CurrentWindowHandle;
            WindowHandling(driver);
            ThinkTime(3);
            ElementHighlight(driver, Control("Slotclick", "Opportunity"));

            ActionsClick(driver, Control("Slotclick", "Opportunity"));
            ThinkTime(2);
            string value = Element(driver, Control("Slotpopupcontentbody", "Opportunity")).GetAttribute("innerText");
            // string value = Element(driver, Control("Slotclick", "Opportunity")).GetAttribute("innerText");

            // WindowHandling(driver);
            if (value.Contains(centre) && value.Contains(Contact) && value.Contains("CRM Test4"))
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Free slot verified successfully", "Free slot verification");
            }
            else
            {
                Assert.Fail("Centre, Contact and ASM for tour details not displayed on mouse hover for Slot1");
            }

            // SLOT 2 Verification
            ElementHighlight(driver, Control("Slotclick", "Opportunity"));
            ThinkTime(2);
            string value1 = Element(driver, Control("Slot2popup", "Opportunity")).GetAttribute("innerText");

            // WindowHandling(driver);
            if (value1.Contains(centre) && value1.Contains(Contact) && value1.Contains(ASM))
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Free slot verified successfully", "Free slot verification");
            }
            else
            {
                Assert.Fail("Centre, Contact and ASM for tour details not displayed on mouse hover for Slot2");
            }

        }




        public void datetime(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)

        {

            //logic
            var date = DateTime.Today; //Set start date
            var countryCode = CountryCode.US; //Set country

            do
            {
                date = date.AddDays(1);
            } while (DateSystem.IsPublicHoliday(date, countryCode) || date.IsWeekend(countryCode));

            Console.WriteLine(date);
            ThinkTime(5);
        }


        public void Slotheaderverification(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {

            string parentWindowHandle = driver.CurrentWindowHandle;
            WindowHandling(driver);
            ThinkTime(3);

            //logic
            var date = DateTime.Today; //Set start date
            var countryCode = CountryCode.ES; //Set country

            do
            {
                date = date.AddDays(1);
            } while (DateSystem.IsPublicHoliday(date, countryCode) || date.IsWeekend(countryCode));

            Console.WriteLine(date);


            string nextday = date.ToString("dddd, MMMM dd");
            ThinkTime(5);


            ElementHighlight(driver, Control("Calenderdefautverification", "Opportunity"));




            string value = Element(driver, Control("Calenderdefautverification", "Opportunity")).GetAttribute("innerText");

            if (value.Contains(nextday))
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", " slot header verified successfully", "header of slot verification");
            }
            else
            {
                Assert.Fail("Calender not defaulted to day for Slots");
            }
            driver.SwitchTo().Window(parentWindowHandle);
            driver.SwitchTo().DefaultContent();
            //driver.Close();

        }
        public void SlotheaderverificationUP(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, DateTime now)
        {

            string parentWindowHandle = driver.CurrentWindowHandle;
            WindowHandling(driver);
            ThinkTime(3);
            string datetimeNow = now.ToString("dddddddddddd, MMMMMMMM d");
            String datetimeStr = datetimeNow.Substring(0, 3);
            // DateTime AddMin = now.AddMinutes(-270);
            if (datetimeStr == "Sun" || datetimeStr == "Mon" || datetimeStr == "Tue" || datetimeStr == "Wed" || datetimeStr == "Thu")
            {

                DateTime tomorow = now.AddDays(1);
                string datetime = tomorow.ToString("dddddddddddd, MMMMMMMM d");
                ElementHighlight(driver, Control("NextWorkDay", "Opportunity"));

                string value = Element(driver, Control("NextWorkDay", "Opportunity")).GetAttribute("innerText");

                if (value.Contains(datetime))
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", " slot header verified successfully", "header of slot verification");
                }
                else
                {
                    Assert.Fail("Calender not defaulted to day for Slots");
                }
                driver.SwitchTo().Window(parentWindowHandle);
                driver.SwitchTo().DefaultContent();
            }
            else if (datetimeStr == "Fri")
            {

                DateTime tomorow = now.AddDays(3);

                string datetime = tomorow.ToString("dddddddddddd, MMMMMMMM d");
                ElementHighlight(driver, Control("NextWorkDay", "Opportunity"));

                string value = Element(driver, Control("NextWorkDay", "Opportunity")).GetAttribute("innerText");

                if (value.Contains(datetime))
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", " slot header verified successfully", "header of slot verification");
                }
                else
                {
                    Assert.Fail("Calender not defaulted to day for Slots");
                }
                driver.SwitchTo().Window(parentWindowHandle);
                driver.SwitchTo().DefaultContent();
            }
            else if (datetimeStr == "Sat")
            {

                DateTime tomorow = now.AddDays(2);
                string datetime = tomorow.ToString("dddddddddddd, MMMMMMMM d");
                ElementHighlight(driver, Control("NextWorkDay", "Opportunity"));

                string value = Element(driver, Control("NextWorkDay", "Opportunity")).GetAttribute("innerText");

                if (value.Contains(datetime))
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", " slot header verified successfully", "header of slot verification");
                }
                else
                {
                    Assert.Fail("Calender not defaulted to day for Slots");
                }
                driver.SwitchTo().Window(parentWindowHandle);
                driver.SwitchTo().DefaultContent();
            }




            //driver.Close();

        }
        public void SlotheaderverificationNew(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string datetime)
        {

            string parentWindowHandle = driver.CurrentWindowHandle;
            WindowHandling(driver);
            ThinkTime(3);
            //WaitUntil(driver, Control("TodayButton", "Accounts"), 30);
            //MoveToElement(driver, Control("TodayButton", "Accounts"));
            //Element(driver, Control("TodayButton", "Accounts")).Click();
            ElementHighlight(driver, Control("DateValue", "Accounts"));
            ThinkTime(5);
            string value = Element(driver, Control("DateValue", "Accounts")).GetAttribute("innerText");

            if (value.Equals(datetime))
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", " slot header verified successfully", "header of slot verification");
            }

            driver.SwitchTo().Window(parentWindowHandle);
            driver.SwitchTo().DefaultContent();
            //driver.Close();

        }


        public void VerifyCentreinBookedTour(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string centre)
        {

            Actions action;
            IWebElement ele;
            string parentWindowHandle = driver.CurrentWindowHandle;
            WindowHandling(driver);
            ThinkTime(3);

            // Check for Free slot to Book Tour
            for (int i = 3; i <= 28;)
            {
                ele = driver.FindElement(By.XPath("//td[@id='ASPxSchedulerAgentView_containerBlock_DXCntv0_" + i + "']"));
                action = new Actions(driver);
                action.ContextClick(ele).Build().Perform();
                if (Element(driver, Control("Opentour", "Opportunity")).Displayed)
                {
                    ThinkTime(3);
                    i += 2;
                }


                // Book a Tour in free slot
                else if (Element(driver, Control("Newtourappointment", "Opportunity")).Displayed)
                {

                    Element(driver, Control("Newtourappointment", "Opportunity")).Click();
                    ThinkTime(5);
                    //WaitUntil(driver, Control("BookTouravailablebutton", "Opportunity"), 360);
                    Element(driver, Control("BookTouravailablebutton", "Opportunity")).Click();
                    ThinkTime(2);
                    //WaitUntil(driver, Control("Tourbookclose", "Opportunity"), 360);
                    Element(driver, Control("Tourbookclose", "Opportunity")).Click();
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Free slot verified successfully", "Free slot verification");
                    ThinkTime(1);

                    //  action.ClickAndHold(ele).Build().Perform();
                    // IJavaScriptExecutor js = (IJavaScriptExecutor)driver;
                    //js.ExecuteScript("arguments[0].click", ele);


                    // mouse hover/click full details verification

                    // scrollDownOpportunityEnterprise(driver, testInReport, testName, testDataIteration);

                    // Verify the pop up details for the vertical slot
                    ThinkTime(2);
                    WaitUntil(driver, Control("SaveTour", "Opportunity"), 360);
                    Element(driver, Control("SaveTour", "Opportunity")).Click();
                    ThinkTime(3);


                    WaitUntil(driver, Control("Slotclick", "Opportunity"), 360);
                    ActionsClick(driver, Control("Slotclick", "Opportunity"));
                    ThinkTime(2);
                    string value = Element(driver, Control("Slotpopupcontentbody", "Opportunity")).GetAttribute("innerText");
                    // WindowHandling(driver);
                    if (value.Contains(centre))
                    {
                        AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Free slot verified successfully", "Free slot verification");
                    }
                    else
                    {
                        Assert.Fail("Centre for tour details not displayed on mouse hover");
                    }
                }
                ThinkTime(6);
                driver.SwitchTo().Window(parentWindowHandle);
                driver.SwitchTo().DefaultContent();

            }



        }

        public void VerifyCentreinBookedTour1(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string centre)
        {

            Actions action;
            IWebElement ele;
            string parentWindowHandle = driver.CurrentWindowHandle;
            //WindowHandling(driver);
            ThinkTime(15);

            // Check for Free slot to Book Tour
            for (int i = 3; i <= 28;)
            {
                ele = driver.FindElement(By.XPath("//td[@id='ASPxSchedulerAgentView_containerBlock_DXCntv0_" + i + "']"));
                action = new Actions(driver);
                action.ContextClick(ele).Build().Perform();
                if (Element(driver, Control("Opentour", "Opportunity")).Displayed)
                {
                    ThinkTime(3);
                    i += 2;
                }


                // Book a Tour in free slot
                else if (Element(driver, Control("Newtourappointment", "Opportunity")).Displayed)
                {

                    Element(driver, Control("Newtourappointment", "Opportunity")).Click();
                    ThinkTime(10);
                    if (Elements(driver, Control("BookTouravailablebutton", "Opportunity")) > 0)
                    {
                        WaitUntil(driver, Control("BookTouravailablebutton", "Opportunity"), 360);
                        Element(driver, Control("BookTouravailablebutton", "Opportunity")).Click();
                        ThinkTime(2);
                    }
                    ThinkTime(2);
                    WaitUntil(driver, Control("Tourbookclose", "Opportunity"), 360);
                    Element(driver, Control("Tourbookclose", "Opportunity")).Click();
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Free slot verified successfully", "Free slot verification");
                    ThinkTime(1);

                    //  action.ClickAndHold(ele).Build().Perform();
                    // IJavaScriptExecutor js = (IJavaScriptExecutor)driver;
                    //js.ExecuteScript("arguments[0].click", ele);


                    // mouse hover/click full details verification

                    scrollDownOpportunityEnterprise(driver, testInReport, testName, testDataIteration);

                    // Verify the pop up details for the vertical slot
                    ThinkTime(2);
                    WaitUntil(driver, Control("SaveTour", "Opportunity"), 360);
                    Element(driver, Control("SaveTour", "Opportunity")).Click();
                    ThinkTime(3);


                    driver.SwitchTo().Window(parentWindowHandle);
                    driver.SwitchTo().DefaultContent();
                    SelectanyOpportunitybutton(driver, testInReport, testName, testDataIteration, "Book Tour");
                    ThinkTime(5);
                    VerifyCityDiaryandCentre1(driver, testInReport, testName, testDataIteration, "AB, Calgary-CBD", "Calgary Sun Life");
                    WaitUntil(driver, Control("Slotclick", "Opportunity"), 360);
                    ActionsClick(driver, Control("Slotclick", "Opportunity"));
                    ThinkTime(10);
                    WaitUntil(driver, Control("Slotpopupcontentbody", "Opportunity"), 360);
                    string value = Element(driver, Control("Slotpopupcontentbody", "Opportunity")).GetAttribute("innerText");
                    // WindowHandling(driver);
                    if (value.Contains(centre))
                    {
                        AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Free slot verified successfully", "Free slot verification");
                    }
                    else
                    {
                        Assert.Fail("Centre for tour details not displayed on mouse hover");
                    }
                }
                ThinkTime(6);
                driver.SwitchTo().Window(parentWindowHandle);
                driver.SwitchTo().DefaultContent();

            }



        }


        public void CreateATourAtTwoThirty(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {

            Actions action;
            IWebElement ele;
            string parentWindowHandle = driver.CurrentWindowHandle;
            WindowHandling(driver);
            ThinkTime(10);

            // Check for Free slot to Book Tour
            for (int i = 16; i <= 28;)
            {
                ele = driver.FindElement(By.XPath("//td[@id='ASPxSchedulerAgentView_containerBlock_DXCntv0_" + i + "']"));
                action = new Actions(driver);
                action.ContextClick(ele).Build().Perform();
                if (Element(driver, Control("Opentour", "Opportunity")).Displayed)
                {
                    ThinkTime(3);
                    i += 16;
                }


                // Book a Tour in free slot
                else if (Element(driver, Control("Newtourappointment", "Opportunity")).Displayed)
                {

                    Element(driver, Control("Newtourappointment", "Opportunity")).Click();
                    ThinkTime(5);
                    //WaitUntil(driver, Control("BookTouravailablebutton", "Opportunity"), 360);
                    //Element(driver, Control("BookTouravailablebutton", "Opportunity")).Click();
                    ThinkTime(2);
                    //WaitUntil(driver, Control("Tourbookclose", "Opportunity"), 360);
                    //Element(driver, Control("Tourbookclose", "Opportunity")).Click();
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Free slot verified successfully", "Free slot verification");
                    ThinkTime(1);

                    //  action.ClickAndHold(ele).Build().Perform();
                    // IJavaScriptExecutor js = (IJavaScriptExecutor)driver;
                    //js.ExecuteScript("arguments[0].click", ele);


                    // mouse hover/click full details verification

                    // scrollDownOpportunityEnterprise(driver, testInReport, testName, testDataIteration);

                    // Verify the pop up details for the vertical slot
                    ThinkTime(2);
                    WaitUntil(driver, Control("SaveTour", "Opportunity"), 360);
                    Element(driver, Control("SaveTour", "Opportunity")).Click();
                    ThinkTime(3);


                }


            }

            ThinkTime(6);
            driver.SwitchTo().Window(parentWindowHandle);
            driver.SwitchTo().DefaultContent();

        }

        public void CreateATourAtTwoThirty1(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {

            Actions action;
            IWebElement ele;
            string parentWindowHandle = driver.CurrentWindowHandle;
            WindowHandling(driver);
            ThinkTime(15);

            // Check for Free slot to Book Tour
            for (int i = 16; i <= 28;)
            {
                ele = driver.FindElement(By.XPath("//td[@id='ASPxSchedulerAgentView_containerBlock_DXCntv0_" + i + "']"));
                action = new Actions(driver);
                action.ContextClick(ele).Build().Perform();
                if (Element(driver, Control("Opentour", "Opportunity")).Displayed)
                {
                    ThinkTime(3);
                    i += 16;
                }


                // Book a Tour in free slot
                else if (Element(driver, Control("Newtourappointment", "Opportunity")).Displayed)
                {

                    Element(driver, Control("Newtourappointment", "Opportunity")).Click();
                    ThinkTime(5);
                    WaitUntil(driver, Control("BookTouravailablebutton", "Opportunity"), 360);
                    Element(driver, Control("BookTouravailablebutton", "Opportunity")).Click();
                    ThinkTime(2);
                    //WaitUntil(driver, Control("Tourbookclose", "Opportunity"), 360);
                    //Element(driver, Control("Tourbookclose", "Opportunity")).Click();
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Free slot verified successfully", "Free slot verification");
                    ThinkTime(1);

                    //  action.ClickAndHold(ele).Build().Perform();
                    // IJavaScriptExecutor js = (IJavaScriptExecutor)driver;
                    //js.ExecuteScript("arguments[0].click", ele);


                    // mouse hover/click full details verification

                    // scrollDownOpportunityEnterprise(driver, testInReport, testName, testDataIteration);

                    // Verify the pop up details for the vertical slot
                    ThinkTime(2);
                    WaitUntil(driver, Control("SaveTour", "Opportunity"), 360);
                    Element(driver, Control("SaveTour", "Opportunity")).Click();
                    ThinkTime(3);


                }


            }

            ThinkTime(6);
            driver.Close();
            driver.SwitchTo().Window(parentWindowHandle);
            driver.SwitchTo().DefaultContent();

        }


        public void CreateATourAtTwoThirty2(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {

            Actions action;
            IWebElement ele;
            string parentWindowHandle = driver.CurrentWindowHandle;
            WindowHandling(driver);
            ThinkTime(15);

            // Check for Free slot to Book Tour
            for (int i = 16; i <= 28;)
            {
                ele = driver.FindElement(By.XPath("//td[@id='ASPxSchedulerAgentView_containerBlock_DXCntv0_" + i + "']"));
                action = new Actions(driver);
                action.ContextClick(ele).Build().Perform();
                if (Element(driver, Control("Opentour", "Opportunity")).Displayed)
                {
                    ThinkTime(3);
                    i += 16;
                }


                // Book a Tour in free slot
                else if (Element(driver, Control("Newtourappointment", "Opportunity")).Displayed)
                {

                    Element(driver, Control("Newtourappointment", "Opportunity")).Click();
                    ThinkTime(5);
                    WaitUntil(driver, Control("BookTouravailablebutton", "Opportunity"), 360);
                    Element(driver, Control("BookTouravailablebutton", "Opportunity")).Click();
                    ThinkTime(2);
                    //WaitUntil(driver, Control("Tourbookclose", "Opportunity"), 360);
                    //Element(driver, Control("Tourbookclose", "Opportunity")).Click();
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Free slot verified successfully", "Free slot verification");
                    ThinkTime(1);

                    //  action.ClickAndHold(ele).Build().Perform();
                    // IJavaScriptExecutor js = (IJavaScriptExecutor)driver;
                    //js.ExecuteScript("arguments[0].click", ele);


                    // mouse hover/click full details verification

                    // scrollDownOpportunityEnterprise(driver, testInReport, testName, testDataIteration);

                    // Verify the pop up details for the vertical slot
                    ThinkTime(10);
                    WaitUntil(driver, Control("SaveTour", "Opportunity"), 360);
                    Element(driver, Control("SaveTour", "Opportunity")).Click();
                    ThinkTime(3);

                    ThinkTime(3);
                    driver.Close();

                    WindowHandling(driver, parentWindowHandle);
                    break;


                }


            }

            ////ThinkTime(6);
            //driver.Close();
            //driver.SwitchTo().Window(parentWindowHandle);
            //driver.SwitchTo().DefaultContent();

        }

        public void CreateATourAtTwoThirty3(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {

            Actions action;
            IWebElement ele;
            string parentWindowHandle = driver.CurrentWindowHandle;
            WindowHandling(driver);
            ThinkTime(15);



            ThinkTime(2);
            if (Elements(driver, Control("TourExist", "Opportunity")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Tour already created", "Existing tour verification");

                ThinkTime(3);
                driver.Close();

                WindowHandling(driver, parentWindowHandle);

            }
            else
            {
                // Check for Free slot to Book Tour
                for (int i = 16; i <= 28;)
                {
                    ele = driver.FindElement(By.XPath("//td[@id='ASPxSchedulerAgentView_containerBlock_DXCntv0_" + i + "']"));
                    action = new Actions(driver);
                    action.ContextClick(ele).Build().Perform();
                    if (Element(driver, Control("Opentour", "Opportunity")).Displayed)
                    {
                        ThinkTime(3);
                        i += 16;
                    }


                    // Book a Tour in free slot
                    else if (Element(driver, Control("Newtourappointment", "Opportunity")).Displayed)
                    {

                        Element(driver, Control("Newtourappointment", "Opportunity")).Click();
                        ThinkTime(5);
                        WaitUntil(driver, Control("BookTouravailablebutton", "Opportunity"), 360);
                        Element(driver, Control("BookTouravailablebutton", "Opportunity")).Click();
                        ThinkTime(2);
                        //WaitUntil(driver, Control("Tourbookclose", "Opportunity"), 360);
                        //Element(driver, Control("Tourbookclose", "Opportunity")).Click();
                        AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Free slot verified successfully", "Free slot verification");
                        ThinkTime(1);

                        //  action.ClickAndHold(ele).Build().Perform();
                        // IJavaScriptExecutor js = (IJavaScriptExecutor)driver;
                        //js.ExecuteScript("arguments[0].click", ele);


                        // mouse hover/click full details verification

                        // scrollDownOpportunityEnterprise(driver, testInReport, testName, testDataIteration);

                        // Verify the pop up details for the vertical slot
                        ThinkTime(10);
                        WaitUntil(driver, Control("SaveTour", "Opportunity"), 360);
                        Element(driver, Control("SaveTour", "Opportunity")).Click();
                        ThinkTime(3);

                        ThinkTime(3);
                        driver.Close();

                        WindowHandling(driver, parentWindowHandle);
                        break;


                    }


                }
            }



            ////ThinkTime(6);
            //driver.Close();
            //driver.SwitchTo().Window(parentWindowHandle);
            //driver.SwitchTo().DefaultContent();

        }

        public void CreateATourAtTwoThirty4(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {

            Actions action;
            IWebElement ele;
            string parentWindowHandle = driver.CurrentWindowHandle;
            WindowHandling(driver);
            ThinkTime(15);



            ThinkTime(2);
            if (Elements(driver, Control("TourExist", "Opportunity")) > 0)
            {
                ThinkTime(3);
                driver.Close();

                WindowHandling(driver, parentWindowHandle);

            }
            else
            {
                // Check for Free slot to Book Tour
                for (int i = 16; i <= 28;)
                {
                    ele = driver.FindElement(By.XPath("//td[@id='ASPxSchedulerAgentView_containerBlock_DXCntv1_" + i + "']"));
                    action = new Actions(driver);
                    action.ContextClick(ele).Build().Perform();
                    if (Element(driver, Control("Opentour", "Opportunity")).Displayed)
                    {
                        ThinkTime(3);
                        i += 16;
                    }


                    // Book a Tour in free slot
                    else if (Element(driver, Control("Newtourappointment", "Opportunity")).Displayed)
                    {

                        Element(driver, Control("Newtourappointment", "Opportunity")).Click();
                        ThinkTime(5);
                        WaitUntil(driver, Control("BookTouravailablebutton", "Opportunity"), 360);
                        Element(driver, Control("BookTouravailablebutton", "Opportunity")).Click();
                        ThinkTime(2);
                        //WaitUntil(driver, Control("Tourbookclose", "Opportunity"), 360);
                        //Element(driver, Control("Tourbookclose", "Opportunity")).Click();
                        AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Free slot verified successfully", "Free slot verification");
                        ThinkTime(1);

                        //  action.ClickAndHold(ele).Build().Perform();
                        // IJavaScriptExecutor js = (IJavaScriptExecutor)driver;
                        //js.ExecuteScript("arguments[0].click", ele);


                        // mouse hover/click full details verification

                        // scrollDownOpportunityEnterprise(driver, testInReport, testName, testDataIteration);

                        // Verify the pop up details for the vertical slot
                        ThinkTime(10);
                        WaitUntil(driver, Control("SaveTour", "Opportunity"), 360);
                        Element(driver, Control("SaveTour", "Opportunity")).Click();
                        ThinkTime(3);

                        ThinkTime(3);
                        driver.Close();

                        WindowHandling(driver, parentWindowHandle);
                        break;


                    }


                }
            }



            ////ThinkTime(6);
            //driver.Close();
            //driver.SwitchTo().Window(parentWindowHandle);
            //driver.SwitchTo().DefaultContent();

        }

        public void VerifyAnotherCityCentreSelection1(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string Centre, string centrename)
        {
            ThinkTime(10);
            driver.SwitchTo().DefaultContent();
            string parentWindowHandle = driver.CurrentWindowHandle;
            WindowHandling(driver);
            string parentWindowHandle1 = driver.CurrentWindowHandle;
            WindowHandling(driver);



            ThinkTime(5);
            driver.Manage().Window.Maximize();
            ThinkTime(10);
            MoveToElement(driver, Control("CentreField", "BookATour"));
            Element(driver, Control("CentreField", "BookATour")).Click();
            Element(driver, Control("CentreField", "BookATour")).SendKeys(Centre);
            ThinkTime(6);
            if (Element(driver, Control("CentreField", "BookATour")).GetAttribute("value").Contains(centrename))
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Centre name is same default value", "Business Centre");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Failed", "New Centre added ", "Business Centre");
                Assert.Fail(" User able to enter centre of another city");
            }


            ThinkTime(3);
            // driver.Close();
            //driver.SwitchTo().Window(parentWindowHandle);
            //parentWindowHandle = driver.CurrentWindowHandle;
            //WindowHandling(driver);

            //driver.Navigate().Refresh();
        }
        public void VerifyURL(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string ExpectedURL)

        {
            Actions action;
            IWebElement ele;
            string parentWindowHandle = driver.CurrentWindowHandle;
            WindowHandling(driver);
            ThinkTime(8);

            // get currentpage url
            string ActualURL = driver.Url;
            if (ActualURL == ExpectedURL)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Regus URL Verification", "Regus URL verification");

            }
            else
            {
                Assert.Fail("Regus URL is incorrect");
            }
            driver.Close();

            WindowHandling(driver, parentWindowHandle);
        }

        public void Overlap(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string Contact, string centre, string Actiontour = "", string ASM = "")
        {

            IWebElement ele;
            string parentWindowHandle = driver.CurrentWindowHandle;
            WindowHandling(driver);
            ThinkTime(2);
            WaitUntil(driver, Control("Today", "Tour"), 360);
            ele = driver.FindElement(By.XPath("//td[@id='ASPxSchedulerAgentView_containerBlock_DXCntv0_1']"));
            if (ele.Displayed)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Slot available", "Slot available");
            }
            else
            {
                Assert.Fail("slot not available");
            }

            ThinkTime(3);
            driver.Close();

            WindowHandling(driver, parentWindowHandle);
        }
        public void SlotAvailibility(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string entity, string oppname)
        {
            string parent = driver.CurrentWindowHandle;
            ThinkTime(2);
            WindowHandling(driver);

            //ThinkTime(3);

            //WaitUntil(driver, Control("TodayButton", "Generic"), 180);
            //MoveToElement(driver, Control("TodayButton", "Generic"));
            //Element(driver, Control("TodayButton", "Generic")).Click();
            ThinkTime(5);
            if (Elements(driver, Control("GetSlotCount", "CommonObj")) > 0)
            {
                int TourCount = Elements(driver, Control("GetSlotCount", "CommonObj"));
                for (int i = 1; i < TourCount; i++)
                {
                    if (i != 1)
                    {
                        ThinkTime(2);
                        WindowHandling(driver);
                        ThinkTime(2);
                        //WaitUntil(driver, Control("TodayButton", "Generic"), 180);
                        //MoveToElement(driver, Control("TodayButton", "Generic"));
                        //Element(driver, Control("TodayButton", "Generic")).Click();
                        //ThinkTime(5);
                    }
                    ThinkTime(2);
                    string delTourDetail = Element(driver, Control("DelTour", "CommonObj")).Text;
                    string output1 = delTourDetail.Substring(delTourDetail.Length - 11);
                    string output2 = output1.Remove(output1.Length - 1);
                    ThinkTime(3);
                    driver.Close();

                    WindowHandling(driver, parent);
                    NavigateToEntity(driver, testInReport, testName, testDataIteration, entity);
                    SelectValuesFromDropDown(driver, testInReport, testName, testDataIteration, "Open Opportunities");
                    OpenRecordGlobalSearch(driver, testInReport, testName, testDataIteration, output2);


                    SelectOpportunityTab(driver, testInReport, testName, testDataIteration, "Activities");
                    ThinkTime(2);
                    scrollDownOpportunityEnterpriseCust(driver, testInReport, testName, testDataIteration, "700");
                    ThinkTime(2);
                    WaitUntil(driver, Control("SelActTour", "CommonObj"), 30);
                    Element(driver, Control("SelActTour", "CommonObj")).Click();
                    ThinkTime(2);
                    scrollDownOpportunityEnterpriseCust(driver, testInReport, testName, testDataIteration, "-700");
                    ThinkTime(2);
                    WaitUntil(driver, Control("ComplActBut", "CommonObj"), 30);
                    Element(driver, Control("ComplActBut", "CommonObj")).Click();
                    ThinkTime(2);
                    WaitUntil(driver, Control("DeleteBut", "CommonObj"), 30);
                    Element(driver, Control("DeleteBut", "CommonObj")).Click();
                    ThinkTime(2);
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Tour completed", "Tour Completed");
                    NavigateToEntity(driver, testInReport, testName, testDataIteration, entity);
                    SelectValuesFromDropDown(driver, testInReport, testName, testDataIteration, "Open Opportunities");
                    OpenRecordGlobalSearch(driver, testInReport, testName, testDataIteration, oppname);
                    SelectanyOpportunitybutton(driver, testInReport, testName, testDataIteration, "Book Tour");

                }

            }
            else
            {
                ThinkTime(3);
                driver.Close();
                WindowHandling(driver, parent);
            }
        }

        public void SlotAvailibilityUpdated(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string entity, string oppname)
        {

            string parent = driver.CurrentWindowHandle;
            ThinkTime(2);
            WindowHandling(driver);
            ThinkTime(5);
            if (Elements(driver, Control("GetSlotCount", "CommonObj")) > 0)
            {
                ThinkTime(5);
                IList<IWebElement> objTour = driver.FindElements(Control("GetSlotCount", "CommonObj"));
                int TourCount = Elements(driver, Control("GetSlotCount", "CommonObj"));




                for (int i = 0; i < TourCount; i++)
                {
                    try
                    {
                        if (i != 0)
                        {
                            ThinkTime(2);
                            WindowHandling(driver);
                        }
                        string delTourDetail = objTour[i].Text;
                        string output1 = delTourDetail.Substring(delTourDetail.Length - 11);
                        string output2 = output1.Remove(output1.Length - 1);

                        WindowHandling(driver);



                        NavigateToEntity(driver, testInReport, testName, testDataIteration, entity);
                        SelectValuesFromDropDown(driver, testInReport, testName, testDataIteration, "All Opportunities");
                        OpenRecordGlobalSearch(driver, testInReport, testName, testDataIteration, output2);


                        SelectOpportunityTab(driver, testInReport, testName, testDataIteration, "Activities");
                        ThinkTime(2);
                        scrollDownOpportunityEnterpriseCust(driver, testInReport, testName, testDataIteration, "700");
                        ThinkTime(2);
                        int TourCountAct = Elements(driver, Control("getTourCount", "CommonObj"));
                        for (int m = 1; m <= TourCountAct; m++)
                        {

                            ThinkTime(3);
                            int TourNum = driver.FindElements(By.XPath("(//a[contains(text(),'Ws:')])[" + m + "]//preceding::div[2]")).Count;
                            IWebElement SpecTour = driver.FindElement(By.XPath("(//a[contains(text(),'Ws:')])[" + m + "]//preceding::div[2]"));
                            string ActStatus1 = driver.FindElement(By.XPath("(//a[contains(text(),'Ws:')])[" + m + "]//following::div[3]")).Text;
                            ThinkTime(5);
                            if (ActStatus1.Equals("Open") && TourNum > 0)
                            {
                                SpecTour.Click();
                                ThinkTime(2);
                                scrollDownOpportunityEnterpriseCust(driver, testInReport, testName, testDataIteration, "-700");

                                ThinkTime(2);
                                WaitUntil(driver, Control("ComplActBut", "CommonObj"), 30);
                                Element(driver, Control("ComplActBut", "CommonObj")).Click();
                                ThinkTime(2);
                                WaitUntil(driver, Control("DeleteBut", "CommonObj"), 30);
                                Element(driver, Control("DeleteBut", "CommonObj")).Click();
                                ThinkTime(2);
                                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Tour completed", "Tour Completed");
                            }
                        }
                    }
                    catch (Exception e)
                    { }




                }

            }
            else
            {
                ThinkTime(3);
                driver.Close();
                WindowHandling(driver, parent);
            }
        }

        public void CompleteTourPerCase(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string entity, string oppname)
        {

            string parent = driver.CurrentWindowHandle;
            ThinkTime(2);
            WindowHandling(driver);
            ThinkTime(5);

            if (Elements(driver, Control("GetSlotCount", "CommonObj")) > 0)
            {
                ThinkTime(5);
                IList<IWebElement> objTour = driver.FindElements(Control("GetSlotCount", "CommonObj"));
                int TourCount = Elements(driver, Control("GetSlotCount", "CommonObj"));
                string delTourDetail = objTour[0].Text;
                string output1 = delTourDetail.Substring(delTourDetail.Length - 11);
                string output2 = output1.Remove(output1.Length - 1);
                ThinkTime(3);
                driver.Close();
                //WindowHandling(driver);
                WindowHandling(driver, parent);

                try
                {
                    NavigateToEntity(driver, testInReport, testName, testDataIteration, "Opportunities");
                    SelectValuesFromDropDown(driver, testInReport, testName, testDataIteration, "All Opportunities");
                    OpenRecordGlobalSearch(driver, testInReport, testName, testDataIteration, output2);


                    SelectOpportunityTab(driver, testInReport, testName, testDataIteration, "Activities");
                    ThinkTime(2);
                    scrollDownOpportunityEnterpriseCust(driver, testInReport, testName, testDataIteration, "700");
                    ThinkTime(4);
                    try
                    {
                        Element(driver, Control("LoadNextPage", "CommonObj")).Click();
                    }
                    catch (Exception e)
                    { }
                    ThinkTime(2);
                    int TourCountAct = Elements(driver, Control("getTourCount", "CommonObj"));
                    for (int m = 1; m <= TourCountAct; m++)
                    {

                        ThinkTime(3);
                        int TourNum = driver.FindElements(By.XPath("(//a[contains(text(),'Ws:')])[" + m + "]//preceding::div[2]")).Count;
                        IWebElement SpecTour = driver.FindElement(By.XPath("(//a[contains(text(),'Ws:')])[" + m + "]//preceding::div[2]"));
                        string ActStatus1 = driver.FindElement(By.XPath("(//a[contains(text(),'Ws:')])[" + m + "]//following::div[3]")).Text;
                        ThinkTime(5);
                        if (ActStatus1.Equals("Open") && TourNum > 0)
                        {
                            SpecTour.Click();
                            ThinkTime(2);
                            scrollDownOpportunityEnterpriseCust(driver, testInReport, testName, testDataIteration, "-700");

                            ThinkTime(2);
                            WaitUntil(driver, Control("ComplActBut", "CommonObj"), 30);
                            Element(driver, Control("ComplActBut", "CommonObj")).Click();
                            ThinkTime(2);
                            WaitUntil(driver, Control("DeleteBut", "CommonObj"), 30);
                            Element(driver, Control("DeleteBut", "CommonObj")).Click();
                            ThinkTime(2);
                            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Tour completed", "Tour Completed");
                        }
                    }
                }
                catch (Exception e)
                {

                }
            }
            else
            {
                ThinkTime(3);
                driver.Close();
                WindowHandling(driver, parent);
            }

            NavigateToEntity(driver, testInReport, testName, testDataIteration, entity);
            SelectValuesFromDropDown(driver, testInReport, testName, testDataIteration, "All Opportunities");
            OpenRecordGlobalSearch(driver, testInReport, testName, testDataIteration, oppname);
            SelectanyOpportunitybutton(driver, testInReport, testName, testDataIteration, "Book Tour");
        }













        public void Bookaslot(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string Contact, string centre, string Actiontour = "", string ASM = "")

        {
            CompleteTourPerCase(driver, testInReport, testName, testDataIteration, "Opportunities", centre);
            Actions action;
            IWebElement ele;
            string parentWindowHandle = driver.CurrentWindowHandle;
            WindowHandling(driver);
            ThinkTime(2);
            WaitUntil(driver, Control("Today", "Tour"), 180);
            // Check for Free slot to Book Tour
            for (int i = 5; i <= 28;)
            {
                Console.WriteLine("Hi");

                ele = driver.FindElement(By.XPath("//td[@id='ASPxSchedulerAgentView_containerBlock_DXCntv0_" + i + "']"));
                action = new Actions(driver);
                action.ContextClick(ele).Build().Perform();
                ThinkTime(15);

                if (Element(driver, Control("Slotbooked", "Opportunity")).Displayed)
                {
                    ThinkTime(3);
                    i += 2;
                }

                // Book a Tour in free slot
                else if (Element(driver, Control("Newtourappointment", "Opportunity")).Displayed)
                {

                    Element(driver, Control("Newtourappointment", "Opportunity")).Click();
                    ThinkTime(15);


                    if (Elements(driver, Control("BookTouravailablebutton", "Opportunity")) > 0)


                    {
                        ThinkTime(5);
                        Element(driver, Control("BookTouravailablebutton", "Opportunity")).Click();
                        ThinkTime(30);
                    }

                    else
                    {
                        ThinkTime(30);
                    }

                    ThinkTime(3);
                    if (Elements(driver, Control("ConfmMsgTour", "Opportunity")) > 0)
                    {
                        AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Tour Booked", "Tour Booked");
                    }

                    else if (Elements(driver, Control("VerifyTourUpdatedPopup", "Opportunity")) > 0)
                    {
                        AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Tour Resheduled", "Tour Booked");
                    }


                    else
                    {
                        // Verify the pop up details for the vertical slot
                        ThinkTime(2);
                        WaitUntil(driver, Control("SaveTour", "Opportunity"), 60);
                        Element(driver, Control("SaveTour", "Opportunity")).Click();
                        ThinkTime(3);
                        //MoveToElement(driver, Control("Tourbookclose", "Opportunity"));
                        //ElementHighlight(driver, Control("Tourbookclose", "Opportunity"));
                        //Element(driver, Control("Tourbookclose", "Opportunity")).Click();
                        AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Free slot verified successfully", "Free slot verification");
                        ThinkTime(10);
                        //  Assert.Fail("Not booked");


                    }

                    ThinkTime(3);
                    driver.Close();

                    WindowHandling(driver, parentWindowHandle);
                    break;

                }
            }
            if (Actiontour == "Timeverification")
            {

                WaitUntil(driver, Control("TimelineTourlabel", "Opportunity"), 30);
                if (Element(driver, Control("TimelineTourlabel", "Opportunity")).Displayed)
                {
                    MoveToElement(driver, Control("TimelineTourlabel", "Opportunity"));
                    ThinkTime(2);
                    ActionsClick(driver, Control("Timelineopentour", "Opportunity"));
                    string Starttime = Element(driver, Control("Tourstartdate", "Opportunity")).GetAttribute("defaultValue").ToString();
                    string Endtime = Element(driver, Control("Tourstopdate", "Opportunity")).GetAttribute("defaultValue").ToString();
                    int start = Int32.Parse(Starttime);
                    int end = Int32.Parse(Endtime);
                    int startimemin = start * 60;
                    int endtimemin = end * 60;

                    int duration = endtimemin - startimemin;
                    if (duration == 90)
                    {
                        AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Free slot verified successfully", "Free slot verification");

                    }

                    else
                    {
                        Assert.Fail("Duration is not 90 min by default");
                    }
                }
            }

        }


        public void BookTourIn(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string Contact, string centre, string Actiontour = "", string ASM = "")

        {
            CompleteTourPerCase(driver, testInReport, testName, testDataIteration, "Opportunities", centre);
            Actions action;
            IWebElement ele;
            IWebElement ele1;
            string parentWindowHandle = driver.CurrentWindowHandle;
            WindowHandling(driver);
            //WindowHandling(driver);


            ThinkTime(2);
            WaitUntil(driver, Control("Today", "Tour"), 30);

            // Check for Free slot to Book Tour
            for (int i = 5; i <= 28;)
            {
                Console.WriteLine("Hi");
                ele = driver.FindElement(By.XPath("//td[@id='ASPxSchedulerAgentView_containerBlock_DXCntv0_" + i + "']"));
                action = new Actions(driver);
                action.ContextClick(ele).Build().Perform();
                ThinkTime(2);

                if (Element(driver, Control("Slotbooked", "Opportunity")).Displayed)
                {
                    ThinkTime(3);
                    i += 1;
                }

                // Book a Tour in free slot
                else if (Element(driver, Control("Newtourappointment", "Opportunity")).Displayed)
                {
                    int j = i + 2;
                    ele1 = driver.FindElement(By.XPath("//td[@id='ASPxSchedulerAgentView_containerBlock_DXCntv0_" + j + "']"));
                    action = new Actions(driver);
                    action.ContextClick(ele1).Build().Perform();
                    ThinkTime(2);
                    if (Element(driver, Control("Newtourappointment", "Opportunity")).Displayed)
                    {
                        ThinkTime(2);
                        action.ContextClick(ele).Build().Perform();
                        Element(driver, Control("Newtourappointment", "Opportunity")).Click();
                        ThinkTime(5);
                    }


                    if (Elements(driver, Control("BookTouravailablebutton", "Opportunity")) > 0)
                    {
                        ThinkTime(3);
                        Element(driver, Control("BookTouravailablebutton", "Opportunity")).Click();
                    }
                    ThinkTime(3);
                    if (Elements(driver, Control("ConfmMsgTour", "CommonObj")) > 0)
                    {
                        AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Tour Booked", "Tour Booked");
                        break;
                    }

                    else
                    {
                        ThinkTime(2);
                        WaitUntil(driver, Control("Today", "Tour"), 30);
                        //action.ContextClick(ele).Build().Perform();

                        if (!(Element(driver, Control("Newtourappointment", "Opportunity")).Displayed))
                        // Verify the pop up details for the vertical slot
                        {
                            i = i + 1;
                        }
                        else
                        {

                            ThinkTime(2);
                            WaitUntil(driver, Control("SaveTour", "Opportunity"), 60);
                            Element(driver, Control("SaveTour", "Opportunity")).Click();
                            ThinkTime(3);
                            if (Elements(driver, Control("ConfmMsgTour", "CommonObj")) > 0)
                            {
                                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Tour Booked", "Tour Booked");
                                break;
                            }
                        }
                    }
                }

            }

            ThinkTime(3);
            driver.Close();

            WindowHandling(driver, parentWindowHandle);


        }


        public void ResheduleBookaslot(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string Contact, string centre, string Actiontour = "", string ASM = "")

        {
            // CompleteTourPerCase(driver, testInReport, testName, testDataIteration, "Opportunities", centre);
            Actions action;
            IWebElement ele;
            string parentWindowHandle = driver.CurrentWindowHandle;
            WindowHandling(driver);


            ThinkTime(15);

            // Check for Free slot to Book Tour
            for (int i = 4; i <= 28;)
            {
                Console.WriteLine("Hi");

                ele = driver.FindElement(By.XPath("//td[@id='ASPxSchedulerAgentView_containerBlock_DXCntv0_" + i + "']"));
                action = new Actions(driver);
                action.ContextClick(ele).Build().Perform();
                if (Element(driver, Control("Opentour", "Opportunity")).Displayed)
                {
                    ThinkTime(3);
                    i += 2;
                }


                // Book a Tour in free slot
                else if (Element(driver, Control("Newtourappointment", "Opportunity")).Displayed)
                {

                    Element(driver, Control("Newtourappointment", "Opportunity")).Click();
                    ThinkTime(15);


                    if (Elements(driver, Control("BookTouravailablebutton", "Opportunity")) > 0)


                    {
                        ThinkTime(5);
                        Element(driver, Control("BookTouravailablebutton", "Opportunity")).Click();
                        ThinkTime(30);
                    }
                    //if (Element(driver, Control("BookTouravailablebutton", "Opportunity")).Displayed)
                    //{

                    //    Element(driver, Control("BookTouravailablebutton", "Opportunity")).Click();
                    //    ThinkTime(30);
                    //}

                    else
                    {
                        ThinkTime(30);
                        ThinkTime(2);
                        Element(driver, Control("SaveTour", "Opportunity")).Click();
                        ThinkTime(3);
                        //MoveToElement(driver, Control("Tourbookclose", "Opportunity"));
                        //ElementHighlight(driver, Control("Tourbookclose", "Opportunity"));
                        //Element(driver, Control("Tourbookclose", "Opportunity")).Click();
                        AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Free slot verified successfully", "Free slot verification");
                        ThinkTime(10);

                        ThinkTime(3);
                        if (Elements(driver, Control("VerifyTourUpdatedPopup", "Opportunity")) > 0)
                        {
                            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Tour Resheduled", "Tour Booked");
                        }
                        else
                        {

                            Assert.Fail("Not booked");


                        }

                    }
                    //Element(driver, Control("Tourbookclose", "Opportunity")).Click();
                    //     AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Free slot verified successfully", "Free slot verification");
                    //     ThinkTime(10);

                    //     action.ClickAndHold(ele).Build().Perform();
                    //     IJavaScriptExecutor js = (IJavaScriptExecutor)driver;
                    //     js.ExecuteScript("arguments[0].click", ele);


                    // mouse hover/click full details verification

                    //scrollDownOpportunityEnterprise(driver, testInReport, testName, testDataIteration);

                    //// Verify the pop up details for the vertical slot
                    //ThinkTime(2);
                    //Element(driver, Control("SaveTour", "Opportunity")).Click();
                    //ThinkTime(3);



                    //ActionsClick(driver, Control("Slotclick", "Opportunity"));
                    //ThinkTime(2);
                    //string value = Element(driver, Control("Slotpopupcontentbody", "Opportunity")).GetAttribute("innerText");
                    //// WindowHandling(driver);
                    //if (value.Contains(centre) && value.Contains(ASM))
                    //{
                    //    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Free slot verified successfully", "Free slot verification");
                    //}
                    //else
                    //{
                    //    Assert.Fail("Centre for tour details not displayed on mouse hover");
                    //}
                    //if (value.Contains(Contact))
                    //{
                    //    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Free slot verified successfully", "Free slot verification");

                    //}
                    //else
                    //{
                    //    Assert.Fail("Contact for tour details not displayed on mouse hover");
                    //}


                    ThinkTime(3);
                    driver.Close();

                    WindowHandling(driver, parentWindowHandle);
                    break;

                }
            }
            if (Actiontour == "Timeverification")
            {

                WaitUntil(driver, Control("TimelineTourlabel", "Opportunity"), 30);
                if (Element(driver, Control("TimelineTourlabel", "Opportunity")).Displayed)
                {
                    MoveToElement(driver, Control("TimelineTourlabel", "Opportunity"));
                    ThinkTime(2);
                    ActionsClick(driver, Control("Timelineopentour", "Opportunity"));
                    string Starttime = Element(driver, Control("Tourstartdate", "Opportunity")).GetAttribute("defaultValue").ToString();
                    string Endtime = Element(driver, Control("Tourstopdate", "Opportunity")).GetAttribute("defaultValue").ToString();
                    int start = Int32.Parse(Starttime);
                    int end = Int32.Parse(Endtime);
                    int startimemin = start * 60;
                    int endtimemin = end * 60;

                    int duration = endtimemin - startimemin;
                    if (duration == 90)
                    {
                        AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Free slot verified successfully", "Free slot verification");

                    }

                    else
                    {
                        Assert.Fail("Duration is not 90 min by default");
                    }
                }
            }

        }




        //method to Verify Free Slot in Book a tour.
        public void VerifyFreeSlotBookATour(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string CityDairy, string Centre)
        {


            int Variableacount = 0;

            driver.SwitchTo().DefaultContent();
            string parentWindowHandle = driver.CurrentWindowHandle;
            WindowHandling(driver);
            driver.Manage().Window.Maximize();

            VerifyCityDairyAndDairy(driver, testInReport, testName, testDataIteration, CityDairy, Centre);


            ThinkTime(3);

            WaitUntil(driver, Control("TodayButton", "Generic"), 180);
            MoveToElement(driver, Control("TodayButton", "Generic"));
            Element(driver, Control("TodayButton", "Generic")).Click();


            ThinkTime(3);

            for (int i = 3; i <= 20;)

            {

                string a = i.ToString();

                ThinkTime(3);

                WaitUntil(driver, Control("VerifySlot", a, "Opportunity"), 30);
                MoveToElement(driver, Control("VerifySlot", a, "Opportunity"));
                ElementHighlight(driver, Control("VerifySlot", a, "Opportunity"));
                //Element(driver, Control("VerifySlot", a, "Opportunity")).Click();

                Actions action = new Actions(driver);
                IWebElement eleSlot1 = Element(driver, Control("VerifySlot", a, "Opportunity"));
                action.ContextClick(eleSlot1).Build().Perform();


                if (Elements(driver, Control("NewAppointmentVerify", "Opportunity")) > 0)
                {
                    Variableacount += 1;
                    i += 2;
                }

                else
                {
                    i += 2;

                }
            }

            if (Variableacount >= 1)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Free slot verified successfully", "Free slot verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "There are no free slot ", "Free slot verification");
                Assert.Fail("Free slot verification failed ");
            }

            driver.Close();

            WindowHandling(driver, parentWindowHandle);
        }

        //method to Verify Free Slot in Book a tour.
        public void VerifyFreeSlotforBookATour(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string CityDairy, string Centre)
        {


            int Variableacount = 0;

            driver.SwitchTo().DefaultContent();
            string parentWindowHandle = driver.CurrentWindowHandle;
            WindowHandling(driver);
            driver.Manage().Window.Maximize();

            VerifyCityDairyAndDairy11(driver, testInReport, testName, testDataIteration, CityDairy, Centre);


            ThinkTime(3);

            WaitUntil(driver, Control("TodayButton", "Generic"), 180);
            MoveToElement(driver, Control("TodayButton", "Generic"));
            Element(driver, Control("TodayButton", "Generic")).Click();


            ThinkTime(3);

            for (int i = 3; i <= 20;)

            {

                string a = i.ToString();

                ThinkTime(3);

                WaitUntil(driver, Control("VerifySlot", a, "Opportunity"), 30);
                MoveToElement(driver, Control("VerifySlot", a, "Opportunity"));
                ElementHighlight(driver, Control("VerifySlot", a, "Opportunity"));
                //Element(driver, Control("VerifySlot", a, "Opportunity")).Click();

                Actions action = new Actions(driver);
                IWebElement eleSlot1 = Element(driver, Control("VerifySlot", a, "Opportunity"));
                action.ContextClick(eleSlot1).Build().Perform();


                if (Elements(driver, Control("NewAppointmentVerify", "Opportunity")) > 0)
                {
                    Variableacount += 1;
                    i += 2;
                }

                else
                {
                    i += 2;

                }
            }

            if (Variableacount >= 1)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Free slot verified successfully", "Free slot verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "There are no free slot ", "Free slot verification");
                Assert.Fail("Free slot verification failed ");
            }

            driver.Close();

            WindowHandling(driver, parentWindowHandle);
        }

        //method to Verify Free Slot in Book a tour.
        public void VerifyFreeSlotBookATour1(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string CityDairy, string Centre)
        {


            int Variableacount = 0;

            driver.SwitchTo().DefaultContent();
            string parentWindowHandle = driver.CurrentWindowHandle;
            WindowHandling(driver);
            driver.Manage().Window.Maximize();
            VerifyCityDairyAndDairy11(driver, testInReport, testName, testDataIteration, CityDairy, Centre);


            ThinkTime(3);

            WaitUntil(driver, Control("TodayButton", "Generic"), 180);
            MoveToElement(driver, Control("TodayButton", "Generic"));
            Element(driver, Control("TodayButton", "Generic")).Click();


            ThinkTime(3);

            for (int i = 3; i <= 20;)

            {

                string a = i.ToString();

                ThinkTime(3);

                WaitUntil(driver, Control("VerifySlot", a, "Opportunity"), 30);
                MoveToElement(driver, Control("VerifySlot", a, "Opportunity"));
                ElementHighlight(driver, Control("VerifySlot", a, "Opportunity"));
                //Element(driver, Control("VerifySlot", a, "Opportunity")).Click();

                Actions action = new Actions(driver);
                IWebElement eleSlot1 = Element(driver, Control("VerifySlot", a, "Opportunity"));
                action.ContextClick(eleSlot1).Build().Perform();


                if (Elements(driver, Control("NewAppointmentVerify", "Opportunity")) > 0)
                {
                    Variableacount += 1;
                    i += 2;
                }

                else
                {
                    i += 2;

                }
            }

            if (Variableacount >= 1)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Free slot verified successfully", "Free slot verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "There are no free slot ", "Free slot verification");
                Assert.Fail("Free slot verification failed ");
            }

            //driver.Close();

            //WindowHandling(driver, parentWindowHandle);
        }

        //method to Verify Free Slot in Book a tour.
        public void VerifyFreeSlotBookATour11(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string CityDairy, string Centre)
        {


            int Variableacount = 0;

            driver.SwitchTo().DefaultContent();
            string parentWindowHandle = driver.CurrentWindowHandle;
            WindowHandling(driver);
            driver.Manage().Window.Maximize();
            VerifyCityDairyAndDairy4995(driver, testInReport, testName, testDataIteration, CityDairy, Centre);


            ThinkTime(3);

            WaitUntil(driver, Control("TodayButton", "Generic"), 180);
            MoveToElement(driver, Control("TodayButton", "Generic"));
            Element(driver, Control("TodayButton", "Generic")).Click();


            ThinkTime(3);

            for (int i = 3; i <= 20;)

            {

                string a = i.ToString();

                ThinkTime(3);

                WaitUntil(driver, Control("VerifySlot", a, "Opportunity"), 30);
                MoveToElement(driver, Control("VerifySlot", a, "Opportunity"));
                ElementHighlight(driver, Control("VerifySlot", a, "Opportunity"));
                //Element(driver, Control("VerifySlot", a, "Opportunity")).Click();

                Actions action = new Actions(driver);
                IWebElement eleSlot1 = Element(driver, Control("VerifySlot", a, "Opportunity"));
                action.ContextClick(eleSlot1).Build().Perform();


                if (Elements(driver, Control("NewAppointmentVerify", "Opportunity")) > 0)
                {
                    Variableacount += 1;
                    i += 2;
                }

                else
                {
                    i += 2;

                }
            }

            if (Variableacount >= 1)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Free slot verified successfully", "Free slot verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "There are no free slot ", "Free slot verification");
                Assert.Fail("Free slot verification failed ");
            }

            driver.Close();

            WindowHandling(driver, parentWindowHandle);
        }


        //method to verify City diary and centre.
        public void VerifyCityDairyAndDairy(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string CityDairy, string Centre)
        {

            driver.SwitchTo().DefaultContent();
            string parentWindowHandle = driver.CurrentWindowHandle;
            //WindowHandling(driver);
            //driver.Manage().Window.Maximize();

            WaitUntil(driver, Control("VerifyCityDairyCentreBooktour", CityDairy, "Opportunity"), 60);
            ElementHighlight(driver, Control("VerifyCityDairyCentreBooktour", CityDairy, "Opportunity"));
            if (Elements(driver, Control("VerifyCityDairyCentreBooktour", CityDairy, "Opportunity")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "City Dairy verified successfully", "City Dairy verification");

                ElementHighlight(driver, Control("VerifyCityDairyCentreBooktour", Centre, "Opportunity"));
                if (Elements(driver, Control("VerifyCityDairyCentreBooktour", Centre, "Opportunity")) > 0)
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", " Centre verified successfully", "Centre verification");
                }
                else
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "City Dairy Verification failed", "City Dairy verification");
                    Assert.Fail("City Dairy verification failed ");
                }
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Centre  verification failed", "Centre verification");
                Assert.Fail("Centre verification failed ");
            }
        }


        //method to verify City diary and centre.
        public void VerifyCityDairyAndDairy11(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string CityDairy, string Centre)
        {

            driver.SwitchTo().DefaultContent();
            //string parentWindowHandle = driver.CurrentWindowHandle;
            //WindowHandling(driver);
            //driver.Manage().Window.Maximize();

            ElementHighlight(driver, Control("VerifyCityDairyCentreBooktour", CityDairy, "Opportunity"));
            if (Elements(driver, Control("VerifyCityDairyCentreBooktour", CityDairy, "Opportunity")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "City Dairy verified successfully", "City Dairy verification");

                ElementHighlight(driver, Control("VerifyCityDairyCentreBooktour", Centre, "Opportunity"));
                if (Elements(driver, Control("VerifyCityDairyCentreBooktour", Centre, "Opportunity")) > 0)
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", " Centre verified successfully", "Centre verification");
                }
                else
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "City Dairy Verification failed", "City Dairy verification");
                    Assert.Fail("City Dairy verification failed ");
                }
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Centre  verification failed", "Centre verification");
                Assert.Fail("Centre verification failed ");
            }
        }

        //method to verify City diary and centre.
        public void VerifyCityDairyAndDairy4995(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string CityDairy, string Centre)
        {

            driver.SwitchTo().DefaultContent();
            string parentWindowHandle = driver.CurrentWindowHandle;
            WindowHandling(driver);
            driver.Manage().Window.Maximize();
            ThinkTime(5);
            ElementHighlight(driver, Control("VerifyCityDairyCentreBooktour", CityDairy, "Opportunity"));
            if (Elements(driver, Control("VerifyCityDairyCentreBooktour", CityDairy, "Opportunity")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "City Dairy verified successfully", "City Dairy verification");

                ElementHighlight(driver, Control("VerifyCityDairyCentreBooktour", Centre, "Opportunity"));
                if (Elements(driver, Control("VerifyCityDairyCentreBooktour", Centre, "Opportunity")) > 0)
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", " Centre verified successfully", "Centre verification");
                }
                else
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "City Dairy Verification failed", "City Dairy verification");
                    Assert.Fail("City Dairy verification failed ");
                }
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Centre  verification failed", "Centre verification");
                Assert.Fail("Centre verification failed ");
            }
        }

        //Updating and verifying the mandatory fields in account page
        public void UpdateandVerifyAccounts(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string field, string companyname)
        {


            string s = DateTime.Now.ToString();
            string company = companyname + s;
            ThinkTime(2);
            WaitUntil(driver, Control("AccountNameText", "CommonObj"), 30);
            Element(driver, Control("AccountNameText", "CommonObj")).Click();
            ThinkTime(2);
            Element(driver, Control("AccountNameText", "CommonObj")).SendKeys(company);


            scrollDownaccounts(driver, testInReport, testName, testDataIteration);
            //scrollDownaccounts(driver, testInReport, testName, testDataIteration);

            if (Elements(driver, Control("CustomerButton", "GenericOld")) > 0)
            {
                ThinkTime(2);
                WaitUntil(driver, Control("CustomerButton", "GenericOld"), 30);
                Element(driver, Control("CustomerButton", "GenericOld")).Click();
            }

            saveFooter(driver, testInReport, testName, testDataIteration);
            saveFooter(driver, testInReport, testName, testDataIteration);


            ThinkTime(5);
            String ContName = Element(driver, Control("AccountNameText", "CommonObj")).GetAttribute("innerText");
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Details Updated", "Details  Updated");

            if (Elements(driver, Control("ScriptDialg", "Opportunity")) > 0)
            {
                Assert.Fail("Details not Updated");
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Details not Updated", "Details not Updated");
            }


        }

        //Clicks on new opportunity button
        public void ClickonNewButton(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string button)
        {

            ThinkTime(2);
            WaitUntil(driver, Control("DashboardButton", button, "GenericOld"), 120);
            Element(driver, Control("DashboardButton", button, "GenericOld")).Click();
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
        }

        public string CreateNewContactPrior(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string LastName,
             string Sal, string Firstname, string CompanyAccnt, string Email, string MobileNo, string BusinessNo, string Language, string City, string Country)
        {
            ThinkTime(2);
            WaitUntil(driver, Control("NewContactEx", "CommonObj"), 30);
            string CurrentContactType = Element(driver, Control("NewContactEx", "CommonObj")).Text;
            if (CurrentContactType == "Employee")
            {
                string ContactSel = "Sales Customer";
                ThinkTime(2);
                Element(driver, Control("NewContactEx", "CommonObj")).Click();
                ThinkTime(2);
                Element(driver, Control("SelectExpectedCon", ContactSel, "CommonObj")).Click();

            }

            //Salutation
            ThinkTime(2);
            WaitUntil(driver, Control("Salutationlabel1", "EnterpriseSales"), 30);
            Element(driver, Control("Salutationlabel1", "EnterpriseSales")).Click();
            Element(driver, Control("Salutationlabel1", "EnterpriseSales")).SendKeys(Sal); //TestOpportunityReadEdit2
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Salutation added", "Salutation added");

            //Firstname
            ThinkTime(2);
            WaitUntil(driver, Control("Firstname", "Generic"), 30);
            Element(driver, Control("Firstname", "Generic")).Click();
            Element(driver, Control("Firstname", "Generic")).SendKeys(Firstname); //User
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Firstname added", "Firstname added");

            //Lastname
            ThinkTime(2);
            WaitUntil(driver, Control("NewContactLName", "Contacts"), 30);
            MoveToElement(driver, Control("NewContactLName", "Contacts"));
            Element(driver, Control("NewContactLName", "Contacts")).Click();
            Element(driver, Control("NewContactLName", "Contacts")).SendKeys(LastName);
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Lastname added", "Lastname added");

            //Company Account
            ThinkTime(2);
            WaitUntil(driver, Control("ITSalesCompanyAccountInput", "ITSales"), 30);
            Element(driver, Control("ITSalesCompanyAccountInput", "ITSales")).Click();
            Element(driver, Control("ITSalesCompanyAccountInput", "ITSales")).SendKeys(CompanyAccnt); //CompanyName
            ThinkTime(2);
            WaitUntil(driver, Control("ITSalesCustomer", "Opportunity"), 30);
            Element(driver, Control("ITSalesCustomer", "Opportunity")).Click();
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Company name added", "Company name added");

            //Email
            ThinkTime(2);
            WaitUntil(driver, Control("ITSalesEmailInput", "ITSales"), 30);
            Element(driver, Control("ITSalesEmailInput", "ITSales")).Click();
            Element(driver, Control("ITSalesEmailInput", "ITSales")).SendKeys(Email); //Email
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Email added", "Email added");
            scrollDownContactPage(driver, testInReport, testName, testDataIteration);


            //Mobile Phone
            ThinkTime(2);
            WaitUntil(driver, Control("Mobilenumber", "Contacts"), 30);
            MoveToElement(driver, Control("Mobilenumber", "Contacts"));
            Element(driver, Control("Mobilenumber", "Contacts")).SendKeys(MobileNo);  //Mobilenumber
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Mobile number added", "Mobile number added");

            //Business Phone
            ThinkTime(2);
            WaitUntil(driver, Control("Businessnumber", "Contacts"), 30);
            MoveToElement(driver, Control("Businessnumber", "Contacts"));
            Element(driver, Control("Businessnumber", "Contacts")).SendKeys(BusinessNo); //Mobilenumber
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Business number added", "Business number added");

            //Language
            ThinkTime(2);
            WaitUntil(driver, Control("NewLanguageInput", "Opportunity"), 30);
            MoveToElement(driver, Control("NewLanguageInput", "Opportunity"));
            Element(driver, Control("NewLanguageInput", "Opportunity")).Click();
            Element(driver, Control("NewLanguageInput", "Opportunity")).SendKeys(Language); //TestContactLanguage
            ThinkTime(2);
            WaitUntil(driver, Control("Languagedropdown", "EnterpriseSales"), 30);
            Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Language added", "Language added");

            scrollDownContactPage(driver, testInReport, testName, testDataIteration);

            //City
            ThinkTime(2);
            WaitUntil(driver, Control("CityAccountlabel1", "EnterpriseSales"), 30);
            Element(driver, Control("CityAccountlabel1", "EnterpriseSales")).SendKeys(City); //City1
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "City added", "City added");

            //Country
            ThinkTime(2);
            WaitUntil(driver, Control("NewCountryInput", "EnterpriseSales"), 30);
            Element(driver, Control("NewCountryInput", "EnterpriseSales")).Click();
            Element(driver, Control("NewCountryInput", "EnterpriseSales")).SendKeys(Country); //Country1
            ThinkTime(2);
            WaitUntil(driver, Control("Languagedropdown", "EnterpriseSales"), 30);
            Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Country added", "Country added");

            saveFooter(driver, testInReport, testName, testDataIteration);
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Contact Saved", "Contact Saved");
            ThinkTime(4);
            SelectanyOpportunitybutton(driver, testInReport, testName, testDataIteration, "Refresh");
            ThinkTime(2);
            WaitUntil(driver, Control("getTitlehead", "Opportunity"), 30);
            string ContactName = Element(driver, Control("getTitlehead", "Opportunity")).GetAttribute("title");
            if (ContactName != "New Contact")
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Created Contact", "Created Contact");
            }
            return ContactName;
        }

        // Verify New button on dashbord 
        public void VerifyNewButton(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string button)
        {

            //WaitUntil(driver, Control("DashboardButton", button, "GenericOld"), 30);

            ThinkTime(6);
            if (Elements(driver, Control("DashboardButton", button, "GenericOld")) == 0)
            {



                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Not Able to Create Contact", "Contact Creation");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Able to Create Contact", "Contact Creation");
                Assert.Fail("Account Updation failed");
            }
        }

        // Verify New button on dashbord 
        public void VerifyNewButton1(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string button)
        {

            WaitUntil(driver, Control("DashboardButton", button, "GenericOld"), 360);

            ThinkTime(6);
            if (Elements(driver, Control("DashboardButton", button, "GenericOld")) > 0)
            {



                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Able to Create Contact", "Contact Creation");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "NOT Able to Create Contact", "Contact Creation");
                Assert.Fail("CONTACT IS NOT ABLE TO CREATE");
            }
        }


        //Updating and verifying contacts
        public void UpdateandVerifyContacts(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string field, string lastname, string language)
        {

            ThinkTime(5);
            string date = System.DateTime.Now.ToString();
            string contactname = lastname + date;

            Element(driver, Control("ContactNames", field, "Contacts")).SendKeys(Keys.Control + "a");
            Element(driver, Control("ContactNames", field, "Contacts")).SendKeys(Keys.Delete);
            ThinkTime(3);
            Element(driver, Control("ContactNames", field, "Contacts")).SendKeys(contactname);
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Last Name", "Last Name is updated successfully");

            scrollDownOpportunityPage(driver, testInReport, testName, testDataIteration);

            ThinkTime(3);
            if (Elements(driver, Control("LanguagePreference", "Contacts")) > 0)
            {
                Element(driver, Control("LanguagePreference", "Contacts")).SendKeys(Keys.Control + "a");
                Element(driver, Control("LanguagePreference", "Contacts")).SendKeys(Keys.Delete);
                Element(driver, Control("LanguagePreference", "Contacts")).SendKeys(language);
                ThinkTime(5);
                WaitUntil(driver, Control("LanguageSelection", language, "Contacts"), 30);
                Element(driver, Control("LanguageSelection", language, "Contacts")).Click();
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Language Preference", "Language is updated successfully");

            }

            else

            {

                ThinkTime(2);
                WaitUntil(driver, Control("SelectedLanguage", "Contacts"), 40);
                MoveToElement(driver, Control("SelectedLanguage", "Contacts"));
                Element(driver, Control("CancelButton", "Contacts")).Click();
                Element(driver, Control("LanguagePreference", "Contacts")).SendKeys(language);
                ThinkTime(2);
                WaitUntil(driver, Control("LanguageSelection", language, "Contacts"), 40);
                Element(driver, Control("LanguageSelection", language, "Contacts")).Click();
                ThinkTime(3);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Language Preference", "Language Preference is updated successfully");

            }


            saveFooter(driver, testInReport, testName, testDataIteration);
            ThinkTime(3);
            String name = Element(driver, Control("ContactNames", field, "Contacts")).GetAttribute("value").ToString();


            //Verification for Last name and Contacts
            if (name.Equals(contactname) && Element(driver, Control("SelectedLanguage", "Contacts")).Text.Contains(language))
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Contact Details", "Contact details are updated successfully");

            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Contact Details", "Contact details are not updated successfully");
                Assert.Fail("Contact updation failed");
            }


        }

        public void sortcolumnheader(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string coloumnnumber)
        {

            ThinkTime(5);
            ActionsClick(driver, Control("Sortcolumnheader", coloumnnumber, "EnterpriseSales"));
            ThinkTime(1);
            ActionsClick(driver, Control("Sortcolumnheader", coloumnnumber, "EnterpriseSales"));
            ThinkTime(1);
        }








        public void Phonecalldurationverify(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string entity, string activityname)
        {
            string date1 = Element(driver, Control("Getactualenddate", "Opportunity")).GetAttribute("defaultValue");
            string time1 = Element(driver, Control("Getactualendtime", "Opportunity")).GetAttribute("defaultValue");

            string[] seperate1 = date1.Split('/');
            string date = seperate1[1];
            int datenum = Int32.Parse(date);
            int finaldate = datenum + 1;
            ThinkTime(3);

            NavigateToEntity(driver, testInReport, testName, testDataIteration, entity);
            ThinkTime(4);
            //SearchforRecord(driver, testInReport, testName, testDataIteration, activityname);

            //FilterActivityStatusITeSales(driver, testInReport, testDataIteration, testName, "Open");
            //ActionsClick(driver, Control("Sortactivitystatus", "EnterpriseSales"));
            //ThinkTime(1);
            //ActionsClick(driver, Control("Sortactivitystatus", "EnterpriseSales"));
            //ThinkTime(1);
            //ClickParticularRecord(driver, testInReport, testName, testDataIteration, activityname);
            ThinkTime(4);
            scrollDownOpportunityPage(driver, testInReport, testName, testDataIteration);
            ThinkTime(2);
            string date2 = Element(driver, Control("Openduedate", "EnterpriseSales")).GetAttribute("defaultValue");
            string time2 = Element(driver, Control("Openduetime", "EnterpriseSales")).GetAttribute("defaultValue");
            string[] seperate2 = date2.Split('/');
            string date3 = seperate2[1];

            int datenum1 = Int32.Parse(date3);
            ThinkTime(3);

            if (time1 == time2)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Time Details", "Time details are updated successfully");

            }
            else
            {
                Assert.Fail("Time is modified");
            }
            //if (finaldate == datenum1)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Date Details", "Date details are updated successfully");

            }
            //else
            //{
            //    Assert.Fail("Date is not scheduled to 24H");
            //}
        }
        public void Phonecallcancel(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string action, string oppstatus)
        {
            //WaitUntil(driver, Control("State", "Opportunity"), 30);
            //Select(Element(driver, Control("State", "Opportunity"))).SelectByText(status);
            ThinkTime(2);
            //WaitUntil(driver, Control("CallToInputField1", "Opportunity"), 360);
            //MoveToElement(driver, Control("CallToInputField1", "Opportunity"));
            //Element(driver, Control("CallToInputField1", "Opportunity")).Click();
            //ThinkTime(2);
            //Element(driver, Control("CallToInputField1", "Opportunity")).SendKeys("Ann maria ferrao");
            //ThinkTime(1);
            //WaitUntil(driver, Control("CallToSelection1", "Opportunity"), 360);
            //MoveToElement(driver, Control("CallToSelection1", "Opportunity"));
            //Element(driver, Control("CallToSelection1", "Opportunity")).Click();
            ThinkTime(5);

            Element(driver, Control("Closephonecall", action, "Opportunity")).Click();

            ThinkTime(5);
            WaitUntil(driver, Control("Verifyphonecallstatus", oppstatus, "Opportunity"), 360);

            if (Elements(driver, Control("ReadOnlyLostwonOpportunity", oppstatus, "Opportunity")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Phonecall activity is canceled", "Activityverification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Activity status verification failed", "Activity status verification failed");
                //Assert.Fail("phonecall is marked as Read Only");
            }
        }

        public void Phonecallcancel1(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string action, string oppstatus)
        {
            //WaitUntil(driver, Control("State", "Opportunity"), 30);
            //Select(Element(driver, Control("State", "Opportunity"))).SelectByText(status);
            ThinkTime(2);
            //WaitUntil(driver, Control("CallToInputField1", "Opportunity"), 360);
            //MoveToElement(driver, Control("CallToInputField1", "Opportunity"));
            //Element(driver, Control("CallToInputField1", "Opportunity")).Click();
            //ThinkTime(2);
            //Element(driver, Control("CallToInputField1", "Opportunity")).SendKeys("Ann maria ferrao");
            //ThinkTime(1);
            //WaitUntil(driver, Control("CallToSelection1", "Opportunity"), 360);
            //MoveToElement(driver, Control("CallToSelection1", "Opportunity"));
            //Element(driver, Control("CallToSelection1", "Opportunity")).Click();
            ThinkTime(5);

            Element(driver, Control("Closephonecall", action, "Opportunity")).Click();

            ThinkTime(5);
            WaitUntil(driver, Control("PhCallStatus", "Opportunity"), 60);

            if (Elements(driver, Control("PhCallStatus", "Opportunity")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Phonecall activity is canceled", "Activityverification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Activity status verification failed", "Activity status verification failed");
                Assert.Fail("phonecall is not marked as Read Only");
            }
        }


        //Select status Reason for Close as Lost or won
        public void CloseasLostWon(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string oppstatus, string status = "", string button = "")
        {
            WaitUntil(driver, Control("StatusReasonlostwon", "Opportunity"), 30);
            Select(Element(driver, Control("StatusReasonlostwon", "Opportunity"))).SelectByText(status);
            ThinkTime(2);
            Element(driver, Control("Saveregardingaccount", "Opportunity")).Click();
            ThinkTime(2);
            /*  WaitUntil(driver, Control("ReadOnlyLostwonOpportunity", oppstatus, "Opportunity"), 30);
              if (Elements(driver, Control("ReadOnlyLostwonOpportunity", oppstatus, "Opportunity")) > 0)
              {
                  AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Opportunity is read only", "ReadOnly");
              }
              else
              {
                  AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Opportunity is not read only", "ReadOnly");
                  Assert.Fail("Opportunity is not marked as Read Only");
              }*/
        }

        public void Verifybrandvalue(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string brandvalue)
        {

            //WaitUntil(driver, Control("RecommendedBusinessCentreClick", "Opportunity"), 30);
            //MoveToElement(driver, Control("RecommendedBusinessCentreClick", "Opportunity"));
            //ThinkTime(3);
            //Element(driver, Control("RecommendedBusinessCentreClick", "Opportunity")).Click();
            ThinkTime(10);
            string brandpopulated = Element(driver, Control("BrandvalueNew", "Opportunity")).GetAttribute("innerText");
            if (brandpopulated == brandvalue)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Brand value verified", "Brand value verified");

            }
            else
            {
                Assert.Fail("Brand not populated as: " + brandvalue);
            }
        }






        public string SelectTitle(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {


            WaitUntil(driver, Control("CustomerTopic", "Opportunity"), 30);

            ThinkTime(5);
            string s = Element(driver, Control("CustomerTopic", "Opportunity")).GetAttribute("defaultValue");
            return s;
        }


        //To create and save opportunity in IT Sales
        public void ITSalesNewOpportunity(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string topicfield, string topicvalue)
        {

            string s = topicvalue + DateTime.Now;
            ThinkTime(6);
            WaitUntil(driver, Control("OpportunityFormField", topicfield, "Opportunity"), 30);
            Element(driver, Control("OpportunityFormField", topicfield, "Opportunity")).Clear();
            ThinkTime(5);

            Element(driver, Control("OpportunityFormField", topicfield, "Opportunity")).SendKeys(s);
            WaitUntil(driver, Control("Customerlookup", "Opportunity"), 30);
            ThinkTime(5);
            Element(driver, Control("Customerlookup", "Opportunity")).Click();
            Element(driver, Control("Customerlookup", "Opportunity")).SendKeys("APEX Legends");
            ThinkTime(5);

            MoveToElement(driver, Control("SelectValueDropDown1", "SharePoint"));
            ThinkTime(1);
            Element(driver, Control("SelectValueDropDown1", "SharePoint")).Click();
            ThinkTime(7);
            AddLog(driver, testInReport, testName, testDataIteration, "Info", "Opportunity topic", "Opportunity");
            saveFooter(driver, testInReport, testName, testDataIteration);
            ThinkTime(5);

        }

        //To create and save opportunity
        public void CreateandSaveOpportunity(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string topicfield, string topicvalue, string customerfield)
        {
            string s = topicvalue + DateTime.Now;
            WaitUntil(driver, Control("OpportunityFormField", topicfield, "Opportunity"), 30);
            Element(driver, Control("OpportunityFormField", topicfield, "Opportunity")).Clear();
            ThinkTime(5);
            Element(driver, Control("OpportunityFormField", topicfield, "Opportunity")).SendKeys(s);
            AddLog(driver, testInReport, testName, testDataIteration, "Info", "Opportunity topic", "Opportunity");
            Element(driver, Control("OpportunityFormField", customerfield, "Opportunity")).Clear();
            ThinkTime(3);
            MoveToElement(driver, Control("OpportunityFormField", customerfield, "Opportunity"));

            //create new contact.
            WaitUntil(driver, Control("NewContactInput", "Opportunity"), 90);
            MoveToElement(driver, Control("NewContactInput", "Opportunity"));
            JSClick(driver, Control("NewContactInput", "Opportunity"));

            WaitUntil(driver, Control("NewContactButton", "Opportunity"), 30);
            MoveToElement(driver, Control("NewContactButton", "Opportunity"));
            Element(driver, Control("NewContactButton", "Opportunity")).Click();

            ThinkTime(5);

            WaitUntil(driver, Control("NewContactLname", "Opportunity"), 30);
            MoveToElement(driver, Control("NewContactLname", "Opportunity"));
            Element(driver, Control("NewContactLname", "Opportunity")).SendKeys(s);

            MoveToElement(driver, Control("NewLanguageInput", "Opportunity"));
            Element(driver, Control("NewLanguageInput", "Opportunity")).SendKeys("UK english");

            ThinkTime(3);

            MoveToElement(driver, Control("NewLanguageSelect", "Opportunity"));
            Element(driver, Control("NewLanguageSelect", "Opportunity")).Click();

            MoveToElement(driver, Control("NewContactSaveButton", "Opportunity"));
            Element(driver, Control("NewContactSaveButton", "Opportunity")).Click();

            ThinkTime(4);

            //Create new account.

            WaitUntil(driver, Control("NewAccountInput", "Opportunity"), 30);
            MoveToElement(driver, Control("NewAccountInput", "Opportunity"));
            Element(driver, Control("NewAccountInput", "Opportunity")).Click();

            MoveToElement(driver, Control("NewAccountButton", "Opportunity"));
            Element(driver, Control("NewAccountButton", "Opportunity")).Click();

            ThinkTime(3);

            MoveToElement(driver, Control("NewCompanyNameInput", "Opportunity"));
            Element(driver, Control("NewCompanyNameInput", "Opportunity")).SendKeys(s);

            MoveToElement(driver, Control("NewContactSaveButton", "Opportunity"));
            Element(driver, Control("NewContactSaveButton", "Opportunity")).Click();

            ThinkTime(3);


            scrollDownOpportunityEnterprise(driver, testInReport, testName, testDataIteration);

            ThinkTime(3);

            //New Channel

            MoveToElement(driver, Control("NewChannelInput", "Opportunity"));
            Element(driver, Control("NewChannelInput", "Opportunity")).SendKeys("Centre: Walk-In");
            ThinkTime(3);
            MoveToElement(driver, Control("NewChannelSelect", "Opportunity"));
            Element(driver, Control("NewChannelSelect", "Opportunity")).Click();

            ThinkTime(3);

            //New Major Source

            MoveToElement(driver, Control("NewMajorSourceInput", "Opportunity"));
            Element(driver, Control("NewMajorSourceInput", "Opportunity")).SendKeys("Existing Customer");
            ThinkTime(5);
            MoveToElement(driver, Control("NewMajorSourceSelect", "Opportunity"));
            Element(driver, Control("NewMajorSourceSelect", "Opportunity")).Click();

            ThinkTime(3);

            //Handle Script Error

            if (Elements(driver, Control("HandleScriptError", "Opportunity")) > 0)
            {
                Element(driver, Control("HandleScriptError", "Opportunity")).Click();
            }
            //New Minor Source

            ThinkTime(3);
            MoveToElement(driver, Control("NewMinorSourceInput", "Opportunity"));
            Element(driver, Control("NewMinorSourceInput", "Opportunity")).SendKeys("Acquisition");
            ThinkTime(5);
            MoveToElement(driver, Control("NewMinorSourceSelect", "Opportunity"));
            Element(driver, Control("NewMinorSourceSelect", "Opportunity")).Click();

            saveFooter(driver, testInReport, testName, testDataIteration);
        }

        public void Enterrequestedtourdetails(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string date, string datevalue)
        {
            scrollDownOpportunityEnterprise(driver, testInReport, testName, testDataIteration);
            scrollDownOpportunityEnterprise(driver, testInReport, testName, testDataIteration);
            //  scrollDownOpportunityEnterprise(driver, testInReport, testName, testDataIteration);
            ThinkTime(2);
            WaitUntil(driver, Control("OpportunityFormField", date, "Opportunity"), 180);
            ActionsDoubleClick(driver, Control("OpportunityFormField", date, "Opportunity"));
            ThinkTime(2);
            Element(driver, Control("OpportunityFormField", date, "Opportunity")).SendKeys(datevalue);
            saveFooter(driver, testInReport, testName, testDataIteration);
            ThinkTime(4);

            // Refresh the page
            SelectanyOpportunitybutton(driver, testInReport, testName, testDataIteration, "Refresh");
            ThinkTime(4);
            scrollUpPage(driver, testInReport, testDataIteration, testName);
            scrollUpPage(driver, testInReport, testDataIteration, testName);
            scrollUpPage(driver, testInReport, testDataIteration, testName);

            if (Elements(driver, Control("Timelineverification", "Opportunity")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Timeline verification", "Timeline verification");

            }
            else
            {
                Assert.Fail("Timeline for book a tour not created");
            }
        }


        public void VerifyOpportunitydetails(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string Probability, string CloseDate)
        {
            ThinkTime(15);

            scrollDownOpportunity(driver, testInReport, testName, testDataIteration);
            scrollDownOpportunity(driver, testInReport, testName, testDataIteration);

            int Prob = Elements(driver, Control("ProbabilityFormField", Probability, "Opportunity"));
            int date = Elements(driver, Control("CloseDateFormField", CloseDate, "Opportunity"));

            if (Prob > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Probability field is  displayed", "Opportunity detail fields - Probability field not present");
                //Assert.Fail("Probability field is not editable");
                //AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Probability field is  displayed", "Opportunity detail fields - Probability field not present");


            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Probability field is not displayed", "Opportunity detail fields - Probability field displayed");
                Assert.Fail("Probability field is not editable");
            }

            if (date > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Date field is  displayed", "Opportunity detail field - Close date present");

            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Date field is not displayed", "Opportunity detail field - Close date not displayed");
                Assert.Fail("Date field is not editable");
            }


        }






        //Generic function to verify opportunity fields are ediatble
        public void VerifyOpportunityfieldsareeditable(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string AltContact)
        {
            string topic = AltContact + DateTime.Now;
            ThinkTime(15);

            scrollDownOpportunityPage(driver, testInReport, testName, testDataIteration);
            scrollDownOpportunityPage(driver, testInReport, testName, testDataIteration);

            //WaitUntil(driver, Control("OpportunityFormField", topicfield, "Opportunity"), 30);
            Element(driver, Control("AltContact", "Opportunity")).SendKeys(Keys.Control + "a");
            Element(driver, Control("AltContact", "Opportunity")).SendKeys(Keys.Delete);

            ThinkTime(3);
            Element(driver, Control("AltContact", "Opportunity")).SendKeys(topic);
            saveFooter(driver, testInReport, testName, testDataIteration);
            if (!Element(driver, Control("AltContact", "Opportunity")).GetAttribute("value").Equals(topic))
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Opportunity is not editable", "Editable");
                Assert.Fail("Opportunity is not editable");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Opportunity is editable", "Editable");
            }
        }

        //To Verify The orange colour of booked tour slot by SA

        public void VerifyOrangecolourofbookedtour(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string AltContact)

        {
            WaitUntil(driver, Control("PreviousDateColor", "Generic"), 180);
            MoveToElement(driver, Control("PreviousDateColor", "Generic"));
            String color = Element(driver, Control("PreviousDateColor", "Generic")).GetCssValue("background-color");

            ConvertColor(driver, testInReport, testDataIteration, testName, color);


        }

        public void NewActivity(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(10);
            WaitUntil(driver, Control("NewActivity", "Opportunity"), 360);
            Element(driver, Control("NewActivity", "Opportunity")).Click();


            WaitUntil(driver, Control("PhoneCallOption", "Opportunity"), 360);
            Element(driver, Control("PhoneCallOption", "Opportunity")).Click();
            ThinkTime(8);
        }

        public String QuickCreatePhoneCallActivityFromOppo(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string SubjectValue, string duedate)
        {
            string Time = DateTime.UtcNow.ToString("yyyy-MM-dd HH:mm:ss.fff", CultureInfo.InvariantCulture);
            string Subject = SubjectValue + Time;
            ThinkTime(2);
            WaitUntil(driver, Control("Subjectfield", "Opportunity"), 60);
            Element(driver, Control("Subjectfield", "Opportunity")).Click();
            ThinkTime(2);
            Element(driver, Control("Subjectfield", "Opportunity")).SendKeys(Subject);


            // Enter Call to:

            string leadname = Element(driver, Control("GetCallTovalue", "Opportunity")).GetAttribute("innerText");

            if (leadname == Subject)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Call To field is Lead name", "Call To field: lead name");
            }



            WaitUntil(driver, Control("CallOutCome", "Opportunity"), 60);
            MoveToElement(driver, Control("CallOutCome", "Opportunity"));
            Element(driver, Control("CallOutCome", "Opportunity")).Click();
            ThinkTime(4);
            Element(driver, Control("CallOutComeOption", "Opportunity")).Click();
            // Select(Element(driver, Control("CallOutCome", "Opportunity"))).SelectByValue("Not Reachable / Left Voicemail");
            ThinkTime(10);

            scrollDownQuickCreatePhonecall(driver, testInReport, testName, testDataIteration);


            ThinkTime(3);


            //Select due date
            WaitUntil(driver, Control("DateDue", "phoneCall"), 360);
            MoveToElement(driver, Control("DateDue", "phoneCall"));
            ActionsClick(driver, Control("DateDue", "phoneCall"));
            ThinkTime(3);
            ActionsClick(driver, Control("DateDue", "phoneCall"));
            ThinkTime(3);
            Element(driver, Control("DateDue", "phoneCall")).SendKeys(duedate);
            ThinkTime(8);
            // ThinkTime(2);
            Element(driver, Control("Saveregardingaccount", "Opportunity")).Click();
            ThinkTime(3);

            //WaitUntil(driver, Control("SaveAndClose", "Opportunity"), 60);
            //Element(driver, Control("SaveAndClose", "Opportunity")).Click();
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Phone call created", "Phone call created");
            ThinkTime(5);

            return Subject;
        }

        public void FilterActivities(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {

            WaitUntil(driver, Control("SubjectFilter", "Opportunity"), 360);
            Element(driver, Control("SubjectFilter", "Opportunity")).Click();

            WaitUntil(driver, Control("SubjectFilterValue", "Opportunity"), 360);
            MoveToElement(driver, Control("SubjectFilterValue", "Opportunity"));
            Element(driver, Control("SubjectFilterValue", "Opportunity")).Click();

        }
        public void CreateContinEmail(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {

        }
        public void VerifyReassignNote(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {

            ThinkTime(2);

            WaitUntil(driver, Control("VerifyNote", "CommonObj"), 30);
            string Reassignnote = Element(driver, Control("VerifyNote", "CommonObj")).Text;

            if (Reassignnote.StartsWith("Reassigned from:"))
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Correct Reassigned note", "Correct Reassigned note");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "InCorrect Reassigned note", "InCorrect Reassigned note");
                Assert.Fail("InCorrect Reassigned note");
            }
        }

        //To select any buttons in opportunity page header
        public void SelectanyOpportunitybutton(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string option)
        {
            ThinkTime(5);
            WaitUntil(driver, Control("FieldVerification2", option, "Opportunity"), 120);

            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            int count = Elements(driver, Control("FieldVerification2", option, "Opportunity"));
            if (count > 0)
            {
                ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
                WaitUntil(driver, Control("FieldVerification2", option, "Opportunity"), 180);
                Element(driver, Control("FieldVerification2", option, "Opportunity")).Click();
                ThinkTime(3);
                // AddLog(driver, testInReport, testName, testDataIteration, "Pass",  "Selection is  Working Successfully",  "Click Verification");

            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Button click failed", "Button Click Verification");
                //Assert.Fail(option + " Funtionality not Working");
            }


            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);

        }


        //Method to select activity header.
        public void SelectanyActivityHeaderbutton(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string option)
        {
            ThinkTime(3);

            int count = Elements(driver, Control("FieldVerification2", option, "Opportunity"));
            if (count > 0)
            {
                ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
                WaitUntil(driver, Control("FieldVerification2", option, "Opportunity"), 180);
                Element(driver, Control("FieldVerification2", option, "Opportunity")).Click();
                ThinkTime(10);
                // AddLog(driver, testInReport, testName, testDataIteration, "Pass",  "Selection is  Working Successfully",  "Click Verification");

            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Button click failed", "Button Click Verification");
                //Assert.Fail(option + " Funtionality not Working");
            }

        }



        //To select any buttons in opportunity page header
        public void SelectanyOpportunitybutton1(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string option)
        {
            ThinkTime(3);
            WaitUntil(driver, Control("FieldVerification2", option, "Opportunity"), 360);
            ThinkTime(5);
            if (Elements(driver, Control("Scvripterrorwindow", "Opportunity")) > 0)
            {
                ThinkTime(2);
                Element(driver, Control("Scripterrorhandle", "Opportunity")).Click();

            }
            //ThinkTime(10);
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            int count = Elements(driver, Control("FieldVerification2", option, "Opportunity"));
            if (count > 0)
            {
                ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
                ThinkTime(3);
                driver.Navigate().Refresh();
                WaitUntil(driver, Control("FieldVerification2", option, "Opportunity"), 180);
                Element(driver, Control("FieldVerification2", option, "Opportunity")).Click();
                ThinkTime(10);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", option + "Selection is  Working Successfully", option + "Click Verification");

            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", option + "Button click failed", option + "Button Click Verification");
                //Assert.Fail(option + " Funtionality not Working");
            }


            if (Elements(driver, Control("Scvripterrorwindow", "Opportunity")) > 0)
            {
                ThinkTime(2);
                Element(driver, Control("Scripterrorhandle", "Opportunity")).Click();

            }

        }
        public void verifyOppRecordCreatedInD365viaMSform(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string CompanyName1)
        {
            WaitUntil(driver, Control("VerifyRecord", "36.1_Dashboard"), 360);
            string RecordCreated = Element(driver, Control("VerifyRecord", "36.1_Dashboard")).Text;
            Console.WriteLine(RecordCreated);
            Console.WriteLine(CompanyName1);
            if (CompanyName1 == RecordCreated)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Opportunity is created in Dynamics from IT Sales form", "Opportunity Creation");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Opportunity is not created in Dynamics from IT Sales form", "Opportunity Creation");

            }
            WaitUntil(driver, Control("OpenRecord", "36.1_Dashboard"), 360);
            ActionsDoubleClick(driver, Control("OpenRecord", "36.1_Dashboard"));
            ThinkTime(10);
        }

        public void SelectOpportunityheader(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string option, string entityheader)
        {


            ThinkTime(10);
            if (Elements(driver, Control("Oppheader", option, "Opportunity")) == 0)
            {

                MoveToElement(driver, Control("Opportunitymorebutton", entityheader, "Opportunity"));
                Element(driver, Control("Opportunitymorebutton", entityheader, "Opportunity")).Click();
                WaitUntil(driver, Control("Oppheader", option, "Opportunity"), 180);
                Element(driver, Control("Oppheader", option, "Opportunity")).Click();
                ThinkTime(10);
                //AddLog(driver, testInReport, testName, testDataIteration, "Pass", option + "Selection is  Working Successfully", option + "Click Verification");

            }
            else
            {
                WaitUntil(driver, Control("Oppheader", option, "Opportunity"), 360);
                MoveToElement(driver, Control("Oppheader", option, "Opportunity"));
                ThinkTime(8);
                Element(driver, Control("Oppheader", option, "Opportunity")).Click();
                ThinkTime(10);
                // AddLog(driver, testInReport, testName, testDataIteration, "Pass", option + "Selection is  Working Successfully", option + "Click Verification");


                // AddLog(driver, testInReport, testName, testDataIteration, "Fail", option + "Button click failed", option + "Button Click Verification");
                //Assert.Fail(option + " Funtionality not Working");

            }


            //if (Elements(driver, Control("Scvripterrorwindow", "Opportunity")) > 0)
            //{
            //    ThinkTime(2);
            //    Element(driver, Control("Scripterrorhandle", "Opportunity")).Click();

            //}

        }

        public void QualifyLeadandMatchingPopuphandle(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string option, string entityheader)
        {
            if (Elements(driver, Control("ScriptDialg", "Opportunity")) > 0)
            {
                Element(driver, Control("HandleScriptError", "Opportunity")).Click();
                ThinkTime(3);
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "No Script error present", "No Script error present");
            }

            ThinkTime(10);
            if (Elements(driver, Control("Oppheader", option, "Opportunity")) == 0)
            {

                MoveToElement(driver, Control("Opportunitymorebutton", entityheader, "Opportunity"));
                Element(driver, Control("Opportunitymorebutton", entityheader, "Opportunity")).Click();
                WaitUntil(driver, Control("Oppheader", option, "Opportunity"), 180);
                Element(driver, Control("Oppheader", option, "Opportunity")).Click();
                ThinkTime(10);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", option + "Selection is  Working Successfully", option + "Click Verification");

            }
            else
            {
                MoveToElement(driver, Control("Oppheader", option, "Opportunity"));
                ThinkTime(3);
                Element(driver, Control("Oppheader", option, "Opportunity")).Click();
                ThinkTime(10);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", option + "Selection is  Working Successfully", option + "Click Verification");
            }

            ThinkTime(5);

            try
            {
                if (Elements(driver, Control("Continuebutton", "Opportunity")) > 0)
                {
                    Element(driver, Control("Continuebutton", "Opportunity")).Click();
                }

            }
            catch (Exception e)
            {

            }




            //driver.SwitchTo().DefaultContent();


            //ElementHighlight(driver, Control("MatchingLeadBox", "Generic"));

            //if (Elements(driver, Control("MatchingBoxContainer", "Generic")) > 0)
            //{
            //    WaitUntil(driver, Control("MatchingLeadBox", "Generic"), 180);
            //    Element(driver, Control("MatchingLeadBox", "Generic")).Click();
            //    ThinkTime(3);
            //    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Matching Popup handled", "Ignore and save closed");
            //}

            //else
            //{
            //    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "no popup handled", "Ignore and save closed");
            //}

            //if (Elements(driver, Control("Scvripterrorwindow", "Opportunity")) > 0)
            //{
            //    ThinkTime(2);
            //    Element(driver, Control("Scripterrorhandle", "Opportunity")).Click();

            //}

        }

        public void VerifyQualifyButton(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string option)
        {
            if (Elements(driver, Control("ScriptDialg", "Opportunity")) > 0)
            {
                Element(driver, Control("HandleScriptError", "Opportunity")).Click();
                ThinkTime(3);
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "No Script error present", "No Script error present");
            }

            ThinkTime(10);
            if (Elements(driver, Control("Oppheader", option, "Opportunity")) == 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", option + "is not present", option + "Click Verification");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "fail", option + "is  present", option + "Click Verification");

                ThinkTime(10);
                Assert.Fail(option + " is visible");


                // AddLog(driver, testInReport, testName, testDataIteration, "Fail", option + "Button click failed", option + "Button Click Verification");
                //Assert.Fail(option + " Funtionality not Working");

            }

            if (Elements(driver, Control("Scvripterrorwindow", "Opportunity")) > 0)
            {
                ThinkTime(2);
                Element(driver, Control("Scripterrorhandle", "Opportunity")).Click();

            }
        }
        public void ClickContinue(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {
            if (Elements(driver, Control("Continuebutton", "Opportunity")) > 0)
            {
                Element(driver, Control("Continuebutton", "Opportunity")).Click();
                ThinkTime(8);
            }

        }

        public void verifytimelineemail(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {
            ThinkTime(3);
            // MoveToElement(driver, Control("Verifyreferalemail", "Opportunity"));
            if (Elements(driver, Control("Verifyreferalemail", "Opportunity")) == 0)
            {
                scrollDownOpportunityEnterprise(driver, testInReport, testDataIteration, testName);
                scrollDownOpportunityEnterprise(driver, testInReport, testDataIteration, testName);
                scrollDownOpportunityEnterprise(driver, testInReport, testDataIteration, testName);
                scrollDownOpportunityEnterprise(driver, testInReport, testDataIteration, testName);

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Referal email present", "Referal email present");

            }

            if (Elements(driver, Control("Verifyreferalemail", "Opportunity")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Referal email present", "Referal email present");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "No referal email present", "No referal email present");

            }
        }

        public void OpenPhonecallactivitytimeline(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {
            //scrollDownOpportunityPage(driver, testInReport, testName, testDataIteration);

            //scrollDownOpportunityPage(driver, testInReport, testName, testDataIteration);

            //scrollDownOpportunityPage(driver, testInReport, testName, testDataIteration);

            //scrollDownOpportunityPage(driver, testInReport, testName, testDataIteration);


            for (int i = 0; i < 5;)
            {
                string a = i.ToString();
                int num = Elements(driver, Control("Openphoneactivityfromtimeline", a, "Opportunity"));
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Phonecall actiivty opened", "Phonecall activity opened");

                if (num > 0)
                {
                    Element(driver, Control("Openphoneactivityfromtimeline", a, "Opportunity")).Click();
                    ThinkTime(2);
                    MoveToElement(driver, Control("Openphoneactivityfromtimeline", a, "Opportunity"));
                    Element(driver, Control("ClickOpenrecord", a, "Opportunity")).Click();
                    ThinkTime(8);
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Phonecall actiivty opened", "Phonecall activity opened");
                }
                else
                {
                    i++;
                }
            }
            //ThinkTime(15);
            //MoveToElement(driver, Control("Phonecallactivity", "Opportunity"));
            //ElementHighlight(driver, Control("Phonecallactivity", "Opportunity"));
            //ThinkTime(5);
            //MoveToElement(driver, Control("Openphoneactivityfromtimeline", "Opportunity"));

            //WaitUntil(driver, Control("Openphoneactivityfromtimeline", "Opportunity"), 30);
            //ThinkTime(5);
            //JSClick(driver, Control("Openphoneactivityfromtimeline", "Opportunity"));
            //ThinkTime(8);

        }


        public void BookTourBtn(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string option)
        {



            ThinkTime(15);
            if (Elements(driver, Control("ScriptDialg", "Opportunity")) > 0)
            {
                Element(driver, Control("HandleScriptError", "Opportunity")).Click();
                ThinkTime(3);
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "No Script error present", "No Script error present");
            }
            ThinkTime(4);
            WaitUntil(driver, Control("BookTrButton1", "BookATour"), 60);
            MoveToElement(driver, Control("BookTrButton1", option, "BookATour"));
            ElementHighlight(driver, Control("BookTrButton1", option, "BookATour"));
            ThinkTime(2);
            Element(driver, Control("BookTrButton1", option, "BookATour")).Click();
            ThinkTime(30);
            if (Elements(driver, Control("ScriptDialg", "Opportunity")) > 0)
            {
                Element(driver, Control("HandleScriptError", "Opportunity")).Click();
                ThinkTime(3);
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "No Script error present", "No Script error present");
            }


        }
        //method to select and verify Customer field for IT Sales users.

        public void SelectAndVerifyCustomerFieldITSales(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, String Topic, string Customer, string country)
        {
            //Select Topic field.

            WaitUntil(driver, Control("CustomerTopic", "Opportunity"), 30);
            MoveToElement(driver, Control("CustomerTopic", "Opportunity"));
            Element(driver, Control("CustomerTopic", "Opportunity")).SendKeys(Keys.Control + "a");
            Element(driver, Control("CustomerTopic", "Opportunity")).SendKeys(Keys.Delete);
            Element(driver, Control("CustomerTopic", "Opportunity")).SendKeys(Topic);
            Element(driver, Control("Testclick", "Opportunity")).Click();

            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Topic Field updated Successfully", "Topic Field Verification");

            ThinkTime(3);
            ThinkTime(10);
            scrollDownOpportunityPage(driver, testInReport, testName, testDataIteration);

            //Select Topic Customer.

            if (Elements(driver, Control("CustomerFieldVerification", "Opportunity")) > 0)
            {
                WaitUntil(driver, Control("CustomerFieldVerification", "Opportunity"), 30);
                MoveToElement(driver, Control("CustomerFieldVerification", "Opportunity"));
                Element(driver, Control("CustomerFieldDeleteButton", "Opportunity")).Click();

                WaitUntil(driver, Control("CustomerFieldSelect", "Opportunity"), 30);
                MoveToElement(driver, Control("CustomerFieldSelect", "Opportunity"));
                Element(driver, Control("CustomerFieldSelect", "Opportunity")).SendKeys(Customer);

                WaitUntil(driver, Control("CustomerFieldropdown", Customer, "Opportunity"), 30);
                MoveToElement(driver, Control("CustomerFieldropdown", Customer, "Opportunity"));
                Element(driver, Control("CustomerFieldropdown", Customer, "Opportunity")).Click();

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Customer Field updated Successfully", "Customer Field Verification");

            }

            else
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Customer Field updated Successfully", "Customer Field Verification");

            }

            //ThinkTime(10);
            //scrollDownOpportunityPage(driver, testInReport, testName, testDataIteration);

            //Select Topic Country.
            /*
                        if (Elements(driver, Control("CountryFieldVerification", "Opportunity")) > 0)
                        {
                            WaitUntil(driver, Control("CountryFieldVerification", "Opportunity"), 30);
                            MoveToElement(driver, Control("CountryFieldVerification", "Opportunity"));
                            ThinkTime(10);
                            //                Element(driver, Control("CountryFieldDeleteButton", "Opportunity")).Click();

                            WaitUntil(driver, Control("CountryFieldSelect1", "Opportunity"), 30);
                            MoveToElement(driver, Control("CountryFieldSelect1", "Opportunity"));
                            ThinkTime(10);
                            Element(driver, Control("CountryFieldSelect1", "Opportunity")).SendKeys(country);

                            WaitUntil(driver, Control("CountryFieldropdown", country, "Opportunity"), 30);
                            MoveToElement(driver, Control("CountryFieldropdown", country, "Opportunity"));
                            Element(driver, Control("CountryFieldropdown", country, "Opportunity")).Click();

                            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Country Field updated Successfully", "Country Field Verification");

                        }

                        else
                        {
                            WaitUntil(driver, Control("CountryFieldSelect", "Opportunity"), 30);
                            MoveToElement(driver, Control("CountryFieldSelect", "Opportunity"));
                            Element(driver, Control("CountryFieldSelect", "Opportunity")).SendKeys(country);

                            WaitUntil(driver, Control("CountryFieldropdown", country, "Opportunity"), 30);
                            MoveToElement(driver, Control("CountryFieldropdown", country, "Opportunity"));
                            Element(driver, Control("CountryFieldropdown", country, "Opportunity")).Click();

                            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Country Field updated Successfully", "Country Field Verification");

                        }*/

            saveFooter(driver, testInReport, testName, testDataIteration);
        }

        public void SelectAndVerifyCustomerFieldITSales1(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, String Topic, string Customer, string country)
        {
            //Select Topic field.

            WaitUntil(driver, Control("CustomerTopic", "Opportunity"), 30);
            MoveToElement(driver, Control("CustomerTopic", "Opportunity"));
            Element(driver, Control("CustomerTopic", "Opportunity")).SendKeys(Keys.Control + "a");
            Element(driver, Control("CustomerTopic", "Opportunity")).SendKeys(Keys.Delete);
            Element(driver, Control("CustomerTopic", "Opportunity")).SendKeys(Topic);
            Element(driver, Control("Testclick", "Opportunity")).Click();

            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Topic Field updated Successfully", "Topic Field Verification");

            ThinkTime(3);
            ThinkTime(10);
            scrollDownOpportunityPage(driver, testInReport, testName, testDataIteration);

            //Select Topic Customer.

            if (Elements(driver, Control("CustomerFieldVerification1", "Opportunity")) > 0)
            {
                WaitUntil(driver, Control("CustomerFieldVerification1", "Opportunity"), 30);
                MoveToElement(driver, Control("CustomerFieldVerification1", "Opportunity"));
                Element(driver, Control("CustomerFieldDeleteButton", "Opportunity")).Click();

                WaitUntil(driver, Control("CustomerFieldSelect", "Opportunity"), 30);
                MoveToElement(driver, Control("CustomerFieldSelect", "Opportunity"));
                Element(driver, Control("CustomerFieldSelect", "Opportunity")).Click();
                Element(driver, Control("CustomerFieldSelect", "Opportunity")).SendKeys(Customer);

                WaitUntil(driver, Control("DropDownResultSelect", "Opportunity"), 30);
                MoveToElement(driver, Control("DropDownResultSelect", "Opportunity"));
                Element(driver, Control("DropDownResultSelect", "Opportunity")).Click();

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Customer Field updated Successfully", "Customer Field Verification");

            }

            else
            {

                WaitUntil(driver, Control("CustomerFieldSelect", "Opportunity"), 360);
                MoveToElement(driver, Control("CustomerFieldSelect", "Opportunity"));
                Element(driver, Control("CustomerFieldSelect", "Opportunity")).SendKeys(Customer);

                WaitUntil(driver, Control("CustomerFieldropdown", Customer, "Opportunity"), 30);
                MoveToElement(driver, Control("CustomerFieldropdown", Customer, "Opportunity"));
                Element(driver, Control("CustomerFieldropdown", Customer, "Opportunity")).Click();
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Customer Field updated Successfully", "Customer Field Verification");

            }

            //ThinkTime(10);
            //scrollDownOpportunityPage(driver, testInReport, testName, testDataIteration);

            //Select Topic Country.
            /*
                        if (Elements(driver, Control("CountryFieldVerification", "Opportunity")) > 0)
                        {
                            WaitUntil(driver, Control("CountryFieldVerification", "Opportunity"), 30);
                            MoveToElement(driver, Control("CountryFieldVerification", "Opportunity"));
                            ThinkTime(10);
                            //                Element(driver, Control("CountryFieldDeleteButton", "Opportunity")).Click();

                            WaitUntil(driver, Control("CountryFieldSelect1", "Opportunity"), 30);
                            MoveToElement(driver, Control("CountryFieldSelect1", "Opportunity"));
                            ThinkTime(10);
                            Element(driver, Control("CountryFieldSelect1", "Opportunity")).SendKeys(country);

                            WaitUntil(driver, Control("CountryFieldropdown", country, "Opportunity"), 30);
                            MoveToElement(driver, Control("CountryFieldropdown", country, "Opportunity"));
                            Element(driver, Control("CountryFieldropdown", country, "Opportunity")).Click();

                            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Country Field updated Successfully", "Country Field Verification");

                        }

                        else
                        {
                            WaitUntil(driver, Control("CountryFieldSelect", "Opportunity"), 30);
                            MoveToElement(driver, Control("CountryFieldSelect", "Opportunity"));
                            Element(driver, Control("CountryFieldSelect", "Opportunity")).SendKeys(country);

                            WaitUntil(driver, Control("CountryFieldropdown", country, "Opportunity"), 30);
                            MoveToElement(driver, Control("CountryFieldropdown", country, "Opportunity"));
                            Element(driver, Control("CountryFieldropdown", country, "Opportunity")).Click();

                            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Country Field updated Successfully", "Country Field Verification");

                        }*/

            saveFooter(driver, testInReport, testName, testDataIteration);
            ThinkTime(10);
        }
        //Generic method tho click on New Button
        public void SelectNewTab(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {
            ThinkTime(10);
            WaitUntil(driver, Control("NewTabOpportunity", "Opportunity"), 60);
            Element(driver, Control("NewTabOpportunity", "Opportunity")).Click();
            ThinkTime(5);

        }
        public void createleaddirectsales(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string LastName, string Email, string BPhone, string Source, string MajorSource, string MinorSource, string now, string contactcondition, string accountcondition, string newcontactname, string Language, string accountname, string RecomendedBussinessCenre)
        {
            // Click on New button
            ThinkTime(2);
            WaitUntil(driver, Control("NewTabOpportunity", "Opportunity"), 30);
            MoveToElement(driver, Control("NewTabOpportunity", "Opportunity"));
            Element(driver, Control("NewTabOpportunity", "Opportunity")).Click();
            ThinkTime(3);

            // Enter Lastname 
            WaitUntil(driver, Control("LeadLname", "Generic"), 30);
            MoveToElement(driver, Control("LeadLname", "Generic"));
            Element(driver, Control("LeadLname", "Generic")).SendKeys(Keys.Control + "a");
            Element(driver, Control("LeadLname", "Generic")).SendKeys(Keys.Delete);
            Element(driver, Control("LeadLname", "Generic")).SendKeys(LastName);

            Element(driver, Control("Lastnameclick", "Generic")).Click();

            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Last Name Field updated Successfully", "Last Name Field Verification");

            ThinkTime(3);

            //Select Email verification.

            WaitUntil(driver, Control("LeadEmail", "Generic"), 30);
            MoveToElement(driver, Control("LeadEmail", "Generic"));
            Element(driver, Control("LeadEmail", "Generic")).Click();
            ThinkTime(1);
            Element(driver, Control("LeadEmail", "Generic")).SendKeys(Keys.Control + "a");
            Element(driver, Control("LeadEmail", "Generic")).SendKeys(Keys.Delete);
            ThinkTime(2);
            Element(driver, Control("LeadEmail", "Generic")).SendKeys(Email);
            ThinkTime(5);

            if (Elements(driver, Control("ScriptDialg", "Opportunity")) > 0)
            {
                Element(driver, Control("HandleScriptError", "Opportunity")).Click();
                ThinkTime(3);
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "No Script error present", "No Script error present");

            }

            //  Element(driver, Control("Emialclick", "Generic")).Click();

            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Email Field updated Successfully", "Email Field Verification");

            ThinkTime(3);
            //scrollDownOpportunityEnterprise(driver, testInReport, testDataIteration, testName);
            scrollDownOpportunityEnterpriseCust(driver, testInReport, testDataIteration, testName, "100");
            ThinkTime(3);
            // Select contact
            if (contactcondition == "NewContact")
            {
                ThinkTime(2);
                //Element(driver, Control("LeadContactClick", "Generic")).Click();
                //ThinkTime(2);
                //WaitUntil(driver, Control("ContactInputField", "Generic"), 30);
                //MoveToElement(driver, Control("ContactInputField", "Generic"));
                //ElementHighlight(driver, Control("ContactInputField", "Generic"));
                //ThinkTime(10);

                //Element(driver, Control("ContactSearchButton", "Generic")).Click();

                ////create new contact.
                //ThinkTime(2);
                //WaitUntil(driver, Control("NewContactInput", "Opportunity"), 60);
                //MoveToElement(driver, Control("NewContactInput", "Opportunity"));
                //JSClick(driver, Control("NewContactInput", "Opportunity"));
                //ThinkTime(4);
                //ScriptErrorExcep(driver, testInReport, testName, testDataIteration);

                //WaitUntil(driver, Control("NewContactButton", "Opportunity"), 60);
                //MoveToElement(driver, Control("NewContactButton", "Opportunity"));
                //Element(driver, Control("NewContactButton", "Opportunity")).Click();
                //ThinkTime(2);


                ////create new contact.
                //ThinkTime(2);
                //WaitUntil(driver, Control("NewContactInput", "Opportunity"), 60);
                //MoveToElement(driver, Control("NewContactInput", "Opportunity"));
                //JSClick(driver, Control("NewContactInput", "Opportunity"));
                //ThinkTime(2);
                //ScriptErrorExcep(driver, testInReport, testName, testDataIteration);

                //WaitUntil(driver, Control("NewContactButton", "Opportunity"), 60);
                //MoveToElement(driver, Control("NewContactButton", "Opportunity"));
                //Element(driver, Control("NewContactButton", "Opportunity")).Click();
                //ThinkTime(2);


                //ThinkTime(2);
                //ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
                //ThinkTime(2);
                //WaitUntil(driver, Control("Leadcreatecontactlastname", "Opportunity"), 30);
                //MoveToElement(driver, Control("Leadcreatecontactlastname", "Opportunity"));
                //Element(driver, Control("Leadcreatecontactlastname", "Opportunity")).Click();
                //Element(driver, Control("Leadcreatecontactlastname", "Opportunity")).SendKeys(newcontactname);
                //ThinkTime(2);
                //WaitUntil(driver, Control("NewLanguageInput", "Opportunity"), 60);
                //MoveToElement(driver, Control("NewLanguageInput", "Opportunity"));
                //Element(driver, Control("NewLanguageInput", "Opportunity")).Click();
                //Element(driver, Control("NewLanguageInput", "Opportunity")).SendKeys(Keys.Control + "a");
                //Element(driver, Control("NewLanguageInput", "Opportunity")).SendKeys(Keys.Delete);
                //Element(driver, Control("NewLanguageInput", "Opportunity")).Clear();

                //ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
                //WaitUntil(driver, Control("NewLanguageInput", "Opportunity"), 30);
                //MoveToElement(driver, Control("NewLanguageInput", "Opportunity"));
                //Element(driver, Control("NewLanguageInput", "Opportunity")).Click();
                //Element(driver, Control("NewLanguageInput", "Opportunity")).SendKeys(Keys.Control + "a");
                //Element(driver, Control("NewLanguageInput", "Opportunity")).SendKeys(Keys.Delete);
                //Element(driver, Control("NewLanguageInput", "Opportunity")).SendKeys("UK english");
                //ThinkTime(2);
                //WaitUntil(driver, Control("ITSalesCustomer", "Opportunity"), 30);
                //MoveToElement(driver, Control("ITSalesCustomer", "Opportunity"));
                //ThinkTime(5);
                //Element(driver, Control("ITSalesCustomer", "Opportunity")).Click();
                //ThinkTime(2);
                //WaitUntil(driver, Control("Quickcreatesave", "Opportunity"), 30);
                //MoveToElement(driver, Control("Quickcreatesave", "Opportunity"));
                //Element(driver, Control("Quickcreatesave", "Opportunity")).Click();
                //ThinkTime(2);



                //MoveToElement(driver, Control("Contactlastname", "EnterpriseSales"));
                //Element(driver, Control("Contactlastname", "EnterpriseSales")).Click();
                //ThinkTime(2);
                //Element(driver, Control("Contactlastname", "EnterpriseSales")).SendKeys(Keys.Control + "a");
                //Element(driver, Control("Contactlastname", "EnterpriseSales")).SendKeys(Keys.Delete);
                //ThinkTime(2);
                //Element(driver, Control("Contactlastname", "EnterpriseSales")).SendKeys(newcontactname);
                //ThinkTime(5);


                //MoveToElement(driver, Control("ActivityCreateContactInput", "EnterpriseSales"));
                //Element(driver, Control("ActivityCreateContactInput", "EnterpriseSales")).Click();
                //ThinkTime(2);
                //Element(driver, Control("ActivityCreateContactInput", "EnterpriseSales")).SendKeys(Keys.Control + "a");
                //Element(driver, Control("ActivityCreateContactInput", "EnterpriseSales")).SendKeys(Keys.Delete);
                //ThinkTime(2);
                //Element(driver, Control("ActivityCreateContactInput", "EnterpriseSales")).SendKeys(Language);
                //ThinkTime(5);
                //MoveToElement(driver, Control("Languagedropdown", "EnterpriseSales"));
                //Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();

                //ThinkTime(3);

                //MoveToElement(driver, Control("NewContactSaveButton", "Opportunity"));
                //ActionsClick(driver, Control("SaveContactSales", "Opportunity"));
                //ThinkTime(1);
            }

            if (contactcondition == "ExistingContact")
            {
                //create new contact
                WaitUntil(driver, Control("Contactlookup", "Opportunity"), 30);
                MoveToElement(driver, Control("Contactlookup", "Opportunity"));
                Element(driver, Control("Contactlookup", "Opportunity")).Click();
                ThinkTime(2);
                Element(driver, Control("Contactlookup", "Opportunity")).SendKeys(Keys.Control + "a");
                Element(driver, Control("Contactlookup", "Opportunity")).SendKeys(Keys.Delete);
                ThinkTime(2);
                Element(driver, Control("Contactlookup", "Opportunity")).SendKeys(newcontactname);
                ThinkTime(6);
                MoveToElement(driver, Control("ITSalesCustomer", "Opportunity"));
                Element(driver, Control("ITSalesCustomer", "Opportunity")).Click();
                ThinkTime(2);
            }

            if (accountcondition == "NewAccount")
            {
                string NewAccountName = accountname + now;
                ThinkTime(15);
                WaitUntil(driver, Control("VerifyCompanyField", "Opportunity"), 30);
                MoveToElement(driver, Control("VerifyCompanyField", "Opportunity"));
                ActionsClick(driver, Control("VerifyCompanyField", "Opportunity"));
                ThinkTime(1);
                ActionsClick(driver, Control("Accountlookupinputfield", "Opportunity"));
                ThinkTime(1);
                ActionsClick(driver, Control("NewAccountButton", "Opportunity"));
                ThinkTime(15);
                MoveToElement(driver, Control("Addnewcompanyname", "Opportunity"));
                Element(driver, Control("Addnewcompanyname", "Opportunity")).Click();
                ThinkTime(2);
                Element(driver, Control("Addnewcompanyname", "Opportunity")).SendKeys(Keys.Control + "a");
                Element(driver, Control("Addnewcompanyname", "Opportunity")).SendKeys(Keys.Delete);
                ThinkTime(2);
                Element(driver, Control("Addnewcompanyname", "Opportunity")).SendKeys(NewAccountName);
                ThinkTime(6);
                Element(driver, Control("Citylabel", "Opportunity")).Click();
                ThinkTime(2);
                if (Elements(driver, Control("Saveandclosebutton", "Opportunity")) > 0)
                {
                    MoveToElement(driver, Control("Saveandclosebutton", "Opportunity"));
                    Element(driver, Control("Saveandclosebutton", "Opportunity")).Click();
                }
                else
                {
                    ThinkTime(4);
                    MoveToElement(driver, Control("NewContactSaveButton", "Opportunity"));
                    Element(driver, Control("NewContactSaveButton", "Opportunity")).Click();
                }


                ThinkTime(8);
            }

            if (accountcondition == "ExistingAccount")
            {

            }

            scrollDownOpportunityEnterpriseCust(driver, testInReport, testDataIteration, testName, "300");
            //Select Bussiness Phone verification.

            WaitUntil(driver, Control("LeadBussinessPhone", "Generic"), 30);
            MoveToElement(driver, Control("LeadBussinessPhone", "Generic"));
            Element(driver, Control("LeadBussinessPhone", "Generic")).Click();
            Element(driver, Control("LeadBussinessPhone", "Generic")).SendKeys(Keys.Control + "a");
            Element(driver, Control("LeadBussinessPhone", "Generic")).SendKeys(Keys.Delete);
            Element(driver, Control("LeadBussinessPhone", "Generic")).SendKeys(BPhone);
            Element(driver, Control("BussinessPhoneClick", "Generic")).Click();

            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Bussiness Phone Field updated Successfully", "Bussiness Phone Field Verification");

            //ThinkTime(3);
            //scrollDownOpportunityEnterpriseCust(driver, testInReport, testDataIteration, testName,"100");



            //MoveToElement(driver, Control("Languagedropdown","EnterpriseSales"));
            //Element(driver, Control("Languagedropdown","EnterpriseSales")).Click();


            //Select Source verification

            if (Elements(driver, Control("SourceVerification", "Generic")) > 0)
            {
                WaitUntil(driver, Control("SourceVerification", "Generic"), 30);
                MoveToElement(driver, Control("SourceVerification", "Generic"));
                Element(driver, Control("SourceDeleteButton", "Generic")).Click();

                WaitUntil(driver, Control("SourceInputField", "Generic"), 30);
                MoveToElement(driver, Control("SourceInputField", "Generic"));
                Element(driver, Control("SourceInputField", "Generic")).SendKeys(Source);

                WaitUntil(driver, Control("SelectSourceDropdown", "Generic"), 30);
                MoveToElement(driver, Control("SelectSourceDropdown", "Generic"));
                Element(driver, Control("SelectSourceDropdown", "Generic")).Click();

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Source Field updated Successfully", "Source Field Verification");

            }

            else
            {
                WaitUntil(driver, Control("SourceInputField", "Generic"), 30);
                MoveToElement(driver, Control("SourceInputField", "Generic"));
                Element(driver, Control("SourceInputField", "Generic")).SendKeys(Keys.Control + "a");
                Element(driver, Control("SourceInputField", "Generic")).SendKeys(Keys.Delete);

                Element(driver, Control("SourceInputField", "Generic")).SendKeys(Source);
                ThinkTime(5);
                WaitUntil(driver, Control("SelectSourceDropdown", "Generic"), 30);
                MoveToElement(driver, Control("SelectSourceDropdown", "Generic"));
                Element(driver, Control("SelectSourceDropdown", "Generic")).Click();

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Source Field updated Successfully", "Source Field Verification");

            }

            ThinkTime(5);
            //scrollDownOpportunityPage(driver, testInReport, testName, testDataIteration);


            //Select Major Source verification

            if (Elements(driver, Control("MajorSourceVerification", "Generic")) > 0)
            {
                WaitUntil(driver, Control("MajorSourceVerification", "Generic"), 30);
                MoveToElement(driver, Control("MajorSourceVerification", "Generic"));
                Element(driver, Control("MajorSourceDeleteButton", "Generic")).Click();

                WaitUntil(driver, Control("MajorSourceInputField", "Generic"), 30);
                MoveToElement(driver, Control("MajorSourceInputField", "Generic"));
                Element(driver, Control("MajorSourceInputField", "Generic")).SendKeys(MajorSource);
                ThinkTime(5);
                MoveToElement(driver, Control("Languagedropdown", "EnterpriseSales"));
                Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();

                //WaitUntil(driver, Control("SelectMSourceDropdown", "Generic"), 30);
                //MoveToElement(driver, Control("SelectMSourceDropdown", "Generic"));
                //Element(driver, Control("SelectMSourceDropdown", "Generic")).Click();

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Major Source Field updated Successfully", "Major Source Field Verification");

            }

            else
            {
                WaitUntil(driver, Control("MajorSourceInputField", "Generic"), 30);
                MoveToElement(driver, Control("MajorSourceInputField", "Generic"));
                Element(driver, Control("MajorSourceInputField", "Generic")).Clear();
                ThinkTime(3);
                Element(driver, Control("MajorSourceInputField", "Generic")).SendKeys(Keys.Control + "a");
                Element(driver, Control("MajorSourceInputField", "Generic")).SendKeys(Keys.Delete);
                Element(driver, Control("MajorSourceInputField", "Generic")).SendKeys(MajorSource);
                ThinkTime(5);
                MoveToElement(driver, Control("Languagedropdown", "EnterpriseSales"));
                Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();

                //WaitUntil(driver, Control("SelectMSourceDropdown", "Generic"), 30);
                //MoveToElement(driver, Control("SelectMSourceDropdown", "Generic"));
                //Element(driver, Control("SelectMSourceDropdown", "Generic")).Click();

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Major Source Field updated Successfully", "Major Source Field Verification");

            }


            //Select Minor Source verification

            if (Elements(driver, Control("MinorSourceVerification", "Generic")) > 0)
            {
                WaitUntil(driver, Control("MinorSourceVerification", "Generic"), 30);
                MoveToElement(driver, Control("MinorSourceVerification", "Generic"));
                Element(driver, Control("MinorSourceDeleteButton", "Generic")).Click();

                WaitUntil(driver, Control("MinorSourceInputButton", "Generic"), 30);
                MoveToElement(driver, Control("MinorSourceInputButton", "Generic"));
                Element(driver, Control("MinorSourceInputButton", "Generic")).SendKeys(Keys.Control + "a");
                Element(driver, Control("MinorSourceInputButton", "Generic")).SendKeys(Keys.Delete);

                // Element(driver, Control("Minorsourcelookup", "Generic")).Click();
                ThinkTime(2);
                Element(driver, Control("MinorSourceInputButton", "Generic")).SendKeys(MinorSource);
                ThinkTime(5);
                MoveToElement(driver, Control("Languagedropdown", "EnterpriseSales"));
                Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();

                //WaitUntil(driver, Control("SelectMinorSourceDropdown", "Generic"), 30);
                //MoveToElement(driver, Control("SelectMinorSourceDropdown", "Generic"));
                //Element(driver, Control("SelectMinorSourceDropdown", "Generic")).Click();

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Minor Source Field updated Successfully", "Minor Source Field Verification");

            }

            else
            {
                WaitUntil(driver, Control("MinorSourceInputButton", "Generic"), 30);
                MoveToElement(driver, Control("MinorSourceInputButton", "Generic"));
                Element(driver, Control("MinorSourceInputButton", "Generic")).SendKeys(Keys.Control + "a");
                Element(driver, Control("MinorSourceInputButton", "Generic")).SendKeys(Keys.Delete);
                // Element(driver, Control("Minorsourcelookup", "Generic")).Click();
                ThinkTime(2);
                Element(driver, Control("MinorSourceInputButton", "Generic")).SendKeys(MinorSource);
                ThinkTime(5);
                MoveToElement(driver, Control("Languagedropdown", "EnterpriseSales"));
                Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();

                //WaitUntil(driver, Control("SelectMinorSourceDropdown", "Generic"), 30);
                //MoveToElement(driver, Control("SelectMinorSourceDropdown", "Generic"));

                //Element(driver, Control("SelectMinorSourceDropdown", "Generic")).Click();

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Minor Source Field updated Successfully", "Minor Source Field Verification");

            }
            scrollDownOpportunityEnterpriseCust(driver, testInReport, testDataIteration, testName, "500");
            // Recommended Business centre
            WaitUntil(driver, Control("RecomentedBussinessCentreInputButton", "Opportunity"), 30);
            MoveToElement(driver, Control("RecomentedBussinessCentreInputButton", "Opportunity"));
            Element(driver, Control("RecomentedBussinessCentreInputButton", "Opportunity")).SendKeys(RecomendedBussinessCenre);

            ThinkTime(6);
            MoveToElement(driver, Control("Languagedropdown", "EnterpriseSales"));
            Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();
            ThinkTime(2);


            saveFooter(driver, testInReport, testName, testDataIteration);
            ThinkTime(8);
        }


        public void createnewleadwithphonenumbers(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string LastName, string Email, string BPhone, string MPhone, string Source, string MajorSource, string MinorSource, string now, string contactcondition, string accountcondition, string newcontactname, string Language, string accountname, string RecomendedBussinessCenre)
        {
            // Click on New button
            ThinkTime(2);
            WaitUntil(driver, Control("NewTabOpportunity", "Opportunity"), 30);
            MoveToElement(driver, Control("NewTabOpportunity", "Opportunity"));
            Element(driver, Control("NewTabOpportunity", "Opportunity")).Click();
            ThinkTime(3);

            // Enter Lastname 
            WaitUntil(driver, Control("LeadLname", "Generic"), 30);
            MoveToElement(driver, Control("LeadLname", "Generic"));
            Element(driver, Control("LeadLname", "Generic")).SendKeys(Keys.Control + "a");
            Element(driver, Control("LeadLname", "Generic")).SendKeys(Keys.Delete);
            Element(driver, Control("LeadLname", "Generic")).SendKeys(LastName);

            Element(driver, Control("Lastnameclick", "Generic")).Click();

            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Last Name Field updated Successfully", "Last Name Field Verification");

            ThinkTime(3);

            //Select Email verification.

            WaitUntil(driver, Control("LeadEmail", "Generic"), 30);
            MoveToElement(driver, Control("LeadEmail", "Generic"));
            Element(driver, Control("LeadEmail", "Generic")).Click();
            ThinkTime(1);
            Element(driver, Control("LeadEmail", "Generic")).SendKeys(Keys.Control + "a");
            Element(driver, Control("LeadEmail", "Generic")).SendKeys(Keys.Delete);
            ThinkTime(2);
            Element(driver, Control("LeadEmail", "Generic")).SendKeys(Email);
            ThinkTime(5);

            if (Elements(driver, Control("ScriptDialg", "Opportunity")) > 0)
            {
                Element(driver, Control("HandleScriptError", "Opportunity")).Click();
                ThinkTime(3);
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "No Script error present", "No Script error present");

            }

            //  Element(driver, Control("Emialclick", "Generic")).Click();

            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Email Field updated Successfully", "Email Field Verification");

            ThinkTime(3);
            //scrollDownOpportunityEnterprise(driver, testInReport, testDataIteration, testName);
            scrollDownOpportunityEnterpriseCust(driver, testInReport, testDataIteration, testName, "100");
            ThinkTime(3);
            // Select contact
            if (contactcondition == "NewContact")
            {
                ThinkTime(2);
                //Element(driver, Control("LeadContactClick", "Generic")).Click();
                //ThinkTime(2);
                //WaitUntil(driver, Control("ContactInputField", "Generic"), 30);
                //MoveToElement(driver, Control("ContactInputField", "Generic"));
                //ElementHighlight(driver, Control("ContactInputField", "Generic"));
                //ThinkTime(10);

                //Element(driver, Control("ContactSearchButton", "Generic")).Click();

                ////create new contact.
                //ThinkTime(2);
                //WaitUntil(driver, Control("NewContactInput", "Opportunity"), 60);
                //MoveToElement(driver, Control("NewContactInput", "Opportunity"));
                //JSClick(driver, Control("NewContactInput", "Opportunity"));
                //ThinkTime(4);
                //ScriptErrorExcep(driver, testInReport, testName, testDataIteration);

                //WaitUntil(driver, Control("NewContactButton", "Opportunity"), 60);
                //MoveToElement(driver, Control("NewContactButton", "Opportunity"));
                //Element(driver, Control("NewContactButton", "Opportunity")).Click();
                //ThinkTime(2);


                ////create new contact.
                //ThinkTime(2);
                //WaitUntil(driver, Control("NewContactInput", "Opportunity"), 60);
                //MoveToElement(driver, Control("NewContactInput", "Opportunity"));
                //JSClick(driver, Control("NewContactInput", "Opportunity"));
                //ThinkTime(2);
                //ScriptErrorExcep(driver, testInReport, testName, testDataIteration);

                //WaitUntil(driver, Control("NewContactButton", "Opportunity"), 60);
                //MoveToElement(driver, Control("NewContactButton", "Opportunity"));
                //Element(driver, Control("NewContactButton", "Opportunity")).Click();
                //ThinkTime(2);


                //ThinkTime(2);
                //ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
                //ThinkTime(2);
                //WaitUntil(driver, Control("Leadcreatecontactlastname", "Opportunity"), 30);
                //MoveToElement(driver, Control("Leadcreatecontactlastname", "Opportunity"));
                //Element(driver, Control("Leadcreatecontactlastname", "Opportunity")).Click();
                //Element(driver, Control("Leadcreatecontactlastname", "Opportunity")).SendKeys(newcontactname);
                //ThinkTime(2);
                //WaitUntil(driver, Control("NewLanguageInput", "Opportunity"), 60);
                //MoveToElement(driver, Control("NewLanguageInput", "Opportunity"));
                //Element(driver, Control("NewLanguageInput", "Opportunity")).Click();
                //Element(driver, Control("NewLanguageInput", "Opportunity")).SendKeys(Keys.Control + "a");
                //Element(driver, Control("NewLanguageInput", "Opportunity")).SendKeys(Keys.Delete);
                //Element(driver, Control("NewLanguageInput", "Opportunity")).Clear();

                //ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
                //WaitUntil(driver, Control("NewLanguageInput", "Opportunity"), 30);
                //MoveToElement(driver, Control("NewLanguageInput", "Opportunity"));
                //Element(driver, Control("NewLanguageInput", "Opportunity")).Click();
                //Element(driver, Control("NewLanguageInput", "Opportunity")).SendKeys(Keys.Control + "a");
                //Element(driver, Control("NewLanguageInput", "Opportunity")).SendKeys(Keys.Delete);
                //Element(driver, Control("NewLanguageInput", "Opportunity")).SendKeys("UK english");
                //ThinkTime(2);
                //WaitUntil(driver, Control("ITSalesCustomer", "Opportunity"), 30);
                //MoveToElement(driver, Control("ITSalesCustomer", "Opportunity"));
                //ThinkTime(5);
                //Element(driver, Control("ITSalesCustomer", "Opportunity")).Click();
                //ThinkTime(2);
                //WaitUntil(driver, Control("Quickcreatesave", "Opportunity"), 30);
                //MoveToElement(driver, Control("Quickcreatesave", "Opportunity"));
                //Element(driver, Control("Quickcreatesave", "Opportunity")).Click();
                //ThinkTime(2);



                //MoveToElement(driver, Control("Contactlastname", "EnterpriseSales"));
                //Element(driver, Control("Contactlastname", "EnterpriseSales")).Click();
                //ThinkTime(2);
                //Element(driver, Control("Contactlastname", "EnterpriseSales")).SendKeys(Keys.Control + "a");
                //Element(driver, Control("Contactlastname", "EnterpriseSales")).SendKeys(Keys.Delete);
                //ThinkTime(2);
                //Element(driver, Control("Contactlastname", "EnterpriseSales")).SendKeys(newcontactname);
                //ThinkTime(5);


                //MoveToElement(driver, Control("ActivityCreateContactInput", "EnterpriseSales"));
                //Element(driver, Control("ActivityCreateContactInput", "EnterpriseSales")).Click();
                //ThinkTime(2);
                //Element(driver, Control("ActivityCreateContactInput", "EnterpriseSales")).SendKeys(Keys.Control + "a");
                //Element(driver, Control("ActivityCreateContactInput", "EnterpriseSales")).SendKeys(Keys.Delete);
                //ThinkTime(2);
                //Element(driver, Control("ActivityCreateContactInput", "EnterpriseSales")).SendKeys(Language);
                //ThinkTime(5);
                //MoveToElement(driver, Control("Languagedropdown", "EnterpriseSales"));
                //Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();

                //ThinkTime(3);

                //MoveToElement(driver, Control("NewContactSaveButton", "Opportunity"));
                //ActionsClick(driver, Control("SaveContactSales", "Opportunity"));
                //ThinkTime(1);
            }

            if (contactcondition == "ExistingContact")
            {
                //create new contact
                WaitUntil(driver, Control("Contactlookup", "Opportunity"), 30);
                MoveToElement(driver, Control("Contactlookup", "Opportunity"));
                Element(driver, Control("Contactlookup", "Opportunity")).Click();
                ThinkTime(2);
                Element(driver, Control("Contactlookup", "Opportunity")).SendKeys(Keys.Control + "a");
                Element(driver, Control("Contactlookup", "Opportunity")).SendKeys(Keys.Delete);
                ThinkTime(2);
                Element(driver, Control("Contactlookup", "Opportunity")).SendKeys(newcontactname);
                ThinkTime(6);
                MoveToElement(driver, Control("ITSalesCustomer", "Opportunity"));
                Element(driver, Control("ITSalesCustomer", "Opportunity")).Click();
                ThinkTime(2);
            }

            if (accountcondition == "NewAccount")
            {
                string NewAccountName = accountname + now;
                ThinkTime(15);
                WaitUntil(driver, Control("VerifyCompanyField", "Opportunity"), 30);
                MoveToElement(driver, Control("VerifyCompanyField", "Opportunity"));
                ActionsClick(driver, Control("VerifyCompanyField", "Opportunity"));
                ThinkTime(1);
                ActionsClick(driver, Control("Accountlookupinputfield", "Opportunity"));
                ThinkTime(1);
                ActionsClick(driver, Control("NewAccountButton", "Opportunity"));
                ThinkTime(15);
                MoveToElement(driver, Control("Addnewcompanyname", "Opportunity"));
                Element(driver, Control("Addnewcompanyname", "Opportunity")).Click();
                ThinkTime(2);
                Element(driver, Control("Addnewcompanyname", "Opportunity")).SendKeys(Keys.Control + "a");
                Element(driver, Control("Addnewcompanyname", "Opportunity")).SendKeys(Keys.Delete);
                ThinkTime(2);
                Element(driver, Control("Addnewcompanyname", "Opportunity")).SendKeys(NewAccountName);
                ThinkTime(6);
                Element(driver, Control("Citylabel", "Opportunity")).Click();
                ThinkTime(2);
                if (Elements(driver, Control("Saveandclosebutton", "Opportunity")) > 0)
                {
                    MoveToElement(driver, Control("Saveandclosebutton", "Opportunity"));
                    Element(driver, Control("Saveandclosebutton", "Opportunity")).Click();
                }
                else
                {
                    ThinkTime(4);
                    MoveToElement(driver, Control("NewContactSaveButton", "Opportunity"));
                    Element(driver, Control("NewContactSaveButton", "Opportunity")).Click();
                }


                ThinkTime(8);
            }

            if (accountcondition == "ExistingAccount")
            {

            }

            scrollDownOpportunityEnterpriseCust(driver, testInReport, testDataIteration, testName, "300");
            //Select Bussiness Phone verification.

            WaitUntil(driver, Control("LeadBussinessPhone", "Generic"), 30);
            MoveToElement(driver, Control("LeadBussinessPhone", "Generic"));
            Element(driver, Control("LeadBussinessPhone", "Generic")).Click();
            Element(driver, Control("LeadBussinessPhone", "Generic")).SendKeys(Keys.Control + "a");
            Element(driver, Control("LeadBussinessPhone", "Generic")).SendKeys(Keys.Delete);
            Element(driver, Control("LeadBussinessPhone", "Generic")).SendKeys(BPhone);
            Element(driver, Control("BussinessPhoneClick", "Generic")).Click();

            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Bussiness Phone Field updated Successfully", "Bussiness Phone Field Verification");



            WaitUntil(driver, Control("Leadmobilephone", "Generic"), 30);
            MoveToElement(driver, Control("Leadmobilephone", "Generic"));
            Element(driver, Control("Leadmobilephone", "Generic")).Click();
            Element(driver, Control("Leadmobilephone", "Generic")).SendKeys(Keys.Control + "a");
            Element(driver, Control("Leadmobilephone", "Generic")).SendKeys(Keys.Delete);
            Element(driver, Control("Leadmobilephone", "Generic")).SendKeys(MPhone);
            Element(driver, Control("Leadmobilephone", "Generic")).Click();

            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Bussiness Phone Field updated Successfully", "Bussiness Phone Field Verification");

            //ThinkTime(3);
            //scrollDownOpportunityEnterpriseCust(driver, testInReport, testDataIteration, testName,"100");



            //MoveToElement(driver, Control("Languagedropdown","EnterpriseSales"));
            //Element(driver, Control("Languagedropdown","EnterpriseSales")).Click();


            //Select Source verification

            if (Elements(driver, Control("SourceVerification", "Generic")) > 0)
            {
                WaitUntil(driver, Control("SourceVerification", "Generic"), 30);
                MoveToElement(driver, Control("SourceVerification", "Generic"));
                Element(driver, Control("SourceDeleteButton", "Generic")).Click();

                WaitUntil(driver, Control("SourceInputField", "Generic"), 30);
                MoveToElement(driver, Control("SourceInputField", "Generic"));
                Element(driver, Control("SourceInputField", "Generic")).SendKeys(Source);

                WaitUntil(driver, Control("SelectSourceDropdown", "Generic"), 30);
                MoveToElement(driver, Control("SelectSourceDropdown", "Generic"));
                Element(driver, Control("SelectSourceDropdown", "Generic")).Click();

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Source Field updated Successfully", "Source Field Verification");

            }

            else
            {
                WaitUntil(driver, Control("SourceInputField", "Generic"), 30);
                MoveToElement(driver, Control("SourceInputField", "Generic"));
                Element(driver, Control("SourceInputField", "Generic")).SendKeys(Keys.Control + "a");
                Element(driver, Control("SourceInputField", "Generic")).SendKeys(Keys.Delete);

                Element(driver, Control("SourceInputField", "Generic")).SendKeys(Source);
                ThinkTime(5);
                WaitUntil(driver, Control("SelectSourceDropdown", "Generic"), 30);
                MoveToElement(driver, Control("SelectSourceDropdown", "Generic"));
                Element(driver, Control("SelectSourceDropdown", "Generic")).Click();

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Source Field updated Successfully", "Source Field Verification");

            }

            ThinkTime(5);
            //scrollDownOpportunityPage(driver, testInReport, testName, testDataIteration);


            //Select Major Source verification

            if (Elements(driver, Control("MajorSourceVerification", "Generic")) > 0)
            {
                WaitUntil(driver, Control("MajorSourceVerification", "Generic"), 30);
                MoveToElement(driver, Control("MajorSourceVerification", "Generic"));
                Element(driver, Control("MajorSourceDeleteButton", "Generic")).Click();

                WaitUntil(driver, Control("MajorSourceInputField", "Generic"), 30);
                MoveToElement(driver, Control("MajorSourceInputField", "Generic"));
                Element(driver, Control("MajorSourceInputField", "Generic")).SendKeys(MajorSource);
                ThinkTime(5);
                MoveToElement(driver, Control("Languagedropdown", "EnterpriseSales"));
                Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();

                //WaitUntil(driver, Control("SelectMSourceDropdown", "Generic"), 30);
                //MoveToElement(driver, Control("SelectMSourceDropdown", "Generic"));
                //Element(driver, Control("SelectMSourceDropdown", "Generic")).Click();

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Major Source Field updated Successfully", "Major Source Field Verification");

            }

            else
            {
                WaitUntil(driver, Control("MajorSourceInputField", "Generic"), 30);
                MoveToElement(driver, Control("MajorSourceInputField", "Generic"));
                Element(driver, Control("MajorSourceInputField", "Generic")).Clear();
                ThinkTime(3);
                Element(driver, Control("MajorSourceInputField", "Generic")).SendKeys(Keys.Control + "a");
                Element(driver, Control("MajorSourceInputField", "Generic")).SendKeys(Keys.Delete);
                Element(driver, Control("MajorSourceInputField", "Generic")).SendKeys(MajorSource);
                ThinkTime(5);
                MoveToElement(driver, Control("Languagedropdown", "EnterpriseSales"));
                Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();

                //WaitUntil(driver, Control("SelectMSourceDropdown", "Generic"), 30);
                //MoveToElement(driver, Control("SelectMSourceDropdown", "Generic"));
                //Element(driver, Control("SelectMSourceDropdown", "Generic")).Click();

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Major Source Field updated Successfully", "Major Source Field Verification");

            }


            //Select Minor Source verification

            if (Elements(driver, Control("MinorSourceVerification", "Generic")) > 0)
            {
                WaitUntil(driver, Control("MinorSourceVerification", "Generic"), 30);
                MoveToElement(driver, Control("MinorSourceVerification", "Generic"));
                Element(driver, Control("MinorSourceDeleteButton", "Generic")).Click();

                WaitUntil(driver, Control("MinorSourceInputButton", "Generic"), 30);
                MoveToElement(driver, Control("MinorSourceInputButton", "Generic"));
                Element(driver, Control("MinorSourceInputButton", "Generic")).SendKeys(Keys.Control + "a");
                Element(driver, Control("MinorSourceInputButton", "Generic")).SendKeys(Keys.Delete);

                // Element(driver, Control("Minorsourcelookup", "Generic")).Click();
                ThinkTime(2);
                Element(driver, Control("MinorSourceInputButton", "Generic")).SendKeys(MinorSource);
                ThinkTime(5);
                MoveToElement(driver, Control("Languagedropdown", "EnterpriseSales"));
                Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();

                //WaitUntil(driver, Control("SelectMinorSourceDropdown", "Generic"), 30);
                //MoveToElement(driver, Control("SelectMinorSourceDropdown", "Generic"));
                //Element(driver, Control("SelectMinorSourceDropdown", "Generic")).Click();

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Minor Source Field updated Successfully", "Minor Source Field Verification");

            }

            else
            {
                WaitUntil(driver, Control("MinorSourceInputButton", "Generic"), 30);
                MoveToElement(driver, Control("MinorSourceInputButton", "Generic"));
                Element(driver, Control("MinorSourceInputButton", "Generic")).SendKeys(Keys.Control + "a");
                Element(driver, Control("MinorSourceInputButton", "Generic")).SendKeys(Keys.Delete);
                // Element(driver, Control("Minorsourcelookup", "Generic")).Click();
                ThinkTime(2);
                Element(driver, Control("MinorSourceInputButton", "Generic")).SendKeys(MinorSource);
                ThinkTime(5);
                MoveToElement(driver, Control("Languagedropdown", "EnterpriseSales"));
                Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();

                //WaitUntil(driver, Control("SelectMinorSourceDropdown", "Generic"), 30);
                //MoveToElement(driver, Control("SelectMinorSourceDropdown", "Generic"));

                //Element(driver, Control("SelectMinorSourceDropdown", "Generic")).Click();

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Minor Source Field updated Successfully", "Minor Source Field Verification");

            }
            scrollDownOpportunityEnterpriseCust(driver, testInReport, testDataIteration, testName, "500");
            // Recommended Business centre
            WaitUntil(driver, Control("RecomentedBussinessCentreInputButton", "Opportunity"), 30);
            MoveToElement(driver, Control("RecomentedBussinessCentreInputButton", "Opportunity"));
            Element(driver, Control("RecomentedBussinessCentreInputButton", "Opportunity")).SendKeys(RecomendedBussinessCenre);

            ThinkTime(6);
            MoveToElement(driver, Control("Languagedropdown", "EnterpriseSales"));
            Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();
            ThinkTime(2);


            saveFooter(driver, testInReport, testName, testDataIteration);
            ThinkTime(8);
        }




        public void upsatephnefieldsinleadform(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string BPhone, string MPhone)
        {
            scrollDownOpportunityEnterpriseCust(driver, testInReport, testDataIteration, testName, "300");

            WaitUntil(driver, Control("LeadBussinessPhone", "Generic"), 30);
            MoveToElement(driver, Control("LeadBussinessPhone", "Generic"));
            Element(driver, Control("LeadBussinessPhone", "Generic")).Click();
            Element(driver, Control("LeadBussinessPhone", "Generic")).SendKeys(Keys.Control + "a");
            Element(driver, Control("LeadBussinessPhone", "Generic")).SendKeys(Keys.Delete);
            Element(driver, Control("LeadBussinessPhone", "Generic")).SendKeys(BPhone);
            Element(driver, Control("BussinessPhoneClick", "Generic")).Click();



            WaitUntil(driver, Control("Leadmobilephone", "Generic"), 30);
            MoveToElement(driver, Control("Leadmobilephone", "Generic"));
            Element(driver, Control("Leadmobilephone", "Generic")).Click();
            Element(driver, Control("Leadmobilephone", "Generic")).SendKeys(Keys.Control + "a");
            Element(driver, Control("Leadmobilephone", "Generic")).SendKeys(Keys.Delete);
            Element(driver, Control("Leadmobilephone", "Generic")).SendKeys(MPhone);
            Element(driver, Control("Leadmobilephone", "Generic")).Click();

            saveFooter(driver, testInReport, testName, testDataIteration);
            ThinkTime(8);
        }


        public void Enterleaddescription(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string text)
        {
            // scrollDownOpportunityEnterpriseCust(driver, testInReport, testDataIteration, testName, "100");
            ThinkTime(3);
            scrollUpPage(driver, testInReport, testDataIteration, testName);
            ThinkTime(3);
            WaitUntil(driver, Control("Leaddescripiton", "Opportunity"), 30);
            MoveToElement(driver, Control("Leaddescripiton", "Opportunity"));
            Element(driver, Control("Leaddescripiton", "Opportunity")).Click();
            ThinkTime(3);
            Element(driver, Control("Leaddescripiton", "Opportunity")).SendKeys(text);
            ThinkTime(3);
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Description Field updated Successfully", "Description Field Verification");

            saveFooter(driver, testInReport, testName, testDataIteration);
            ThinkTime(8);
        }
        public void VerifyqualifiedOppdescription(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string text)
        {
            scrollDownOpportunityEnterpriseCust(driver, testInReport, testDataIteration, testName, "100");
            ThinkTime(3);
            scrollDownOpportunityEnterpriseCust(driver, testInReport, testDataIteration, testName, "100");
            ThinkTime(3);
            scrollDownOpportunityEnterpriseCust(driver, testInReport, testDataIteration, testName, "100");
            ThinkTime(3);
            scrollDownOpportunityEnterpriseCust(driver, testInReport, testDataIteration, testName, "100");
            ThinkTime(3);

            WaitUntil(driver, Control("Leaddescripiton", "Opportunity"), 30);
            MoveToElement(driver, Control("Leaddescripiton", "Opportunity"));
            string Oppdescription = Element(driver, Control("Leaddescripiton", "Opportunity")).GetAttribute("defaultValue");
            ThinkTime(3);
            if (Oppdescription == text)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Description Field updated Successfully", "Description Field Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Description Field not updated Successfully", "Description Field not Verification");

            }
            ThinkTime(8);
        }
        public void createleaddirectsaleswithproduct(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string LastName, string Email, string BPhone, string Source, string MajorSource, string MinorSource, string now, string contactcondition, string accountcondition, string newcontactname, string Language, string accountname, string RecomendedBussinessCenre, string save)
        {
            // Click on New button
            ThinkTime(2);
            WaitUntil(driver, Control("NewTabOpportunity", "Opportunity"), 30);
            MoveToElement(driver, Control("NewTabOpportunity", "Opportunity"));
            Element(driver, Control("NewTabOpportunity", "Opportunity")).Click();
            ThinkTime(3);

            // Enter Lastname 
            WaitUntil(driver, Control("LeadLname", "Generic"), 30);
            MoveToElement(driver, Control("LeadLname", "Generic"));
            Element(driver, Control("LeadLname", "Generic")).SendKeys(Keys.Control + "a");
            Element(driver, Control("LeadLname", "Generic")).SendKeys(Keys.Delete);
            Element(driver, Control("LeadLname", "Generic")).SendKeys(LastName);

            Element(driver, Control("Lastnameclick", "Generic")).Click();

            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Last Name Field updated Successfully", "Last Name Field Verification");

            ThinkTime(3);

            //Select Email verification.

            WaitUntil(driver, Control("LeadEmail", "Generic"), 30);
            MoveToElement(driver, Control("LeadEmail", "Generic"));
            Element(driver, Control("LeadEmail", "Generic")).Click();
            ThinkTime(1);
            Element(driver, Control("LeadEmail", "Generic")).SendKeys(Keys.Control + "a");
            Element(driver, Control("LeadEmail", "Generic")).SendKeys(Keys.Delete);
            ThinkTime(2);
            Element(driver, Control("LeadEmail", "Generic")).SendKeys(Email);
            ThinkTime(5);

            if (Elements(driver, Control("ScriptDialg", "Opportunity")) > 0)
            {
                Element(driver, Control("HandleScriptError", "Opportunity")).Click();
                ThinkTime(3);
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "No Script error present", "No Script error present");

            }
            WaitUntil(driver, Control("LeadProduct", "Generic"), 30);
            MoveToElement(driver, Control("LeadProduct", "Generic"));
            Element(driver, Control("LeadProduct", "Generic")).Click();
            ThinkTime(1);
            Element(driver, Control("LeadProduct", "Generic")).SendKeys(Keys.Control + "a");
            Element(driver, Control("LeadProduct", "Generic")).SendKeys(Keys.Delete);
            ThinkTime(2);
            Element(driver, Control("LeadProduct", "Generic")).SendKeys("Workstation");
            ThinkTime(5);
            MoveToElement(driver, Control("ITSalesCustomer", "Opportunity"));
            Element(driver, Control("ITSalesCustomer", "Opportunity")).Click();
            ThinkTime(2);

            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Email Field updated Successfully", "Email Field Verification");

            ThinkTime(3);



            //scrollDownOpportunityEnterprise(driver, testInReport, testDataIteration, testName);
            scrollDownOpportunityEnterpriseCust(driver, testInReport, testDataIteration, testName, "100");
            ThinkTime(3);
            // Select contact
            if (contactcondition == "NewContact")
            {
                ThinkTime(2);

            }

            if (contactcondition == "ExistingContact")
            {
                //create new contact
                WaitUntil(driver, Control("Contactlookup", "Opportunity"), 30);
                MoveToElement(driver, Control("Contactlookup", "Opportunity"));
                Element(driver, Control("Contactlookup", "Opportunity")).Click();
                ThinkTime(2);
                Element(driver, Control("Contactlookup", "Opportunity")).SendKeys(Keys.Control + "a");
                Element(driver, Control("Contactlookup", "Opportunity")).SendKeys(Keys.Delete);
                ThinkTime(2);
                Element(driver, Control("Contactlookup", "Opportunity")).SendKeys(newcontactname);
                ThinkTime(6);
                MoveToElement(driver, Control("ITSalesCustomer", "Opportunity"));
                Element(driver, Control("ITSalesCustomer", "Opportunity")).Click();
                ThinkTime(2);
            }

            if (accountcondition == "NewAccount")
            {
                string NewAccountName = accountname + now;
                ThinkTime(15);
                WaitUntil(driver, Control("VerifyCompanyField", "Opportunity"), 30);
                MoveToElement(driver, Control("VerifyCompanyField", "Opportunity"));
                ActionsClick(driver, Control("VerifyCompanyField", "Opportunity"));
                ThinkTime(1);
                ActionsClick(driver, Control("Accountlookupinputfield", "Opportunity"));
                ThinkTime(1);
                ActionsClick(driver, Control("NewAccountButton", "Opportunity"));
                ThinkTime(15);
                MoveToElement(driver, Control("Addnewcompanyname", "Opportunity"));
                Element(driver, Control("Addnewcompanyname", "Opportunity")).Click();
                ThinkTime(2);
                Element(driver, Control("Addnewcompanyname", "Opportunity")).SendKeys(Keys.Control + "a");
                Element(driver, Control("Addnewcompanyname", "Opportunity")).SendKeys(Keys.Delete);
                ThinkTime(2);
                Element(driver, Control("Addnewcompanyname", "Opportunity")).SendKeys(NewAccountName);
                ThinkTime(6);
                Element(driver, Control("Citylabel", "Opportunity")).Click();
                ThinkTime(2);
                if (Elements(driver, Control("Saveandclosebutton", "Opportunity")) > 0)
                {
                    MoveToElement(driver, Control("Saveandclosebutton", "Opportunity"));
                    Element(driver, Control("Saveandclosebutton", "Opportunity")).Click();
                }
                else
                {
                    ThinkTime(4);
                    MoveToElement(driver, Control("NewContactSaveButton", "Opportunity"));
                    Element(driver, Control("NewContactSaveButton", "Opportunity")).Click();
                }


                ThinkTime(8);
            }

            if (accountcondition == "ExistingAccount")
            {

            }

            scrollDownOpportunityEnterpriseCust(driver, testInReport, testDataIteration, testName, "300");
            //Select Bussiness Phone verification.

            WaitUntil(driver, Control("LeadBussinessPhone", "Generic"), 30);
            MoveToElement(driver, Control("LeadBussinessPhone", "Generic"));
            Element(driver, Control("LeadBussinessPhone", "Generic")).Click();
            Element(driver, Control("LeadBussinessPhone", "Generic")).SendKeys(Keys.Control + "a");
            Element(driver, Control("LeadBussinessPhone", "Generic")).SendKeys(Keys.Delete);
            Element(driver, Control("LeadBussinessPhone", "Generic")).SendKeys(BPhone);
            Element(driver, Control("BussinessPhoneClick", "Generic")).Click();

            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Bussiness Phone Field updated Successfully", "Bussiness Phone Field Verification");

            //ThinkTime(3);
            //scrollDownOpportunityEnterpriseCust(driver, testInReport, testDataIteration, testName,"100");



            //MoveToElement(driver, Control("Languagedropdown","EnterpriseSales"));
            //Element(driver, Control("Languagedropdown","EnterpriseSales")).Click();


            //Select Source verification

            if (Elements(driver, Control("SourceVerification", "Generic")) > 0)
            {
                WaitUntil(driver, Control("SourceVerification", "Generic"), 30);
                MoveToElement(driver, Control("SourceVerification", "Generic"));
                Element(driver, Control("SourceDeleteButton", "Generic")).Click();

                WaitUntil(driver, Control("SourceInputField", "Generic"), 30);
                MoveToElement(driver, Control("SourceInputField", "Generic"));
                Element(driver, Control("SourceInputField", "Generic")).SendKeys(Source);

                WaitUntil(driver, Control("SelectSourceDropdown", "Generic"), 30);
                MoveToElement(driver, Control("SelectSourceDropdown", "Generic"));
                Element(driver, Control("SelectSourceDropdown", "Generic")).Click();

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Source Field updated Successfully", "Source Field Verification");

            }

            else
            {
                WaitUntil(driver, Control("SourceInputField", "Generic"), 30);
                MoveToElement(driver, Control("SourceInputField", "Generic"));
                Element(driver, Control("SourceInputField", "Generic")).SendKeys(Keys.Control + "a");
                Element(driver, Control("SourceInputField", "Generic")).SendKeys(Keys.Delete);

                Element(driver, Control("SourceInputField", "Generic")).SendKeys(Source);
                ThinkTime(5);
                WaitUntil(driver, Control("SelectSourceDropdown", "Generic"), 30);
                MoveToElement(driver, Control("SelectSourceDropdown", "Generic"));
                Element(driver, Control("SelectSourceDropdown", "Generic")).Click();

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Source Field updated Successfully", "Source Field Verification");

            }

            ThinkTime(5);
            //scrollDownOpportunityPage(driver, testInReport, testName, testDataIteration);


            //Select Major Source verification

            if (Elements(driver, Control("MajorSourceVerification", "Generic")) > 0)
            {
                WaitUntil(driver, Control("MajorSourceVerification", "Generic"), 30);
                MoveToElement(driver, Control("MajorSourceVerification", "Generic"));
                Element(driver, Control("MajorSourceDeleteButton", "Generic")).Click();

                WaitUntil(driver, Control("MajorSourceInputField", "Generic"), 30);
                MoveToElement(driver, Control("MajorSourceInputField", "Generic"));
                Element(driver, Control("MajorSourceInputField", "Generic")).SendKeys(MajorSource);
                ThinkTime(5);
                MoveToElement(driver, Control("Languagedropdown", "EnterpriseSales"));
                Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();

                //WaitUntil(driver, Control("SelectMSourceDropdown", "Generic"), 30);
                //MoveToElement(driver, Control("SelectMSourceDropdown", "Generic"));
                //Element(driver, Control("SelectMSourceDropdown", "Generic")).Click();

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Major Source Field updated Successfully", "Major Source Field Verification");

            }

            else
            {
                WaitUntil(driver, Control("MajorSourceInputField", "Generic"), 30);
                MoveToElement(driver, Control("MajorSourceInputField", "Generic"));
                Element(driver, Control("MajorSourceInputField", "Generic")).Clear();
                ThinkTime(3);
                Element(driver, Control("MajorSourceInputField", "Generic")).SendKeys(Keys.Control + "a");
                Element(driver, Control("MajorSourceInputField", "Generic")).SendKeys(Keys.Delete);
                Element(driver, Control("MajorSourceInputField", "Generic")).SendKeys(MajorSource);
                ThinkTime(5);
                MoveToElement(driver, Control("Languagedropdown", "EnterpriseSales"));
                Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();

                //WaitUntil(driver, Control("SelectMSourceDropdown", "Generic"), 30);
                //MoveToElement(driver, Control("SelectMSourceDropdown", "Generic"));
                //Element(driver, Control("SelectMSourceDropdown", "Generic")).Click();

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Major Source Field updated Successfully", "Major Source Field Verification");

            }


            //Select Minor Source verification

            if (Elements(driver, Control("MinorSourceVerification", "Generic")) > 0)
            {
                WaitUntil(driver, Control("MinorSourceVerification", "Generic"), 30);
                MoveToElement(driver, Control("MinorSourceVerification", "Generic"));
                Element(driver, Control("MinorSourceDeleteButton", "Generic")).Click();

                WaitUntil(driver, Control("MinorSourceInputButton", "Generic"), 30);
                MoveToElement(driver, Control("MinorSourceInputButton", "Generic"));
                Element(driver, Control("MinorSourceInputButton", "Generic")).SendKeys(Keys.Control + "a");
                Element(driver, Control("MinorSourceInputButton", "Generic")).SendKeys(Keys.Delete);

                // Element(driver, Control("Minorsourcelookup", "Generic")).Click();
                ThinkTime(2);
                Element(driver, Control("MinorSourceInputButton", "Generic")).SendKeys(MinorSource);
                ThinkTime(5);
                MoveToElement(driver, Control("Languagedropdown", "EnterpriseSales"));
                Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();

                //WaitUntil(driver, Control("SelectMinorSourceDropdown", "Generic"), 30);
                //MoveToElement(driver, Control("SelectMinorSourceDropdown", "Generic"));
                //Element(driver, Control("SelectMinorSourceDropdown", "Generic")).Click();

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Minor Source Field updated Successfully", "Minor Source Field Verification");

            }

            else
            {
                WaitUntil(driver, Control("MinorSourceInputButton", "Generic"), 30);
                MoveToElement(driver, Control("MinorSourceInputButton", "Generic"));
                Element(driver, Control("MinorSourceInputButton", "Generic")).SendKeys(Keys.Control + "a");
                Element(driver, Control("MinorSourceInputButton", "Generic")).SendKeys(Keys.Delete);
                // Element(driver, Control("Minorsourcelookup", "Generic")).Click();
                ThinkTime(2);
                Element(driver, Control("MinorSourceInputButton", "Generic")).SendKeys(MinorSource);
                ThinkTime(5);
                MoveToElement(driver, Control("Languagedropdown", "EnterpriseSales"));
                Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();

                //WaitUntil(driver, Control("SelectMinorSourceDropdown", "Generic"), 30);
                //MoveToElement(driver, Control("SelectMinorSourceDropdown", "Generic"));

                //Element(driver, Control("SelectMinorSourceDropdown", "Generic")).Click();

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Minor Source Field updated Successfully", "Minor Source Field Verification");

            }
            scrollDownOpportunityEnterpriseCust(driver, testInReport, testDataIteration, testName, "500");
            // Recommended Business centre
            WaitUntil(driver, Control("RecomentedBussinessCentreInputButton", "Opportunity"), 30);
            MoveToElement(driver, Control("RecomentedBussinessCentreInputButton", "Opportunity"));
            Element(driver, Control("RecomentedBussinessCentreInputButton", "Opportunity")).SendKeys(RecomendedBussinessCenre);

            ThinkTime(6);
            MoveToElement(driver, Control("Languagedropdown", "EnterpriseSales"));
            Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();
            ThinkTime(2);

            if (save == "Yes")
            {
                saveFooter(driver, testInReport, testName, testDataIteration);
                ThinkTime(8);
            }
        }
        public void CreateOppoLostfn(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string Option)
        {
            SelectanyOpportunitybutton(driver, testInReport, testName, testDataIteration, "Refresh");
            ThinkTime(2);
            WaitUntil(driver, Control("BPFDevelopStage", "Opportunity"), 30);
            Element(driver, Control("BPFDevelopStage", "Opportunity")).Click();
            SelectOpportunityheader(driver, testInReport, testName, testDataIteration, "Close as Lost", "Form:opportunity");
            chooseoppstatusandclose(driver, testInReport, testName, testDataIteration, Option);
            VerifyStatusReasonheader(driver, testInReport, testDataIteration, testName, Option);
            VerifyOpportunitystatus(driver, testInReport, testDataIteration, testName, "Lost");
            ThinkTime(2);
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Completed as Lost", "Completed as Lost");
        }

        public void VerifyMobNum(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string MobileNumber)
        {
            SelectanyOpportunitybutton(driver, testInReport, testName, testDataIteration, "Refresh");
            ThinkTime(2);

            WaitUntil(driver, Control("BusinessPhone", "CommonObj"), 30);
            string BusPhoneNum = Element(driver, Control("BusinessPhone", "CommonObj")).GetAttribute("value");

            ThinkTime(3);
            if (BusPhoneNum.Equals(MobileNumber) && BusPhoneNum.StartsWith("+"))
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Business phone is correct", "Business phone is correct");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Business phone is incorrect", "Business phone is incorrect");
            }




        }

        public void CreateOppoWonfn(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string NOP)
        {
            SelectanyOpportunitybutton(driver, testInReport, testName, testDataIteration, "Refresh");
            ThinkTime(2);
            WaitUntil(driver, Control("BPFQualifyStage", "Opportunity"), 30);
            Element(driver, Control("BPFQualifyStage", "Opportunity")).Click();

            ThinkTime(2);
            WaitUntil(driver, Control("NextStageButton", "Opportunity"), 30);
            Element(driver, Control("NextStageButton", "Opportunity")).Click();

            //WaitUntil(driver, Control("BPFDevelopStage", "Opportunity"), 30);
            //Element(driver, Control("BPFDevelopStage", "Opportunity")).Click();

            ThinkTime(2);
            WaitUntil(driver, Control("Durationprocesstage", "Opportunity"), 30);
            Element(driver, Control("Durationprocesstage", "Opportunity")).Click();
            Element(driver, Control("Durationprocesstage", "Opportunity")).SendKeys("12");


            ThinkTime(2);
            WaitUntil(driver, Control("NOPStage", "CommonObj"), 30);
            Element(driver, Control("NOPStage", "CommonObj")).Click();
            Element(driver, Control("NOPStage", "CommonObj")).SendKeys(NOP);
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "duration and NOP updated", "duration and NOP updated");

            ThinkTime(2);
            WaitUntil(driver, Control("NextStageButton", "Opportunity"), 30);
            Element(driver, Control("NextStageButton", "Opportunity")).Click();

            ThinkTime(2);
            WaitUntil(driver, Control("PaymentRecieved", "36.1_Dashboard"), 30);
            Element(driver, Control("PaymentRecieved", "36.1_Dashboard")).Click();
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Payment received updated", "Payment received updated");

            ThinkTime(2);
            WaitUntil(driver, Control("NextStageButton", "Opportunity"), 30);
            Element(driver, Control("NextStageButton", "Opportunity")).Click();

            ThinkTime(2);
            WaitUntil(driver, Control("Finishprocesstage", "36.1_Dashboard"), 30);
            Element(driver, Control("Finishprocesstage", "36.1_Dashboard")).Click();
            SelectanyOpportunitybutton(driver, testInReport, testName, testDataIteration, "Refresh");
            VerifyOpportunitystatus(driver, testInReport, testDataIteration, testName, "Won");
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Completed as Won", "Completed as Won");



        }

        public void CreateLeadOppoWonfn(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string NOP)
        {
            SelectanyOpportunitybutton(driver, testInReport, testName, testDataIteration, "Refresh");
            ThinkTime(2);

            WaitUntil(driver, Control("BPFDevelopStage", "Opportunity"), 30);
            Element(driver, Control("BPFDevelopStage", "Opportunity")).Click();

            ThinkTime(10);
            WaitUntil(driver, Control("Durationprocesstage", "Opportunity"), 30);
            Element(driver, Control("Durationprocesstage", "Opportunity")).Click();
            Element(driver, Control("Durationprocesstage", "Opportunity")).SendKeys("12");


            ThinkTime(2);
            WaitUntil(driver, Control("NOPStage", "CommonObj"), 30);
            Element(driver, Control("NOPStage", "CommonObj")).Click();
            Element(driver, Control("NOPStage", "CommonObj")).SendKeys(NOP);
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "duration and NOP updated", "duration and NOP updated");

            ThinkTime(2);
            WaitUntil(driver, Control("NextStageButton", "Opportunity"), 30);
            Element(driver, Control("NextStageButton", "Opportunity")).Click();

            ThinkTime(2);
            WaitUntil(driver, Control("PaymentRecieved", "36.1_Dashboard"), 30);
            Element(driver, Control("PaymentRecieved", "36.1_Dashboard")).Click();
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Payment received updated", "Payment received updated");

            ThinkTime(2);
            WaitUntil(driver, Control("NextStageButton", "Opportunity"), 30);
            Element(driver, Control("NextStageButton", "Opportunity")).Click();

            ThinkTime(2);
            WaitUntil(driver, Control("Finishprocesstage", "36.1_Dashboard"), 30);
            Element(driver, Control("Finishprocesstage", "36.1_Dashboard")).Click();
            SelectanyOpportunitybutton(driver, testInReport, testName, testDataIteration, "Refresh");
            VerifyOpportunitystatus(driver, testInReport, testDataIteration, testName, "Won");
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Completed as Won", "Completed as Won");



        }
        public void CreateLeadToOpp(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string LastName, string Email, string BPhone, string Source, string MajorSource, string MinorSource, string now, string contactcondition, string accountcondition, string newcontactname, string Language, string accountname, string Country)
        {
            ThinkTime(2);
            WaitUntil(driver, Control("NewTabOpportunity", "Opportunity"), 30);
            MoveToElement(driver, Control("NewTabOpportunity", "Opportunity"));
            Element(driver, Control("NewTabOpportunity", "Opportunity")).Click();

            ThinkTime(2);
            WaitUntil(driver, Control("LeadLname", "Generic"), 30);
            Element(driver, Control("LeadLname", "Generic")).Click();
            Element(driver, Control("LeadLname", "Generic")).SendKeys(LastName);
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Last Name Field updated Successfully", "Last Name Field Verification");


            ThinkTime(2);
            WaitUntil(driver, Control("LeadEmail", "Generic"), 30);
            Element(driver, Control("LeadEmail", "Generic")).Click();
            Element(driver, Control("LeadEmail", "Generic")).SendKeys(Email);
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Email Field updated Successfully", "Email Field Verification");

            scrollDownOpportunityEnterpriseCust(driver, testInReport, testName, testDataIteration, "100");

            ThinkTime(2);
            WaitUntil(driver, Control("Contactlookup", "Opportunity"), 30);
            Element(driver, Control("Contactlookup", "Opportunity")).Click();
            Element(driver, Control("Contactlookup", "Opportunity")).SendKeys(newcontactname);

            ThinkTime(2);
            WaitUntil(driver, Control("ITSalesCustomer", "Opportunity"), 30);
            Element(driver, Control("ITSalesCustomer", "Opportunity")).Click();
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Contact Field updated Successfully", "Contact Field Verification");

            scrollDownOpportunityEnterpriseCust(driver, testInReport, testName, testDataIteration, "200");
            string NewAccountName = accountname + now;
            ThinkTime(2);
            WaitUntil(driver, Control("CompanyName", "CommonObj"), 30);
            Element(driver, Control("CompanyName", "CommonObj")).SendKeys(NewAccountName);

            ThinkTime(2);
            WaitUntil(driver, Control("SourceInputField", "Generic"), 30);
            Element(driver, Control("SourceInputField", "Generic")).Click();
            Element(driver, Control("SourceInputField", "Generic")).SendKeys(Source);
            ThinkTime(2);
            WaitUntil(driver, Control("ITSalesCustomer", "Opportunity"), 30);
            Element(driver, Control("ITSalesCustomer", "Opportunity")).Click();
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Source Field updated Successfully", "Source Field Verification");


            ThinkTime(2);
            WaitUntil(driver, Control("LeadBussinessPhone", "Opportunity"), 30);
            Element(driver, Control("LeadBussinessPhone", "Opportunity")).Click();
            Element(driver, Control("LeadBussinessPhone", "Opportunity")).SendKeys(BPhone);
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Bussiness Phone Field updated Successfully", "Bussiness Phone Field Verification");

            scrollDownOpportunityEnterpriseCust(driver, testInReport, testName, testDataIteration, "200");
            ThinkTime(2);
            WaitUntil(driver, Control("MajorSourceInputField", "Generic"), 30);
            Element(driver, Control("MajorSourceInputField", "Generic")).Click();
            Element(driver, Control("MajorSourceInputField", "Generic")).SendKeys(MajorSource);
            ThinkTime(2);
            MoveToElement(driver, Control("Languagedropdown", "EnterpriseSales"));
            Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Major Source Field updated Successfully", "Major Source Field Verification");

            ThinkTime(2);
            WaitUntil(driver, Control("MinorSourceInputButton", "Generic"), 30);
            Element(driver, Control("MinorSourceInputButton", "Generic")).Click();
            Element(driver, Control("MinorSourceInputButton", "Generic")).SendKeys(MinorSource);
            ThinkTime(2);
            MoveToElement(driver, Control("Languagedropdown", "EnterpriseSales"));
            Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Minor Source Field updated Successfully", "Minor Source Field Verification");
            scrollDownOpportunityEnterpriseCust(driver, testInReport, testName, testDataIteration, "500");

            ThinkTime(2);
            WaitUntil(driver, Control("RecommendedBusinessCentre", "Opportunity"), 30);
            Element(driver, Control("RecommendedBusinessCentre", "Opportunity")).Click();
            Element(driver, Control("RecommendedBusinessCentre", "Opportunity")).SendKeys("2556");
            ThinkTime(2);
            MoveToElement(driver, Control("Languagedropdown", "EnterpriseSales"));
            Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();
            saveFooter(driver, testInReport, testName, testDataIteration);
            SelectanyOpportunitybutton(driver, testInReport, testName, testDataIteration, "Refresh");
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Lead created successfully", "Lead created successfully");

        }
        public void createLeadwithCountry(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string LastName, string Email, string BPhone, string Source, string MajorSource, string MinorSource, string now, string contactcondition, string accountcondition, string newcontactname, string Language, string accountname, string Country)
        {
            // Click on New button
            ThinkTime(2);
            WaitUntil(driver, Control("NewTabOpportunity", "Opportunity"), 30);
            MoveToElement(driver, Control("NewTabOpportunity", "Opportunity"));
            Element(driver, Control("NewTabOpportunity", "Opportunity")).Click();
            ThinkTime(2);

            // Enter Lastname 
            WaitUntil(driver, Control("LeadLname", "Generic"), 30);
            MoveToElement(driver, Control("LeadLname", "Generic"));
            Element(driver, Control("LeadLname", "Generic")).SendKeys(Keys.Control + "a");
            Element(driver, Control("LeadLname", "Generic")).SendKeys(Keys.Delete);
            Element(driver, Control("LeadLname", "Generic")).SendKeys(LastName);
            Element(driver, Control("Lastnameclick", "Generic")).Click();

            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Last Name Field updated Successfully", "Last Name Field Verification");

            ThinkTime(3);

            //Select Email verification.

            WaitUntil(driver, Control("LeadEmail", "Generic"), 30);
            MoveToElement(driver, Control("LeadEmail", "Generic"));
            Element(driver, Control("LeadEmail", "Generic")).Click();
            ThinkTime(1);
            Element(driver, Control("LeadEmail", "Generic")).SendKeys(Keys.Control + "a");
            Element(driver, Control("LeadEmail", "Generic")).SendKeys(Keys.Delete);
            ThinkTime(2);
            Element(driver, Control("LeadEmail", "Generic")).SendKeys(Email);
            ThinkTime(5);

            if (Elements(driver, Control("ScriptDialg", "Opportunity")) > 0)
            {
                Element(driver, Control("HandleScriptError", "Opportunity")).Click();
                ThinkTime(3);
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "No Script error present", "No Script error present");

            }

            //  Element(driver, Control("Emialclick", "Generic")).Click();

            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Email Field updated Successfully", "Email Field Verification");

            ThinkTime(3);
            //scrollDownOpportunityEnterprise(driver, testInReport, testDataIteration, testName);

            // Select contact
            if (contactcondition == "NewContact")
            {
                ThinkTime(2);
                Element(driver, Control("LeadContactClick", "Generic")).Click();
                ThinkTime(2);
                WaitUntil(driver, Control("ContactInputField", "Generic"), 30);
                MoveToElement(driver, Control("ContactInputField", "Generic"));
                ElementHighlight(driver, Control("ContactInputField", "Generic"));
                ThinkTime(10);

                Element(driver, Control("ContactSearchButton", "Generic")).Click();

                ThinkTime(10);

                WaitUntil(driver, Control("NewContactButton", "Generic"), 30);
                MoveToElement(driver, Control("NewContactButton", "Generic"));
                Element(driver, Control("NewContactButton", "Generic")).Click();
                ThinkTime(5);
                MoveToElement(driver, Control("Contactlastname", "EnterpriseSales"));
                Element(driver, Control("Contactlastname", "EnterpriseSales")).Click();
                ThinkTime(2);
                Element(driver, Control("Contactlastname", "EnterpriseSales")).SendKeys(newcontactname);
                ThinkTime(5);


                MoveToElement(driver, Control("ActivityCreateContactInput", "EnterpriseSales"));
                Element(driver, Control("ActivityCreateContactInput", "EnterpriseSales")).Click();
                ThinkTime(2);
                Element(driver, Control("ActivityCreateContactInput", "EnterpriseSales")).SendKeys(Language);
                ThinkTime(5);
                MoveToElement(driver, Control("Languagedropdown", "EnterpriseSales"));
                Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();

                ThinkTime(3);

                MoveToElement(driver, Control("NewContactSaveButton", "Opportunity"));
                ActionsClick(driver, Control("SaveContactSales", "Opportunity"));
                ThinkTime(1);
            }

            if (contactcondition == "ExistingContact")
            {
                //create new contact
                WaitUntil(driver, Control("Contactlookup", "Opportunity"), 30);
                MoveToElement(driver, Control("Contactlookup", "Opportunity"));
                Element(driver, Control("Contactlookup", "Opportunity")).Click();
                Element(driver, Control("Contactlookup", "Opportunity")).SendKeys(newcontactname);
                ThinkTime(6);
                MoveToElement(driver, Control("ITSalesCustomer", "Opportunity"));
                Element(driver, Control("ITSalesCustomer", "Opportunity")).Click();
                ThinkTime(2);
            }

            if (accountcondition == "NewAccount")
            {
                string NewAccountName = accountname + now;
                ThinkTime(15);
                WaitUntil(driver, Control("VerifyCompanyField", "Opportunity"), 30);
                MoveToElement(driver, Control("VerifyCompanyField", "Opportunity"));
                ActionsClick(driver, Control("VerifyCompanyField", "Opportunity"));
                ThinkTime(1);
                ActionsClick(driver, Control("Accountlookupinputfield", "Opportunity"));
                ThinkTime(1);
                ActionsClick(driver, Control("NewAccountButton", "Opportunity"));
                ThinkTime(15);
                MoveToElement(driver, Control("Addnewcompanyname", "Opportunity"));
                Element(driver, Control("Addnewcompanyname", "Opportunity")).Click();
                ThinkTime(1);
                ThinkTime(1);

                Element(driver, Control("Addnewcompanyname", "Opportunity")).SendKeys(NewAccountName);
                ThinkTime(6);
                Element(driver, Control("Citylabel", "Opportunity")).Click();
                ThinkTime(2);
                if (Elements(driver, Control("Saveandclosebutton", "Opportunity")) > 0)
                {
                    MoveToElement(driver, Control("Saveandclosebutton", "Opportunity"));
                    Element(driver, Control("Saveandclosebutton", "Opportunity")).Click();
                }
                else
                {
                    ThinkTime(4);
                    MoveToElement(driver, Control("NewContactSaveButton", "Opportunity"));
                    Element(driver, Control("NewContactSaveButton", "Opportunity")).Click();
                }


                ThinkTime(8);
            }

            if (accountcondition == "ExistingAccount")
            {

            }

            scrollDownContactPage(driver, testInReport, testName, testDataIteration);
            //scrollDownContactPage(driver, testInReport, testName, testDataIteration);
            //Select Bussiness Phone verification.

            WaitUntil(driver, Control("LeadBussinessPhone", "Opportunity"), 30);
            MoveToElement(driver, Control("LeadBussinessPhone", "Opportunity"));
            Element(driver, Control("LeadBussinessPhone", "Opportunity")).SendKeys(Keys.Control + "a");
            Element(driver, Control("LeadBussinessPhone", "Opportunity")).SendKeys(Keys.Delete);
            Element(driver, Control("LeadBussinessPhone", "Opportunity")).SendKeys(BPhone);
            Element(driver, Control("BussinessPhoneClick", "Generic")).Click();

            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Bussiness Phone Field updated Successfully", "Bussiness Phone Field Verification");

            ThinkTime(3);
            //scrollDownOpportunityEnterprise(driver, testInReport, testDataIteration, testName);

            scrollDownOpportunity(driver, testInReport, testDataIteration, testName);
            scrollDownOpportunity(driver, testInReport, testDataIteration, testName);
            scrollDownOpportunity(driver, testInReport, testDataIteration, testName);

            //Country
            WaitUntil(driver, Control("CountryInput", "Accounts"), 80);
            MoveToElement(driver, Control("CountryInput", "Accounts"));
            //Element(driver, Control("LeadCountry", "Accounts")).Click();
            WaitUntil(driver, Control("CountryInput", "Accounts"), 30);
            Element(driver, Control("CountryInput", "Accounts")).Click();
            Element(driver, Control("CountryInput", "Accounts")).SendKeys(Country);
            ThinkTime(3);
            WaitUntil(driver, Control("CountrySelect", "Accounts"), 30);
            MoveToElement(driver, Control("CountrySelect", "Accounts"));
            Element(driver, Control("CountrySelect", "Accounts")).Click();
            scrollUpMiddle(driver, testInReport, testDataIteration, testName);
            ThinkTime(6);

            //MoveToElement(driver, Control("Languagedropdown", "EnterpriseSales"));
            //Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();
            ThinkTime(2);

            //MoveToElement(driver, Control("Languagedropdown","EnterpriseSales"));
            //Element(driver, Control("Languagedropdown","EnterpriseSales")).Click();
            //scrollDownOpportunityEnterprise(driver, testInReport, testDataIteration, testName);
            //scrollDownOpportunityPage(driver, testInReport, testName, testDataIteration);

            //Select Source verification

            if (Elements(driver, Control("SourceVerification", "Generic")) > 0)
            {
                WaitUntil(driver, Control("SourceVerification", "Generic"), 30);
                MoveToElement(driver, Control("SourceVerification", "Generic"));
                Element(driver, Control("SourceDeleteButton", "Generic")).Click();

                WaitUntil(driver, Control("SourceInputField", "Generic"), 30);
                MoveToElement(driver, Control("SourceInputField", "Generic"));
                Element(driver, Control("SourceInputField", "Generic")).SendKeys(Source);

                WaitUntil(driver, Control("SelectSourceDropdown", "Generic"), 30);
                MoveToElement(driver, Control("SelectSourceDropdown", "Generic"));
                Element(driver, Control("SelectSourceDropdown", "Generic")).Click();

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Source Field updated Successfully", "Source Field Verification");

            }

            else
            {
                WaitUntil(driver, Control("SourceInputField", "Generic"), 30);
                MoveToElement(driver, Control("SourceInputField", "Generic"));
                Element(driver, Control("SourceInputField", "Generic")).SendKeys(Keys.Control + "a");
                Element(driver, Control("SourceInputField", "Generic")).SendKeys(Keys.Delete);

                Element(driver, Control("SourceInputField", "Generic")).SendKeys(Source);
                ThinkTime(5);
                WaitUntil(driver, Control("SelectSourceDropdown", "Generic"), 30);
                MoveToElement(driver, Control("SelectSourceDropdown", "Generic"));
                Element(driver, Control("SelectSourceDropdown", "Generic")).Click();

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Source Field updated Successfully", "Source Field Verification");

            }

            ThinkTime(10);
            //scrollDownOpportunityPage(driver, testInReport, testName, testDataIteration);
            scrollDownOpportunity(driver, testInReport, testDataIteration, testName);

            //Select Major Source verification

            if (Elements(driver, Control("MajorSourceVerification", "Generic")) > 0)
            {
                WaitUntil(driver, Control("MajorSourceVerification", "Generic"), 30);
                MoveToElement(driver, Control("MajorSourceVerification", "Generic"));
                Element(driver, Control("MajorSourceDeleteButton", "Generic")).Click();

                WaitUntil(driver, Control("MajorSourceInputField", "Generic"), 30);
                MoveToElement(driver, Control("MajorSourceInputField", "Generic"));
                Element(driver, Control("MajorSourceInputField", "Generic")).SendKeys(MajorSource);
                ThinkTime(5);
                MoveToElement(driver, Control("Languagedropdown", "EnterpriseSales"));
                Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();

                //WaitUntil(driver, Control("SelectMSourceDropdown", "Generic"), 30);
                //MoveToElement(driver, Control("SelectMSourceDropdown", "Generic"));
                //Element(driver, Control("SelectMSourceDropdown", "Generic")).Click();

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Major Source Field updated Successfully", "Major Source Field Verification");

            }

            else
            {
                WaitUntil(driver, Control("MajorSourceInputField", "Generic"), 30);
                MoveToElement(driver, Control("MajorSourceInputField", "Generic"));
                Element(driver, Control("MajorSourceInputField", "Generic")).Clear();
                ThinkTime(3);
                Element(driver, Control("MajorSourceInputField", "Generic")).Click();
                Element(driver, Control("MajorSourceInputField", "Generic")).SendKeys(MajorSource);
                ThinkTime(15);
                MoveToElement(driver, Control("Languagedropdown", "EnterpriseSales"));
                Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();

                //WaitUntil(driver, Control("SelectMSourceDropdown", "Generic"), 30);
                //MoveToElement(driver, Control("SelectMSourceDropdown", "Generic"));
                //Element(driver, Control("SelectMSourceDropdown", "Generic")).Click();

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Major Source Field updated Successfully", "Major Source Field Verification");

            }


            //Select Minor Source verification

            if (Elements(driver, Control("MinorSourceVerification", "Generic")) > 0)
            {
                WaitUntil(driver, Control("MinorSourceVerification", "Generic"), 30);
                MoveToElement(driver, Control("MinorSourceVerification", "Generic"));
                Element(driver, Control("MinorSourceDeleteButton", "Generic")).Click();

                WaitUntil(driver, Control("MinorSourceInputButton", "Generic"), 30);
                MoveToElement(driver, Control("MinorSourceInputButton", "Generic"));
                Element(driver, Control("MinorSourceInputButton", "Generic")).SendKeys(Keys.Control + "a");
                Element(driver, Control("MinorSourceInputButton", "Generic")).SendKeys(Keys.Delete);

                // Element(driver, Control("Minorsourcelookup", "Generic")).Click();
                ThinkTime(2);
                Element(driver, Control("MinorSourceInputButton", "Generic")).SendKeys(MinorSource);
                ThinkTime(5);
                MoveToElement(driver, Control("Languagedropdown", "EnterpriseSales"));
                Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();

                //WaitUntil(driver, Control("SelectMinorSourceDropdown", "Generic"), 30);
                //MoveToElement(driver, Control("SelectMinorSourceDropdown", "Generic"));
                //Element(driver, Control("SelectMinorSourceDropdown", "Generic")).Click();

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Minor Source Field updated Successfully", "Minor Source Field Verification");

            }

            else
            {
                WaitUntil(driver, Control("MinorSourceInputButton", "Generic"), 30);
                MoveToElement(driver, Control("MinorSourceInputButton", "Generic"));
                Element(driver, Control("MinorSourceInputButton", "Generic")).SendKeys(Keys.Control + "a");
                Element(driver, Control("MinorSourceInputButton", "Generic")).SendKeys(Keys.Delete);
                // Element(driver, Control("Minorsourcelookup", "Generic")).Click();
                ThinkTime(2);
                Element(driver, Control("MinorSourceInputButton", "Generic")).SendKeys(MinorSource);
                ThinkTime(5);
                MoveToElement(driver, Control("Languagedropdown", "EnterpriseSales"));
                Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();

                //WaitUntil(driver, Control("SelectMinorSourceDropdown", "Generic"), 30);
                //MoveToElement(driver, Control("SelectMinorSourceDropdown", "Generic"));

                //Element(driver, Control("SelectMinorSourceDropdown", "Generic")).Click();

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Minor Source Field updated Successfully", "Minor Source Field Verification");

            }


            saveFooter(driver, testInReport, testName, testDataIteration);
            ThinkTime(8);
        }

        public string DuplicateLead(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string LastName, string Email, string Product, string Firstname, string Source, string MajorSource, string MinorSource, string Country, string BrokerContact)
        {
            // Click on New button
            ThinkTime(2);
            WaitUntil(driver, Control("NewTabOpportunity", "Opportunity"), 30);
            MoveToElement(driver, Control("NewTabOpportunity", "Opportunity"));
            Element(driver, Control("NewTabOpportunity", "Opportunity")).Click();
            ThinkTime(6);
            HidingPureCloudNew(driver, testInReport, testName, testDataIteration);

            //Enter FirstName
            WaitUntil(driver, Control("Firstname", "Opportunity"), 30);
            MoveToElement(driver, Control("Firstname", "Opportunity"));
            Element(driver, Control("Firstname", "Opportunity")).SendKeys(Keys.Control + "a");
            Element(driver, Control("Firstname", "Opportunity")).SendKeys(Keys.Delete);
            Element(driver, Control("Firstname", "Opportunity")).SendKeys(Firstname);

            // Enter Lastname 
            WaitUntil(driver, Control("LeadLname", "Generic"), 30);
            MoveToElement(driver, Control("LeadLname", "Generic"));
            Element(driver, Control("LeadLname", "Generic")).SendKeys(Keys.Control + "a");
            Element(driver, Control("LeadLname", "Generic")).SendKeys(Keys.Delete);
            Element(driver, Control("LeadLname", "Generic")).SendKeys(LastName);
            Element(driver, Control("Lastnameclick", "Generic")).Click();

            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Last Name Field updated Successfully", "Last Name Field Verification");

            ThinkTime(3);

            //Select Email verification.

            WaitUntil(driver, Control("LeadEmail", "Generic"), 30);
            MoveToElement(driver, Control("LeadEmail", "Generic"));
            Element(driver, Control("LeadEmail", "Generic")).Click();
            ThinkTime(1);
            Element(driver, Control("LeadEmail", "Generic")).SendKeys(Keys.Control + "a");
            Element(driver, Control("LeadEmail", "Generic")).SendKeys(Keys.Delete);
            ThinkTime(2);
            Element(driver, Control("LeadEmail", "Generic")).SendKeys(Email);
            ThinkTime(5);

            if (Elements(driver, Control("ScriptDialg", "Opportunity")) > 0)
            {
                Element(driver, Control("HandleScriptError", "Opportunity")).Click();
                ThinkTime(3);
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "No Script error present", "No Script error present");

            }

            //  Element(driver, Control("Emialclick", "Generic")).Click();

            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Email Field updated Successfully", "Email Field Verification");

            ThinkTime(3);
            //Country

            WaitUntil(driver, Control("Product", "Opportunity"), 30);
            Element(driver, Control("Product", "Opportunity")).Click();
            Element(driver, Control("Product", "Opportunity")).SendKeys(Product);
            ThinkTime(5);
            MoveToElement(driver, Control("Languagedropdown", "EnterpriseSales"));
            Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();

            ThinkTime(3);
            scrollDownOpportunityPage(driver, testInReport, testName, testDataIteration);

            ThinkTime(3);



            if (Elements(driver, Control("SourceVerification", "Generic")) > 0)
            {
                WaitUntil(driver, Control("SourceVerification", "Generic"), 30);
                MoveToElement(driver, Control("SourceVerification", "Generic"));
                Element(driver, Control("SourceDeleteButton", "Generic")).Click();

                WaitUntil(driver, Control("SourceInputField", "Generic"), 30);
                MoveToElement(driver, Control("SourceInputField", "Generic"));
                Element(driver, Control("SourceInputField", "Generic")).SendKeys(Source);
                ThinkTime(5);
                WaitUntil(driver, Control("SelectSourceDropdown", "Generic"), 30);
                MoveToElement(driver, Control("SelectSourceDropdown", "Generic"));
                Element(driver, Control("SelectSourceDropdown", "Generic")).Click();

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Source Field updated Successfully", "Source Field Verification");

            }

            else
            {
                WaitUntil(driver, Control("SourceInputField", "Generic"), 30);
                MoveToElement(driver, Control("SourceInputField", "Generic"));
                Element(driver, Control("SourceInputField", "Generic")).SendKeys(Keys.Control + "a");
                Element(driver, Control("SourceInputField", "Generic")).SendKeys(Keys.Delete);

                Element(driver, Control("SourceInputField", "Generic")).SendKeys(Source);
                ThinkTime(5);
                WaitUntil(driver, Control("SelectSourceDropdown", "Generic"), 30);
                MoveToElement(driver, Control("SelectSourceDropdown", "Generic"));
                Element(driver, Control("SelectSourceDropdown", "Generic")).Click();

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Source Field updated Successfully", "Source Field Verification");

            }

            ThinkTime(10);
            // scrollDownOpportunityPage(driver, testInReport, testName, testDataIteration);


            //Select Major Source verification

            if (Elements(driver, Control("MajorSourceVerification", "Generic")) > 0)
            {
                WaitUntil(driver, Control("MajorSourceVerification", "Generic"), 30);
                MoveToElement(driver, Control("MajorSourceVerification", "Generic"));
                Element(driver, Control("MajorSourceDeleteButton", "Generic")).Click();

                WaitUntil(driver, Control("MajorSourceInputField", "Generic"), 30);
                MoveToElement(driver, Control("MajorSourceInputField", "Generic"));
                Element(driver, Control("MajorSourceInputField", "Generic")).SendKeys(MajorSource);
                ThinkTime(5);
                MoveToElement(driver, Control("Languagedropdown", "EnterpriseSales"));
                Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();


                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Major Source Field updated Successfully", "Major Source Field Verification");

            }

            else
            {
                WaitUntil(driver, Control("MajorSourceInputField", "Generic"), 30);
                MoveToElement(driver, Control("MajorSourceInputField", "Generic"));
                Element(driver, Control("MajorSourceInputField", "Generic")).Clear();
                ThinkTime(3);
                Element(driver, Control("MajorSourceInputField", "Generic")).SendKeys(MajorSource);
                ThinkTime(5);
                MoveToElement(driver, Control("Languagedropdown", "EnterpriseSales"));
                Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Major Source Field updated Successfully", "Major Source Field Verification");

            }


            //Select Minor Source verification

            if (Elements(driver, Control("MinorSourceVerification", "Generic")) > 0)
            {
                WaitUntil(driver, Control("MinorSourceVerification", "Generic"), 30);
                MoveToElement(driver, Control("MinorSourceVerification", "Generic"));
                Element(driver, Control("MinorSourceDeleteButton", "Generic")).Click();

                WaitUntil(driver, Control("MinorSourceInputButton", "Generic"), 30);
                MoveToElement(driver, Control("MinorSourceInputButton", "Generic"));
                Element(driver, Control("MinorSourceInputButton", "Generic")).SendKeys(Keys.Control + "a");
                Element(driver, Control("MinorSourceInputButton", "Generic")).SendKeys(Keys.Delete);

                ThinkTime(2);
                Element(driver, Control("MinorSourceInputButton", "Generic")).SendKeys(MinorSource);
                ThinkTime(5);
                MoveToElement(driver, Control("Languagedropdown", "EnterpriseSales"));
                Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Minor Source Field updated Successfully", "Minor Source Field Verification");

            }

            else
            {
                WaitUntil(driver, Control("MinorSourceInputButton", "Generic"), 30);
                MoveToElement(driver, Control("MinorSourceInputButton", "Generic"));
                Element(driver, Control("MinorSourceInputButton", "Generic")).SendKeys(Keys.Control + "a");
                Element(driver, Control("MinorSourceInputButton", "Generic")).SendKeys(Keys.Delete);

                ThinkTime(2);
                Element(driver, Control("MinorSourceInputButton", "Generic")).SendKeys(MinorSource);
                ThinkTime(5);
                MoveToElement(driver, Control("Languagedropdown", "EnterpriseSales"));
                Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Minor Source Field updated Successfully", "Minor Source Field Verification");

            }
            ThinkTime(5);

            //Country
            //scrollDownOpportunityEnterpriseCust(driver, testInReport, testName, testDataIteration,"700");

            scrollDownOpportunityPage(driver, testInReport, testName, testDataIteration);

            WaitUntil(driver, Control("RecommendedBusinessCentre", "Opportunity"), 30);
            MoveToElement(driver, Control("RecommendedBusinessCentre", "Opportunity"));
            Element(driver, Control("RecommendedBusinessCentre", "Opportunity")).Click();
            Element(driver, Control("RecommendedBusinessCentre", "Opportunity")).SendKeys(Country);
            ThinkTime(3);
            ThinkTime(5);
            MoveToElement(driver, Control("Languagedropdown", "EnterpriseSales"));
            Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();
            scrollUpMiddle(driver, testInReport, testDataIteration, testName);
            ThinkTime(6);

            WaitUntil(driver, Control("BrokerTab", "Opportunity"), 30);
            Element(driver, Control("BrokerTab", "Opportunity")).Click();
            ThinkTime(5);

            WaitUntil(driver, Control("BrokerContact", "Opportunity"), 30);
            MoveToElement(driver, Control("BrokerContact", "Opportunity"));
            Element(driver, Control("BrokerContact", "Opportunity")).SendKeys(Keys.Control + "a");
            Element(driver, Control("BrokerContact", "Opportunity")).SendKeys(Keys.Delete);

            ThinkTime(2);
            Element(driver, Control("BrokerContact", "Opportunity")).SendKeys(BrokerContact);
            ThinkTime(5);
            MoveToElement(driver, Control("Languagedropdown", "EnterpriseSales"));
            Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();
            ThinkTime(2);
            saveFooter(driver, testInReport, testName, testDataIteration);
            ThinkTime(8);
            string leadname = Element(driver, Control("LeadTitle", "Opportunity")).GetAttribute("innerText");
            return leadname;


        }

        public string CreateLeadDirectsales(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string LastName, string Email, string Product, string Firstname, string Source, string MajorSource, string MinorSource, string Country)
        {
            // Click on New button
            ThinkTime(2);
            WaitUntil(driver, Control("NewTabOpportunity", "Opportunity"), 30);
            MoveToElement(driver, Control("NewTabOpportunity", "Opportunity"));
            Element(driver, Control("NewTabOpportunity", "Opportunity")).Click();
            ThinkTime(6);
            HidingPureCloudNew(driver, testInReport, testName, testDataIteration);

            //Enter FirstName
            WaitUntil(driver, Control("Firstname", "Opportunity"), 30);
            MoveToElement(driver, Control("Firstname", "Opportunity"));
            Element(driver, Control("Firstname", "Opportunity")).SendKeys(Keys.Control + "a");
            Element(driver, Control("Firstname", "Opportunity")).SendKeys(Keys.Delete);
            Element(driver, Control("Firstname", "Opportunity")).SendKeys(Firstname);

            // Enter Lastname 
            WaitUntil(driver, Control("LeadLname", "Generic"), 30);
            MoveToElement(driver, Control("LeadLname", "Generic"));
            Element(driver, Control("LeadLname", "Generic")).SendKeys(Keys.Control + "a");
            Element(driver, Control("LeadLname", "Generic")).SendKeys(Keys.Delete);
            Element(driver, Control("LeadLname", "Generic")).SendKeys(LastName);
            Element(driver, Control("Lastnameclick", "Generic")).Click();

            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Last Name Field updated Successfully", "Last Name Field Verification");

            ThinkTime(3);

            //Select Email verification.

            WaitUntil(driver, Control("LeadEmail", "Generic"), 30);
            MoveToElement(driver, Control("LeadEmail", "Generic"));
            Element(driver, Control("LeadEmail", "Generic")).Click();
            ThinkTime(1);
            Element(driver, Control("LeadEmail", "Generic")).SendKeys(Keys.Control + "a");
            Element(driver, Control("LeadEmail", "Generic")).SendKeys(Keys.Delete);
            ThinkTime(2);
            Element(driver, Control("LeadEmail", "Generic")).SendKeys(Email);
            ThinkTime(5);

            if (Elements(driver, Control("ScriptDialg", "Opportunity")) > 0)
            {
                Element(driver, Control("HandleScriptError", "Opportunity")).Click();
                ThinkTime(3);
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "No Script error present", "No Script error present");

            }

            //  Element(driver, Control("Emialclick", "Generic")).Click();

            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Email Field updated Successfully", "Email Field Verification");

            ThinkTime(3);
            //Country

            WaitUntil(driver, Control("Product", "Opportunity"), 30);
            Element(driver, Control("Product", "Opportunity")).Click();
            Element(driver, Control("Product", "Opportunity")).SendKeys(Product);
            ThinkTime(5);
            MoveToElement(driver, Control("Languagedropdown", "EnterpriseSales"));
            Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();

            ThinkTime(3);
            scrollDownOpportunityPage(driver, testInReport, testName, testDataIteration);

            ThinkTime(3);



            if (Elements(driver, Control("SourceVerification", "Generic")) > 0)
            {
                WaitUntil(driver, Control("SourceVerification", "Generic"), 30);
                MoveToElement(driver, Control("SourceVerification", "Generic"));
                Element(driver, Control("SourceDeleteButton", "Generic")).Click();

                WaitUntil(driver, Control("SourceInputField", "Generic"), 30);
                MoveToElement(driver, Control("SourceInputField", "Generic"));
                Element(driver, Control("SourceInputField", "Generic")).SendKeys(Source);
                ThinkTime(5);
                WaitUntil(driver, Control("SelectSourceDropdown", "Generic"), 30);
                MoveToElement(driver, Control("SelectSourceDropdown", "Generic"));
                Element(driver, Control("SelectSourceDropdown", "Generic")).Click();

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Source Field updated Successfully", "Source Field Verification");

            }

            else
            {
                WaitUntil(driver, Control("SourceInputField", "Generic"), 30);
                MoveToElement(driver, Control("SourceInputField", "Generic"));
                Element(driver, Control("SourceInputField", "Generic")).SendKeys(Keys.Control + "a");
                Element(driver, Control("SourceInputField", "Generic")).SendKeys(Keys.Delete);

                Element(driver, Control("SourceInputField", "Generic")).SendKeys(Source);
                ThinkTime(5);
                WaitUntil(driver, Control("SelectSourceDropdown", "Generic"), 30);
                MoveToElement(driver, Control("SelectSourceDropdown", "Generic"));
                Element(driver, Control("SelectSourceDropdown", "Generic")).Click();

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Source Field updated Successfully", "Source Field Verification");

            }

            ThinkTime(10);
            // scrollDownOpportunityPage(driver, testInReport, testName, testDataIteration);


            //Select Major Source verification

            if (Elements(driver, Control("MajorSourceVerification", "Generic")) > 0)
            {
                WaitUntil(driver, Control("MajorSourceVerification", "Generic"), 30);
                MoveToElement(driver, Control("MajorSourceVerification", "Generic"));
                Element(driver, Control("MajorSourceDeleteButton", "Generic")).Click();

                WaitUntil(driver, Control("MajorSourceInputField", "Generic"), 30);
                MoveToElement(driver, Control("MajorSourceInputField", "Generic"));
                Element(driver, Control("MajorSourceInputField", "Generic")).SendKeys(MajorSource);
                ThinkTime(5);
                MoveToElement(driver, Control("Languagedropdown", "EnterpriseSales"));
                Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();


                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Major Source Field updated Successfully", "Major Source Field Verification");

            }

            else
            {
                WaitUntil(driver, Control("MajorSourceInputField", "Generic"), 30);
                MoveToElement(driver, Control("MajorSourceInputField", "Generic"));
                Element(driver, Control("MajorSourceInputField", "Generic")).Clear();
                ThinkTime(3);
                Element(driver, Control("MajorSourceInputField", "Generic")).SendKeys(MajorSource);
                ThinkTime(5);
                MoveToElement(driver, Control("Languagedropdown", "EnterpriseSales"));
                Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Major Source Field updated Successfully", "Major Source Field Verification");

            }


            //Select Minor Source verification

            if (Elements(driver, Control("MinorSourceVerification", "Generic")) > 0)
            {
                WaitUntil(driver, Control("MinorSourceVerification", "Generic"), 30);
                MoveToElement(driver, Control("MinorSourceVerification", "Generic"));
                Element(driver, Control("MinorSourceDeleteButton", "Generic")).Click();

                WaitUntil(driver, Control("MinorSourceInputButton", "Generic"), 30);
                MoveToElement(driver, Control("MinorSourceInputButton", "Generic"));
                Element(driver, Control("MinorSourceInputButton", "Generic")).SendKeys(Keys.Control + "a");
                Element(driver, Control("MinorSourceInputButton", "Generic")).SendKeys(Keys.Delete);

                ThinkTime(2);
                Element(driver, Control("MinorSourceInputButton", "Generic")).SendKeys(MinorSource);
                ThinkTime(5);
                MoveToElement(driver, Control("Languagedropdown", "EnterpriseSales"));
                Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Minor Source Field updated Successfully", "Minor Source Field Verification");

            }

            else
            {
                WaitUntil(driver, Control("MinorSourceInputButton", "Generic"), 30);
                MoveToElement(driver, Control("MinorSourceInputButton", "Generic"));
                Element(driver, Control("MinorSourceInputButton", "Generic")).SendKeys(Keys.Control + "a");
                Element(driver, Control("MinorSourceInputButton", "Generic")).SendKeys(Keys.Delete);

                ThinkTime(2);
                Element(driver, Control("MinorSourceInputButton", "Generic")).SendKeys(MinorSource);
                ThinkTime(5);
                MoveToElement(driver, Control("Languagedropdown", "EnterpriseSales"));
                Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Minor Source Field updated Successfully", "Minor Source Field Verification");

            }
            ThinkTime(5);

            //Country
            //scrollDownOpportunityEnterpriseCust(driver, testInReport, testName, testDataIteration,"700");

            scrollDownOpportunityPage(driver, testInReport, testName, testDataIteration);

            WaitUntil(driver, Control("RecommendedBusinessCentre", "Opportunity"), 30);
            MoveToElement(driver, Control("RecommendedBusinessCentre", "Opportunity"));
            Element(driver, Control("RecommendedBusinessCentre", "Opportunity")).Click();
            Element(driver, Control("RecommendedBusinessCentre", "Opportunity")).SendKeys(Country);
            ThinkTime(3);
            ThinkTime(5);
            MoveToElement(driver, Control("Languagedropdown", "EnterpriseSales"));
            Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();
            scrollUpMiddle(driver, testInReport, testDataIteration, testName);
            ThinkTime(6);

            saveFooter(driver, testInReport, testName, testDataIteration);
            ThinkTime(8);
            string leadname = Element(driver, Control("LeadTitle", "Opportunity")).GetAttribute("innerText");
            return leadname;


        }







        public string DuplicateLead1(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string LastName, string Email, string Product, string Firstname, string primarylead, string Source, string MajorSource, string MinorSource, string Country, string BrokerContact)
        {
            // Click on New button
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            ThinkTime(2);
            WaitUntil(driver, Control("NewTabLead", "Opportunity"), 30);
            MoveToElement(driver, Control("NewTabLead", "Opportunity"));
            Element(driver, Control("NewTabLead", "Opportunity")).Click();
            ThinkTime(6);


            //Enter FirstName
            WaitUntil(driver, Control("Firstname", "Opportunity"), 30);
            MoveToElement(driver, Control("Firstname", "Opportunity"));
            Element(driver, Control("Firstname", "Opportunity")).SendKeys(Keys.Control + "a");
            Element(driver, Control("Firstname", "Opportunity")).SendKeys(Keys.Delete);
            Element(driver, Control("Firstname", "Opportunity")).SendKeys(Firstname);

            // Enter Lastname 
            WaitUntil(driver, Control("LeadLname", "Generic"), 30);
            MoveToElement(driver, Control("LeadLname", "Generic"));
            Element(driver, Control("LeadLname", "Generic")).SendKeys(Keys.Control + "a");
            Element(driver, Control("LeadLname", "Generic")).SendKeys(Keys.Delete);
            Element(driver, Control("LeadLname", "Generic")).SendKeys(LastName);
            Element(driver, Control("Lastnameclick", "Generic")).Click();

            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Last Name Field updated Successfully", "Last Name Field Verification");

            ThinkTime(3);
            //Country

            WaitUntil(driver, Control("Product", "Opportunity"), 30);
            Element(driver, Control("Product", "Opportunity")).Click();
            Element(driver, Control("Product", "Opportunity")).SendKeys(Product);
            ThinkTime(3);
            MoveToElement(driver, Control("Languagedropdown", "EnterpriseSales"));
            Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();

            ThinkTime(3);

            //Select Email verification.

            WaitUntil(driver, Control("LeadEmail", "Generic"), 30);
            MoveToElement(driver, Control("LeadEmail", "Generic"));
            Element(driver, Control("LeadEmail", "Generic")).Click();
            ThinkTime(1);
            Element(driver, Control("LeadEmail", "Generic")).SendKeys(Keys.Control + "a");
            Element(driver, Control("LeadEmail", "Generic")).SendKeys(Keys.Delete);
            ThinkTime(2);
            Element(driver, Control("LeadEmail", "Generic")).SendKeys(Email);
            ThinkTime(5);

            if (Elements(driver, Control("ScriptDialg", "Opportunity")) > 0)
            {
                Element(driver, Control("HandleScriptError", "Opportunity")).Click();
                ThinkTime(3);
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "No Script error present", "No Script error present");

            }
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Email Field updated Successfully", "Email Field Verification");


            ThinkTime(3);

            //Primary lead
            WaitUntil(driver, Control("PrimaryLead", "Opportunity"), 30);
            MoveToElement(driver, Control("PrimaryLead", "Opportunity"));
            Element(driver, Control("PrimaryLead", "Opportunity")).Click();
            ThinkTime(1);
            Element(driver, Control("PrimaryLead", "Opportunity")).SendKeys(Keys.Control + "a");
            Element(driver, Control("PrimaryLead", "Opportunity")).SendKeys(Keys.Delete);
            ThinkTime(2);
            Element(driver, Control("PrimaryLead", "Opportunity")).SendKeys(primarylead);
            ThinkTime(5);
            MoveToElement(driver, Control("Languagedropdown", "EnterpriseSales"));
            Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();

            ThinkTime(3);
            scrollDownOpportunityPage(driver, testInReport, testName, testDataIteration);

            ThinkTime(3);


            if (Elements(driver, Control("SourceVerification", "Generic")) > 0)
            {
                WaitUntil(driver, Control("SourceVerification", "Generic"), 30);
                MoveToElement(driver, Control("SourceVerification", "Generic"));
                Element(driver, Control("SourceDeleteButton", "Generic")).Click();

                WaitUntil(driver, Control("SourceInputField", "Generic"), 30);
                MoveToElement(driver, Control("SourceInputField", "Generic"));
                Element(driver, Control("SourceInputField", "Generic")).SendKeys(Source);

                WaitUntil(driver, Control("SelectSourceDropdown", "Generic"), 30);
                MoveToElement(driver, Control("SelectSourceDropdown", "Generic"));
                Element(driver, Control("SelectSourceDropdown", "Generic")).Click();

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Source Field updated Successfully", "Source Field Verification");

            }

            else
            {
                WaitUntil(driver, Control("SourceInputField", "Generic"), 30);
                MoveToElement(driver, Control("SourceInputField", "Generic"));
                Element(driver, Control("SourceInputField", "Generic")).SendKeys(Keys.Control + "a");
                Element(driver, Control("SourceInputField", "Generic")).SendKeys(Keys.Delete);

                Element(driver, Control("SourceInputField", "Generic")).SendKeys(Source);
                ThinkTime(5);
                WaitUntil(driver, Control("SelectSourceDropdown", "Generic"), 30);
                MoveToElement(driver, Control("SelectSourceDropdown", "Generic"));
                Element(driver, Control("SelectSourceDropdown", "Generic")).Click();

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Source Field updated Successfully", "Source Field Verification");

            }

            ThinkTime(10);
            //   scrollDownOpportunityPage(driver, testInReport, testName, testDataIteration);


            //Select Major Source verification

            if (Elements(driver, Control("MajorSourceVerification", "Generic")) > 0)
            {
                WaitUntil(driver, Control("MajorSourceVerification", "Generic"), 30);
                MoveToElement(driver, Control("MajorSourceVerification", "Generic"));
                Element(driver, Control("MajorSourceDeleteButton", "Generic")).Click();

                WaitUntil(driver, Control("MajorSourceInputField", "Generic"), 30);
                MoveToElement(driver, Control("MajorSourceInputField", "Generic"));
                Element(driver, Control("MajorSourceInputField", "Generic")).SendKeys(MajorSource);
                ThinkTime(5);
                MoveToElement(driver, Control("Languagedropdown", "EnterpriseSales"));
                Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();


                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Major Source Field updated Successfully", "Major Source Field Verification");

            }

            else
            {
                WaitUntil(driver, Control("MajorSourceInputField", "Generic"), 30);
                MoveToElement(driver, Control("MajorSourceInputField", "Generic"));
                Element(driver, Control("MajorSourceInputField", "Generic")).Clear();
                ThinkTime(3);
                Element(driver, Control("MajorSourceInputField", "Generic")).SendKeys(MajorSource);
                ThinkTime(5);
                MoveToElement(driver, Control("Languagedropdown", "EnterpriseSales"));
                Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Major Source Field updated Successfully", "Major Source Field Verification");

            }


            //Select Minor Source verification

            if (Elements(driver, Control("MinorSourceVerification", "Generic")) > 0)
            {
                WaitUntil(driver, Control("MinorSourceVerification", "Generic"), 30);
                MoveToElement(driver, Control("MinorSourceVerification", "Generic"));
                Element(driver, Control("MinorSourceDeleteButton", "Generic")).Click();

                WaitUntil(driver, Control("MinorSourceInputButton", "Generic"), 30);
                MoveToElement(driver, Control("MinorSourceInputButton", "Generic"));
                Element(driver, Control("MinorSourceInputButton", "Generic")).SendKeys(Keys.Control + "a");
                Element(driver, Control("MinorSourceInputButton", "Generic")).SendKeys(Keys.Delete);

                ThinkTime(2);
                Element(driver, Control("MinorSourceInputButton", "Generic")).SendKeys(MinorSource);
                ThinkTime(5);
                MoveToElement(driver, Control("Languagedropdown", "EnterpriseSales"));
                Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Minor Source Field updated Successfully", "Minor Source Field Verification");

            }

            else
            {
                WaitUntil(driver, Control("MinorSourceInputButton", "Generic"), 30);
                MoveToElement(driver, Control("MinorSourceInputButton", "Generic"));
                Element(driver, Control("MinorSourceInputButton", "Generic")).Click();
                Element(driver, Control("MinorSourceInputButton", "Generic")).SendKeys(Keys.Control + "a");
                Element(driver, Control("MinorSourceInputButton", "Generic")).SendKeys(Keys.Delete);
                // Element(driver, Control("Minorsourcelookup", "Generic")).Click();
                ThinkTime(2);
                Element(driver, Control("MinorSourceInputButton", "Generic")).SendKeys(MinorSource);
                ThinkTime(5);
                MoveToElement(driver, Control("Languagedropdown", "EnterpriseSales"));
                Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Minor Source Field updated Successfully", "Minor Source Field Verification");

            }
            scrollDownOpportunityEnterpriseCust(driver, testInReport, testDataIteration, testName, "500");
            ThinkTime(3);
            // scrollDownOpportunityPage(driver, testInReport, testName, testDataIteration);
            ThinkTime(3);

            //Country
            WaitUntil(driver, Control("RecommendedBusinessCentre", "Opportunity"), 30);
            Element(driver, Control("RecommendedBusinessCentre", "Opportunity")).Click();
            Element(driver, Control("RecommendedBusinessCentre", "Opportunity")).SendKeys(Country);
            ThinkTime(3);
            MoveToElement(driver, Control("Languagedropdown", "EnterpriseSales"));
            Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();

            ThinkTime(3);
            scrollUpMiddle(driver, testInReport, testDataIteration, testName);
            ThinkTime(6);

            WaitUntil(driver, Control("BrokerTab", "Opportunity"), 30);
            Element(driver, Control("BrokerTab", "Opportunity")).Click();
            ThinkTime(5);

            WaitUntil(driver, Control("BrokerContact", "Opportunity"), 30);
            MoveToElement(driver, Control("BrokerContact", "Opportunity"));
            Element(driver, Control("BrokerContact", "Opportunity")).SendKeys(Keys.Control + "a");
            Element(driver, Control("BrokerContact", "Opportunity")).SendKeys(Keys.Delete);

            ThinkTime(2);
            Element(driver, Control("BrokerContact", "Opportunity")).SendKeys(BrokerContact);
            ThinkTime(5);
            MoveToElement(driver, Control("Languagedropdown", "EnterpriseSales"));
            Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();
            ThinkTime(2);
            saveFooter(driver, testInReport, testName, testDataIteration);
            ThinkTime(8);
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            string leadname1 = Element(driver, Control("LeadTitle", "Opportunity")).GetAttribute("innerText");
            return leadname1;

        }


        public void createleaddirectsalescountry(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string LastName, string Email, string BPhone, string Source, string MajorSource, string MinorSource, string now, string contactcondition, string accountcondition, string newcontactname, string Language, string accountname, string RecomendedBussinessCenre)
        {
            // Click on New button
            ThinkTime(4);
            WaitUntil(driver, Control("NewTabOpportunity", "Opportunity"), 30);
            MoveToElement(driver, Control("NewTabOpportunity", "Opportunity"));
            Element(driver, Control("NewTabOpportunity", "Opportunity")).Click();
            ThinkTime(4);

            // Enter Lastname 
            WaitUntil(driver, Control("LeadLname", "Generic"), 30);
            MoveToElement(driver, Control("LeadLname", "Generic"));
            Element(driver, Control("LeadLname", "Generic")).SendKeys(Keys.Control + "a");
            Element(driver, Control("LeadLname", "Generic")).SendKeys(Keys.Delete);
            Element(driver, Control("LeadLname", "Generic")).SendKeys(LastName);
            Element(driver, Control("Lastnameclick", "Generic")).Click();

            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Last Name Field updated Successfully", "Last Name Field Verification");

            ThinkTime(3);

            //Select Email verification.

            WaitUntil(driver, Control("LeadEmail", "Generic"), 30);
            MoveToElement(driver, Control("LeadEmail", "Generic"));
            Element(driver, Control("LeadEmail", "Generic")).Click();
            ThinkTime(1);
            Element(driver, Control("LeadEmail", "Generic")).SendKeys(Keys.Control + "a");
            Element(driver, Control("LeadEmail", "Generic")).SendKeys(Keys.Delete);
            ThinkTime(2);
            Element(driver, Control("LeadEmail", "Generic")).SendKeys(Email);
            ThinkTime(5);

            if (Elements(driver, Control("ScriptDialg", "Opportunity")) > 0)
            {
                Element(driver, Control("HandleScriptError", "Opportunity")).Click();
                ThinkTime(3);
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "No Script error present", "No Script error present");

            }

            //  Element(driver, Control("Emialclick", "Generic")).Click();

            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Email Field updated Successfully", "Email Field Verification");

            ThinkTime(3);

            // Select contact
            if (contactcondition == "NewContact")
            {
                ThinkTime(2);
                Element(driver, Control("LeadContactClick", "Generic")).Click();
                ThinkTime(2);
                WaitUntil(driver, Control("ContactInputField", "Generic"), 30);
                MoveToElement(driver, Control("ContactInputField", "Generic"));
                ElementHighlight(driver, Control("ContactInputField", "Generic"));
                ThinkTime(10);

                Element(driver, Control("ContactSearchButton", "Generic")).Click();

                ThinkTime(10);

                WaitUntil(driver, Control("NewContactButton", "Generic"), 30);
                MoveToElement(driver, Control("NewContactButton", "Generic"));
                Element(driver, Control("NewContactButton", "Generic")).Click();
                ThinkTime(5);
                MoveToElement(driver, Control("Contactlastname", "EnterpriseSales"));
                Element(driver, Control("Contactlastname", "EnterpriseSales")).Click();
                ThinkTime(2);
                Element(driver, Control("Contactlastname", "EnterpriseSales")).SendKeys(Keys.Control + "a");
                Element(driver, Control("Contactlastname", "EnterpriseSales")).SendKeys(Keys.Delete);
                Element(driver, Control("Contactlastname", "EnterpriseSales")).SendKeys(newcontactname);
                ThinkTime(5);


                MoveToElement(driver, Control("ActivityCreateContactInput", "EnterpriseSales"));
                Element(driver, Control("ActivityCreateContactInput", "EnterpriseSales")).Click();
                ThinkTime(2);
                Element(driver, Control("ActivityCreateContactInput", "EnterpriseSales")).SendKeys(Keys.Control + "a");
                Element(driver, Control("ActivityCreateContactInput", "EnterpriseSales")).SendKeys(Keys.Delete);
                Element(driver, Control("ActivityCreateContactInput", "EnterpriseSales")).SendKeys(Language);
                ThinkTime(5);
                MoveToElement(driver, Control("Languagedropdown", "EnterpriseSales"));
                Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();

                ThinkTime(3);

                MoveToElement(driver, Control("NewContactSaveButton", "Opportunity"));
                ActionsClick(driver, Control("SaveContactSales", "Opportunity"));
                ThinkTime(1);
            }

            if (contactcondition == "ExistingContact")
            {
                //create new contact
                WaitUntil(driver, Control("Contactlookup", "Opportunity"), 30);
                MoveToElement(driver, Control("Contactlookup", "Opportunity"));
                Element(driver, Control("Contactlookup", "Opportunity")).Click();
                Element(driver, Control("Contactlookup", "Opportunity")).SendKeys(Keys.Control + "a");
                Element(driver, Control("Contactlookup", "Opportunity")).SendKeys(Keys.Delete);
                Element(driver, Control("Contactlookup", "Opportunity")).SendKeys(newcontactname);
                ThinkTime(6);
                MoveToElement(driver, Control("ITSalesCustomer", "Opportunity"));
                Element(driver, Control("ITSalesCustomer", "Opportunity")).Click();
                ThinkTime(2);
            }

            if (accountcondition == "NewAccount")
            {
                string NewAccountName = accountname + now;
                ThinkTime(15);
                WaitUntil(driver, Control("VerifyCompanyField", "Opportunity"), 30);
                MoveToElement(driver, Control("VerifyCompanyField", "Opportunity"));
                ActionsClick(driver, Control("VerifyCompanyField", "Opportunity"));
                ThinkTime(1);
                ActionsClick(driver, Control("Accountlookupinputfield", "Opportunity"));
                ThinkTime(1);
                ActionsClick(driver, Control("NewAccountButton", "Opportunity"));
                ThinkTime(15);
                MoveToElement(driver, Control("Addnewcompanyname", "Opportunity"));
                Element(driver, Control("Addnewcompanyname", "Opportunity")).Click();
                ThinkTime(1);
                ThinkTime(1);
                Element(driver, Control("Addnewcompanyname", "Opportunity")).SendKeys(Keys.Control + "a");
                Element(driver, Control("Addnewcompanyname", "Opportunity")).SendKeys(Keys.Delete);
                Element(driver, Control("Addnewcompanyname", "Opportunity")).SendKeys(NewAccountName);
                ThinkTime(6);
                Element(driver, Control("Citylabel", "Opportunity")).Click();
                ThinkTime(2);
                if (Elements(driver, Control("Saveandclosebutton", "Opportunity")) > 0)
                {
                    MoveToElement(driver, Control("Saveandclosebutton", "Opportunity"));
                    Element(driver, Control("Saveandclosebutton", "Opportunity")).Click();
                }
                else
                {
                    ThinkTime(4);
                    MoveToElement(driver, Control("NewContactSaveButton", "Opportunity"));
                    Element(driver, Control("NewContactSaveButton", "Opportunity")).Click();
                }


                ThinkTime(8);
            }

            if (accountcondition == "ExistingAccount")
            {

            }

            //scrollDownOpportunityEnterprise(driver, testInReport, testDataIteration, testName);

            scrollDownOpportunity(driver, testInReport, testDataIteration, testName);
            scrollDownOpportunity(driver, testInReport, testDataIteration, testName);
            ThinkTime(3);
            //Select Bussiness Phone verification.

            WaitUntil(driver, Control("LeadBussinessPhone", "Generic"), 30);
            MoveToElement(driver, Control("LeadBussinessPhone", "Generic"));
            Element(driver, Control("LeadBussinessPhone", "Generic")).SendKeys(Keys.Control + "a");
            Element(driver, Control("LeadBussinessPhone", "Generic")).SendKeys(Keys.Delete);
            Element(driver, Control("LeadBussinessPhone", "Generic")).Click();
            Element(driver, Control("LeadBussinessPhone", "Generic")).SendKeys(BPhone);
            Element(driver, Control("BussinessPhoneClick", "Generic")).Click();

            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Bussiness Phone Field updated Successfully", "Bussiness Phone Field Verification");

            ThinkTime(3);
            scrollDownOpportunityEnterprise(driver, testInReport, testDataIteration, testName);

            // Recommended Business centre
            WaitUntil(driver, Control("RecomentedBussinessCentreInputButton", "Opportunity"), 30);
            MoveToElement(driver, Control("RecomentedBussinessCentreInputButton", "Opportunity"));
            Element(driver, Control("RecomentedBussinessCentreInputButton", "Opportunity")).SendKeys(Keys.Control + "a");
            Element(driver, Control("RecomentedBussinessCentreInputButton", "Opportunity")).SendKeys(Keys.Delete);
            Element(driver, Control("RecomentedBussinessCentreInputButton", "Opportunity")).SendKeys(RecomendedBussinessCenre);

            scrollDownOpportunityEnterprise(driver, testInReport, testDataIteration, testName);
            scrollDownOpportunityPage(driver, testInReport, testName, testDataIteration);

            //Select Source verification

            if (Elements(driver, Control("SourceVerification", "Generic")) > 0)
            {
                WaitUntil(driver, Control("SourceVerification", "Generic"), 30);
                MoveToElement(driver, Control("SourceVerification", "Generic"));
                Element(driver, Control("SourceDeleteButton", "Generic")).Click();

                WaitUntil(driver, Control("SourceInputField", "Generic"), 30);
                MoveToElement(driver, Control("SourceInputField", "Generic"));
                Element(driver, Control("SourceInputField", "Generic")).SendKeys(Keys.Control + "a");
                Element(driver, Control("SourceInputField", "Generic")).SendKeys(Keys.Delete);
                Element(driver, Control("SourceInputField", "Generic")).SendKeys(Source);

                WaitUntil(driver, Control("SelectSourceDropdown", "Generic"), 30);
                MoveToElement(driver, Control("SelectSourceDropdown", "Generic"));
                Element(driver, Control("SelectSourceDropdown", "Generic")).Click();

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Source Field updated Successfully", "Source Field Verification");

            }

            else
            {
                WaitUntil(driver, Control("SourceInputField", "Generic"), 30);
                MoveToElement(driver, Control("SourceInputField", "Generic"));
                Element(driver, Control("SourceInputField", "Generic")).SendKeys(Keys.Control + "a");
                Element(driver, Control("SourceInputField", "Generic")).SendKeys(Keys.Delete);

                Element(driver, Control("SourceInputField", "Generic")).SendKeys(Source);
                ThinkTime(5);
                WaitUntil(driver, Control("SelectSourceDropdown", "Generic"), 30);
                MoveToElement(driver, Control("SelectSourceDropdown", "Generic"));
                Element(driver, Control("SelectSourceDropdown", "Generic")).Click();

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Source Field updated Successfully", "Source Field Verification");

            }

            ThinkTime(10);
            scrollDownOpportunityPage(driver, testInReport, testName, testDataIteration);


            //Select Major Source verification

            if (Elements(driver, Control("MajorSourceVerification", "Generic")) > 0)
            {
                WaitUntil(driver, Control("MajorSourceVerification", "Generic"), 30);
                MoveToElement(driver, Control("MajorSourceVerification", "Generic"));
                Element(driver, Control("MajorSourceDeleteButton", "Generic")).Click();

                WaitUntil(driver, Control("MajorSourceInputField", "Generic"), 30);
                MoveToElement(driver, Control("MajorSourceInputField", "Generic"));
                Element(driver, Control("MajorSourceInputField", "Generic")).SendKeys(Keys.Control + "a");
                Element(driver, Control("MajorSourceInputField", "Generic")).SendKeys(Keys.Delete);
                Element(driver, Control("MajorSourceInputField", "Generic")).SendKeys(MajorSource);
                ThinkTime(5);
                MoveToElement(driver, Control("Languagedropdown", "EnterpriseSales"));
                Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Major Source Field updated Successfully", "Major Source Field Verification");

            }

            else
            {
                WaitUntil(driver, Control("MajorSourceInputField", "Generic"), 30);
                MoveToElement(driver, Control("MajorSourceInputField", "Generic"));
                Element(driver, Control("MajorSourceInputField", "Generic")).Clear();
                ThinkTime(3);
                Element(driver, Control("MajorSourceInputField", "Generic")).SendKeys(Keys.Control + "a");
                Element(driver, Control("MajorSourceInputField", "Generic")).SendKeys(Keys.Delete);
                Element(driver, Control("MajorSourceInputField", "Generic")).SendKeys(MajorSource);
                ThinkTime(5);
                MoveToElement(driver, Control("Languagedropdown", "EnterpriseSales"));
                Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Major Source Field updated Successfully", "Major Source Field Verification");

            }


            //Select Minor Source verification

            if (Elements(driver, Control("MinorSourceVerification", "Generic")) > 0)
            {
                WaitUntil(driver, Control("MinorSourceVerification", "Generic"), 30);
                MoveToElement(driver, Control("MinorSourceVerification", "Generic"));
                Element(driver, Control("MinorSourceDeleteButton", "Generic")).Click();

                WaitUntil(driver, Control("MinorSourceInputButton", "Generic"), 30);
                MoveToElement(driver, Control("MinorSourceInputButton", "Generic"));
                Element(driver, Control("MinorSourceInputButton", "Generic")).SendKeys(Keys.Control + "a");
                Element(driver, Control("MinorSourceInputButton", "Generic")).SendKeys(Keys.Delete);

                // Element(driver, Control("Minorsourcelookup", "Generic")).Click();
                ThinkTime(2);
                Element(driver, Control("MinorSourceInputButton", "Generic")).SendKeys(MinorSource);
                ThinkTime(5);
                MoveToElement(driver, Control("Languagedropdown", "EnterpriseSales"));
                Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Minor Source Field updated Successfully", "Minor Source Field Verification");

            }

            else
            {
                WaitUntil(driver, Control("MinorSourceInputButton", "Generic"), 30);
                MoveToElement(driver, Control("MinorSourceInputButton", "Generic"));
                Element(driver, Control("MinorSourceInputButton", "Generic")).SendKeys(Keys.Control + "a");
                Element(driver, Control("MinorSourceInputButton", "Generic")).SendKeys(Keys.Delete);
                // Element(driver, Control("Minorsourcelookup", "Generic")).Click();
                ThinkTime(2);
                Element(driver, Control("MinorSourceInputButton", "Generic")).SendKeys(MinorSource);
                ThinkTime(5);
                MoveToElement(driver, Control("Languagedropdown", "EnterpriseSales"));
                Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();


                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Minor Source Field updated Successfully", "Minor Source Field Verification");

            }


            saveFooter(driver, testInReport, testName, testDataIteration);
            ThinkTime(8);

            ThinkTime(3);
            scrollDownOpportunityEnterprise(driver, testInReport, testDataIteration, testName);


            if ((Elements(driver, Control("CountryErrorIcon", "Opportunity")) > 0))

            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Country field erron icon present", "Verify opportunity is automatically set as Won");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Country field erron icon not present", "Verify opportunity is not automatically set as Won");
                Assert.Fail("Country field erron icon not present");
            }

        }

        public void GetBusPhonevalue(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string Busphoneorg)
        {
            ThinkTime(2);
            WaitUntil(driver, Control("GetBusphonevalue", "Opportunity"), 30);

            string Busphone = Element(driver, Control("GetBusphonevalue", "Opportunity")).GetAttribute("value");

            if (Busphoneorg == Busphone)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Phone field + icon present", "Phone field + icon present");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Phone field + icon not present", "Phone field + icon not present");
                Assert.Fail("+ erron icon not present");
            }

        }

        public void verifyproductrefpopulated(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {
            ThinkTime(2);
            WaitUntil(driver, Control("Productrefrencefield", "Opportunity"), 30);

            for (int i = 0; i < 10; i++)
            {
                ThinkTime(2);
                SelectanyOpportunitybutton(driver, testInReport, testName, testDataIteration, "Refresh");
                ThinkTime(2);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Product Reference field", "Product Reference field");

            }

            string refvalue = Element(driver, Control("Productrefrencefield", "Opportunity")).GetAttribute("defaultValue");
            ThinkTime(2);

            if (refvalue == "---")
            {

                ThinkTime(2);
                WaitUntil(driver, Control("OppRefresh", "CommonObj"), 30);
                Element(driver, Control("OppRefresh", "CommonObj")).Click();
                ThinkTime(2);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Product Reference field", "Product Reference field");

            }




        }

        public void verifyoriginatingleadinOpp(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string subject)
        {
            ThinkTime(2);
            if (Elements(driver, Control("RefreshPage2", "CommonObj")) == 0)
            {

                WaitUntil(driver, Control("secoppmorenew", "CommonObj"), 30);
                Element(driver, Control("secoppmorenew", "CommonObj")).Click();
                ThinkTime(2);
            }

            WaitUntil(driver, Control("RefreshPage2", "CommonObj"), 30);
            Element(driver, Control("RefreshPage2", "CommonObj")).Click();
            ThinkTime(2);
            if (Elements(driver, Control("CommunicationRequest", subject, "phoneCall")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Originating lead verification", "Originating lead verification");
            }

            ThinkTime(2);
            WaitUntil(driver, Control("SelectOpp", "ITSales"), 30);
            Element(driver, Control("SelectOpp", "ITSales")).Click();
            ThinkTime(6);
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Opp selected", "Linked Opportunity is opened");



        }




        public void OppSelect(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {
            ThinkTime(5);
            for (int i = 0; i < 10; i++)
            {
                ThinkTime(2);
                WaitUntil(driver, Control("OppRefresh", "CommonObj"), 30);
                Element(driver, Control("OppRefresh", "CommonObj")).Click();
                ThinkTime(2);
                if (Elements(driver, Control("SelectOpp", "ITSales")) > 0 && Element(driver, Control("SelectOpp", "ITSales")).Text != "---")
                {
                    break;
                }



            }

            ThinkTime(2);
            WaitUntil(driver, Control("SelectOpp", "ITSales"), 30);
            Element(driver, Control("SelectOpp", "ITSales")).Click();
            ThinkTime(6);
        }


        public void selectsecondrecord(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {

            ThinkTime(2);
            WaitUntil(driver, Control("selectsendoncrecord", "CommonObj"), 30);
            Element(driver, Control("selectsendoncrecord", "CommonObj")).Click();
            ThinkTime(2);
        }

        public void QualifyLead1(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {
            ThinkTime(5);
            if ((Elements(driver, Control("QualifyButton", "Opportunity")) > 0))



            {
                MoveToElement(driver, Control("QualifyButton", "Opportunity"));
                Element(driver, Control("QualifyButton", "Opportunity")).Click();
                //ThinkTime(5);
                //if ((Elements(driver, Control("DuplicateDialog", "Opportunity")) > 0))



                //{
                //    ThinkTime(2);
                //    MoveToElement(driver, Control("ContinueButton", "Opportunity"));
                //    Element(driver, Control("ContinueButton", "Opportunity")).Click();



                //    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Lead Qualified", "Lead Qualified");
                //}
                ThinkTime(5);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Lead Qualified", "Lead Qualified");
            }



            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Qualify button does not exists", "Qualify button does not exists");
                Assert.Fail("Qualify button does not exists");
            }





        }
        public void PrimaryOppVerify(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string SecOppName)
        {
            ThinkTime(5);
            LoopforRefresh(driver, testInReport, testName, testDataIteration);
            scrollDownOpportunityEnterpriseCust(driver, testInReport, testName, testDataIteration, "200");
            if ((Elements(driver, Control("IsPrimary", "Opportunity")) > 0))
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Opp is Primary", "");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Opp is not Primary", "");
                Assert.Fail("Opp is not Primary");
            }

            ThinkTime(5);
            MoveToElement(driver, Control("SecOpp", "Opportunity"));
            Element(driver, Control("SecOpp", "Opportunity")).Click();
            ThinkTime(5);
            if ((Elements(driver, Control("SecOppName", SecOppName, "Opportunity")) > 0))
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Opp is Primary", "");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Opp is not Primary", "");
                Assert.Fail("Opp is not Primary");
            }

        }

        public string OwnerLead(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {

            MoveToElement(driver, Control("Overflowbutton", "Opportunity"));
            Element(driver, Control("Overflowbutton", "Opportunity")).Click();

            ThinkTime(2);
            MoveToElement(driver, Control("OwnerText", "Opportunity"));
            string ownername = Element(driver, Control("OwnerText", "Opportunity")).GetAttribute("innerText");
            return ownername;

        }

        public void OwnerOpp(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string ownerlead)
        {

            MoveToElement(driver, Control("Overflowbutton", "Opportunity"));
            Element(driver, Control("Overflowbutton", "Opportunity")).Click();

            ThinkTime(2);
            MoveToElement(driver, Control("OwnerText", "Opportunity"));
            ThinkTime(2);
            string owneropp = Element(driver, Control("OwnerText", "Opportunity")).GetAttribute("innerText");
            ThinkTime(2);

            if (owneropp == ownerlead)

            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Opp inherited from lead", "");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Opp is not inherited from lead", "");
                Assert.Fail("Opp is not inherited from lead");
            }

        }

        public void CloseTask(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {
            ThinkTime(5);
            WaitUntil(driver, Control("CloseTask", "Opportunity"), 120);
            MoveToElement(driver, Control("CloseTask", "Opportunity"));
            Element(driver, Control("CloseTask", "Opportunity")).Click();
            ThinkTime(2);
            if (Elements(driver, Control("SetDialog", "Opportunity")) > 0)
            {
                MoveToElement(driver, Control("SetDialogClose", "Opportunity"));
                Element(driver, Control("SetDialogClose", "Opportunity")).Click();
                ThinkTime(3);
            }


        }


        public void AssigntoClosedTask(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {


            ThinkTime(5);

            if (Elements(driver, Control("AssignButtonActivity", "EnterpriseSales")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Assign button exists", "");
                Assert.Fail("Closed task can assign user");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Closed task cannot assign user", "");
            }


        }

        public void AssigntoUserwithoutpermission(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {


            ThinkTime(5);
            MoveToElement(driver, Control("AssignButtonActivity", "EnterpriseSales"));
            Element(driver, Control("AssignButtonActivity", "EnterpriseSales")).Click();
            ThinkTime(3);

            AlertHandling(driver, "Accept");
            ThinkTime(3);


        }

        public void Assignuserverify(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string ownerlead)
        {

            MoveToElement(driver, Control("Overflowbutton", "Opportunity"));
            Element(driver, Control("Overflowbutton", "Opportunity")).Click();

            ThinkTime(2);
            MoveToElement(driver, Control("OwnerText", "Opportunity"));
            string owneropp = Element(driver, Control("OwnerText", "Opportunity")).GetAttribute("innerText");
            ThinkTime(2);

            if (owneropp == ownerlead)

            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Opp inherited from lead", "");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Opp is not inherited from lead", "");
                Assert.Fail("Opp is not inherited from lead");
            }

        }
        public void VerifyLanguagePreference(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string LastName, string Email, string BPhone, string Source, string MajorSource, string MinorSource, string now, string contactcondition, string accountcondition, string newcontactname, string Language, string option, string Country)
        {

            // Click on New button
            ThinkTime(4);
            WaitUntil(driver, Control("NewTabOpportunity", "Opportunity"), 120);
            MoveToElement(driver, Control("NewTabOpportunity", "Opportunity"));
            Element(driver, Control("NewTabOpportunity", "Opportunity")).Click();
            ThinkTime(10);
            // ScriptErrorExcepleadpage(driver, testInReport, testDataIteration, testName);
            //ScriptErrorExcep(driver, testInReport, testDataIteration, testName);
            ScriptErrorExcep(driver, testInReport, testDataIteration, testName);
            ThinkTime(5);
            // Enter Lastname 
            WaitUntil(driver, Control("LeadLname", "Generic"), 120);
            MoveToElement(driver, Control("LeadLname", "Generic"));
            Element(driver, Control("LeadLname", "Generic")).SendKeys(Keys.Control + "a");
            Element(driver, Control("LeadLname", "Generic")).SendKeys(Keys.Delete);
            Element(driver, Control("LeadLname", "Generic")).SendKeys(LastName);
            //Element(driver, Control("Lastnameclick", "Generic")).Click();

            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Last Name Field updated Successfully", "Last Name Field Verification");

            ThinkTime(3);

            //Select Email verification.

            WaitUntil(driver, Control("LeadEmail", "Generic"), 30);
            MoveToElement(driver, Control("LeadEmail", "Generic"));
            Element(driver, Control("LeadEmail", "Generic")).Click();
            ThinkTime(1);
            Element(driver, Control("LeadEmail", "Generic")).SendKeys(Keys.Control + "a");
            Element(driver, Control("LeadEmail", "Generic")).SendKeys(Keys.Delete);
            ThinkTime(2);
            Element(driver, Control("LeadEmail", "Generic")).SendKeys(Email);
            ThinkTime(5);

            if (Elements(driver, Control("ScriptDialg", "Opportunity")) > 0)
            {
                Element(driver, Control("HandleScriptError", "Opportunity")).Click();
                ThinkTime(3);
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "No Script error present", "No Script error present");

            }

            //  Element(driver, Control("Emialclick", "Generic")).Click();

            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Email Field updated Successfully", "Email Field Verification");

            ThinkTime(3);


            scrollDownOpportunityEnterprise(driver, testInReport, testDataIteration, testName);

            ThinkTime(3);
            //Select Bussiness Phone verification.

            WaitUntil(driver, Control("LeadBussinessPhone", "Generic"), 30);
            MoveToElement(driver, Control("LeadBussinessPhone", "Generic"));
            Element(driver, Control("LeadBussinessPhone", "Generic")).SendKeys(Keys.Control + "a");
            Element(driver, Control("LeadBussinessPhone", "Generic")).SendKeys(Keys.Delete);
            Element(driver, Control("LeadBussinessPhone", "Generic")).SendKeys(BPhone);
            // Element(driver, Control("BussinessPhoneClick", "Generic")).Click();

            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Bussiness Phone Field updated Successfully", "Bussiness Phone Field Verification");

            ThinkTime(3);
            scrollDownOpportunityEnterprise(driver, testInReport, testDataIteration, testName);

            // Recommended Business centre
            WaitUntil(driver, Control("CountryInput", "Opportunity"), 30);
            MoveToElement(driver, Control("CountryInput", "Opportunity"));
            Element(driver, Control("CountryInput", "Opportunity")).SendKeys(Keys.Control + "a");
            Element(driver, Control("CountryInput", "Opportunity")).SendKeys(Keys.Delete);
            Element(driver, Control("CountryInput", "Opportunity")).SendKeys(Country);
            ThinkTime(2);
            WaitUntil(driver, Control("SelectDropDownToField", "ITSales"), 30);
            Element(driver, Control("SelectDropDownToField", "ITSales")).Click();

            scrollDownOpportunityEnterprise(driver, testInReport, testDataIteration, testName);
            scrollDownOpportunityPage(driver, testInReport, testName, testDataIteration);

            //Select Source verification

            if (Elements(driver, Control("SourceVerification", "Generic")) > 0)
            {
                WaitUntil(driver, Control("SourceVerification", "Generic"), 30);
                MoveToElement(driver, Control("SourceVerification", "Generic"));
                Element(driver, Control("SourceDeleteButton", "Generic")).Click();

                WaitUntil(driver, Control("SourceInputField", "Generic"), 30);
                MoveToElement(driver, Control("SourceInputField", "Generic"));
                Element(driver, Control("SourceInputField", "Generic")).SendKeys(Keys.Control + "a");
                Element(driver, Control("SourceInputField", "Generic")).SendKeys(Keys.Delete);
                Element(driver, Control("SourceInputField", "Generic")).SendKeys(Source);

                WaitUntil(driver, Control("SelectSourceDropdown", "Generic"), 30);
                MoveToElement(driver, Control("SelectSourceDropdown", "Generic"));
                Element(driver, Control("SelectSourceDropdown", "Generic")).Click();

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Source Field updated Successfully", "Source Field Verification");

            }

            else
            {
                WaitUntil(driver, Control("SourceInputField", "Generic"), 30);
                MoveToElement(driver, Control("SourceInputField", "Generic"));
                Element(driver, Control("SourceInputField", "Generic")).SendKeys(Keys.Control + "a");
                Element(driver, Control("SourceInputField", "Generic")).SendKeys(Keys.Delete);

                Element(driver, Control("SourceInputField", "Generic")).SendKeys(Source);
                ThinkTime(5);
                WaitUntil(driver, Control("SelectSourceDropdown", "Generic"), 30);
                MoveToElement(driver, Control("SelectSourceDropdown", "Generic"));
                Element(driver, Control("SelectSourceDropdown", "Generic")).Click();

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Source Field updated Successfully", "Source Field Verification");

            }

            ThinkTime(10);
            scrollDownOpportunityPage(driver, testInReport, testName, testDataIteration);


            //Select Major Source verification

            if (Elements(driver, Control("MajorSourceVerification", "Generic")) > 0)
            {
                WaitUntil(driver, Control("MajorSourceVerification", "Generic"), 30);
                MoveToElement(driver, Control("MajorSourceVerification", "Generic"));
                Element(driver, Control("MajorSourceDeleteButton", "Generic")).Click();

                WaitUntil(driver, Control("MajorSourceInputField", "Generic"), 30);
                MoveToElement(driver, Control("MajorSourceInputField", "Generic"));
                Element(driver, Control("MajorSourceInputField", "Generic")).SendKeys(Keys.Control + "a");
                Element(driver, Control("MajorSourceInputField", "Generic")).SendKeys(Keys.Delete);
                Element(driver, Control("MajorSourceInputField", "Generic")).SendKeys(MajorSource);
                ThinkTime(5);
                MoveToElement(driver, Control("Languagedropdown", "EnterpriseSales"));
                Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Major Source Field updated Successfully", "Major Source Field Verification");

            }

            else
            {
                WaitUntil(driver, Control("MajorSourceInputField", "Generic"), 30);
                MoveToElement(driver, Control("MajorSourceInputField", "Generic"));
                Element(driver, Control("MajorSourceInputField", "Generic")).Clear();
                ThinkTime(3);
                Element(driver, Control("MajorSourceInputField", "Generic")).SendKeys(MajorSource);
                ThinkTime(5);
                MoveToElement(driver, Control("Languagedropdown", "EnterpriseSales"));
                Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Major Source Field updated Successfully", "Major Source Field Verification");

            }


            //Select Minor Source verification

            if (Elements(driver, Control("MinorSourceVerification", "Generic")) > 0)
            {
                WaitUntil(driver, Control("MinorSourceVerification", "Generic"), 30);
                MoveToElement(driver, Control("MinorSourceVerification", "Generic"));
                Element(driver, Control("MinorSourceDeleteButton", "Generic")).Click();

                WaitUntil(driver, Control("MinorSourceInputButton", "Generic"), 30);
                MoveToElement(driver, Control("MinorSourceInputButton", "Generic"));
                Element(driver, Control("MinorSourceInputButton", "Generic")).SendKeys(Keys.Control + "a");
                Element(driver, Control("MinorSourceInputButton", "Generic")).SendKeys(Keys.Delete);

                // Element(driver, Control("Minorsourcelookup", "Generic")).Click();
                ThinkTime(2);
                Element(driver, Control("MinorSourceInputButton", "Generic")).SendKeys(MinorSource);
                ThinkTime(5);
                MoveToElement(driver, Control("Languagedropdown", "EnterpriseSales"));
                Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Minor Source Field updated Successfully", "Minor Source Field Verification");

            }

            else
            {
                WaitUntil(driver, Control("MinorSourceInputButton", "Generic"), 30);
                MoveToElement(driver, Control("MinorSourceInputButton", "Generic"));
                Element(driver, Control("MinorSourceInputButton", "Generic")).SendKeys(Keys.Control + "a");
                Element(driver, Control("MinorSourceInputButton", "Generic")).SendKeys(Keys.Delete);
                ThinkTime(2);
                Element(driver, Control("MinorSourceInputButton", "Generic")).SendKeys(MinorSource);
                ThinkTime(5);
                MoveToElement(driver, Control("Languagedropdown", "EnterpriseSales"));
                Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();


                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Minor Source Field updated Successfully", "Minor Source Field Verification");

            }


            saveFooter(driver, testInReport, testName, testDataIteration);
            ThinkTime(10);


            WaitUntil(driver, Control("FieldVerification2", option, "Opportunity"), 180);
            Element(driver, Control("FieldVerification2", option, "Opportunity")).Click();
            ThinkTime(10);
            ThinkTime(3);
            scrollDownOpportunityEnterprise1(driver, testInReport, testDataIteration, testName);


            if ((Elements(driver, Control("LanguageInput", "Opportunity")) > 0))

            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "UK English set as default", "Verify opportunity is automatically set as Won");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Default language not set", "Verify opportunity is not automatically set as Won");
                Assert.Fail("Country field erron icon not present");
            }

        }


        public void VerifyLanguagePreferenceContact(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string LastName, string BPhone, string now, string Language, string option, string Country)
        {
            // Click on New button
            ThinkTime(4);
            WaitUntil(driver, Control("ContactNewButton", "Opportunity"), 30);
            MoveToElement(driver, Control("ContactNewButton", "Opportunity"));
            Element(driver, Control("ContactNewButton", "Opportunity")).Click();
            ThinkTime(4);

            // Enter Lastname 
            WaitUntil(driver, Control("LeadLname", "Generic"), 30);
            MoveToElement(driver, Control("LeadLname", "Generic"));
            Element(driver, Control("LeadLname", "Generic")).SendKeys(Keys.Control + "a");
            Element(driver, Control("LeadLname", "Generic")).SendKeys(Keys.Delete);
            Element(driver, Control("LeadLname", "Generic")).SendKeys(LastName);
            Element(driver, Control("Lastnameclick", "Generic")).Click();

            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Last Name Field updated Successfully", "Last Name Field Verification");

            ThinkTime(3);


            if (Elements(driver, Control("ScriptDialg", "Opportunity")) > 0)
            {
                Element(driver, Control("HandleScriptError", "Opportunity")).Click();
                ThinkTime(3);
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "No Script error present", "No Script error present");

            }


            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Email Field updated Successfully", "Email Field Verification");

            ThinkTime(3);

            //Select Bussiness Phone verification.

            WaitUntil(driver, Control("LeadBussinessPhone", "Generic"), 30);
            MoveToElement(driver, Control("LeadBussinessPhone", "Generic"));
            Element(driver, Control("LeadBussinessPhone", "Generic")).SendKeys(Keys.Control + "a");
            Element(driver, Control("LeadBussinessPhone", "Generic")).SendKeys(Keys.Delete);
            Element(driver, Control("LeadBussinessPhone", "Generic")).SendKeys(BPhone);
            Element(driver, Control("BussinessPhoneClick", "Generic")).Click();

            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Bussiness Phone Field updated Successfully", "Bussiness Phone Field Verification");
            // scrollDownOpportunityEnterprise(driver, testInReport, testDataIteration, testName);
            scrollMiddleOpportunityPage(driver, testInReport, testDataIteration, testName);

            WaitUntil(driver, Control("LangPref", "Opportunity"), 30);
            MoveToElement(driver, Control("LangPref", "Opportunity"));
            Element(driver, Control("LangPref", "Opportunity")).SendKeys("UK English");
            ThinkTime(2);
            WaitUntil(driver, Control("SelectDropDownToField", "ITSales"), 30);
            Element(driver, Control("SelectDropDownToField", "ITSales")).Click();
            ThinkTime(3);
            //scrollDownOpportunityEnterprise(driver, testInReport, testDataIteration, testName);

            // Recommended Business centre
            WaitUntil(driver, Control("CountryInput", "Opportunity"), 30);
            MoveToElement(driver, Control("CountryInput", "Opportunity"));
            Element(driver, Control("CountryInput", "Opportunity")).SendKeys(Country);
            ThinkTime(2);
            WaitUntil(driver, Control("SelectDropDownToField", "ITSales"), 30);
            Element(driver, Control("SelectDropDownToField", "ITSales")).Click();


            saveFooter(driver, testInReport, testName, testDataIteration);
            ThinkTime(10);



            ThinkTime(10);
            ThinkTime(3);
            //scrollUpMiddle(driver, testInReport, testDataIteration, testName);
            // scrollUpMiddleNew(driver, testInReport, testDataIteration, testName);

            ThinkTime(3);
            if ((Elements(driver, Control("LanguageInput", "Opportunity")) > 0))

            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "UK English set as default", "Verify opportunity is automatically set as Won");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Default language not set", "Verify opportunity is not automatically set as Won");
                Assert.Fail("Country field erron icon not present");
            }

        }



        public void VerifyLangLeadContact(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {


            ThinkTime(2);

            scrollDownOpportunityEnterprise(driver, testInReport, testDataIteration, testName);


            if ((Elements(driver, Control("LanguageInput", "Opportunity")) > 0))

            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "UK English set as default", "Verify opportunity is automatically set as Won");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Default language not set", "Verify opportunity is not automatically set as Won");
                Assert.Fail("Country field erron icon not present");
            }
        }

        public void Maycontactcustomer(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {

            ThinkTime(8);
            scrollDownOpportunityEnterprise(driver, testInReport, testDataIteration, testName);
            WaitUntil(driver, Control("Maycontactcustomer", "Opportunity"), 30);

            //   MoveToElement(driver, Control("Maycontactcustomer", "Opportunity"));
            string state = Element(driver, Control("Maycontactcustomer", "Opportunity")).GetAttribute("ariaChecked");

            if (state == "true")
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Minor Source Field updated Successfully", "Minor Source Field Verification");

            }
            else
                Element(driver, Control("Maycontactcustomer", "Opportunity")).Click();
            ThinkTime(4);

            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Minor Source Field updated Successfully", "Minor Source Field Verification");

            //WaitUntil(driver, Control("CountryInput", "Accounts"), 30);
            //MoveToElement(driver, Control("CountryInput", "Accounts"));
            //Element(driver, Control("CountryInput", "Accounts")).SendKeys("united kingdom");

            //WaitUntil(driver, Control("CountrySelect", "Accounts"), 30);
            //MoveToElement(driver, Control("CountrySelect", "Accounts"));
            //Element(driver, Control("CountrySelect", "Accounts")).Click();


            saveFooter(driver, testInReport, testName, testDataIteration);

            ThinkTime(8);
        }

        public void ContinueQualify(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {
            ThinkTime(5);
            if (Elements(driver, Control("Qualifycontinue", "Opportunity")) > 0)
            {
                Element(driver, Control("Qualifycontinue", "Opportunity")).Click();
                ThinkTime(8);
            }
        }
        public void DuplicateCheck(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {
            string duplicatecheck = Element(driver, Control("StatusLead", "CommonObj")).Text;
            ThinkTime(5);
            if (duplicatecheck == "Duplicate")
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Lead is Duplicate", "Lead is  Duplicate");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Lead is not Duplicate", "Lead is not Duplicate");
                Assert.Fail("Lead is not Duplicate");
            }

        }
        public void CreateLeadwithproductandnocontactITSales(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string LastName, string Email, string BPhone, string Source, string MajorSource, string MinorSource, string now, string contactcondition, string accountcondition, string newcontactname, string Language, string accountname, string RecomendedBussinessCenre, string producttype, string productname)
        {
            // Click on New button
            ThinkTime(4);
            WaitUntil(driver, Control("NewTabOpportunity", "Opportunity"), 30);
            MoveToElement(driver, Control("NewTabOpportunity", "Opportunity"));
            Element(driver, Control("NewTabOpportunity", "Opportunity")).Click();
            ThinkTime(4);

            // Enter Lastname 
            WaitUntil(driver, Control("LeadLname", "Generic"), 30);
            MoveToElement(driver, Control("LeadLname", "Generic"));
            Element(driver, Control("LeadLname", "Generic")).SendKeys(Keys.Control + "a");
            Element(driver, Control("LeadLname", "Generic")).SendKeys(Keys.Delete);
            Element(driver, Control("LeadLname", "Generic")).SendKeys(LastName);
            Element(driver, Control("Lastnameclick", "Generic")).Click();

            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Last Name Field updated Successfully", "Last Name Field Verification");

            ThinkTime(15);


            if (Elements(driver, Control("ScriptDialg", "Opportunity")) > 0)
            {
                Element(driver, Control("HandleScriptError", "Opportunity")).Click();
                ThinkTime(3);
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "No Script error present", "No Script error present");

            }
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Email Field updated Successfully", "Email Field Verification");

            ThinkTime(3);

            //Select Email verification.

            WaitUntil(driver, Control("LeadEmail", "Generic"), 30);
            MoveToElement(driver, Control("LeadEmail", "Generic"));
            Element(driver, Control("LeadEmail", "Generic")).Click();




            ThinkTime(1);
            Element(driver, Control("LeadEmail", "Generic")).SendKeys(Keys.Control + "a");
            Element(driver, Control("LeadEmail", "Generic")).SendKeys(Keys.Delete);
            ThinkTime(2);
            Element(driver, Control("LeadEmail", "Generic")).SendKeys(Email);
            ThinkTime(5);

            if (Elements(driver, Control("ScriptDialg", "Opportunity")) > 0)
            {
                Element(driver, Control("HandleScriptError", "Opportunity")).Click();
                ThinkTime(3);
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "No Script error present", "No Script error present");

            }
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Email Field updated Successfully", "Email Field Verification");

            ThinkTime(3);

            ////Enter Contact.

            //WaitUntil(driver, Control("UpdatedContactInput", "ITSales"), 30);
            //MoveToElement(driver, Control("UpdatedContactInput", "ITSales"));
            //Element(driver, Control("UpdatedContactInput", "ITSales")).Click();
            //Element(driver, Control("UpdatedContactInput", "ITSales")).SendKeys("David Smithtest");
            //ThinkTime(3);
            //WaitUntil(driver, Control("SelectDropDownToField", "ITSales"), 30);
            //Element(driver, Control("SelectDropDownToField", "ITSales")).Click();



            // Enter Product
            if (producttype == "ExistingProduct")
            {
                WaitUntil(driver, Control("Enterproductname", "Opportunity"), 30);
                MoveToElement(driver, Control("Enterproductname", "Opportunity"));
                Element(driver, Control("Enterproductname", "Opportunity")).Click();
                ThinkTime(3);
                Element(driver, Control("Enterproductname", "Opportunity")).SendKeys(productname);
                ThinkTime(3);
                Element(driver, Control("ITSalesCustomer", "Opportunity")).Click();
                ThinkTime(3);
            }
            if (producttype == "")
            {
                WaitUntil(driver, Control("Enterproductname", "Opportunity"), 30);
                MoveToElement(driver, Control("Enterproductname", "Opportunity"));
                Element(driver, Control("Enterproductname", "Opportunity")).Click();
                ThinkTime(3);
                Element(driver, Control("Enterproductname", "Opportunity")).SendKeys(productname);
                ThinkTime(3);
                Element(driver, Control("ITSalesCustomer", "Opportunity")).Click();
                ThinkTime(3);

            }


            ////Enter Account.

            //WaitUntil(driver, Control("UpdatedAccountInput", "ITSales"), 30);
            //MoveToElement(driver, Control("UpdatedAccountInput", "ITSales"));
            //Element(driver, Control("UpdatedAccountInput", "ITSales")).Click();
            //Element(driver, Control("UpdatedAccountInput", "ITSales")).SendKeys("A & A Legal Service, Inc");
            //ThinkTime(3);
            //WaitUntil(driver, Control("SelectDropDownToField", "ITSales"), 30);
            //Element(driver, Control("SelectDropDownToField", "ITSales")).Click();

            ThinkTime(3);

            //Select Bussiness Phone verification.
            WaitUntil(driver, Control("LeadBussinessPhone", "Generic"), 30);
            MoveToElement(driver, Control("LeadBussinessPhone", "Generic"));
            Element(driver, Control("LeadBussinessPhone", "Generic")).SendKeys(Keys.Control + "a");
            Element(driver, Control("LeadBussinessPhone", "Generic")).SendKeys(Keys.Delete);
            Element(driver, Control("LeadBussinessPhone", "Generic")).SendKeys(BPhone);
            Element(driver, Control("BussinessPhoneClick", "Generic")).Click();

            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Bussiness Phone Field updated Successfully", "Bussiness Phone Field Verification");

            ThinkTime(3);

            scrollDownOpportunityEnterprise(driver, testInReport, testDataIteration, testName);
            scrollDownOpportunityEnterprise(driver, testInReport, testDataIteration, testName);

            // Recommended Business centre
            WaitUntil(driver, Control("RecomentedBussinessCentreInputButton", "Opportunity"), 30);
            MoveToElement(driver, Control("RecomentedBussinessCentreInputButton", "Opportunity"));
            Element(driver, Control("RecomentedBussinessCentreInputButton", "Opportunity")).Click();
            Element(driver, Control("RecomentedBussinessCentreInputButton", "Opportunity")).SendKeys(RecomendedBussinessCenre);

            ThinkTime(6);
            MoveToElement(driver, Control("Languagedropdown", "EnterpriseSales"));
            Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();


            //Select Source verification

            if (Elements(driver, Control("SourceVerification", "Generic")) > 0)
            {
                WaitUntil(driver, Control("SourceVerification", "Generic"), 30);
                MoveToElement(driver, Control("SourceVerification", "Generic"));
                Element(driver, Control("SourceDeleteButton", "Generic")).Click();

                WaitUntil(driver, Control("SourceInputField", "Generic"), 30);
                MoveToElement(driver, Control("SourceInputField", "Generic"));
                Element(driver, Control("SourceInputField", "Generic")).SendKeys(Source);

                WaitUntil(driver, Control("SelectSourceDropdown", "Generic"), 30);
                MoveToElement(driver, Control("SelectSourceDropdown", "Generic"));
                Element(driver, Control("SelectSourceDropdown", "Generic")).Click();

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Source Field updated Successfully", "Source Field Verification");

            }

            else
            {
                WaitUntil(driver, Control("SourceInputField", "Generic"), 30);
                MoveToElement(driver, Control("SourceInputField", "Generic"));
                Element(driver, Control("SourceInputField", "Generic")).SendKeys(Source);

                ThinkTime(3);
                WaitUntil(driver, Control("SelectSourceDropdown", "Generic"), 30);
                MoveToElement(driver, Control("SelectSourceDropdown", "Generic"));
                Element(driver, Control("SelectSourceDropdown", "Generic")).Click();

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Source Field updated Successfully", "Source Field Verification");

            }

            ThinkTime(10);
            scrollDownOpportunityPage(driver, testInReport, testName, testDataIteration);

            //Select Major Source verification

            if (Elements(driver, Control("MajorSourceVerification", "Generic")) > 0)
            {
                WaitUntil(driver, Control("MajorSourceVerification", "Generic"), 30);
                MoveToElement(driver, Control("MajorSourceVerification", "Generic"));
                Element(driver, Control("MajorSourceDeleteButton", "Generic")).Click();

                WaitUntil(driver, Control("MajorSourceInputField", "Generic"), 30);
                MoveToElement(driver, Control("MajorSourceInputField", "Generic"));
                Element(driver, Control("MajorSourceInputField", "Generic")).Click();
                Element(driver, Control("MajorSourceInputField", "Generic")).SendKeys(MajorSource);

                WaitUntil(driver, Control("SelectMSourceDropdown", "Generic"), 30);
                MoveToElement(driver, Control("SelectMSourceDropdown", "Generic"));
                Element(driver, Control("SelectMSourceDropdown", "Generic")).Click();

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Major Source Field updated Successfully", "Major Source Field Verification");

            }

            else
            {
                WaitUntil(driver, Control("MajorSourceInputField", "Generic"), 30);
                MoveToElement(driver, Control("MajorSourceInputField", "Generic"));
                Element(driver, Control("MajorSourceInputField", "Generic")).Click();
                Element(driver, Control("MajorSourceInputField", "Generic")).SendKeys(MajorSource);
                ThinkTime(2);
                WaitUntil(driver, Control("SelectMSourceDropdown", "Generic"), 30);
                ThinkTime(2);
                MoveToElement(driver, Control("SelectMSourceDropdown", "Generic"));
                ThinkTime(2);
                Element(driver, Control("SelectMSourceDropdown", "Generic")).Click();

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Major Source Field updated Successfully", "Major Source Field Verification");
            }


            //Select Minor Source verification

            if (Elements(driver, Control("MinorSourceVerification", "Generic")) > 0)
            {
                WaitUntil(driver, Control("MinorSourceVerification", "Generic"), 30);
                MoveToElement(driver, Control("MinorSourceVerification", "Generic"));
                Element(driver, Control("MinorSourceDeleteButton", "Generic")).Click();

                WaitUntil(driver, Control("MinorSourceInputButton", "Generic"), 30);
                MoveToElement(driver, Control("MinorSourceInputButton", "Generic"));
                Element(driver, Control("MinorSourceInputButton", "Generic")).Click();
                Element(driver, Control("MinorSourceInputButton", "Generic")).SendKeys(MinorSource);

                WaitUntil(driver, Control("SelectMinorSourceDropdown", "Generic"), 30);
                MoveToElement(driver, Control("SelectMinorSourceDropdown", "Generic"));
                Element(driver, Control("SelectMinorSourceDropdown", "Generic")).Click();

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Minor Source Field updated Successfully", "Minor Source Field Verification");

            }

            else
            {
                WaitUntil(driver, Control("MinorSourceInputButton", "Generic"), 30);
                MoveToElement(driver, Control("MinorSourceInputButton", "Generic"));
                Element(driver, Control("MinorSourceInputButton", "Generic")).Click();
                Element(driver, Control("MinorSourceInputButton", "Generic")).SendKeys(MinorSource);

                WaitUntil(driver, Control("SelectMinorSourceDropdown", "Generic"), 30);
                ThinkTime(2);

                MoveToElement(driver, Control("SelectMinorSourceDropdown", "Generic"));
                ThinkTime(3);
                Element(driver, Control("SelectMinorSourceDropdown", "Generic")).Click();

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Minor Source Field updated Successfully", "Minor Source Field Verification");

            }


            saveFooter(driver, testInReport, testName, testDataIteration);
            ThinkTime(10);



            if (Elements(driver, Control("ScriptDialg", "Opportunity")) > 0)
            {
                Element(driver, Control("HandleScriptError", "Opportunity")).Click();
                ThinkTime(3);
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "No Script error present", "No Script error present");

            }
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Email Field updated Successfully", "Email Field Verification");


        }


        public void CreateLeadwithproductITSalesNew(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string LastName, string Email, string BPhone, string Source, string MajorSource, string MinorSource, string now, string contactcondition, string accountcondition, string newcontactname, string Language, string accountname, string RecomendedBussinessCenre, string producttype, string productname)
        {
            // Click on New button
            ThinkTime(4);
            WaitUntil(driver, Control("NewTabOpportunity", "Opportunity"), 30);
            MoveToElement(driver, Control("NewTabOpportunity", "Opportunity"));
            Element(driver, Control("NewTabOpportunity", "Opportunity")).Click();
            ThinkTime(4);

            // Enter Lastname 
            WaitUntil(driver, Control("LeadLname", "Generic"), 30);
            MoveToElement(driver, Control("LeadLname", "Generic"));
            Element(driver, Control("LeadLname", "Generic")).SendKeys(Keys.Control + "a");
            Element(driver, Control("LeadLname", "Generic")).SendKeys(Keys.Delete);
            Element(driver, Control("LeadLname", "Generic")).SendKeys(LastName);
            Element(driver, Control("Lastnameclick", "Generic")).Click();

            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Last Name Field updated Successfully", "Last Name Field Verification");

            ThinkTime(3);

            //Select Email verification.

            WaitUntil(driver, Control("LeadEmail", "Generic"), 30);
            MoveToElement(driver, Control("LeadEmail", "Generic"));
            Element(driver, Control("LeadEmail", "Generic")).Click();
            ThinkTime(1);
            Element(driver, Control("LeadEmail", "Generic")).SendKeys(Keys.Control + "a");
            Element(driver, Control("LeadEmail", "Generic")).SendKeys(Keys.Delete);
            ThinkTime(2);
            Element(driver, Control("LeadEmail", "Generic")).SendKeys(Email);
            ThinkTime(5);

            if (Elements(driver, Control("ScriptDialg", "Opportunity")) > 0)
            {
                Element(driver, Control("HandleScriptError", "Opportunity")).Click();
                ThinkTime(3);
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "No Script error present", "No Script error present");

            }
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Email Field updated Successfully", "Email Field Verification");

            ThinkTime(3);


            //create new contact
            WaitUntil(driver, Control("Contactlookup", "Opportunity"), 30);
            MoveToElement(driver, Control("Contactlookup", "Opportunity"));
            Element(driver, Control("Contactlookup", "Opportunity")).Click();
            Element(driver, Control("Contactlookup", "Opportunity")).SendKeys(newcontactname);
            ThinkTime(6);
            MoveToElement(driver, Control("ITSalesCustomer", "Opportunity"));
            Element(driver, Control("ITSalesCustomer", "Opportunity")).Click();
            ThinkTime(2);
            if (accountcondition == "NewAccount")
            {
                string NewAccountName = accountname + now;
                ThinkTime(15);
                WaitUntil(driver, Control("VerifyCompanyField", "Opportunity"), 30);
                MoveToElement(driver, Control("VerifyCompanyField", "Opportunity"));
                ActionsClick(driver, Control("VerifyCompanyField", "Opportunity"));
                ThinkTime(1);
                ActionsClick(driver, Control("Accountlookupinputfield", "Opportunity"));
                ThinkTime(1);
                ActionsClick(driver, Control("NewAccountButton", "Opportunity"));
                ThinkTime(15);
                MoveToElement(driver, Control("Addnewcompanyname", "Opportunity"));
                Element(driver, Control("Addnewcompanyname", "Opportunity")).Click();
                ThinkTime(1);
                ThinkTime(1);

                Element(driver, Control("Addnewcompanyname", "Opportunity")).SendKeys(NewAccountName);
                ThinkTime(6);
                Element(driver, Control("Citylabel", "Opportunity")).Click();
                ThinkTime(2);
                if (Elements(driver, Control("Saveregardingaccount", "Opportunity")) > 0)
                {
                    MoveToElement(driver, Control("Saveregardingaccount", "Opportunity"));
                    Element(driver, Control("Saveregardingaccount", "Opportunity")).Click();
                    ThinkTime(5);
                }
                else
                {
                    ThinkTime(4);
                    MoveToElement(driver, Control("NewContactSaveButton", "Opportunity"));
                    Element(driver, Control("NewContactSaveButton", "Opportunity")).Click();
                    ThinkTime(5);
                }


                ThinkTime(8);
            }

            if (accountcondition == "ExistingAccount")
            {

            }


            //Product Field INput Updated.
            //UpdatedProductInput
            WaitUntil(driver, Control("UpdatedProductInput", "ITSales"), 30);
            Element(driver, Control("UpdatedProductInput", "ITSales")).Click();
            Element(driver, Control("UpdatedProductInput", "ITSales")).SendKeys("Day Campus");
            ThinkTime(4);
            WaitUntil(driver, Control("SelectDropDownToField", "ITSales"), 30);
            Element(driver, Control("SelectDropDownToField", "ITSales")).Click();

            scrollDownOpportunityEnterprise(driver, testInReport, testDataIteration, testName);

            //Select Bussiness Phone verification.
            WaitUntil(driver, Control("LeadBussinessPhone", "Generic"), 30);
            MoveToElement(driver, Control("LeadBussinessPhone", "Generic"));
            Element(driver, Control("LeadBussinessPhone", "Generic")).SendKeys(Keys.Control + "a");
            Element(driver, Control("LeadBussinessPhone", "Generic")).SendKeys(Keys.Delete);
            Element(driver, Control("LeadBussinessPhone", "Generic")).SendKeys(BPhone);
            ThinkTime(5);
            Element(driver, Control("BussinessPhoneClick", "Generic")).Click();
            ThinkTime(5);
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Bussiness Phone Field updated Successfully", "Bussiness Phone Field Verification");

            ThinkTime(3);


            if (Elements(driver, Control("SourceVerification", "Generic")) > 0)
            {
                scrollUpPage(driver, testInReport, testDataIteration, testName);
                WaitUntil(driver, Control("SourceVerification", "Generic"), 30);
                MoveToElement(driver, Control("SourceVerification", "Generic"));
                Element(driver, Control("SourceDeleteButton", "Generic")).Click();

                WaitUntil(driver, Control("SourceInputField", "Generic"), 30);
                Element(driver, Control("SourceInputField", "Generic")).SendKeys(Keys.Control + "a");
                Element(driver, Control("SourceInputField", "Generic")).SendKeys(Keys.Delete);
                Element(driver, Control("SourceInputField", "Generic")).SendKeys(Source);

                ThinkTime(5);
                WaitUntil(driver, Control("SelectSourceDropdown", "Generic"), 30);
                MoveToElement(driver, Control("SelectSourceDropdown", "Generic"));
                Element(driver, Control("SelectSourceDropdown", "Generic")).Click();
                ThinkTime(5);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Source Field updated Successfully", "Source Field Verification");

            }

            else
            {
                scrollUpPage(driver, testInReport, testDataIteration, testName);
                WaitUntil(driver, Control("SourceInputField", "Generic"), 30);
                Element(driver, Control("SourceInputField", "Generic")).SendKeys(Keys.Control + "a");
                Element(driver, Control("SourceInputField", "Generic")).SendKeys(Keys.Delete);
                Element(driver, Control("SourceInputField", "Generic")).SendKeys(Source);

                ThinkTime(5);
                WaitUntil(driver, Control("SelectSourceDropdown", "Generic"), 360);
                MoveToElement(driver, Control("SelectSourceDropdown", "Generic"));
                Element(driver, Control("SelectSourceDropdown", "Generic")).Click();
                ThinkTime(5);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Source Field updated Successfully", "Source Field Verification");

            }

            ThinkTime(10);
            scrollDownOpportunityPage(driver, testInReport, testName, testDataIteration);
            ThinkTime(8);
            //Select Major Source verification

            if (Elements(driver, Control("MajorSourceVerification", "Generic")) > 0)
            {
                WaitUntil(driver, Control("MajorSourceVerification", "Generic"), 360);
                MoveToElement(driver, Control("MajorSourceVerification", "Generic"));
                Element(driver, Control("MajorSourceDeleteButton", "Generic")).Click();
                Element(driver, Control("MajorSourceDeleteButton", "Generic")).Clear();

                WaitUntil(driver, Control("MajorSourceInputField", "Generic"), 30);
                MoveToElement(driver, Control("MajorSourceInputField", "Generic"));
                Element(driver, Control("MajorSourceInputField", "Generic")).SendKeys(MajorSource);

                ThinkTime(5);
                WaitUntil(driver, Control("SelectMSourceDropdown", "Generic"), 30);
                MoveToElement(driver, Control("SelectMSourceDropdown", "Generic"));
                Element(driver, Control("SelectMSourceDropdown", "Generic")).Click();

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Major Source Field updated Successfully", "Major Source Field Verification");

            }

            else
            {
                WaitUntil(driver, Control("MajorSourceInputField", "Generic"), 360);
                MoveToElement(driver, Control("MajorSourceInputField", "Generic"));
                //Element(driver, Control("MajorSourceInputField", "Generic")).Click();
                Element(driver, Control("MajorSourceInputField", "Generic")).SendKeys(Keys.Control + "a");
                Element(driver, Control("MajorSourceInputField", "Generic")).SendKeys(Keys.Delete);
                Element(driver, Control("MajorSourceInputField", "Generic")).SendKeys(MajorSource);
                ThinkTime(3);
                WaitUntil(driver, Control("SelectMSourceDropdown", "Generic"), 30);
                MoveToElement(driver, Control("SelectMSourceDropdown", "Generic"));
                Element(driver, Control("SelectMSourceDropdown", "Generic")).Click();

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Major Source Field updated Successfully", "Major Source Field Verification");

            }


            //Select Minor Source verification

            if (Elements(driver, Control("MinorSourceVerification", "Generic")) > 0)
            {
                WaitUntil(driver, Control("MinorSourceVerification", "Generic"), 360);
                MoveToElement(driver, Control("MinorSourceVerification", "Generic"));
                Element(driver, Control("MinorSourceDeleteButton", "Generic")).Click();
                Element(driver, Control("MinorSourceDeleteButton", "Generic")).Clear();
                WaitUntil(driver, Control("MinorSourceInputButton", "Generic"), 360);
                Element(driver, Control("MinorSourceInputButton", "Generic")).SendKeys(Keys.Control + "a");
                Element(driver, Control("MinorSourceInputButton", "Generic")).SendKeys(Keys.Delete);

                Element(driver, Control("MinorSourceInputButton", "Generic")).SendKeys(MinorSource);

                ThinkTime(5);
                WaitUntil(driver, Control("SelectMinorSourceDropdown", "Generic"), 360);
                MoveToElement(driver, Control("SelectMinorSourceDropdown", "Generic"));
                Element(driver, Control("SelectMinorSourceDropdown", "Generic")).Click();

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Minor Source Field updated Successfully", "Minor Source Field Verification");

            }

            else
            {
                WaitUntil(driver, Control("MinorSourceInputButton", "Generic"), 30);
                MoveToElement(driver, Control("MinorSourceInputButton", "Generic"));
                //Element(driver, Control("MinorSourceInputButton", "Generic")).Click();
                Element(driver, Control("MinorSourceInputButton", "Generic")).SendKeys(Keys.Control + "a");
                Element(driver, Control("MinorSourceInputButton", "Generic")).SendKeys(Keys.Delete);

                Element(driver, Control("MinorSourceInputButton", "Generic")).SendKeys(MinorSource);

                ThinkTime(5);
                WaitUntil(driver, Control("SelectMinorSourceDropdown", "Generic"), 30);
                MoveToElement(driver, Control("SelectMinorSourceDropdown", "Generic"));
                Element(driver, Control("SelectMinorSourceDropdown", "Generic")).Click();

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Minor Source Field updated Successfully", "Minor Source Field Verification");

            }


            scrollDownOpportunityEnterprise(driver, testInReport, testDataIteration, testName);
            scrollDownOpportunityEnterprise(driver, testInReport, testDataIteration, testName);
            ThinkTime(5);

            // Recommended Business centre
            WaitUntil(driver, Control("RecomentedBussinessCentreInputButton", "Opportunity"), 30);
            MoveToElement(driver, Control("RecomentedBussinessCentreInputButton", "Opportunity"));
            Element(driver, Control("RecomentedBussinessCentreInputButton", "Opportunity")).SendKeys(RecomendedBussinessCenre);

            ThinkTime(6);
            MoveToElement(driver, Control("Languagedropdown", "EnterpriseSales"));
            Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();
            scrollDownOpportunityEnterprise(driver, testInReport, testDataIteration, testName);
            ThinkTime(5);






            saveFooter(driver, testInReport, testName, testDataIteration);
            ThinkTime(10);


        }


        public void CreateLeadwithproductITSales(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string LastName, string Email, string BPhone, string Source, string MajorSource, string MinorSource, string now, string contactcondition, string accountcondition, string newcontactname, string Language, string accountname, string RecomendedBussinessCenre, string producttype, string productname)
        {
            // Click on New button
            ThinkTime(4);
            WaitUntil(driver, Control("NewTabOpportunity", "Opportunity"), 30);
            MoveToElement(driver, Control("NewTabOpportunity", "Opportunity"));
            Element(driver, Control("NewTabOpportunity", "Opportunity")).Click();
            ThinkTime(4);

            // Enter Lastname 
            WaitUntil(driver, Control("LeadLname", "Generic"), 30);
            MoveToElement(driver, Control("LeadLname", "Generic"));
            Element(driver, Control("LeadLname", "Generic")).SendKeys(Keys.Control + "a");
            Element(driver, Control("LeadLname", "Generic")).SendKeys(Keys.Delete);
            Element(driver, Control("LeadLname", "Generic")).SendKeys(LastName);
            Element(driver, Control("Lastnameclick", "Generic")).Click();

            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Last Name Field updated Successfully", "Last Name Field Verification");

            ThinkTime(3);

            //Select Email verification.

            WaitUntil(driver, Control("LeadEmail", "Generic"), 30);
            MoveToElement(driver, Control("LeadEmail", "Generic"));
            Element(driver, Control("LeadEmail", "Generic")).Click();
            ThinkTime(1);
            Element(driver, Control("LeadEmail", "Generic")).SendKeys(Keys.Control + "a");
            Element(driver, Control("LeadEmail", "Generic")).SendKeys(Keys.Delete);
            ThinkTime(2);
            Element(driver, Control("LeadEmail", "Generic")).SendKeys(Email);
            ThinkTime(5);

            if (Elements(driver, Control("ScriptDialg", "Opportunity")) > 0)
            {
                Element(driver, Control("HandleScriptError", "Opportunity")).Click();
                ThinkTime(3);
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "No Script error present", "No Script error present");

            }
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Email Field updated Successfully", "Email Field Verification");

            ThinkTime(3);


            //create new contact
            WaitUntil(driver, Control("Contactlookup", "Opportunity"), 30);
            MoveToElement(driver, Control("Contactlookup", "Opportunity"));
            Element(driver, Control("Contactlookup", "Opportunity")).Click();
            Element(driver, Control("Contactlookup", "Opportunity")).SendKeys(newcontactname);
            ThinkTime(6);
            MoveToElement(driver, Control("ITSalesCustomer", "Opportunity"));
            Element(driver, Control("ITSalesCustomer", "Opportunity")).Click();
            ThinkTime(2);
            if (accountcondition == "NewAccount")
            {
                string NewAccountName = accountname + now;
                ThinkTime(15);
                WaitUntil(driver, Control("VerifyCompanyField", "Opportunity"), 30);
                MoveToElement(driver, Control("VerifyCompanyField", "Opportunity"));
                ActionsClick(driver, Control("VerifyCompanyField", "Opportunity"));
                ThinkTime(1);
                ActionsClick(driver, Control("Accountlookupinputfield", "Opportunity"));
                ThinkTime(1);
                ActionsClick(driver, Control("NewAccountButton", "Opportunity"));
                ThinkTime(15);
                MoveToElement(driver, Control("Addnewcompanyname", "Opportunity"));
                Element(driver, Control("Addnewcompanyname", "Opportunity")).Click();
                ThinkTime(1);
                ThinkTime(1);

                Element(driver, Control("Addnewcompanyname", "Opportunity")).SendKeys(NewAccountName);
                ThinkTime(6);
                Element(driver, Control("Citylabel", "Opportunity")).Click();
                ThinkTime(2);
                if (Elements(driver, Control("Saveregardingaccount", "Opportunity")) > 0)
                {
                    MoveToElement(driver, Control("Saveregardingaccount", "Opportunity"));
                    Element(driver, Control("Saveregardingaccount", "Opportunity")).Click();
                    ThinkTime(5);
                }
                else
                {
                    ThinkTime(4);
                    MoveToElement(driver, Control("NewContactSaveButton", "Opportunity"));
                    Element(driver, Control("NewContactSaveButton", "Opportunity")).Click();
                    ThinkTime(5);
                }


                ThinkTime(8);
            }

            if (accountcondition == "ExistingAccount")
            {

            }

            // Enter Product
            //if (producttype == "ExistingProduct")
            //{
            //    WaitUntil(driver, Control("Enterproductname", "Opportunity"), 30);
            //    MoveToElement(driver, Control("Enterproductname", "Opportunity"));
            //    Element(driver, Control("Enterproductname", "Opportunity")).Click();
            //    ThinkTime(3);
            //    Element(driver, Control("Enterproductname", "Opportunity")).SendKeys(productname);
            //    ThinkTime(3);
            //    Element(driver, Control("ProductValue", "Opportunity")).Click();
            //    ThinkTime(3);
            //}
            //if (producttype == "")
            //{
            //    WaitUntil(driver, Control("Enterproductname", "Opportunity"), 30);
            //    MoveToElement(driver, Control("Enterproductname", "Opportunity"));
            //    Element(driver, Control("Enterproductname", "Opportunity")).Click();

            //    Element(driver, Control("Enterproductname", "Opportunity")).SendKeys(productname);
            //    ThinkTime(3);
            //    Element(driver, Control("ProductValue", "Opportunity")).Click();
            //    ThinkTime(3);
            //}
            //else
            //{
            //    WaitUntil(driver, Control("Productvaluelookup", "Opportunity"), 30);
            //    MoveToElement(driver, Control("Productvaluelookup", "Opportunity"));
            //    Element(driver, Control("Productvaluelookup", "Opportunity")).Click();
            //    ThinkTime(3);
            //    Element(driver, Control("ITSalesCustomer", "Opportunity")).Click();
            //    ThinkTime(3);
            //}
            scrollDownOpportunityEnterpriseCust(driver, testInReport, testName, testDataIteration, "-300");

            //Product Field INput Updated.
            //UpdatedProductInput
            WaitUntil(driver, Control("UpdatedProductInput", "ITSales"), 30);
            Element(driver, Control("UpdatedProductInput", "ITSales")).Click();
            Element(driver, Control("UpdatedProductInput", "ITSales")).SendKeys("Day Campus");
            ThinkTime(4);
            WaitUntil(driver, Control("SelectDropDownToField", "ITSales"), 30);
            Element(driver, Control("SelectDropDownToField", "ITSales")).Click();

            scrollDownOpportunityEnterpriseCust(driver, testInReport, testName, testDataIteration, "500");
            //Select Bussiness Phone verification.
            WaitUntil(driver, Control("LeadBussinessPhone", "Generic"), 30);
            MoveToElement(driver, Control("LeadBussinessPhone", "Generic"));
            Element(driver, Control("LeadBussinessPhone", "Generic")).SendKeys(Keys.Control + "a");
            Element(driver, Control("LeadBussinessPhone", "Generic")).SendKeys(Keys.Delete);
            Element(driver, Control("LeadBussinessPhone", "Generic")).SendKeys(BPhone);
            ThinkTime(5);
            Element(driver, Control("BussinessPhoneClick", "Generic")).Click();
            ThinkTime(5);
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Bussiness Phone Field updated Successfully", "Bussiness Phone Field Verification");

            ThinkTime(3);

            scrollDownOpportunityEnterprise(driver, testInReport, testDataIteration, testName);
            scrollDownOpportunityEnterprise(driver, testInReport, testDataIteration, testName);
            ThinkTime(5);

            // Recommended Business centre
            WaitUntil(driver, Control("RecomentedBussinessCentreInputButton", "Opportunity"), 30);
            MoveToElement(driver, Control("RecomentedBussinessCentreInputButton", "Opportunity"));
            Element(driver, Control("RecomentedBussinessCentreInputButton", "Opportunity")).SendKeys(RecomendedBussinessCenre);

            ThinkTime(2);
            WaitUntil(driver, Control("Languagedropdown", "EnterpriseSales"), 30);
            Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();
            scrollDownOpportunityEnterprise(driver, testInReport, testDataIteration, testName);
            ThinkTime(5);

            //Select Source verification
            /*
                        if (Elements(driver, Control("SourceVerification", "Generic")) > 0)
                        {
                            WaitUntil(driver, Control("SourceVerification", "Generic"), 30);
                            MoveToElement(driver, Control("SourceVerification", "Generic"));
                            Element(driver, Control("SourceDeleteButton", "Generic")).Click();
                            ThinkTime(5);
                            WaitUntil(driver, Control("SourceInputField", "Generic"), 30);
                            MoveToElement(driver, Control("SourceInputField", "Generic"));
                            Element(driver, Control("SourceInputField", "Generic")).SendKeys(Source);
                            ThinkTime(5);
                            WaitUntil(driver, Control("SelectSourceDropdown", "Generic"), 30);
                            MoveToElement(driver, Control("SelectSourceDropdown", "Generic"));
                            Element(driver, Control("SelectSourceDropdown", "Generic")).Click();
                            ThinkTime(5);
                            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Source Field updated Successfully", "Source Field Verification");
                            ThinkTime(5);
                        }

                        else
                        {
                            WaitUntil(driver, Control("SourceInputField", "Generic"), 30);
                            MoveToElement(driver, Control("SourceInputField", "Generic"));
                            Element(driver, Control("SourceInputField", "Generic")).SendKeys(Source);
                            ThinkTime(3);
                            WaitUntil(driver, Control("SelectSourceDropdown", "Generic"), 30);
                            MoveToElement(driver, Control("SelectSourceDropdown", "Generic"));
                            Element(driver, Control("SelectSourceDropdown", "Generic")).Click();
                            ThinkTime(5);
                            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Source Field updated Successfully", "Source Field Verification");

                        }

                        ThinkTime(10);
                        scrollDownOpportunityPage(driver, testInReport, testName, testDataIteration);

                        //Select Major Source verification

                        if (Elements(driver, Control("MajorSourceVerification", "Generic")) > 0)
                        {
                            WaitUntil(driver, Control("MajorSourceVerification", "Generic"), 30);
                            MoveToElement(driver, Control("MajorSourceVerification", "Generic"));
                            Element(driver, Control("MajorSourceDeleteButton", "Generic")).Click();
                            ThinkTime(5);
                            WaitUntil(driver, Control("MajorSourceInputField", "Generic"), 30);
                            MoveToElement(driver, Control("MajorSourceInputField", "Generic"));
                            Element(driver, Control("MajorSourceInputField", "Generic")).SendKeys(MajorSource);
                            ThinkTime(5);
                            WaitUntil(driver, Control("SelectMSourceDropdown", "Generic"), 30);
                            MoveToElement(driver, Control("SelectMSourceDropdown", "Generic"));
                            Element(driver, Control("SelectMSourceDropdown", "Generic")).Click();
                            ThinkTime(5);
                            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Major Source Field updated Successfully", "Major Source Field Verification");

                        }

                        else
                        {
                            WaitUntil(driver, Control("MajorSourceInputField", "Generic"), 30);
                            MoveToElement(driver, Control("MajorSourceInputField", "Generic"));
                            Element(driver, Control("MajorSourceInputField", "Generic")).SendKeys(MajorSource);
                            ThinkTime(5);
                            WaitUntil(driver, Control("SelectMSourceDropdown", "Generic"), 30);
                            MoveToElement(driver, Control("SelectMSourceDropdown", "Generic"));
                            Element(driver, Control("SelectMSourceDropdown", "Generic")).Click();
                            ThinkTime(5);
                            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Major Source Field updated Successfully", "Major Source Field Verification");

                        }


                        //Select Minor Source verification

                        if (Elements(driver, Control("MinorSourceVerification", "Generic")) > 0)
                        {
                            WaitUntil(driver, Control("MinorSourceVerification", "Generic"), 30);
                            MoveToElement(driver, Control("MinorSourceVerification", "Generic"));
                            Element(driver, Control("MinorSourceDeleteButton", "Generic")).Click();
                            ThinkTime(5);
                            WaitUntil(driver, Control("MinorSourceInputButton", "Generic"), 30);
                            MoveToElement(driver, Control("MinorSourceInputButton", "Generic"));
                            Element(driver, Control("MinorSourceInputButton", "Generic")).SendKeys(MinorSource);
                            ThinkTime(5);
                            WaitUntil(driver, Control("SelectMinorSourceDropdown", "Generic"), 30);
                            MoveToElement(driver, Control("SelectMinorSourceDropdown", "Generic"));
                            Element(driver, Control("SelectMinorSourceDropdown", "Generic")).Click();
                            ThinkTime(5);
                            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Minor Source Field updated Successfully", "Minor Source Field Verification");

                        }

                        else
                        {
                            WaitUntil(driver, Control("MinorSourceInputButton", "Generic"), 30);
                            MoveToElement(driver, Control("MinorSourceInputButton", "Generic"));
                            Element(driver, Control("MinorSourceInputButton", "Generic")).SendKeys(MinorSource);
                            ThinkTime(5);
                            WaitUntil(driver, Control("SelectMinorSourceDropdown", "Generic"), 30);
                            MoveToElement(driver, Control("SelectMinorSourceDropdown", "Generic"));
                            Element(driver, Control("SelectMinorSourceDropdown", "Generic")).Click();
                            ThinkTime(5);
                            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Minor Source Field updated Successfully", "Minor Source Field Verification");
                            ThinkTime(5);
                        }*/


            if (Elements(driver, Control("SourceVerification", "Generic")) > 0)
            {
                scrollUpPage(driver, testInReport, testDataIteration, testName);
                WaitUntil(driver, Control("SourceVerification", "Generic"), 30);
                MoveToElement(driver, Control("SourceVerification", "Generic"));
                Element(driver, Control("SourceDeleteButton", "Generic")).Click();

                WaitUntil(driver, Control("SourceInputField", "Generic"), 30);
                Element(driver, Control("SourceInputField", "Generic")).SendKeys(Keys.Control + "a");
                Element(driver, Control("SourceInputField", "Generic")).SendKeys(Keys.Delete);
                Element(driver, Control("SourceInputField", "Generic")).SendKeys(Source);

                ThinkTime(5);
                WaitUntil(driver, Control("SelectSourceDropdown", "Generic"), 30);
                MoveToElement(driver, Control("SelectSourceDropdown", "Generic"));
                Element(driver, Control("SelectSourceDropdown", "Generic")).Click();
                ThinkTime(5);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Source Field updated Successfully", "Source Field Verification");

            }

            else
            {
                scrollDownOpportunityEnterpriseCust(driver, testInReport, testDataIteration, testName, "-400");
                WaitUntil(driver, Control("SourceInputField", "Generic"), 30);
                Element(driver, Control("SourceInputField", "Generic")).SendKeys(Keys.Control + "a");
                Element(driver, Control("SourceInputField", "Generic")).SendKeys(Keys.Delete);
                Element(driver, Control("SourceInputField", "Generic")).SendKeys(Source);

                ThinkTime(5);
                WaitUntil(driver, Control("SelectSourceDropdown", "Generic"), 360);
                MoveToElement(driver, Control("SelectSourceDropdown", "Generic"));
                Element(driver, Control("SelectSourceDropdown", "Generic")).Click();
                ThinkTime(5);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Source Field updated Successfully", "Source Field Verification");

            }

            ThinkTime(8);
            //Select Major Source verification

            if (Elements(driver, Control("MajorSourceVerification", "Generic")) > 0)
            {
                WaitUntil(driver, Control("MajorSourceVerification", "Generic"), 360);
                MoveToElement(driver, Control("MajorSourceVerification", "Generic"));
                Element(driver, Control("MajorSourceDeleteButton", "Generic")).Click();
                Element(driver, Control("MajorSourceDeleteButton", "Generic")).Clear();

                WaitUntil(driver, Control("MajorSourceInputField", "Generic"), 30);
                MoveToElement(driver, Control("MajorSourceInputField", "Generic"));
                Element(driver, Control("MajorSourceInputField", "Generic")).SendKeys(MajorSource);

                ThinkTime(5);
                WaitUntil(driver, Control("SelectMSourceDropdown", "Generic"), 30);
                MoveToElement(driver, Control("SelectMSourceDropdown", "Generic"));
                Element(driver, Control("SelectMSourceDropdown", "Generic")).Click();

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Major Source Field updated Successfully", "Major Source Field Verification");

            }

            else
            {
                WaitUntil(driver, Control("MajorSourceInputField", "Generic"), 360);
                MoveToElement(driver, Control("MajorSourceInputField", "Generic"));
                //Element(driver, Control("MajorSourceInputField", "Generic")).Click();
                Element(driver, Control("MajorSourceInputField", "Generic")).SendKeys(Keys.Control + "a");
                Element(driver, Control("MajorSourceInputField", "Generic")).SendKeys(Keys.Delete);
                Element(driver, Control("MajorSourceInputField", "Generic")).SendKeys(MajorSource);
                ThinkTime(3);
                WaitUntil(driver, Control("SelectMSourceDropdown", "Generic"), 30);
                MoveToElement(driver, Control("SelectMSourceDropdown", "Generic"));
                Element(driver, Control("SelectMSourceDropdown", "Generic")).Click();

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Major Source Field updated Successfully", "Major Source Field Verification");

            }


            //Select Minor Source verification

            if (Elements(driver, Control("MinorSourceVerification", "Generic")) > 0)
            {
                WaitUntil(driver, Control("MinorSourceVerification", "Generic"), 360);
                MoveToElement(driver, Control("MinorSourceVerification", "Generic"));
                Element(driver, Control("MinorSourceDeleteButton", "Generic")).Click();
                Element(driver, Control("MinorSourceDeleteButton", "Generic")).Clear();
                WaitUntil(driver, Control("MinorSourceInputButton", "Generic"), 360);
                Element(driver, Control("MinorSourceInputButton", "Generic")).SendKeys(Keys.Control + "a");
                Element(driver, Control("MinorSourceInputButton", "Generic")).SendKeys(Keys.Delete);

                Element(driver, Control("MinorSourceInputButton", "Generic")).SendKeys(MinorSource);

                ThinkTime(5);
                WaitUntil(driver, Control("SelectMinorSourceDropdown", "Generic"), 360);
                MoveToElement(driver, Control("SelectMinorSourceDropdown", "Generic"));
                Element(driver, Control("SelectMinorSourceDropdown", "Generic")).Click();

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Minor Source Field updated Successfully", "Minor Source Field Verification");

            }

            else
            {
                WaitUntil(driver, Control("MinorSourceInputButton", "Generic"), 30);
                MoveToElement(driver, Control("MinorSourceInputButton", "Generic"));
                //Element(driver, Control("MinorSourceInputButton", "Generic")).Click();
                Element(driver, Control("MinorSourceInputButton", "Generic")).SendKeys(Keys.Control + "a");
                Element(driver, Control("MinorSourceInputButton", "Generic")).SendKeys(Keys.Delete);

                Element(driver, Control("MinorSourceInputButton", "Generic")).SendKeys(MinorSource);

                ThinkTime(5);
                WaitUntil(driver, Control("SelectMinorSourceDropdown", "Generic"), 30);
                MoveToElement(driver, Control("SelectMinorSourceDropdown", "Generic"));
                Element(driver, Control("SelectMinorSourceDropdown", "Generic")).Click();

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Minor Source Field updated Successfully", "Minor Source Field Verification");

            }


            saveFooter(driver, testInReport, testName, testDataIteration);
            ThinkTime(10);


        }

        public void Createlead(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {

            // Click on New button
            ThinkTime(4);
            WaitUntil(driver, Control("NewTabOpportunity", "Opportunity"), 30);
            MoveToElement(driver, Control("NewTabOpportunity", "Opportunity"));
            Element(driver, Control("NewTabOpportunity", "Opportunity")).Click();
            ThinkTime(4);

        }

        //Method to open first record in timeline opp.

        public void OpenFirstRecordTimeline(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {
            ThinkTime(2);
            WaitUntil(driver, Control("OpentNewphoneRecord", "CommonObj"), 30);
            Element(driver, Control("OpentNewphoneRecord", "CommonObj")).Click();
            ThinkTime(2);
            WaitUntil(driver, Control("OpenRecord", "CommonObj"), 30);
            Element(driver, Control("OpenRecord", "CommonObj")).Click();


        }

        //Method to open first record from two records in timeline.
        public void OpenFirstPhoneRecordTimeline(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {
            ThinkTime(2);
            WaitUntil(driver, Control("OpentNewphoneRecord", "CommonObj"), 30);
            Element(driver, Control("OpentNewphoneRecord", "CommonObj")).Click();
            ThinkTime(2);
            WaitUntil(driver, Control("OpenRecord", "CommonObj"), 30);
            Element(driver, Control("OpenRecord", "CommonObj")).Click();

        }


        //Method to navigate to regarding opp from appointment.
        public void NavigatetooppfromAppointment(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {
            ThinkTime(7);

            WaitUntil(driver, Control("OpenRelatedRecordFromAppointment", "Opportunity"), 30);
            MoveToElement(driver, Control("OpenRelatedRecordFromAppointment", "Opportunity"));
            Element(driver, Control("OpenAppOpenRelatedRecordFromAppointmentButton", "Opportunity")).Click();

        }

        //Method to create new appointment.
        public void CreateAppointmentActivityOpp(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string Owner, string Subject)
        {
            ThinkTime(3);

            WaitUntil(driver, Control("AddTaskButtonOpp", "Opportunity"), 30);
            Element(driver, Control("AddTaskButtonOpp", "Opportunity")).Click();
            ThinkTime(3);
            WaitUntil(driver, Control("NewAppointmentButton", "CommonObj"), 30);
            Element(driver, Control("NewAppointmentButton", "CommonObj")).Click();

            //WaitUntil(driver, Control("AppointmentsubjectInput", "Opportunity"), 30);
            //Element(driver, Control("AppointmentsubjectInput", "Opportunity")).Click();
            //Element(driver, Control("AppointmentsubjectInput", "Opportunity")).SendKeys(Subject);
            ThinkTime(3);
            WaitUntil(driver, Control("SaveAndClose", "Opportunity"), 30);
            Element(driver, Control("SaveAndClose", "Opportunity")).Click();

        }

        //Method to create new phone call activity from Opportunity sales.
        public void Updateduedate(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string duedate)
        {


            //Select due date

            WaitUntil(driver, Control("TimeDue", "phoneCall"), 360);
            MoveToElement(driver, Control("TimeDue", "phoneCall"));
            ActionsClick(driver, Control("TimeDue", "phoneCall"));
            ThinkTime(3);
            ActionsClick(driver, Control("TimeDue", "phoneCall"));
            ThinkTime(3);
            Element(driver, Control("TimeDue", "phoneCall")).SendKeys(Keys.Control + "a");
            //Element(driver, Control("TimeDue", "phoneCall")).SendKeys(Keys.Delete);
            Element(driver, Control("TimeDue", "phoneCall")).SendKeys(duedate);
            ThinkTime(8);
            // ThinkTime(2);
            saveFooter(driver, testInReport, testName, testDataIteration);
            ThinkTime(3);
        }


        //Method to create new phone call activity from Opportunity sales.
        public void CreatePhoneCallactivityopp(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string button, string subject, string duedate)
        {

            Activitiesscreenbutton(driver, testInReport, testName, testDataIteration, button);

            //ThinkTime(10);
            //ActionsClick(driver, Control("NewActivityButton", "EnterpriseSales"));
            ThinkTime(7);
            WaitUntil(driver, Control("NewPhoneCallButton", "EnterpriseSales"), 30);
            Element(driver, Control("NewPhoneCallButton", "EnterpriseSales")).Click();

            ThinkTime(3);

            WaitUntil(driver, Control("PhoneCallSubject", "Opportunity"), 30);
            Element(driver, Control("PhoneCallSubject", "Opportunity")).SendKeys(Keys.Control + "a");
            Element(driver, Control("PhoneCallSubject", "Opportunity")).SendKeys(Keys.Delete);
            Element(driver, Control("PhoneCallSubject", "Opportunity")).SendKeys(subject);
            String s = Element(driver, Control("PhoneCallSubject", "Opportunity")).GetAttribute("value").ToString();

            scrollDownQuickCreatePhonecall(driver, testInReport, testName, testDataIteration);


            ThinkTime(3);


            //Select due date

            //ThinkTime(5);
            //WaitUntil(driver, Control("DueDate", "phoneCall"), 360);
            //MoveToElement(driver, Control("DueDate", "phoneCall"));
            //ActionsClick(driver, Control("DueDate", "phoneCall"));
            //ThinkTime(3);
            //ActionsClick(driver, Control("DueDate", "phoneCall"));
            //ThinkTime(3);
            //Element(driver, Control("DueDate", "phoneCall")).SendKeys(duedate);
            ThinkTime(5);
            WaitUntil(driver, Control("DateDue", "phoneCall"), 360);
            MoveToElement(driver, Control("DateDue", "phoneCall"));
            ActionsClick(driver, Control("DateDue", "phoneCall"));
            ThinkTime(3);
            ActionsClick(driver, Control("DateDue", "phoneCall"));
            ThinkTime(3);
            Element(driver, Control("DateDue", "phoneCall")).SendKeys(duedate);
            ThinkTime(8);
            // ThinkTime(2);
            Element(driver, Control("Saveregardingaccount", "Opportunity")).Click();
            ThinkTime(3);
        }

        //Method to create new phone call activity from Opportunity sales.
        public string CreatePhoneCallactivityoppwithsub(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string button, string subject, string duedate)
        {

            Activitiesscreenbutton(driver, testInReport, testName, testDataIteration, button);

            //ThinkTime(10);
            //ActionsClick(driver, Control("NewActivityButton", "EnterpriseSales"));
            ThinkTime(7);
            WaitUntil(driver, Control("NewPhoneCallButton", "EnterpriseSales"), 30);
            Element(driver, Control("NewPhoneCallButton", "EnterpriseSales")).Click();

            ThinkTime(3);

            WaitUntil(driver, Control("PhoneCallSubject", "Opportunity"), 30);
            Element(driver, Control("PhoneCallSubject", "Opportunity")).SendKeys(Keys.Control + "a");
            Element(driver, Control("PhoneCallSubject", "Opportunity")).SendKeys(Keys.Delete);
            Element(driver, Control("PhoneCallSubject", "Opportunity")).SendKeys(subject);
            String s = Element(driver, Control("PhoneCallSubject", "Opportunity")).GetAttribute("value").ToString();
            ThinkTime(3);

            //Select due date
            ThinkTime(5);
            WaitUntil(driver, Control("DueDate", "phoneCall"), 360);
            MoveToElement(driver, Control("DueDate", "phoneCall"));
            ActionsClick(driver, Control("DueDate", "phoneCall"));
            ThinkTime(3);
            ActionsClick(driver, Control("DueDate", "phoneCall"));
            ThinkTime(3);
            Element(driver, Control("DueDate", "phoneCall")).SendKeys(duedate);
            ThinkTime(8);
            // ThinkTime(2);
            Element(driver, Control("Saveregardingaccount", "Opportunity")).Click();
            return s;

        }


        //Method to create new phone call activity from Opportunity sales.
        public void CreatePhoneCallActivityOppo(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string Owner, string Subject)
        {
            ThinkTime(3);



            WaitUntil(driver, Control("AddTaskButtonOpp", "Opportunity"), 30);
            Element(driver, Control("AddTaskButtonOpp", "Opportunity")).Click();

            WaitUntil(driver, Control("PhoneCallactivityButton", "Opportunity"), 30);
            Element(driver, Control("PhoneCallactivityButton", "Opportunity")).Click();

            WaitUntil(driver, Control("PhoneOwnerField", "Opportunity"), 30);
            MoveToElement(driver, Control("PhoneOwnerField", "Opportunity"));
            Element(driver, Control("PhoneOwnerCloseField", "Opportunity")).Click();

            WaitUntil(driver, Control("PhoneOwnerInput", "Opportunity"), 30);
            Element(driver, Control("PhoneOwnerInput", "Opportunity")).Click();
            Element(driver, Control("PhoneOwnerInput", "Opportunity")).SendKeys(Owner);
            ThinkTime(3);
            Element(driver, Control("DropDownResultSelect", "Opportunity")).Click();

            WaitUntil(driver, Control("PhoneSubjectInput", "Opportunity"), 30);
            Element(driver, Control("PhoneSubjectInput", "Opportunity")).Click();
            Element(driver, Control("PhoneSubjectInput", "Opportunity")).SendKeys(Subject);




            WaitUntil(driver, Control("SaveAndClose", "Opportunity"), 30);
            Element(driver, Control("SaveAndClose", "Opportunity")).Click();



        }
        public void duedateinactivity(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string duedate)
        {


            ThinkTime(2);
            // WaitUntil(driver, Control("DueDate", "phoneCall"), 360); "DuedateNew", "phoneCall"
            WaitUntil(driver, Control("DateDue", "phoneCall"), 60);
            Element(driver, Control("DateDue", "phoneCall")).Click();
            ThinkTime(2);
            Element(driver, Control("DateDue", "phoneCall")).Click();
            ThinkTime(2);
            Element(driver, Control("DateDue", "phoneCall")).SendKeys(Keys.Control + "a");
            Element(driver, Control("DateDue", "phoneCall")).SendKeys(Keys.Delete);
            ThinkTime(2);
            Element(driver, Control("DateDue", "phoneCall")).SendKeys(duedate);
            ThinkTime(5);
            saveFooter(driver, testInReport, testName, testDataIteration);
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Due date Field updated Successfully", "Due date Field Verification");
            ThinkTime(2);

        }

        public void ChangeCallfromField(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string CallFrom)
        {

            ThinkTime(2);
            WaitUntil(driver, Control("SubjectEx", "Opportunity"), 60);
            Element(driver, Control("SubjectEx", "Opportunity")).SendKeys(Keys.Tab);
            ThinkTime(2);
            Element(driver, Control("DeletePhone", "Opportunity")).Click();

            ThinkTime(10);

            //     //WaitUntil(driver, Control("CallfromInput", "Opportunity"), 60);
            // //MoveToElement(driver, Control("CallfromInput", "Opportunity"));
            // Element(driver, Control("CallfromInput", "Opportunity")).Click();
            //// ElementHighlight(driver, Control("CallfromInput", "Opportunity"));
            // Element(driver, Control("CallfromInput", "Opportunity")).SendKeys("CRM Test 18");
            // ThinkTime(6);

            Element(driver, Control("InputFrom", "Opportunity")).Click();
            Element(driver, Control("InputFrom", "Opportunity")).SendKeys("CRM Test 18");
            ThinkTime(6);

            MoveToElement(driver, Control("NewMinorSourceSelect", "Opportunity"));
            Element(driver, Control("NewMinorSourceSelect", "Opportunity")).Click();
            ThinkTime(2);
            saveFooter(driver, testInReport, testName, testDataIteration);
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Call From Field updated Successfully", "Call from Field Verification");
            ThinkTime(2);
            //MoveToElement(driver, Control("refreshButton", "Opportunity"));
            //Element(driver, Control("refreshButton", "Opportunity")).Click();
            //ThinkTime(5);
        }

        public void cancelphonecall(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string action, string oppstatus)
        {

            ThinkTime(5);
            Select(Element(driver, Control("state", "phoneCall"))).SelectByText("Canceled");

            ThinkTime(3);
            Element(driver, Control("Closephonecall", action, "Opportunity")).Click();

            ThinkTime(5);

        }

        public void createandqualifylead(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string LastName, string Email, string BPhone, string Source, string MajorSource, string MinorSource, string now, string contactcondition, string accountcondition, string newcontactname, string Language, string accountname)
        {
            // Click on New button
            ThinkTime(4);
            WaitUntil(driver, Control("NewTabOpportunity", "Opportunity"), 30);
            MoveToElement(driver, Control("NewTabOpportunity", "Opportunity"));
            Element(driver, Control("NewTabOpportunity", "Opportunity")).Click();
            ThinkTime(4);

            // Enter Lastname 
            WaitUntil(driver, Control("LeadLname", "Generic"), 30);
            MoveToElement(driver, Control("LeadLname", "Generic"));
            Element(driver, Control("LeadLname", "Generic")).SendKeys(Keys.Control + "a");
            Element(driver, Control("LeadLname", "Generic")).SendKeys(Keys.Delete);
            Element(driver, Control("LeadLname", "Generic")).SendKeys(LastName);
            // Element(driver, Control("Lastnameclick", "Generic")).Click();

            ThinkTime(3);
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Last Name Field updated Successfully", "Last Name Field Verification");

            ThinkTime(3);

            //Select Email verification.

            WaitUntil(driver, Control("LeadEmail", "Generic"), 30);
            MoveToElement(driver, Control("LeadEmail", "Generic"));
            Element(driver, Control("LeadEmail", "Generic")).Click();
            ThinkTime(1);
            Element(driver, Control("LeadEmail", "Generic")).SendKeys(Keys.Control + "a");
            Element(driver, Control("LeadEmail", "Generic")).SendKeys(Keys.Delete);
            ThinkTime(2);
            Element(driver, Control("LeadEmail", "Generic")).SendKeys(Email);
            ThinkTime(5);

            if (Elements(driver, Control("ScriptDialg", "Opportunity")) > 0)
            {
                Element(driver, Control("HandleScriptError", "Opportunity")).Click();
                ThinkTime(3);
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "No Script error present", "No Script error present");

            }

            //  Element(driver, Control("Emialclick", "Generic")).Click();

            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Email Field updated Successfully", "Email Field Verification");

            ThinkTime(3);

            // Select contact
            if (contactcondition == "NewContact")
            {
                ThinkTime(2);
                Element(driver, Control("LeadContactClick", "Generic")).Click();
                ThinkTime(2);
                WaitUntil(driver, Control("ContactInputField", "Generic"), 30);
                MoveToElement(driver, Control("ContactInputField", "Generic"));
                ElementHighlight(driver, Control("ContactInputField", "Generic"));
                ThinkTime(10);

                Element(driver, Control("ContactSearchButton", "Generic")).Click();

                ThinkTime(10);

                WaitUntil(driver, Control("NewContactButton", "Generic"), 30);
                MoveToElement(driver, Control("NewContactButton", "Generic"));
                Element(driver, Control("NewContactButton", "Generic")).Click();
                ThinkTime(5);
                MoveToElement(driver, Control("Contactlastname", "EnterpriseSales"));
                Element(driver, Control("Contactlastname", "EnterpriseSales")).Click();
                ThinkTime(2);
                Element(driver, Control("Contactlastname", "EnterpriseSales")).SendKeys(newcontactname);
                ThinkTime(5);


                MoveToElement(driver, Control("ActivityCreateContactInput", "EnterpriseSales"));
                Element(driver, Control("ActivityCreateContactInput", "EnterpriseSales")).Click();
                ThinkTime(2);
                Element(driver, Control("ActivityCreateContactInput", "EnterpriseSales")).SendKeys(Language);
                ThinkTime(5);
                MoveToElement(driver, Control("Languagedropdown", "EnterpriseSales"));
                Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();
                /*

                                WaitUntil(driver, Control("NewContactlanguage", "Contacts"), 30);
                                MoveToElement(driver, Control("NewContactlanguage", "Contacts"));
                                Element(driver, Control("NewContactlanguage", "Contacts")).SendKeys(Language);
                                Element(driver, Control("NewContactlanguage", "Contacts")).SendKeys(Keys.ArrowDown+Keys.Enter);
                */
                ThinkTime(3);
                /*
                                WaitUntil(driver, Control("Languagedropdown", "Contacts"), 30);
                                MoveToElement(driver, Control("Languagedropdown", "Contacts"));
                                Element(driver, Control("Languagedropdown", "Contacts")).Click();
                                */
                MoveToElement(driver, Control("NewContactSaveButton", "Opportunity"));
                ActionsClick(driver, Control("SaveContactSales", "Opportunity"));
                ThinkTime(1);
            }

            if (contactcondition == "ExistingContact")
            {
                //create new contact
                WaitUntil(driver, Control("Contactlookup", "Opportunity"), 30);
                MoveToElement(driver, Control("Contactlookup", "Opportunity"));
                Element(driver, Control("Contactlookup", "Opportunity")).Click();
                ThinkTime(2);
                Element(driver, Control("Contactlookup", "Opportunity")).SendKeys(newcontactname);
                ThinkTime(6);
                MoveToElement(driver, Control("ITSalesCustomer", "Opportunity"));
                Element(driver, Control("ITSalesCustomer", "Opportunity")).Click();
                ThinkTime(2);

            }

            if (accountcondition == "NewAccount")
            {
                string NewAccountName = accountname + now;
                ThinkTime(15);
                WaitUntil(driver, Control("VerifyCompanyField", "Opportunity"), 30);
                MoveToElement(driver, Control("VerifyCompanyField", "Opportunity"));
                ActionsClick(driver, Control("VerifyCompanyField", "Opportunity"));
                ThinkTime(1);
                ActionsClick(driver, Control("Accountlookupinputfield", "Opportunity"));
                ThinkTime(1);
                ActionsClick(driver, Control("NewAccountButton", "Opportunity"));
                ThinkTime(15);
                MoveToElement(driver, Control("Addnewcompanyname", "Opportunity"));
                Element(driver, Control("Addnewcompanyname", "Opportunity")).Click();
                ThinkTime(1);
                ThinkTime(1);

                Element(driver, Control("Addnewcompanyname", "Opportunity")).SendKeys(NewAccountName);
                ThinkTime(6);
                Element(driver, Control("Citylabel", "Opportunity")).Click();
                ThinkTime(2);
                if (Elements(driver, Control("Saveandclosebutton", "Opportunity")) > 0)
                {
                    MoveToElement(driver, Control("Saveandclosebutton", "Opportunity"));
                    Element(driver, Control("Saveandclosebutton", "Opportunity")).Click();
                }
                else
                {
                    ThinkTime(4);
                    MoveToElement(driver, Control("NewContactSaveButton", "Opportunity"));
                    Element(driver, Control("NewContactSaveButton", "Opportunity")).Click();
                }


                ThinkTime(8);
            }

            if (accountcondition == "ExistingAccount")
            {

            }


            //Select Bussiness Phone verification.

            WaitUntil(driver, Control("LeadBussinessPhone", "Generic"), 30);
            MoveToElement(driver, Control("LeadBussinessPhone", "Generic"));
            Element(driver, Control("LeadBussinessPhone", "Generic")).SendKeys(Keys.Control + "a");
            Element(driver, Control("LeadBussinessPhone", "Generic")).SendKeys(Keys.Delete);
            Element(driver, Control("LeadBussinessPhone", "Generic")).SendKeys(BPhone);
            Element(driver, Control("BussinessPhoneClick", "Generic")).Click();

            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Bussiness Phone Field updated Successfully", "Bussiness Phone Field Verification");

            ThinkTime(3);

            //// Enter Currency
            //WaitUntil(driver, Control("NewCurrencyInput", "EnterpriseSales"), 30);
            //MoveToElement(driver, Control("NewCurrencyInput", "EnterpriseSales"));
            //Element(driver, Control("NewCurrencyInput", "EnterpriseSales")).SendKeys("British");
            //ThinkTime(3);
            //MoveToElement(driver, Control("SelectCountryDropdown", "British", "EnterpriseSales"));
            //Element(driver, Control("SelectCountryDropdown", "British", "EnterpriseSales")).Click();

            //Select Source verification

            if (Elements(driver, Control("SourceVerification", "Generic")) > 0)
            {
                WaitUntil(driver, Control("SourceVerification", "Generic"), 30);
                MoveToElement(driver, Control("SourceVerification", "Generic"));
                Element(driver, Control("SourceDeleteButton", "Generic")).Click();

                WaitUntil(driver, Control("SourceInputField", "Generic"), 30);
                MoveToElement(driver, Control("SourceInputField", "Generic"));
                Element(driver, Control("SourceInputField", "Generic")).SendKeys(Source);

                WaitUntil(driver, Control("SelectSourceDropdown", "Generic"), 30);
                MoveToElement(driver, Control("SelectSourceDropdown", "Generic"));
                Element(driver, Control("SelectSourceDropdown", "Generic")).Click();

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Source Field updated Successfully", "Source Field Verification");

            }

            else
            {
                WaitUntil(driver, Control("SourceInputField", "Generic"), 360);
                MoveToElement(driver, Control("SourceInputField", "Generic"));
                Element(driver, Control("SourceInputField", "Generic")).SendKeys(Source);

                ThinkTime(3);
                WaitUntil(driver, Control("SelectSourceDropdown", "Generic"), 30);
                MoveToElement(driver, Control("SelectSourceDropdown", "Generic"));
                Element(driver, Control("SelectSourceDropdown", "Generic")).Click();

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Source Field updated Successfully", "Source Field Verification");

            }

            ThinkTime(10);
            scrollDownOpportunityPage(driver, testInReport, testName, testDataIteration);

            //Select Major Source verification

            if (Elements(driver, Control("MajorSourceVerification", "Generic")) > 0)
            {
                ThinkTime(1);
                WaitUntil(driver, Control("MajorSourceVerification", "Generic"), 30);
                MoveToElement(driver, Control("MajorSourceVerification", "Generic"));
                Element(driver, Control("MajorSourceDeleteButton", "Generic")).Click();
                ThinkTime(1);
                WaitUntil(driver, Control("MajorSourceInputField", "Generic"), 30);
                MoveToElement(driver, Control("MajorSourceInputField", "Generic"));
                Element(driver, Control("MajorSourceInputField", "Generic")).Click();
                Element(driver, Control("MajorSourceInputField", "Generic")).SendKeys(MajorSource);
                ThinkTime(1);
                WaitUntil(driver, Control("SelectMSourceDropdown", "Generic"), 30);
                MoveToElement(driver, Control("SelectMSourceDropdown", "Generic"));
                Element(driver, Control("SelectMSourceDropdown", "Generic")).Click();

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Major Source Field updated Successfully", "Major Source Field Verification");

            }

            else
            {
                ThinkTime(1);
                WaitUntil(driver, Control("MajorSourceInputField", "Generic"), 30);
                MoveToElement(driver, Control("MajorSourceInputField", "Generic"));
                Element(driver, Control("MajorSourceInputField", "Generic")).Click();
                Element(driver, Control("MajorSourceInputField", "Generic")).SendKeys(MajorSource);
                ThinkTime(1);
                WaitUntil(driver, Control("SelectMSourceDropdown", "Generic"), 30);
                MoveToElement(driver, Control("SelectMSourceDropdown", "Generic"));
                Element(driver, Control("SelectMSourceDropdown", "Generic")).Click();

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Major Source Field updated Successfully", "Major Source Field Verification");

            }


            //Select Minor Source verification

            if (Elements(driver, Control("MinorSourceVerification", "Generic")) > 0)
            {
                ThinkTime(1);
                WaitUntil(driver, Control("MinorSourceVerification", "Generic"), 30);
                MoveToElement(driver, Control("MinorSourceVerification", "Generic"));
                Element(driver, Control("MinorSourceDeleteButton", "Generic")).Click();
                ThinkTime(1);
                WaitUntil(driver, Control("MinorSourceInputButton", "Generic"), 30);
                MoveToElement(driver, Control("MinorSourceInputButton", "Generic"));
                Element(driver, Control("MinorSourceInputButton", "Generic")).Click();
                Element(driver, Control("MinorSourceInputButton", "Generic")).SendKeys(MinorSource);
                ThinkTime(1);
                WaitUntil(driver, Control("SelectMinorSourceDropdown", "Generic"), 30);
                MoveToElement(driver, Control("SelectMinorSourceDropdown", "Generic"));
                Element(driver, Control("SelectMinorSourceDropdown", "Generic")).Click();

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Minor Source Field updated Successfully", "Minor Source Field Verification");

            }

            else
            {
                ThinkTime(1);
                WaitUntil(driver, Control("MinorSourceInputButton", "Generic"), 30);
                MoveToElement(driver, Control("MinorSourceInputButton", "Generic"));
                Element(driver, Control("MinorSourceInputButton", "Generic")).Click();
                Element(driver, Control("MinorSourceInputButton", "Generic")).SendKeys(MinorSource);
                ThinkTime(1);
                WaitUntil(driver, Control("SelectMinorSourceDropdown", "Generic"), 30);
                MoveToElement(driver, Control("SelectMinorSourceDropdown", "Generic"));
                Element(driver, Control("SelectMinorSourceDropdown", "Generic")).Click();

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Minor Source Field updated Successfully", "Minor Source Field Verification");

            }


            WaitUntil(driver, Control("CountryInput", "Accounts"), 30);
            MoveToElement(driver, Control("CountryInput", "Accounts"));
            Element(driver, Control("CountryInput", "Accounts")).SendKeys("India");

            WaitUntil(driver, Control("CountrySelect", "Accounts"), 30);
            MoveToElement(driver, Control("CountrySelect", "Accounts"));
            Element(driver, Control("CountrySelect", "Accounts")).Click();

            saveFooter(driver, testInReport, testName, testDataIteration);
            ThinkTime(10);
            if (Elements(driver, Control("ScriptDialg", "Opportunity")) > 0)
            {
                Element(driver, Control("HandleScriptError", "Opportunity")).Click();
                ThinkTime(3);
                saveFooter(driver, testInReport, testName, testDataIteration);
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "No Script error present", "No Script error present");
            }



            //// Click Qualify button
            //WaitUntil(driver, Control("Oppheader1", "Qualify", "Opportunity"), 30);
            //Element(driver, Control("Oppheader1", "Qualify", "Opportunity")).Click();
            //ThinkTime(10);
            saveFooter(driver, testInReport, testName, testDataIteration);
            ThinkTime(8);
        }









        //method to select and verify Customer field for IT Sales users.

        public void SelectAndVerifyLeadsFieldsSalesAgent(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string LastName, string Email, string BPhone, string Source, string MajorSource, string MinorSource, string now)
        {
            //Select LastName field.


            // string now = System.DateTime.Now.ToString();
            String name = LastName + now;

            WaitUntil(driver, Control("LeadLname", "Generic"), 360);
            MoveToElement(driver, Control("LeadLname", "Generic"));
            Element(driver, Control("LeadLname", "Generic")).SendKeys(Keys.Control + "a");
            Element(driver, Control("LeadLname", "Generic")).SendKeys(Keys.Delete);
            Element(driver, Control("LeadLname", "Generic")).SendKeys(name);
            Element(driver, Control("Lastnameclick", "Generic")).Click();

            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Last Name Field updated Successfully", "Last Name Field Verification");

            ThinkTime(3);

            //Select Email verification.

            WaitUntil(driver, Control("LeadEmail", "Generic"), 30);
            MoveToElement(driver, Control("LeadEmail", "Generic"));
            Element(driver, Control("LeadEmail", "Generic")).SendKeys(Keys.Control + "a");
            Element(driver, Control("LeadEmail", "Generic")).SendKeys(Keys.Delete);
            Element(driver, Control("LeadEmail", "Generic")).SendKeys(Email);
            ThinkTime(2);

            if (Elements(driver, Control("ScriptDialg", "Opportunity")) > 0)
            {
                Element(driver, Control("HandleScriptError", "Opportunity")).Click();
                ThinkTime(3);
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "No Script error present", "No Script error present");



            }

            Element(driver, Control("Emialclick", "Generic")).Click();

            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Email Field updated Successfully", "Email Field Verification");

            ThinkTime(3);

            //Select Bussiness Phone verification.
            scrollDownOpportunityPage(driver, testInReport, testName, testDataIteration);
            ThinkTime(3);
            WaitUntil(driver, Control("LeadBussinessPhone", "Generic"), 60);
            MoveToElement(driver, Control("LeadBussinessPhone", "Generic"));
            Element(driver, Control("LeadBussinessPhone", "Generic")).SendKeys(Keys.Control + "a");
            Element(driver, Control("LeadBussinessPhone", "Generic")).SendKeys(Keys.Delete);
            Element(driver, Control("LeadBussinessPhone", "Generic")).SendKeys(BPhone);
            Element(driver, Control("BussinessPhoneClick", "Generic")).Click();

            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Bussiness Phone Field updated Successfully", "Bussiness Phone Field Verification");

            ThinkTime(3);

            //Select Source verification

            if (Elements(driver, Control("SourceVerification", "Generic")) > 0)
            {
                WaitUntil(driver, Control("SourceVerification", "Generic"), 30);
                MoveToElement(driver, Control("SourceVerification", "Generic"));
                Element(driver, Control("SourceDeleteButton", "Generic")).Click();

                WaitUntil(driver, Control("SourceInputField", "Generic"), 30);
                MoveToElement(driver, Control("SourceInputField", "Generic"));
                Element(driver, Control("SourceInputField", "Generic")).SendKeys(Source);

                WaitUntil(driver, Control("SelectSourceDropdown", "Generic"), 30);
                MoveToElement(driver, Control("SelectSourceDropdown", "Generic"));
                Element(driver, Control("SelectSourceDropdown", "Generic")).Click();

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Source Field updated Successfully", "Source Field Verification");

            }

            else
            {
                WaitUntil(driver, Control("SourceInputField", "Generic"), 30);
                MoveToElement(driver, Control("SourceInputField", "Generic"));
                Element(driver, Control("SourceInputField", "Generic")).SendKeys(Source);

                WaitUntil(driver, Control("SelectSourceDropdown", "Generic"), 360);
                MoveToElement(driver, Control("SelectSourceDropdown", "Generic"));
                Element(driver, Control("SelectSourceDropdown", "Generic")).Click();

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Source Field updated Successfully", "Source Field Verification");

            }

            ThinkTime(10);
            // scrollDownOpportunityPage(driver, testInReport, testName, testDataIteration);
            ThinkTime(8);
            //Select Major Source verification

            if (Elements(driver, Control("MajorSourceVerification", "Generic")) > 0)
            {
                WaitUntil(driver, Control("MajorSourceVerification", "Generic"), 360);
                MoveToElement(driver, Control("MajorSourceVerification", "Generic"));
                Element(driver, Control("MajorSourceDeleteButton", "Generic")).Click();
                Element(driver, Control("MajorSourceDeleteButton", "Generic")).Clear();

                WaitUntil(driver, Control("MajorSourceInputField", "Generic"), 30);
                MoveToElement(driver, Control("MajorSourceInputField", "Generic"));
                Element(driver, Control("MajorSourceInputField", "Generic")).SendKeys(MajorSource);

                WaitUntil(driver, Control("SelectMSourceDropdown", "Generic"), 30);
                MoveToElement(driver, Control("SelectMSourceDropdown", "Generic"));
                Element(driver, Control("SelectMSourceDropdown", "Generic")).Click();

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Major Source Field updated Successfully", "Major Source Field Verification");

            }

            else
            {
                WaitUntil(driver, Control("MajorSourceInputField", "Generic"), 360);
                MoveToElement(driver, Control("MajorSourceInputField", "Generic"));
                //Element(driver, Control("MajorSourceInputField", "Generic")).Click();
                Element(driver, Control("MajorSourceInputField", "Generic")).SendKeys(Keys.Control + "a");
                Element(driver, Control("MajorSourceInputField", "Generic")).SendKeys(Keys.Delete);
                Element(driver, Control("MajorSourceInputField", "Generic")).SendKeys(MajorSource);
                ThinkTime(3);
                WaitUntil(driver, Control("SelectMSourceDropdown", "Generic"), 30);
                MoveToElement(driver, Control("SelectMSourceDropdown", "Generic"));
                Element(driver, Control("SelectMSourceDropdown", "Generic")).Click();

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Major Source Field updated Successfully", "Major Source Field Verification");

            }


            //Select Minor Source verification

            if (Elements(driver, Control("MinorSourceVerification", "Generic")) > 0)
            {
                WaitUntil(driver, Control("MinorSourceVerification", "Generic"), 360);
                MoveToElement(driver, Control("MinorSourceVerification", "Generic"));
                Element(driver, Control("MinorSourceDeleteButton", "Generic")).Click();
                Element(driver, Control("MinorSourceDeleteButton", "Generic")).Clear();
                WaitUntil(driver, Control("MinorSourceInputButton", "Generic"), 360);
                MoveToElement(driver, Control("MinorSourceInputButton", "Generic"));
                Element(driver, Control("MinorSourceInputButton", "Generic")).SendKeys(MinorSource);

                WaitUntil(driver, Control("SelectMinorSourceDropdown", "Generic"), 360);
                MoveToElement(driver, Control("SelectMinorSourceDropdown", "Generic"));
                Element(driver, Control("SelectMinorSourceDropdown", "Generic")).Click();

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Minor Source Field updated Successfully", "Minor Source Field Verification");

            }

            else
            {
                WaitUntil(driver, Control("MinorSourceInputButton", "Generic"), 30);
                MoveToElement(driver, Control("MinorSourceInputButton", "Generic"));
                Element(driver, Control("MinorSourceInputButton", "Generic")).Click();
                Element(driver, Control("MinorSourceInputButton", "Generic")).SendKeys(MinorSource);
                ThinkTime(3);
                WaitUntil(driver, Control("SelectMinorSourceDropdown", "Generic"), 30);
                MoveToElement(driver, Control("SelectMinorSourceDropdown", "Generic"));
                Element(driver, Control("SelectMinorSourceDropdown", "Generic")).Click();

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Minor Source Field updated Successfully", "Minor Source Field Verification");

            }

            ThinkTime(10);
            scrollDownOpportunityPage(driver, testInReport, testName, testDataIteration);

            WaitUntil(driver, Control("CountryInput", "Accounts"), 30);
            MoveToElement(driver, Control("CountryInput", "Accounts"));
            Element(driver, Control("CountryInput", "Accounts")).SendKeys(Keys.Control + "a");
            Element(driver, Control("CountryInput", "Accounts")).SendKeys(Keys.Delete);
            Element(driver, Control("CountryInput", "Accounts")).SendKeys("united kingdom");
            ThinkTime(2);
            WaitUntil(driver, Control("CountrySelect", "Accounts"), 30);
            MoveToElement(driver, Control("CountrySelect", "Accounts"));
            Element(driver, Control("CountrySelect", "Accounts")).Click();

            saveFooter(driver, testInReport, testName, testDataIteration);
        }


        //method to add new contact

        public void AddNewContact(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {


            ThinkTime(7);

            if (Elements(driver, Control("ContactFieldElement", "Generic")) > 0)
            {

                WaitUntil(driver, Control("ContactFieldElement", "Generic"), 30);
                MoveToElement(driver, Control("ContactFieldElement", "Generic"));
                ElementHighlight(driver, Control("ContactFieldElement", "Generic"));

                Element(driver, Control("ContactSearchButton", "Generic")).Click();

                ThinkTime(3);

                WaitUntil(driver, Control("NewContactButton", "Opportunity"), 30);
                MoveToElement(driver, Control("NewContactButton", "Opportunity"));
                Element(driver, Control("NewContactButton", "Opportunity")).Click();

            }


            else
            {
                ThinkTime(3);

                Element(driver, Control("LeadContactClick", "Generic")).Click();

                WaitUntil(driver, Control("ContactInputField", "Generic"), 30);
                MoveToElement(driver, Control("ContactInputField", "Generic"));
                ElementHighlight(driver, Control("ContactInputField", "Generic"));
                ThinkTime(10);

                Element(driver, Control("ContactSearchButton", "Generic")).Click();

                ThinkTime(10);

                WaitUntil(driver, Control("NewContactButton", "Generic"), 30);
                MoveToElement(driver, Control("NewContactButton", "Generic"));
                Element(driver, Control("NewContactButton", "Generic")).Click();
            }
        }


        //Verify Contact Field

        public void VerifyContactField(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string Lastname, string Email, string BPhone, string language, string now)
        {

            // string now = Convert.ToString(DateTime.Now.ToShortDateString());
            String name = Lastname + now;

            //Lname verification

            ThinkTime(3);

            string ExistingLName = Element(driver, Control("NewContactLname", "Opportunity")).GetAttribute("defaultValue");
            ElementHighlight(driver, Control("NewContactLname", "Opportunity"));
            if (name == ExistingLName)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Lastname updated correctly", "Last Name verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Lastname is not updated correctly", "Last Name verification");
                Assert.Fail("Last Name verification failed");
            }

            //Email verification

            ThinkTime(3);

            String ExistingEmail = Element(driver, Control("Contactemailfield", "36.1_Dashboard")).GetAttribute("defaultValue");
            ElementHighlight(driver, Control("Contactemailfield", "36.1_Dashboard"));
            if (Email == ExistingEmail)

            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Emial updated correctly", "Email verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Email is not updated correctly", "Emial verification");
                Assert.Fail("Email verification failed");
            }

            //phone no verification

            ThinkTime(3);

            string ExisitngBPhone = Element(driver, Control("GetBPhoneValue", "Generic")).GetAttribute("defaultValue");
            ElementHighlight(driver, Control("GetBPhoneValue", "Generic"));
            if (BPhone == ExisitngBPhone)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Bussiness Phone updated correctly", "Bussiness Phone verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Bussiness Phone is not updated correctly", "Bussiness Phone verification");
                Assert.Fail("Bussiness Phone verification failed");
            }

            //Add Language.

            WaitUntil(driver, Control("lastNameField", "Generic"), 30);
            Element(driver, Control("lastNameField", "Generic")).Click();

            WaitUntil(driver, Control("lastNameField", "Generic"), 360);
            MoveToElement(driver, Control("lastNameField", "Generic"));
            Element(driver, Control("lastNameField", "Generic")).SendKeys(Lastname);

            ThinkTime(3);

            if (Elements(driver, Control("ContactLanguageField", "Generic")) > 0)
            {
                WaitUntil(driver, Control("ContactLanguageField", "Generic"), 30);
                MoveToElement(driver, Control("ContactLanguageField", "Generic"));
                Element(driver, Control("ContactLanguageDelete", "Generic")).Click();

                WaitUntil(driver, Control("ContactLanguageInput", "Generic"), 30);
                MoveToElement(driver, Control("ContactLanguageInput", "Generic"));
                Element(driver, Control("ContactLanguageInput", "Generic")).SendKeys(language);

                WaitUntil(driver, Control("ContactLanguageDropdown", "Generic"), 30);
                MoveToElement(driver, Control("ContactLanguageDropdown", "Generic"));
                Element(driver, Control("ContactLanguageDropdown", "Generic")).Click();

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Language Field updated Successfully", "Language Field Verification");

            }

            else
            {
                WaitUntil(driver, Control("ContactLanguageInput", "Generic"), 30);
                MoveToElement(driver, Control("ContactLanguageInput", "Generic"));
                Element(driver, Control("ContactLanguageInput", "Generic")).SendKeys(language);

                WaitUntil(driver, Control("ContactLanguageDropdown", "Generic"), 30);
                MoveToElement(driver, Control("ContactLanguageDropdown", "Generic"));
                Element(driver, Control("ContactLanguageDropdown", "Generic")).Click();

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Language Field updated Successfully", "Language Field Verification");

            }

            //save contact
            ThinkTime(3);

            WaitUntil(driver, Control("SaveContactButton", "Generic"), 30);
            MoveToElement(driver, Control("SaveContactButton", "Generic"));
            Element(driver, Control("SaveContactButton", "Generic")).Click();

            ThinkTime(4);
        }

        //Verify Contact Field

        public void VerifyContactField1(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string Lastname, string Email, string BPhone, string language, string now)
        {

            // string now = Convert.ToString(DateTime.Now.ToShortDateString());
            String name = Lastname + now;

            //Lname verification

            ThinkTime(3);

            //string ExistingLName = Element(driver,Control("NewContactLname", "Opportunity")).GetAttribute("defaultValue");
            //ElementHighlight(driver, Control("NewContactLname", "Opportunity"));
            //if (name == ExistingLName)
            //{
            //    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Lastname updated correctly", "Last Name verification");
            //}

            //else
            //{
            //    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Lastname is not updated correctly", "Last Name verification");
            //    Assert.Fail("Last Name verification failed");
            //}

            //Email verification

            ThinkTime(10);

            String ExistingEmail = Element(driver, Control("Contactemailfield", "36.1_Dashboard")).GetAttribute("defaultValue");
            ElementHighlight(driver, Control("Contactemailfield", "36.1_Dashboard"));
            if (Email == ExistingEmail)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Emial updated correctly", "Email verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Email is not updated correctly", "Emial verification");
                Assert.Fail("Email verification failed");
            }

            //phone no verification

            ThinkTime(3);

            string ExisitngBPhone = Element(driver, Control("GetBPhoneValue", "Generic")).GetAttribute("defaultValue");
            ElementHighlight(driver, Control("GetBPhoneValue", "Generic"));
            if (BPhone == ExisitngBPhone)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Bussiness Phone updated correctly", "Bussiness Phone verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Bussiness Phone is not updated correctly", "Bussiness Phone verification");
                Assert.Fail("Bussiness Phone verification failed");
            }

            //Add LastName.

            WaitUntil(driver, Control("lastNameField", "Generic"), 30);
            Element(driver, Control("lastNameField", "Generic")).Click();

            WaitUntil(driver, Control("lastNameField", "Generic"), 360);
            MoveToElement(driver, Control("lastNameField", "Generic"));
            Element(driver, Control("lastNameField", "Generic")).SendKeys(Lastname);

            //Add Language
            ThinkTime(3);

            if (Elements(driver, Control("ContactLanguageField", "Generic")) > 0)
            {
                WaitUntil(driver, Control("ContactLanguageField", "Generic"), 30);
                MoveToElement(driver, Control("ContactLanguageField", "Generic"));
                Element(driver, Control("ContactLanguageDelete", "Generic")).Click();

                WaitUntil(driver, Control("ContactLanguageInput", "Generic"), 30);
                MoveToElement(driver, Control("ContactLanguageInput", "Generic"));
                Element(driver, Control("ContactLanguageInput", "Generic")).SendKeys(language);

                WaitUntil(driver, Control("ContactLanguageDropdown", "Generic"), 30);
                MoveToElement(driver, Control("ContactLanguageDropdown", "Generic"));
                Element(driver, Control("ContactLanguageDropdown", "Generic")).Click();

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Language Field updated Successfully", "Language Field Verification");

            }

            else
            {
                WaitUntil(driver, Control("ContactLanguageInput", "Generic"), 30);
                MoveToElement(driver, Control("ContactLanguageInput", "Generic"));
                Element(driver, Control("ContactLanguageInput", "Generic")).SendKeys(language);

                WaitUntil(driver, Control("ContactLanguageDropdown", "Generic"), 30);
                MoveToElement(driver, Control("ContactLanguageDropdown", "Generic"));
                Element(driver, Control("ContactLanguageDropdown", "Generic")).Click();

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Language Field updated Successfully", "Language Field Verification");

            }

            //save contact
            ThinkTime(3);

            WaitUntil(driver, Control("SaveContactButton", "Generic"), 30);
            MoveToElement(driver, Control("SaveContactButton", "Generic"));
            Element(driver, Control("SaveContactButton", "Generic")).Click();

            ThinkTime(4);
        }


        //Verify Book a tour page is opened
        public void VerifyBookTourPage(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {
            ThinkTime(10);
            WaitUntil(driver, Control("BookaVisitPageContainer", "Opportunity"), 60);
            if (Elements(driver, Control("BookaVisitPageContainer", "Opportunity")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Book a visit page is available", "Book a Visit");
            }

            else

            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Book a visit page is not available", "Book a Visit");
                Assert.Fail("Book a visit page is not opened");
            }


        }

        //Verify Proton-ID Filed//

        public void protonidVerification(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            //WaitUntil(driver, Control("ProtonIDField", "Contacts"), 60);
            ThinkTime(10);
            string value = Element(driver, Control("ProtonIDField", "Contacts")).GetAttribute("value");
            if (value == "---")
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Opportunity Description fields are displayed", " Opportunity Description fields are displayed");
            }

            else
            {
                Assert.Fail();
            }


        }



        // method to verify the data on the contact form

        public void Verifydtaoncontactfield(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName,
        string LName, string AccountName, string Language)
        {
            // contact name

            WaitUntil(driver, Control("NewContactLName", "Contacts"), 30);
            MoveToElement(driver, Control("NewContactLName", "Contacts"));
            ThinkTime(1);
            string s = Element(driver, Control("NewContactLName", "Contacts")).GetAttribute("value");

            if (s == LName)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "pass", "Contact  field is correctly displayed", "Field verification");


            }
            else
                Assert.Fail("field value change");
            /*   //account name

               ThinkTime(5);
               WaitUntil(driver, Control("Getcompanyname", "Contacts"), 30);
               MoveToElement(driver, Control("Getcompanyname", "Contacts"));
               //Element(driver, Control("NewContactInput", "Contacts")).Click();
               string accountname = Element(driver, Control("Getcompanyname", "Contacts")).GetAttribute("title");

               if (accountname == AccountName)
               {
                   AddLog(driver, testInReport, testName, testDataIteration, "pass", "Account field is correctly displayed", "Field verification");

               }
               else
                   Assert.Fail("field value change");
   */
            scrollDownContactPageEnterprise(driver, testInReport, testName, testDataIteration);

            //Language nane

            ThinkTime(5);
            WaitUntil(driver, Control("getlanguagename", "Contacts"), 30);
            MoveToElement(driver, Control("getlanguagename", "Contacts"));
            //Element(driver, Control("NewContactlanguage", "Contacts")).Click();
            string language = Element(driver, Control("getlanguagename", "Contacts")).GetAttribute("title");

            if (language == Language)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "pass", "Language field is correctly displayed", "Field verification");


            }
            else
                Assert.Fail("field value change");

        }




        //Method to add new Contact in IT sales
        public void AddNewContactITSales(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName,
            string LName, string AccountName, string Language, string TimeInSec)
        {
            string NewAccountName = AccountName + TimeInSec;
            string NewLName = LName + TimeInSec;

            ThinkTime(2);

            WaitUntil(driver, Control("NewContactLName", "Contacts"), 30);
            Element(driver, Control("NewContactLName", "Contacts")).Click();
            Element(driver, Control("NewContactLName", "Contacts")).SendKeys(NewLName);

            //Add new account

            ThinkTime(5);
            WaitUntil(driver, Control("NewContactInput", "Contacts"), 360);
            MoveToElement(driver, Control("NewContactInput", "Contacts"));
            Element(driver, Control("NewContactSearchButton", "Contacts")).Click();

            WaitUntil(driver, Control("NewAccounttButton", "Contacts"), 360);
            MoveToElement(driver, Control("NewAccounttButton", "Contacts"));
            Element(driver, Control("NewAccounttButton", "Contacts")).Click();

            ThinkTime(3);

            WaitUntil(driver, Control("NewAccountName", "Contacts"), 360);
            MoveToElement(driver, Control("NewAccountName", "Contacts"));
            Element(driver, Control("NewAccountName", "Contacts")).SendKeys(Keys.Control + "a");
            Element(driver, Control("NewAccountName", "Contacts")).SendKeys(Keys.Delete);
            ThinkTime(1);
            Element(driver, Control("NewAccountName", "Contacts")).SendKeys(NewAccountName);

            WaitUntil(driver, Control("SaveContactButton", "Generic"), 360);
            MoveToElement(driver, Control("SaveContactButton", "Generic"));
            Element(driver, Control("SaveContactButton", "Generic")).Click();

            //if (Elements(driver,Control("Error","Accounts"))>0)
            //{
            //    Element(driver, Control("ErrorOk", "Accounts")).Click();
            //}

            //else

            //{
            //    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Contact is not saved", "No Error Prompt");

            //}
            ThinkTime(7);

            scrollDownContactPage(driver, testInReport, testName, testDataIteration);

            WaitUntil(driver, Control("NewContactlanguage", "Contacts"), 30);
            MoveToElement(driver, Control("NewContactlanguage", "Contacts"));
            Element(driver, Control("NewContactlanguage", "Contacts")).SendKeys(Language);

            ThinkTime(3);

            WaitUntil(driver, Control("NewContactlanguageSelect", "Contacts"), 30);
            MoveToElement(driver, Control("NewContactlanguageSelect", "Contacts"));
            Element(driver, Control("NewContactlanguageSelect", "Contacts")).Click();

            saveFooter(driver, testInReport, testName, testDataIteration);

            ThinkTime(10);

            if (Elements(driver, Control("NewContactTitle", LName, "Generic")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Contact Created successfully", "Contact verification");
            }

            else

            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Contact is not saved", "Contact verification");
                //Assert.Fail("Contact  is not created");
            }


        }

        //Method to add new Contact in Enterprise sales
        public void AddNewContactESales(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName,
            string LName, string AccountName, string Language, string TimeInSec)
        {
            string NewAccountName = AccountName + TimeInSec;
            string NewLName = LName + TimeInSec;

            ThinkTime(10);
            WaitUntil(driver, Control("NewOpportunityContactInput", "Contacts"), 180);
            MoveToElement(driver, Control("NewOpportunityContactInput", "Contacts"));
            Element(driver, Control("NewOpportunityContactSearch", "Contacts")).Click();
            WaitUntil(driver, Control("NewContactButton", "Contacts"), 180);
            MoveToElement(driver, Control("NewContactButton", "Contacts"));
            Element(driver, Control("NewContactButton", "Contacts")).Click();

            WaitUntil(driver, Control("NewContactLName", "Contacts"), 180);
            MoveToElement(driver, Control("NewContactLName", "Contacts"));
            Element(driver, Control("NewContactLName", "Contacts")).Click();
            Element(driver, Control("NewContactLName", "Contacts")).SendKeys(NewLName);

            ThinkTime(5);
            WaitUntil(driver, Control("NewContactlanguage", "Contacts"), 180);
            MoveToElement(driver, Control("NewContactlanguage", "Contacts"));
            Element(driver, Control("NewContactlanguage", "Contacts")).SendKeys(Language);
            ThinkTime(3);

            WaitUntil(driver, Control("NewContactlanguageSelect", "Contacts"), 180);
            MoveToElement(driver, Control("NewContactlanguageSelect", "Contacts"));
            Element(driver, Control("NewContactlanguageSelect", "Contacts")).Click();

            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Contact added successfully", "Contact field verification");
            ThinkTime(4);
            WaitUntil(driver, Control("SaveContactButton", "Generic"), 30);
            MoveToElement(driver, Control("SaveContactButton", "Generic"));
            Element(driver, Control("SaveContactButton", "Generic")).Click();

            WaitUntil(driver, Control("accountname", "Contacts"), 360);
            MoveToElement(driver, Control("accountname", "Contacts"));
            Element(driver, Control("accountname", "Contacts")).Click();
            WaitUntil(driver, Control("NewAccounttButton", "Contacts"), 360);
            MoveToElement(driver, Control("NewAccounttButton", "Contacts"));
            Element(driver, Control("NewAccounttButton", "Contacts")).Click();

            ThinkTime(3);

            WaitUntil(driver, Control("NewAccountName", "Contacts"), 180);
            MoveToElement(driver, Control("NewAccountName", "Contacts"));
            Element(driver, Control("NewAccountName", "Contacts")).SendKeys(Keys.Control + "a");
            Element(driver, Control("NewAccountName", "Contacts")).SendKeys(Keys.Delete);
            Element(driver, Control("NewAccountName", "Contacts")).SendKeys(NewAccountName);




            //Add new account

            //ThinkTime(5);
            //WaitUntil(driver, Control("NewContactInput", "Contacts"), 180);
            //MoveToElement(driver, Control("NewContactInput", "Contacts"));
            //Element(driver, Control("NewContactSearchButton", "Contacts")).Click();



            WaitUntil(driver, Control("SaveContactButton", "Generic"), 180);
            MoveToElement(driver, Control("SaveContactButton", "Generic"));
            Element(driver, Control("SaveContactButton", "Generic")).Click();

            //ThinkTime(7);

            //  scrollDownContactPage(driver, testInReport, testName, testDataIteration);

            //WaitUntil(driver, Control("NewContactlanguage", "Contacts"), 30);
            //MoveToElement(driver, Control("NewContactlanguage", "Contacts"));
            //Element(driver, Control("NewContactlanguage", "Contacts")).SendKeys(Language);

            //ThinkTime(3);

            //WaitUntil(driver, Control("NewContactlanguageSelect", "Contacts"), 30);
            //MoveToElement(driver, Control("NewContactlanguageSelect", "Contacts"));
            //Element(driver, Control("NewContactlanguageSelect", "Contacts")).Click();

            saveFooter(driver, testInReport, testName, testDataIteration);
            // string Contactname= Element(driver, Control("Getcompanyname", "Contacts")).GetAttribute("")

            // if (Elements(driver, Control("NewContactTitle", LName, "Generic")) > 0)
            //if (Elements(driver, Control("Getcompanyname", "Contacts")) > 0)
            //{
            //    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Contact Created successfully", "Contact verification");
            //}

            //else

            //{
            //    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Contact is not saved", "Contact verification");
            //    Assert.Fail("Contact  is not created");
            //}


        }



        //Method to Verify Contact and Account field in IT sales new opportunity.

        public void VerifyContactAndAccount(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string Topic, string LName, string Time, string AccountName)
        {
            string VerifyLname = LName + Time;
            String VerifyAccountName = AccountName + Time;


            WaitUntil(driver, Control("NewOpportunityTopic", "Contacts"), 30);
            MoveToElement(driver, Control("NewOpportunityTopic", "Contacts"));
            Element(driver, Control("NewOpportunityTopic", "Contacts")).SendKeys(Keys.Control + "a");
            Element(driver, Control("NewOpportunityTopic", "Contacts")).SendKeys(Keys.Delete);
            Element(driver, Control("NewOpportunityTopic", "Contacts")).SendKeys(Topic);
            //Element(driver, Control("NewOpportunityTopicClick", "Contacts")).Click();

            //**********************************NotinSystemnow***************************//
            /* WaitUntil(driver, Control("NewOpportunityContactInput", "Contacts"), 30);
             MoveToElement(driver, Control("NewOpportunityContactInput", "Contacts"));
             Element(driver, Control("NewOpportunityContactInput", "Contacts")).Click();
             Element(driver, Control("NewOpportunityContactInput", "Contacts")).SendKeys(VerifyLname);

             ThinkTime(10);

             WaitUntil(driver, Control("NewOpportunityContactDrop", "Contacts"), 30);
             MoveToElement(driver, Control("NewOpportunityContactDrop", "Contacts"));
             Element(driver, Control("NewOpportunityContactDrop", "Contacts")).Click();
             ******************************************************************/

            ThinkTime(3);

            scrollDownContactPage(driver, testInReport, testName, testDataIteration);

            ThinkTime(3);

            if (Elements(driver, Control("VerifyAccountFielld", "Contacts")) > 0)
            {
                WaitUntil(driver, Control("VerifyAccountFielld", "Contacts"), 30);
                MoveToElement(driver, Control("VerifyAccountFielld", "Contacts"));
                string VerifyAccount = Element(driver, Control("VerifyAccountFielld", "Contacts")).GetAttribute("innerText");
                if (VerifyAccount == VerifyAccountName)
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Account or Company Field is Autopopulated & verified", "Account or Company field verification");
                }

                else
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Account or Company Field is Diffirent", "Account or Company field verification");
                    Assert.Fail("Account/Company  is Verification Failed");
                }
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Account or Company Field is not Autopopulated", "Account or Company field verification");

            }
            saveFooter(driver, testInReport, testName, testDataIteration);
        }



        //Method to Verify Contact and Account field in Enterprisesales new opportunity.

        public void VerifyContactAndAccountESales(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string Topic, string LName, string Time, string AccountName)
        {
            string VerifyLname = LName + Time;
            String VerifyAccountName = AccountName + Time;


            WaitUntil(driver, Control("NewOpportunityTopic", "Contacts"), 360);
            MoveToElement(driver, Control("NewOpportunityTopic", "Contacts"));
            Element(driver, Control("NewOpportunityTopic", "Contacts")).SendKeys(Keys.Control + "a");
            Element(driver, Control("NewOpportunityTopic", "Contacts")).SendKeys(Keys.Delete);
            Element(driver, Control("NewOpportunityTopic", "Contacts")).SendKeys(Topic);
            Element(driver, Control("NewOpportunityTopicClick", "Contacts")).Click();

            WaitUntil(driver, Control("NewOpportunityContactInput", "Contacts"), 360);
            MoveToElement(driver, Control("NewOpportunityContactInput", "Contacts"));
            Element(driver, Control("NewOpportunityContactInput", "Contacts")).Click();
            Element(driver, Control("NewOpportunityContactInput", "Contacts")).SendKeys(VerifyLname);

            ThinkTime(10);

            WaitUntil(driver, Control("NewOpportunityContactDrop", "Contacts"), 360);
            MoveToElement(driver, Control("NewOpportunityContactDrop", "Contacts"));
            Element(driver, Control("NewOpportunityContactDrop", "Contacts")).Click();
            scrollDownOpportunityPage(driver, testInReport, testName, testDataIteration);

            ThinkTime(3);

            if (Elements(driver, Control("getcompanynameinOpppage", "Contacts")) > 0)
            {
                WaitUntil(driver, Control("getcompanynameinOpppage", "Contacts"), 90);
                MoveToElement(driver, Control("getcompanynameinOpppage", "Contacts"));
                string VerifyAccount = Element(driver, Control("getcompanynameinOpppage", "Contacts")).GetAttribute("innerText");
                if (VerifyAccount == VerifyAccountName)
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Account or Company Field is Autopopulated & verified", "Account or Company field verification");
                }

                else
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Account or Company Field is Diffirent", "Account or Company field verification");
                    Assert.Fail("Account/Company  is Verification Failed");
                }
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Account or Company Field is not Autopopulated", "Account or Company field verification");
                Assert.Fail("Account/Company Field  Verification Failed");
            }
        }






        //Method to Verify Contact and Account field in sales new opportunity.

        public void VerifyContactAndAccountSales(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string Topic, string LName, string Time, string AccountName)
        {
            string VerifyLname = LName + Time;
            String VerifyAccountName = AccountName + Time;


            WaitUntil(driver, Control("NewOpportunityTopic", "Contacts"), 30);
            MoveToElement(driver, Control("NewOpportunityTopic", "Contacts"));
            Element(driver, Control("NewOpportunityTopic", "Contacts")).SendKeys(Keys.Control + "a");
            Element(driver, Control("NewOpportunityTopic", "Contacts")).SendKeys(Keys.Delete);
            Element(driver, Control("NewOpportunityTopic", "Contacts")).SendKeys(Topic);
            Element(driver, Control("NewOpportunityTopicClick", "Contacts")).Click();

            WaitUntil(driver, Control("NewOpportunityContactInput", "Contacts"), 30);
            MoveToElement(driver, Control("NewOpportunityContactInput", "Contacts"));
            Element(driver, Control("NewOpportunityContactInput", "Contacts")).Click();
            Element(driver, Control("NewOpportunityContactInput", "Contacts")).SendKeys(VerifyLname);

            ThinkTime(10);

            WaitUntil(driver, Control("NewOpportunityContactDrop", "Contacts"), 30);
            MoveToElement(driver, Control("NewOpportunityContactDrop", "Contacts"));
            Element(driver, Control("NewOpportunityContactDrop", "Contacts")).Click();


            ThinkTime(3);

            if (Elements(driver, Control("VerifyAccountFielld", "Contacts")) > 0)
            {
                WaitUntil(driver, Control("VerifyAccountFielld", "Contacts"), 30);
                MoveToElement(driver, Control("VerifyAccountFielld", "Contacts"));
                string VerifyAccount = Element(driver, Control("VerifyAccountFielld", "Contacts")).GetAttribute("innerText");
                if (VerifyAccount == VerifyAccountName)
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Account or Company Field is Autopopulated & verified", "Account or Company field verification");
                }

                else
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Account or Company Field is Diffirent", "Account or Company field verification");
                    Assert.Fail("Account/Company  is Verification Failed");
                }
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Account or Company Field is not Autopopulated", "Account or Company field verification");
                Assert.Fail("Account/Company Field  Verification Failed");
            }
        }



        //Method to Verify Contact and Account field in sales new opportunity Autopoulated.

        public void VerifyContactAndAccountSalesAutopopulated(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string Topic, string LName, string Time, string AccountName)
        {
            string VerifyLname = LName + Time;
            string VerifyAccountName = AccountName + Time;


            WaitUntil(driver, Control("NewOpportunityContactInput", "Contacts"), 30);
            MoveToElement(driver, Control("NewOpportunityContactInput", "Contacts"));
            Element(driver, Control("NewOpportunityContactInput", "Contacts")).Click();
            ThinkTime(2);
            Element(driver, Control("NewOpportunityContactInput", "Contacts")).SendKeys(VerifyLname);

            ThinkTime(10);

            WaitUntil(driver, Control("NewOpportunityContactDrop", "Contacts"), 30);
            MoveToElement(driver, Control("NewOpportunityContactDrop", "Contacts"));
            Element(driver, Control("NewOpportunityContactDrop", "Contacts")).Click();


            //scrollDownOpportunityPage(driver, testInReport, testName, testDataIteration);




            ThinkTime(10);
            if (Elements(driver, Control("VerifyAccountFielld1", "Contacts")) > 0)
            {
                WaitUntil(driver, Control("VerifyAccountFielld1", "Contacts"), 30);
                MoveToElement(driver, Control("VerifyAccountFielld1", "Contacts"));
                string VerifyAccount = Element(driver, Control("VerifyAccountFielld1", "Contacts")).GetAttribute("innerText");
                Console.WriteLine(VerifyAccount);
                Console.WriteLine(VerifyAccountName);
                if (VerifyAccount == VerifyAccountName)
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Account or Company Field is Autopopulated & verified", "Account or Company field verification");
                }

                else
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Account or Company Field is Diffirent", "Account or Company field verification");
                    Assert.Fail("Account/Company  is Verification Failed");
                }
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Account or Company Field is not Autopopulated", "Account or Company field verification");
                Assert.Fail("Account/Company Field  Verification Failed");
            }
        }


        //Method to Verify Language field in sales new opportunity Autopoulated.

        public void VerifyLanguageSalesAutopopulated(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string Contact)
        {

            WaitUntil(driver, Control("NewOpportunityContactInput", "Contacts"), 30);
            MoveToElement(driver, Control("NewOpportunityContactInput", "Contacts"));
            Element(driver, Control("NewOpportunityContactInput", "Contacts")).Click();
            Element(driver, Control("NewOpportunityContactInput", "Contacts")).SendKeys(Contact);

            ThinkTime(10);

            WaitUntil(driver, Control("NewOpportunityContactDrop", "Contacts"), 30);
            MoveToElement(driver, Control("NewOpportunityContactDrop", "Contacts"));
            Element(driver, Control("NewOpportunityContactDrop", "Contacts")).Click();

            scrollDownOpportunityPage(driver, testInReport, testName, testDataIteration);
            MoveToElement(driver, Control("ContactLanguageVerification", "Contacts"));
            ElementHighlight(driver, Control("ContactLanguageVerification", "Contacts"));

            ThinkTime(10);
            IJavaScriptExecutor js = (IJavaScriptExecutor)driver;
            if (Elements(driver, Control("ContactLanguageVerification", "Contacts")) > 0)
            {
                js.ExecuteScript("arguments[0].scrollIntoView();", Element(driver, Control("ContactLanguageVerification", "Contacts")));

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Language Field is Autopopulated & verified", "Language  field verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Language Field is not Autopopulated", "Account or Company field verification");
                Assert.Fail("Language Field  Verification Failed");
            }

        }
        //method to filter Regarding
        public void FilterRegardingEnterpriseSales(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string FilterCondition, string Owner)
        {
            ThinkTime(3);

            string L = FilterCondition;

            WaitUntil(driver, Control("Regardingcolumfilter", "Generic"), 30);
            MoveToElement(driver, Control("Regardingcolumfilter", "Generic"));
            ThinkTime(3);
            Element(driver, Control("Regardingcolumfilter", "Generic")).Click();
            ThinkTime(3);
            WaitUntil(driver, Control("OwnerFilterDropDownButton", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("OwnerFilterDropDownButton", "EnterpriseSales"));
            ThinkTime(3);
            Element(driver, Control("OwnerFilterDropDownButton", "EnterpriseSales")).Click();

            ThinkTime(3);

            WaitUntil(driver, Control("OwnerFilterDropDownCondition", FilterCondition, "EnterpriseSales"), 30);
            MoveToElement(driver, Control("OwnerFilterDropDownCondition", FilterCondition, "EnterpriseSales"));
            ThinkTime(3);
            Element(driver, Control("OwnerFilterDropDownCondition", FilterCondition, "EnterpriseSales")).Click();
            ThinkTime(3);
            WaitUntil(driver, Control("OwnerFilterValue", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("OwnerFilterValue", "EnterpriseSales"));
            ThinkTime(3);
            Element(driver, Control("OwnerFilterValue", "EnterpriseSales")).SendKeys(Owner);

            ThinkTime(3);

            WaitUntil(driver, Control("ApplyButtonFilter", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("ApplyButtonFilter", "EnterpriseSales"));
            ThinkTime(3);
            Element(driver, Control("ApplyButtonFilter", "EnterpriseSales")).Click();
            ThinkTime(3);
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Filtered Owner", "Filter");
        }

        public void CentreLabel(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {
            scrollDownOpportunity(driver, testInReport, testName, testDataIteration);
            scrollDownOpportunityEnterpriseCust(driver, testInReport, testName, testDataIteration, "200");
            int centre = Elements(driver, Control("Businesscentrelabel", "Opportunity"));
            if (centre > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Centre field verification", "Centre field verification");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Centre field verification", "Centre field verification");

                Assert.Fail("Centre field is not displayed");

            }

        }






        //method to filter Owner
        public void FilterOwnerEnterpriseSales(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string FilterCondition, string Owner)
        {
            ThinkTime(3);

            string L = FilterCondition;

            WaitUntil(driver, Control("OwnerFilterButton", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("OwnerFilterButton", "EnterpriseSales"));
            Element(driver, Control("OwnerFilterButton", "EnterpriseSales")).Click();

            WaitUntil(driver, Control("OwnerFilterDropDownButton", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("OwnerFilterDropDownButton", "EnterpriseSales"));
            Element(driver, Control("OwnerFilterDropDownButton", "EnterpriseSales")).Click();

            ThinkTime(3);

            WaitUntil(driver, Control("OwnerFilterDropDownCondition", FilterCondition, "EnterpriseSales"), 30);
            MoveToElement(driver, Control("OwnerFilterDropDownCondition", FilterCondition, "EnterpriseSales"));
            Element(driver, Control("OwnerFilterDropDownCondition", FilterCondition, "EnterpriseSales")).Click();

            WaitUntil(driver, Control("OwnerFilterValue", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("OwnerFilterValue", "EnterpriseSales"));
            Element(driver, Control("OwnerFilterValue", "EnterpriseSales")).SendKeys(Owner);

            ThinkTime(3);

            WaitUntil(driver, Control("ApplyButtonFilter", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("ApplyButtonFilter", "EnterpriseSales"));
            Element(driver, Control("ApplyButtonFilter", "EnterpriseSales")).Click();

            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Filtered Owner", "Filter");
        }

        public string CreateNewOpportunity(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string Contact, string country, string currency, string channel, string MajorSource, string MinorSource)
        {
            string now = System.DateTime.Now.ToString();
            ThinkTime(3);
            String name = Contact + now;
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            ThinkTime(3);
            ClickonNewButton(driver, testInReport, testName, testDataIteration, "New");
            DiscardChanges(driver, testInReport, testName, testDataIteration);
            WaitUntil(driver, Control("NewContactInput", "Opportunity"), 90);
            MoveToElement(driver, Control("NewContactInput", "Opportunity"));
            JSClick(driver, Control("NewContactInput", "Opportunity"));

            WaitUntil(driver, Control("NewContactButton", "Opportunity"), 30);
            MoveToElement(driver, Control("NewContactButton", "Opportunity"));
            Element(driver, Control("NewContactButton", "Opportunity")).Click();

            ThinkTime(2);

            WaitUntil(driver, Control("NewContactLname", "Opportunity"), 30);
            MoveToElement(driver, Control("NewContactLname", "Opportunity"));
            Element(driver, Control("NewContactLname", "Opportunity")).SendKeys(Keys.Control + "a");
            Element(driver, Control("NewContactLname", "Opportunity")).SendKeys(Keys.Delete);
            ThinkTime(3);
            Element(driver, Control("NewContactLname", "Opportunity")).SendKeys(name);
            ThinkTime(3);
            MoveToElement(driver, Control("NewLanguageInput", "Opportunity"));
            ThinkTime(3);
            Element(driver, Control("NewLanguageInput", "Opportunity")).Click();
            Element(driver, Control("NewLanguageInput", "Opportunity")).SendKeys("UK english");

            ThinkTime(6);

            MoveToElement(driver, Control("NewLanguageSelect", "Opportunity"));
            ThinkTime(3);
            Element(driver, Control("NewLanguageSelect", "Opportunity")).Click();
            ThinkTime(3);
            MoveToElement(driver, Control("NewContactSaveButton", "Opportunity"));
            ThinkTime(3);
            Element(driver, Control("NewContactSaveButton", "Opportunity")).Click();

            ThinkTime(4);
            //WaitUntil(driver, Control("NewAccountInput", "Opportunity"), 30);
            //MoveToElement(driver, Control("NewAccountInput", "Opportunity"));
            //Element(driver, Control("NewAccountInput", "Opportunity")).Click();

            //MoveToElement(driver, Control("NewAccountButton", "Opportunity"));
            //Element(driver, Control("NewAccountButton", "Opportunity")).Click();

            ThinkTime(3);
            //string TimeInSec = GetSystemTimeInSec(driver, testInReport, testName, testDataIteration);
            WaitUntil(driver, Control("newtopic", "Opportunity"), 30);
            MoveToElement(driver, Control("newtopic", "Opportunity"));
            Element(driver, Control("newtopic", "Opportunity")).SendKeys(Keys.Control + "a");
            Element(driver, Control("newtopic", "Opportunity")).SendKeys(Keys.Delete);
            ThinkTime(3);
            Element(driver, Control("newtopic", "Opportunity")).SendKeys("Test" + now);
            ThinkTime(3);
            string Oppname = Element(driver, Control("newtopic", "Opportunity")).GetAttribute("defaultValue");

            ThinkTime(3);
            scrollDownOpportunityEnterprise(driver, testInReport, testName, testDataIteration);
            scrollDownOpportunity(driver, testInReport, testName, testDataIteration);
            ThinkTime(3);

            //New Channel

            MoveToElement(driver, Control("NewChannelInput", "Opportunity"));
            Element(driver, Control("NewChannelInput", "Opportunity")).SendKeys(Keys.Control + "a");
            Element(driver, Control("NewChannelInput", "Opportunity")).SendKeys(Keys.Delete);
            ThinkTime(3);
            Element(driver, Control("NewChannelInput", "Opportunity")).SendKeys("Centre: Walk-In");
            ThinkTime(5);
            MoveToElement(driver, Control("NewChannelSelect", "Opportunity"));
            ThinkTime(3);
            Element(driver, Control("NewChannelSelect", "Opportunity")).Click();

            ThinkTime(3);
            scrollDownOpportunityEnterpriseCust(driver, testInReport, testName, testDataIteration, "200");
            //New Major Source

            MoveToElement(driver, Control("NewMajorSourceInput", "Opportunity"));
            Element(driver, Control("NewMajorSourceInput", "Opportunity")).SendKeys(Keys.Control + "a");
            Element(driver, Control("NewMajorSourceInput", "Opportunity")).SendKeys(Keys.Delete);
            ThinkTime(3);
            Element(driver, Control("NewMajorSourceInput", "Opportunity")).SendKeys("Existing Customer");
            ThinkTime(5);
            MoveToElement(driver, Control("NewMajorSourceSelect", "Opportunity"));
            ThinkTime(3);
            Element(driver, Control("NewMajorSourceSelect", "Opportunity")).Click();

            ThinkTime(3);

            //New Minor Source

            ThinkTime(3);
            MoveToElement(driver, Control("NewMinorSourceInput", "Opportunity"));
            Element(driver, Control("NewMinorSourceInput", "Opportunity")).SendKeys(Keys.Control + "a");
            Element(driver, Control("NewMinorSourceInput", "Opportunity")).SendKeys(Keys.Delete);
            ThinkTime(3);
            Element(driver, Control("NewMinorSourceInput", "Opportunity")).SendKeys("Acquisition");
            ThinkTime(10);
            MoveToElement(driver, Control("NewMinorSourceSelect", "Opportunity"));
            ThinkTime(3);
            Element(driver, Control("NewMinorSourceSelect", "Opportunity")).Click();
            ThinkTime(3);
            saveFooter(driver, testInReport, testName, testDataIteration);
            ThinkTime(3);
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Created opportunity", "Created opportunity");
            return Oppname;
        }

        public void CreateNewContactEM(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string LastName, string Language, string username)
        {
            ThinkTime(2);
            ExpectedDropdown(driver, testInReport, testName, testDataIteration, "Contact: Customer");
            WaitUntil(driver, Control("NewContactLName", "Contacts"), 30);
            Element(driver, Control("NewContactLName", "Contacts")).Click();
            Element(driver, Control("NewContactLName", "Contacts")).SendKeys(LastName);
            ThinkTime(3);
            WaitUntil(driver, Control("Companyinput", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("Companyinput", "EnterpriseSales"));
            Element(driver, Control("Companyinput", "EnterpriseSales")).Click();
            ThinkTime(3);
            WaitUntil(driver, Control("NewAccountButtonClick", "Opportunity"), 60);
            Element(driver, Control("NewAccountButtonClick", "Opportunity")).Click();
            WaitUntil(driver, Control("AccountNameInput", "Opportunity"), 180);
            Element(driver, Control("AccountNameInput", "Opportunity")).Click();
            Element(driver, Control("AccountNameInput", "Opportunity")).SendKeys("Test11");
            WaitUntil(driver, Control("ContactSaveButton", "Opportunity"), 180);
            Element(driver, Control("ContactSaveButton", "Opportunity")).Click();
            ThinkTime(3);
            saveFooter(driver, testInReport, testName, testDataIteration);
        }
        public void CreateNewContact(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string LastName, string Language, string username)
        {
            

            
            WaitUntil(driver, Control("OpportunityNewButton", "EnterpriseSales"), 360);
            MoveToElement(driver, Control("OpportunityNewButton", "EnterpriseSales"));
            Element(driver, Control("OpportunityNewButton", "EnterpriseSales")).Click();

            
            //scrollUpMiddle(driver, testInReport, testName, testDataIteration);
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);

            if (username == "crm.test3@regus.com")
            {
                ThinkTime(2);

                Element(driver, Control("Salutation", "Opportunity")).SendKeys(Keys.Control + "m");
                //Element(driver, Control("Salutation", "Opportunity")).SendKeys(Keys.Delete);
                Element(driver, Control("Salutation", "Opportunity")).SendKeys("Mr.");
                Element(driver, Control("Salutation", "Opportunity")).Click();

                WaitUntil(driver, Control("NewContactFName", "Contacts"), 30);
                Element(driver, Control("NewContactFName", "Contacts")).Click();
                Element(driver, Control("NewContactFName", "Contacts")).SendKeys(LastName);

                WaitUntil(driver, Control("NewContactLName", "Contacts"), 30);
                Element(driver, Control("NewContactLName", "Contacts")).Click();
                Element(driver, Control("NewContactLName", "Contacts")).SendKeys(LastName);


                WaitUntil(driver, Control("JobTitle", "Contacts"), 30);
                Element(driver, Control("JobTitle", "Contacts")).Click();
                Element(driver, Control("JobTitle", "Contacts")).SendKeys("Mr.");


                Element(driver, Control("AccountName", "Opportunity")).SendKeys(Keys.Control + "a");
                Element(driver, Control("AccountName", "Opportunity")).SendKeys(Keys.Delete);
                Element(driver, Control("AccountName", "Opportunity")).SendKeys("Ameren");
                //Element(driver, Control("AccountName", "Ameren", "Opportunity")).Click();


                //WaitUntil(driver, Control("AccountName", "Contacts"), 30);
                //Element(driver, Control("AccountName", "Contacts")).Click();
                //Element(driver, Control("AccountName", "Contacts")).SendKeys("Ameren");

                //ThinkTime(2);
                ThinkTime(2);
                scrollDownContactCustTest(driver, testInReport, testName, testDataIteration, "400");
                ScriptErrorExcep(driver, testInReport, testName, testDataIteration);

                  
                //try
                //{
                //    ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
                //    ThinkTime(2);
                //    WaitUntil(driver, Control("NewContactLName", "Contacts"), 30);
                //    Element(driver, Control("NewContactLName", "Contacts")).Click();
                //    Element(driver, Control("NewContactLName", "Contacts")).SendKeys(LastName);
                //    ThinkTime(2);
                //    WaitUntil(driver, Control("Companyinput", "EnterpriseSales"), 30);
                //    Element(driver, Control("Companyinput", "EnterpriseSales")).Click();
                //    ThinkTime(3);
                //    WaitUntil(driver, Control("NewAccountButtonClick", "Opportunity"), 60);
                //    Element(driver, Control("NewAccountButtonClick", "Opportunity")).Click();
                //    ThinkTime(3);
                //    WaitUntil(driver, Control("AccountNameInput", "Opportunity"), 60);
                //    Element(driver, Control("AccountNameInput", "Opportunity")).Click();
                //    Element(driver, Control("AccountNameInput", "Opportunity")).SendKeys(LastName + "Company");
                //    ThinkTime(3);


                //}
                //catch (Exception e)
                //{

                //}
                //WaitUntil(driver, Control("ActivityCreateContactInput", "EnterpriseSales"), 60);
                //Element(driver, Control("ActivityCreateContactInput", "EnterpriseSales")).Click();
                //Element(driver, Control("ActivityCreateContactInput", "EnterpriseSales")).SendKeys(Language);

                //ThinkTime(3);

                //WaitUntil(driver, Control("ContactLanguageDropdownSelect", "EnterpriseSales"), 30);
                //Element(driver, Control("ContactLanguageDropdownSelect", "EnterpriseSales")).Click();
                ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
                ThinkTime(3);
                WaitUntil(driver, Control("ContactSaveButton", "Opportunity"), 180);
                Element(driver, Control("ContactSaveButton", "Opportunity")).Click();
                ThinkTime(3);
            }

            else
            {
                WaitUntil(driver, Control("NewContactLName", "Contacts"), 30);
                //Element(driver, Control("NewContactLName", "Contacts")).Click();
                ThinkTime(7);
                Element(driver, Control("NewContactLName", "Contacts")).SendKeys(LastName);
                ThinkTime(3);
                //scrollDownContactPage(driver, testInReport, testName, testDataIteration);
                ThinkTime(5);
                //WaitUntil(driver, Control("NewContactLName", "Contacts"), 30);
                //MoveToElement(driver, Control("NewContactLName", "Contacts"));
                //ThinkTime(7);
                //Element(driver, Control("NewContactLName", "Contacts")).SendKeys(LastName);
                //ThinkTime(3);
                //try
                //{

                WaitUntil(driver, Control("TestContactInput", "EnterpriseSales"), 30);
                MoveToElement(driver, Control("TestContactInput", "EnterpriseSales"));
                Element(driver, Control("TestContactInput", "EnterpriseSales")).Click();
                ThinkTime(2);
                ActionsClick(driver, Control("CompanydropValue", "Accounts"));
                ThinkTime(3);

                //WaitUntil(driver, Control("Companyinput", "EnterpriseSales"), 30);
                //    Element(driver, Control("Companyinput", "EnterpriseSales")).Click();
                //    ThinkTime(3);
                //    WaitUntil(driver, Control("NewAccountButtonClick", "Opportunity"), 60);
                //    Element(driver, Control("NewAccountButtonClick", "Opportunity")).Click();

                //    WaitUntil(driver, Control("AccountNameInput", "Opportunity"), 180);
                //    Element(driver, Control("AccountNameInput", "Opportunity")).Click();
                //    Element(driver, Control("AccountNameInput", "Opportunity")).SendKeys(LastName+"Company");

                saveFooter(driver, testInReport, testName, testDataIteration);
                //}
                //catch (Exception e)
                //{

                //}
            }




            saveFooter(driver, testInReport, testName, testDataIteration);
            ThinkTime(3);

            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Created Contact", "Created Contact");
        }

        public String CreateNewContacts(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string LastName, string Language, string username, string email, string phone)
        {

            //string lname;// = "New Case";
            string CurrentTime = System.DateTime.UtcNow.ToString("h:mm tt");
            LastName = LastName + CurrentTime;

            WaitUntil(driver, Control("OpportunityNewButton", "EnterpriseSales"), 360);
            MoveToElement(driver, Control("OpportunityNewButton", "EnterpriseSales"));
            Element(driver, Control("OpportunityNewButton", "EnterpriseSales")).Click();
            
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);

            if (username == "crm.test3@regus.com")
            {
                ThinkTime(2);

                Element(driver, Control("Salutation", "Opportunity")).SendKeys(Keys.Control + "m");
                //Element(driver, Control("Salutation", "Opportunity")).SendKeys(Keys.Delete);
                Element(driver, Control("Salutation", "Opportunity")).SendKeys("Mr.");
                Element(driver, Control("Salutation", "Opportunity")).Click();

                WaitUntil(driver, Control("NewContactFName", "Contacts"), 30);
                Element(driver, Control("NewContactFName", "Contacts")).Click();
                Element(driver, Control("NewContactFName", "Contacts")).SendKeys(LastName);

                WaitUntil(driver, Control("NewContactLName", "Contacts"), 30);
                Element(driver, Control("NewContactLName", "Contacts")).Click();
                Element(driver, Control("NewContactLName", "Contacts")).SendKeys(LastName);


                WaitUntil(driver, Control("JobTitle", "Contacts"), 30);
                Element(driver, Control("JobTitle", "Contacts")).Click();
                Element(driver, Control("JobTitle", "Contacts")).SendKeys("Mr.");

                WaitUntil(driver, Control("AccountName", "Opportunity"), 360);
                MoveToElement(driver, Control("AccountName", "Opportunity"));
                Element(driver, Control("AccountName", "Opportunity")).Click();
                ThinkTime(3);

                Element(driver, Control("AccountName", "Opportunity")).SendKeys(Keys.Control + "a");
                Element(driver, Control("AccountName", "Opportunity")).SendKeys(Keys.Delete);
                Element(driver, Control("AccountName", "Opportunity")).SendKeys("Ameren");

                WaitUntil(driver, Control("companylookupclick", "Opportunity"), 60);
                Element(driver, Control("companylookupclick", "Opportunity")).Click();
                ThinkTime(3);
                
                scrollDownContactCustTest(driver, testInReport, testName, testDataIteration, "400");
                ScriptErrorExcep(driver, testInReport, testName, testDataIteration);

                WaitUntil(driver, Control("EmailField", "Contacts"), 30);
                MoveToElement(driver, Control("EmailField", "Contacts"));
                Element(driver, Control("EmailField", "Contacts")).Click();
                Element(driver, Control("EmailField", "Contacts")).SendKeys(email);

                WaitUntil(driver, Control("BusinessPhone", "Contacts"), 30);
                Element(driver, Control("BusinessPhone", "Contacts")).Click();
                Element(driver, Control("BusinessPhone", "Contacts")).SendKeys(phone);

                WaitUntil(driver, Control("LeadSource", "Contacts"), 30);
                Element(driver, Control("LeadSource", "Contacts")).SendKeys(Keys.Control + "p");
                //Element(driver, Control("Salutation", "Opportunity")).SendKeys(Keys.Delete);
                Element(driver, Control("LeadSource", "Contacts")).SendKeys("Partner");
                Element(driver, Control("LeadSource", "Contacts")).Click();
            
                ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
                ThinkTime(3);
                //WaitUntil(driver, Control("ContactSaveButton", "Opportunity"), 180);
                //Element(driver, Control("ContactSaveButton", "Opportunity")).Click();

                WaitUntil(driver, Control("ButtonSaveAndCloseAccounts", "Opportunity"), 40);
                MoveToElement(driver, Control("ButtonSaveAndCloseAccounts", "Opportunity"));
                Element(driver, Control("ButtonSaveAndCloseAccounts", "Opportunity")).Click();

                ThinkTime(3);

                //Verify the account is created or not
                VerifyContact(driver, testInReport, testName, testDataIteration, LastName + " " + LastName);


            }





            //saveFooter(driver, testInReport, testName, testDataIteration);
            //ThinkTime(3);

            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Created Contact", "Created Contact");

            return LastName + " " + LastName;

        }

        //Method to create new account.
        public void Verifyentitycreatedsuccessfully(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string Accountname, string Savedname)
        {
            if (Accountname == Savedname)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Created Succesfully", "Created successfully");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Created Fail", "Created Fail");

            }

        }
        public string CreateNewAccount(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string CompanyName, string time = "")
        {
            WaitUntil(driver, Control("OpportunityNewButton", "EnterpriseSales"), 360);
            MoveToElement(driver, Control("OpportunityNewButton", "EnterpriseSales"));
            Element(driver, Control("OpportunityNewButton", "EnterpriseSales")).Click();
            ThinkTime(7);
            if (Elements(driver, Control("ScriptDialg", "Opportunity")) > 0)
            {
                Element(driver, Control("HandleScriptError", "Opportunity")).Click();
                ThinkTime(3);
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "No Script error present", "No Script error present");

            }

            string ranPhone = "+91-9014";

            Random r = new Random();
            int num = r.Next(1000);

            ranPhone = ranPhone + Convert.ToString(num);


            string NewName = CompanyName + time;
            string Phone = ranPhone;// "+919012345678";
            string Fax = "+41-123-" + Convert.ToString(num);
            string Website = "test"+Convert.ToString(num) +"@gmail.com";
            string Address1 = "15 MG Road";
            string Address2 = "Sasoon";
            string Address3 = "Pune";
            string City = "Pune";
            string State = "Maharashtraa";
            string Postalcode = "123456";
            try
            {
                ThinkTime(2);
                WaitUntil(driver, Control("AccountNameText", "Accounts"), 30);
                Element(driver, Control("AccountNameText", "Accounts")).Click();
                Element(driver, Control("AccountNameText", "Accounts")).SendKeys(Keys.Delete);
                ThinkTime(2);
                Element(driver, Control("AccountNameText", "Accounts")).SendKeys(NewName);
                ThinkTime(2);

                 
                WaitUntil(driver, Control("Phone", "Accounts"), 30);
                Element(driver, Control("Phone", "Accounts")).Click();
                ThinkTime(2);
                Element(driver, Control("Phone", "Accounts")).SendKeys(Phone);
                
                ThinkTime(2);

                WaitUntil(driver, Control("Fax", "Accounts"), 30);
                Element(driver, Control("Fax", "Accounts")).Click();
                ThinkTime(2);
                Element(driver, Control("Fax", "Accounts")).SendKeys(Fax);

                ThinkTime(2);

                WaitUntil(driver, Control("Website", "Accounts"), 30);
                Element(driver, Control("Website", "Accounts")).Click();
                ThinkTime(2);
                Element(driver, Control("Website", "Accounts")).SendKeys(Website);

                ThinkTime(2);

                WaitUntil(driver, Control("Address1", "Accounts"), 30);
                Element(driver, Control("Address1", "Accounts")).Click();
                ThinkTime(2);
                Element(driver, Control("Address1", "Accounts")).SendKeys(Address1);

                ThinkTime(2);

                WaitUntil(driver, Control("Address2", "Accounts"), 30);
                Element(driver, Control("Address2", "Accounts")).Click();
                ThinkTime(2);
                Element(driver, Control("Address2", "Accounts")).SendKeys(Address2);

                ThinkTime(2);

                WaitUntil(driver, Control("Address3", "Accounts"), 30);
                Element(driver, Control("Address3", "Accounts")).Click();
                ThinkTime(2);
                Element(driver, Control("Address3", "Accounts")).SendKeys(Address3);

/*
                ThinkTime(2);

                WaitUntil(driver, Control("City", "Accounts"), 30);
                Element(driver, Control("City", "Accounts")).Click();
                ThinkTime(2);
                Element(driver, Control("City", "Accounts")).SendKeys(City);

                ThinkTime(2);

                WaitUntil(driver, Control("State", "Accounts"), 30);
                Element(driver, Control("State", "Accounts")).Click();
                ThinkTime(2);
                Element(driver, Control("State", "Accounts")).SendKeys(State);

                ThinkTime(2);

                WaitUntil(driver, Control("Postalcode", "Accounts"), 30);
                Element(driver, Control("Postalcode", "Accounts")).Click();
                ThinkTime(2);
                Element(driver, Control("Postalcode", "Accounts")).SendKeys(Postalcode);
*/
                ThinkTime(2);



            }
            catch (Exception e)
            {
                ThinkTime(2);
                WaitUntil(driver, Control("AccountNameText", "CommonObj"), 30);
                //Element(driver, Control("AccountNameText", "CommonObj")).Click();
                //ThinkTime(2);
                //Element(driver, Control("AccountNameText", "CommonObj")).SendKeys(NewName);
                //ThinkTime(2);
            }
            ThinkTime(5);
            // New change MSWave1 update -May1,2020
            if (Elements(driver, Control("CorporateAccountfield", "Accounts")) > 0)
            {
                WaitUntil(driver, Control("CorporateAccountfield", "Accounts"), 30);
                MoveToElement(driver, Control("CorporateAccountfield", "Accounts"));
                ThinkTime(2);
                Element(driver, Control("CorporateAccountfield", "Accounts")).Click();
            }
            ThinkTime(2);

            saveFooter(driver, testInReport, testName, testDataIteration);
            ThinkTime(3);
            
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Created Account", "Created Account");

            ThinkTime(3);
            WaitUntil(driver, Control("ButtonSaveAndCloseAccounts", "Opportunity"), 40);
            MoveToElement(driver, Control("ButtonSaveAndCloseAccounts", "Opportunity"));
            Element(driver, Control("ButtonSaveAndCloseAccounts","Opportunity")).Click();

            //Verify the account is created or not
            //VerifyAccounts(driver, testInReport, testName, testDataIteration, NewName);

            //NewName = "RandomAccount";

            //VerifyAccounts(driver, testInReport, testName, testDataIteration, NewName);


            return NewName;
        }

        public string CreateNewAccountFieldService(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string CompanyName, string time = "")
        {
            WaitUntil(driver, Control("OpportunityNewButton", "EnterpriseSales"), 360);
            MoveToElement(driver, Control("OpportunityNewButton", "EnterpriseSales"));
            Element(driver, Control("OpportunityNewButton", "EnterpriseSales")).Click();
            ThinkTime(7);
            if (Elements(driver, Control("ScriptDialg", "Opportunity")) > 0)
            {
                Element(driver, Control("HandleScriptError", "Opportunity")).Click();
                ThinkTime(3);
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "No Script error present", "No Script error present");

            }

            string ranPhone = "+91-9014";

            Random r = new Random();
            int num = r.Next(1000);

            ranPhone = ranPhone + Convert.ToString(num);


            string NewName = CompanyName + time;
            string Phone = ranPhone;// "+919012345678";
            string Fax = "+41-123-" + Convert.ToString(num);
            string Website = "test" + Convert.ToString(num) + "@gmail.com";
            string Address1 = "15 MG Road";
            string Address2 = "Sasoon";
            string Address3 = "Pune";
            string City = "Pune";
            string State = "Maharashtraa";
            string Postalcode = "123456";
            try
            {
                ThinkTime(2);
                WaitUntil(driver, Control("AccountNameText", "Accounts"), 30);
                Element(driver, Control("AccountNameText", "Accounts")).Click();
                Element(driver, Control("AccountNameText", "Accounts")).SendKeys(Keys.Delete);
                ThinkTime(2);
                Element(driver, Control("AccountNameText", "Accounts")).SendKeys(NewName);
                ThinkTime(2);


                WaitUntil(driver, Control("Phone", "Accounts"), 30);
                Element(driver, Control("Phone", "Accounts")).Click();
                ThinkTime(2);
                Element(driver, Control("Phone", "Accounts")).SendKeys(Phone);

                ThinkTime(2);

                WaitUntil(driver, Control("Fax", "Accounts"), 30);
                Element(driver, Control("Fax", "Accounts")).Click();
                ThinkTime(2);
                Element(driver, Control("Fax", "Accounts")).SendKeys(Fax);

                ThinkTime(2);

                WaitUntil(driver, Control("Website", "Accounts"), 30);
                Element(driver, Control("Website", "Accounts")).Click();
                ThinkTime(2);
                Element(driver, Control("Website", "Accounts")).SendKeys(Website);

                ThinkTime(2);

                WaitUntil(driver, Control("Address1", "Accounts"), 30);
                Element(driver, Control("Address1", "Accounts")).Click();
                ThinkTime(2);
                Element(driver, Control("Address1", "Accounts")).SendKeys(Address1);

                ThinkTime(2);
/*
                WaitUntil(driver, Control("Address2", "Accounts"), 30);
                Element(driver, Control("Address2", "Accounts")).Click();
                ThinkTime(2);
                Element(driver, Control("Address2", "Accounts")).SendKeys(Address2);

                ThinkTime(2);

                WaitUntil(driver, Control("Address3", "Accounts"), 30);
                Element(driver, Control("Address3", "Accounts")).Click();
                ThinkTime(2);
                Element(driver, Control("Address3", "Accounts")).SendKeys(Address3);

                 */
                                ThinkTime(2);

                                WaitUntil(driver, Control("Country", "Accounts"), 30);
                                Element(driver, Control("Country", "Accounts")).Click();
                                ThinkTime(2);
                                Element(driver, Control("Country", "Accounts")).SendKeys("India");

                                ThinkTime(2);

                WaitUntil(driver, Control("Industry", "Accounts"), 30);
                Element(driver, Control("Industry", "Accounts")).SendKeys(Keys.Control + "f");
                //Element(driver, Control("Salutation", "Opportunity")).SendKeys(Keys.Delete);
                Element(driver, Control("Industry", "Accounts")).SendKeys("Financial General");
                Element(driver, Control("Industry", "Accounts")).Click();
                ThinkTime(2);
                /*
                                WaitUntil(driver, Control("State", "Accounts"), 30);
                                Element(driver, Control("State", "Accounts")).Click();
                                ThinkTime(2);
                                Element(driver, Control("State", "Accounts")).SendKeys(State);

                                ThinkTime(2);

                                WaitUntil(driver, Control("Postalcode", "Accounts"), 30);
                                Element(driver, Control("Postalcode", "Accounts")).Click();
                                ThinkTime(2);
                                Element(driver, Control("Postalcode", "Accounts")).SendKeys(Postalcode);
               */
                ThinkTime(2);



            }
            catch (Exception e)
            {
                ThinkTime(2);
                WaitUntil(driver, Control("AccountNameText", "CommonObj"), 30);
                //Element(driver, Control("AccountNameText", "CommonObj")).Click();
                //ThinkTime(2);
                //Element(driver, Control("AccountNameText", "CommonObj")).SendKeys(NewName);
                //ThinkTime(2);
            }
            ThinkTime(5);
            // New change MSWave1 update -May1,2020
            if (Elements(driver, Control("CorporateAccountfield", "Accounts")) > 0)
            {
                WaitUntil(driver, Control("CorporateAccountfield", "Accounts"), 30);
                MoveToElement(driver, Control("CorporateAccountfield", "Accounts"));
                ThinkTime(2);
                Element(driver, Control("CorporateAccountfield", "Accounts")).Click();
            }
            ThinkTime(2);

            saveFooter(driver, testInReport, testName, testDataIteration);
            ThinkTime(3);

            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Created Account", "Created Account");

            ThinkTime(3);
            WaitUntil(driver, Control("ButtonSaveAndCloseAccounts", "Opportunity"), 40);
            MoveToElement(driver, Control("ButtonSaveAndCloseAccounts", "Opportunity"));
            Element(driver, Control("ButtonSaveAndCloseAccounts", "Opportunity")).Click();

            //Verify the account is created or not
            //VerifyAccounts(driver, testInReport, testName, testDataIteration, NewName);

            //NewName = "RandomAccount";

            //VerifyAccounts(driver, testInReport, testName, testDataIteration, NewName);


            return NewName;
        }


        public string CreateNewWorkOrderFieldService(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string CompanyName, string time = "")
        {

            string WorkOrderID = "";

            WaitUntil(driver, Control("WorkOrderNewButton", "Generic"), 360);
            MoveToElement(driver, Control("WorkOrderNewButton", "Generic"));
            Element(driver, Control("WorkOrderNewButton", "Generic")).Click();
            //ThinkTime(7);
            //if (Elements(driver, Control("ScriptDialg", "Opportunity")) > 0)
            //{
            //    Element(driver, Control("HandleScriptError", "Opportunity")).Click();
            //    ThinkTime(3);
            //}
            //else
            //{
            //    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "No Script error present", "No Script error present");

            //}

            string ranPhone = "+91-9014";

            Random r = new Random();
            int num = r.Next(1000);

            ranPhone = ranPhone + Convert.ToString(num);


            string NewName = CompanyName + time;
            string WorkOrderSummary = ranPhone;// "+919012345678";

            try
            {
                WaitUntil(driver, Control("WorkOrderNumber", "Generic"), 360);

                WorkOrderID = Element(driver, Control("WorkOrderNumber", "Generic")).GetAttribute("Value");

                WaitUntil(driver, Control("ServiceAccount", "Generic"), 360);
                MoveToElement(driver, Control("ServiceAccount", "Generic"));
                Element(driver, Control("ServiceAccount", "Generic")).Click();
                ThinkTime(3);

                Element(driver, Control("ServiceAccount", "Generic")).SendKeys(Keys.Control + "o");
                Element(driver, Control("ServiceAccount", "Generic")).SendKeys(Keys.Delete);
                Element(driver, Control("ServiceAccount", "Generic")).SendKeys("Oppo Account");

                WaitUntil(driver, Control("companylookupclick", "Opportunity"), 60);
                Element(driver, Control("companylookupclick", "Opportunity")).Click();
                ThinkTime(3);



                //ThinkTime(2);
                //WaitUntil(driver, Control("ServiceAccount", "Generic"), 30);
                //Element(driver, Control("ServiceAccount", "Generic")).Click();
                //Element(driver, Control("ServiceAccount", "Generic")).SendKeys(Keys.Delete);
                //ThinkTime(2);
                //Element(driver, Control("ServiceAccount", "Generic")).SendKeys(NewName);
                //ThinkTime(2);

                ThinkTime(2);
                WaitUntil(driver, Control("WorkOrderType", "Generic"), 360);
                MoveToElement(driver, Control("WorkOrderType", "Generic"));
                Element(driver, Control("WorkOrderType", "Generic")).Click();
                ThinkTime(3);
                Element(driver, Control("WorkOrderType", "Generic")).SendKeys(Keys.Control + "OffShore-1");
                //Element(driver, Control("WorkOrderType", "Generic")).SendKeys(Keys.Delete);
                ThinkTime(3);
                Element(driver, Control("WorkOrderType", "Generic")).SendKeys("OffShore-1");
                ThinkTime(3);
                WaitUntil(driver, Control("companylookupclick", "Opportunity"), 60);
                Element(driver, Control("companylookupclick", "Opportunity")).Click();
                ThinkTime(3);


                scrollDownContactCustTest(driver, testInReport, testName, testDataIteration, "400");


                WaitUntil(driver, Control("WorkOrderSummary", "Generic"), 30);
                Element(driver, Control("WorkOrderSummary", "Generic")).Click();
                Element(driver, Control("WorkOrderSummary", "Generic")).SendKeys(Keys.Delete);

                ThinkTime(2);
                Element(driver, Control("WorkOrderSummary", "Generic")).SendKeys(WorkOrderSummary);



                ThinkTime(2);
                /*
                                WaitUntil(driver, Control("Address2", "Accounts"), 30);
                                Element(driver, Control("Address2", "Accounts")).Click();
                                ThinkTime(2);
                                Element(driver, Control("Address2", "Accounts")).SendKeys(Address2);

                                ThinkTime(2);

                                WaitUntil(driver, Control("Address3", "Accounts"), 30);
                                Element(driver, Control("Address3", "Accounts")).Click();
                                ThinkTime(2);
                                Element(driver, Control("Address3", "Accounts")).SendKeys(Address3);

                                 */
                ThinkTime(2);
                /*
                                WaitUntil(driver, Control("Country", "Accounts"), 30);
                                Element(driver, Control("Country", "Accounts")).Click();
                                ThinkTime(2);
                                Element(driver, Control("Country", "Accounts")).SendKeys("India");

                                ThinkTime(2);

                                WaitUntil(driver, Control("Industry", "Accounts"), 30);
                                Element(driver, Control("Industry", "Accounts")).SendKeys(Keys.Control + "f");
                                //Element(driver, Control("Salutation", "Opportunity")).SendKeys(Keys.Delete);
                                Element(driver, Control("Industry", "Accounts")).SendKeys("Financial General");
                                Element(driver, Control("Industry", "Accounts")).Click();
                                ThinkTime(2);

                                                WaitUntil(driver, Control("State", "Accounts"), 30);
                                                Element(driver, Control("State", "Accounts")).Click();
                                                ThinkTime(2);
                                                Element(driver, Control("State", "Accounts")).SendKeys(State);

                                                ThinkTime(2);

                                                WaitUntil(driver, Control("Postalcode", "Accounts"), 30);
                                                Element(driver, Control("Postalcode", "Accounts")).Click();
                                                ThinkTime(2);
                                                Element(driver, Control("Postalcode", "Accounts")).SendKeys(Postalcode);

                                ThinkTime(2);
                */


            }
            catch (Exception e)
            {
                ThinkTime(2);
                //WaitUntil(driver, Control("AccountNameText", "CommonObj"), 30);
                //Element(driver, Control("AccountNameText", "CommonObj")).Click();
                //ThinkTime(2);
                //Element(driver, Control("AccountNameText", "CommonObj")).SendKeys(NewName);
                //ThinkTime(2);
            }
            //ThinkTime(5);
            // New change MSWave1 update -May1,2020
            if (Elements(driver, Control("CorporateAccountfield", "Accounts")) > 0)
            {
                WaitUntil(driver, Control("CorporateAccountfield", "Accounts"), 30);
                MoveToElement(driver, Control("CorporateAccountfield", "Accounts"));
                ThinkTime(2);
                Element(driver, Control("CorporateAccountfield", "Accounts")).Click();
            }
            ThinkTime(2);

            saveFooter(driver, testInReport, testName, testDataIteration);
            ThinkTime(3);

            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Created Work Order", "Work Order");

            ThinkTime(3);
            WaitUntil(driver, Control("ButtonSaveAndCloseAccounts", "Opportunity"), 40);
            MoveToElement(driver, Control("ButtonSaveAndCloseAccounts", "Opportunity"));
            Element(driver, Control("ButtonSaveAndCloseAccounts", "Opportunity")).Click();

            //Verify the account is created or not
            //VerifyAccounts(driver, testInReport, testName, testDataIteration, NewName);

            //NewName = "RandomAccount";

            //VerifyAccounts(driver, testInReport, testName, testDataIteration, NewName);


            return WorkOrderID;
        }


        //Method to create new account with service provider in enterprise sales.
        public string CreateNewAccountWithSeriviceProvider(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string CompanyName, string Time, string CustomerType)
        {
            ThinkTime(3);

            string NewName = CompanyName + Time;

            WaitUntil(driver, Control("CompanyNameField", "Accounts"), 30);
            Element(driver, Control("CompanyNameField", "Accounts")).Click();
            Element(driver, Control("CompanyNameField", "Accounts")).SendKeys(NewName);
            ThinkTime(3);
            WaitUntil(driver, Control("Phonefield1", "Accounts"), 30);
            Element(driver, Control("Phonefield1", "Accounts")).Click();
            Element(driver, Control("Phonefield1", "Accounts")).SendKeys("+919995552225");
            ThinkTime(2);
            scrollDownOpportunityPage(driver, testInReport, testName, testDataIteration);
            scrollDownOpportunityPage(driver, testInReport, testName, testDataIteration);

            ThinkTime(2);
            WaitUntil(driver, Control("City", "Accounts"), 30);
            Element(driver, Control("City", "Accounts")).Click();
            Element(driver, Control("City", "Accounts")).SendKeys(NewName);
            ThinkTime(2);
            WaitUntil(driver, Control("CountryInput", "Accounts"), 30);
            Element(driver, Control("CountryInput", "Accounts")).Click();
            Element(driver, Control("CountryInput", "Accounts")).SendKeys("India");
            ThinkTime(2);
            WaitUntil(driver, Control("CountrySelect", "Accounts"), 30);
            Element(driver, Control("CountrySelect", "Accounts")).Click();
            ThinkTime(2);
            WaitUntil(driver, Control("BrokerTypeSelect", "Generic"), 30);
            Element(driver, Control("BrokerTypeSelect", "Generic")).Click();
            ThinkTime(3);
            Element(driver, Control("BrokerTypeSelect", "Generic")).SendKeys("Real Estate Broker");

            scrollDownOpportunityPage(driver, testInReport, testName, testDataIteration);
            ThinkTime(4);
            WaitUntil(driver, Control("FlipSwitch", "Accounts"), 30);
            Element(driver, Control("FlipSwitch", "Accounts")).Click();

            //IWebElement New = Element(driver, Control("Selectserviceprovider", "EnterpriseSales"));
            ThinkTime(4);
            //IJavaScriptExecutor IVJ = (IJavaScriptExecutor)driver;
            //IVJ.ExecuteScript("arguments[0].click();", New);

            saveFooter(driver, testInReport, testName, testDataIteration);
            ThinkTime(4);
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Created Contact", "Created Contact");
            return NewName;
        }


        //Method to create new account with Customertype in enterprise sales.
        public string CreateNewAccountWithCustomerTypeNew(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string CompanyName, string Time, string CustomerType)
        {
            ThinkTime(5);

            string NewName = CompanyName + Time;

            WaitUntil(driver, Control("CompanyNameField", "Accounts"), 30);
            Element(driver, Control("CompanyNameField", "Accounts")).Click();
            ThinkTime(3);
            Element(driver, Control("CompanyNameField", "Accounts")).SendKeys(Keys.Control + "a");
            Element(driver, Control("CompanyNameField", "Accounts")).SendKeys(Keys.Delete);
            Element(driver, Control("CompanyNameField", "Accounts")).SendKeys(NewName);
            ThinkTime(3);
            WaitUntil(driver, Control("Phonefield1", "Accounts"), 30);
            Element(driver, Control("Phonefield1", "Accounts")).Click();
            ThinkTime(3);
            Element(driver, Control("Phonefield1", "Accounts")).SendKeys("++919995552225");
            ThinkTime(2);

            scrollDownOpportunityPage(driver, testInReport, testName, testDataIteration);
            ThinkTime(3);
            scrollDownOpportunityPage(driver, testInReport, testName, testDataIteration);
            //scrollDownOpportunityPage(driver, testInReport, testName, testDataIteration);


            ThinkTime(3);
            //WaitUntil(driver, Control("BrokerTypeSelectOption", "Generic"), 30);
            //MoveToElement(driver, Control("BrokerTypeSelectOption", "Generic"));
            //Element(driver, Control("BrokerTypeSelectOption", "Generic")).Click();
            //ThinkTime(3);
            WaitUntil(driver, Control("City", "Accounts"), 30);
            Element(driver, Control("City", "Accounts")).SendKeys(Keys.Control + "a");
            Element(driver, Control("City", "Accounts")).SendKeys(Keys.Delete);
            Element(driver, Control("City", "Accounts")).SendKeys("Trv");
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            ThinkTime(3);
            WaitUntil(driver, Control("CountryInput", "Accounts"), 30);
            MoveToElement(driver, Control("CountryInput", "Accounts"));
            Element(driver, Control("CountryInput", "Accounts")).SendKeys(Keys.Control + "a");
            Element(driver, Control("CountryInput", "Accounts")).SendKeys(Keys.Delete);
            Element(driver, Control("CountryInput", "Accounts")).SendKeys("India");
            ThinkTime(6);
            WaitUntil(driver, Control("CountrySelect", "Accounts"), 30);
            MoveToElement(driver, Control("CountrySelect", "Accounts"));
            Element(driver, Control("CountrySelect", "Accounts")).Click();
            ThinkTime(3);
            ////WaitUntil(driver, Control("ServiceProviderSelectionBtn", CustomerType, "EnterpriseSales"), 30);
            ////MoveToElement(driver, Control("ServiceProviderSelectionBtn", CustomerType, "EnterpriseSales"));
            //WaitUntil(driver, Control("BrokerTypeSelect", "Generic"), 30);
            //MoveToElement(driver, Control("BrokerTypeSelect", "Generic"));
            //Element(driver, Control("BrokerTypeSelect", "Generic")).Click();
            //ThinkTime(3);
            //Element(driver, Control("BrokerTypeSelect", "Generic")).SendKeys("Real Estate Broker");
            //IWebElement New = Element(driver, Control("ServiceProviderSelectionBtn", CustomerType, "EnterpriseSales"));

            //IJavaScriptExecutor BVJ = (IJavaScriptExecutor)driver;
            //BVJ.ExecuteScript("arguments[0].click();", New);

            saveFooter(driver, testInReport, testName, testDataIteration);

            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Created Account for Broker", "Created Account for Broker");

            return NewName;
        }
        public void Movetobroker(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string CustomerType)
        {
            ThinkTime(3);



            //WaitUntil(driver, Control("ServiceProviderSelectionBtn", CustomerType, "EnterpriseSales"), 30);
            //MoveToElement(driver, Control("ServiceProviderSelectionBtn", CustomerType, "EnterpriseSales"));

            //IWebElement New = Element(driver, Control("ServiceProviderSelectionBtn", CustomerType, "EnterpriseSales"));

            //IJavaScriptExecutor BVJ = (IJavaScriptExecutor)driver;
            //BVJ.ExecuteScript("arguments[0].click();", New);
            WaitUntil(driver, Control("BrokerTypeSelect", "Generic"), 30);
            MoveToElement(driver, Control("BrokerTypeSelect", "Generic"));
            Element(driver, Control("BrokerTypeSelect", "Generic")).Click();
            ThinkTime(3);
            Element(driver, Control("BrokerTypeSelect", "Generic")).SendKeys("Real Estate Broker");
            ThinkTime(3);
            saveFooter(driver, testInReport, testName, testDataIteration);
            ThinkTime(3);
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Created Contact", "Created Contact");

        }

        public string CreateNewAccountWithCustomerType(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string CompanyName, string Time, string CustomerType, string Phoneobj, string Phone, string cityobj, string City, string countryobj)
        {
            ThinkTime(8);

            string NewName = CompanyName + Time;

            WaitUntil(driver, Control("CompanyNameField", "Accounts"), 30);
            Element(driver, Control("CompanyNameField", "Accounts")).Click();
            ThinkTime(3);
            Element(driver, Control("CompanyNameField", "Accounts")).SendKeys(NewName);
            ThinkTime(3);
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Name entered", "Name entered");

            WaitUntil(driver, Control("Enterphoneaccount", Phoneobj, "EnterpriseSales"), 30);
            MoveToElement(driver, Control("Enterphoneaccount", Phoneobj, "EnterpriseSales"));
            ThinkTime(3);
            ActionsClick(driver, Control("Enterphoneaccount", Phoneobj, "EnterpriseSales"));
            ThinkTime(3);
            Element(driver, Control("Enterphoneaccount", Phoneobj, "EnterpriseSales")).SendKeys(Phone);
            ThinkTime(3);
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Phone entered", "Phone entered");

            scrollDownOpportunityPage(driver, testInReport, testName, testDataIteration);
            ThinkTime(3);
            scrollDownOpportunityPage(driver, testInReport, testName, testDataIteration);
            ThinkTime(3);

            WaitUntil(driver, Control("Enterphoneaccount", cityobj, "EnterpriseSales"), 30);
            MoveToElement(driver, Control("Enterphoneaccount", cityobj, "EnterpriseSales"));
            ThinkTime(3);
            Element(driver, Control("Enterphoneaccount", cityobj, "EnterpriseSales")).SendKeys(Keys.Control + "a");
            Element(driver, Control("Enterphoneaccount", cityobj, "EnterpriseSales")).SendKeys(Keys.Delete);
            ThinkTime(3);
            Element(driver, Control("Enterphoneaccount", cityobj, "EnterpriseSales")).SendKeys(City);
            ThinkTime(3);
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "City entered", "City entered");
            scrollDownOpportunityPageITSales1(driver, testInReport, testName, testDataIteration);
            ThinkTime(3);
            WaitUntil(driver, Control("Enterphoneaccount", countryobj, "EnterpriseSales"), 30);
            MoveToElement(driver, Control("Enterphoneaccount", countryobj, "EnterpriseSales"));
            ThinkTime(3);
            Element(driver, Control("Enterphoneaccount", countryobj, "EnterpriseSales")).SendKeys(Keys.Control + "a");

            Element(driver, Control("Enterphoneaccount", countryobj, "EnterpriseSales")).SendKeys(Keys.Delete);

            Element(driver, Control("Enterphoneaccount", countryobj, "EnterpriseSales")).SendKeys("UK");
            ThinkTime(3);
            MoveToElement(driver, Control("CustomerDropdownSelect", "ITSales"));
            Element(driver, Control("CustomerDropdownSelect", "ITSales")).Click();
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Country entered", "Country entered");



            scrollDownOpportunityPage(driver, testInReport, testName, testDataIteration);
            ThinkTime(3);
            Select(Element(driver, Control("SelectBroker", "EnterpriseSales"))).SelectByText("Internet/Web Broker");

            //WaitUntil(driver, Control("ServiceProviderSelectionBtn", CustomerType, "EnterpriseSales"), 30);
            //MoveToElement(driver, Control("ServiceProviderSelectionBtn", CustomerType, "EnterpriseSales"));

            //IWebElement New = Element(driver, Control("ServiceProviderSelectionBtn", CustomerType, "EnterpriseSales"));

            //IJavaScriptExecutor BVJ = (IJavaScriptExecutor)driver;
            //BVJ.ExecuteScript("arguments[0].click();", New);
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Broker entered", "Broker entered");

            saveFooter(driver, testInReport, testName, testDataIteration);

            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Created Contact", "Created Contact");

            return NewName;
        }

        public string CreateNewAccountWithCustomerTypeNew(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string CompanyName, string Time, string CustomerType, string Phoneobj, string Phone, string cityobj, string City, string countryobj)
        {
            ThinkTime(8);

            string NewName = CompanyName + Time;

            WaitUntil(driver, Control("CompanyNameField", "Accounts"), 30);
            Element(driver, Control("CompanyNameField", "Accounts")).Click();
            ThinkTime(3);
            Element(driver, Control("CompanyNameField", "Accounts")).SendKeys(NewName);
            ThinkTime(3);
            WaitUntil(driver, Control("PhoneAccountlabel1", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("PhoneAccountlabel1", "EnterpriseSales"));
            ThinkTime(3);
            ActionsClick(driver, Control("PhoneAccountlabel1", "EnterpriseSales"));
            ThinkTime(3);
            Element(driver, Control("PhoneAccountlabel1", "EnterpriseSales")).SendKeys(Phone);
            ThinkTime(3);

            scrollDownOpportunityEnterpriseCust(driver, testInReport, testName, testDataIteration, "600");
            ThinkTime(3);
            //scrollDownOpportunityPage(driver, testInReport, testName, testDataIteration);
            //ThinkTime(3);

            WaitUntil(driver, Control("Enterphoneaccount", cityobj, "EnterpriseSales"), 30);
            MoveToElement(driver, Control("Enterphoneaccount", cityobj, "EnterpriseSales"));
            ThinkTime(3);
            Element(driver, Control("Enterphoneaccount", cityobj, "EnterpriseSales")).SendKeys(City);
            ThinkTime(3);

            WaitUntil(driver, Control("Enterphoneaccount", countryobj, "EnterpriseSales"), 30);
            MoveToElement(driver, Control("Enterphoneaccount", countryobj, "EnterpriseSales"));
            ThinkTime(3);
            Element(driver, Control("Enterphoneaccount", countryobj, "EnterpriseSales")).SendKeys(Keys.Control + "a");

            Element(driver, Control("Enterphoneaccount", countryobj, "EnterpriseSales")).SendKeys(Keys.Delete);

            Element(driver, Control("Enterphoneaccount", countryobj, "EnterpriseSales")).SendKeys("UK");
            ThinkTime(3);
            MoveToElement(driver, Control("CustomerDropdownSelect", "ITSales"));
            Element(driver, Control("CustomerDropdownSelect", "ITSales")).Click();



            scrollDownOpportunityPage(driver, testInReport, testName, testDataIteration);
            ThinkTime(3);
            try
            {
                WaitUntil(driver, Control("ServiceProviderSelectionBtn", CustomerType, "EnterpriseSales"), 30);
                MoveToElement(driver, Control("ServiceProviderSelectionBtn", CustomerType, "EnterpriseSales"));
                IWebElement New = Element(driver, Control("ServiceProviderSelectionBtn", CustomerType, "EnterpriseSales"));

                IJavaScriptExecutor BVJ = (IJavaScriptExecutor)driver;
                BVJ.ExecuteScript("arguments[0].click();", New);
            }
            catch (Exception E)
            {

            }


            saveFooter(driver, testInReport, testName, testDataIteration);

            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Created Contact", "Created Contact");

            return NewName;
        }
        //Method to create new account with Customertype in enterprise sales.
        public string CreateNewAccountWithCustomerType1(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string CompanyName, string Time, string CustomerType, string Phoneobj, string Phone, string cityobj, string City, string countryobj)
        {
            ThinkTime(3);

            string NewName = CompanyName + Time;

            WaitUntil(driver, Control("CompanyNameField", "Accounts"), 30);
            Element(driver, Control("CompanyNameField", "Accounts")).Click();
            ThinkTime(3);
            Element(driver, Control("CompanyNameField", "Accounts")).SendKeys(NewName);

            scrollDownOpportunityPage(driver, testInReport, testName, testDataIteration);
            ThinkTime(3);
            scrollDownOpportunityPage(driver, testInReport, testName, testDataIteration);
            ThinkTime(3);
            WaitUntil(driver, Control("ServiceProviderSelectionBtn", CustomerType, "EnterpriseSales"), 30);
            MoveToElement(driver, Control("ServiceProviderSelectionBtn", CustomerType, "EnterpriseSales"));

            IWebElement New = Element(driver, Control("ServiceProviderSelectionBtn", CustomerType, "EnterpriseSales"));

            IJavaScriptExecutor BVJ = (IJavaScriptExecutor)driver;
            BVJ.ExecuteScript("arguments[0].click();", New);

            saveFooter(driver, testInReport, testName, testDataIteration);

            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Created Contact", "Created Contact");

            return NewName;
        }
        //Method to create new account with Customertype in enterprise sales for Broker.
        public string CreateNewAccountWithCustomerTypeBroker(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string CompanyName, string Time, string CustomerType)
        {
            ThinkTime(6);

            string NewName = CompanyName + Time;

            WaitUntil(driver, Control("CompanyNameField", "Accounts"), 30);
            MoveToElement(driver, Control("CompanyNameField", "Accounts"));
            ThinkTime(3);
            Element(driver, Control("CompanyNameField", "Accounts")).Clear();
            Element(driver, Control("CompanyNameField", "Accounts")).SendKeys(NewName);
            ThinkTime(5);
            WaitUntil(driver, Control("Numberfield", "Accounts"), 30);
            MoveToElement(driver, Control("Numberfield", "Accounts"));
            Element(driver, Control("Numberfield", "Accounts")).Clear();
            ThinkTime(3);
            Element(driver, Control("Numberfield", "Accounts")).SendKeys("+919995552225");
            ThinkTime(2);
            scrollDownOpportunityPage(driver, testInReport, testName, testDataIteration);
            scrollDownOpportunityPage(driver, testInReport, testName, testDataIteration);
            ThinkTime(3);
            WaitUntil(driver, Control("City", "Accounts"), 30);
            Element(driver, Control("City", "Accounts")).Clear();
            ThinkTime(3);
            Element(driver, Control("City", "Accounts")).SendKeys("Trv");
            ThinkTime(2);
            if (Elements(driver, Control("ScriptDialg", "Opportunity")) > 0)
            {
                Element(driver, Control("HandleScriptError", "Opportunity")).Click();
                ThinkTime(3);
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "No Script error present", "No Script error present");

            }

            ThinkTime(3);
            WaitUntil(driver, Control("CountryInput", "Accounts"), 30);
            MoveToElement(driver, Control("CountryInput", "Accounts"));
            Element(driver, Control("CountryInput", "Accounts")).Clear();
            Element(driver, Control("CountryInput", "Accounts")).SendKeys("India");
            WaitUntil(driver, Control("CountrySelect", "Accounts"), 30);
            MoveToElement(driver, Control("CountrySelect", "Accounts"));
            Element(driver, Control("CountrySelect", "Accounts")).Click();

            scrollDownOpportunityPage(driver, testInReport, testName, testDataIteration);
            ThinkTime(3);
            scrollDownOpportunityPage(driver, testInReport, testName, testDataIteration);
            ThinkTime(3);
            WaitUntil(driver, Control("ServiceProviderSelectionBtn", CustomerType, "EnterpriseSales"), 30);
            MoveToElement(driver, Control("ServiceProviderSelectionBtn", CustomerType, "EnterpriseSales"));

            IWebElement New = Element(driver, Control("ServiceProviderSelectionBtn", CustomerType, "EnterpriseSales"));

            IJavaScriptExecutor BVJ = (IJavaScriptExecutor)driver;
            BVJ.ExecuteScript("arguments[0].click();", New);

            saveFooter(driver, testInReport, testName, testDataIteration);

            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Created Contact", "Created Contact");

            return NewName;
        }

        public void FilterActivityStatusITeSales(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string status)
        {
            WaitUntil(driver, Control("Activityfilterdropdown", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("Activityfilterdropdown", "EnterpriseSales"));
            Element(driver, Control("Activityfilterdropdown", "EnterpriseSales")).Click();

            Element(driver, Control("Activityfilterinput", "EnterpriseSales")).SendKeys(status);
            ActionsClick(driver, Control("Applybutton", "EnterpriseSales"));
        }

        //method to filter Activity
        public void FilterActivityTypeEnterpriseSales(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string ActivityType)
        {
            WaitUntil(driver, Control("ActivityTypeFilterButton", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("ActivityTypeFilterButton", "EnterpriseSales"));
            Element(driver, Control("ActivityTypeFilterButton", "EnterpriseSales")).Click();

            WaitUntil(driver, Control("SelectAllButton", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("SelectAllButton", "EnterpriseSales"));
            Element(driver, Control("SelectAllButton", "EnterpriseSales")).Click();

            WaitUntil(driver, Control("SelectActivityType", ActivityType, "EnterpriseSales"), 30);
            MoveToElement(driver, Control("SelectActivityType", ActivityType, "EnterpriseSales"));
            Element(driver, Control("SelectActivityType", ActivityType, "EnterpriseSales")).Click();

            WaitUntil(driver, Control("ApplyButtonFilter", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("ApplyButtonFilter", "EnterpriseSales"));
            Element(driver, Control("ApplyButtonFilter", "EnterpriseSales")).Click();

            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Filtered Activity Type", "Filter");
        }

        //method Verify Field
        public void VerifyActivityEditableEnterpriseSales(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string Subject)
        {

            WaitUntil(driver, Control("ActivitySubject", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("ActivitySubject", "EnterpriseSales"));
            Element(driver, Control("ActivitySubject", "EnterpriseSales")).SendKeys(Keys.Control + "a");
            Element(driver, Control("ActivitySubject", "EnterpriseSales")).SendKeys(Keys.Delete);
            Element(driver, Control("ActivitySubject", "EnterpriseSales")).SendKeys(Subject);
            Element(driver, Control("ActivitySubjectClick", "EnterpriseSales")).Click();

            saveFooter(driver, testInReport, testName, testDataIteration);

            string GetSubject = Element(driver, Control("ActivitySubject", "EnterpriseSales")).GetAttribute("defaultValue");

            if (GetSubject == Subject)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Subject field in activity is editable", "Activity editable Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Subject field in activity not editable", "Activity editable Verification");
                Assert.Fail("Acitivity edit verification failed");
            }
        }


        public void VerifyAccounteditableED(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string Phone)
        {

            ThinkTime(7);
            MoveToElement(driver, Control("Phonefield1", "Accounts"));
            Element(driver, Control("Phonefield1", "Accounts")).SendKeys(Keys.Control + "a");
            Element(driver, Control("Phonefield1", "Accounts")).SendKeys(Keys.Delete);
            Element(driver, Control("Phonefield1", "Accounts")).SendKeys(Phone);

            saveFooter(driver, testInReport, testName, testDataIteration);

            string GetSubject = Element(driver, Control("AccountPhoneverify", Phone, "Accounts")).GetAttribute("defaultValue");

            if (GetSubject == Phone)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Phone field in activity is editable", "Account editable Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Phone field in activity not editable", "Account editable Verification");
                Assert.Fail("Account edit verification failed");
            }


        }
        //method Verify shared Activity fields are editable.

        public void VerifySharedActivityEditableEnterpriseSales(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string PhoneNumber)
        {

            WaitUntil(driver, Control("PhoneNumberField", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("PhoneNumberField", "EnterpriseSales"));
            Element(driver, Control("PhoneNumberField", "EnterpriseSales")).SendKeys(Keys.Control + "a");
            Element(driver, Control("PhoneNumberField", "EnterpriseSales")).SendKeys(Keys.Delete);
            Element(driver, Control("PhoneNumberField", "EnterpriseSales")).SendKeys(PhoneNumber);
            Element(driver, Control("PhoneNumberField", "EnterpriseSales")).Click();

            saveFooter(driver, testInReport, testName, testDataIteration);

            string GetPhoneNumber = Element(driver, Control("PhoneNumberField", "EnterpriseSales")).GetAttribute("defaultValue");

            if (GetPhoneNumber == PhoneNumber)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Phone Number field in activity is editable", "Activity editable Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Phone Number field in activity is editable", "Activity editable Verification");
                Assert.Fail("Acitivity edit verification failed");
            }
        }

        public string Activityregardingvaluefromsearchresults(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {
            string value = Element(driver, Control("Regardingvalue", "Generic")).GetAttribute("title");
            return value;
        }

        public void VerifySharedActivityEditable1(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string Subject)
        {
            ThinkTime(3);
            //WaitUntil(driver, Control("Subject", "Generic"), 360);
            //MoveToElement(driver, Control("Subject", "Generic"));
            //Element(driver, Control("Subject", "Generic")).Click();
            //Element(driver, Control("Subject", "Generic")).SendKeys(Subject);
            ThinkTime(3);
            WaitUntil(driver, Control("PhoneCallSubject", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("PhoneCallSubject", "EnterpriseSales"));
            ThinkTime(3);
            Element(driver, Control("PhoneCallSubject", "EnterpriseSales")).SendKeys(Keys.Control + "a");
            Element(driver, Control("PhoneCallSubject", "EnterpriseSales")).SendKeys(Keys.Delete);
            ThinkTime(3);
            Element(driver, Control("PhoneCallSubject", "EnterpriseSales")).SendKeys(Subject);


            ThinkTime(3);
            saveFooter(driver, testInReport, testName, testDataIteration);
            ThinkTime(10);
            //string Newsubject = Element(driver, Control("Subject", "Generic")).GetAttribute("defaultValue");
            string Newsubject = Element(driver, Control("PhoneCallSubject", "EnterpriseSales")).GetAttribute("defaultValue");
            if (Newsubject == Subject)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Contact field is Updated", "Activity Read edit verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Unable Edit contact field", "Activity read edit verification");
                Assert.Fail("Acitivity Read edit verification failed");
            }
        }





        //method to verify Shared activity field is editable.
        public void VerifySharedActivityEditable(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string Lname, string Language)
        {
            WaitUntil(driver, Control("ActivityContactLabel", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("ActivityContactLabel", "EnterpriseSales"));

            MoveToElement(driver, Control("ActivityContactCloseButton", "EnterpriseSales"));
            Element(driver, Control("ActivityContactCloseButton", "EnterpriseSales")).Click();

            MoveToElement(driver, Control("ActivityContactInputClick", "EnterpriseSales"));
            Element(driver, Control("ActivityContactInputClick", "EnterpriseSales")).Click();

            WaitUntil(driver, Control("ActivityNewContact", "EnterpriseSales"), 360);
            MoveToElement(driver, Control("ActivityNewContact", "EnterpriseSales"));
            Element(driver, Control("ActivityNewContact", "EnterpriseSales")).Click();

            WaitUntil(driver, Control("ActivityNewContactLabel", "EnterpriseSales"), 360);
            MoveToElement(driver, Control("ActivityNewContactLabel", "EnterpriseSales"));
            Element(driver, Control("ActivityNewContactLabel", "EnterpriseSales")).Click();

            ThinkTime(8);
            WaitUntil(driver, Control("ActivityLastNameInput", "EnterpriseSales"), 360);
            MoveToElement(driver, Control("ActivityLastNameInput", "EnterpriseSales"));
            Element(driver, Control("ActivityLastNameInput", "EnterpriseSales")).Click();
            Element(driver, Control("ActivityLastNameInput", "EnterpriseSales")).SendKeys(Lname);
            ThinkTime(3);
            MoveToElement(driver, Control("ActivityCreateContactInput", "EnterpriseSales"));
            Element(driver, Control("ActivityCreateContactInput", "EnterpriseSales")).Click();
            Element(driver, Control("ActivityCreateContactInput", "EnterpriseSales")).SendKeys(Language);

            ThinkTime(3);

            WaitUntil(driver, Control("ContactLanguageDropdownSelect", "EnterpriseSales"), 360);
            MoveToElement(driver, Control("ContactLanguageDropdownSelect", "EnterpriseSales"));
            Element(driver, Control("ContactLanguageDropdownSelect", "EnterpriseSales")).Click();

            WaitUntil(driver, Control("ActivitySaveContactField", "EnterpriseSales"), 360);
            MoveToElement(driver, Control("ActivitySaveContactField", "EnterpriseSales"));
            Element(driver, Control("ActivitySaveContactField", "EnterpriseSales")).Click();

            ThinkTime(5);
            WaitUntil(driver, Control("ActivityContactLabel", "EnterpriseSales"), 360);
            string NewContactName = Element(driver, Control("ActivityContactLabel", "EnterpriseSales")).GetAttribute("innerText");

            if (Lname == NewContactName)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Contact field is Updated", "Activity Read edit verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Unable Edit contact field", "Activity read edit verification");
                Assert.Fail("Acitivity Read edit verification failed");
            }
        }

        //Method to verify Contact editable.
        public void VerifyContactEditableEnterprise(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string NewEmail)
        {
            ThinkTime(5);


            WaitUntil(driver, Control("ContactEmail", "EnterpriseSales"), 120);
            MoveToElement(driver, Control("ContactEmail", "EnterpriseSales"));
            Element(driver, Control("ContactEmail", "EnterpriseSales")).SendKeys(Keys.Control + "a");
            Element(driver, Control("ContactEmail", "EnterpriseSales")).SendKeys(Keys.Delete);
            Element(driver, Control("ContactEmail", "EnterpriseSales")).SendKeys(NewEmail);
            ThinkTime(3);
            saveFooter(driver, testInReport, testName, testDataIteration);

            ThinkTime(3);

            string UpdatedEmail = Element(driver, Control("ContactEmail", "EnterpriseSales")).GetAttribute("defaultValue");
            ThinkTime(3);
            if (NewEmail == UpdatedEmail)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Email Updated Successfully", "Contact Updation Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Unable to Update Email", "Contact Updation Verification");
                Assert.Fail("Contact Updation Verification Failed");
            }
        }
        //Method to verify Contact editable.
        public void VerifyContactEditableITSalesUser(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string FirstName, string LastName, string Language, string CompanyAccount)
        {
            ThinkTime(10);
            Console.WriteLine("pass");
            string firstname = Element(driver, Control("FirstName", "Contacts")).GetAttribute("defaultValue");
            Console.WriteLine(firstname);
            if (firstname == "---")
            {
                WaitUntil(driver, Control("FirstName", "Contacts"), 30);
                MoveToElement(driver, Control("FirstName", "Contacts"));
                Element(driver, Control("FirstName", "Contacts")).SendKeys(FirstName);

                WaitUntil(driver, Control("LastName", "Contacts"), 30);
                MoveToElement(driver, Control("LastName", "Contacts"));
                Element(driver, Control("LastName", "Contacts")).SendKeys(LastName);

                //WaitUntil(driver, Control("ContactAccountField", "EnterpriseSales"), 30);
                //MoveToElement(driver, Control("ContactAccountField", "EnterpriseSales"));
                //Element(driver, Control("ContactAccountField", "EnterpriseSales")).SendKeys(CompanyAccount);
                //scrollDownOpportunityEnterprise(driver, testInReport, testDataIteration, testName);
                ThinkTime(5);
                WaitUntil(driver, Control("NewContactInput", "Contacts"), 30);
                MoveToElement(driver, Control("NewContactInput", "Contacts"));
                Element(driver, Control("NewContactSearchButton", "Contacts")).Click();

                ThinkTime(5);
                WaitUntil(driver, Control("accountname", "Contacts"), 30);
                MoveToElement(driver, Control("accountname", "Contacts"));
                Element(driver, Control("accountname", "Contacts")).Click();
                Element(driver, Control("accountname", "Contacts")).SendKeys("APEX Legends");
                ThinkTime(3);


                //WaitUntil(driver, Control("ITSalesCustomer", "Opportunity"), 30);
                //MoveToElement(driver, Control("ITSalesCustomer", "Opportunity"));
                //Element(driver, Control("ITSalesCustomer", "Opportunity")).Click();


                //WaitUntil(driver, Control("SaveContactButton", "Generic"), 30);
                //MoveToElement(driver, Control("SaveContactButton", "Generic"));
                //Element(driver, Control("SaveContactButton", "Generic")).Click();

                ThinkTime(7);


                //WaitUntil(driver, Control("ContactLanguage", "EnterpriseSales"), 70);
                //MoveToElement(driver, Control("ContactLanguage", "EnterpriseSales"));
                //Element(driver, Control("ContactLanguage", "EnterpriseSales")).SendKeys("Uk english");

                //ThinkTime(3);

                //MoveToElement(driver, Control("ContactLanguageDropdownSelect", "EnterpriseSales"));
                //Element(driver, Control("ContactLanguageDropdownSelect", "EnterpriseSales")).Click();

            }
            else
            {
                WaitUntil(driver, Control("FirstName", "Contacts"), 30);
                MoveToElement(driver, Control("FirstName", "Contacts"));
                Element(driver, Control("FirstName", "Contacts")).SendKeys(Keys.Control + "a");
                Element(driver, Control("FirstName", "Contacts")).SendKeys(Keys.Delete);
                Element(driver, Control("FirstName", "Contacts")).SendKeys(FirstName);

                WaitUntil(driver, Control("LastName", "Contacts"), 30);
                MoveToElement(driver, Control("LastName", "Contacts"));
                Element(driver, Control("LastName", "Contacts")).SendKeys(Keys.Control + "a");
                Element(driver, Control("LastName", "Contacts")).SendKeys(Keys.Delete);
                Element(driver, Control("LastName", "Contacts")).SendKeys(LastName);
            }
            saveFooter(driver, testInReport, testName, testDataIteration);

            ThinkTime(3);


        }



        //Method to method to verify Contact editable.
        public void VerifyContactEditableITSalesUserNew(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {
            ThinkTime(4);

            WaitUntil(driver, Control("EDContactLnameInput", "SharePoint"), 30);
            MoveToElement(driver, Control("EDContactLnameInput", "SharePoint"));
            Element(driver, Control("EDContactLnameInput", "SharePoint")).Click();
            Element(driver, Control("EDContactLnameInput", "SharePoint")).SendKeys("TestContactEditable");

            if (Elements(driver, Control("EDContactAccountLabel", "SharePoint")) > 0)
            {
                MoveToElement(driver, Control("EDContactAccountLabel", "SharePoint"));

                WaitUntil(driver, Control("EDContactAccountLabelDelete", "SharePoint"), 30);
                Element(driver, Control("EDContactAccountLabelDelete", "SharePoint")).Click();

                Element(driver, Control("EDContactAccountLabelInput", "SharePoint")).Click();
                Element(driver, Control("EDContactAccountLabelInput", "SharePoint")).SendKeys("APEX Legends");

                ThinkTime(2);
                WaitUntil(driver, Control("CustomerDropdownSelect", "ITSales"), 30);
                Element(driver, Control("CustomerDropdownSelect", "ITSales")).Click();


            }

            else
            {
                Element(driver, Control("EDContactAccountLabelInput", "SharePoint")).Click();
                Element(driver, Control("EDContactAccountLabelInput", "SharePoint")).SendKeys("APEX Legends");

                Element(driver, Control("SearchButtonFIeld", "SharePoint")).Click();
                ThinkTime(15);
                Element(driver, Control("SelectValueDropDown", "SharePoint")).Click();
            }
            ThinkTime(4);

            saveFooter(driver, testInReport, testName, testDataIteration);
            saveFooter(driver, testInReport, testName, testDataIteration);
            if (Elements(driver, Control("EDContactAccountLabel", "SharePoint")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Contact is editable", "Contact editable verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Contact is not editable", "Contact editable verification");
                Assert.Fail("Contact verification failed");
            }

        }

        //method to Navigate to D&B tab and verify fields/
        public void NavigateDBTabAndVerifyFields(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {
            ThinkTime(3);

            WaitUntil(driver, Control("DandBButton", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("DandBButton", "EnterpriseSales"));
            Element(driver, Control("DandBButton", "EnterpriseSales")).Click();

            ThinkTime(3);
            driver.SwitchTo().DefaultContent();
            SwitchToFrame(driver, "WebResource_BusinessProfileViewer");

            //Verify Bussiness Name Field.

            if (Elements(driver, Control("BussinessNameField", "EnterpriseSales")) > 0)
            {
                ElementHighlight(driver, Control("BussinessNameField", "EnterpriseSales"));
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Bussiness Name field is verified", "D&B field verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Bussiness Name filed is not visible", "D&Bfield verification");
                Assert.Fail("Bussiness Name field Verification Failed");
            }

            //Verify D-U-N-S Number field.

            if (Elements(driver, Control("DUNSNumberField", "EnterpriseSales")) > 0)
            {
                ElementHighlight(driver, Control("DUNSNumberField", "EnterpriseSales"));
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "D-U-N-S Number field is verified", "D&B field verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "D-U-N-S Number filed is not visible", "D&Bfield verification");
                Assert.Fail("D-U-N-S Number field Verification Failed");
            }

            //verify Sales Volume USD field.

            if (Elements(driver, Control("SalesVolumeUSDField", "EnterpriseSales")) > 0)
            {
                ElementHighlight(driver, Control("SalesVolumeUSDField", "EnterpriseSales"));
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Sales Volume USD field is verified", "D&B field verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Sales Volume USD filed is not visible", "D&Bfield verification");
                Assert.Fail("Sales Volume USD field Verification Failed");
            }

            //Verify Location Type field

            if (Elements(driver, Control("LocationTypeField", "EnterpriseSales")) > 0)
            {
                ElementHighlight(driver, Control("LocationTypeField", "EnterpriseSales"));
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Location Type field is verified", "D&B field verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Location Type filed is not visible", "D&Bfield verification");
                Assert.Fail("Location Type field Verification Failed");
            }

            //Verify Location Type field

            if (Elements(driver, Control("LocationTypeField", "EnterpriseSales")) > 0)
            {
                ElementHighlight(driver, Control("LocationTypeField", "EnterpriseSales"));
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Location Type field is verified", "D&B field verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Location Type filed is not visible", "D&Bfield verification");
                Assert.Fail("Location Type field Verification Failed");
            }



            //Verify Opted out of Direct Marketing fields.

            if (Elements(driver, Control("OptedoutofDirectMarketingField", "EnterpriseSales")) > 0)
            {
                ElementHighlight(driver, Control("OptedoutofDirectMarketingField", "EnterpriseSales"));
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Opted out of Direct Marketing field is verified", "D&B field verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Opted out of Direct Marketing filed is not visible", "D&Bfield verification");
                Assert.Fail("Opted out of Direct Marketing field Verification Failed");
            }

            //Verify Public Private Indicator fileds

            if (Elements(driver, Control("PublicPrivateIndicatorFields", "EnterpriseSales")) > 0)
            {
                ElementHighlight(driver, Control("PublicPrivateIndicatorFields", "EnterpriseSales"));
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Public Private Indicator field is verified", "D&B field verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Public Private Indicator filed is not visible", "D&Bfield verification");
                Assert.Fail("Public Private Indicator field Verification Failed");
            }

            //Verify SIC8 Code 1 fields.

            if (Elements(driver, Control("SIC8Code1Fields", "EnterpriseSales")) > 0)
            {
                ElementHighlight(driver, Control("SIC8Code1Fields", "EnterpriseSales"));
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SIC8 Code 1 field is verified", "D&B field verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SIC8 Code 1 filed is not visible", "D&Bfield verification");
                Assert.Fail("SIC8 Code 1 field Verification Failed");
            }

            //Verify SIC8 Code 1 Description fields.

            if (Elements(driver, Control("SIC8Code1DescriptionFields", "EnterpriseSales")) > 0)
            {
                ElementHighlight(driver, Control("SIC8Code1DescriptionFields", "EnterpriseSales"));
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "SIC8 Code 1 Description field is verified", "D&B field verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "SIC8 Code 1 Description filed is not visible", "D&Bfield verification");
                Assert.Fail("SIC8 Code 1 Description field Verification Failed");
            }

            //Verify Employee Count Here fields.

            if (Elements(driver, Control("EmployeeCountHereFields", "EnterpriseSales")) > 0)
            {
                ElementHighlight(driver, Control("EmployeeCountHereFields", "EnterpriseSales"));
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Employee Count Here field is verified", "D&B field verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Employee Count Here filed is not visible", "D&Bfield verification");
                Assert.Fail("Employee Count Here field Verification Failed");
            }

            //Verify Employee Count Total fields.

            if (Elements(driver, Control("EmployeeCountTotalFields", "EnterpriseSales")) > 0)
            {
                ElementHighlight(driver, Control("EmployeeCountTotalFields", "EnterpriseSales"));
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Employee Count Total field is verified", "D&B field verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Employee Count Total filed is not visible", "D&Bfield verification");
                Assert.Fail("Employee Count Total field Verification Failed");
            }

            //Verify Global Ultimate D-U-N-S Number fields.

            if (Elements(driver, Control("GlobalUltimateDUNSNumberFields", "EnterpriseSales")) > 0)
            {
                ElementHighlight(driver, Control("GlobalUltimateDUNSNumberFields", "EnterpriseSales"));
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Global Ultimate D-U-N-S Number field is verified", "D&B field verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Global Ultimate D-U-N-S Number filed is not visible", "D&Bfield verification");
                Assert.Fail("Global Ultimate D-U-N-S Number field Verification Failed");
            }

            //Verify Global Ultimate Business Name fields.

            if (Elements(driver, Control("GlobalUltimateBusinessNameField", "EnterpriseSales")) > 0)
            {
                ElementHighlight(driver, Control("GlobalUltimateBusinessNameField", "EnterpriseSales"));
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Global Ultimate Business Name field is verified", "D&B field verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Global Ultimate Business Name filed is not visible", "D&Bfield verification");
                Assert.Fail("Global Ultimate Business Name field Verification Failed");
            }

            //Verify Domestic Ultimate D-U-N-S Number fields.

            if (Elements(driver, Control("DomesticUltimateDUNSNumberField", "EnterpriseSales")) > 0)
            {
                ElementHighlight(driver, Control("DomesticUltimateDUNSNumberField", "EnterpriseSales"));
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Domestic Ultimate D-U-N-S Number field is verified", "D&B field verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Domestic Ultimate D-U-N-S Number filed is not visible", "D&Bfield verification");
                Assert.Fail("Domestic Ultimate D-U-N-S Number field Verification Failed");
            }

            //Verify Domestic Ultimate Business Name fields.

            if (Elements(driver, Control("DomesticUltimateBusinessNameField", "EnterpriseSales")) > 0)
            {
                ElementHighlight(driver, Control("DomesticUltimateBusinessNameField", "EnterpriseSales"));
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Domestic Ultimate Business Name field is verified", "D&B field verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Domestic Ultimate Business Name filed is not visible", "D&Bfield verification");
                Assert.Fail("Domestic Ultimate Business Name field Verification Failed");
            }

            //Verify Parent D-U-N-S Number fields.

            if (Elements(driver, Control("DomesticUltimateBusinessNameField", "EnterpriseSales")) > 0)
            {
                ElementHighlight(driver, Control("DomesticUltimateBusinessNameField", "EnterpriseSales"));
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Parent D-U-N-S Number field is verified", "D&B field verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Parent D-U-N-S Number filed is not visible", "D&Bfield verification");
                Assert.Fail("Parent D-U-N-S Number field Verification Failed");
            }

            //Verify Parent Business Name fields.

            if (Elements(driver, Control("ParentBusinessNameField", "EnterpriseSales")) > 0)
            {
                ElementHighlight(driver, Control("ParentBusinessNameField", "EnterpriseSales"));
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Parent Business Name field is verified", "D&B field verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Parent Business Name filed is not visible", "D&Bfield verification");
                Assert.Fail("Parent Business Name field Verification Failed");
            }

        }


        //method to search a record by global search for accoun

        public void RecordGlobalSearchopportunity(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string Account)
        {
            ThinkTime(8);

            WaitUntil(driver, Control("GlobalSearchInput", "EnterpriseSales"), 60);
            MoveToElement(driver, Control("GlobalSearchInput", "EnterpriseSales"));
            Element(driver, Control("GlobalSearchInput", "EnterpriseSales")).SendKeys(Account);
            Element(driver, Control("GlobalSearchButton", "EnterpriseSales")).Click();
            ThinkTime(8);
            WaitUntil(driver, Control("SelectAccount", "EnterpriseSales"), 180);
            MoveToElement(driver, Control("SelectRecord", "EnterpriseSales"));
            Element(driver, Control("SelectRecord", "EnterpriseSales")).Click();

        }

        //method to select active contact from dropdown

        public void ActiveContactSelect(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {
            ThinkTime(8);

            WaitUntil(driver, Control("ContactDropdown", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("ContactDropdown", "EnterpriseSales"));
            Element(driver, Control("ContactDropdown", "EnterpriseSales")).Click();
            ThinkTime(3);
            MoveToElement(driver, Control("ActiveContact", "EnterpriseSales"));
            Element(driver, Control("ActiveContact", "EnterpriseSales")).Click();

        }

        //method to open a record by global search for account.

        public void OpenRecordGlobalSearch(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string Account)
        {
            ThinkTime(3);

            WaitUntil(driver, Control("GlobalSearchInput", "EnterpriseSales"), 120);
            Element(driver, Control("GlobalSearchInput", "EnterpriseSales")).Click();
            Element(driver, Control("GlobalSearchInput", "EnterpriseSales")).SendKeys(Account);
            //Element(driver, Control("GlobalSearchButton", "EnterpriseSales")).Click();
            ThinkTime(3);
            Element(driver, Control("GlobalSearchInput", "EnterpriseSales")).SendKeys(Keys.Enter);

            SelectingActiveAccountEnterpriseSales(driver, testInReport, testName, testDataIteration);

            ThinkTime(4);

        }

        public void OpenRecordGlobalSearchLead(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string Account)
        {
            ThinkTime(2);

            WaitUntil(driver, Control("GlobalSearchInput", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("GlobalSearchInput", "EnterpriseSales"));
            Element(driver, Control("GlobalSearchInput", "EnterpriseSales")).SendKeys(Account);
            //Element(driver, Control("GlobalSearchButton", "EnterpriseSales")).Click();
            Element(driver, Control("GlobalSearchInput", "EnterpriseSales")).SendKeys(Keys.Enter);
            ThinkTime(2);
            SelectingActiveLead(driver, testInReport, testName, testDataIteration);

            ThinkTime(4);

        }
        public void OpenRecordGlobalSearchLeadCust(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string Account)
        {
            ThinkTime(2);

            WaitUntil(driver, Control("GlobalSearchInput", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("GlobalSearchInput", "EnterpriseSales"));
            Element(driver, Control("GlobalSearchInput", "EnterpriseSales")).SendKeys(Account);
            //Element(driver, Control("GlobalSearchButton", "EnterpriseSales")).Click();
            Element(driver, Control("GlobalSearchInput", "EnterpriseSales")).SendKeys(Keys.Enter);
            ThinkTime(2);
            SelectingActiveLeadCust(driver, testInReport, testName, testDataIteration, Account);

            ThinkTime(4);

        }



        //method to change start date.
        public void UpdateStartDate(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string Month, string Date)
        {
            //scrollUpPage(driver, testInReport, testName, testDataIteration);

            //ThinkTime(3);

            //scrollUpPage(driver, testInReport, testName, testDataIteration);

            ThinkTime(2);
            WaitUntil(driver, Control("Startdate", "Opportunity"), 30);
            MoveToElement(driver, Control("Startdate", "Opportunity"));

            Element(driver, Control("Startdate", "Opportunity")).SendKeys(Keys.Control + "a");
            Element(driver, Control("Startdate", "Opportunity")).SendKeys(Keys.Delete);
            ThinkTime(3);
            Element(driver, Control("Startdate", "Opportunity")).SendKeys("5/26/2020");

            //WaitUntil(driver, Control("Updatedate", "BookATour"), 30);

            //MoveToElement(driver, Control("Updatedate", "BookATour"));
            //Element(driver, Control("Updatedate", "BookATour")).Click();

            //ThinkTime(3);

            //WaitUntil(driver, Control("StartButtonYear", "BookATour"), 30);
            //MoveToElement(driver, Control("StartButtonYear", "BookATour"));
            //Element(driver, Control("StartButtonYear", "BookATour")).Click();

            //ThinkTime(3);

            //WaitUntil(driver, Control("StartButtonMonth", Month, "BookATour"), 30);
            //MoveToElement(driver, Control("StartButtonMonth", Month, "BookATour"));
            //Element(driver, Control("StartButtonMonth", Month, "BookATour")).Click();

            //ThinkTime(3);

            //WaitUntil(driver, Control("StartButtonDate", Date, "BookATour"), 30);
            //MoveToElement(driver, Control("StartButtonDate", Date, "BookATour"));
            //Element(driver, Control("StartButtonDate", Date, "BookATour")).Click();
            ThinkTime(3);
            saveFooter(driver, testInReport, testName, testDataIteration);
            ThinkTime(10);

        }
        //method to verify book a tour on out of office hour.
        public void VerifyBookaTourOutOfOfficeHour(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {
            ThinkTime(3);


            driver.SwitchTo().DefaultContent();
            string parentWindowHandle = driver.CurrentWindowHandle;
            WindowHandling(driver);
            //WindowHandling(driver);
            driver.Manage().Window.Maximize();

            ThinkTime(3);

            WaitUntil(driver, Control("OutOfOfficeView", "BookATour"), 30);
            MoveToElement(driver, Control("OutOfOfficeView", "BookATour"));
            ElementHighlight(driver, Control("OutOfOfficeView", "BookATour"));
            Element(driver, Control("OutOfOfficeView", "BookATour")).Click();

            ThinkTime(3);
            ElementHighlight(driver, Control("OutOfOfficeView", "BookATour"));
            if (Elements(driver, Control("OutOfOfficeVerification", "BookATour")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Out of office time for ASM Verified successfully", "Out Of Office Hour verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Out Of Office time for ASM Varification failed", "Out Of Office Hour verification");
                //Assert.Fail("Out Of Office Hour verification Failed");
            }
            ThinkTime(2);
            driver.Close();

            WindowHandling(driver, parentWindowHandle);
        }




        //method to verify book a tour on out of office hour.
        public void Bookatourcalender(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {
            ThinkTime(10);
            MoveToElement(driver, Control("BookTrButton1", "BookATour"));
            ElementHighlight(driver, Control("BookTrButton1", "BookATour"));
            Element(driver, Control("BookTrButton1", "BookATour")).Click();
            ThinkTime(15);




            driver.SwitchTo().DefaultContent();
            string parentWindowHandle = driver.CurrentWindowHandle;
            WindowHandling(driver);
            //string parentWindowHandle1 = driver.CurrentWindowHandle;
            //WindowHandling(driver);
            //driver.Manage().Window.Maximize();
            ThinkTime(5);
            MoveToElement(driver, Control("ForwardButton", "Generic"));
            ElementHighlight(driver, Control("ForwardButton", "Generic"));
            Element(driver, Control("ForwardButton", "Generic")).Click();
            ThinkTime(5);
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Click on the forward button", "Click on the forward button");

            ThinkTime(10);
            driver.Close();

            WindowHandling(driver, parentWindowHandle);
        }

        //method to verify book a tour on out of office hour.
        public void Clickonthecalenderview(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {

            SwitchToFrame(driver, "ff055ff7-10a3-4311-a80f-f4175462c1a2_WebResource_tourManagementLink");

            MoveToElement(driver, Control("CalenderWindow", "Dashboards"));
            Element(driver, Control("CalenderWindow", "Dashboards")).Click();



            // driver.SwitchTo().DefaultContent();
            string parentWindowHandle = driver.CurrentWindowHandle;
            WindowHandling(driver);
            string parentWindowHandle1 = driver.CurrentWindowHandle;
            WindowHandling(driver);
            driver.Manage().Window.Maximize();
            ThinkTime(5);


            //driver.Close();

            //WindowHandling(driver, parentWindowHandle);
        }

        //Method to clear record in email activity.
        public void ClearRecordinEmailActivity(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string To, string Cc, string Bcc)
        {
            ThinkTime(7);




            if (Elements(driver, Control("GetContactEmailActivity", To, "ITSales")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "To Field Close Button Click", "Clear data verification");
                MoveToElement(driver, Control("GetContactEmailActivity", To, "ITSales"));
                Element(driver, Control("ToDataCloseButton", "ITSales")).Click();
                ThinkTime(3);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "To Field Close Button Click", "Clear data verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "To Field Close Button Click failed ", "Clear data verification");

            }


            if (Elements(driver, Control("GetContactEmailActivity", Cc, "ITSales")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Cc Field Close Button Click", "Clear data verification");
                MoveToElement(driver, Control("GetContactEmailActivity", Cc, "ITSales"));
                Element(driver, Control("CcDataCloseButton", "ITSales")).Click();
                ThinkTime(3);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Cc Field Close Button Click", "Clear data verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Cc Field Close Button Click failed ", "Clear data verification");

            }


            if (Elements(driver, Control("GetContactEmailActivity", Bcc, "ITSales")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Bcc Field Close Button Click", "Clear data verification");
                MoveToElement(driver, Control("GetContactEmailActivity", Bcc, "ITSales"));
                Element(driver, Control("BccDataCloseButton", "ITSales")).Click();
                ThinkTime(3);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Bcc Field Close Button Click", "Clear data verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Bcc Field Close Button Click failed ", "Clear data verification");

            }


        }


        //Method to quick create contact in IT sales Email To Field.
        public void QuickCreateContactToEmail(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(3);

            WaitUntil(driver, Control("ToFieldInputEmail", "ITSales"), 30);
            Element(driver, Control("ToFieldInputEmail", "ITSales")).Click();

            WaitUntil(driver, Control("ToFieldSearchMoreButton", "ITSales"), 30);
            Element(driver, Control("ToFieldSearchMoreButton", "ITSales")).Click();

            WaitUntil(driver, Control("ToFieldNewRecord", "ITSales"), 30);
            Element(driver, Control("ToFieldNewRecord", "ITSales")).Click();

            WaitUntil(driver, Control("ToFieldNewContactButton", "ITSales"), 30);
            Element(driver, Control("ToFieldNewContactButton", "ITSales")).Click();


        }


        //Method to quick create contact in IT sales Phone To Field.
        public void QuickCreateContactToPhone(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(3);

            WaitUntil(driver, Control("ToFieldInputPhone", "ITSales"), 30);
            Element(driver, Control("ToFieldInputPhone", "ITSales")).Click();
            ThinkTime(2);
            WaitUntil(driver, Control("ToFieldSearchMoreButton", "ITSales"), 30);
            Element(driver, Control("ToFieldSearchMoreButton", "ITSales")).Click();
            ThinkTime(2);
            WaitUntil(driver, Control("ToFieldNewRecord", "ITSales"), 30);
            Element(driver, Control("ToFieldNewRecord", "ITSales")).Click();
            ThinkTime(2);
            WaitUntil(driver, Control("ToFieldNewContactButton", "ITSales"), 30);
            Element(driver, Control("ToFieldNewContactButton", "ITSales")).Click();


        }



        //Method to search and verify Get Contact From Emial Activity.
        public string GetContactNameEmailActivity(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string Variable)
        {
            ThinkTime(3);

            WaitUntil(driver, Control("GetContactEmailActivity", Variable, "ITSales"), 30);

            string ContactName = Element(driver, Control("GetContactEmailActivity", Variable, "ITSales")).GetAttribute("title");

            return ContactName;
        }


        //Method to Discard  save button.
        public void DiscardSaveButton(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(3);

            if (Elements(driver, Control("DiscardSaveButton", "ITSales")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Ignore and Save pop up displayed", "Ignore and save");
                Element(driver, Control("DiscardSaveButton", "ITSales")).Click();
                ThinkTime(3);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Ignore and Save pop up closed", "Ignore and save closed");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Pop Up element button is not visible ", "Not clicked correctly");
                Assert.Fail("Issue on finding the Pop Up element");
            }


        }

        //Method to click header button.
        public void HeaderButtonClickActivities(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string headerBtn)
        {

            driver.SwitchTo().DefaultContent();
            WaitUntil(driver, Control("ITSalesActivityHeaderButton", headerBtn, "ITSales"), 30);
            MoveToElement(driver, Control("ITSalesActivityHeaderButton", headerBtn, "ITSales"));
            Element(driver, Control("ITSalesActivityHeaderButton", headerBtn, "ITSales")).Click();
            ThinkTime(4);
            AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Header button is clicked", "");
        }


        //Method to qick create contact in IT sales Email Cc Field.
        public void QuickCreateContactCcEmail(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(3);
            Element(driver, Control("ToFieldInputEmail", "ITSales")).SendKeys(Keys.Escape);
            ThinkTime(3);
            WaitUntil(driver, Control("CcFieldInputEmail", "ITSales"), 30);
            Element(driver, Control("CcFieldInputEmail", "ITSales")).Click();

            WaitUntil(driver, Control("CcFieldSearchMoreButton", "ITSales"), 30);
            Element(driver, Control("CcFieldSearchMoreButton", "ITSales")).Click();

            WaitUntil(driver, Control("ToFieldNewRecord", "ITSales"), 30);
            Element(driver, Control("ToFieldNewRecord", "ITSales")).Click();

            WaitUntil(driver, Control("ToFieldNewContactButton", "ITSales"), 30);
            Element(driver, Control("ToFieldNewContactButton", "ITSales")).Click();



        }

        public void ClearBrowserCache(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            driver.Manage().Cookies.DeleteAllCookies(); //delete all cookies
            Thread.Sleep(7000); //wait 7 seconds to clear cookies.
        }

        //Method to quick create conntact in IT Sales Email Bcc Field.
        public void QuickCreateContactBCcEmail(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(3);

            WaitUntil(driver, Control("BCcFieldInputEmail", "ITSales"), 30);
            Element(driver, Control("BCcFieldInputEmail", "ITSales")).Click();

            WaitUntil(driver, Control("BCcFieldSearchMoreButton", "ITSales"), 30);
            Element(driver, Control("BCcFieldSearchMoreButton", "ITSales")).Click();

            WaitUntil(driver, Control("ToFieldNewRecord", "ITSales"), 30);
            Element(driver, Control("ToFieldNewRecord", "ITSales")).Click();

            WaitUntil(driver, Control("ToFieldNewContactButton", "ITSales"), 30);
            Element(driver, Control("ToFieldNewContactButton", "ITSales")).Click();


        }


        //Method to create contact quick create.
        public void QuickCreateContactITSales(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string Time, string Number)
        {
            ThinkTime(7);

            string Fname = "AutoFname" + Time;
            string Lname = "AutoLname" + Time + Number;

            ThinkTime(3);
            WaitUntil(driver, Control("PhoneCallSubject", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("PhoneCallSubject", "EnterpriseSales"));
            ThinkTime(3);
            Element(driver, Control("PhoneCallSubject", "EnterpriseSales")).SendKeys(Keys.Control + "a");
            Element(driver, Control("PhoneCallSubject", "EnterpriseSales")).SendKeys(Keys.Delete);
            ThinkTime(3);
            Element(driver, Control("PhoneCallSubject", "EnterpriseSales")).SendKeys(Fname);
            ThinkTime(3);
            WaitUntil(driver, Control("QuickCreateContactFname", "ITSales"), 30);
            Element(driver, Control("QuickCreateContactFname", "ITSales")).Click();
            Element(driver, Control("QuickCreateContactFname", "ITSales")).SendKeys(Fname);
            ThinkTime(3);
            WaitUntil(driver, Control("QuickCreateContactLname", "ITSales"), 30);
            Element(driver, Control("QuickCreateContactLname", "ITSales")).Click();
            Element(driver, Control("QuickCreateContactLname", "ITSales")).SendKeys(Lname);
            ThinkTime(3);
            WaitUntil(driver, Control("QuickCreateContactLanguage", "ITSales"), 30);
            Element(driver, Control("QuickCreateContactLanguage", "ITSales")).Click();
            ThinkTime(1);
            Element(driver, Control("QuickCreateContactLanguage", "ITSales")).SendKeys("UK English");
            ThinkTime(7);
            WaitUntil(driver, Control("QuickCreateLanguageClick", "ITSales"), 30);
            MoveToElement(driver, Control("QuickCreateLanguageClick", "ITSales"));
            Element(driver, Control("QuickCreateLanguageClick", "ITSales")).Click();

            //WaitUntil(driver, Control("QuickCreateContactAccount", "ITSales"), 30);
            //Element(driver, Control("QuickCreateContactAccount", "ITSales")).Click();
            //Element(driver, Control("QuickCreateContactAccount", "ITSales")).SendKeys("L Z Development Pty Ltd");
            //ThinkTime(7);
            //WaitUntil(driver, Control("NewMinorSourceSelect", "Opportunity"), 30);
            //Element(driver, Control("NewMinorSourceSelect", "Opportunity")).Click();

            scrollDownQuickCreatePageITSales(driver, testInReport, testName, testDataIteration);

            WaitUntil(driver, Control("QuickCreateContactEmail", "ITSales"), 30);
            Element(driver, Control("QuickCreateContactEmail", "ITSales")).Click();
            Element(driver, Control("QuickCreateContactEmail", "ITSales")).SendKeys("QuickContact@gmail.com");

            WaitUntil(driver, Control("QuickCreateContactBussinessPhn", "ITSales"), 30);
            Element(driver, Control("QuickCreateContactBussinessPhn", "ITSales")).Click();
            Element(driver, Control("QuickCreateContactBussinessPhn", "ITSales")).SendKeys("+919856987854");

            WaitUntil(driver, Control("OpportunityContactSave", "EnterpriseSales"), 30);
            Element(driver, Control("OpportunityContactSave", "EnterpriseSales")).Click();

            ThinkTime(7);
            try
            {
                Element(driver, Control("NormalValue", "Generic")).Click();

            }
            catch (Exception e)

            {
            }
            //string NewContactName = Element(driver, Control("QuickCreateContactGetName", "ITSales")).GetAttribute("innerText");
            saveFooter(driver, testInReport, testName, testDataIteration);

            //return NewContactName;
        }


        //Method to scroll Quick create contact.
        public void scrollDownQuickCreatePageITSales(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {

            IWebElement scroll = Element(driver, Control("QuickCreateContactScroll", "ITSales"));
            ElementHighlight(driver, Control("QuickCreateContactScroll", "ITSales"));
            IJavaScriptExecutor js = (IJavaScriptExecutor)driver;
            js.ExecuteScript("arguments[0].scrollTop+=100", scroll);

        }

        //Method to scroll Quickcreate phone call
        public void scrollDownQuickCreatePhonecall(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {

            IWebElement scroll = Element(driver, Control("QuickPhonecallScroll", "ITSales"));
            ElementHighlight(driver, Control("QuickPhonecallScroll", "ITSales"));
            IJavaScriptExecutor js = (IJavaScriptExecutor)driver;
            js.ExecuteScript("arguments[0].scrollTop+=100", scroll);

        }

        //Method to verify Proton ID in contact.
        public void VerifyProtonIdContactNull(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(4);

            if (Elements(driver, Control("VerifyProtonIdContactNull", "ITSales")) == 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Proton Verified as Null", "Proton ID verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Proton ID verification failed", "Proton ID verification");
                Assert.Fail("Proton ID Verification failed");
            }

        }



        //Method to Verify Bookable Resources.
        public int VerifyBookableResourcesBookATour(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string BussinessCentre)
        {
            ThinkTime(7);

            WaitUntil(driver, Control("AreaSwitchButton", "BookATour"), 30);
            MoveToElement(driver, Control("AreaSwitchButton", "BookATour"));
            Element(driver, Control("AreaSwitchButton", "BookATour")).Click();

            // ThinkTime(3);

            WaitUntil(driver, Control("AreaSwitchSettingsSelect", "BookATour"), 30);
            MoveToElement(driver, Control("AreaSwitchSettingsSelect", "BookATour"));
            Element(driver, Control("AreaSwitchSettingsSelect", "BookATour")).Click();

            ThinkTime(3);

            WaitUntil(driver, Control("SelectOrganizationalUnits", "BookATour"), 30);
            MoveToElement(driver, Control("SelectOrganizationalUnits", "BookATour"));
            Element(driver, Control("SelectOrganizationalUnits", "BookATour")).Click();

            ThinkTime(7);
            MoveToElement(driver, Control("OrganizationSearch", "BookATour"));
            Element(driver, Control("OrganizationSearch", "BookATour")).SendKeys(BussinessCentre);
            ThinkTime(3);
            Element(driver, Control("OrganizationSearchutton", "BookATour")).Click();

            ThinkTime(7);

            MoveToElement(driver, Control("SelectOrganization", "BookATour"));
            Element(driver, Control("SelectOrganization", "BookATour")).Click();

            //navigate to related tab

            ThinkTime(10);

            MoveToElement(driver, Control("OrganizationRelatedTab", "BookATour"));
            Element(driver, Control("OrganizationRelatedTab", "BookATour")).Click();

            ThinkTime(5);

            MoveToElement(driver, Control("BookableResourcesTab", "BookATour"));
            Element(driver, Control("BookableResourcesTab", "BookATour")).Click();

            ThinkTime(5);

            int count = 0;

            for (int i = 0; i <= 3; i++)
            {
                string j = i.ToString();

                ThinkTime(3);

                //ElementHighlight(driver, Control("VerifyBookableResources",j, "BookATour"));
                if (Elements(driver, Control("VerifyBookableResources", j, "BookATour")) > 0)
                {
                    count += 1;
                }

                else
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Verified Bookable resouces count is " + count, "Bookable Resources Verification");
                    break;
                }

            }


            ThinkTime(3);

            MoveToElement(driver, Control("HomeButton", "BookATour"));
            Element(driver, Control("HomeButton", "BookATour")).Click();
            return count;
        }


        //Method to verify book a tour slot colour is different.
        public void VerifyBookTourSlotColurDifferent(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {
            ThinkTime(30);
            WaitUntil(driver, Control("BookTrButton", "BookATour"), 360);
            ActionsClick(driver, Control("BookTrButton", "BookATour"));

            driver.SwitchTo().DefaultContent();
            string parentWindowHandle = driver.CurrentWindowHandle;
            WindowHandling(driver);

            WaitUntil(driver, Control("Slot1Colour", "Generic"), 60);
            string ColourSlot1 = Element(driver, Control("Slot1Colour", "Generic")).GetCssValue("background-color");
            string ColourSlot2 = Element(driver, Control("Slot2Colour", "Generic")).GetCssValue("background-color");

            if (ColourSlot1 == ColourSlot2)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Slot colour verification failed ", "Slot colour verification");
                Assert.Fail("Slot Colours are similar");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "slot colour verified", "Slot colour verification");

            }

            driver.Close();
            WindowHandling(driver, parentWindowHandle);


        }



        public void VerifyScreenDisplaysColouredBlocks(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string Colour1, string Colour2, string Colour3)
        {
            ThinkTime(15);
            JSClick(driver, Control("BookTrButton", "BookATour"));

            ThinkTime(15);
            //string parentWindowHandle = driver.CurrentWindowHandle;

            //WindowHandling(driver);
            WindowHandling(driver);
            ThinkTime(1);
            driver.Manage().Window.Maximize();
            ThinkTime(15);

            WaitUntil(driver, Control("Field1", "BookATour"), 360);
            MoveToElement(driver, Control("Field1", "BookATour"));
            string Feild1Colour = Element(driver, Control("Field1", "BookATour")).GetCssValue("background-color");

            if (Feild1Colour == Colour1)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Feild1 colour is Orange", "Feild1 colour is Orange");

            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Feild1 colour is not Orange", "Feild1 colour is not Orange");
                Assert.Fail("Feild1 colour is not Orange");
            }

            ThinkTime(2);
            //WaitUntil(driver, Control("Field2", "BookATour"), 30);
            MoveToElement(driver, Control("Field2", "BookATour"));
            string Feild2Colour = Element(driver, Control("Field2", "BookATour")).GetCssValue("background-color");


            if (Feild2Colour == Colour2)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Feild2 colour is Gray", "Feild2 colour is Gray");

            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Feild2 colour is not Gray", "Feild2 colour is not Gray");
                Assert.Fail("Feild2 colour is not Gray");
            }

            ThinkTime(2);
            WaitUntil(driver, Control("Field3", "BookATour"), 90);
            MoveToElement(driver, Control("Field3", "BookATour"));
            string Feild3Colour = Element(driver, Control("Field3", "BookATour")).GetCssValue("background-color");


            if (Feild3Colour == Colour3)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Feild3 colour is Green", "Feild3 colour is Blue");

            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Feild3 colour is not Blue", "Feild3 colour is not Blue");
                Assert.Fail("Feild3 colour is not Gray");
            }

            driver.Close();
            //driver.SwitchTo().Window(parentWindowHandle);
            driver.SwitchTo().DefaultContent();
        }


        public void VerifyScreenDisplaysColouredBlocks1(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string Colour1, string Colour2, string Colour3)
        {
            //ThinkTime(15);
            //JSClick(driver, Control("BookTrButton", "BookATour"));

            ThinkTime(15);
            string parentWindowHandle = driver.CurrentWindowHandle;

            //WindowHandling(driver);
            WindowHandling(driver);
            ThinkTime(1);
            driver.Manage().Window.Maximize();
            ThinkTime(15);

            WaitUntil(driver, Control("Field1", "BookATour"), 360);
            MoveToElement(driver, Control("Field1", "BookATour"));
            string Feild1Colour = Element(driver, Control("Field1", "BookATour")).GetCssValue("background-color");

            if (Feild1Colour == Colour1)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Feild1 colour is Orange", "Feild1 colour is Orange");

            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Feild1 colour is not Orange", "Feild1 colour is not Orange");
                Assert.Fail("Feild1 colour is not Orange");
            }

            ThinkTime(2);
            //WaitUntil(driver, Control("Field2", "BookATour"), 30);
            MoveToElement(driver, Control("Field2", "BookATour"));
            string Feild2Colour = Element(driver, Control("Field2", "BookATour")).GetCssValue("background-color");


            if (Feild2Colour == Colour2)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Feild2 colour is Gray", "Feild2 colour is Gray");

            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Feild2 colour is not Gray", "Feild2 colour is not Gray");
                Assert.Fail("Feild2 colour is not Gray");
            }

            //ThinkTime(2);
            //WaitUntil(driver, Control("Field3", "BookATour"), 90);
            //MoveToElement(driver, Control("Field3", "BookATour"));
            //string Feild3Colour = Element(driver, Control("Field3", "BookATour")).GetCssValue("background-color");


            //if (Feild3Colour == Colour3)
            //{
            //    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Feild3 colour is Green", "Feild3 colour is Blue");

            //}

            //else
            //{
            //    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Feild3 colour is not Blue", "Feild3 colour is not Blue");
            //    Assert.Fail("Feild3 colour is not Gray");
            //}

            driver.Close();
            ThinkTime(3);

            WindowHandling(driver, parentWindowHandle);
            //driver.SwitchTo().Window(parentWindowHandle);
            //driver.SwitchTo().DefaultContent();
        }

        //Method to verify Color for out of office hour.
        public void VerifyColourOutOfOfficeHour(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {
            ThinkTime(3);

            string VerifyColor = "rgba(255, 89, 50, 1)";

            driver.SwitchTo().DefaultContent();
            string parentWindowHandle = driver.CurrentWindowHandle;
            WindowHandling(driver);

            //WindowHandling(driver);
            driver.Manage().Window.Maximize();

            ThinkTime(3);

            WaitUntil(driver, Control("OutofOffice", "BookATour"), 30);
            MoveToElement(driver, Control("OutofOffice", "BookATour"));
            // string OutOfOfficeColor = Element(driver, Control("GetColorOutOfOffice", "BookATour")).GetCssValue("background-color");

            //if (Elements(driver, Control("OutofOffice", "BookATour"))>0)
            //{ 
            Actions action;
            IWebElement ele;

            ele = driver.FindElement(By.XPath("//td[@id='ASPxSchedulerAgentView_containerBlock_DXCntv1_1']"));
            action = new Actions(driver);
            action.ContextClick(ele).Build().Perform();
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Out of office color verified as red", "Out of office color verification");

            //}

            //else
            //{
            //    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Out of office color verification failed", "Out of office color verification");
            //    Assert.Fail("Out of office color verification failed");

            //}

            driver.Close();

            WindowHandling(driver, parentWindowHandle);
        }


        public void VerifyColourBookedAM(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string Colour1)
        {
            ThinkTime(15);
            JSClick(driver, Control("BookTrButton", "BookATour"));

            ThinkTime(15);
            string parentWindowHandle = driver.CurrentWindowHandle;

            WindowHandling(driver);
            WindowHandling(driver);
            ThinkTime(1);
            driver.Manage().Window.Maximize();
            ThinkTime(1);

            WaitUntil(driver, Control("BlockColour", "BookATour"), 30);
            MoveToElement(driver, Control("BlockColour", "BookATour"));
            string Feild1Colour = Element(driver, Control("BlockColour", "BookATour")).GetCssValue("background-color");
            Console.WriteLine(Feild1Colour);
            if (Feild1Colour == Colour1)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Feild1 colour is Orange", "Feild1 colour is Orange");

            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Feild1 colour is not Orange", "Feild1 colour is not Orange");
                Assert.Fail("Feild1 colour is not Orange");
            }


            driver.Close();
            driver.SwitchTo().Window(parentWindowHandle);
            driver.SwitchTo().DefaultContent();
        }

        public void Verifyslotcount(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, int a, int b)
        {

            ThinkTime(3);

            driver.SwitchTo().DefaultContent();
            string parentWindowHandle = driver.CurrentWindowHandle;
            WindowHandling(driver);
            driver.Manage().Window.Maximize();
            if (a == b)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Schedule Screen doesnt change", "Datafilter");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "pass", "Schedule Screen  changed successfully", "Datafilter");
            }

            driver.Close();

            WindowHandling(driver, parentWindowHandle);

        }





        //Method to verify number of slot.
        public int ReturnSlotcount(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {
            ThinkTime(3);

            driver.SwitchTo().DefaultContent();
            string parentWindowHandle = driver.CurrentWindowHandle;
            WindowHandling(driver);
            driver.Manage().Window.Maximize();

            /* int total*/
            ;
            int SlotCount = 0;

            for (int i = 1; i <= 5;)
            {
                string j = i.ToString();

                if (Elements(driver, Control("VerifySlotNumber", j, "BookATour")) > 0)
                {
                    i += 1;
                    SlotCount += 1;
                }
                //string total = SlotCount.ToString();
                //Console.WriteLine(total);

                else

                {
                    break;
                }

            }


            return SlotCount;







        }







        //Method to verify number of slot.
        public void VerifyScreenDisplaysColouredBlocks(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, int Resourcecount)
        {
            ThinkTime(3);

            driver.SwitchTo().DefaultContent();
            string parentWindowHandle = driver.CurrentWindowHandle;
            WindowHandling(driver);
            driver.Manage().Window.Maximize();


            int SlotCount = 0;

            for (int i = 1; i <= 5;)
            {
                string j = i.ToString();

                if (Elements(driver, Control("VerifySlotNumber", j, "BookATour")) > 0)
                {
                    i += 1;
                    SlotCount += 1;
                }

                else

                {
                    break;
                }

            }

            if (SlotCount <= Resourcecount)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Number of slot count is verified successfully", "Slot count verification");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Number of slot count is greater that number of resources", "Slot count verification");
                Assert.Fail("Slot count verification failed");
            }


            driver.Close();

            WindowHandling(driver, parentWindowHandle);


        }




        public void VerifyAgentBookedAM(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string Colour1)
        {
            ThinkTime(15);
            JSClick(driver, Control("BookTrButton", "BookATour"));

            ThinkTime(15);
            string parentWindowHandle = driver.CurrentWindowHandle;

            WindowHandling(driver);
            WindowHandling(driver);
            ThinkTime(1);
            driver.Manage().Window.Maximize();
            ThinkTime(1);

            WaitUntil(driver, Control("AgentBlockColour", "BookATour"), 30);
            MoveToElement(driver, Control("AgentBlockColour", "BookATour"));
            string Feild1Colour = Element(driver, Control("AgentBlockColour", "BookATour")).GetCssValue("background-color");
            Console.WriteLine(Feild1Colour);
            if (Feild1Colour == Colour1)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Feild1 colour is Orange", "Feild1 colour is Orange");

            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Feild1 colour is not Orange", "Feild1 colour is not Orange");
                Assert.Fail("Feild1 colour is not Orange");
            }


            driver.Close();
            driver.SwitchTo().Window(parentWindowHandle);
            driver.SwitchTo().DefaultContent();
        }

        public void VerifyDifCentreView(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string Colour1)
        {
            ThinkTime(9);
            JSClick(driver, Control("BookTrButton1", "BookATour"));

            ThinkTime(15);
            string parentWindowHandle = driver.CurrentWindowHandle;

            WindowHandling(driver);
            ThinkTime(1);
            driver.Manage().Window.Maximize();
            ThinkTime(9);

            MoveToElement(driver, Control("CentreDrpdwn", "Dashboards"));
            Element(driver, Control("CentreDrpdwn", "Dashboards")).Click();
            ThinkTime(9);

            MoveToElement(driver, Control("CentreValue2", "Dashboards"));
            Element(driver, Control("CentreValue2", "Dashboards")).Click();
            ThinkTime(15);

            WaitUntil(driver, Control("BookedTr", "Dashboards"), 30);
            MoveToElement(driver, Control("BookedTr", "Dashboards"));
            string BookedCtr = Element(driver, Control("BookedTr", "Dashboards")).GetAttribute("value");
            // string BookedCtr = Element(driver, Control("BookedTr", "Dashboards")).Text.ToString();
            //string[] spearator = { "; " };
            //String[] strlist = BookedCtr.Split(spearator, StringSplitOptions.RemoveEmptyEntries);
            //int n = strlist.Length;
            Console.WriteLine(BookedCtr);
            if (BookedCtr.Contains("Calgary Sun Life; 942"))
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Selected Centre are Present in the calender view", "Selected City and Centre are Present in the calender view");

            }

            else
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Selected Centre are not Present in the calender view", "Selected City and Centre are not Present in the calender view");
                Assert.Fail("Role1 is not Present in the calender view");
            }

            driver.Close();
            driver.SwitchTo().Window(parentWindowHandle);
            driver.SwitchTo().DefaultContent();
        }


        public void OpenContactGlobalSearch(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string Account)
        {
            ThinkTime(8);

            WaitUntil(driver, Control("GlobalSearchInput", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("GlobalSearchInput", "EnterpriseSales"));
            Element(driver, Control("GlobalSearchInput", "EnterpriseSales")).SendKeys(Account);
            Element(driver, Control("GlobalSearchButton", "EnterpriseSales")).Click();

            ThinkTime(4);
            SelectingActiveAccountEnterpriseSales(driver, testInReport, testName, testDataIteration);
            ThinkTime(4);
        }


        //Method to Verify Service Provider account.

        public void VerifyServiceProviderAccount(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string AccountName)
        {
            ThinkTime(8);

            string NewName = AccountName;

            TablistSelection(driver, testInReport, testName, testDataIteration, "Service Provider");
            //WaitUntil(driver, Control("ServiceProviderTab", "EnterpriseSales"), 30);
            //MoveToElement(driver, Control("ServiceProviderTab", "EnterpriseSales"));
            //Element(driver, Control("ServiceProviderTab", "EnterpriseSales")).Click();

            ThinkTime(3);


            if (Elements(driver, Control("ServiceProviderNameLabel", "EnterpriseSales")) > 0)
            {
                WaitUntil(driver, Control("ServiceProviderNameLabel", "EnterpriseSales"), 30);
                MoveToElement(driver, Control("ServiceProviderNameLabel", "EnterpriseSales"));
                Element(driver, Control("ServiceProviderNameLabelCloseButton", "EnterpriseSales")).Click();


                WaitUntil(driver, Control("ServiceProviderNameLabelInput", "Opportunity"), 30);
                MoveToElement(driver, Control("ServiceProviderNameLabelInput", "Opportunity"));

                Element(driver, Control("ServiceProviderNameLabelInput", "Opportunity")).Click();
                Element(driver, Control("ServiceProviderNameLabelInput", "Opportunity")).SendKeys(NewName);

                ThinkTime(6);

                MoveToElement(driver, Control("ServiceDropDownSelect", "Opportunity"));
                Element(driver, Control("ServiceDropDownSelect", "Opportunity")).Click();

            }

            else
            {
                WaitUntil(driver, Control("ServiceProvideraccount", "Opportunity"), 90);
                MoveToElement(driver, Control("ServiceProvideraccount", "Opportunity"));
                Element(driver, Control("ServiceProvideraccount", "Opportunity")).Click();
                Element(driver, Control("ServiceProvideraccount", "Opportunity")).SendKeys(NewName);

                ThinkTime(7);
                //MoveToElement(driver, Control("serviceprovideraccountlookup", "Opportunity"));
                //Element(driver, Control("serviceprovideraccountlookup", "Opportunity")).Click();

                //MoveToElement(driver, Control("ServiceDropDownSelect", "Opportunity"));
                //Element(driver, Control("ServiceDropDownSelect", "Opportunity")).Click();

                MoveToElement(driver, Control("Languagedropdown", "EnterpriseSales"));
                Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();




            }

            saveFooter(driver, testInReport, testName, testDataIteration);

            ThinkTime(3);

            string ExistingName = Element(driver, Control("ServiceProviderNameLabel", "EnterpriseSales")).GetAttribute("title");

            if (NewName == ExistingName)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "pass", "Service Provider field updated successfully", "Service provider field verification");

            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Service Provider field is updated successfully", "Service provider field verification");
                Assert.Fail("Service provider field verification failed");
            }
        }

        public void LinkBrokerdetails(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string data, string Testdata)
        {
            ThinkTime(10);

            WaitUntil(driver, Control("BrokerDetailsTab", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("BrokerDetailsTab", "EnterpriseSales"));
            Element(driver, Control("BrokerDetailsTab", "EnterpriseSales")).Click();

            ThinkTime(3);

            WaitUntil(driver, Control("BrokerInputfield", Testdata, "EnterpriseSales"), 30);
            MoveToElement(driver, Control("BrokerInputfield", Testdata, "EnterpriseSales"));
            Element(driver, Control("BrokerInputfield", Testdata, "EnterpriseSales")).SendKeys(data);

            ThinkTime(4);
            MoveToElement(driver, Control("Languagedropdown", "EnterpriseSales"));
            Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();
            ThinkTime(3);
            saveFooter(driver, testInReport, testName, testDataIteration);
            ThinkTime(3);
        }

        public void Clickcontactmaginifierglass(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string contactname)
        {
            ThinkTime(6);
            WaitUntil(driver, Control("BrokerInputfield", "Broker Contact, Lookup", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("BrokerInputfield", "Broker Contact, Lookup", "EnterpriseSales"));
            Element(driver, Control("Brokercontactglass", "Opportunity")).Click();
            ThinkTime(4);
            //MoveToElement(driver, Control("Languagedropdown", "EnterpriseSales"));
            //Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();
            MoveToElement(driver, Control("BrokerContactDropdown", "EnterpriseSales"));
            Element(driver, Control("BrokerContactDropdown", "EnterpriseSales")).Click();
            ThinkTime(4);
            string selectedvalue = Element(driver, Control("SelectedBrokercontactvalue", "Opportunity")).GetAttribute("innerText");
            ThinkTime(4);
            if (selectedvalue == contactname)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Broker Contact field is updated successfully", "Broker Contact field verification");
                Element(driver, Control("Brokercontactdelete", "Opportunity")).Click();
                ThinkTime(4);
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Broker Contact field is not updated successfully", "Broker Contact field verification");
                Assert.Fail("Broker Contact field verification failed");
            }
            WaitUntil(driver, Control("BrokerInputfield", "Broker Contact, Lookup", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("BrokerInputfield", "Broker Contact, Lookup", "EnterpriseSales"));
            Element(driver, Control("BrokerInputfield", "Broker Contact, Lookup", "EnterpriseSales")).Click();
            ThinkTime(4);

            if (Elements(driver, Control("Languagedropdown", "EnterpriseSales")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Broker Contact field is updated successfully", "Broker Contact field verification");
                Assert.Fail("Broker Contact field verification failed");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Broker Contact field is not updated successfully", "Broker Contact field verification");

                //else
                //{
                //    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Broker Details field is updated successfully", "Broker Details field verification");
                //    Assert.Fail("Broker Details field verification failed");
                //}
            }
        }
        public void LinkBrokerdetailsNew(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string BroAccount, string BroContactname)
        {
            WaitUntil(driver, Control("BrokerDetailsTab", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("BrokerDetailsTab", "EnterpriseSales"));
            Element(driver, Control("BrokerDetailsTab", "EnterpriseSales")).Click();

            //ThinkTime(3);

            //WaitUntil(driver, Control("BrokerInputfield1", "Accounts"), 30);
            //MoveToElement(driver, Control("BrokerInputfield1", "Accounts"));
            //Element(driver, Control("BrokerInputfield1", "Accounts")).SendKeys(BroAccount);

            //ThinkTime(3);

            //MoveToElement(driver, Control("BrokerAccountDrop", "Accounts"));
            //Element(driver, Control("BrokerAccountDrop", "Accounts")).Click();

            ThinkTime(3);

            WaitUntil(driver, Control("BrokerContactfield1", "Accounts"), 30);
            MoveToElement(driver, Control("BrokerContactfield1", "Accounts"));
            Element(driver, Control("BrokerContactfield1", "Accounts")).Click();
            Element(driver, Control("BrokerContactfield1", "Accounts")).SendKeys(BroContactname);

            ThinkTime(3);
            if (Elements(driver, Control("BrokerAccountDrop", "Accounts")) == 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Broker Contact field not displayed", "Broker Contact field not displayed");
                Assert.Fail("Broker Contact not displayed");
            }
            MoveToElement(driver, Control("BrokerAccountDrop", "Accounts"));
            Element(driver, Control("BrokerAccountDrop", "Accounts")).Click();
            ThinkTime(5);

            //saveFooter(driver, testInReport, testName, testDataIteration);
            //ThinkTime(3);

            //string ExistingName = Element(driver, Control("ExistingBrokervalue", "EnterpriseSales")).GetAttribute("title");

            //if (Testdata == ExistingName)
            //{
            //    AddLog(driver, testInReport, testName, testDataIteration, "pass", "Broker Details field updated successfully", "Broker Details field verification");

            //}

            //else
            //{
            //    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Broker Details field is updated successfully", "Broker Details field verification");
            //    Assert.Fail("Broker Details field verification failed");
            //}
        }
        public void LinkBrokerdetailsVeri(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string BroAccount, string BroContactname)
        {
            WaitUntil(driver, Control("BrokerDetailsTab", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("BrokerDetailsTab", "EnterpriseSales"));
            Element(driver, Control("BrokerDetailsTab", "EnterpriseSales")).Click();
            ThinkTime(3);

            WaitUntil(driver, Control("BrokerInputfield1", "Accounts"), 30);
            MoveToElement(driver, Control("BrokerInputfield1", "Accounts"));
            Element(driver, Control("BrokerInputfield1", "Accounts")).Clear();
            Element(driver, Control("BrokerInputfield1", "Accounts")).SendKeys(BroAccount);

            ThinkTime(3);

            MoveToElement(driver, Control("BrokerAccountDrop", "Accounts"));
            Element(driver, Control("BrokerAccountDrop", "Accounts")).Click();


            //WaitUntil(driver, Control("BroAccSeld", "Accounts"), 30);
            //Element(driver, Control("BroAccSeld", "Accounts")).SendKeys(Keys.Control + "a");
            //Element(driver, Control("BroAccSeld", "Accounts")).SendKeys(Keys.Delete);

            WaitUntil(driver, Control("BrokerContactfield1", "Accounts"), 30);
            MoveToElement(driver, Control("BrokerContactfield1", "Accounts"));
            Element(driver, Control("BrokerContactfield1", "Accounts")).Clear();
            Element(driver, Control("BrokerContactfield1", "Accounts")).SendKeys(BroContactname);

            ThinkTime(3);

            MoveToElement(driver, Control("BrokerContactDrop", "Accounts"));
            Element(driver, Control("BrokerContactDrop", "Accounts")).Click();
            ThinkTime(8);

        }

        public void LinkedBrokerContactVerify(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string BroAccount, string BroContactname)
        {
            WaitUntil(driver, Control("BrokerDetailsTab", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("BrokerDetailsTab", "EnterpriseSales"));
            Element(driver, Control("BrokerDetailsTab", "EnterpriseSales")).Click();
            ThinkTime(3);

            WaitUntil(driver, Control("BrokerInputfield1", "Accounts"), 30);
            MoveToElement(driver, Control("BrokerInputfield1", "Accounts"));
            Element(driver, Control("BrokerInputfield1", "Accounts")).Clear();
            Element(driver, Control("BrokerInputfield1", "Accounts")).SendKeys(BroAccount);

            ThinkTime(3);

            MoveToElement(driver, Control("BrokerAccountDrop", "Accounts"));
            Element(driver, Control("BrokerAccountDrop", "Accounts")).Click();


            WaitUntil(driver, Control("BrokerContactLookup", "Accounts"), 30);
            MoveToElement(driver, Control("BrokerContactLookup", "Accounts"));
            Element(driver, Control("BrokerContactLookup", "Accounts")).Click();
            ThinkTime(5);
            MoveToElement(driver, Control("BrokerContactDrop", "Accounts"));
            Element(driver, Control("BrokerContactDrop", "Accounts")).Click();
            string ExistingName = Element(driver, Control("BrokerContactValue", "Accounts")).GetAttribute("title");

            if (ExistingName == BroContactname)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "pass", "Broker Details field updated successfully", "Broker Details field verification");
                //Element(driver, Control("BrokerContactDrop", "Accounts")).Click();
                ThinkTime(3);
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Broker Details field is updated successfully", "Broker Details field verification");
                Assert.Fail("Broker Details field verification failed");
            }
        }

        public void Verifybrokercontactdetails(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {
            int firstname = Elements(driver, Control("Firstnamelabel", "EnterpriseSales"));
            int secondname = Elements(driver, Control("Lastnamelabel", "EnterpriseSales"));
            int email = Elements(driver, Control("Emaillabel", "EnterpriseSales"));
            int Busphone = Elements(driver, Control("Busphonelabel", "EnterpriseSales"));
            int company = Elements(driver, Control("Comapnylabel", "EnterpriseSales"));
            int salutation = Elements(driver, Control("Salutationlabel", "EnterpriseSales"));

            if (firstname > 0 && secondname > 0 && email > 0 && Busphone > 0 && company > 0 && salutation > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "pass", "Broker contact field updated successfully", "Broker contact field verification");

            }
            else
            {
                Assert.Fail("Broker contacts field not populated");
            }
        }
        public void VerifybrokercontactdetailsNew(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {
            int firstname = Elements(driver, Control("Firstnamelabel", "EnterpriseSales"));
            //int secondname = Elements(driver, Control("Lastnamelabel1", "EnterpriseSales"));
            //int email = Elements(driver, Control("Emaillabel1", "EnterpriseSales"));
            int Busphone = Elements(driver, Control("Busphonelabel1", "EnterpriseSales"));
            int company = Elements(driver, Control("Comapnylabel", "EnterpriseSales"));
            int salutation = Elements(driver, Control("Salutationlabel1", "EnterpriseSales"));

            if (firstname > 0 && salutation > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "pass", "Broker contact field updated successfully", "Broker contact field verification");

            }
            else
            {
                Assert.Fail("Broker contacts field not populated");
            }

        }

        public void VerifybrokerAccountdetails(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string Accountname, string Phonevalue, string Cityvalue, string Phonevalue2)
        {
            ThinkTime(2);
            string brokeraccountpopulatedvalue = Element(driver, Control("BrokerAccountpopulated", "EnterpriseSales")).GetAttribute("innerText");

            if (brokeraccountpopulatedvalue == Accountname)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "pass", "Brokername field updated successfully", "Brokername field verification");

            }
            else
            {
                Assert.Fail("Broker account not populated");
            }


            //int phone = Elements(driver, Control("PhoneAccountlabel", "EnterpriseSales"));

            //int city = Elements(driver, Control("CityAccountlabel", "EnterpriseSales"));
            //int country = Elements(driver, Control("CountryAccountlabel", "EnterpriseSales"));

            //if (phone > 0 && city > 0 && country > 0)
            //{
            //    AddLog(driver, testInReport, testName, testDataIteration, "pass", "Brokeraccount field updated successfully", "Brokeraccount field verification");

            //}
            //else
            //{
            //    Assert.Fail("Broker account fields not populated");
            //}

            int phonevalue = Elements(driver, Control("LastNameBusphonevalue", Phonevalue, "EnterpriseSales"));
            int phonevalue2 = Elements(driver, Control("LastNameBusphonevalue", Phonevalue2, "EnterpriseSales"));
            int cityvalue = Elements(driver, Control("LastNameBusphonevalue", Cityvalue, "EnterpriseSales"));
            int countryvalue = Elements(driver, Control("Countryvalue", "EnterpriseSales"));

            if (phonevalue > 0 || phonevalue2 > 0 && cityvalue > 0 && countryvalue > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "pass", "Brokeraccount field value updated successfully", "Brokeraccount field value verification");

            }
            else
            {
                Assert.Fail("Broker account field value not populated");
            }




        }


        public void VerifybrokerAccountdetailsLead(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string Accountname)
        {
            ThinkTime(2);
            string brokeraccountpopulatedvalue = Element(driver, Control("BrokerAccountpopulated", "EnterpriseSales")).GetAttribute("innerText");

            if (brokeraccountpopulatedvalue == Accountname)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "pass", "Brokername field updated successfully", "Brokername field verification");

            }
            else
            {
                Assert.Fail("Broker account not populated");
            }


            int phone = Elements(driver, Control("PhoneAccountlabel", "EnterpriseSales"));

            int city = Elements(driver, Control("CityAccountlabel", "EnterpriseSales"));
            int country = Elements(driver, Control("CountryAccountlabelLead", "EnterpriseSales"));

            if (phone > 0 && city > 0 && country > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "pass", "Brokeraccount field updated successfully", "Brokeraccount field verification");

            }
            else
            {
                Assert.Fail("Broker account fields not populated");
            }


        }


        public void VerifybrokerAccountdetailsLeadNew(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {



            int phone = Elements(driver, Control("PhoneAccountlabel1", "EnterpriseSales"));

            int city = Elements(driver, Control("CityAccountlabel1", "EnterpriseSales"));
            int country = Elements(driver, Control("CountryAccountlabelLead1", "EnterpriseSales"));

            if (phone > 0 && city > 0 && country > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "pass", "Brokeraccount field updated successfully", "Brokeraccount field verification");

            }
            else
            {
                Assert.Fail("Broker account fields not populated");
            }


        }


        //method to verify link broker account in opportunity
        public void VerifyBrokerProviderAccount(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string AccountName)
        {
            ThinkTime(8);

            string NewName = AccountName;

            WaitUntil(driver, Control("BrokerDetailsTab", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("BrokerDetailsTab", "EnterpriseSales"));
            Element(driver, Control("BrokerDetailsTab", "EnterpriseSales")).Click();

            ThinkTime(3);
            //  string brokername = Element(driver, Control("Brokeraccountname", "EnterpriseSales")).GetAttribute("title");

            if (Elements(driver, Control("BrokerNameLabel", "EnterpriseSales")) > 0)
            {
                WaitUntil(driver, Control("BrokerNameLabel", "EnterpriseSales"), 30);
                MoveToElement(driver, Control("BrokerNameLabel", "EnterpriseSales"));
                Element(driver, Control("CloseBrokerbutton", "EnterpriseSales")).Click();


                WaitUntil(driver, Control("BrokerInput", "EnterpriseSales"), 30);
                MoveToElement(driver, Control("BrokerInput", "EnterpriseSales"));
                ActionsClick(driver, Control("BrokerInput", "EnterpriseSales"));
                Element(driver, Control("BrokerInput", "EnterpriseSales")).SendKeys(NewName);

                ThinkTime(3);
                MoveToElement(driver, Control("BrokerSearch", "EnterpriseSales"));
                Element(driver, Control("BrokerSearch", "EnterpriseSales")).Click();

                MoveToElement(driver, Control("BrokerDropdown", "EnterpriseSales"));
                Element(driver, Control("BrokerDropdown", "EnterpriseSales")).Click();
                AddLog(driver, testInReport, testName, testDataIteration, "pass", "Brokername field updated successfully", "Brokername field verification");

            }

            else
            {
                ThinkTime(3);

                //MoveToElement(driver, Control("ExistingBrokervalue", "EnterpriseSales"));
                //ActionsClick(driver, Control("CloseBrokerbutton", "EnterpriseSales"));

                WaitUntil(driver, Control("BrokerInput", "EnterpriseSales"), 30);
                MoveToElement(driver, Control("BrokerInput", "EnterpriseSales"));
                Element(driver, Control("BrokerInput", "EnterpriseSales")).SendKeys(NewName);

                //ThinkTime(3);
                //WaitUntil(driver, Control("BrokerSearch", "EnterpriseSales"), 30);
                //MoveToElement(driver, Control("BrokerSearch", "EnterpriseSales"));
                //Element(driver, Control("BrokerSearch", "EnterpriseSales")).Click();
                ThinkTime(3);
                WaitUntil(driver, Control("Languagedropdown", "EnterpriseSales"), 30);
                MoveToElement(driver, Control("Languagedropdown", "EnterpriseSales"));
                Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();

                //MoveToElement(driver, Control("BrokerDropdown", "EnterpriseSales"));
                //Element(driver, Control("BrokerDropdown", "EnterpriseSales")).Click();
                ////Assert.Fail("Brokeraccount name not populated");
            }

            saveFooter(driver, testInReport, testName, testDataIteration);

            ThinkTime(3);
            WaitUntil(driver, Control("BrokerNameLabel", "EnterpriseSales"), 30);
            string ExistingName = Element(driver, Control("BrokerNameLabel", "EnterpriseSales")).GetAttribute("title");

            if (NewName == ExistingName)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "pass", "Broker Details field updated successfully", "Broker Details field verification");

            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Broker Details field is updated successfully", "Broker Details field verification");
                Assert.Fail("Broker Details field verification failed");
            }
        }




        public void RecordGlobalSearch(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string Account)
        {
            ThinkTime(7);

            WaitUntil(driver, Control("GlobalSearchInput", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("GlobalSearchInput", "EnterpriseSales"));
            Element(driver, Control("GlobalSearchInput", "EnterpriseSales")).SendKeys(Keys.Control + "a");
            Element(driver, Control("GlobalSearchInput", "EnterpriseSales")).SendKeys(Keys.Delete);
            Element(driver, Control("GlobalSearchInput", "EnterpriseSales")).SendKeys(Account);
            Element(driver, Control("GlobalSearchButton", "EnterpriseSales")).Click();
            ThinkTime(3);
        }



        public void VerifyContactFirstNameEditable(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string AreaLabel, string FirstName, string time)
        {

            string NewFirstName = FirstName + time;

            WaitUntil(driver, Control("FNameField", AreaLabel, "EnterpriseSales"), 30);
            MoveToElement(driver, Control("FNameField", AreaLabel, "EnterpriseSales"));
            Element(driver, Control("FNameField", AreaLabel, "EnterpriseSales")).SendKeys(Keys.Control + "a");
            Element(driver, Control("FNameField", AreaLabel, "EnterpriseSales")).SendKeys(Keys.Delete);
            Element(driver, Control("FNameField", AreaLabel, "EnterpriseSales")).SendKeys(NewFirstName);
            ThinkTime(2);


            saveFooter(driver, testInReport, testName, testDataIteration);
            AddLog(driver, testInReport, testName, testDataIteration, "pass", "Contact FirstName field is Updated", "Contact FirstName field is Updated");

        }


        //method to Verify Opportunity record is editable
        public void VerifyOpportunityRecordEditable(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string time, string TestContact)
        {
            ThinkTime(8);

            string NewContact = TestContact + time;

            if (Elements(driver, Control("OpportunityContactLabel", "EnterpriseSales")) > 0)
            {
                SelectOpportunityTab(driver, testInReport, testName, testDataIteration, "Summary");
                ThinkTime(2);
                WaitUntil(driver, Control("OpportunityContactLabel", "EnterpriseSales"), 30);
                MoveToElement(driver, Control("OpportunityContactLabel", "EnterpriseSales"));
                Element(driver, Control("OpportunityContactCloseButton", "EnterpriseSales")).Click();
                ThinkTime(2);
                WaitUntil(driver, Control("OpportunityContactInput", "EnterpriseSales"), 30);
                Element(driver, Control("OpportunityContactInput", "EnterpriseSales")).Click();
                ThinkTime(2);
                WaitUntil(driver, Control("OpportunityNewContactButton", "EnterpriseSales"), 30);
                Element(driver, Control("OpportunityNewContactButton", "EnterpriseSales")).Click();
                ThinkTime(3);
                WaitUntil(driver, Control("NewContactLname", "Opportunity"), 120);
                Element(driver, Control("NewContactLname", "Opportunity")).Click();
                Element(driver, Control("NewContactLname", "Opportunity")).SendKeys(NewContact);
                ThinkTime(2);

                WaitUntil(driver, Control("NewLanguageInput", "Opportunity"), 120);
                Element(driver, Control("NewLanguageInput", "Opportunity")).Click();
                ThinkTime(3);
                Element(driver, Control("NewLanguageInput", "Opportunity")).SendKeys("UK english");

                ThinkTime(3);
                WaitUntil(driver, Control("NewLanguageSelect", "Opportunity"), 120);
                MoveToElement(driver, Control("NewLanguageSelect", "Opportunity"));
                Element(driver, Control("NewLanguageSelect", "Opportunity")).Click();

                //WaitUntil(driver, Control("ContactLanguage", "EnterpriseSales"), 30);
                //MoveToElement(driver, Control("ContactLanguage", "EnterpriseSales"));
                //Element(driver, Control("ContactLanguage", "EnterpriseSales")).SendKeys("Uk english");

                //ThinkTime(3);

                //Element(driver, Control("ContactLanguageDropdown", "EnterpriseSales")).Click();

                //ThinkTime(3);

                ThinkTime(3);
                WaitUntil(driver, Control("OpportunityContactSave", "EnterpriseSales"), 120);
                Element(driver, Control("OpportunityContactSave", "EnterpriseSales")).Click();
            }

            else
            {
                Element(driver, Control("OpportunityContactInput", "EnterpriseSales")).Click();
                Element(driver, Control("OpportunityNewContactButton", "EnterpriseSales")).Click();

                WaitUntil(driver, Control("NewContactLname", "Opportunity"), 120);
                Element(driver, Control("NewContactLname", "Opportunity")).Click();
                Element(driver, Control("NewContactLname", "Opportunity")).SendKeys(NewContact);
                ThinkTime(2);


                MoveToElement(driver, Control("NewLanguageInput", "Opportunity"));
                Element(driver, Control("NewLanguageInput", "Opportunity")).SendKeys("UK english");

                ThinkTime(3);

                MoveToElement(driver, Control("NewLanguageSelect", "Opportunity"));
                Element(driver, Control("NewLanguageSelect", "Opportunity")).Click();


                //WaitUntil(driver, Control("ContactLanguage", "EnterpriseSales"), 30);
                //MoveToElement(driver, Control("ContactLanguage", "EnterpriseSales"));
                //Element(driver, Control("ContactLanguage", "EnterpriseSales")).SendKeys("Uk english");
                //ThinkTime(3);
                //Element(driver, Control("ContactLanguageDropdown", "EnterpriseSales")).Click();

                ThinkTime(3);
                MoveToElement(driver, Control("OpportunityContactSave", "EnterpriseSales"));
                Element(driver, Control("OpportunityContactSave", "EnterpriseSales")).Click();
            }

            ThinkTime(7);

            string ExistingAccount = Element(driver, Control("OpportunityContactLabel", "EnterpriseSales")).GetAttribute("title");

            if (NewContact == ExistingAccount)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Contact Fiield is Updated", "Opportunity edit verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Contact field is not Updated", "Opportunity edit verification");
                Assert.Fail("Opportunity edit verification Failed");
            }
        }

        //method to click on new Button
        public void ClickNewButton(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {
            ThinkTime(3);

            WaitUntil(driver, Control("OpportunityNewButton", "EnterpriseSales"), 60);
            MoveToElement(driver, Control("OpportunityNewButton", "EnterpriseSales"));
            Element(driver, Control("OpportunityNewButton", "EnterpriseSales")).Click();
            ThinkTime(8);
            int a = Elements(driver, Control("Oppformheader", "Opportunity"));
            ThinkTime(1);
            if (a > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Opportunity form displayed", "Opportunity form label verification");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "fail", "Opportunity form displayed", "Opportunity form label verification");

            }

        }

        //Method to verify BPF Stage field  window Sales process.
        public void VerifyBPFStageFieldITSalesBussinessProcess(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {
            ThinkTime(3);

            //Quality stage field verification

            WaitUntil(driver, Control("BPFQualifyStage", "Opportunity"), 30);
            MoveToElement(driver, Control("BPFQualifyStage", "Opportunity"));
            ElementHighlight(driver, Control("BPFQualifyStage", "Opportunity"));
            Element(driver, Control("BPFQualifyStage", "Opportunity")).Click();

            if (Elements(driver, Control("CompanyFieldTitle", "Opportunity")) > 0)

            {
                ElementHighlight(driver, Control("CompanyFieldTitle", "Opportunity"));
                if (Elements(driver, Control("ContactFieldTitle", "Opportunity")) > 0)
                {
                    ElementHighlight(driver, Control("ContactFieldTitle", "Opportunity"));
                    //if (Elements(driver, Control("ChannelFieldTitle", "Opportunity")) > 0)
                    //{
                    //    ElementHighlight(driver, Control("ChannelFieldTitle", "Opportunity"));
                    //    if (Elements(driver, Control("SalesQwnerTitle", "Opportunity")) > 0)
                    //    {
                    //        ElementHighlight(driver, Control("SalesQwnerTitle", "Opportunity"));

                    if (Elements(driver, Control("NextStageButton", "Opportunity")) > 0)
                    {
                        ElementHighlight(driver, Control("NextStageButton", "Opportunity"));

                        AddLog(driver, testInReport, testName, testDataIteration, "Pass", "All fields verified", "Bussiness proccess flow");

                    }
                    // }
                    // }
                }



            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Qualify stage Filed Verification failed", "BPF stage field verification failed");
                Assert.Fail("BPF Engage stage Field Verification failed");
            }

            //Develop stage field verification

            WaitUntil(driver, Control("BPFDevelopStage", "Opportunity"), 30);
            MoveToElement(driver, Control("BPFDevelopStage", "Opportunity"));
            ElementHighlight(driver, Control("BPFDevelopStage", "Opportunity"));
            Element(driver, Control("BPFDevelopStage", "Opportunity")).Click();

            if (Elements(driver, Control("CompanyDevelop", "Opportunity")) > 0)

            {
                ElementHighlight(driver, Control("CompanyDevelop", "Opportunity"));
                if (Elements(driver, Control("ContactDevelop", "Opportunity")) > 0)
                {
                    ElementHighlight(driver, Control("ContactDevelop", "Opportunity"));
                    if (Elements(driver, Control("CentreDevelop", "Opportunity")) > 0)
                    {
                        ElementHighlight(driver, Control("CentreDevelop", "Opportunity"));
                        //if (Elements(driver, Control("SalesQwnerDevelop", "Opportunity")) > 0)
                        //{
                        //    ElementHighlight(driver, Control("SalesQwnerDevelop", "Opportunity"));
                        //    if (Elements(driver, Control("EstimatetimeDevelop", "Opportunity")) > 0)
                        //    {
                        //        ElementHighlight(driver, Control("EstimatetimeDevelop", "Opportunity"));

                        AddLog(driver, testInReport, testName, testDataIteration, "Pass", "All fields verified", "Bussiness proccess flow");

                        //}
                        //}
                    }
                }



            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Develop stage Filed is not Visible", "BPF stage field verification failed");
                Assert.Fail("BPF Pitch stage Field Verification failed");
            }

            //propose stage field verification.

            WaitUntil(driver, Control("BPFProposeStage", "Opportunity"), 30);
            MoveToElement(driver, Control("BPFProposeStage", "Opportunity"));
            ElementHighlight(driver, Control("BPFProposeStage", "Opportunity"));
            Element(driver, Control("BPFProposeStage", "Opportunity")).Click();

            if (Elements(driver, Control("CompanyPurpose", "Opportunity")) > 0)

            {
                ElementHighlight(driver, Control("CompanyPurpose", "Opportunity"));
                if (Elements(driver, Control("ContactPurpose", "Opportunity")) > 0)
                {
                    ElementHighlight(driver, Control("ContactPurpose", "Opportunity"));
                    if (Elements(driver, Control("CentrePurpose", "Opportunity")) > 0)
                    {
                        ElementHighlight(driver, Control("CentrePurpose", "Opportunity"));
                        if (Elements(driver, Control("StartDatePurpose", "Opportunity")) > 0)
                        {
                            ElementHighlight(driver, Control("StartDatePurpose", "Opportunity"));
                            if (Elements(driver, Control("TicketNo", "Opportunity")) > 0)
                            {
                                ElementHighlight(driver, Control("TicketNo", "Opportunity"));


                                //if (Elements(driver, Control("EstimatedDateDevlop", "Opportunity")) > 0)
                                //{
                                //    ElementHighlight(driver, Control("EstimatedDateDevlop", "Opportunity"));
                                //    if (Elements(driver, Control("SalesownerPurpose", "Opportunity")) > 0)

                                //    {
                                //        ElementHighlight(driver, Control("SalesownerPurpose", "Opportunity"));
                                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "All fields verified", "Bussiness proccess flow");

                                //ScrollDowmopportunityForms(driver, testInReport, testDataIteration, testName);
                                // AddLog(driver, testInReport, testName, testDataIteration, "Pass", "All fields verified", "Bussiness proccess flow");
                                // }
                                //}
                            }
                        }
                    }
                }



            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Propose stage Filed is not verification failed", "BPF stage field verification failed");
                Assert.Fail("Negotiate Pitch stage Field Verification failed");
            }

            //Close stage field verification.
            WaitUntil(driver, Control("BPFCloswStage", "Opportunity"), 30);
            MoveToElement(driver, Control("BPFCloswStage", "Opportunity"));
            ElementHighlight(driver, Control("BPFCloswStage", "Opportunity"));

            Element(driver, Control("BPFCloswStage", "Opportunity")).Click();

            if (Elements(driver, Control("CompanyClose", "Opportunity")) > 0)

            {
                ElementHighlight(driver, Control("CompanyClose", "Opportunity"));
                if (Elements(driver, Control("ContactClose", "Opportunity")) > 0)
                {
                    ElementHighlight(driver, Control("ContactClose", "Opportunity"));
                    if (Elements(driver, Control("CentreClose", "Opportunity")) > 0)
                    {
                        ElementHighlight(driver, Control("CentreClose", "Opportunity"));
                        if (Elements(driver, Control("StartDateClose", "Opportunity")) > 0)
                        {
                            ElementHighlight(driver, Control("StartDateClose", "Opportunity"));
                            if (Elements(driver, Control("TicketNoClose", "Opportunity")) > 0)
                            {
                                ElementHighlight(driver, Control("TicketNoClose", "Opportunity"));
                                //if (Elements(driver, Control("SalesownerClose", "Opportunity")) > 0)
                                //{
                                //    ElementHighlight(driver, Control("SalesownerClose", "Opportunity"));

                                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "All fields verified", "Bussiness proccess flow");
                                //}
                            }
                        }
                    }
                }



            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Close stage Field is not Visible", "BPF stage field verification failed");
                Assert.Fail("Negotiate Close stage Field Verification failed");
            }

        }



        //Method to verify BPF Stage field Sales process.
        public void VerifyBPFStageFieldSalesProcess(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {
            ThinkTime(3);

            //engage stage field verification

            WaitUntil(driver, Control("BPFEngage", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("BPFEngage", "EnterpriseSales"));
            ElementHighlight(driver, Control("BPFEngage", "EnterpriseSales"));

            if (Elements(driver, Control("BPFEngage", "EnterpriseSales")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Engage stage Fiels is Visible", "BPF stage field verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Engage stage Filed is not Visible", "BPF stage field verification failed");
                Assert.Fail("BPF Engage stage Field Verification failed");
            }

            //Pitch stage field verification

            WaitUntil(driver, Control("BPFPitchField", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("BPFPitchField", "EnterpriseSales"));
            ElementHighlight(driver, Control("BPFPitchField", "EnterpriseSales"));

            if (Elements(driver, Control("BPFPitchField", "EnterpriseSales")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Pitch stage Fiels is Visible", "BPF stage field verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Pitch stage Filed is not Visible", "BPF stage field verification failed");
                Assert.Fail("BPF Pitch stage Field Verification failed");
            }

            //Negotiate stage field verification.

            WaitUntil(driver, Control("BPFNegotiateField", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("BPFNegotiateField", "EnterpriseSales"));
            ElementHighlight(driver, Control("BPFNegotiateField", "EnterpriseSales"));

            if (Elements(driver, Control("BPFNegotiateField", "EnterpriseSales")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Negotiate stage Fiels is Visible", "BPF stage field verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Negotiate stage Filed is not Visible", "BPF stage field verification failed");
                Assert.Fail("Negotiate Pitch stage Field Verification failed");
            }

            //Close stage field verification.

            WaitUntil(driver, Control("BPFCloseField", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("BPFCloseField", "EnterpriseSales"));
            ElementHighlight(driver, Control("BPFCloseField", "EnterpriseSales"));

            if (Elements(driver, Control("BPFCloseField", "EnterpriseSales")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Close stage Fields is Visible", "BPF stage field verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Close stage Field is not Visible", "BPF stage field verification failed");
                Assert.Fail("Negotiate Close stage Field Verification failed");
            }

        }



        //method to add new product in IT Sales Opportunity page.
        public void AddAndVerifyNewProduct(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {
            WaitUntil(driver, Control("SelectProductLineItemsTab", "Opportunity"), 30);
            MoveToElement(driver, Control("SelectProductLineItemsTab", "Opportunity"));
            Element(driver, Control("SelectProductLineItemsTab", "Opportunity")).Click();


            ThinkTime(3);

            if (Elements(driver, Control("VerifyPriceListLabel", "Opportunity")) > 0)
            {

                WaitUntil(driver, Control("VerifyPriceListLabel", "Opportunity"), 30);
                MoveToElement(driver, Control("VerifyPriceListLabel", "Opportunity"));
                Element(driver, Control("VerifyPriceListLabelCloseButton", "Opportunity")).Click();

                WaitUntil(driver, Control("PriceListInput", "Opportunity"), 30);
                MoveToElement(driver, Control("PriceListInput", "Opportunity"));
                Element(driver, Control("PriceListInput", "Opportunity")).SendKeys("Pricelist001");

                ThinkTime(3);
                WaitUntil(driver, Control("SelectPriceListDropdown", "Opportunity"), 30);
                MoveToElement(driver, Control("SelectPriceListDropdown", "Opportunity"));
                Element(driver, Control("SelectPriceListDropdown", "Opportunity")).Click();


            }

            else
            {
                WaitUntil(driver, Control("PriceListInput", "Opportunity"), 30);
                MoveToElement(driver, Control("PriceListInput", "Opportunity"));
                Element(driver, Control("PriceListInput", "Opportunity")).SendKeys("Pricelist001");

                ThinkTime(3);
                WaitUntil(driver, Control("SelectPriceListDropdown", "Opportunity"), 30);
                MoveToElement(driver, Control("SelectPriceListDropdown", "Opportunity"));
                Element(driver, Control("SelectPriceListDropdown", "Opportunity")).Click();

            }

            WaitUntil(driver, Control("SelectAddProductButton", "Opportunity"), 30);
            MoveToElement(driver, Control("SelectAddProductButton", "Opportunity"));
            Element(driver, Control("SelectAddProductButton", "Opportunity")).Click();

            ThinkTime(3);

            WaitUntil(driver, Control("ExistingProductInputField", "Opportunity"), 30);
            MoveToElement(driver, Control("ExistingProductInputField", "Opportunity"));
            Element(driver, Control("ExistingProductSearchButton", "Opportunity")).Click();

            ThinkTime(2);
            WaitUntil(driver, Control("SelectExistingProductDropdown", "Opportunity"), 30);
            MoveToElement(driver, Control("SelectExistingProductDropdown", "Opportunity"));
            Element(driver, Control("SelectExistingProductDropdown", "Opportunity")).Click();

            ThinkTime(2);
            WaitUntil(driver, Control("SaveButtonProduct", "Opportunity"), 30);
            MoveToElement(driver, Control("SaveButtonProduct", "Opportunity"));
            Element(driver, Control("SaveButtonProduct", "Opportunity")).Click();

            ThinkTime(2);

            if (Elements(driver, Control("VerifyNewProductStatus", "Opportunity")) > 0)
            {
                ElementHighlight(driver, Control("VerifyNewProductStatus", "EnterpriseSales"));
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "New Product is created successfully", "New product creation verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "New product is not created", "New product creation verification");
                Assert.Fail("New product creation verification failed");
            }

        }



        //method to verify BFP stage flow
        public void VerifyBPFStageFlowSalesProcess(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {
            ThinkTime(3);

            WaitUntil(driver, Control("EngageButton", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("EngageButton", "EnterpriseSales"));
            ElementHighlight(driver, Control("EngageButton", "EnterpriseSales"));
            Element(driver, Control("EngageButton", "EnterpriseSales")).Click();

            ThinkTime(7);

            //engage stage checkbox 1 verification

            if (Elements(driver, Control("BPFEngageCkbox1", "EnterpriseSales")) > 0)
            {
                ElementHighlight(driver, Control("BPFEngageCkbox1", "EnterpriseSales"));
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Pain analysis & buying vision Checkbox is Visible", "Engage stage checkbox verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Pain analysis & buying vision Checkbox is not Visible", "Engage stage checkbox verification failed");
                Assert.Fail("BPF Engage stage Pain analysis & buying vision checkbox Verification failed");
            }

            //Engage tab checkbox 2 verification

            if (Elements(driver, Control("BPFEngageCkbox2", "EnterpriseSales")) > 0)
            {
                ElementHighlight(driver, Control("BPFEngageCkbox2", "EnterpriseSales"));
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Present IWG concept Checkbox is Visible", "Engage stage checkbox verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Present IWG concept Checkbox is not Visible", "Engage stage checkbox verification failed");
                Assert.Fail("BPF Engage stage Present IWG concept checkbox Verification failed");
            }


            ThinkTime(3);

            WaitUntil(driver, Control("BPFPitchField", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("BPFPitchField", "EnterpriseSales"));
            ElementHighlight(driver, Control("BPFPitchField", "EnterpriseSales"));
            Element(driver, Control("BPFPitchField", "EnterpriseSales")).Click();

            //Pitch stage checkbox 1 verification

            if (Elements(driver, Control("BPFPitchCkbox1", "EnterpriseSales")) > 0)
            {
                ElementHighlight(driver, Control("BPFPitchCkbox1", "EnterpriseSales"));
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Build solution RPF Checkbox is Visible", "Engage stage checkbox verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Build solution RPF Checkbox is not Visible", "Engage stage checkbox verification failed");
                Assert.Fail("BPF Engage stage Build solution RPF checkbox Verification failed");
            }

            //Pitch tab checkbox 2 verification

            if (Elements(driver, Control("BPFPitchCkbox2", "EnterpriseSales")) > 0)
            {
                ElementHighlight(driver, Control("BPFPitchCkbox2", "EnterpriseSales"));
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Propose solution RFP Checkbox is Visible", "Engage stage checkbox verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Propose solution RFP Checkbox is not Visible", "Engage stage checkbox verification failed");
                Assert.Fail("BPF Engage stage Propose solution RFP checkbox Verification failed");
            }

            ThinkTime(3);

            WaitUntil(driver, Control("BPFNegotiateField", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("BPFNegotiateField", "EnterpriseSales"));
            ElementHighlight(driver, Control("BPFNegotiateField", "EnterpriseSales"));
            Element(driver, Control("BPFNegotiateField", "EnterpriseSales")).Click();

            //Negotiate stage checkbox 1 verification

            if (Elements(driver, Control("BPFNegotiateCkbox1", "EnterpriseSales")) > 0)
            {
                ElementHighlight(driver, Control("BPFNegotiateCkbox1", "EnterpriseSales"));
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Reiterate value Checkbox is Visible", "Engage stage checkbox verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Reiterate value Checkbox is not Visible", "Engage stage checkbox verification failed");
                Assert.Fail("BPF Engage stage Reiterate value checkbox Verification failed");
            }

            //Negotiate tab checkbox 2 verification

            if (Elements(driver, Control("BPFNegotiateCkbox2", "EnterpriseSales")) > 0)
            {
                ElementHighlight(driver, Control("BPFNegotiateCkbox2", "EnterpriseSales"));
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Finalize T&Cs Checkbox is Visible", "Engage stage checkbox verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Finalize T&Cs Checkbox is not Visible", "Engage stage checkbox verification failed");
                Assert.Fail("BPF Engage stage Finalize T&Cs checkbox Verification failed");
            }

            ThinkTime(3);

            WaitUntil(driver, Control("BPFCloseField", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("BPFCloseField", "EnterpriseSales"));
            ElementHighlight(driver, Control("BPFCloseField", "EnterpriseSales"));
            Element(driver, Control("BPFCloseField", "EnterpriseSales")).Click();

            //Close stage checkbox 1 verification

            if (Elements(driver, Control("BPFCloseCkbox1", "EnterpriseSales")) > 0)
            {
                ElementHighlight(driver, Control("BPFCloseCkbox1", "EnterpriseSales"));
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Sign agreement Checkbox is Visible", "Engage stage checkbox verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Sign agreement Checkbox is not Visible", "Engage stage checkbox verification failed");
                Assert.Fail("BPF Engage stage Sign agreement checkbox Verification failed");
            }

        }


        //Method to create new opportunity.

        public string CreateNewOpportunityEntetrprise(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string AccountName, string Time, string Country, string Currency, string Channel, string MajorSource, string MinorSource, string contact)
        {



            string NewAccountName = AccountName + Time;
            string NewContact = contact + Time;
            ClickonNewButton(driver, testInReport, testName, testDataIteration, "New");
            DiscardChanges(driver, testInReport, testName, testDataIteration);
            WaitUntil(driver, Control("NewContactInput", "Opportunity"), 60);
            JSClick(driver, Control("NewContactInput", "Opportunity"));
            ThinkTime(2);
            WaitUntil(driver, Control("NewContactButton", "Opportunity"), 60);
            Element(driver, Control("NewContactButton", "Opportunity")).Click();

            ThinkTime(2);

            WaitUntil(driver, Control("NewContactLname", "Opportunity"), 60);
            Element(driver, Control("NewContactLname", "Opportunity")).Click();
            Element(driver, Control("NewContactLname", "Opportunity")).SendKeys(NewContact);


            MoveToElement(driver, Control("NewLanguageInput", "Opportunity"));
            Element(driver, Control("NewLanguageInput", "Opportunity")).SendKeys(Keys.Control + "a");
            Element(driver, Control("NewLanguageInput", "Opportunity")).SendKeys(Keys.Delete);
            Element(driver, Control("NewLanguageInput", "Opportunity")).SendKeys("UK english");
            WaitUntil(driver, Control("NewLanguageSelect", "Opportunity"), 120);
            Element(driver, Control("NewLanguageSelect", "Opportunity")).Click();


            //Add email and phone number.
            scrollDownQCContact(driver, testInReport, testName, testDataIteration);
            WaitUntil(driver, Control("LeadTopicEmail", "Opportunity"), 60);
            Element(driver, Control("LeadTopicEmail", "Opportunity")).Click();
            Element(driver, Control("LeadTopicEmail", "Opportunity")).SendKeys("TestAutomation@getnada.com");
            WaitUntil(driver, Control("TopicConBusinessPhoneInput", "Opportunity"), 60);
            Element(driver, Control("TopicConBusinessPhoneInput", "Opportunity")).Click();
            Element(driver, Control("TopicConBusinessPhoneInput", "Opportunity")).SendKeys("+917777777777");


            //Element(driver, Control("Contactemailfield", "36.1_Dashboard")).SendKeys("test007@gmail.com");

            if (Elements(driver, Control("NewContactSaveButton1", "Opportunity")) > 0)
            {
                MoveToElement(driver, Control("NewContactSaveButton1", "Opportunity"));
                Element(driver, Control("NewContactSaveButton1", "Opportunity")).Click();
                ThinkTime(3);
            }
            else
            {
                ThinkTime(2);
                WaitUntil(driver, Control("NewContactSaveButton", "Opportunity"), 60);
                MoveToElement(driver, Control("NewContactSaveButton", "Opportunity"));
                Element(driver, Control("NewContactSaveButton", "Opportunity")).Click();
                ThinkTime(3);
            }

            scrollDownOpportunityEnterpriseCust(driver, testInReport, testDataIteration, testName, "500");
            ThinkTime(3);

            ////Add new Country
            //WaitUntil(driver, Control("NewCountryInput", "EnterpriseSales"), 30);
            //MoveToElement(driver, Control("NewCountryInput", "EnterpriseSales"));
            //Element(driver, Control("NewCountryInput", "EnterpriseSales")).SendKeys(Keys.Control + "a");
            //Element(driver, Control("NewCountryInput", "EnterpriseSales")).SendKeys(Keys.Delete);
            //Element(driver, Control("NewCountryInput", "EnterpriseSales")).SendKeys(Country);
            //ThinkTime(6);
            //WaitUntil(driver, Control("SelectCountryDropdown", Country, "EnterpriseSales"), 360);
            //MoveToElement(driver, Control("SelectCountryDropdown", Country, "EnterpriseSales"));
            //Element(driver, Control("CustomerDropdownSelect", "ITSales")).Click();
            //ThinkTime(3);

            WaitUntil(driver, Control("RecomentedBussinessCentreInputButton", "Opportunity"), 30);
            Element(driver, Control("RecomentedBussinessCentreInputButton", "Opportunity")).SendKeys("Oslo, Spaces Nydalen");

            WaitUntil(driver, Control("Languagedropdown", "EnterpriseSales"), 100);
            Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();
            // "Languagedropdown","EnterpriseSales"

            scrollDownOpportunityEnterpriseCust(driver, testInReport, testDataIteration, testName, "200");
            WaitUntil(driver, Control("Channel", "Opportunity"), 60);
            MoveToElement(driver, Control("Channel", "Opportunity"));
            Element(driver, Control("Channel", "Opportunity")).SendKeys(Keys.Control + "a");
            Element(driver, Control("Channel", "Opportunity")).SendKeys(Keys.Delete);
            Element(driver, Control("Channel", "Opportunity")).SendKeys(Channel);
            scrollDownOpportunityEnterpriseCust(driver, testInReport, testDataIteration, testName, "200");
            WaitUntil(driver, Control("SelectSourceDropdown1", "Generic"), 30);
            Element(driver, Control("SelectSourceDropdown1", "Generic")).Click();
            scrollDownOpportunityEnterpriseCust(driver, testInReport, testDataIteration, testName, "200");

            WaitUntil(driver, Control("NewMajorSourceInput", "Opportunity"), 360);
            Element(driver, Control("NewMajorSourceInput", "Opportunity")).Click();
        
            Element(driver, Control("NewMajorSourceInput", "Opportunity")).SendKeys(Keys.Control + "a");
            Element(driver, Control("NewMajorSourceInput", "Opportunity")).SendKeys(Keys.Delete);
            Element(driver, Control("NewMajorSourceInput", "Opportunity")).SendKeys(MajorSource);

            WaitUntil(driver, Control("NewMajorSourceSelect", "Opportunity"), 360);
            Element(driver, Control("NewMajorSourceSelect", "Opportunity")).Click();

            ThinkTime(2);
            WaitUntil(driver, Control("NewMinorSourceInput", "Opportunity"), 360);
            Element(driver, Control("NewMinorSourceInput", "Opportunity")).Click();
            Element(driver, Control("NewMinorSourceInput", "Opportunity")).SendKeys(Keys.Control + "a");
            Element(driver, Control("NewMinorSourceInput", "Opportunity")).SendKeys(Keys.Delete);
            Element(driver, Control("NewMinorSourceInput", "Opportunity")).SendKeys(MinorSource);

            WaitUntil(driver, Control("NewMinorSourceSelect", "Opportunity"), 360);
            MoveToElement(driver, Control("NewMinorSourceSelect", "Opportunity"));
            Element(driver, Control("NewMinorSourceSelect", "Opportunity")).Click();

            saveFooter(driver, testInReport, testName, testDataIteration);
            ThinkTime(2);
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Opportunity Created Successfully", "New Opportunity Verification");
            return NewContact;
        }

        //Method to create new opportunity.

        public string CreateNewOpportunityEntetrpriseInitialContact(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string AccountName, string Time, string Country, string Currency, string Channel, string MajorSource, string MinorSource, string contact)
        {

            ThinkTime(3);

            string NewAccountName = AccountName + Time;
            string NewContact = contact + Time;
            ClickonNewButton(driver, testInReport, testName, testDataIteration, "New");
            DiscardChanges(driver, testInReport, testName, testDataIteration);
            WaitUntil(driver, Control("NewContactInput", "Opportunity"), 60);
            JSClick(driver, Control("NewContactInput", "Opportunity"));
            ThinkTime(2);
            WaitUntil(driver, Control("NewContactButton", "Opportunity"), 60);
            Element(driver, Control("NewContactButton", "Opportunity")).Click();

            ThinkTime(2);

            WaitUntil(driver, Control("NewContactLname", "Opportunity"), 60);
            Element(driver, Control("NewContactLname", "Opportunity")).Click();
            Element(driver, Control("NewContactLname", "Opportunity")).SendKeys(NewContact);
            ThinkTime(2);


            MoveToElement(driver, Control("NewLanguageInput", "Opportunity"));
            Element(driver, Control("NewLanguageInput", "Opportunity")).SendKeys(Keys.Control + "a");
            Element(driver, Control("NewLanguageInput", "Opportunity")).SendKeys(Keys.Delete);
            Element(driver, Control("NewLanguageInput", "Opportunity")).SendKeys("UK english");
            ThinkTime(3);
            WaitUntil(driver, Control("NewLanguageSelect", "Opportunity"), 120);
            MoveToElement(driver, Control("NewLanguageSelect", "Opportunity"));
            Element(driver, Control("NewLanguageSelect", "Opportunity")).Click();
            ThinkTime(3);


            Element(driver, Control("Contactemailfield", "36.1_Dashboard")).SendKeys("test007@gmail.com");

            if (Elements(driver, Control("NewContactSaveButton1", "Opportunity")) > 0)
            {
                MoveToElement(driver, Control("NewContactSaveButton1", "Opportunity"));
                Element(driver, Control("NewContactSaveButton1", "Opportunity")).Click();
                ThinkTime(3);
            }
            else
            {
                ThinkTime(2);
                WaitUntil(driver, Control("NewContactSaveButton", "Opportunity"), 60);
                MoveToElement(driver, Control("NewContactSaveButton", "Opportunity"));
                Element(driver, Control("NewContactSaveButton", "Opportunity")).Click();
                ThinkTime(3);
            }

            scrollDownOpportunityEnterpriseCust(driver, testInReport, testDataIteration, testName, "600");
            ThinkTime(3);

            //Add new Country
            WaitUntil(driver, Control("NewCountryInput", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("NewCountryInput", "EnterpriseSales"));
            Element(driver, Control("NewCountryInput", "EnterpriseSales")).SendKeys(Keys.Control + "a");
            Element(driver, Control("NewCountryInput", "EnterpriseSales")).SendKeys(Keys.Delete);
            Element(driver, Control("NewCountryInput", "EnterpriseSales")).SendKeys(Country);
            ThinkTime(6);
            WaitUntil(driver, Control("SelectCountryDropdown", Country, "EnterpriseSales"), 360);
            MoveToElement(driver, Control("SelectCountryDropdown", Country, "EnterpriseSales"));
            Element(driver, Control("CustomerDropdownSelect", "ITSales")).Click();
            ThinkTime(3);

            WaitUntil(driver, Control("RecomentedBussinessCentreInputButton", "Opportunity"), 30);
            MoveToElement(driver, Control("RecomentedBussinessCentreInputButton", "Opportunity"));
            Element(driver, Control("RecomentedBussinessCentreInputButton", "Opportunity")).SendKeys("Oslo, Spaces Nydalen");

            ThinkTime(2);
            WaitUntil(driver, Control("Languagedropdown", "EnterpriseSales"), 100);
            MoveToElement(driver, Control("Languagedropdown", "EnterpriseSales"));
            Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();
            // "Languagedropdown","EnterpriseSales"

            scrollDownOpportunityEnterpriseCust(driver, testInReport, testDataIteration, testName, "200");
            ThinkTime(3);
            WaitUntil(driver, Control("Channel", "Opportunity"), 60);
            MoveToElement(driver, Control("Channel", "Opportunity"));
            Element(driver, Control("Channel", "Opportunity")).SendKeys(Keys.Control + "a");
            Element(driver, Control("Channel", "Opportunity")).SendKeys(Keys.Delete);
            Element(driver, Control("Channel", "Opportunity")).SendKeys(Channel);

            ThinkTime(3);
            WaitUntil(driver, Control("SelectSourceDropdown1", "Generic"), 30);
            Element(driver, Control("SelectSourceDropdown1", "Generic")).Click();
            ThinkTime(3);
            scrollDownOpportunityEnterpriseCust(driver, testInReport, testDataIteration, testName, "100");
            WaitUntil(driver, Control("NewMajorSourceInput", "Opportunity"), 360);
            Element(driver, Control("NewMajorSourceInput", "Opportunity")).Click();
            ThinkTime(3);
            Element(driver, Control("NewMajorSourceInput", "Opportunity")).SendKeys(Keys.Control + "a");
            Element(driver, Control("NewMajorSourceInput", "Opportunity")).SendKeys(Keys.Delete);
            Element(driver, Control("NewMajorSourceInput", "Opportunity")).SendKeys(MajorSource);
            ThinkTime(2);
            WaitUntil(driver, Control("NewMajorSourceSelect", "Opportunity"), 360);
            MoveToElement(driver, Control("NewMajorSourceSelect", "Opportunity"));
            Element(driver, Control("NewMajorSourceSelect", "Opportunity")).Click();

            ThinkTime(3);
            WaitUntil(driver, Control("NewMinorSourceInput", "Opportunity"), 360);
            MoveToElement(driver, Control("NewMinorSourceInput", "Opportunity"));
            Element(driver, Control("NewMinorSourceInput", "Opportunity")).Click();
            ThinkTime(3);
            Element(driver, Control("NewMinorSourceInput", "Opportunity")).SendKeys(Keys.Control + "a");
            Element(driver, Control("NewMinorSourceInput", "Opportunity")).SendKeys(Keys.Delete);
            Element(driver, Control("NewMinorSourceInput", "Opportunity")).SendKeys(MinorSource);
            ThinkTime(5);
            WaitUntil(driver, Control("NewMinorSourceSelect", "Opportunity"), 360);
            MoveToElement(driver, Control("NewMinorSourceSelect", "Opportunity"));
            Element(driver, Control("NewMinorSourceSelect", "Opportunity")).Click();
            ThinkTime(3);
            saveFooter(driver, testInReport, testName, testDataIteration);
            ThinkTime(5);
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Opportunity Created Successfully", "New Opportunity Verification");
            return NewContact;
        }


        public void VerifyOutboundCallcontactdonestatusNo(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string Activityname, string Time, string oppname)
        {
            string[] calloutcome = { "Not Reachable / Left Voicemail", "Call Dropped", "Customer Not Reached", "Wrong Contact Details" };

            for (int i = 0; i < 4; i++)
            {
                SelectOpportunityTab(driver, testInReport, testName, testDataIteration, "Activities");
                NewActivity(driver, testInReport, testName, testDataIteration);

                string NewSubject = Activityname + Time;
                ThinkTime(3);
                WaitUntil(driver, Control("PhoneCallSubject", "EnterpriseSales"), 30);
                MoveToElement(driver, Control("PhoneCallSubject", "EnterpriseSales"));
                ThinkTime(3);
                Element(driver, Control("PhoneCallSubject", "EnterpriseSales")).SendKeys(Keys.Control + "a");
                Element(driver, Control("PhoneCallSubject", "EnterpriseSales")).SendKeys(Keys.Delete);
                ThinkTime(3);
                Element(driver, Control("PhoneCallSubject", "EnterpriseSales")).SendKeys(NewSubject);
                ThinkTime(3);

                if (Elements(driver, Control("Outboundcall", "Opportunity")) == 0)
                {
                    Element(driver, Control("Directionfield", "Opportunity")).Click();
                    ThinkTime(3);
                }
                Element(driver, Control("CallOutcome", "Opportunity")).Click();


                Select(Element(driver, Control("CallOutcome", "Opportunity"))).SelectByText(calloutcome[i]);
                ThinkTime(3);
                Element(driver, Control("SaveContactSales", "Opportunity")).Click();
                ThinkTime(7);

                // Advanced Find
                AdvancedFindhidingpurecloudhandle(driver, testInReport, testName, testDataIteration);
                ThinkTime(8);

                // Add columns
                driver.SwitchTo().DefaultContent();
                ThinkTime(4);
                WaitUntil(driver, Control("EditColumnEmail", "GenericOld"), 60);
                Element(driver, Control("EditColumnEmail", "GenericOld")).Click();
                ThinkTime(4);

                SwitchToFrame(driver, "InlineDialog_Iframe");
                ThinkTime(4);
                SwitchToFrame(driver, "viewEditor");
                ThinkTime(3);

                Element(driver, Control("AddColumns", "GenericOld")).Click();
                ThinkTime(4);
                driver.SwitchTo().DefaultContent();
                SwitchToFrame(driver, "InlineDialog1_Iframe");
                ElementHighlight(driver, Control("Addinitialcontactcolumn", "Opportunity"));
                MoveToElement(driver, Control("Addinitialcontactcolumn", "Opportunity"));
                ThinkTime(2);
                Element(driver, Control("Addinitialcontactcolumn", "Opportunity")).Click();
                Element(driver, Control("OKButton", "Generic")).Click();
                driver.SwitchTo().DefaultContent();
                SwitchToFrame(driver, "InlineDialog_Iframe");
                Element(driver, Control("EditColumnsPopupOk", "GenericOld")).Click();


                SwitchToFrame(driver, "contentIFrame0");
                MoveToElement(driver, Control("AdvanceFindselect", "Opportunity"));
                ThinkTime(2);
                Element(driver, Control("AdvanceFindselect", "Opportunity")).Click();
                ThinkTime(1);
                Select(Element(driver, Control("AdvancefindSelectvalue", "Opportunity"))).SelectByText("Opportunity");
                ThinkTime(2);
                MoveToElement(driver, Control("Equalcondition", "Opportunity"));
                ThinkTime(2);
                Element(driver, Control("Equalcondition", "Opportunity")).Click();
                ThinkTime(1);
                Select(Element(driver, Control("Equalcondition", "Opportunity"))).SelectByText("Equals");
                ThinkTime(2);

                MoveToElement(driver, Control("EnterResourceName", "Opportunity"));
                ThinkTime(3);
                Element(driver, Control("AdvancefindValuelookup", "Opportunity")).Click();
                ThinkTime(5);
                //SwitchToFrame(driver, "resultFrame");
                //ThinkTime(3);
                driver.SwitchTo().DefaultContent();
                ThinkTime(2);
                //SwitchToFrame(driver, "contentIFrame0");
                //ThinkTime(8);
                SwitchToFrame(driver, "InlineDialog_Iframe");
                ThinkTime(5);

                WaitUntil(driver, Control("SearchRecordValue", "SharePoint"), 30);
                Element(driver, Control("SearchRecordValue", "SharePoint")).Click();
                Element(driver, Control("SearchRecordValue", "SharePoint")).SendKeys(oppname);

                Element(driver, Control("SearchValueRecordButton", "SharePoint")).Click();

                Element(driver, Control("SelectValueResult", oppname, "SharePoint")).Click();

                Element(driver, Control("SelectSearchValue", "SharePoint")).Click();

                Element(driver, Control("ClickButtonAdd", "SharePoint")).Click();


                driver.SwitchTo().DefaultContent();
                Element(driver, Control("advFindRibbons", "Results", "GenericOld")).Click();
                SwitchToFrame(driver, "contentIFrame0");
                SwitchToFrame(driver, "resultFrame");
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Result page is displayed", "Results Page");
                WaitUntil(driver, Control("LastColumn", "Generic"), 240);
                ElementHighlight(driver, Control("LastColumn", "Generic"));
                string lastcolumn = Element(driver, Control("LastColumn", "Generic")).Text.ToString();
                ThinkTime(4);
                driver.SwitchTo().DefaultContent();

                if (lastcolumn != "Yes")
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Locatin field is Cleared successfully", "locationfield validation");
                    Assert.Fail();

                }
                else
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Location Field is cleared successfully", "Location field validation");

                }
                ThinkTime(4);
                driver.Quit();
                driver.SwitchTo().DefaultContent();
            }
        }


        public void Verifyinitialcontactdonestatus(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string oppname)
        {

            // Advanced Find
            AdvancedFind(driver, testInReport, testName, testDataIteration);
            ThinkTime(8);





            driver.SwitchTo().DefaultContent();
            ThinkTime(4);
            WaitUntil(driver, Control("EditColumnEmail", "GenericOld"), 60);
            Element(driver, Control("EditColumnEmail", "GenericOld")).Click();
            ThinkTime(4);

            SwitchToFrame(driver, "InlineDialog_Iframe");
            ThinkTime(4);
            SwitchToFrame(driver, "viewEditor");
            ThinkTime(3);

            Element(driver, Control("AddColumns", "GenericOld")).Click();
            ThinkTime(4);
            driver.SwitchTo().DefaultContent();
            SwitchToFrame(driver, "InlineDialog1_Iframe");
            ElementHighlight(driver, Control("Addinitialcontactcolumn", "Opportunity"));
            MoveToElement(driver, Control("Addinitialcontactcolumn", "Opportunity"));
            ThinkTime(2);
            Element(driver, Control("Addinitialcontactcolumn", "Opportunity")).Click();
            Element(driver, Control("OKButton", "Generic")).Click();
            driver.SwitchTo().DefaultContent();
            SwitchToFrame(driver, "InlineDialog_Iframe");
            Element(driver, Control("EditColumnsPopupOk", "GenericOld")).Click();


            SwitchToFrame(driver, "contentIFrame0");
            MoveToElement(driver, Control("AdvanceFindselect", "Opportunity"));
            ThinkTime(2);
            Element(driver, Control("AdvanceFindselect", "Opportunity")).Click();
            ThinkTime(1);
            Select(Element(driver, Control("AdvancefindSelectvalue", "Opportunity"))).SelectByText("Opportunity");
            ThinkTime(2);
            MoveToElement(driver, Control("Equalcondition", "Opportunity"));
            ThinkTime(2);
            Element(driver, Control("Equalcondition", "Opportunity")).Click();
            ThinkTime(1);
            Select(Element(driver, Control("Equalcondition", "Opportunity"))).SelectByText("Equals");
            ThinkTime(2);

            MoveToElement(driver, Control("EnterResourceName", "Opportunity"));
            ThinkTime(3);
            Element(driver, Control("AdvancefindValuelookup", "Opportunity")).Click();
            ThinkTime(5);
            //SwitchToFrame(driver, "resultFrame");
            //ThinkTime(3);
            driver.SwitchTo().DefaultContent();
            ThinkTime(2);
            //SwitchToFrame(driver, "contentIFrame0");
            //ThinkTime(8);
            SwitchToFrame(driver, "InlineDialog_Iframe");
            ThinkTime(5);



            ThinkTime(2);
            WaitUntil(driver, Control("SearchRecordValue", "SharePoint"), 30);
            Element(driver, Control("SearchRecordValue", "SharePoint")).Click();
            Element(driver, Control("SearchRecordValue", "SharePoint")).SendKeys(oppname);
            ThinkTime(2);
            WaitUntil(driver, Control("SearchValueRecordButton", "SharePoint"), 30);
            Element(driver, Control("SearchValueRecordButton", "SharePoint")).Click();
            ThinkTime(2);
            WaitUntil(driver, Control("FirstCheckBox", "CommonObj"), 30);
            Element(driver, Control("FirstCheckBox", "CommonObj")).Click();
            ThinkTime(2);
            WaitUntil(driver, Control("SelectSearchValue", "SharePoint"), 30);
            Element(driver, Control("SelectSearchValue", "SharePoint")).Click();
            ThinkTime(2);
            WaitUntil(driver, Control("ClickButtonAdd", "SharePoint"), 30);
            Element(driver, Control("ClickButtonAdd", "SharePoint")).Click();


            driver.SwitchTo().DefaultContent();
            Element(driver, Control("advFindRibbons", "Results", "GenericOld")).Click();
            SwitchToFrame(driver, "contentIFrame0");
            SwitchToFrame(driver, "resultFrame");
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Result page is displayed", "Results Page");
            WaitUntil(driver, Control("LastColumn", "Generic"), 240);
            ElementHighlight(driver, Control("LastColumn", "Generic"));
            string lastcolumn = Element(driver, Control("LastColumn", "Generic")).Text.ToString();
            ThinkTime(4);
            driver.SwitchTo().DefaultContent();

            if (lastcolumn != "Yes")
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Locatin field is Cleared successfully", "locationfield validation");
                Assert.Fail();

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Location Field is cleared successfully", "Location field validation");

            }
            ThinkTime(4);
            // driver.Close();

        }


        public void VerifyInboundCallcontactdonestatusNo(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string Activityname, string Time, string oppname)
        {
            string[] calloutcome = { "Customer Not Reached", "Wrong Contact Details" };
            string parent = driver.CurrentWindowHandle;
            for (int i = 0; i < 2; i++)
            {
                //SelectingActiveCell(driver, testInReport, testName, testDataIteration);
                SelectOpportunityTab(driver, testInReport, testName, testDataIteration, "Activities");
                ThinkTime(3);
                NewActivity(driver, testInReport, testName, testDataIteration);

                string NewSubject = Activityname + Time;
                ThinkTime(3);
                WaitUntil(driver, Control("PhoneCallSubject", "EnterpriseSales"), 30);
                MoveToElement(driver, Control("PhoneCallSubject", "EnterpriseSales"));
                ThinkTime(3);
                Element(driver, Control("PhoneCallSubject", "EnterpriseSales")).SendKeys(Keys.Control + "a");
                Element(driver, Control("PhoneCallSubject", "EnterpriseSales")).SendKeys(Keys.Delete);
                ThinkTime(3);

                Element(driver, Control("PhoneCallSubject", "EnterpriseSales")).SendKeys(NewSubject);
                ThinkTime(3);

                if (Elements(driver, Control("Outboundcall", "Opportunity")) > 0)
                {
                    Element(driver, Control("Directionfield", "Opportunity")).Click();
                    ThinkTime(3);
                }

                Select(Element(driver, Control("CallOutcome", "Opportunity"))).SelectByText(calloutcome[i]);
                ThinkTime(3);
                Element(driver, Control("SaveContactSales", "Opportunity")).Click();
                ThinkTime(7);

                // Advanced Find
                AdvancedFind(driver, testInReport, testName, testDataIteration);
                ThinkTime(8);

                // Add columns
                driver.SwitchTo().DefaultContent();
                ThinkTime(4);
                WaitUntil(driver, Control("EditColumnEmail", "GenericOld"), 60);
                Element(driver, Control("EditColumnEmail", "GenericOld")).Click();
                ThinkTime(4);

                SwitchToFrame(driver, "InlineDialog_Iframe");
                ThinkTime(4);
                SwitchToFrame(driver, "viewEditor");
                ThinkTime(3);

                Element(driver, Control("AddColumns", "GenericOld")).Click();
                ThinkTime(4);
                driver.SwitchTo().DefaultContent();
                SwitchToFrame(driver, "InlineDialog1_Iframe");
                ThinkTime(2);
                WaitUntil(driver, Control("Addinitialcontactcolumn", "Opportunity"), 60);
                ElementHighlight(driver, Control("Addinitialcontactcolumn", "Opportunity"));
                MoveToElement(driver, Control("Addinitialcontactcolumn", "Opportunity"));
                ThinkTime(2);
                Element(driver, Control("Addinitialcontactcolumn", "Opportunity")).Click();
                Element(driver, Control("OKButton", "Generic")).Click();
                driver.SwitchTo().DefaultContent();
                SwitchToFrame(driver, "InlineDialog_Iframe");
                Element(driver, Control("EditColumnsPopupOk", "GenericOld")).Click();


                SwitchToFrame(driver, "contentIFrame0");
                MoveToElement(driver, Control("AdvanceFindselect", "Opportunity"));
                ThinkTime(2);
                Element(driver, Control("AdvanceFindselect", "Opportunity")).Click();
                ThinkTime(1);
                Select(Element(driver, Control("AdvancefindSelectvalue", "Opportunity"))).SelectByText("Opportunity");
                ThinkTime(4);
                MoveToElement(driver, Control("Equalcondition", "Opportunity"));
                ThinkTime(2);
                Element(driver, Control("Equalcondition", "Opportunity")).Click();
                ThinkTime(3);
                Select(Element(driver, Control("Equalcondition", "Opportunity"))).SelectByText("Equals");
                ThinkTime(2);
                MoveToElement(driver, Control("EnterValue", "Opportunity"));

                Element(driver, Control("AdvancefindValuelookup", "Opportunity")).Click();
                ThinkTime(5);
                driver.SwitchTo().DefaultContent();
                SwitchToFrame(driver, "InlineDialog_Iframe");
                ThinkTime(2);
                WaitUntil(driver, Control("SearchRecordValue", "SharePoint"), 30);
                Element(driver, Control("SearchRecordValue", "SharePoint")).Click();
                Element(driver, Control("SearchRecordValue", "SharePoint")).SendKeys(oppname);
                ThinkTime(2);
                WaitUntil(driver, Control("SearchValueRecordButton", "SharePoint"), 30);
                Element(driver, Control("SearchValueRecordButton", "SharePoint")).Click();

                ThinkTime(2);
                WaitUntil(driver, Control("SelectValueResult11", "SharePoint"), 30);
                Element(driver, Control("SelectValueResult11", "SharePoint")).Click();

                ThinkTime(2);
                WaitUntil(driver, Control("SelectSearchValue", "SharePoint"), 30);
                Element(driver, Control("SelectSearchValue", "SharePoint")).Click();

                ThinkTime(2);
                WaitUntil(driver, Control("ClickButtonAdd", "SharePoint"), 30);
                Element(driver, Control("ClickButtonAdd", "SharePoint")).Click();


                driver.SwitchTo().DefaultContent();
                ThinkTime(2);
                WaitUntil(driver, Control("advFindRibbons", "Results", "GenericOld"), 30);
                Element(driver, Control("advFindRibbons", "Results", "GenericOld")).Click();
                SwitchToFrame(driver, "contentIFrame0");
                SwitchToFrame(driver, "resultFrame");
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Result page is displayed", "Results Page");
                ThinkTime(2);
                WaitUntil(driver, Control("LastColumn", "Generic"), 240);
                ElementHighlight(driver, Control("LastColumn", "Generic"));
                string lastcolumn = Element(driver, Control("LastColumn", "Generic")).Text;
                ThinkTime(4);
                driver.SwitchTo().DefaultContent();

                if (lastcolumn != "No")
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Locatin field is Cleared successfully", "locationfield validation");
                    Assert.Fail();

                }
                else
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Location Field is cleared successfully", "Location field validation");

                }
                ThinkTime(4);
                driver.Close();
                driver.SwitchTo().Window(parent);
            }
        }



        public void verfyadvfindforbrokercontact(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string contactname)
        {
            string parent = driver.CurrentWindowHandle;

            // Advanced Find
            AdvancedFind(driver, testInReport, testName, testDataIteration);
            ThinkTime(8);

            // Add columns
            driver.SwitchTo().DefaultContent();
            ThinkTime(4);
            WaitUntil(driver, Control("EditColumnEmail", "GenericOld"), 60);
            Element(driver, Control("EditColumnEmail", "GenericOld")).Click();
            ThinkTime(4);

            SwitchToFrame(driver, "InlineDialog_Iframe");
            ThinkTime(4);
            SwitchToFrame(driver, "viewEditor");
            ThinkTime(3);

            Element(driver, Control("AddColumns", "GenericOld")).Click();
            ThinkTime(4);
            driver.SwitchTo().DefaultContent();
            SwitchToFrame(driver, "InlineDialog1_Iframe");
            ThinkTime(2);
            WaitUntil(driver, Control("AddBrokerinAdvfind", "Contacts"), 60);
            ElementHighlight(driver, Control("AddBrokerinAdvfind", "Contacts"));
            MoveToElement(driver, Control("AddBrokerinAdvfind", "Contacts"));
            ThinkTime(2);
            Element(driver, Control("AddBrokerinAdvfind", "Contacts")).Click();

            ThinkTime(2);
            WaitUntil(driver, Control("AddProspectinAdvfind", "Contacts"), 60);
            ElementHighlight(driver, Control("AddProspectinAdvfind", "Contacts"));
            MoveToElement(driver, Control("AddProspectinAdvfind", "Contacts"));
            ThinkTime(2);
            Element(driver, Control("AddProspectinAdvfind", "Contacts")).Click();
            ThinkTime(2);

            WaitUntil(driver, Control("AddBroker2Advfind", "Contacts"), 60);
            ElementHighlight(driver, Control("AddBroker2Advfind", "Contacts"));
            MoveToElement(driver, Control("AddBroker2Advfind", "Contacts"));
            ThinkTime(2);
            Element(driver, Control("AddBroker2Advfind", "Contacts")).Click();


            Element(driver, Control("OKButton", "Generic")).Click();
            ThinkTime(2);
            driver.SwitchTo().DefaultContent();
            SwitchToFrame(driver, "InlineDialog_Iframe");
            Element(driver, Control("EditColumnsPopupOk", "GenericOld")).Click();


            SwitchToFrame(driver, "contentIFrame0");
            MoveToElement(driver, Control("AdvanceFindselect", "Opportunity"));
            ThinkTime(2);
            Element(driver, Control("AdvanceFindselect", "Opportunity")).Click();
            ThinkTime(1);
            Select(Element(driver, Control("AdvancefindSelectvalue", "Opportunity"))).SelectByText("Contact");
            ThinkTime(4);
            MoveToElement(driver, Control("Equalcondition", "Opportunity"));
            ThinkTime(2);
            Element(driver, Control("Equalcondition", "Opportunity")).Click();
            ThinkTime(3);
            Select(Element(driver, Control("Equalcondition", "Opportunity"))).SelectByText("Equals");
            ThinkTime(2);
            ThinkTime(2);
            MoveToElement(driver, Control("EnterValue", "Opportunity"));

            MoveToElement(driver, Control("Entervaluefieldinadvfind", "Opportunity"));
            ThinkTime(2);
            Element(driver, Control("Advancefindsearchcontact", "Opportunity")).Click();
            ThinkTime(5);
            driver.SwitchTo().DefaultContent();
            SwitchToFrame(driver, "InlineDialog_Iframe");

            WaitUntil(driver, Control("SearchRecordValue", "SharePoint"), 30);
            Element(driver, Control("SearchRecordValue", "SharePoint")).Click();
            Element(driver, Control("SearchRecordValue", "SharePoint")).SendKeys(contactname);
            ThinkTime(2);
            Element(driver, Control("SearchValueRecordButton", "SharePoint")).Click();
            ThinkTime(2);
            Element(driver, Control("SelectValueResult", contactname, "SharePoint")).Click();
            ThinkTime(2);
            Element(driver, Control("SelectSearchValue", "SharePoint")).Click();
            ThinkTime(2);
            Element(driver, Control("ClickButtonAdd", "SharePoint")).Click();
            ThinkTime(2);

            driver.SwitchTo().DefaultContent();
            Element(driver, Control("advFindRibbons", "Results", "GenericOld")).Click();
            SwitchToFrame(driver, "contentIFrame0");
            SwitchToFrame(driver, "resultFrame");
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Result page is displayed", "Results Page");

            int Brokerselection = Elements(driver, Control("Brokerverification", "Broker", "Contacts"));
            int brokervalue = Elements(driver, Control("Brokerverification", "Partner", "Contacts"));
            int prospect = Elements(driver, Control("Brokerverification", "Prospect", "Contacts"));
            if (Brokerselection > 0 && brokervalue > 0 && prospect > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Result page is displayed", "Results Page");

            }

            else
            {
                Assert.Fail("values not populated inside adv find");
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Result page is not displayed", "Results Page");

            }

            ThinkTime(4);
            driver.Close();
            driver.SwitchTo().Window(parent);
        }


        public void verfyadvfindforbrokerAccount(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string acctname)
        {
            string parent = driver.CurrentWindowHandle;

            // Advanced Find
            AdvancedFind(driver, testInReport, testName, testDataIteration);
            ThinkTime(8);

            // Add columns
            driver.SwitchTo().DefaultContent();
            ThinkTime(4);
            WaitUntil(driver, Control("EditColumnEmail", "GenericOld"), 60);
            Element(driver, Control("EditColumnEmail", "GenericOld")).Click();
            ThinkTime(4);

            SwitchToFrame(driver, "InlineDialog_Iframe");
            ThinkTime(4);
            SwitchToFrame(driver, "viewEditor");
            ThinkTime(3);

            Element(driver, Control("AddColumns", "GenericOld")).Click();
            ThinkTime(4);
            driver.SwitchTo().DefaultContent();
            SwitchToFrame(driver, "InlineDialog1_Iframe");
            ThinkTime(2);
            WaitUntil(driver, Control("Brokertypeacct", "Contacts"), 60);
            ElementHighlight(driver, Control("Brokertypeacct", "Contacts"));
            MoveToElement(driver, Control("Brokertypeacct", "Contacts"));
            ThinkTime(2);
            Element(driver, Control("Brokertypeacct", "Contacts")).Click();

            WaitUntil(driver, Control("Brokeradvfindacct", "Contacts"), 60);
            ElementHighlight(driver, Control("Brokeradvfindacct", "Contacts"));
            MoveToElement(driver, Control("Brokeradvfindacct", "Contacts"));
            ThinkTime(2);
            Element(driver, Control("Brokeradvfindacct", "Contacts")).Click();

            ThinkTime(2);
            WaitUntil(driver, Control("AddProspectinAdvfind", "Contacts"), 60);
            ElementHighlight(driver, Control("AddProspectinAdvfind", "Contacts"));
            MoveToElement(driver, Control("AddProspectinAdvfind", "Contacts"));
            ThinkTime(2);
            Element(driver, Control("AddProspectinAdvfind", "Contacts")).Click();
            ThinkTime(2);

            Element(driver, Control("OKButton", "Generic")).Click();
            ThinkTime(2);
            driver.SwitchTo().DefaultContent();
            SwitchToFrame(driver, "InlineDialog_Iframe");
            Element(driver, Control("EditColumnsPopupOk", "GenericOld")).Click();


            SwitchToFrame(driver, "contentIFrame0");
            MoveToElement(driver, Control("AdvanceFindselect", "Opportunity"));
            ThinkTime(2);
            Element(driver, Control("AdvanceFindselect", "Opportunity")).Click();
            ThinkTime(1);
            Select(Element(driver, Control("AdvancefindSelectvalue", "Opportunity"))).SelectByText("Account");
            ThinkTime(4);
            MoveToElement(driver, Control("Equalcondition", "Opportunity"));
            ThinkTime(2);
            Element(driver, Control("Equalcondition", "Opportunity")).Click();
            ThinkTime(3);
            Select(Element(driver, Control("Equalcondition", "Opportunity"))).SelectByText("Equals");
            ThinkTime(2);
            ThinkTime(2);
            MoveToElement(driver, Control("EnterValue", "Opportunity"));

            MoveToElement(driver, Control("Entervaluefieldinadvfind", "Opportunity"));
            ThinkTime(2);
            Element(driver, Control("AdvancefindsearchAccount", "Opportunity")).Click();
            ThinkTime(5);
            driver.SwitchTo().DefaultContent();
            SwitchToFrame(driver, "InlineDialog_Iframe");

            WaitUntil(driver, Control("SearchRecordValue", "SharePoint"), 30);
            Element(driver, Control("SearchRecordValue", "SharePoint")).Click();
            Element(driver, Control("SearchRecordValue", "SharePoint")).SendKeys(acctname);
            ThinkTime(2);
            Element(driver, Control("SearchValueRecordButton", "SharePoint")).Click();
            ThinkTime(2);
            Element(driver, Control("SelectValueResult", acctname, "SharePoint")).Click();
            ThinkTime(2);
            Element(driver, Control("SelectSearchValue", "SharePoint")).Click();
            ThinkTime(2);
            Element(driver, Control("ClickButtonAdd", "SharePoint")).Click();
            ThinkTime(2);

            driver.SwitchTo().DefaultContent();
            Element(driver, Control("advFindRibbons", "Results", "GenericOld")).Click();
            SwitchToFrame(driver, "contentIFrame0");
            SwitchToFrame(driver, "resultFrame");
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Result page is displayed", "Results Page");
            int Brokerselection = Elements(driver, Control("Brokerverification", "Broker", "Contacts"));
            int brokervalue = Elements(driver, Control("Brokerverification", "Partner", "Contacts"));
            int prospect = Elements(driver, Control("Brokerverification", "Prospect", "Contacts"));
            if (Brokerselection > 0 && brokervalue > 0 && prospect > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Result page is displayed", "Results Page");

            }

            else
            {
                Assert.Fail("values not populated inside adv find");
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Result page is not displayed", "Results Page");

            }


            ThinkTime(4);
            driver.Close();
            driver.SwitchTo().Window(parent);
        }


        public void Verifyinitialcontactbasedonchannel(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string Activityname, string Time, string oppname)
        {
            string[] calloutcome = { "Customer Not Reached" };
            string parent = driver.CurrentWindowHandle;
            for (int i = 0; i < 1; i++)
            {
                //SelectingActiveCell(driver, testInReport, testName, testDataIteration);
                SelectOpportunityTab(driver, testInReport, testName, testDataIteration, "Activities");
                ThinkTime(3);
                NewActivity(driver, testInReport, testName, testDataIteration);

                string NewSubject = Activityname + Time;
                ThinkTime(3);
                WaitUntil(driver, Control("PhoneCallSubject", "EnterpriseSales"), 30);
                MoveToElement(driver, Control("PhoneCallSubject", "EnterpriseSales"));
                ThinkTime(3);
                Element(driver, Control("PhoneCallSubject", "EnterpriseSales")).SendKeys(Keys.Control + "a");
                Element(driver, Control("PhoneCallSubject", "EnterpriseSales")).SendKeys(Keys.Delete);
                ThinkTime(3);
                Element(driver, Control("PhoneCallSubject", "EnterpriseSales")).SendKeys(NewSubject);
                ThinkTime(3);

                if (Elements(driver, Control("Outboundcall", "Opportunity")) > 0)
                {
                    Element(driver, Control("Directionfield", "Opportunity")).Click();
                    ThinkTime(3);
                }

                Select(Element(driver, Control("CallOutcome", "Opportunity"))).SelectByText(calloutcome[i]);
                ThinkTime(3);
                Element(driver, Control("SaveContactSales", "Opportunity")).Click();
                ThinkTime(7);

                // Advanced Find
                AdvancedFind(driver, testInReport, testName, testDataIteration);
                ThinkTime(8);

                // Add columns
                driver.SwitchTo().DefaultContent();
                ThinkTime(4);
                WaitUntil(driver, Control("EditColumnEmail", "GenericOld"), 60);
                Element(driver, Control("EditColumnEmail", "GenericOld")).Click();
                ThinkTime(4);

                SwitchToFrame(driver, "InlineDialog_Iframe");
                ThinkTime(4);
                SwitchToFrame(driver, "viewEditor");
                ThinkTime(3);

                Element(driver, Control("AddColumns", "GenericOld")).Click();
                ThinkTime(4);
                driver.SwitchTo().DefaultContent();
                SwitchToFrame(driver, "InlineDialog1_Iframe");
                ThinkTime(2);
                WaitUntil(driver, Control("Addinitialcontactcolumn", "Opportunity"), 60);
                ElementHighlight(driver, Control("Addinitialcontactcolumn", "Opportunity"));
                MoveToElement(driver, Control("Addinitialcontactcolumn", "Opportunity"));
                ThinkTime(2);
                Element(driver, Control("Addinitialcontactcolumn", "Opportunity")).Click();
                Element(driver, Control("OKButton", "Generic")).Click();
                driver.SwitchTo().DefaultContent();
                SwitchToFrame(driver, "InlineDialog_Iframe");
                Element(driver, Control("EditColumnsPopupOk", "GenericOld")).Click();


                SwitchToFrame(driver, "contentIFrame0");
                MoveToElement(driver, Control("AdvanceFindselect", "Opportunity"));
                ThinkTime(2);
                Element(driver, Control("AdvanceFindselect", "Opportunity")).Click();
                ThinkTime(1);
                Select(Element(driver, Control("AdvancefindSelectvalue", "Opportunity"))).SelectByText("Opportunity");
                ThinkTime(4);
                MoveToElement(driver, Control("Equalcondition", "Opportunity"));
                ThinkTime(2);
                Element(driver, Control("Equalcondition", "Opportunity")).Click();
                ThinkTime(3);
                Select(Element(driver, Control("Equalcondition", "Opportunity"))).SelectByText("Equals");
                ThinkTime(2);
                MoveToElement(driver, Control("EnterValue", "Opportunity"));

                Element(driver, Control("AdvancefindValuelookup", "Opportunity")).Click();
                ThinkTime(5);
                driver.SwitchTo().DefaultContent();
                SwitchToFrame(driver, "InlineDialog_Iframe");

                ThinkTime(2);
                WaitUntil(driver, Control("SearchRecordValue", "SharePoint"), 30);
                Element(driver, Control("SearchRecordValue", "SharePoint")).Click();
                Element(driver, Control("SearchRecordValue", "SharePoint")).SendKeys(oppname);
                ThinkTime(2);
                WaitUntil(driver, Control("SearchValueRecordButton", "SharePoint"), 30);
                Element(driver, Control("SearchValueRecordButton", "SharePoint")).Click();
                ThinkTime(2);
                WaitUntil(driver, Control("FirstCheckBox", "CommonObj"), 30);
                Element(driver, Control("FirstCheckBox", "CommonObj")).Click();
                ThinkTime(2);
                WaitUntil(driver, Control("SelectSearchValue", "SharePoint"), 30);
                Element(driver, Control("SelectSearchValue", "SharePoint")).Click();
                ThinkTime(2);
                WaitUntil(driver, Control("ClickButtonAdd", "SharePoint"), 30);
                Element(driver, Control("ClickButtonAdd", "SharePoint")).Click();

                driver.SwitchTo().DefaultContent();
                Element(driver, Control("advFindRibbons", "Results", "GenericOld")).Click();
                SwitchToFrame(driver, "contentIFrame0");
                SwitchToFrame(driver, "resultFrame");
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Result page is displayed", "Results Page");
                WaitUntil(driver, Control("LastColumn", "Generic"), 240);
                ElementHighlight(driver, Control("LastColumn", "Generic"));
                string lastcolumn = Element(driver, Control("LastColumn", "Generic")).Text.ToString();
                ThinkTime(4);
                driver.SwitchTo().DefaultContent();

                if (lastcolumn != "Yes")
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Locatin field is Cleared successfully", "locationfield validation");
                    Assert.Fail();

                }
                else
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Location Field is cleared successfully", "Location field validation");

                }
                ThinkTime(4);
                driver.Close();
                driver.SwitchTo().Window(parent);
            }
        }

        public void VerifyAdvfindpayloaddetails(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string brandname, string header1, string header2, string header3, string header4, string idvalue, string typevalue, string status, string image)
        {

            string parent = driver.CurrentWindowHandle;
            // Advanced Find
            AdvancedFind(driver, testInReport, testName, testDataIteration);
            ThinkTime(8);
            ThinkTime(6);
            SwitchToFrame(driver, "contentIFrame0");
            Select(Element(driver, Control("Looksfordrop", "Generic"))).SelectByText("IWG Reference Data");
            ThinkTime(2);
            MoveToElement(driver, Control("AdvanceFindselect", "Opportunity"));
            ThinkTime(2);
            Element(driver, Control("AdvanceFindselect", "Opportunity")).Click();
            ThinkTime(1);
            Select(Element(driver, Control("AdvancefindSelectvalue", "Opportunity"))).SelectByText("Description");
            ThinkTime(2);
            //MoveToElement(driver, Control("Equalcondition", "Opportunity"));
            //ThinkTime(2);
            //Element(driver, Control("Equalcondition", "Opportunity")).Click();
            //ThinkTime(1);
            //Select(Element(driver, Control("Equalcondition", "Opportunity"))).SelectByText("Equals");
            //ThinkTime(2);
            MoveToElement(driver, Control("Entertextadvfind", "Contacts"));
            ThinkTime(1);
            ElementHighlight(driver, Control("Entertextadvfind", "Contacts"));
            ThinkTime(1);
            //JSClick(driver, Control("Entertextadvfind", "Contacts"));
            //ThinkTime(3);
            //JSClick(driver, Control("Elsewhereclick", "Contacts"));
            //ThinkTime(3);
            Element(driver, Control("Entertextadvfind1", "Contacts")).SendKeys(brandname);
            // Add columns
            driver.SwitchTo().DefaultContent();
            ThinkTime(8);
            MoveToElement(driver, Control("EditColumnEmail", "GenericOld"));
            WaitUntil(driver, Control("EditColumnEmail", "GenericOld"), 60);
            Element(driver, Control("EditColumnEmail", "GenericOld")).Click();
            ThinkTime(4);

            SwitchToFrame(driver, "InlineDialog_Iframe");
            ThinkTime(4);
            SwitchToFrame(driver, "viewEditor");
            ThinkTime(3);

            Element(driver, Control("AddColumns", "GenericOld")).Click();
            ThinkTime(4);
            driver.SwitchTo().DefaultContent();
            SwitchToFrame(driver, "InlineDialog1_Iframe");

            ElementHighlight(driver, Control("AddIdinAdvFind", "Contacts"));
            MoveToElement(driver, Control("AddIdinAdvFind", "Contacts"));
            ThinkTime(2);
            Element(driver, Control("AddIdinAdvFind", "Contacts")).Click();
            ThinkTime(2);

            ElementHighlight(driver, Control("AddTypeIdAdvFind", "Contacts"));
            MoveToElement(driver, Control("AddTypeIdAdvFind", "Contacts"));
            ThinkTime(2);
            Element(driver, Control("AddTypeIdAdvFind", "Contacts")).Click();
            ThinkTime(2);

            ElementHighlight(driver, Control("AddStatusAdvFind", "Contacts"));
            MoveToElement(driver, Control("AddStatusAdvFind", "Contacts"));
            ThinkTime(2);
            Element(driver, Control("AddStatusAdvFind", "Contacts")).Click();
            ThinkTime(2);

            ElementHighlight(driver, Control("AddBrandimageAdvFind", "Contacts"));
            MoveToElement(driver, Control("AddBrandimageAdvFind", "Contacts"));
            ThinkTime(2);
            Element(driver, Control("AddBrandimageAdvFind", "Contacts")).Click();
            ThinkTime(2);

            Element(driver, Control("OKButton", "Generic")).Click();
            driver.SwitchTo().DefaultContent();
            SwitchToFrame(driver, "InlineDialog_Iframe");
            Element(driver, Control("EditColumnsPopupOk", "GenericOld")).Click();


            ThinkTime(4);

            driver.SwitchTo().DefaultContent();
            Element(driver, Control("advFindRibbons", "Results", "GenericOld")).Click();
            ThinkTime(3);
            SwitchToFrame(driver, "contentIFrame0");
            SwitchToFrame(driver, "resultFrame");
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Result page is displayed", "Results Page");

            string advresult = Element(driver, Control("ResultsgridAdvFind", "Contacts")).GetAttribute("innerText");

            bool title1 = advresult.Contains(header1);
            bool title2 = advresult.Contains(header2);
            bool title3 = advresult.Contains(header3);
            bool title4 = advresult.Contains(header4);
            bool value1 = advresult.Contains(idvalue);
            bool value2 = advresult.Contains(typevalue);
            bool value3 = advresult.Contains(status);
            bool value4 = advresult.Contains(image);

            driver.SwitchTo().DefaultContent();

            if (title1 == true && title2 == true && title3 == true && title4 == true && value1 == true && value2 == true && value3 == true && value4 == true)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Payload result verification", "Payload result verification");


            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Payload result verification", "Payload result verification");
                Assert.Fail();
            }
            ThinkTime(4);
            driver.Close();
            driver.SwitchTo().Window(parent);
        }


        public void VerifyInboundCallcontactdonestatusYes(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string Activityname, string Time, string oppname)
        {
            string[] calloutcome = { "No Services Required", "Further Action Scheduled", "Reached" };
            string parent = driver.CurrentWindowHandle;

            for (int i = 0; i < 3; i++)
            {
                SelectOpportunityTab(driver, testInReport, testName, testDataIteration, "Activities");
                NewActivity(driver, testInReport, testName, testDataIteration);

                string NewSubject = Activityname + Time;
                ThinkTime(3);
                WaitUntil(driver, Control("PhoneCallSubject", "EnterpriseSales"), 30);
                MoveToElement(driver, Control("PhoneCallSubject", "EnterpriseSales"));
                ThinkTime(3);
                Element(driver, Control("PhoneCallSubject", "EnterpriseSales")).SendKeys(Keys.Control + "a");
                Element(driver, Control("PhoneCallSubject", "EnterpriseSales")).SendKeys(Keys.Delete);
                ThinkTime(3);
                Element(driver, Control("PhoneCallSubject", "EnterpriseSales")).SendKeys(NewSubject);
                ThinkTime(3);

                if (Elements(driver, Control("Outboundcall", "Opportunity")) > 0)
                {
                    Element(driver, Control("Directionfield", "Opportunity")).Click();
                    ThinkTime(3);
                }
                Element(driver, Control("CallOutcome", "Opportunity")).Click();
                ThinkTime(5);

                Select(Element(driver, Control("CallOutcome", "Opportunity"))).SelectByText(calloutcome[i]);
                ThinkTime(3);
                Element(driver, Control("SaveContactSales", "Opportunity")).Click();
                ThinkTime(7);

                // Advanced Find
                //AdvancedFindhidingpurecloudhandle(driver, testInReport, testName, testDataIteration);
                AdvancedFind(driver, testInReport, testName, testDataIteration);
                ThinkTime(8);

                // Add columns
                driver.SwitchTo().DefaultContent();
                ThinkTime(8);
                MoveToElement(driver, Control("EditColumnEmail", "GenericOld"));
                WaitUntil(driver, Control("EditColumnEmail", "GenericOld"), 60);
                Element(driver, Control("EditColumnEmail", "GenericOld")).Click();
                ThinkTime(4);

                SwitchToFrame(driver, "InlineDialog_Iframe");
                ThinkTime(4);
                SwitchToFrame(driver, "viewEditor");
                ThinkTime(3);

                Element(driver, Control("AddColumns", "GenericOld")).Click();
                ThinkTime(4);
                driver.SwitchTo().DefaultContent();
                SwitchToFrame(driver, "InlineDialog1_Iframe");
                ElementHighlight(driver, Control("Addinitialcontactcolumn", "Opportunity"));
                MoveToElement(driver, Control("Addinitialcontactcolumn", "Opportunity"));
                ThinkTime(2);
                Element(driver, Control("Addinitialcontactcolumn", "Opportunity")).Click();
                Element(driver, Control("OKButton", "Generic")).Click();
                driver.SwitchTo().DefaultContent();
                SwitchToFrame(driver, "InlineDialog_Iframe");
                Element(driver, Control("EditColumnsPopupOk", "GenericOld")).Click();


                SwitchToFrame(driver, "contentIFrame0");
                MoveToElement(driver, Control("AdvanceFindselect", "Opportunity"));
                ThinkTime(2);
                Element(driver, Control("AdvanceFindselect", "Opportunity")).Click();
                ThinkTime(1);
                Select(Element(driver, Control("AdvancefindSelectvalue", "Opportunity"))).SelectByText("Reference");
                ThinkTime(2);
                MoveToElement(driver, Control("Equalcondition", "Opportunity"));
                ThinkTime(2);
                Element(driver, Control("Equalcondition", "Opportunity")).Click();
                ThinkTime(1);
                Select(Element(driver, Control("Equalcondition", "Opportunity"))).SelectByText("Equals");
                ThinkTime(2);

                ThinkTime(2);
                Element(driver, Control("CaseIDText", "GenericOld")).Click();
                Element(driver, Control("CaseID", "GenericOld")).SendKeys(oppname);
                driver.SwitchTo().DefaultContent();
                Element(driver, Control("advFindRibbons", "Results", "GenericOld")).Click();
                SwitchToFrame(driver, "contentIFrame0");
                SwitchToFrame(driver, "resultFrame");
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Result page is displayed", "Results Page");
                WaitUntil(driver, Control("LastColumn", "Generic"), 240);
                ElementHighlight(driver, Control("LastColumn", "Generic"));
                string lastcolumn = Element(driver, Control("LastColumn", "Generic")).Text.ToString();
                ThinkTime(4);
                driver.SwitchTo().DefaultContent();

                if (lastcolumn != "Yes")
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Locatin field is Cleared successfully", "locationfield validation");
                    Assert.Fail();

                }
                else
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Location Field is cleared successfully", "Location field validation");

                }
                ThinkTime(4);
                driver.Close();
                driver.SwitchTo().Window(parent);
                // driver.SwitchTo().DefaultContent();


            }
        }
        public void VerifyOutboundCallcontactdonestatusYes(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string Activityname, string Time, string oppname)
        {
            string[] calloutcome = { "No Services Required", "Further Action Scheduled", "Reached" };
            string parent = driver.CurrentWindowHandle;
            for (int i = 0; i < 3; i++)
            {
                SelectOpportunityTab(driver, testInReport, testName, testDataIteration, "Activities");
                NewActivity(driver, testInReport, testName, testDataIteration);

                string NewSubject = Activityname + Time;
                ThinkTime(3);
                WaitUntil(driver, Control("PhoneCallSubject", "EnterpriseSales"), 30);
                MoveToElement(driver, Control("PhoneCallSubject", "EnterpriseSales"));
                ThinkTime(3);
                Element(driver, Control("PhoneCallSubject", "EnterpriseSales")).SendKeys(Keys.Control + "a");
                Element(driver, Control("PhoneCallSubject", "EnterpriseSales")).SendKeys(Keys.Delete);
                ThinkTime(3);
                Element(driver, Control("PhoneCallSubject", "EnterpriseSales")).SendKeys(NewSubject);
                ThinkTime(3);

                if (Elements(driver, Control("Outboundcall", "Opportunity")) == 0)
                {
                    Element(driver, Control("Directionfield", "Opportunity")).Click();
                    ThinkTime(3);
                }
                Element(driver, Control("CallOutcome", "Opportunity")).Click();
                ThinkTime(5);

                Select(Element(driver, Control("CallOutcome", "Opportunity"))).SelectByText(calloutcome[i]);
                ThinkTime(3);
                Element(driver, Control("SaveContactSales", "Opportunity")).Click();
                ThinkTime(7);

                // Advanced Find
                AdvancedFind(driver, testInReport, testName, testDataIteration);
                ThinkTime(8);

                // Add columns
                driver.SwitchTo().DefaultContent();
                ThinkTime(4);
                WaitUntil(driver, Control("EditColumnEmail", "GenericOld"), 60);
                Element(driver, Control("EditColumnEmail", "GenericOld")).Click();
                ThinkTime(4);

                SwitchToFrame(driver, "InlineDialog_Iframe");
                ThinkTime(4);
                SwitchToFrame(driver, "viewEditor");
                ThinkTime(3);

                Element(driver, Control("AddColumns", "GenericOld")).Click();
                ThinkTime(4);
                driver.SwitchTo().DefaultContent();
                SwitchToFrame(driver, "InlineDialog1_Iframe");
                ElementHighlight(driver, Control("Addinitialcontactcolumn", "Opportunity"));
                MoveToElement(driver, Control("Addinitialcontactcolumn", "Opportunity"));
                ThinkTime(2);
                Element(driver, Control("Addinitialcontactcolumn", "Opportunity")).Click();
                Element(driver, Control("OKButton", "Generic")).Click();
                driver.SwitchTo().DefaultContent();
                SwitchToFrame(driver, "InlineDialog_Iframe");
                Element(driver, Control("EditColumnsPopupOk", "GenericOld")).Click();


                SwitchToFrame(driver, "contentIFrame0");
                MoveToElement(driver, Control("AdvanceFindselect", "Opportunity"));
                ThinkTime(2);
                Element(driver, Control("AdvanceFindselect", "Opportunity")).Click();
                ThinkTime(1);
                Select(Element(driver, Control("AdvancefindSelectvalue", "Opportunity"))).SelectByText("Opportunity");
                ThinkTime(2);
                MoveToElement(driver, Control("Equalcondition", "Opportunity"));
                ThinkTime(2);
                Element(driver, Control("Equalcondition", "Opportunity")).Click();
                ThinkTime(1);
                Select(Element(driver, Control("Equalcondition", "Opportunity"))).SelectByText("Equals");
                ThinkTime(2);
                WaitUntil(driver, Control("EnterResourceName", "Opportunity"), 60);
                MoveToElement(driver, Control("EnterResourceName", "Opportunity"));
                ThinkTime(3);
                Element(driver, Control("AdvancefindValuelookup", "Opportunity")).Click();
                ThinkTime(5);
                //SwitchToFrame(driver, "resultFrame");
                //ThinkTime(3);
                driver.SwitchTo().DefaultContent();
                ThinkTime(2);
                //SwitchToFrame(driver, "contentIFrame0");
                //ThinkTime(8);
                SwitchToFrame(driver, "InlineDialog_Iframe");
                ThinkTime(5);

                //WaitUntil(driver, Control("AdvFindOppRefValue", "Opportunity"), 60);
                //Element(driver, Control("AdvFindOppRefValue", "Opportunity")).Click();
                //ThinkTime(2);
                //Element(driver, Control("AdvFindEnterOppRef", "Opportunity")).SendKeys(oppname);

                ThinkTime(2);
                WaitUntil(driver, Control("SearchRecordValue", "SharePoint"), 30);
                Element(driver, Control("SearchRecordValue", "SharePoint")).Click();
                Element(driver, Control("SearchRecordValue", "SharePoint")).SendKeys(oppname);
                ThinkTime(2);
                WaitUntil(driver, Control("SearchValueRecordButton", "SharePoint"), 30);
                Element(driver, Control("SearchValueRecordButton", "SharePoint")).Click();
                ThinkTime(2);
                WaitUntil(driver, Control("FirstCheckBox", "CommonObj"), 30);
                Element(driver, Control("FirstCheckBox", "CommonObj")).Click();
                ThinkTime(2);
                WaitUntil(driver, Control("SelectSearchValue", "SharePoint"), 30);
                Element(driver, Control("SelectSearchValue", "SharePoint")).Click();
                ThinkTime(2);
                WaitUntil(driver, Control("ClickButtonAdd", "SharePoint"), 30);
                Element(driver, Control("ClickButtonAdd", "SharePoint")).Click();


                driver.SwitchTo().DefaultContent();
                Element(driver, Control("advFindRibbons", "Results", "GenericOld")).Click();
                SwitchToFrame(driver, "contentIFrame0");
                SwitchToFrame(driver, "resultFrame");
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Result page is displayed", "Results Page");
                WaitUntil(driver, Control("LastColumn", "Generic"), 240);
                ElementHighlight(driver, Control("LastColumn", "Generic"));
                string lastcolumn = Element(driver, Control("LastColumn", "Generic")).Text.ToString();
                ThinkTime(4);
                driver.SwitchTo().DefaultContent();

                if (lastcolumn != "Yes")
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Locatin field is Cleared successfully", "locationfield validation");
                    Assert.Fail();

                }
                else
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Location Field is cleared successfully", "Location field validation");

                }
                ThinkTime(4);
                driver.Close();
                driver.SwitchTo().Window(parent);

            }
        }


        public void Phonecallactivity1(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string calloutcome)
        {

            ThinkTime(6);
            scrollUpPage(driver, testInReport, testDataIteration, testName);

            //Add new Country
            ThinkTime(3);

            ThinkTime(15);
            Select(Element(driver, Control("CallOutcome", "Opportunity"))).SelectByText(calloutcome);

            ThinkTime(3);
            saveFooter(driver, testInReport, testName, testDataIteration);

        }

        public void CreateNewOpportunityEntetrprisedirectsales(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string AccountName, string Time, string Country, string Currency, string Channel, string MajorSource, string MinorSource, string contact)
        {

            ThinkTime(3);

            string NewAccountName = AccountName + Time;
            string NewContact = contact + Time;
            ThinkTime(7);
            //if (Elements(driver, Control("AlertDialogue", "Opportunity")) > 0)
            //{
            //    MoveToElement(driver, Control("AlertOK", "Opportunity"));
            //    Element(driver, Control("AlertOK", "Opportunity")).Click();
            //}
            ThinkTime(3);

            WaitUntil(driver, Control("NewContactInput", "Opportunity"), 90);
            MoveToElement(driver, Control("NewContactInput", "Opportunity"));
            JSClick(driver, Control("NewContactInput", "Opportunity"));

            WaitUntil(driver, Control("NewContactButton", "Opportunity"), 30);
            MoveToElement(driver, Control("NewContactButton", "Opportunity"));
            Element(driver, Control("NewContactButton", "Opportunity")).Click();

            ThinkTime(5);

            WaitUntil(driver, Control("NewContactLname", "Opportunity"), 30);
            MoveToElement(driver, Control("NewContactLname", "Opportunity"));
            Element(driver, Control("NewContactLname", "Opportunity")).SendKeys(NewContact);

            MoveToElement(driver, Control("NewLanguageInput", "Opportunity"));
            Element(driver, Control("NewLanguageInput", "Opportunity")).SendKeys("UK english");

            ThinkTime(3);

            MoveToElement(driver, Control("NewLanguageSelect", "Opportunity"));
            Element(driver, Control("NewLanguageSelect", "Opportunity")).Click();

            if (Elements(driver, Control("NewContactSaveButton1", "Opportunity")) > 0)
            {
                MoveToElement(driver, Control("NewContactSaveButton1", "Opportunity"));
                Element(driver, Control("NewContactSaveButton1", "Opportunity")).Click();
            }
            else
            {
                ThinkTime(4);
                MoveToElement(driver, Control("NewContactSaveButton", "Opportunity"));
                Element(driver, Control("NewContactSaveButton", "Opportunity")).Click();
            }

            scrollDownOpportunityEnterprise(driver, testInReport, testDataIteration, testName);

            //Add new Country
            WaitUntil(driver, Control("NewCountryInput", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("NewCountryInput", "EnterpriseSales"));
            Element(driver, Control("NewCountryInput", "EnterpriseSales")).SendKeys(Country);
            ThinkTime(6);
            WaitUntil(driver, Control("SelectCountryDropdown", Country, "EnterpriseSales"), 360);
            MoveToElement(driver, Control("SelectCountryDropdown", Country, "EnterpriseSales"));
            Element(driver, Control("SelectCountryDropdown", Country, "EnterpriseSales")).Click();
            ThinkTime(3);
            scrollDownOpportunityEnterprise2(driver, testInReport, testDataIteration, testName);

            WaitUntil(driver, Control("Channel", "Opportunity"), 30);
            MoveToElement(driver, Control("Channel", "Opportunity"));
            Element(driver, Control("Channel", "Opportunity")).SendKeys(Channel);

            ThinkTime(3);
            WaitUntil(driver, Control("SelectDropDownToField", "ITSales"), 30);
            MoveToElement(driver, Control("SelectDropDownToField", "ITSales"));
            Element(driver, Control("SelectDropDownToField", "ITSales")).Click();

            WaitUntil(driver, Control("NewMajorSourceInput", "Opportunity"), 360);
            MoveToElement(driver, Control("NewMajorSourceInput", "Opportunity"));
            Element(driver, Control("NewMajorSourceInput", "Opportunity")).SendKeys(MajorSource);
            ThinkTime(5);
            WaitUntil(driver, Control("NewMajorSourceSelect", "Opportunity"), 360);
            MoveToElement(driver, Control("NewMajorSourceSelect", "Opportunity"));
            Element(driver, Control("NewMajorSourceSelect", "Opportunity")).Click();

            ThinkTime(3);

            ThinkTime(3);
            WaitUntil(driver, Control("NewMinorSourceInput", "Opportunity"), 360);
            MoveToElement(driver, Control("NewMinorSourceInput", "Opportunity"));
            Element(driver, Control("NewMinorSourceInput", "Opportunity")).SendKeys(MinorSource);
            ThinkTime(5);
            WaitUntil(driver, Control("NewMinorSourceSelect", "Opportunity"), 360);
            MoveToElement(driver, Control("NewMinorSourceSelect", "Opportunity"));
            Element(driver, Control("NewMinorSourceSelect", "Opportunity")).Click();
            ThinkTime(3);
            saveFooter(driver, testInReport, testName, testDataIteration);
            ThinkTime(5);

            scrollUpMiddle(driver, testInReport, testDataIteration, testName);

            if ((Elements(driver, Control("CountryErrorIcon", "Opportunity")) > 0))

            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Country field erron icon present", "Verify opportunity is automatically set as Won");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Country field erron icon not present", "Verify opportunity is not automatically set as Won");
                Assert.Fail("Country field erron icon not present");
            }
        }

        public void CreateNewOpportunityEntetrprisewithprevcontact(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string Channel, string MajorSource, string MinorSource, string contact, string RecomendedBussinessCenre)
        {

            //create new contact
            ThinkTime(2);
            WaitUntil(driver, Control("Contactlookup", "Opportunity"), 60);
            Element(driver, Control("Contactlookup", "Opportunity")).Click();
            Element(driver, Control("Contactlookup", "Opportunity")).SendKeys(contact);
            ThinkTime(2);
            WaitUntil(driver, Control("ITSalesCustomer", "Opportunity"), 60);
            Element(driver, Control("ITSalesCustomer", "Opportunity")).Click();
            ThinkTime(2);

            // Number of people
            WaitUntil(driver, Control("Numberofpeople", "Opportunity"), 60);
            Element(driver, Control("Numberofpeople", "Opportunity")).Click();
            Element(driver, Control("Numberofpeople", "Opportunity")).SendKeys("6");
            ThinkTime(3);

            scrollDownOpportunityEnterpriseCust(driver, testInReport, testDataIteration, testName, "600");
            // Recommended Business centre
            ThinkTime(2);
            WaitUntil(driver, Control("RecomentedBussinessCentreInputButton", "Opportunity"), 60);
            Element(driver, Control("RecomentedBussinessCentreInputButton", "Opportunity")).Click();
            Element(driver, Control("RecomentedBussinessCentreInputButton", "Opportunity")).SendKeys(RecomendedBussinessCenre);

            ThinkTime(2);
            WaitUntil(driver, Control("Languagedropdown", "EnterpriseSales"), 30);
            Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Business center added Successfully", "Business center added Successfully");

            // scrollDownOpportunityEnterprise(driver, testInReport, testDataIteration, testName);
            scrollDownOpportunityEnterpriseCust(driver, testInReport, testDataIteration, testName, "200");

            //scrollDownOpportunityEnterprise(driver, testInReport, testDataIteration, testName);
            //scrollDownOpportunityEnterprise(driver, testInReport, testDataIteration, testName);

            //Add new Channel
            ThinkTime(2);
            WaitUntil(driver, Control("NewChannelInput", "Opportunity"), 30);
            Element(driver, Control("NewChannelInput", "Opportunity")).Click();
            Element(driver, Control("NewChannelInput", "Opportunity")).SendKeys(Channel);

            ThinkTime(2);
            WaitUntil(driver, Control("Languagedropdown", "EnterpriseSales"), 30);
            Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();


            scrollDownOpportunityEnterpriseCust(driver, testInReport, testDataIteration, testName, "200");

            ThinkTime(2);
            WaitUntil(driver, Control("NewMajorSourceInput", "Opportunity"), 30);
            Element(driver, Control("NewMajorSourceInput", "Opportunity")).Click();
            Element(driver, Control("NewMajorSourceInput", "Opportunity")).SendKeys(Keys.Control + "a");
            Element(driver, Control("NewMajorSourceInput", "Opportunity")).SendKeys(Keys.Delete);
            ThinkTime(2);
            Element(driver, Control("NewMajorSourceInput", "Opportunity")).SendKeys(MajorSource);

            ThinkTime(2);
            WaitUntil(driver, Control("Languagedropdown", "EnterpriseSales"), 30);
            Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();

            //scrollDownOpportunityEnterpriseCust(driver, testInReport, testDataIteration, testName, "200");
            ThinkTime(2);
            WaitUntil(driver, Control("NewMinorSourceInput", "Opportunity"), 30);
            MoveToElement(driver, Control("NewMinorSourceInput", "Opportunity"));
            Element(driver, Control("NewMinorSourceInput", "Opportunity")).Click();

            Element(driver, Control("NewMinorSourceInput", "Opportunity")).SendKeys(Keys.Control + "a");
            Element(driver, Control("NewMinorSourceInput", "Opportunity")).SendKeys(Keys.Delete);
            ThinkTime(2);
            Element(driver, Control("NewMinorSourceInput", "Opportunity")).SendKeys(MinorSource);
            ThinkTime(2);
            WaitUntil(driver, Control("Languagedropdown", "EnterpriseSales"), 30);
            Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "source added Successfully", "source added Successfully");

            saveFooter(driver, testInReport, testName, testDataIteration);
            ThinkTime(3);
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Opportunity Created Successfully", "New Opportunity Verification");

        }

        public void AddingProductinOpp(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string fieldname, string modifiedvalue)
        {

            scrollDownOpportunity(driver, testInReport, testName, testDataIteration);
            ThinkTime(3);

            if (Elements(driver, Control("TopicRProductInput", "Opportunity")) == 0)
            {
                WaitUntil(driver, Control("OppProductLabel", "Opportunity"), 100);
                MoveToElement(driver, Control("OppProductLabel", "Opportunity"));
                Element(driver, Control("RemoveselectedfieldfromOpp", fieldname, "Opportunity")).Click();
                saveFooter(driver, testInReport, testName, testDataIteration);
                ThinkTime(3);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Product Input", "Product Input");

            }
            else
            {
                WaitUntil(driver, Control("TopicRProductInput", "Opportunity"), 180);
                Element(driver, Control("TopicRProductInput", "Opportunity")).Click();
                Element(driver, Control("TopicRProductInput", "Opportunity")).SendKeys(modifiedvalue);
                ThinkTime(4);
                WaitUntil(driver, Control("Languagedropdown", "EnterpriseSales"), 100);
                MoveToElement(driver, Control("Languagedropdown", "EnterpriseSales"));
                Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();
                saveFooter(driver, testInReport, testName, testDataIteration);
                ThinkTime(3);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Product Input", "Product Input");

            }
        }

        public void CreateNewOpportunityEntetrprisewithprevcontact1(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string Channel, string MajorSource, string MinorSource, string contact, string RecomendedBussinessCenre, string people)
        {

            //create new contact
            ThinkTime(2);
            WaitUntil(driver, Control("Contactlookup", "Opportunity"), 60);
            Element(driver, Control("Contactlookup", "Opportunity")).Click();
            Element(driver, Control("Contactlookup", "Opportunity")).SendKeys(contact);
            ThinkTime(2);
            WaitUntil(driver, Control("ITSalesCustomer", "Opportunity"), 60);
            Element(driver, Control("ITSalesCustomer", "Opportunity")).Click();
            ThinkTime(2);

            // Number of people
            WaitUntil(driver, Control("Numberofpeople", "Opportunity"), 60);
            Element(driver, Control("Numberofpeople", "Opportunity")).Click();
            Element(driver, Control("Numberofpeople", "Opportunity")).SendKeys(people);
            ThinkTime(3);

            scrollDownOpportunityEnterpriseCust(driver, testInReport, testDataIteration, testName, "300");
            //Product
            ThinkTime(3);
            WaitUntil(driver, Control("TopicRProductInput", "Opportunity"), 180);
            Element(driver, Control("TopicRProductInput", "Opportunity")).Click();
            Element(driver, Control("TopicRProductInput", "Opportunity")).SendKeys("Day Office");
            ThinkTime(4);
            WaitUntil(driver, Control("Languagedropdown", "EnterpriseSales"), 100);
            MoveToElement(driver, Control("Languagedropdown", "EnterpriseSales"));
            Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();

            ThinkTime(3);
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Product Input", "Product Input");

            scrollDownOpportunityEnterpriseCust(driver, testInReport, testDataIteration, testName, "300");
            // Recommended Business centre
            ThinkTime(2);
            WaitUntil(driver, Control("RecomentedBussinessCentreInputButton", "Opportunity"), 60);
            Element(driver, Control("RecomentedBussinessCentreInputButton", "Opportunity")).Click();
            Element(driver, Control("RecomentedBussinessCentreInputButton", "Opportunity")).SendKeys(RecomendedBussinessCenre);

            ThinkTime(2);
            WaitUntil(driver, Control("Languagedropdown", "EnterpriseSales"), 30);
            Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Business center added Successfully", "Business center added Successfully");

            // scrollDownOpportunityEnterprise(driver, testInReport, testDataIteration, testName);
            scrollDownOpportunityEnterpriseCust(driver, testInReport, testDataIteration, testName, "200");

            //scrollDownOpportunityEnterprise(driver, testInReport, testDataIteration, testName);
            //scrollDownOpportunityEnterprise(driver, testInReport, testDataIteration, testName);

            //Add new Channel
            ThinkTime(2);
            WaitUntil(driver, Control("NewChannelInput", "Opportunity"), 30);
            Element(driver, Control("NewChannelInput", "Opportunity")).Click();
            Element(driver, Control("NewChannelInput", "Opportunity")).SendKeys(Channel);

            ThinkTime(2);
            WaitUntil(driver, Control("Languagedropdown", "EnterpriseSales"), 30);
            Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();


            scrollDownOpportunityEnterpriseCust(driver, testInReport, testDataIteration, testName, "100");

            ThinkTime(2);
            WaitUntil(driver, Control("NewMajorSourceInput", "Opportunity"), 30);
            Element(driver, Control("NewMajorSourceInput", "Opportunity")).Click();
            Element(driver, Control("NewMajorSourceInput", "Opportunity")).SendKeys(MajorSource);

            ThinkTime(2);
            WaitUntil(driver, Control("Languagedropdown", "EnterpriseSales"), 30);
            Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();

            scrollDownOpportunityEnterpriseCust(driver, testInReport, testDataIteration, testName, "100");
            ThinkTime(2);

            WaitUntil(driver, Control("NewMinorSourceInput", "Opportunity"), 30);
            MoveToElement(driver, Control("NewMinorSourceInput", "Opportunity"));
            Element(driver, Control("NewMinorSourceInput", "Opportunity")).Click();
            Element(driver, Control("NewMinorSourceInput", "Opportunity")).SendKeys(Keys.Control + "a");
            Element(driver, Control("NewMinorSourceInput", "Opportunity")).SendKeys(Keys.Delete);
            Element(driver, Control("NewMinorSourceInput", "Opportunity")).SendKeys(MinorSource);
            ThinkTime(2);
            WaitUntil(driver, Control("Languagedropdown", "EnterpriseSales"), 30);
            Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "source added Successfully", "source added Successfully");


            saveFooter(driver, testInReport, testName, testDataIteration);
            ThinkTime(3);
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Opportunity Created Successfully", "New Opportunity Verification");

        }

        public void CreateNewOpportunityEntetrprisewithprevcontactNew(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string Channel, string MajorSource, string MinorSource, string contact, string RecomendedBussinessCenre)
        {


            ThinkTime(7);



            //create new contact
            WaitUntil(driver, Control("Contactlookup", "Opportunity"), 30);
            MoveToElement(driver, Control("Contactlookup", "Opportunity"));
            ThinkTime(3);
            Element(driver, Control("Contactlookup", "Opportunity")).Click();
            ThinkTime(3);
            Element(driver, Control("Contactlookup", "Opportunity")).SendKeys(contact);
            ThinkTime(8);
            MoveToElement(driver, Control("ITSalesCustomer", "Opportunity"));
            ThinkTime(3);
            Element(driver, Control("ITSalesCustomer", "Opportunity")).Click();
            ThinkTime(2);
            ScriptErrorExcep(driver, testInReport, testDataIteration, testName);

            ThinkTime(5);
            // Number of people
            WaitUntil(driver, Control("Numberofpeople", "Opportunity"), 30);
            MoveToElement(driver, Control("Numberofpeople", "Opportunity"));
            ThinkTime(3);
            ActionsClick(driver, Control("Numberofpeople", "Opportunity"));
            ThinkTime(3);
            Element(driver, Control("Numberofpeople", "Opportunity")).SendKeys("12");
            ThinkTime(3);
            scrollDownOpportunityEnterprise(driver, testInReport, testDataIteration, testName);
            //scrollDownOpportunityEnterprise(driver, testInReport, testDataIteration, testName);

            ThinkTime(1);
            WaitUntil(driver, Control("CountryInput", "Accounts"), 30);
            MoveToElement(driver, Control("CountryInput", "Accounts"));
            Element(driver, Control("CountryInput", "Accounts")).SendKeys(Keys.Control + "a");
            Element(driver, Control("CountryInput", "Accounts")).SendKeys(Keys.Delete);

            Element(driver, Control("CountryInput", "Accounts")).SendKeys("united kingdom");

            WaitUntil(driver, Control("CountrySelect", "Accounts"), 30);
            MoveToElement(driver, Control("CountrySelect", "Accounts"));
            Element(driver, Control("CountrySelect", "Accounts")).Click();

            // Recommended Business centre
            WaitUntil(driver, Control("RecomentedBussinessCentreInputButton", "Opportunity"), 30);
            MoveToElement(driver, Control("RecomentedBussinessCentreInputButton", "Opportunity"));
            ThinkTime(2);
            Element(driver, Control("RecomentedBussinessCentreInputButton", "Opportunity")).Click();
            ThinkTime(3);
            Element(driver, Control("RecomentedBussinessCentreInputButton", "Opportunity")).SendKeys(Keys.Control + "a");
            Element(driver, Control("RecomentedBussinessCentreInputButton", "Opportunity")).SendKeys(Keys.Delete);

            Element(driver, Control("RecomentedBussinessCentreInputButton", "Opportunity")).SendKeys(RecomendedBussinessCenre);

            ThinkTime(5);
            WaitUntil(driver, Control("Languagedropdown", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("Languagedropdown", "EnterpriseSales"));
            ThinkTime(3);
            Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();
            ThinkTime(3);

            //Add new Channel
            ThinkTime(6);
            WaitUntil(driver, Control("NewChannelInput", "Opportunity"), 30);
            MoveToElement(driver, Control("NewChannelInput", "Opportunity"));
            ThinkTime(2);
            Element(driver, Control("NewChannelInput", "Opportunity")).Clear();
            ThinkTime(3);
            Element(driver, Control("NewChannelInput", "Opportunity")).SendKeys(Channel);
            ThinkTime(8);
            WaitUntil(driver, Control("NewChannelSelect", "Opportunity"), 30);
            MoveToElement(driver, Control("NewChannelSelect", "Opportunity"));
            ThinkTime(3);

            Element(driver, Control("NewChannelSelect", "Opportunity")).Click();

            ThinkTime(3);

            //Add new MajorSource
            MoveToElement(driver, Control("NewMajorSourceInput", "Opportunity"));
            ThinkTime(3);
            Element(driver, Control("NewMajorSourceInput", "Opportunity")).Clear();
            ThinkTime(2);
            Element(driver, Control("NewMajorSourceInput", "Opportunity")).SendKeys(MajorSource);
            ThinkTime(2);
            WaitUntil(driver, Control("NewMajorSourceSelect", "Opportunity"), 30);
            MoveToElement(driver, Control("NewMajorSourceSelect", "Opportunity"));
            ThinkTime(2);
            Element(driver, Control("NewMajorSourceSelect", "Opportunity")).Click();

            ThinkTime(3);

            //Add new MinorSource
            ThinkTime(3);
            MoveToElement(driver, Control("NewMinorSourceInput", "Opportunity"));
            Element(driver, Control("NewMinorSourceInput", "Opportunity")).Clear();
            ThinkTime(2);
            Element(driver, Control("NewMinorSourceInput", "Opportunity")).SendKeys(MinorSource);
            ThinkTime(2);
            WaitUntil(driver, Control("NewMinorSourceSelect", "Opportunity"), 30);
            MoveToElement(driver, Control("NewMinorSourceSelect", "Opportunity"));
            ThinkTime(3);
            Element(driver, Control("NewMinorSourceSelect", "Opportunity")).Click();
            ThinkTime(3);
            saveFooter(driver, testInReport, testName, testDataIteration);
            ThinkTime(3);
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Opportunity Created Successfully", "New Opportunity Verification");
            if (Elements(driver, Control("ScriptDialg", "Opportunity")) > 0)
            {
                Element(driver, Control("HandleScriptError", "Opportunity")).Click();
                ThinkTime(3);
                saveFooter(driver, testInReport, testName, testDataIteration);
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "No Script error present", "No Script error present");



            }



        }
        //Method to verify Source is  not editable.
        public void VerifySourceEditable(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {
            ThinkTime(3);
            WaitUntil(driver, Control("Majorsourcevalue", "Generic"), 30);
            MoveToElement(driver, Control("Majorsourcevalue", "Generic"));
            if (Elements(driver, Control("MajorSourceDeleteButton", "Generic")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Source field is not editable", "New Opportunity Verification");

            }
            else
            {
                Assert.Fail("Source field is editable");
            }

        }



        public void Modifymajorandminorfields(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string MajorSource, string MinorSource)
        {
            WaitUntil(driver, Control("Majorsourcevalue", "Generic"), 30);
            MoveToElement(driver, Control("Majorsourcevalue", "Generic"));
            Element(driver, Control("MajorSourceDeleteButton", "Generic")).Click();

            WaitUntil(driver, Control("MajorSourceInputField", "Generic"), 30);
            Element(driver, Control("MajorSourceInputField", "Generic")).SendKeys(Keys.Control + "a");
            Element(driver, Control("MajorSourceInputField", "Generic")).SendKeys(Keys.Delete);
            Element(driver, Control("MajorSourceInputField", "Generic")).SendKeys(MajorSource);

            WaitUntil(driver, Control("SelectMSourceDropdown", "Generic"), 30);
            MoveToElement(driver, Control("SelectMSourceDropdown", "Generic"));
            Element(driver, Control("SelectMSourceDropdown", "Generic")).Click();

            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Major Source Field updated Successfully", "Major Source Field Verification");

            //Select Minor Source verification

            //  WaitUntil(driver, Control("Minorsourcevalue", "Generic"), 30);
            // MoveToElement(driver, Control("Minorsourcevalue", "Generic"));
            //Element(driver, Control("MinorSourceDeleteButton", "Generic")).Click();

            WaitUntil(driver, Control("MinorSourceInputButton", "Generic"), 30);
            MoveToElement(driver, Control("MinorSourceInputButton", "Generic"));
            Element(driver, Control("MinorSourceInputButton", "Generic")).SendKeys(MinorSource);

            WaitUntil(driver, Control("SelectMinorSourceDropdown", "Generic"), 30);
            MoveToElement(driver, Control("SelectMinorSourceDropdown", "Generic"));
            Element(driver, Control("SelectMinorSourceDropdown", "Generic")).Click();

            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Minor Source Field updated Successfully", "Minor Source Field Verification");
            saveFooter(driver, testInReport, testName, testDataIteration);

            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Opportunity Created Successfully", "New Opportunity Verification");

        }
        public void CreateOppadditionalfield(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {
            ThinkTime(15);
            scrollDownOpportunityEnterprise(driver, testInReport, testName, testDataIteration);
            ThinkTime(1);
            MoveToElement(driver, Control("Estclosedate", "Opportunity"));
            ThinkTime(2);
            ActionsDoubleClick(driver, Control("Estclosedate", "Opportunity"));
            ThinkTime(2);
            Element(driver, Control("Estclosedate", "Opportunity")).SendKeys(Keys.Control + "a");
            Element(driver, Control("Estclosedate", "Opportunity")).SendKeys(Keys.Delete);

            Element(driver, Control("Estclosedate", "Opportunity")).SendKeys("2/2/2020");
            ThinkTime(2);
            MoveToElement(driver, Control("Probability", "Opportunity"));
            Element(driver, Control("Probability", "Opportunity")).SendKeys(Keys.Control + "a");
            Element(driver, Control("Probability", "Opportunity")).SendKeys(Keys.Delete);

            Element(driver, Control("Probability", "Opportunity")).SendKeys("20");
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Opportunity Created Successfully", "New Opportunity Verification");
            saveFooter(driver, testInReport, testName, testDataIteration);


            string date = Element(driver, Control("Estclosedate", "Opportunity")).GetAttribute("defaultValue");
            string date1 = "2/2/2020";
            if (date == date1)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Est. Close date Created Successfully", "New Opportunity Verification");

            }
            else
            {
                Assert.Fail("User not able to enter Est. Close date");
            }


            string Prob = Element(driver, Control("Probability", "Opportunity")).GetAttribute("defaultValue");
            string Prob1 = "20";
            if (Prob == Prob1)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Probability entered Successfully", "New Opportunity Verification");

            }
            else
            {
                Assert.Fail("User not able to enter Probability");
            }

        }


        //Method to Verify New Opportunity
        public void GlobalSearchAndVerifyRecord1(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string Time, string Contact, string FilterOption, string Testdata)
        {
            ThinkTime(3);

            string NewContact = Element(driver, Control("ContactName", "Opportunity")).GetAttribute("innerText");
            Console.WriteLine(NewContact);


            ElementHighlight(driver, Control("ReferenceText", "EnterpriseSales"));
            string Title = Element(driver, Control("ReferenceText", "EnterpriseSales")).GetAttribute("defaultValue");

            Console.WriteLine(Title);
            ThinkTime(3);
            WaitUntil(driver, Control("GlobalSearch", "EnterpriseSales"), 180);
            ActionsClick(driver, Control("GlobalSearch", "EnterpriseSales"));

            ThinkTime(7);

            Select(Element(driver, Control("CategorizedSearch", "EnterpriseSales"))).SelectByText("Categorized Search ");

            WaitUntil(driver, Control("GlobalSearchField", "EnterpriseSales"), 30);
            Element(driver, Control("GlobalSearchField", "EnterpriseSales")).Click();
            Element(driver, Control("GlobalSearchField", "EnterpriseSales")).SendKeys(Title);


            Element(driver, Control("SearchButtonOpportunity", "EnterpriseSales")).Click();

            ThinkTime(7);

            Select(Element(driver, Control("SelectFilter", "EnterpriseSales"))).SelectByText(FilterOption);

            ThinkTime(7);

            //ElementHighlight(driver, Control("VerifyOpportunity", Testdata, "EnterpriseSales"));
            //string VerifyRecord = Element(driver, Control("VerifyOpportunity", Testdata, "EnterpriseSales")).GetAttribute("innerText");
            ElementHighlight(driver, Control("VerifyOpportunity1", Testdata, "EnterpriseSales"));
            string VerifyRecord = Element(driver, Control("VerifyOpportunity1", Testdata, "EnterpriseSales")).GetAttribute("innerText");

            Console.WriteLine(VerifyRecord);


            if (NewContact == VerifyRecord)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Record verified using global search", "Global search verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Unable to open Record using global search", "Global search verification");
                Assert.Fail("Global search verification Failed");
            }
        }

        //Method to Verify New Opportunity
        public void GlobalSearchAndVerifyRecord(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string Time, string Contact, string FilterOption, string Testdata)
        {
            ThinkTime(3);

            string NewContact = Contact + Time;

            ElementHighlight(driver, Control("HeaderText", "EnterpriseSales"));
            string Title = Element(driver, Control("HeaderText", "EnterpriseSales")).GetAttribute("title");


            ThinkTime(3);
            WaitUntil(driver, Control("GlobalSearch", "EnterpriseSales"), 180);
            ActionsClick(driver, Control("GlobalSearch", "EnterpriseSales"));
            ThinkTime(7);
            Select(Element(driver, Control("CategorizedSearch", "EnterpriseSales"))).SelectByText("Categorized Search ");
            WaitUntil(driver, Control("GlobalSearchField", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("GlobalSearchField", "EnterpriseSales"));
            Element(driver, Control("GlobalSearchField", "EnterpriseSales")).SendKeys(Title);




            Element(driver, Control("SearchButtonOpportunity", "EnterpriseSales")).Click();



            ThinkTime(7);



            Select(Element(driver, Control("SelectFilter", "EnterpriseSales"))).SelectByText(FilterOption);



            ThinkTime(7);



            ElementHighlight(driver, Control("VerifyOpportunity", Testdata, "EnterpriseSales"));



            string VerifyRecord = Element(driver, Control("VerifyOpportunity", Testdata, "EnterpriseSales")).GetAttribute("innerText");



            if (Title == VerifyRecord)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Record verified using global search", "Global search verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Unable to open Record using global search", "Global search verification");
                Assert.Fail("Global search verification Failed");
            }
        }


        public void CreateAndVerifyNewOpportunityITSales(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {
            ThinkTime(5);

            WaitUntil(driver, Control("NewButtonITSales", "ITSales"), 360);
            MoveToElement(driver, Control("NewButtonITSales", "ITSales"));
            Element(driver, Control("NewButtonITSales", "ITSales")).Click();

            ThinkTime(10);

            // Verify Topic.
            WaitUntil(driver, Control("CustomerTopicField", "ITSales"), 360);
            if (Elements(driver, Control("CustomerTopicField", "ITSales")) > 0)
            {
                ElementHighlight(driver, Control("CustomerTopicField", "ITSales"));

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Topic Field verified", "Opportunity field verification");

            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Topic Field verification failed", "Opportunity field verification");
                Assert.Fail("Topic field verification failed");
            }


            // Verify Opportunity Sub-Type.
            WaitUntil(driver, Control("OpportunitySubType", "ITSales"), 360);
            if (Elements(driver, Control("OpportunitySubType", "ITSales")) > 0)
            {
                ElementHighlight(driver, Control("OpportunitySubType", "ITSales"));

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Opportunity Sub Type Field verified", "Opportunity field verification");

            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Opportunity Sub Type Field verification failed", "Opportunity field verification");
                Assert.Fail("Opportunity Sub Type field verification failed");
            }

            // Verify Customer Type.
            WaitUntil(driver, Control("CustomerTypeITSales", "ITSales"), 360);
            if (Elements(driver, Control("CustomerTypeITSales", "ITSales")) > 0)
            {
                ElementHighlight(driver, Control("CustomerTypeITSales", "ITSales"));

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Customer Type Field verified", "Opportunity field verification");

            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Customer Type Field verification failed", "Opportunity field verification");
                Assert.Fail("Customer Type field verification failed");
            }


            ThinkTime(3);
            scrollDownOpportunityPageITSales(driver, testInReport, testName, testDataIteration);

            ThinkTime(3);


            // Verify Duration Months.
            WaitUntil(driver, Control("DurationMonths", "ITSales"), 360);
            if (Elements(driver, Control("DurationMonths", "ITSales")) > 0)
            {
                ElementHighlight(driver, Control("DurationMonths", "ITSales"));

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Duration Months Field verified", "Opportunity field verification");

            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Duration Months Field verification failed", "Opportunity field verification");
                Assert.Fail("Duration Months field verification failed");
            }

            // Verify Setup-fee.

            if (Elements(driver, Control("SetUpFeeItSales", "ITSales")) > 0)
            {
                ElementHighlight(driver, Control("SetUpFeeItSales", "ITSales"));

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Set-Up Fee Field verified", "Opportunity field verification");

            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Set-Up Fee Field verification failed", "Opportunity field verification");
                Assert.Fail("Set-Up Fee field verification failed");
            }

            // Verify Monthly Fee.

            if (Elements(driver, Control("MonthlyFeeItSales", "ITSales")) > 0)
            {
                ElementHighlight(driver, Control("MonthlyFeeItSales", "ITSales"));

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Monthly Fee Field verified", "Opportunity field verification");

            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Monthly Fee Field verification failed", "Opportunity field verification");
                Assert.Fail("Monthly Fee field verification failed");
            }

            // Verify Total Contract Value.

            if (Elements(driver, Control("TotalContractValueItSales", "ITSales")) > 0)
            {
                ElementHighlight(driver, Control("TotalContractValueItSales", "ITSales"));

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Total Contract Value Field verified", "Opportunity field verification");

            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Total Contract Value Field verification failed", "Opportunity field verification");
                Assert.Fail("Total Contract Value field verification failed");
            }




            // Verify Alternative Contact Name.

            if (Elements(driver, Control("AlternativeContactName", "ITSales")) > 0)
            {
                ElementHighlight(driver, Control("AlternativeContactName", "ITSales"));

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Alternative Contact Name Field verified", "Opportunity field verification");

            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Alternative Contact Name Field verification failed", "Opportunity field verification");
                Assert.Fail("Alternative Contact Name field verification failed");
            }


            ThinkTime(3);
            scrollDownOpportunityPageITSales1(driver, testInReport, testName, testDataIteration);

            ThinkTime(3);


            // Verify Alternamtive Contact Email.

            if (Elements(driver, Control("AlternativeContactEmail", "ITSales")) > 0)
            {
                ElementHighlight(driver, Control("AlternativeContactEmail", "ITSales"));

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Alternative Contact Email Field verified", "Opportunity field verification");

            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Alternative Contact Email Field verification failed", "Opportunity field verification");
                Assert.Fail("Alternative Contact Email field verification failed");
            }

            // Verify Alternative Contact Phone
            //AlternativeContactPhone
            if (Elements(driver, Control("AlternativeContactPhone", "ITSales")) > 0)
            {
                ElementHighlight(driver, Control("AlternativeContactPhone", "ITSales"));

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Alternative Contact Phone Field verified", "Opportunity field verification");

            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Alternative Contact Phone Field verification failed", "Opportunity field verification");
                Assert.Fail("Alternative Contact Phone field verification failed");
            }

            ThinkTime(3);
            scrollDownOpportunityPageITSales(driver, testInReport, testName, testDataIteration);

            ThinkTime(3);
            // Verify Sale Type.

            if (Elements(driver, Control("SaleTypeItSales", "ITSales")) > 0)
            {
                ElementHighlight(driver, Control("SaleTypeItSales", "ITSales"));

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Sale Type Field verified", "Opportunity field verification");

            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Sale Type Field verification failed", "Opportunity field verification");
                Assert.Fail("Sale Type field verification failed");
            }
        }


        //method to Verify opportunity Fields Mouse Hover IT sales user.
        public void VerifyNewOpportunityFieldsMouseHover(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {
            ThinkTime(3);

            //Customer Type field verification.

            Actions action = new Actions(driver);
            IWebElement eleSlot1 = Element(driver, Control("CustomerTypeFieldMouse", "ITSales"));
            action.MoveToElement(eleSlot1).Build().Perform();


            if (Elements(driver, Control("CustomerTypeMouseVerify", "ITSales")) > 0)
            {
                ElementHighlight(driver, Control("CustomerTypeMouseVerify", "ITSales"));

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Customer Type Field mouse hover verified", "Opportunity field mouse hover verification");

            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Customer Type Field mouse hover verification failed", "Opportunity field mouse hover verification");
                Assert.Fail("Customer Type field mouse hover verification failed");
            }


            ThinkTime(3);
            scrollDownOpportunityPageITSales(driver, testInReport, testName, testDataIteration);

            ThinkTime(3);


            //Set-Up fees field verification.

            Actions action1 = new Actions(driver);
            IWebElement eleSlot2 = Element(driver, Control("SetUpFeeFieldMouse", "ITSales"));
            action1.MoveToElement(eleSlot2).Build().Perform();


            if (Elements(driver, Control("SetUpFeeMouseVerify", "ITSales")) > 0)
            {
                ElementHighlight(driver, Control("SetUpFeeMouseVerify", "ITSales"));

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Set-Up Fee Field mouse hover verified", "Opportunity field mouse hover verification");

            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Set-Up fee Field mouse hover verification failed", "Opportunity field mouse hover verification");
                Assert.Fail("Set-Up Fee field mouse hover verification failed");
            }

            //Monthly Fee field verification.

            Actions action2 = new Actions(driver);
            IWebElement eleSlot3 = Element(driver, Control("MonthlyFeeFieldMouse", "ITSales"));
            action1.MoveToElement(eleSlot3).Build().Perform();


            if (Elements(driver, Control("MonthlyFeeMouseVerify", "ITSales")) > 0)
            {
                ElementHighlight(driver, Control("MonthlyFeeMouseVerify", "ITSales"));

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Monthly Fee Field mouse hover verified", "Opportunity field mouse hover verification");

            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Monthly fee Field mouse hover verification failed", "Opportunity field mouse hover verification");
                Assert.Fail("Monthly Fee field mouse hover verification failed");
            }

            //Total Contract Value verification.

            Actions action3 = new Actions(driver);
            IWebElement eleSlot4 = Element(driver, Control("TotalContractValueFieldMouse", "ITSales"));
            action1.MoveToElement(eleSlot3).Build().Perform();


            if (Elements(driver, Control("TotalContractValueMouseVerify", "ITSales")) > 0)
            {
                ElementHighlight(driver, Control("TotalContractValueMouseVerify", "ITSales"));

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Total Contract Value Field mouse hover verified", "Opportunity field mouse hover verification");

            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Total Contract Value Field mouse hover verification failed", "Opportunity field mouse hover verification");
                Assert.Fail("Total Contract Value field mouse hover verification failed");
            }

            //Alternative Contract Name Verification.

            Actions action4 = new Actions(driver);
            IWebElement eleSlot5 = Element(driver, Control("AlternativeContactNameMouse", "ITSales"));
            action1.MoveToElement(eleSlot3).Build().Perform();


            if (Elements(driver, Control("AlternativeContactNameMouseVerify", "ITSales")) > 0)
            {
                ElementHighlight(driver, Control("AlternativeContactNameMouseVerify", "ITSales"));

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Alternative Contract Name Field mouse hover verified", "Opportunity field mouse hover verification");

            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Alternative Contract Name Field mouse hover verification failed", "Opportunity field mouse hover verification");
                Assert.Fail("Alternative Contract Name field mouse hover verification failed");
            }


            ThinkTime(3);
            scrollDownOpportunityPageITSales1(driver, testInReport, testName, testDataIteration);

            ThinkTime(3);


            //Alternative Contract Email Verification.

            Actions action5 = new Actions(driver);
            IWebElement eleSlot6 = Element(driver, Control("AlternativeContactEmailMouse", "ITSales"));
            action1.MoveToElement(eleSlot3).Build().Perform();


            if (Elements(driver, Control("AlternativeContactEmailMouseVerify", "ITSales")) > 0)
            {
                ElementHighlight(driver, Control("AlternativeContactEmailMouseVerify", "ITSales"));

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Alternative Contract Emial Field mouse hover verified", "Opportunity field mouse hover verification");

            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Alternative Contract Email Field mouse hover verification failed", "Opportunity field mouse hover verification");
                Assert.Fail("Alternative Contract Email field mouse hover verification failed");
            }

            //Alternative Contract phone Verification.

            Actions action6 = new Actions(driver);
            IWebElement eleSlot7 = Element(driver, Control("AlternativeContactPhoneMouse", "ITSales"));
            action1.MoveToElement(eleSlot3).Build().Perform();


            if (Elements(driver, Control("AlternativeContactPhoneMouseVerify", "ITSales")) > 0)
            {
                ElementHighlight(driver, Control("AlternativeContactPhoneMouseVerify", "ITSales"));

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Alternative Contract Phone Field mouse hover verified", "Opportunity field mouse hover verification");

            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Alternative Contract Phone Field mouse hover verification failed", "Opportunity field mouse hover verification");
                Assert.Fail("Alternative Contract Phone field mouse hover verification failed");
            }


            ThinkTime(3);
            scrollDownOpportunityPageITSales(driver, testInReport, testName, testDataIteration);

            ThinkTime(3);


            //Sale Type Verification.

            Actions action7 = new Actions(driver);
            IWebElement eleSlot8 = Element(driver, Control("SaleTypeMouse", "ITSales"));
            action1.MoveToElement(eleSlot3).Build().Perform();


            if (Elements(driver, Control("SaleTypeMouseVerify", "ITSales")) > 0)
            {
                ElementHighlight(driver, Control("SaleTypeMouseVerify", "ITSales"));

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Sale Type Field mouse hover verified", "Opportunity field mouse hover verification");

            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Sale Type Field mouse hover verification failed", "Opportunity field mouse hover verification");
                Assert.Fail("Sale Type field mouse hover verification failed");
            }
        }


        //method to Verify opportunity Fields with mandatory fields IT sales user.
        public void FillMandatoryFieldsAndVerifyRecord(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {
            ThinkTime(3);
            scrollUpPage(driver, testInReport, testName, testDataIteration);

            ThinkTime(5);
            //WaitUntil(driver, Control("MoveToCustomerField", "ITSales"), 30);
            MoveToElement(driver, Control("CustomerInputField", "ITSales"));
            Element(driver, Control("CustomerInputField", "ITSales")).Click();

            ThinkTime(2);
            WaitUntil(driver, Control("CustomerNewButton", "ITSales"), 360);
            MoveToElement(driver, Control("CustomerNewButton", "ITSales"));
            Element(driver, Control("CustomerNewButton", "ITSales")).Click();

            ThinkTime(2);
            WaitUntil(driver, Control("CustomerNewContactButton", "ITSales"), 360);
            MoveToElement(driver, Control("CustomerNewContactButton", "ITSales"));
            Element(driver, Control("CustomerNewContactButton", "ITSales")).Click();

            ThinkTime(10);

            MoveToElement(driver, Control("QCContactLnameInput", "ITSales"));
            Element(driver, Control("QCContactLnameInput", "ITSales")).Click();
            Element(driver, Control("QCContactLnameInput", "ITSales")).SendKeys("TestAccountName");

            ThinkTime(2);

            WaitUntil(driver, Control("QCLanguageInput", "ITSales"), 360);
            MoveToElement(driver, Control("QCLanguageInput", "ITSales"));
            Element(driver, Control("QCLanguageInput", "ITSales")).Click();
            Element(driver, Control("QCLanguageInput", "ITSales")).SendKeys("UK English");

            ThinkTime(4);

            WaitUntil(driver, Control("SelectLanguage", "ITSales"), 360);
            MoveToElement(driver, Control("SelectLanguage", "ITSales"));
            Element(driver, Control("SelectLanguage", "ITSales")).Click();

            ThinkTime(5);

            Element(driver, Control("QCSaveButton", "ITSales")).Click();

            ThinkTime(5);

        }




        public void VerifyTopicAndTitleFieldOpportunity(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {
            string VerifyContent = "(No Account) - (No Centre Selected) - (No subtype)";

            ThinkTime(5);

            scrollUpPage(driver, testInReport, testName, testDataIteration);

            ThinkTime(4);


            //string name = SelectTitle(driver,testInReport,testDataIteration,testName);

            //string s = Element(driver, Control("CustomerTopic", "Opportunity")).GetAttribute("defaultValue");

            //string GetTitle = Element(driver, Control("GetTitleValue", "Opportunity")).GetAttribute("title");

            //if (VerifyContent == GetTitle)
            //{
            //    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Title Field verified successfully", "Title field verification");
            //}

            //else
            //{
            //    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Title field verification failed", "Title field verification");
            //    Assert.Fail("Title field verification Failed");
            //}

            //ThinkTime(5);

            string GetTopic = Element(driver, Control("CustomerTopic", "Opportunity")).GetAttribute("defaultValue");

            if (VerifyContent == GetTopic)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Topic Field verified successfully", "Topic field verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Topic field verification failed", "Topic field verification");
                Assert.Fail("Topic field verification Failed");
            }

            //Veriify Opportunity subtype.

            Element(driver, Control("SelectClickTest", "Generic")).Click();
            Select(Element(driver, Control("SelectOption1", "Generic"))).SelectByText("New customers D - 1");
            if (Elements(driver, Control("SelectOption1", "Generic")) > 0)
            {
                ElementHighlight(driver, Control("SelectOption1", "Generic"));

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Sale Type Field mouse hover verified", "Opportunity field mouse hover verification");

            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Sale Type Field mouse hover verification failed", "Opportunity field mouse hover verification");
                Assert.Fail("Sale Type field mouse hover verification failed");
            }
        }


        //search and verify record using global search.

        public void SearchAndVerifyRecord(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string subject, string time)
        {
            ThinkTime(3);

            string searchSubject = subject + time;
            WaitUntil(driver, Control("GlobalSearchInput", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("GlobalSearchInput", "EnterpriseSales"));
            ThinkTime(3);
            Element(driver, Control("GlobalSearchInput", "EnterpriseSales")).SendKeys(searchSubject);
            ThinkTime(3);
            Element(driver, Control("GlobalSearchButton", "EnterpriseSales")).Click();

            ThinkTime(3);

            if (Elements(driver, Control("VerifySearchActivityPhoneCall", searchSubject, "EnterpriseSales")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Record verified using global search", "Global search verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Unable to open Record using global search", "Global search verification");
                Assert.Fail("Global search verification Failed");
            }

        }


        //method to verify Delete button Activity enterprise sales.

        public void VerifyDeleteButton(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {
            ThinkTime(10);



            if (Elements(driver, Control("VerifyActivityDeleteButton", "EnterpriseSales")) == 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Delete button is not visible", "Delete button verification");
            }

            else
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Delete button is visible", "Delete button vetification");
                Assert.Fail("Delete button vetification failed");
            }

        }


        public void CreateChangeCalloutcomeandAssignPhoneCall(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string entity, string button, string newactivity, string receiver, string quickcreatebutton, string user, string assignname, string calloutcome1, string sequence, string attempt, string callback, string calloutcome2)
        {

            Activitiesscreenbutton(driver, testInReport, testName, testDataIteration, button);

            //ThinkTime(10);
            //ActionsClick(driver, Control("NewActivityButton", "EnterpriseSales"));
            ThinkTime(7);
            WaitUntil(driver, Control("NewPhoneCallButton", "EnterpriseSales"), 30);
            Element(driver, Control("NewPhoneCallButton", "EnterpriseSales")).Click();

            ThinkTime(3);

            WaitUntil(driver, Control("PhoneCallSubject", "Opportunity"), 30);
            Element(driver, Control("PhoneCallSubject", "Opportunity")).SendKeys(Keys.Control + "a");
            Element(driver, Control("PhoneCallSubject", "Opportunity")).SendKeys(Keys.Delete);
            Element(driver, Control("PhoneCallSubject", "Opportunity")).SendKeys(DateTime.Now.ToString());
            String s = Element(driver, Control("PhoneCallSubject", "Opportunity")).GetAttribute("value").ToString();

            if (Elements(driver, Control("CallToInputField", "Opportunity")) > 0)
            {
                WaitUntil(driver, Control("CallToInputField", "Opportunity"), 30);
                ActionsClick(driver, Control("CallToInputField", "Opportunity"));
                //Element(driver, Control("CallToInputField", "Opportunity")).SendKeys(Keys.Control + "a");
                //Element(driver, Control("CallToInputField", "Opportunity")).SendKeys(Keys.Delete);
            }

            WaitUntil(driver, Control("CallToLabel", "Opportunity"), 30);
            MoveToElement(driver, Control("CallToLabel", "Opportunity"));
            //Element(driver, Control("CallToDeleteButton", "Opportunity")).Click();

            Element(driver, Control("CallToInputField1", "Opportunity")).Click();
            Element(driver, Control("CallToInputField1", "Opportunity")).SendKeys(receiver);

            ThinkTime(3);

            WaitUntil(driver, Control("CallToSelection", receiver, "Opportunity"), 30);
            Element(driver, Control("CallToSelection", receiver, "Opportunity")).Click();
            ThinkTime(2);
            Element(driver, Control("Saveregardingaccount", "Opportunity")).Click();
            ThinkTime(10);
            NavigateToEntity(driver, testInReport, testName, testDataIteration, entity);

            SearchforRecord(driver, testInReport, testName, testDataIteration, s);
            OpenFirstActiveContact(driver, testInReport, testName, testDataIteration);

            //Assign to another user
            AssignRecordAnotherUser(driver, testInReport, testName, testDataIteration, user, assignname);

            //Select the call outcome
            ThinkTime(15);
            Select(Element(driver, Control("CallOutcome", "Opportunity"))).SelectByText(calloutcome1);

            //Select due date
            string newdate = DateTime.Today.ToString("M/d/yyyy").Replace("-", "/");
            ThinkTime(5);
            WaitUntil(driver, Control("DueDate", "phoneCall"), 120);
            MoveToElement(driver, Control("DueDate", "phoneCall"));
            ActionsClick(driver, Control("DueDate", "phoneCall"));
            ThinkTime(3);
            ActionsClick(driver, Control("DueDate", "phoneCall"));
            ThinkTime(3);
            Element(driver, Control("DueDate", "phoneCall")).SendKeys(newdate);
            ThinkTime(8);
            saveFooter(driver, testInReport, testName, testDataIteration);
            scrollDownPhoneCust(driver, testInReport, testName, testDataIteration, "400");

            //Select Sequence
            ThinkTime(3);
            WaitUntil(driver, Control("Sequence", "phoneCall"), 120);
            Select(Element(driver, Control("Sequence", "phoneCall"))).SelectByText(sequence);

            //Select Attempt
            ThinkTime(3);
            WaitUntil(driver, Control("Attempt", "phoneCall"), 120);
            MoveToElement(driver, Control("Attempt", "phoneCall"));
            ActionsClick(driver, Control("Attempt", "phoneCall"));
            ThinkTime(3);
            Element(driver, Control("Attempt", "phoneCall")).SendKeys(attempt);
            ThinkTime(8);

            //Selct CallBack
            ThinkTime(5);
            Select(Element(driver, Control("CallBackType", "phoneCall"))).SelectByText(callback);
            scrollUpaccounts(driver, testInReport, testName, testDataIteration);

            //save footer
            ThinkTime(5);
            saveFooter(driver, testInReport, testName, testDataIteration);
            ThinkTime(5);

            MoveToElement(driver, Control("refreshButton", "Opportunity"));
            Element(driver, Control("refreshButton", "Opportunity")).Click();

            //Select the call outcome2
            ThinkTime(15);
            Select(Element(driver, Control("CallOutcome", "Opportunity"))).SelectByText(calloutcome2);
            ThinkTime(5);

            saveFooter(driver, testInReport, testName, testDataIteration);
            ThinkTime(5);

            MoveToElement(driver, Control("refreshButton", "Opportunity"));
            Element(driver, Control("refreshButton", "Opportunity")).Click();

        }



        //Method to create new communication Profile

        public void CreateNewCommunicationPrifile(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string CommunicationType, string Time, string EmailAddress)
        {
            string Domian = "@Gmial.com";
            string UpdatedEmail = EmailAddress + Time + Domian;

            WaitUntil(driver, Control("CommunicationProfileCreate", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("CommunicationProfileCreate", "EnterpriseSales"));
            ThinkTime(3);
            Element(driver, Control("CommunicationProfileCreate", "EnterpriseSales")).Click();
            ThinkTime(3);
            WaitUntil(driver, Control("SelectCommunicationType", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("SelectCommunicationType", "EnterpriseSales"));
            ThinkTime(3);
            Select(Element(driver, Control("SelectCommunicationType", "EnterpriseSales"))).SelectByText(CommunicationType);
            ThinkTime(3);
            WaitUntil(driver, Control("InputEmailAddressCommunicaton", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("InputEmailAddressCommunicaton", "EnterpriseSales"));
            ThinkTime(7);
            Element(driver, Control("InputEmailAddressCommunicaton", "EnterpriseSales")).Click();
            Element(driver, Control("InputEmailAddressCommunicaton", "EnterpriseSales")).SendKeys(UpdatedEmail);
            ThinkTime(3);
            saveFooter(driver, testInReport, testName, testDataIteration);

            ThinkTime(3);

            MoveToElement(driver, Control("VerifyNewCommunicationProfileER", UpdatedEmail, "EnterpriseSales"));
            ThinkTime(3);
            ElementHighlight(driver, Control("VerifyNewCommunicationProfileER", UpdatedEmail, "EnterpriseSales"));
            if (Elements(driver, Control("VerifyNewCommunicationProfileER", UpdatedEmail, "EnterpriseSales")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "New Communicatoin Profile created successfully", "New Communication Profile Verification");

            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "New Communicatoin Profile verification failed", "New Communication Profile Verification");
                Assert.Fail("New Communication Profile failed");
            }
        }


        //Method to Assign Record to Logged user.

        public void AssignRecordLoggedUser(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string User, string loggedinuser)
        {
            ThinkTime(15);
            if (Elements(driver, Control("AssignButtonActivity", "EnterpriseSales")) == 0)
            {
                WaitUntil(driver, Control("Moreheadernew", "Opportunity"), 30);

                MoveToElement(driver, Control("Moreheadernew", "Opportunity"));
                Element(driver, Control("Moreheadernew", "Opportunity")).Click();

                WaitUntil(driver, Control("AssignButtonActivity", "EnterpriseSales"), 30);
                MoveToElement(driver, Control("AssignButtonActivity", "EnterpriseSales"));
                Element(driver, Control("AssignButtonActivity", "EnterpriseSales")).Click();
            }

            else
            {
                ThinkTime(5);
                WaitUntil(driver, Control("AssignButtonActivity", "EnterpriseSales"), 30);
                MoveToElement(driver, Control("AssignButtonActivity", "EnterpriseSales"));
                Element(driver, Control("AssignButtonActivity", "EnterpriseSales")).Click();
            }
            WaitUntil(driver, Control("GetAssignUser", "EnterpriseSales"), 90);
            string ExistingUser = Element(driver, Control("GetAssignUser", "EnterpriseSales")).GetAttribute("innerText");

            ThinkTime(3);

            if (ExistingUser == User)
            {
                WaitUntil(driver, Control("AssignButtonPopup", "EnterpriseSales"), 30);
                MoveToElement(driver, Control("AssignButtonPopup", "EnterpriseSales"));
                Element(driver, Control("AssignButtonPopup", "EnterpriseSales")).Click();
                ThinkTime(10);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Record assigned to logged user", "Assign record");

                //int finalowner = Elements(driver, Control("Ownervalueheader", loggedinuser, "Generic"));

                //if (finalowner > 0)
                //{
                //    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Record assigned to another user", "Assign record");

                //}
                //else
                //{
                //    Assert.Fail("User not assigned");
                //}


            }
            else
            {
                WaitUntil(driver, Control("GetAssignUser", "EnterpriseSales"), 30);
                MoveToElement(driver, Control("GetAssignUser", "EnterpriseSales"));
                Element(driver, Control("GetAssignUser", "EnterpriseSales")).Click();
                ThinkTime(10);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Record assigned to logged user", "Assign record");
            }
            ThinkTime(5);
        }



        //Method to assign Record to another user.

        public void AssignRecordAnotherUserwithError(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string User, string AssignUser)
        {
            ThinkTime(20);

            if (Elements(driver, Control("ScriptDialg", "Opportunity")) > 0)
            {
                Element(driver, Control("HandleScriptError", "Opportunity")).Click();
                ThinkTime(3);

                ThinkTime(3);
                MoveToElement(driver, Control("refreshButton", "Opportunity"));
                Element(driver, Control("refreshButton", "Opportunity")).Click();
                ThinkTime(4);
            }
            else
            {

            }

            if (Elements(driver, Control("AssignButtonActivity", "EnterpriseSales")) > 0)
            {
                WaitUntil(driver, Control("AssignButtonActivity", "EnterpriseSales"), 30);
                MoveToElement(driver, Control("AssignButtonActivity", "EnterpriseSales"));
                ThinkTime(5);
                Element(driver, Control("AssignButtonActivity", "EnterpriseSales")).Click();

            }
            else
            {
                WaitUntil(driver, Control("Moreheadernew", "Opportunity"), 30);

                MoveToElement(driver, Control("Moreheadernew", "Opportunity"));
                Element(driver, Control("Moreheadernew", "Opportunity")).Click();

                WaitUntil(driver, Control("AssignButtonActivity", "EnterpriseSales"), 30);
                MoveToElement(driver, Control("AssignButtonActivity", "EnterpriseSales"));
                Element(driver, Control("AssignButtonActivity", "EnterpriseSales")).Click();
            }
            ThinkTime(2);
            WaitUntil(driver, Control("GetAssignUser", "EnterpriseSales"), 30);
            string ExistingUser = Element(driver, Control("GetAssignUser", "EnterpriseSales")).GetAttribute("innerText");

            ThinkTime(3);

            if (ExistingUser == User)
            {
                WaitUntil(driver, Control("GetAssignUser", "EnterpriseSales"), 30);
                MoveToElement(driver, Control("GetAssignUser", "EnterpriseSales"));
                Element(driver, Control("GetAssignUser", "EnterpriseSales")).Click();

                ThinkTime(2);
                WaitUntil(driver, Control("InputTeamAssign", "EnterpriseSales"), 30);

                Element(driver, Control("InputTeamAssign", "EnterpriseSales")).Click();
                Element(driver, Control("InputTeamAssign", "EnterpriseSales")).SendKeys(AssignUser);

                ThinkTime(7);

                MoveToElement(driver, Control("Languagedropdown", "EnterpriseSales"));
                Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();

                WaitUntil(driver, Control("AssignButtonPopup", "EnterpriseSales"), 30);
                MoveToElement(driver, Control("AssignButtonPopup", "EnterpriseSales"));
                Element(driver, Control("AssignButtonPopup", "EnterpriseSales")).Click();

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Record assigned to another user", "Assign record");


                ThinkTime(5);
                if (Elements(driver, Control("SavePopUp", "Contacts")) > 0)
                {

                    WaitUntil(driver, Control("Discardbutton", "Opportunity"), 50);
                    MoveToElement(driver, Control("Discardbutton", "Opportunity"));
                    Element(driver, Control("Discardbutton", "Opportunity")).Click();

                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Discard changes PopUp  Handled", "PopUp handling");
                    ThinkTime(3);
                    MoveToElement(driver, Control("refreshButton", "Opportunity"));
                    Element(driver, Control("refreshButton", "Opportunity")).Click();
                }

            }
            else
            {
                MoveToElement(driver, Control("InputTeamAssign", "EnterpriseSales"));
                Element(driver, Control("InputTeamAssign", "EnterpriseSales")).Click();
                Element(driver, Control("InputTeamAssign", "EnterpriseSales")).SendKeys(User);

                ThinkTime(3);

                MoveToElement(driver, Control("SelectTeamDropdown", AssignUser, "EnterpriseSales"));
                Element(driver, Control("SelectTeamDropdown", AssignUser, "EnterpriseSales")).Click();

                WaitUntil(driver, Control("AssignButtonPopup", "EnterpriseSales"), 30);
                MoveToElement(driver, Control("AssignButtonPopup", "EnterpriseSales"));
                Element(driver, Control("AssignButtonPopup", "EnterpriseSales")).Click();

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Record assigned to another user", "Assign record");
            }


            ThinkTime(5);
            if (Elements(driver, Control("SavePopUp", "Contacts")) > 0)
            {

                WaitUntil(driver, Control("Discardbutton", "Opportunity"), 50);
                MoveToElement(driver, Control("Discardbutton", "Opportunity"));
                Element(driver, Control("Discardbutton", "Opportunity")).Click();

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Discard changes PopUp  Handled", "PopUp handling");
                ThinkTime(3);
                MoveToElement(driver, Control("refreshButton", "Opportunity"));
                Element(driver, Control("refreshButton", "Opportunity")).Click();
            }
            ThinkTime(5);
            BusinessProcessError(driver, testInReport, testName, testDataIteration);

            ThinkTime(5);

        }





        public void AssignNewTask(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {
            ThinkTime(5);

            //Subject field
            string Date = DateTime.Today.ToString("dd-MM-yyyy");
            DateTime Now = DateTime.Now;
            string Time = Date + Convert.ToString(Now.Hour) + Convert.ToString(Now.Millisecond);


            string NewSubject = "Task" + Time;
            WaitUntil(driver, Control("PhoneCallSubject", "EnterpriseSales"), 50);
            MoveToElement(driver, Control("PhoneCallSubject", "EnterpriseSales"));
            Element(driver, Control("PhoneCallSubject", "EnterpriseSales")).SendKeys(NewSubject);
            ThinkTime(5);
            saveFooter(driver, testInReport, testName, testDataIteration);
        }




        public void NewDraftEmailcreate(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {
            ThinkTime(5);

            //Subject field
            string Date = DateTime.Today.ToString("dd-MM-yyyy");
            DateTime Now = DateTime.Now;
            string Time = Date + Convert.ToString(Now.Hour) + Convert.ToString(Now.Millisecond);


            string NewSubject = "Task" + Time;
            WaitUntil(driver, Control("PhoneCallSubject", "EnterpriseSales"), 50);
            MoveToElement(driver, Control("PhoneCallSubject", "EnterpriseSales"));
            Element(driver, Control("PhoneCallSubject", "EnterpriseSales")).SendKeys(NewSubject);
            ThinkTime(5);
            saveFooter(driver, testInReport, testName, testDataIteration);
        }
        //Method to assign Record to another user.

        public void AssignRecordAnotherUser(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string User, string AssignUser)
        {
            ThinkTime(20);

            if (Elements(driver, Control("ScriptDialg", "Opportunity")) > 0)
            {
                Element(driver, Control("HandleScriptError", "Opportunity")).Click();
                ThinkTime(3);

                ThinkTime(3);
                MoveToElement(driver, Control("refreshButton", "Opportunity"));
                Element(driver, Control("refreshButton", "Opportunity")).Click();
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "No Script error present", "No Script error present");
            }


            ThinkTime(3);
            ThinkTime(3);
            if (Elements(driver, Control("AssignButtonActivity", "EnterpriseSales")) > 0)
            {
                WaitUntil(driver, Control("AssignButtonActivity", "EnterpriseSales"), 70);
                MoveToElement(driver, Control("AssignButtonActivity", "EnterpriseSales"));
                ThinkTime(5);
                Element(driver, Control("AssignButtonActivity", "EnterpriseSales")).Click();
                ThinkTime(3);
            }
            else
            {
                WaitUntil(driver, Control("Moreheadernew", "Opportunity"), 30);

                MoveToElement(driver, Control("Moreheadernew", "Opportunity"));
                Element(driver, Control("Moreheadernew", "Opportunity")).Click();

                WaitUntil(driver, Control("AssignButtonActivity", "EnterpriseSales"), 30);
                MoveToElement(driver, Control("AssignButtonActivity", "EnterpriseSales"));
                Element(driver, Control("AssignButtonActivity", "EnterpriseSales")).Click();
                ThinkTime(3);
            }
            ThinkTime(2);
            WaitUntil(driver, Control("GetAssignUser", "EnterpriseSales"), 30);
            string ExistingUser = Element(driver, Control("GetAssignUser", "EnterpriseSales")).GetAttribute("innerText");

            ThinkTime(3);

            if (ExistingUser == User)
            {
                ThinkTime(2);
                WaitUntil(driver, Control("GetAssignUser", "EnterpriseSales"), 30);
                MoveToElement(driver, Control("GetAssignUser", "EnterpriseSales"));
                Element(driver, Control("GetAssignUser", "EnterpriseSales")).Click();

                ThinkTime(2);
                WaitUntil(driver, Control("InputTeamAssign", "EnterpriseSales"), 30);

                Element(driver, Control("InputTeamAssign", "EnterpriseSales")).Click();
                ThinkTime(2);
                Element(driver, Control("InputTeamAssign", "EnterpriseSales")).SendKeys(AssignUser);


                ThinkTime(2);
                WaitUntil(driver, Control("Languagedropdown", "EnterpriseSales"), 30);
                Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();

                WaitUntil(driver, Control("AssignButtonPopup", "EnterpriseSales"), 30);
                MoveToElement(driver, Control("AssignButtonPopup", "EnterpriseSales"));
                Element(driver, Control("AssignButtonPopup", "EnterpriseSales")).Click();

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Record assigned to another user", "Assign record");


                ThinkTime(5);
                if (Elements(driver, Control("SavePopUp", "Contacts")) > 0)
                {

                    WaitUntil(driver, Control("Discardbutton", "Opportunity"), 50);
                    MoveToElement(driver, Control("Discardbutton", "Opportunity"));
                    Element(driver, Control("Discardbutton", "Opportunity")).Click();

                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Discard changes PopUp  Handled", "PopUp handling");
                    ThinkTime(3);
                    MoveToElement(driver, Control("refreshButton", "Opportunity"));
                    Element(driver, Control("refreshButton", "Opportunity")).Click();
                }

            }
            else
            {
                ThinkTime(3);
                WaitUntil(driver, Control("InputTeamAssign", "EnterpriseSales"), 50);
                Element(driver, Control("InputTeamAssign", "EnterpriseSales")).Click();
                Element(driver, Control("InputTeamAssign", "EnterpriseSales")).SendKeys(User);

                ThinkTime(2);
                WaitUntil(driver, Control("SelectTeamDropdown", AssignUser, "EnterpriseSales"), 50);

                Element(driver, Control("SelectTeamDropdown", AssignUser, "EnterpriseSales")).Click();
                ThinkTime(2);
                WaitUntil(driver, Control("AssignButtonPopup", "EnterpriseSales"), 30);
                MoveToElement(driver, Control("AssignButtonPopup", "EnterpriseSales"));
                Element(driver, Control("AssignButtonPopup", "EnterpriseSales")).Click();

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Record assigned to another user", "Assign record");
            }


            ThinkTime(5);
            if (Elements(driver, Control("SavePopUp", "Contacts")) > 0)
            {
                ThinkTime(2);
                WaitUntil(driver, Control("Discardbutton", "Opportunity"), 50);
                MoveToElement(driver, Control("Discardbutton", "Opportunity"));
                Element(driver, Control("Discardbutton", "Opportunity")).Click();

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Discard changes PopUp  Handled", "PopUp handling");
                ThinkTime(3);
                WaitUntil(driver, Control("refreshButton", "Opportunity"), 50);

                Element(driver, Control("refreshButton", "Opportunity")).Click();
            }

            saveFooter(driver, testInReport, testName, testDataIteration);


        }

        public void BusinessProcessError(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            driver.SwitchTo().DefaultContent();
            ThinkTime(10);
            if (Elements(driver, Control("BusinessProcessError", "Generic")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Record cannot be assigned", "Dashboard");
                ThinkTime(2);
                Element(driver, Control("BusinessErrorOk", "Generic")).Click();
                ThinkTime(5);
            }
            else
            {

                Assert.Fail("Record can be assigned");
            }

        }

        public void AddingNoofPeopleinOpp(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string noofPeople)
        {
            ThinkTime(3);
            // Number of people
            WaitUntil(driver, Control("Numberofpeople", "Opportunity"), 360);
            MoveToElement(driver, Control("Numberofpeople", "Opportunity"));
            ActionsClick(driver, Control("Numberofpeople", "Opportunity"));
            ThinkTime(3);
            Element(driver, Control("Numberofpeople", "Opportunity")).SendKeys(Keys.Control + "a");
            Element(driver, Control("Numberofpeople", "Opportunity")).SendKeys(Keys.Delete);
            Element(driver, Control("Numberofpeople", "Opportunity")).SendKeys(noofPeople);
            ThinkTime(3);
            saveFooter(driver, testInReport, testName, testDataIteration);

        }

        public void VerifyOppOwnerLocked(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {
            ThinkTime(10);
            MoveToElement(driver, Control("Overflowbutton", "Opportunity"));
            Element(driver, Control("Overflowbutton", "Opportunity")).Click();
            //WaitUntil(driver, Control("OppOwner", "Generic"), 30);
            //if (Elements(driver, Control("OppOwner", "Generic")) > 0)

            //{
            if (Elements(driver, Control("OwnerLocked", "Generic")) == 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Opp Owner is not Read Only", "ReadOnly");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Opp Owner is  Read Only", "ReadOnly");
            }
            ThinkTime(3);
            //}
            //else
            //{
            //    Assert.Fail("Opp owner not Read only");
            //}
        }


        public void Inactiveuser(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string User, string AssignUser)
        {
            ThinkTime(20);

            if (Elements(driver, Control("AssignButtonActivity", "EnterpriseSales")) > 0)
            {
                WaitUntil(driver, Control("AssignButtonActivity", "EnterpriseSales"), 30);
                MoveToElement(driver, Control("AssignButtonActivity", "EnterpriseSales"));
                ThinkTime(2);
                Element(driver, Control("AssignButtonActivity", "EnterpriseSales")).Click();

            }
            else
            {
                WaitUntil(driver, Control("Moreheadernew", "Opportunity"), 30);

                MoveToElement(driver, Control("Moreheadernew", "Opportunity"));
                Element(driver, Control("Moreheadernew", "Opportunity")).Click();

                WaitUntil(driver, Control("AssignButtonActivity", "EnterpriseSales"), 30);
                MoveToElement(driver, Control("AssignButtonActivity", "EnterpriseSales"));
                Element(driver, Control("AssignButtonActivity", "EnterpriseSales")).Click();
            }
            ThinkTime(5);
            string ExistingUser = Element(driver, Control("GetAssignUser", "EnterpriseSales")).GetAttribute("innerText");

            ThinkTime(3);

            if (ExistingUser == User)
            {
                WaitUntil(driver, Control("GetAssignUser", "EnterpriseSales"), 30);
                MoveToElement(driver, Control("GetAssignUser", "EnterpriseSales"));
                Element(driver, Control("GetAssignUser", "EnterpriseSales")).Click();

                ThinkTime(2);
                WaitUntil(driver, Control("InputTeamAssign", "EnterpriseSales"), 30);

                Element(driver, Control("InputTeamAssign", "EnterpriseSales")).Click();
                Element(driver, Control("InputTeamAssign", "EnterpriseSales")).SendKeys(AssignUser);

                ThinkTime(7);

                if (Elements(driver, Control("Norecords", "Opportunity")) > 0)
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Inactive users cannotbe assigned", "Assign record");
                    ThinkTime(2);

                    WaitUntil(driver, Control("Assigncancel", "Opportunity"), 30);
                    Element(driver, Control("Assigncancel", "Opportunity")).Click();

                }

                else
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Iactive user got assigned", "AssignUser Verification");
                    Assert.Fail("Iactive user got assigned");
                }

            }
            else
            {
                MoveToElement(driver, Control("InputTeamAssign", "EnterpriseSales"));
                Element(driver, Control("InputTeamAssign", "EnterpriseSales")).SendKeys(User);

                ThinkTime(3);

                MoveToElement(driver, Control("SelectTeamDropdown", AssignUser, "EnterpriseSales"));
                Element(driver, Control("SelectTeamDropdown", AssignUser, "EnterpriseSales")).Click();
                ThinkTime(7);

                if (Elements(driver, Control("Norecords", "Opportunity")) > 0)
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Inactive users cannotbe assigned", "Assign record");
                    ThinkTime(2);
                    WaitUntil(driver, Control("Assigncancel", "Opportunity"), 30);
                    Element(driver, Control("Assigncancel", "Opportunity")).Click();

                }

                else
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Iactive user got assigned", "AssignUser Verification");
                    Assert.Fail("Iactive user got assigned");
                }

            }

            saveFooter(driver, testInReport, testName, testDataIteration);
            ThinkTime(15);

        }



        //Method to verify assigned user.
        public void VerifyAssignedUserActivity(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string User)
        {



            try
            {
                ThinkTime(2);
                WaitUntil(driver, Control("HeaderFieldExpand", "GenericOld"), 30);

                MoveToElement(driver, Control("HeaderFieldExpand", "GenericOld"));
                Element(driver, Control("HeaderFieldExpand", "GenericOld")).Click();
            }
            catch (Exception e)
            {

            }
            //WaitUntil(driver, Control("AssignButtonActivity", "EnterpriseSales"), 30);
            //MoveToElement(driver, Control("AssignButtonActivity", "EnterpriseSales"));
            //Element(driver, Control("AssignButtonActivity", "EnterpriseSales")).Click();

            //ThinkTime(5);
            //WaitUntil(driver, Control("GetAssignUser", "EnterpriseSales"), 90);
            //string ExistingUser = Element(driver, Control("GetAssignUser", "EnterpriseSales")).GetAttribute("innerText");


            ThinkTime(2);
            string VerifyAssignedUser = Element(driver, Control("VerifyAssignedUser", "EnterpriseSales")).GetAttribute("innerText");
            //string VerifyAssignedUser = Element(driver, Control("OwnerText", "Opportunity")).GetAttribute("innerText");
            Console.WriteLine(VerifyAssignedUser);
            if (VerifyAssignedUser == User)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Record is successfully assigned to User", "Assign User Verification");
                //WaitUntil(driver, Control("AssignButtonPopup", "EnterpriseSales"), 30);
                //MoveToElement(driver, Control("AssignButtonPopup", "EnterpriseSales"));
                //Element(driver, Control("AssignButtonPopup", "EnterpriseSales")).Click();
                ThinkTime(10);
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Assign User Failed", "AssignUser Verification");
                Assert.Fail("Assign User Verification Failed");
            }
        }

        public void DeleteAccessOpp(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {
            try
            {
                ThinkTime(5);
                if (Elements(driver, Control("DeleteConfirmOpp", "Opportunity")) == 0)
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Delete Access Denied", "Delete Permission Verification");

                }
                else
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Delete Access Failed", "Delete Permission Verification");
                    Assert.Fail("Delete button is not hidden");
                }
            }
            catch (Exception e)
            {

            }

            //ThinkTime(5);
            //Element(driver, Control("Deletebuttonclick", "Opportunity")).Click();
            //ThinkTime(4);
            //if (Elements(driver, Control("DeletePopupVerification", "Generic")) > 0)
            //{
            //    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Delete Access Denied", "Delete Permission Verification");
            //    ThinkTime(4);
            //    WaitUntil(driver, Control("Scripterrorhandle", "Opportunity"), 30);
            //    Element(driver, Control("Scripterrorhandle", "Opportunity")).Click();
            //}

            //else
            //{
            //    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Delete Access Failed", "Delete Permission Verification");
            //    Assert.Fail("Access denied message not displayed for delete Opportunity");
            //}

        }
        public void DeleteAccessOpp1(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {
            ThinkTime(5);
            if (Elements(driver, Control("DeleteConfirmOpp", "Opportunity")) == 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Delete Access Denied", "Delete Permission Verification");
                Assert.Fail("Delete button is not hidden");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Delete Access Failed", "Delete Permission Verification");

            }

            //ThinkTime(5);
            //Element(driver, Control("Deletebuttonclick", "Opportunity")).Click();
            //ThinkTime(4);
            //if (Elements(driver, Control("DeletePopupVerification", "Generic")) > 0)
            //{
            //    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Delete Access Denied", "Delete Permission Verification");
            //    ThinkTime(4);
            //    WaitUntil(driver, Control("Scripterrorhandle", "Opportunity"), 30);
            //    Element(driver, Control("Scripterrorhandle", "Opportunity")).Click();
            //}

            //else
            //{
            //    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Delete Access Failed", "Delete Permission Verification");
            //    Assert.Fail("Access denied message not displayed for delete Opportunity");
            //}

        }

        public void DeleteOpportunity(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {
            ThinkTime(2);

            WaitUntil(driver, Control("DeleteButton", "Opportunity"), 30);
            MoveToElement(driver, Control("DeleteButton", "Opportunity"));
            Element(driver, Control("DeleteButton", "Opportunity")).Click();
            ThinkTime(7);



            //RecordGlobalSearch(driver, testInReport, testName, testDataIteration, OpportunitySearch);

            if (Elements(driver, Control("DeleteConfirm", "Opportunity")) > 0)
            {
                MoveToElement(driver, Control("DeleteConfirm", "Opportunity"));
                Element(driver, Control("DeleteConfirm", "Opportunity")).Click();
                ThinkTime(2);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Opp is successfully assigned to User", "Assign User Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Assign User Failed", "AssignUser Verification");
                Assert.Fail("Assign User Verification Failed");
            }
        }
        public void ExpectedDropdown(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string ContactSel)
        {
            ThinkTime(5);

            WaitUntil(driver, Control("SelectContact", "CommonObj"), 60);
            Element(driver, Control("SelectContact", "CommonObj")).Click();
            ThinkTime(2);
            Element(driver, Control("SelectExpectedCon", ContactSel, "CommonObj")).Click();

        }
        public void ReverseDropdown(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string ContactSel)
        {
            ThinkTime(5);
            scrollDownITSalesContactpage(driver, testInReport, testName, testDataIteration, "-1200");
            WaitUntil(driver, Control("SelectContact", "CommonObj"), 60);
            Element(driver, Control("SelectContact", "CommonObj")).Click();
            ThinkTime(2);
            Element(driver, Control("SelectExpectedCon", ContactSel, "CommonObj")).Click();

        }

        //Method to create new contact.
        public void CreateNewContactEnterpriseSales(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string LName, string time)
        {


            ThinkTime(2);

            string NewContactLname = LName + time;

            WaitUntil(driver, Control("OpportunityNewButton", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("OpportunityNewButton", "EnterpriseSales"));
            Element(driver, Control("OpportunityNewButton", "EnterpriseSales")).Click();
            ExpectedDropdown(driver, testInReport, testName, testDataIteration, "Contact: Customer");

            ThinkTime(3);

            WaitUntil(driver, Control("OpportunityNewButton", "EnterpriseSales"), 70);
            MoveToElement(driver, Control("NewContactLname", "EnterpriseSales"));
            ThinkTime(4);
            Element(driver, Control("NewContactLname", "EnterpriseSales")).Click();
            Element(driver, Control("NewContactLname", "EnterpriseSales")).SendKeys(NewContactLname);



            ThinkTime(3);
            WaitUntil(driver, Control("Companyinput", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("Companyinput", "EnterpriseSales"));
            Element(driver, Control("Companyinput", "EnterpriseSales")).Click();
            ThinkTime(2);
            ActionsClick(driver, Control("CompanydropValue", "Accounts"));
            ThinkTime(3);


            saveFooter(driver, testInReport, testName, testDataIteration);

            ThinkTime(3);

            WaitUntil(driver, Control("Deactivateaftersave", "EnterpriseSales"), 70);
            if (Elements(driver, Control("Deactivateaftersave", "EnterpriseSales")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "New Contact is created", "New Contact Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "New contact is not saved", "New Contact Verification");
                Assert.Fail("New Contact Verification Failed");
            }

        }

        //Create new contact with first & last name country for payload verification
        public string CreateNewContactforPayloadVerification(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string Lname, string time, string Enteremail, string Accountname = "")
        {
            ThinkTime(2);
            // Enter COntact name
            string NewContactLname = Lname + time;
            WaitUntil(driver, Control("OpportunityNewButton", "EnterpriseSales"), 30);
            Element(driver, Control("OpportunityNewButton", "EnterpriseSales")).Click();
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            ThinkTime(2);
            WaitUntil(driver, Control("firstname", "EnterpriseSales"), 60);
            Element(driver, Control("firstname", "EnterpriseSales")).Click();
            Element(driver, Control("firstname", "EnterpriseSales")).SendKeys("New");
            ThinkTime(2);
            WaitUntil(driver, Control("NewContactLname", "EnterpriseSales"), 60);
            Element(driver, Control("NewContactLname", "EnterpriseSales")).Click();
            Element(driver, Control("NewContactLname", "EnterpriseSales")).SendKeys(NewContactLname);
            ThinkTime(2);
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            // Enter Account
            WaitUntil(driver, Control("Companyinput", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("Companyinput", "EnterpriseSales"));
            Element(driver, Control("Companyinput", "EnterpriseSales")).Click();
            ThinkTime(2);
            WaitUntil(driver, Control("Languagedropdown", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("Languagedropdown", "EnterpriseSales"));
            Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();
            ThinkTime(3);

            WaitUntil(driver, Control("LeadTopicEmail", "Opportunity"), 60);
            Element(driver, Control("LeadTopicEmail", "Opportunity")).Click();
            Element(driver, Control("LeadTopicEmail", "Opportunity")).SendKeys(Enteremail);
            //scrollDownContactPageEnterprise(driver, testInReport, testName, testDataIteration);
            scrollDownOpportunity(driver, testInReport, testName, testDataIteration);
            scrollDownOpportunity(driver, testInReport, testName, testDataIteration);

            // Enter Language - UK English
            WaitUntil(driver, Control("ContactLanguage", "EnterpriseSales"), 70);
            MoveToElement(driver, Control("ContactLanguage", "EnterpriseSales"));
            ThinkTime(3);
            Element(driver, Control("ContactLanguage", "EnterpriseSales")).SendKeys(Keys.Control + "a");
            Element(driver, Control("ContactLanguage", "EnterpriseSales")).SendKeys(Keys.Delete);
            Element(driver, Control("ContactLanguage", "EnterpriseSales")).SendKeys("Uk english");
            ThinkTime(5);
            Element(driver, Control("ContactLanguageDropdownSelect", "EnterpriseSales")).Click();
            ThinkTime(3);

            //Entr City
            scrollDownOpportunity(driver, testInReport, testName, testDataIteration);
            WaitUntil(driver, Control("City", "EnterpriseSales"), 60);
            Element(driver, Control("City", "EnterpriseSales")).Click();
            Element(driver, Control("City", "EnterpriseSales")).SendKeys(Keys.Control + "a");
            Element(driver, Control("City", "EnterpriseSales")).SendKeys(Keys.Delete);
            Element(driver, Control("City", "EnterpriseSales")).SendKeys("Manila");
            ThinkTime(2);


            //Enter country
            WaitUntil(driver, Control("Country", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("Country", "EnterpriseSales"));
            Element(driver, Control("Country", "EnterpriseSales")).Click();
            Element(driver, Control("Country", "EnterpriseSales")).SendKeys("Philippines");
            ThinkTime(2);
            WaitUntil(driver, Control("Languagedropdown", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("Languagedropdown", "EnterpriseSales"));
            Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();
            ThinkTime(3);


            // Save Footer
            if (Elements(driver, Control("ScriptDialg", "Opportunity")) > 0)
            {
                Element(driver, Control("HandleScriptError", "Opportunity")).Click();
                ThinkTime(3);
                saveFooter(driver, testInReport, testName, testDataIteration);
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "No Script error present", "No Script error present");



            }
            saveFooter(driver, testInReport, testName, testDataIteration);


            if (Elements(driver, Control("Savefooterverification", "36.1_Dashboard")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "New contact is not saved", "New Contact Verification");
                Assert.Fail("New Contact Verification Failed");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", NewContactLname + "New Contact is created", "New Contact Verification");

            }
            //scrollDownContactPageEnterprise(driver, testInReport, testName, testDataIteration);
            //ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            //ScriptErrorExcep(driver, testInReport, testName, testDataIteration);

            //scrollDownContactPageEnterprise(driver, testInReport, testName, testDataIteration);
            //ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            //ScriptErrorExcep(driver, testInReport, testName, testDataIteration);

            //scrollDownContactPageEnterprise(driver, testInReport, testName, testDataIteration);

            //ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            //ScriptErrorExcep(driver, testInReport, testName, testDataIteration);

            return NewContactLname;
        }

        //Method to verify payload parameters for opportunity.
        public void VerifyDialerHotleadsPayloadupdated(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration
                                       , string FirstName, string LastName, string BusinessPhone, string CellPhone, string TimeZone, string City, string Stage, string TourStatus, string owning_team, string owning_user, string Country, string Brand, string Language, string Product, string LeadPriority, string MajorSource, string MinorSource, string CRM, string Environment, string EntityType, string Age, string Source, string ActivityId, string CallbackScheduledtime, string Attempt, string CreatedDateTime, string TourScheduledDate)
        {
            ThinkTime(3);
            string Environment1 = "UAT";

            ThinkTime(6);
            string Payload = Element(driver, Control("VerifyPayloadData", "Opportunity")).GetAttribute("defaultValue");
            bool VTourScheduledDate = Payload.Contains(TourScheduledDate);
            bool VFirstName = Payload.Contains(FirstName);
            bool VLastName = Payload.Contains(LastName);
            bool VBusinessPhone = Payload.Contains(BusinessPhone);
            bool VCellPhone = Payload.Contains(CellPhone);
            bool VTimeZone = Payload.Contains(TimeZone);
            bool VCity = Payload.Contains(City);
            bool VStage = Payload.Contains(Stage);
            bool VTourStatus = Payload.Contains(TourStatus);
            bool Vowning_team = Payload.Contains(owning_team);
            bool Vowning_user = Payload.Contains(owning_user);
            bool VCountry = Payload.Contains(Country);
            bool VBusinessPhone1 = Payload.Contains("9497852369");
            bool VBrand = Payload.Contains(Brand);
            bool VLanguage = Payload.Contains(Language);
            bool VProduct = Payload.Contains(Product);
            bool VLeadPriority = Payload.Contains(LeadPriority);
            bool VMajorSource = Payload.Contains(MajorSource);
            bool VMinorSource = Payload.Contains(MinorSource);
            bool VCRM = Payload.Contains(CRM);
            bool VEnvironment = Payload.Contains(Environment);
            bool VEnvironment1 = Payload.Contains(Environment1);
            bool VEntityType = Payload.Contains(EntityType);
            bool VAge = Payload.Contains(Age);

            bool VSource = Payload.Contains(Source);
            //bool VEntityId = Payload.Contains(EntityId);
            //bool VContactId = Payload.Contains(ContactId);
            bool VActivityId = Payload.Contains(ActivityId);
            bool VCallbackScheduledtime = Payload.Contains(CallbackScheduledtime);
            bool VAttempt = Payload.Contains(Attempt);
            bool VCreatedDateTime = Payload.Contains(CreatedDateTime);
            // bool VTourScheduledDate = Payload.Contains(TourScheduledDate);

            if (VFirstName == true)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Firstname Field Verified", "Payload Field verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Firstname field verification failed", "Payload field verification");
                Assert.Fail();
            }

            if (VLastName == true)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Lastname Field Verified", "Payload Field verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Lastname field verification failed", "Payload field verification");
                Assert.Fail();
            }

            if (VBusinessPhone == true || VBusinessPhone1 == true)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "BusinessPhone Field Verified", "Payload Field verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "BusinessPhone field verification failed", "Payload field verification");
                Assert.Fail();
            }

            if (VCellPhone == true)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "CellPhone Field Verified", "Payload Field verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "CellPhone field verification failed", "Payload field verification");
                Assert.Fail();
            }


            if (VTimeZone == true)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "TimeZone Field Verified", "Payload Field verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "TimeZone field verification failed", "Payload field verification");
                Assert.Fail();
            }
            if (VCity == true)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "City Field Verified", "Payload Field verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "City field verification failed", "Payload field verification");
                Assert.Fail();
            }
            if (VStage == true)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Stage Field Verified", "Payload Field verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Stage field verification failed", "Payload field verification");
                Assert.Fail();
            }
            if (VTourStatus == true)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "TourStatus Field Verified", "Payload Field verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "TourStatus field verification failed", "Payload field verification");
                Assert.Fail();
            }
            if (Vowning_team == true)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Owning team Field Verified", "Payload Field verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Owning team  verification failed", "Payload field verification");
                Assert.Fail();
            }
            if (Vowning_user == true)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Owner User Verified", "Payload Field verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Owner User verification failed", "Payload field verification");
                Assert.Fail();
            }
            if (VCountry == true)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Country Field Verified", "Payload Field verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Country field verification failed", "Payload field verification");
                Assert.Fail();
            }
            if (VBrand == true)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Brand Field Verified", "Payload Field verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Brand field verification failed", "Payload field verification");
                Assert.Fail();
            }
            if (VLanguage == true)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Language Field Verified", "Payload Field verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Language field verification failed", "Payload field verification");
                Assert.Fail();
            }
            if (VProduct == true)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Product Field Verified", "Payload Field verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Product field verification failed", "Payload field verification");
                Assert.Fail();
            }
            if (VLeadPriority == true)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "LeadPriority Field Verified", "Payload Field verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "LeadPriority field verification failed", "Payload field verification");
                Assert.Fail();
            }
            if (VMajorSource == true)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "MAjorSource Field Verified", "Payload Field verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "MAjorSource field verification failed", "Payload field verification");
                Assert.Fail();
            }
            if (VMinorSource == true)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "MinorSource Field Verified", "Payload Field verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "MinorSource field verification failed", "Payload field verification");
                Assert.Fail();
            }
            if (VCRM == true)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "CRM Field Verified", "Payload Field verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "CRM field verification failed", "Payload field verification");
                Assert.Fail();
            }
            if (VEnvironment == true)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "RegusQA Environment Field Verified", "Payload Field verification");

            }

            else if (VEnvironment1 == true)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Regus UAT Environment Field Verified", "Payload Field verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Environment field verification failed", "Payload field verification");
                //Assert.Fail();
            }
            if (VEntityType == true)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Entitytype Field Verified", "Payload Field verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Entitytype field verification failed", "Payload field verification");
                Assert.Fail();
            }
            if (VAge == true)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Age Field Verified", "Payload Field verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Age field verification failed", "Payload field verification");
                Assert.Fail();
            }
            if (VSource == true)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Source Field Verified", "Payload Field verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Source field verification failed", "Payload field verification");
                Assert.Fail();
            }
            if (VActivityId == true)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Activity Field Verified", "Payload Field verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Activity field verification failed", "Payload field verification");
                Assert.Fail();
            }
            if (VCallbackScheduledtime == true)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "CallbackScheduledtime Field Verified", "Payload Field verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "CallbackScheduledtime field verification failed", "Payload field verification");
                Assert.Fail();
            }
            if (VAttempt == true)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Attempt Field Verified", "Payload Field verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Attempt field verification failed", "Payload field verification");
                Assert.Fail();
            }
            if (VCreatedDateTime == true)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "CreatedDatetime Field Verified", "Payload Field verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "CreatedDatetime field verification failed", "Payload field verification");
                Assert.Fail();
            }
            if (VTourScheduledDate == true)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "TourScheduledDate Field Verified", "Payload Field verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "TourScheduledDate field verification failed", "Payload field verification");
                Assert.Fail();
            }


        }





        public void CreateNewContactDirector(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string LName, string time)
        {
            ThinkTime(5);

            string NewContactLname = LName + time;

            WaitUntil(driver, Control("OpportunityNewButton", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("OpportunityNewButton", "EnterpriseSales"));
            Element(driver, Control("OpportunityNewButton", "EnterpriseSales")).Click();
            ThinkTime(2);
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            WaitUntil(driver, Control("NewContactLname", "EnterpriseSales"), 70);
            Element(driver, Control("NewContactLname", "EnterpriseSales")).Click();
            Element(driver, Control("NewContactLname", "EnterpriseSales")).SendKeys(NewContactLname);
            saveFooter(driver, testInReport, testName, testDataIteration);

        }



        public string CreateNewContactDirectSalesUser(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string LName, string time)
        {
            ThinkTime(5);

            string NewContactLname = LName + time;

            WaitUntil(driver, Control("OpportunityNewButton", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("OpportunityNewButton", "EnterpriseSales"));
            Element(driver, Control("OpportunityNewButton", "EnterpriseSales")).Click();

            ThinkTime(10);
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            ThinkTime(2);
            if (Elements(driver, Control("ScriptDialg", "Opportunity")) > 0)
            {
                Element(driver, Control("HandleScriptError", "Opportunity")).Click();
                ThinkTime(3);
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "No Script error present", "No Script error present");
            }
            WaitUntil(driver, Control("NewContactLname", "EnterpriseSales"), 70);
            MoveToElement(driver, Control("NewContactLname", "EnterpriseSales"));
            Element(driver, Control("NewContactLname", "EnterpriseSales")).Click();
            if (Elements(driver, Control("ScriptDialg", "Opportunity")) > 0)
            {
                Element(driver, Control("HandleScriptError", "Opportunity")).Click();
                ThinkTime(3);
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "No Script error present", "No Script error present");
            }
            Element(driver, Control("NewContactLname", "EnterpriseSales")).SendKeys(NewContactLname);
            ThinkTime(3);
            scrollDownContactPage(driver, testInReport, testName, testDataIteration);
            // Enter Language - UK English
            ThinkTime(3);
            WaitUntil(driver, Control("ContactLanguage", "EnterpriseSales"), 70);
            MoveToElement(driver, Control("ContactLanguage", "EnterpriseSales"));
            Element(driver, Control("ContactLanguage", "EnterpriseSales")).Click();
            Element(driver, Control("ContactLanguage", "EnterpriseSales")).SendKeys(Keys.Control + "a");
            Element(driver, Control("ContactLanguage", "EnterpriseSales")).SendKeys(Keys.Delete);
            Element(driver, Control("ContactLanguage", "EnterpriseSales")).SendKeys("Uk english");
            ThinkTime(2);
            if (Elements(driver, Control("ScriptDialg", "Opportunity")) > 0)
            {
                Element(driver, Control("HandleScriptError", "Opportunity")).Click();
                ThinkTime(3);
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "No Script error present", "No Script error present");
            }

            MoveToElement(driver, Control("ContactLanguageDropdownSelect", "EnterpriseSales"));
            Element(driver, Control("ContactLanguageDropdownSelect", "EnterpriseSales")).Click();
            if (Elements(driver, Control("ScriptDialg", "Opportunity")) > 0)
            {
                Element(driver, Control("HandleScriptError", "Opportunity")).Click();
                ThinkTime(3);
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "No Script error present", "No Script error present");
            }


            saveFooter(driver, testInReport, testName, testDataIteration);

            ThinkTime(3);

            if (Elements(driver, Control("ReferenceValue", "EnterpriseSales")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "New Contact is created", "New Contact Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "New contact is not saved", "New Contact Verification");
                Assert.Fail("New Contact Verification Failed");
            }
            return NewContactLname;


        }


        public string CreateNewContactITSalesUser(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string LName, string time)
        {
            ThinkTime(3);

            string NewContactLname = LName + time;
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            WaitUntil(driver, Control("OpportunityNewButton", "EnterpriseSales"), 360);
            MoveToElement(driver, Control("OpportunityNewButton", "EnterpriseSales"));
            Element(driver, Control("OpportunityNewButton", "EnterpriseSales")).Click();

            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);

            ThinkTime(3);
            WaitUntil(driver, Control("OpportunityNewButton", "EnterpriseSales"), 70);
            MoveToElement(driver, Control("NewContactLname", "EnterpriseSales"));
            Element(driver, Control("NewContactLname", "EnterpriseSales")).Click();
            ThinkTime(4);
            Element(driver, Control("NewContactLname", "EnterpriseSales")).SendKeys(NewContactLname);

            ThinkTime(3);
            WaitUntil(driver, Control("Companyinput", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("Companyinput", "EnterpriseSales"));
            Element(driver, Control("Companyinput", "EnterpriseSales")).Click();
            //ActionsClick(driver, Control("Companyinput", "EnterpriseSales"));
            ThinkTime(3);
            ActionsClick(driver, Control("Languagedropdown", "EnterpriseSales"));
            //WaitUntil(driver, Control("CompanydropValue", "Accounts"), 360);
            //ActionsClick(driver, Control("CompanydropValue", "Accounts"));
            ThinkTime(5);
            scrollDownContactPageEnterprise(driver, testInReport, testName, testDataIteration);
            ThinkTime(2);
            WaitUntil(driver, Control("ContactLanguage", "EnterpriseSales"), 70);
            MoveToElement(driver, Control("ContactLanguage", "EnterpriseSales"));
            Element(driver, Control("ContactLanguage", "EnterpriseSales")).SendKeys(Keys.Control + "a");
            Element(driver, Control("ContactLanguage", "EnterpriseSales")).SendKeys(Keys.Delete);
            Element(driver, Control("ContactLanguage", "EnterpriseSales")).SendKeys("Uk english");
            ThinkTime(2);
            WaitUntil(driver, Control("ContactLanguageDropdownSelect", "EnterpriseSales"), 70);
            MoveToElement(driver, Control("ContactLanguageDropdownSelect", "EnterpriseSales"));
            Element(driver, Control("ContactLanguageDropdownSelect", "EnterpriseSales")).Click();
            ThinkTime(2);
            saveFooter(driver, testInReport, testName, testDataIteration);
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);

            ThinkTime(3);

            //if (Elements(driver, Control("NewContactLnameVerification", "EnterpriseSales")) > 0)
            //{

            //    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "New Contact is created", "New Contact Verification");
            //}

            //else
            //{
            //    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "New contact is not saved", "New Contact Verification");
            //    Assert.Fail("New Contact Verification Failed");
            //}
            return NewContactLname;


        }





        //quick create

        public void QuickcreateITsales(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string Option)

        {
            //clcik quickcrete button
            ThinkTime(6);
            WaitUntil(driver, Control("QuickCreateButton", "Generic"), 30);
            Element(driver, Control("QuickCreateButton", "Generic")).Click();
            ThinkTime(2);

            // select activiy
            WaitUntil(driver, Control("QuickCreateopn", Option, "Generic"), 70);
            Element(driver, Control("QuickCreateopn", Option, "Generic")).Click();
            ThinkTime(2);
        }




        public void QuickcreateLeadITsales(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string LastName, string Source, string MajorSource, string MinorSource, string now)

        {
            ThinkTime(10);
            //clcik quickcrete button
            WaitUntil(driver, Control("QuickcreateSource", "Opportunity"), 30);
            MoveToElement(driver, Control("QuickcreateSource", "Opportunity"));
            Element(driver, Control("QuickcreateSource", "Opportunity")).SendKeys(Keys.Control + "a");
            Element(driver, Control("QuickcreateSource", "Opportunity")).SendKeys(Keys.Delete);
            Element(driver, Control("QuickcreateSource", "Opportunity")).SendKeys(Source);
            ThinkTime(5);
            WaitUntil(driver, Control("SelectSourceDropdown", "Generic"), 30);
            MoveToElement(driver, Control("SelectSourceDropdown", "Generic"));
            Element(driver, Control("SelectSourceDropdown", "Generic")).Click();

            ThinkTime(2);
            
            WaitUntil(driver, Control("QuickcreateMajorSource", "Opportunity"), 30);
            MoveToElement(driver, Control("QuickcreateMajorSource", "Opportunity"));
            Element(driver, Control("QuickcreateMajorSource", "Opportunity")).SendKeys(Keys.Control + "a");
            Element(driver, Control("QuickcreateMajorSource", "Opportunity")).SendKeys(Keys.Delete);
            Element(driver, Control("QuickcreateMajorSource", "Opportunity")).SendKeys(MajorSource);
            ThinkTime(5);
            MoveToElement(driver, Control("Languagedropdown", "EnterpriseSales"));
            Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();

            ThinkTime(2);

            WaitUntil(driver, Control("QuickcreateMinorSource", "Opportunity"), 30);
            MoveToElement(driver, Control("QuickcreateMinorSource", "Opportunity"));
            Element(driver, Control("QuickcreateMinorSource", "Opportunity")).SendKeys(Keys.Control + "a");
            Element(driver, Control("QuickcreateMinorSource", "Opportunity")).SendKeys(Keys.Delete);
            Element(driver, Control("QuickcreateMinorSource", "Opportunity")).SendKeys(MinorSource);
            ThinkTime(5);
            MoveToElement(driver, Control("Languagedropdown", "EnterpriseSales"));
            Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();
            //Element(driver, Control("CountryContact", "Opportunity")).SendKeys(Keys.Control + "a");
            //Element(driver, Control("CountryContact", "Opportunity")).SendKeys(Keys.Delete);
            //Element(driver, Control("CountryContact", "Opportunity")).SendKeys("India");
            //ThinkTime(5);
            //MoveToElement(driver, Control("Languagedropdown", "EnterpriseSales"));
            ThinkTime(5);

            ThinkTime(2);
            WaitUntil(driver, Control("LeadLname", "Generic"), 30);
            MoveToElement(driver, Control("LeadLname", "Generic"));
            Element(driver, Control("LeadLname", "Generic")).SendKeys(Keys.Control + "a");
            Element(driver, Control("LeadLname", "Generic")).SendKeys(Keys.Delete);
            Element(driver, Control("LeadLname", "Generic")).SendKeys(LastName);
            Element(driver, Control("Lastnameclick", "Generic")).Click();

            ThinkTime(5);
            WaitUntil(driver, Control("Quickcreatesavenew", "Opportunity"), 30);
            MoveToElement(driver, Control("Quickcreatesavenew", "Opportunity"));
            Element(driver, Control("Quickcreatesavenew", "Opportunity")).Click();
            ThinkTime(5);

            if (Elements(driver, Control("CountryErrorIcon", "Opportunity")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Error icon exists", "New Contact Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Error icon missing", "New Contact Verification");
                Assert.Fail("Error icon missing");
            }

            ThinkTime(2);
            WaitUntil(driver, Control("QuickcreateCancel", "Opportunity"), 30);
            MoveToElement(driver, Control("QuickcreateCancel", "Opportunity"));
            Element(driver, Control("QuickcreateCancel", "Opportunity")).Click();
            ThinkTime(5);

            DiscardChanges(driver, testInReport, testName, testDataIteration);
            ThinkTime(5);
        }


        public void QuickcreateOpportunityITsales(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string Source, string MajorSource, string MinorSource, string now)

        {
            ThinkTime(10);
            //clcik quickcrete button
            WaitUntil(driver, Control("QuickcreateChannel", "Opportunity"), 30);
            MoveToElement(driver, Control("QuickcreateChannel", "Opportunity"));
            Element(driver, Control("QuickcreateChannel", "Opportunity")).SendKeys(Keys.Control + "a");
            Element(driver, Control("QuickcreateChannel", "Opportunity")).SendKeys(Keys.Delete);
            Element(driver, Control("QuickcreateChannel", "Opportunity")).SendKeys(Source);
            ThinkTime(5);
            WaitUntil(driver, Control("SelectSourceDropdown", "Generic"), 30);
            MoveToElement(driver, Control("SelectSourceDropdown", "Generic"));
            Element(driver, Control("SelectSourceDropdown", "Generic")).Click();

            ThinkTime(2);

            WaitUntil(driver, Control("QuickcreateMajorSource", "Opportunity"), 30);
            MoveToElement(driver, Control("QuickcreateMajorSource", "Opportunity"));
            Element(driver, Control("QuickcreateMajorSource", "Opportunity")).SendKeys(Keys.Control + "a");
            Element(driver, Control("QuickcreateMajorSource", "Opportunity")).SendKeys(Keys.Delete);
            Element(driver, Control("QuickcreateMajorSource", "Opportunity")).SendKeys(MajorSource);
            ThinkTime(5);
            MoveToElement(driver, Control("Languagedropdown", "EnterpriseSales"));
            Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();

            ThinkTime(2);

            WaitUntil(driver, Control("QuickcreateMinorSource", "Opportunity"), 30);
            MoveToElement(driver, Control("QuickcreateMinorSource", "Opportunity"));
            Element(driver, Control("QuickcreateMinorSource", "Opportunity")).SendKeys(Keys.Control + "a");
            Element(driver, Control("QuickcreateMinorSource", "Opportunity")).SendKeys(Keys.Delete);
            Element(driver, Control("QuickcreateMinorSource", "Opportunity")).SendKeys(MinorSource);
            ThinkTime(5);
            MoveToElement(driver, Control("Languagedropdown", "EnterpriseSales"));
            Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();



            ThinkTime(2);
            WaitUntil(driver, Control("Quickcreatesavenew", "Opportunity"), 60);
            MoveToElement(driver, Control("Quickcreatesavenew", "Opportunity"));
            Element(driver, Control("Quickcreatesavenew", "Opportunity")).Click();
            ThinkTime(5);

            if (Elements(driver, Control("CountryErrorIcon", "Opportunity")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Error icon exists", "New Contact Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Error icon missing", "New Contact Verification");
                Assert.Fail("Error icon missing");
            }

            ThinkTime(2);
            WaitUntil(driver, Control("QuickcreateCancel", "Opportunity"), 30);
            MoveToElement(driver, Control("QuickcreateCancel", "Opportunity"));
            Element(driver, Control("QuickcreateCancel", "Opportunity")).Click();
            ThinkTime(5);

            DiscardChanges(driver, testInReport, testName, testDataIteration);
            ThinkTime(5);
        }





        //Method to create new contact.
        public void CreateNewContactITSales(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string Lname, string time)
        {
            ThinkTime(2);

            string NewContactLname = Lname + time;

            WaitUntil(driver, Control("OpportunityNewButton", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("OpportunityNewButton", "EnterpriseSales"));
            Element(driver, Control("OpportunityNewButton", "EnterpriseSales")).Click();

            ThinkTime(3);

            WaitUntil(driver, Control("OpportunityNewButton", "EnterpriseSales"), 70);
            MoveToElement(driver, Control("NewContactLname", "EnterpriseSales"));
            ThinkTime(4);
            Element(driver, Control("NewContactLname", "EnterpriseSales")).SendKeys(Keys.Control + "a");
            Element(driver, Control("NewContactLname", "EnterpriseSales")).SendKeys(Keys.Delete);
            Element(driver, Control("NewContactLname", "EnterpriseSales")).SendKeys(NewContactLname);
            ThinkTime(5);

            WaitUntil(driver, Control("Companyinput", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("Companyinput", "EnterpriseSales"));
            Element(driver, Control("Companyinput", "EnterpriseSales")).Click();
            //ActionsClick(driver, Control("Companyinput", "EnterpriseSales"));
            ThinkTime(3);
            ActionsClick(driver, Control("Languagedropdown", "EnterpriseSales"));
            ThinkTime(3);
            scrollDownContactPage(driver, testInReport, testName, testDataIteration);
            ThinkTime(2);
            WaitUntil(driver, Control("ContactLanguage", "EnterpriseSales"), 70);
            MoveToElement(driver, Control("ContactLanguage", "EnterpriseSales"));
            Element(driver, Control("ContactLanguage", "EnterpriseSales")).SendKeys(Keys.Control + "a");
            Element(driver, Control("ContactLanguage", "EnterpriseSales")).SendKeys(Keys.Delete);
            Element(driver, Control("ContactLanguage", "EnterpriseSales")).SendKeys("Uk english");
            ThinkTime(2);
            WaitUntil(driver, Control("ContactLanguageDropdownSelect", "EnterpriseSales"), 70);
            MoveToElement(driver, Control("ContactLanguageDropdownSelect", "EnterpriseSales"));
            Element(driver, Control("ContactLanguageDropdownSelect", "EnterpriseSales")).Click();
            ThinkTime(2);
            saveFooter(driver, testInReport, testName, testDataIteration);

            ThinkTime(5);

            if (Elements(driver, Control("Deactivateaftersave", "EnterpriseSales")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "New Contact is created", "New Contact Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "New contact is not saved", "New Contact Verification");
                Assert.Fail("New Contact Verification Failed");
            }

        }




        //Method to create new contactfrom using quick contact
        public string Qickcretecontact(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string Lname, string time)
        {

            // Enter COntact name
            string NewContactLname = Lname + time;


            ClearField(driver, testInReport, testName, testDataIteration, "NewContactLname", "EnterpriseSales");
            Element(driver, Control("NewContactLname", "EnterpriseSales")).SendKeys(NewContactLname);
            ThinkTime(5);

            // Enter Language - UK English
            WaitUntil(driver, Control("ContactLanguage", "EnterpriseSales"), 70);
            MoveToElement(driver, Control("ContactLanguage", "EnterpriseSales"));
            Element(driver, Control("ContactLanguage", "EnterpriseSales")).SendKeys("Uk english");
            ThinkTime(5);
            MoveToElement(driver, Control("ContactLanguageDropdownSelect", "EnterpriseSales"));
            Element(driver, Control("ContactLanguageDropdownSelect", "EnterpriseSales")).Click();
            ThinkTime(5);

            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Quick contact details entered", "Quick contact details entered");

            // Save Footer
            WaitUntil(driver, Control("SaveContactButton", "Generic"), 30);
            MoveToElement(driver, Control("SaveContactButton", "Generic"));
            Element(driver, Control("SaveContactButton", "Generic")).Click();

            return NewContactLname;

        }


        //Method to add country in contact
        public void AddCountryinContact(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {
            WaitUntil(driver, Control("CountryContact", "Opportunity"), 360);
            MoveToElement(driver, Control("CountryContact", "Opportunity"));
            ThinkTime(4);
            Element(driver, Control("CountryContact", "Opportunity")).SendKeys("India");
            ThinkTime(5);
            WaitUntil(driver, Control("ITSalesCustomer", "Opportunity"), 360);
            ThinkTime(2);
            MoveToElement(driver, Control("ITSalesCustomer", "Opportunity"));
            Element(driver, Control("ITSalesCustomer", "Opportunity")).Click();
            ThinkTime(2);
            // Save Footer
            saveFooter(driver, testInReport, testName, testDataIteration);
            ThinkTime(5);

        }


        //Method to add country in contact
        public void AddCountryinAccount(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {
            WaitUntil(driver, Control("AccountCountry", "Opportunity"), 360);
            MoveToElement(driver, Control("AccountCountry", "Opportunity"));
            ThinkTime(4);
            Element(driver, Control("AccountCountry", "Opportunity")).SendKeys("India");
            ThinkTime(5);

            // Save Footer
            saveFooter(driver, testInReport, testName, testDataIteration);
            ThinkTime(5);

        }

        public void Closebrokeracccount(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(5);
            WaitUntil(driver, Control("Brokeraccountentered", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("Brokeraccountentered", "EnterpriseSales"));
            Element(driver, Control("CloseBrokerbutton", "EnterpriseSales")).Click();
            ThinkTime(5);
        }

        public void DisbaleRTC(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(7);
            SwitchToFrame(driver, "SidePanelIFrame");
            ThinkTime(1);
            SwitchToFrameElement(driver, By.XPath("//iframe[@title='InteractionSync for PureCloud']"));
            ThinkTime(2);
            SwitchToFrameElement(driver, By.XPath("//iframe[@id='isynccif']"));
            ThinkTime(10);
            ElementHighlight(driver, Control("Purecloudnotificationmenu", "Opportunity"));
            WaitUntil(driver, Control("Purecloudnotificationmenu", "Opportunity"), 30);
            //MoveToElement(driver, Control("Purecloudnotificationmenu", "Opportunity"));
            JSClick(driver, Control("Purecloudnotificationmenu", "Opportunity"));
            ThinkTime(10);
            WaitUntil(driver, Control("Purecloudmore", "Opportunity"), 30);
            //MoveToElement(driver, Control("Purecloudmore", "Opportunity"));
            JSClick(driver, Control("Purecloudmore", "Opportunity"));
            ThinkTime(5);
            WaitUntil(driver, Control("Purecloudsettings", "Opportunity"), 30);
            MoveToElement(driver, Control("Purecloudsettings", "Opportunity"));
            Element(driver, Control("Purecloudsettings", "Opportunity")).Click();
            ThinkTime(5);
            WaitUntil(driver, Control("WebRTC", "Opportunity"), 30);
            MoveToElement(driver, Control("WebRTC", "Opportunity"));
            Element(driver, Control("WebRTC", "Opportunity")).Click();
            ThinkTime(5);
            WaitUntil(driver, Control("DisableRTC", "Opportunity"), 30);
            MoveToElement(driver, Control("DisableRTC", "Opportunity"));
            Element(driver, Control("DisableRTC", "Opportunity")).Click();
            ThinkTime(5);
            driver.SwitchTo().DefaultContent();
            ThinkTime(1);
        }

        public string CreateNewContactwithanylangandemail(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string Lname, string time, string Enteremail, string Accountname, string language)
        {
            ThinkTime(4);
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            // Enter COntact name
            string NewContactLname = Lname + time;
            WaitUntil(driver, Control("OpportunityNewButton", "EnterpriseSales"), 360);
            MoveToElement(driver, Control("OpportunityNewButton", "EnterpriseSales"));
            Element(driver, Control("OpportunityNewButton", "EnterpriseSales")).Click();
            ThinkTime(7);
            if (Elements(driver, Control("ScriptDialg", "Opportunity")) > 0)
            {
                Element(driver, Control("HandleScriptError", "Opportunity")).Click();
                ThinkTime(3);
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "No Script error present", "No Script error present");

            }
            ThinkTime(8);

            // WaitUntil(driver, Control("OpportunityNewButton", "EnterpriseSales"), 70);
            WaitUntil(driver, Control("NewContactLname", "EnterpriseSales"), 360);
            MoveToElement(driver, Control("NewContactLname", "EnterpriseSales"));
            ThinkTime(4);
            Element(driver, Control("NewContactLname", "EnterpriseSales")).Click();
            ThinkTime(2);
            Element(driver, Control("NewContactLname", "EnterpriseSales")).SendKeys(NewContactLname);
            ThinkTime(5);
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Name entered", "Name entered");

            // Enter Account
            WaitUntil(driver, Control("Companyinput", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("Companyinput", "EnterpriseSales"));
            Element(driver, Control("Companyinput", "EnterpriseSales")).Click();
            Element(driver, Control("Companyinput", "EnterpriseSales")).SendKeys(Accountname);
            ThinkTime(3);
            WaitUntil(driver, Control("CompanydropValue", "Accounts"), 360);
            ActionsClick(driver, Control("CompanydropValue", "Accounts"));
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Accountname entered", "Accountname entered");

            //WaitUntil(driver, Control("Companyinput", "EnterpriseSales"), 30);
            //MoveToElement(driver, Control("Companyinput", "EnterpriseSales"));
            //Element(driver, Control("Companyinput", "EnterpriseSales")).Click();
            //ActionsClick(driver, Control("Companylookup", "EnterpriseSales"));
            //ThinkTime(3);
            //WaitUntil(driver, Control("Contactcompanyselection", "EnterpriseSales"), 360);
            //ActionsClick(driver, Control("Contactcompanyselection", "EnterpriseSales"));
            //ThinkTime(3);
            // Enter email
            Element(driver, Control("Contactemailfield", "36.1_Dashboard")).Click();
            Element(driver, Control("Contactemailfield", "36.1_Dashboard")).SendKeys(Enteremail);
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "email entered", "email entered");

            scrollDownContactPageSales(driver, testInReport, testName, testDataIteration);

            // Enter Language - UK English
            WaitUntil(driver, Control("ContactLanguage", "EnterpriseSales"), 180);
            MoveToElement(driver, Control("ContactLanguage", "EnterpriseSales"));
            Element(driver, Control("ContactLanguage", "EnterpriseSales")).SendKeys(Keys.Control + "a");
            Element(driver, Control("ContactLanguage", "EnterpriseSales")).SendKeys(Keys.Delete);
            Element(driver, Control("ContactLanguage", "EnterpriseSales")).SendKeys(language);
            ThinkTime(5);
            MoveToElement(driver, Control("ContactLanguageDropdownSelect", "EnterpriseSales"));
            Element(driver, Control("ContactLanguageDropdownSelect", "EnterpriseSales")).Click();
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Language entered", "Language entered");

            // Save Footer
            saveFooter(driver, testInReport, testName, testDataIteration);
            ThinkTime(5);

            if (Elements(driver, Control("Savefooterverification", "36.1_Dashboard")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "New contact is not saved", "New Contact Verification");
                ////Assert.Fail("New Contact Verification Failed");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "New Contact is created", "New Contact Verification");

            }
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            scrollDownContactPageSales(driver, testInReport, testName, testDataIteration);
            scrollDownContactPageSales(driver, testInReport, testName, testDataIteration);

            return NewContactLname;

        }
        public void ClearField(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string obj, string objsheet)
        {
            ThinkTime(2);
            WaitUntil(driver, Control(obj, objsheet), 180);
            Element(driver, Control(obj, objsheet)).SendKeys(Keys.Control + "a");
            Element(driver, Control(obj, objsheet)).SendKeys(Keys.Delete);
        }

        //Method to create new contact.
        public string CreateNewContactITSaleswithlanguageandemail(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string Lname, string time, string Enteremail, string Accountname)
        {
            ThinkTime(4);
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);

            // Enter COntact name
            string NewContactLname = Lname + time;
            ThinkTime(4);
            WaitUntil(driver, Control("OpportunityNewButton", "EnterpriseSales"), 360);
            MoveToElement(driver, Control("OpportunityNewButton", "EnterpriseSales"));
            Element(driver, Control("OpportunityNewButton", "EnterpriseSales")).Click();
            ThinkTime(7);

            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            //HidingPureCloudNew(driver, testInReport, testName, testDataIteration);
            // WaitUntil(driver, Control("OpportunityNewButton", "EnterpriseSales"), 70);
            WaitUntil(driver, Control("NewContactLname", "EnterpriseSales"), 360);
            MoveToElement(driver, Control("NewContactLname", "EnterpriseSales"));
            ThinkTime(4);
            Element(driver, Control("NewContactLname", "EnterpriseSales")).Click();
            ThinkTime(2);
            Element(driver, Control("NewContactLname", "EnterpriseSales")).SendKeys(NewContactLname);
            ThinkTime(5);
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Name entered", "Name entered");

            // Enter Account
            WaitUntil(driver, Control("TestContactInput", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("TestContactInput", "EnterpriseSales"));
            Element(driver, Control("TestContactInput", "EnterpriseSales")).Click();
            Element(driver, Control("TestContactInput", "EnterpriseSales")).SendKeys(Accountname);
            ThinkTime(3);
            WaitUntil(driver, Control("CompanydropValue", "Accounts"), 360);
            ActionsClick(driver, Control("CompanydropValue", "Accounts"));
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Accountname entered", "Accountname entered");

            //WaitUntil(driver, Control("Companyinput", "EnterpriseSales"), 30);
            //MoveToElement(driver, Control("Companyinput", "EnterpriseSales"));
            //Element(driver, Control("Companyinput", "EnterpriseSales")).Click();
            //ActionsClick(driver, Control("Companylookup", "EnterpriseSales"));
            //ThinkTime(3);
            //WaitUntil(driver, Control("Contactcompanyselection", "EnterpriseSales"), 360);
            //ActionsClick(driver, Control("Contactcompanyselection", "EnterpriseSales"));
            //ThinkTime(3);
            // Enter email
            ThinkTime(2);
            WaitUntil(driver, Control("Contactemailfield", "36.1_Dashboard"), 60);
            Element(driver, Control("Contactemailfield", "36.1_Dashboard")).Click();
            ThinkTime(2);
            Element(driver, Control("Contactemailfield", "36.1_Dashboard")).SendKeys(Enteremail);
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "email entered", "email entered");

            scrollDownContactPageEnterprise(driver, testInReport, testName, testDataIteration);

            // Enter Language - UK English
            ThinkTime(2);
            WaitUntil(driver, Control("ContactLanguage", "EnterpriseSales"), 60);
            MoveToElement(driver, Control("ContactLanguage", "EnterpriseSales"));
            Element(driver, Control("ContactLanguage", "EnterpriseSales")).SendKeys(Keys.Control + "a");
            Element(driver, Control("ContactLanguage", "EnterpriseSales")).SendKeys(Keys.Delete);
            Element(driver, Control("ContactLanguage", "EnterpriseSales")).SendKeys("UK English");
            ThinkTime(5);
            MoveToElement(driver, Control("ContactLanguageDropdownSelect", "EnterpriseSales"));
            Element(driver, Control("ContactLanguageDropdownSelect", "EnterpriseSales")).Click();
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Language entered", "Language entered");

            // Save Footer
            saveFooter(driver, testInReport, testName, testDataIteration);
            ThinkTime(5);

            if (Elements(driver, Control("Savefooterverification", "36.1_Dashboard")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "New contact is not saved", "New Contact Verification");
                ////Assert.Fail("New Contact Verification Failed");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "New Contact is created", "New Contact Verification");

            }
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            scrollDownContactPageEnterprise(driver, testInReport, testName, testDataIteration);
            scrollDownContactPageEnterprise(driver, testInReport, testName, testDataIteration);

            return NewContactLname;

        }

        public string CreateNewContactITSaleswithlanguageandphone(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string Lname, string time, string Phone)
        {
            ThinkTime(4);
            // Enter COntact name
            string NewContactLname = Lname + time;
            WaitUntil(driver, Control("OpportunityNewButton", "EnterpriseSales"), 360);
            MoveToElement(driver, Control("OpportunityNewButton", "EnterpriseSales"));
            Element(driver, Control("OpportunityNewButton", "EnterpriseSales")).Click();
            ThinkTime(7);
            if (Elements(driver, Control("ScriptDialg", "Opportunity")) > 0)
            {
                Element(driver, Control("HandleScriptError", "Opportunity")).Click();
                ThinkTime(3);
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "No Script error present", "No Script error present");

            }
            ThinkTime(8);

            WaitUntil(driver, Control("NewContactLname", "EnterpriseSales"), 360);
            MoveToElement(driver, Control("NewContactLname", "EnterpriseSales"));
            ThinkTime(4);
            Element(driver, Control("NewContactLname", "EnterpriseSales")).Click();
            Element(driver, Control("NewContactLname", "EnterpriseSales")).SendKeys(NewContactLname);
            ThinkTime(5);

            scrollDownContactPage(driver, testInReport, testName, testDataIteration);
            ThinkTime(3);
            // Enter Phone
            WaitUntil(driver, Control("ContactBussinesPhone", "Opportunity"), 120);
            MoveToElement(driver, Control("ContactBussinesPhone", "Opportunity"));
            ThinkTime(3);
            Element(driver, Control("ContactBussinesPhone", "Opportunity")).Click();
            Element(driver, Control("ContactBussinesPhone", "Opportunity")).SendKeys(Phone);
            ThinkTime(3);

            // Enter Language - UK English
            WaitUntil(driver, Control("ContactLanguage", "EnterpriseSales"), 120);
            MoveToElement(driver, Control("ContactLanguage", "EnterpriseSales"));
            Element(driver, Control("ContactLanguage", "EnterpriseSales")).SendKeys("UK English");
            ThinkTime(5);
            MoveToElement(driver, Control("ContactLanguageDropdownSelect", "EnterpriseSales"));
            Element(driver, Control("ContactLanguageDropdownSelect", "EnterpriseSales")).Click();

            // Save Footer
            saveFooter(driver, testInReport, testName, testDataIteration);
            ThinkTime(5);

            scrollDownContactPageEnterprise(driver, testInReport, testName, testDataIteration);
            ThinkTime(3);
            if (Elements(driver, Control("LanguageInput", "Opportunity")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Language Preference is not overriden", "Language Preference is not overriden");

            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Language Preference is overriden", "Language Preference is overriden");
                Assert.Fail("New Contact Verification Failed");
            }

            return NewContactLname;

        }

        public void Entercompanyname(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string Accountname)
        {
            // Enter Account
            WaitUntil(driver, Control("Companyinput", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("Companyinput", "EnterpriseSales"));
            Element(driver, Control("Companyinput", "EnterpriseSales")).Click();
            Element(driver, Control("Companyinput", "EnterpriseSales")).SendKeys(Accountname);
            ThinkTime(3);
            ActionsClick(driver, Control("CompanydropValue", "Accounts"));
            //ThinkTime(3);

        }

        public void CreateNewContactEnterpriseSales1(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string LName, string time)
        {
            ThinkTime(2);

            string NewContactLname = LName + time;

            WaitUntil(driver, Control("OpportunityNewButton", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("OpportunityNewButton", "EnterpriseSales"));
            Element(driver, Control("OpportunityNewButton", "EnterpriseSales")).Click();

            ThinkTime(3);
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            ThinkTime(3);

            WaitUntil(driver, Control("NewContactLname", "EnterpriseSales"), 70);
            MoveToElement(driver, Control("NewContactLname", "EnterpriseSales"));
            ThinkTime(4);
            Element(driver, Control("NewContactLname", "EnterpriseSales")).Click();
            Element(driver, Control("NewContactLname", "EnterpriseSales")).SendKeys(Keys.Control + "a");
            Element(driver, Control("NewContactLname", "EnterpriseSales")).SendKeys(Keys.Delete);
            Element(driver, Control("NewContactLname", "EnterpriseSales")).SendKeys(NewContactLname);

            ThinkTime(3);
            scrollDownContactPageEnterprise(driver, testInReport, testName, testDataIteration);
            ThinkTime(3);
            /*
            // Enter email
            Element(driver, Control("Contactemailfield", "36.1_Dashboard")).SendKeys(Enteremail);
            */
            // Enter Language - UK English
            WaitUntil(driver, Control("ContactLanguage", "EnterpriseSales"), 70);
            MoveToElement(driver, Control("ContactLanguage", "EnterpriseSales"));
            ThinkTime(3);
            Element(driver, Control("ContactLanguage", "EnterpriseSales")).SendKeys(Keys.Control + "a");
            Element(driver, Control("ContactLanguage", "EnterpriseSales")).SendKeys(Keys.Delete);
            Element(driver, Control("ContactLanguage", "EnterpriseSales")).SendKeys("Uk english");
            ThinkTime(5);
            MoveToElement(driver, Control("ContactLanguageDropdownSelect", "EnterpriseSales"));
            ThinkTime(3);
            Element(driver, Control("ContactLanguageDropdownSelect", "EnterpriseSales")).Click();
            ThinkTime(3);



            if (Elements(driver, Control("ScriptDialg", "Opportunity")) > 0)
            {
                Element(driver, Control("HandleScriptError", "Opportunity")).Click();
                ThinkTime(3);
                Element(driver, Control("Savefooternew", "Opportunity")).Click();
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "No Script error present", "No Script error present");
            }

            ThinkTime(2);

            saveFooter(driver, testInReport, testName, testDataIteration);


        }




        public string CreateNewContactEnterpriseSales(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string Lname, string time, string Enteremail, string Accountname = "")
        {
            ThinkTime(2);
            // Enter COntact name
            string NewContactLname = Lname + time;
            WaitUntil(driver, Control("OpportunityNewButton", "EnterpriseSales"), 30);
            Element(driver, Control("OpportunityNewButton", "EnterpriseSales")).Click();
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            ThinkTime(2);
            WaitUntil(driver, Control("NewContactLname", "EnterpriseSales"), 60);
            Element(driver, Control("NewContactLname", "EnterpriseSales")).Click();
            Element(driver, Control("NewContactLname", "EnterpriseSales")).SendKeys(NewContactLname);
            ThinkTime(2);
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            // Enter Account
            WaitUntil(driver, Control("Companyinput", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("Companyinput", "EnterpriseSales"));
            Element(driver, Control("Companyinput", "EnterpriseSales")).Click();
            ThinkTime(2);
            WaitUntil(driver, Control("Languagedropdown", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("Languagedropdown", "EnterpriseSales"));
            Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();
            ThinkTime(3);


            //scrollDownContactPageEnterprise(driver, testInReport, testName, testDataIteration);
            scrollDownOpportunity(driver, testInReport, testName, testDataIteration);
            scrollDownOpportunity(driver, testInReport, testName, testDataIteration);


            // Enter Language - UK English
            WaitUntil(driver, Control("ContactLanguage", "EnterpriseSales"), 70);
            MoveToElement(driver, Control("ContactLanguage", "EnterpriseSales"));
            ThinkTime(3);
            Element(driver, Control("ContactLanguage", "EnterpriseSales")).SendKeys(Keys.Control + "a");
            Element(driver, Control("ContactLanguage", "EnterpriseSales")).SendKeys(Keys.Delete);
            Element(driver, Control("ContactLanguage", "EnterpriseSales")).SendKeys("Uk english");
            ThinkTime(2);
            Element(driver, Control("ContactLanguageDropdownSelect", "EnterpriseSales")).Click();
            ThinkTime(3);


            // Save Footer
            if (Elements(driver, Control("ScriptDialg", "Opportunity")) > 0)
            {
                Element(driver, Control("HandleScriptError", "Opportunity")).Click();
                ThinkTime(3);
                saveFooter(driver, testInReport, testName, testDataIteration);
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "No Script error present", "No Script error present");



            }
            saveFooter(driver, testInReport, testName, testDataIteration);


            if (Elements(driver, Control("Savefooterverification", "36.1_Dashboard")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "New contact is not saved", "New Contact Verification");
                Assert.Fail("New Contact Verification Failed");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", NewContactLname + "New Contact is created", "New Contact Verification");

            }
            //scrollDownContactPageEnterprise(driver, testInReport, testName, testDataIteration);
            //ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            //ScriptErrorExcep(driver, testInReport, testName, testDataIteration);

            //scrollDownContactPageEnterprise(driver, testInReport, testName, testDataIteration);
            //ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            //ScriptErrorExcep(driver, testInReport, testName, testDataIteration);

            //scrollDownContactPageEnterprise(driver, testInReport, testName, testDataIteration);

            //ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            //ScriptErrorExcep(driver, testInReport, testName, testDataIteration);

            return NewContactLname;

        }


        public string CreateNewContactEnterpriseSalesForBroker(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string Lname, string time, string Enteremail, String CustomerType)
        {
            ThinkTime(2);
            // Enter COntact name
            string NewContactLname = Lname + time;
            WaitUntil(driver, Control("OpportunityNewButton", "EnterpriseSales"), 30);
            //MoveToElement(driver, Control("OpportunityNewButton", "EnterpriseSales"));
            ThinkTime(3);
            Element(driver, Control("OpportunityNewButton", "EnterpriseSales")).Click();
            ThinkTime(3);

            WaitUntil(driver, Control("OpportunityNewButton", "EnterpriseSales"), 70);
            MoveToElement(driver, Control("Salutation1", "Accounts"));
            Element(driver, Control("Salutation1", "Accounts")).Click();
            ThinkTime(2);
            Element(driver, Control("Salutation1", "Accounts")).SendKeys("Mr");
            ThinkTime(2);
            WaitUntil(driver, Control("NewContactLname", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("NewContactLname", "EnterpriseSales"));
            Element(driver, Control("NewContactLname", "EnterpriseSales")).Click();
            ThinkTime(10);
            Element(driver, Control("NewContactLname", "EnterpriseSales")).SendKeys(NewContactLname);
            ThinkTime(2);
            MoveToElement(driver, Control("EmailContact", "Accounts"));
            ThinkTime(2);
            Element(driver, Control("EmailContact", "Accounts")).Click();
            ThinkTime(2);
            Element(driver, Control("EmailContact", "Accounts")).SendKeys(Enteremail);
            ThinkTime(2);

            //Enter Account
            WaitUntil(driver, Control("Companyinput", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("Companyinput", "EnterpriseSales"));
            Element(driver, Control("Companyinput", "EnterpriseSales")).Click();
            Element(driver, Control("Companyinput", "EnterpriseSales")).SendKeys(Keys.Control + "a");
            Element(driver, Control("Companyinput", "EnterpriseSales")).SendKeys(Keys.Delete);
            Element(driver, Control("Companyinput", "EnterpriseSales")).SendKeys("WIP");
            ThinkTime(6);
            WaitUntil(driver, Control("BrokerAccountDrop", "Accounts"), 30);
            MoveToElement(driver, Control("BrokerAccountDrop", "Accounts"));
            Element(driver, Control("BrokerAccountDrop", "Accounts")).Click();
            ThinkTime(3);
            scrollDownOpportunityPage(driver, testInReport, testName, testDataIteration);
            scrollDownOpportunityPage(driver, testInReport, testName, testDataIteration);
            scrollDownOpportunityPage(driver, testInReport, testName, testDataIteration);


            //WaitUntil(driver, Control("ServiceProviderSelectionBtn", CustomerType, "EnterpriseSales"), 30);
            //MoveToElement(driver, Control("ServiceProviderSelectionBtn", CustomerType, "EnterpriseSales"));
            //IWebElement New = Element(driver, Control("ServiceProviderSelectionBtn", CustomerType, "EnterpriseSales"));

            //IJavaScriptExecutor BVJ = (IJavaScriptExecutor)driver;
            //BVJ.ExecuteScript("arguments[0].click();", New);
            if (Elements(driver, Control("ScriptDialg", "Opportunity")) > 0)
            {
                Element(driver, Control("HandleScriptError", "Opportunity")).Click();
                ThinkTime(3);
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "No Script error present", "No Script error present");



            }
            ThinkTime(3);
            //Element(driver, Control("Companyinput", "EnterpriseSales")).Click();
            //  ActionsClick(driver, Control("Companylookup", "EnterpriseSales"));
            //ThinkTime(3);
            // ActionsClick(driver, Control("Languagedropdown", "EnterpriseSales"));
            //ThinkTime(3);

            scrollDownContactPageEnterprise(driver, testInReport, testName, testDataIteration);
            ThinkTime(3);
            /*
            // Enter email
            Element(driver, Control("Contactemailfield", "36.1_Dashboard")).SendKeys(Enteremail);
            */
            // Enter Language - UK English
            WaitUntil(driver, Control("ContactLanguage", "EnterpriseSales"), 70);
            MoveToElement(driver, Control("ContactLanguage", "EnterpriseSales"));
            ThinkTime(3);
            Element(driver, Control("ContactLanguage", "EnterpriseSales")).Click();
            Element(driver, Control("ContactLanguage", "EnterpriseSales")).SendKeys("Uk english");
            ThinkTime(5);
            MoveToElement(driver, Control("ContactLanguageDropdownSelect", "EnterpriseSales"));
            ThinkTime(3);
            Element(driver, Control("ContactLanguageDropdownSelect", "EnterpriseSales")).Click();
            ThinkTime(3);
            // Save Footer

            scrollDownOpportunityPage(driver, testInReport, testName, testDataIteration);
            //WaitUntil(driver, Control("BrokerFlip", "Accounts"), 70);
            //MoveToElement(driver, Control("BrokerFlip", "Accounts"));
            //ThinkTime(3);
            //Element(driver, Control("BrokerFlip", "Accounts")).Click();
            //ThinkTime(3);
            WaitUntil(driver, Control("BrokerTypeSelect", "Generic"), 30);
            MoveToElement(driver, Control("BrokerTypeSelect", "Generic"));
            Element(driver, Control("BrokerTypeSelect", "Generic")).Click();
            ThinkTime(3);
            Element(driver, Control("BrokerTypeSelect", "Generic")).SendKeys("Real Estate Broker");

            saveFooter(driver, testInReport, testName, testDataIteration);
            ThinkTime(5);
            if (Elements(driver, Control("Savefooterverification", "36.1_Dashboard")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "New contact is not saved", "New Contact Verification");
                Assert.Fail("New Contact Verification Failed");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "New Contact is created", "New Contact Verification");

            }

            return NewContactLname;

        }




        //Method to create new contact with language field.
        public void CreateNewContactwithlanguageEnterpriseSales(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string LName, string time)
        {
            ThinkTime(5);

            string NewContactLname = LName + time;

            WaitUntil(driver, Control("OpportunityNewButton", "EnterpriseSales"), 120);
            MoveToElement(driver, Control("OpportunityNewButton", "EnterpriseSales"));
            Element(driver, Control("OpportunityNewButton", "EnterpriseSales")).Click();

            ThinkTime(3);

            WaitUntil(driver, Control("NewContactLname", "EnterpriseSales"), 120);
            MoveToElement(driver, Control("NewContactLname", "EnterpriseSales"));
            ThinkTime(4);
            Element(driver, Control("NewContactLname", "EnterpriseSales")).Click();
            Element(driver, Control("NewContactLname", "EnterpriseSales")).SendKeys(NewContactLname);

            ThinkTime(3);

            scrollDownContactPageEnterprise(driver, testInReport, testName, testDataIteration);

            WaitUntil(driver, Control("ContactLanguage", "EnterpriseSales"), 70);
            MoveToElement(driver, Control("ContactLanguage", "EnterpriseSales"));
            Element(driver, Control("ContactLanguage", "EnterpriseSales")).Click();
            Element(driver, Control("ContactLanguage", "EnterpriseSales")).SendKeys("Uk english");

            ThinkTime(3);

            MoveToElement(driver, Control("ContactLanguageDropdownSelect", "EnterpriseSales"));
            Element(driver, Control("ContactLanguageDropdownSelect", "EnterpriseSales")).Click();


            saveFooter(driver, testInReport, testName, testDataIteration);

            ThinkTime(3);

            if (Elements(driver, Control("Deactivateaftersave", "EnterpriseSales")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "New Contact is created", "New Contact Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "New contact is not saved", "New Contact Verification");
                Assert.Fail("New Contact Verification Failed");
            }

        }




        public void Deletecontact(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string LastName)
        {
            ThinkTime(2);

            WaitUntil(driver, Control("ContactDelete", "Contacts"), 30);
            MoveToElement(driver, Control("ContactDelete", "Contacts"));
            Element(driver, Control("ContactDelete", "Contacts")).Click();
            ThinkTime(2);

            WaitUntil(driver, Control("DeleteConfirm", "Contacts"), 30);
            MoveToElement(driver, Control("DeleteConfirm", "Contacts"));
            Element(driver, Control("DeleteConfirm", "Contacts")).Click();



            RecordGlobalSearch(driver, testInReport, testName, testDataIteration, LastName);

            if (Elements(driver, Control("SearchResult", LastName, "Accounts")) == 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Contact is deleted", "Contact is deleted");
            }

            else
            {

                for (int i = 0; i < 8; i++)
                {
                    RecordGlobalSearch(driver, testInReport, testName, testDataIteration, LastName);
                    selectmargincontact(driver, testInReport, testDataIteration, testName);

                    WaitUntil(driver, Control("ContactDelete", "Contacts"), 30);
                    MoveToElement(driver, Control("ContactDelete", "Contacts"));
                    Element(driver, Control("ContactDelete", "Contacts")).Click();
                    ThinkTime(2);

                    WaitUntil(driver, Control("DeleteConfirm", "Contacts"), 30);
                    MoveToElement(driver, Control("DeleteConfirm", "Contacts"));
                    Element(driver, Control("DeleteConfirm", "Contacts")).Click();


                }
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Contact is not deleted", "Contact is not deleted");
                Assert.Fail("Assign User Verification Failed");
            }
        }

        public void DeleteAccount(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string LastName)
        {
            ThinkTime(2);

            ThinkTime(15);
            if (Elements(driver, Control("AccountDelete", "Accounts")) == 0)
            {
                ThinkTime(3);
                MoveToElement(driver, Control("Moreheadernew", "Opportunity"));
                Element(driver, Control("Moreheadernew", "Opportunity")).Click();
                ThinkTime(3);
                MoveToElement(driver, Control("AccountDelete", "Accounts"));
                Element(driver, Control("AccountDelete", "Accounts")).Click();
                ThinkTime(10);
            }

            else
            {
                WaitUntil(driver, Control("AccountDelete", "Accounts"), 30);
                MoveToElement(driver, Control("AccountDelete", "Accounts"));
                ThinkTime(3);
                Element(driver, Control("AccountDelete", "Accounts")).Click();
                ThinkTime(3);
            }
            WaitUntil(driver, Control("DeleteConfirm", "Accounts"), 30);
            MoveToElement(driver, Control("DeleteConfirm", "Accounts"));
            ThinkTime(3);
            Element(driver, Control("DeleteConfirm", "Accounts")).Click();
            ThinkTime(5);
            NavigateToEntity(driver, testInReport, testName, testDataIteration, "Accounts");
            //relevancesearch(driver, testInReport, testName, testDataIteration, LastName);
            ThinkTime(5);
            RecordGlobalSearch(driver, testInReport, testName, testDataIteration, LastName);
            //string searchresults = Element(driver, Control("SearchResult1", "Accounts")).GetAttribute("title");
            if (Elements(driver, Control("SearchResult", LastName, "Accounts")) == 0)

            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Account is deleted", "Account is deleted");

            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Account is not deleted", "Account is not deleted");
                Assert.Fail("Assign User Verification Failed");
            }

        }


        public void VerifyContactEditable(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string Account)
        {
            ThinkTime(2);
            WaitUntil(driver, Control("ContactAccountField", "Contacts"), 30);
            MoveToElement(driver, Control("ContactAccountField", "Contacts"));


            if (Elements(driver, Control("ContactPresent", "EnterpriseSales")) > 0)
            {

                WaitUntil(driver, Control("AccountClose", "Contacts"), 30);
                MoveToElement(driver, Control("AccountClose", "Contacts"));
                Element(driver, Control("AccountClose", "Contacts")).Click();

                WaitUntil(driver, Control("ContactAccount", "Contacts"), 30);
                MoveToElement(driver, Control("ContactAccount", "Contacts"));
                Element(driver, Control("ContactLanguage", "EnterpriseSales")).Click();
                Element(driver, Control("ContactAccount", "Contacts")).SendKeys(Account);

                WaitUntil(driver, Control("SelectedAccount", "Contacts"), 30);
                MoveToElement(driver, Control("SelectedAccount", "Contacts"));
                Element(driver, Control("SelectedAccount", "Contacts")).Click();

            }

            else
            {
                WaitUntil(driver, Control("ContactAccount", "Contacts"), 30);
                MoveToElement(driver, Control("ContactAccount", "Contacts"));
                Element(driver, Control("ContactAccount", "Contacts")).Click();
                Element(driver, Control("ContactAccount", "Contacts")).SendKeys(Account);

                WaitUntil(driver, Control("SelectedAccount", "Contacts"), 30);
                MoveToElement(driver, Control("SelectedAccount", "Contacts"));
                Element(driver, Control("SelectedAccount", "Contacts")).Click();
            }

            saveFooter(driver, testInReport, testName, testDataIteration);
            AddLog(driver, testInReport, testName, testDataIteration, "pass", "Contact Account field is Updated", "Contact Account field is Updated");

        }


        //method to verify communication Profile Read/Edit permission

        public void VerifyCommunicationProfileReadWritePermission(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {
            ThinkTime(3);
            WaitUntil(driver, Control("VerifyCommunicationProfileER", "EnterpriseSales"), 30);

            ElementHighlight(driver, Control("VerifyCommunicationProfileER", "EnterpriseSales"));

            if (Elements(driver, Control("VerifyCommunicationProfileER", "EnterpriseSales")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Verified user doesn't have permission to edit", "Read And Edit Communication Profile verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Verified user doesn't have permission to edit Failed", "Read And Edit Communication Profile verification");
                Assert.Fail("Communication Profile Read Write Permission verification failed");
            }

        }


        //Method to Share Record to anothor user.
        public void ShareRecord(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string User)
        {

            ThinkTime(15);
            if (Elements(driver, Control("ActivityShareButton", "EnterpriseSales")) == 0)
            {
                //ThinkTime(3);
                WaitUntil(driver, Control("Moreheadernew", "Opportunity"), 360);
                MoveToElement(driver, Control("Moreheadernew", "Opportunity"));
                Element(driver, Control("Moreheadernew", "Opportunity")).Click();

                WaitUntil(driver, Control("ActivityShareButton", "EnterpriseSales"), 360);
                MoveToElement(driver, Control("ActivityShareButton", "EnterpriseSales"));
                Element(driver, Control("ActivityShareButton", "EnterpriseSales")).Click();
                ThinkTime(10);
            }

            else
            {

                WaitUntil(driver, Control("ActivityShareButton", "EnterpriseSales"), 30);
                MoveToElement(driver, Control("ActivityShareButton", "EnterpriseSales"));
                ThinkTime(3);
                Element(driver, Control("ActivityShareButton", "EnterpriseSales")).Click();
                ThinkTime(10);
            }


            ThinkTime(10);

            SwitchToFrame(driver, "InlineDialog_Iframe");
            ThinkTime(3);
            WaitUntil(driver, Control("SelectAllUsers", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("SelectAllUsers", "EnterpriseSales"));
            ThinkTime(3);
            Element(driver, Control("SelectAllUsers", "EnterpriseSales")).Click();
            ThinkTime(5);
            //WaitUntil(driver, Control("RemoveSelectedUser", "EnterpriseSales"), 30);
            //MoveToElement(driver, Control("RemoveSelectedUser", "EnterpriseSales"));
            //Element(driver, Control("RemoveSelectedUser", "EnterpriseSales")).Click();
            //ThinkTime(5);
            AlertHandling(driver, "Accept");



            WaitUntil(driver, Control("AddUserTeam", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("AddUserTeam", "EnterpriseSales"));
            ThinkTime(3);
            Element(driver, Control("AddUserTeam", "EnterpriseSales")).Click();

            ThinkTime(3);

            driver.SwitchTo().DefaultContent();
            SwitchToFrame(driver, "InlineDialog1_Iframe");
            ThinkTime(3);
            WaitUntil(driver, Control("SearchUserTeamInput", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("SearchUserTeamInput", "EnterpriseSales"));
            Element(driver, Control("SearchUserTeamInput", "EnterpriseSales")).Click();
            ThinkTime(3);
            Element(driver, Control("SearchUserTeamInput", "EnterpriseSales")).SendKeys(User);
            ThinkTime(3);
            Element(driver, Control("SearchUserTeamButton", "EnterpriseSales")).Click();

            ThinkTime(3);

            WaitUntil(driver, Control("SeleckAllRecord", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("SeleckAllRecord", "EnterpriseSales"));
            ThinkTime(3);
            Element(driver, Control("SeleckAllRecord", "EnterpriseSales")).Click();

            ThinkTime(3);

            MoveToElement(driver, Control("SelectButton", "EnterpriseSales"));
            ThinkTime(3);
            Element(driver, Control("SelectButton", "EnterpriseSales")).Click();
            ThinkTime(3);
            MoveToElement(driver, Control("AddButton", "EnterpriseSales"));
            ThinkTime(3);
            Element(driver, Control("AddButton", "EnterpriseSales")).Click();

            ThinkTime(3);

            driver.SwitchTo().DefaultContent();
            SwitchToFrame(driver, "InlineDialog_Iframe");
            ThinkTime(3);

            WaitUntil(driver, Control("SelectUserPermission", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("SelectUserPermission", "EnterpriseSales"));
            ThinkTime(3);
            Element(driver, Control("SelectUserPermission", "EnterpriseSales")).Click();
            ThinkTime(3);

            MoveToElement(driver, Control("ToogleAllPermission", "EnterpriseSales"));
            Element(driver, Control("ToogleAllPermission", "EnterpriseSales")).Click();
            //ActionsDoubleClick(driver, Control("ToogleAllPermission", "EnterpriseSales"));

            ThinkTime(3);

            WaitUntil(driver, Control("AppendCheckbox", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("AppendCheckbox", "EnterpriseSales"));
            ThinkTime(3);
            Element(driver, Control("AppendCheckbox", "EnterpriseSales")).Click();
            ThinkTime(3);
            WaitUntil(driver, Control("ShareCheckbox", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("ShareCheckbox", "EnterpriseSales"));
            ThinkTime(3);
            Element(driver, Control("ShareCheckbox", "EnterpriseSales")).Click();
            ThinkTime(3);
            MoveToElement(driver, Control("ShareButton", "EnterpriseSales"));
            ThinkTime(3);
            Element(driver, Control("ShareButton", "EnterpriseSales")).Click();
            ThinkTime(10);

        }

        //Method to Share Record to anothor user.
        public void Sharerecord(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string User)
        {

            //WaitUntil(driver, Control("ActivityShareButton", "EnterpriseSales"), 360);
            //if (Elements(driver, Control("ActivityShareButton", "EnterpriseSales")) == 0)
            //{
            //ThinkTime(3);
            WaitUntil(driver, Control("MoreheadernewBtn", "Opportunity"), 360);
            MoveToElement(driver, Control("MoreheadernewBtn", "Opportunity"));
            Element(driver, Control("MoreheadernewBtn", "Opportunity")).Click();

            WaitUntil(driver, Control("ActivityShareButton", "EnterpriseSales"), 360);
            MoveToElement(driver, Control("ActivityShareButton", "EnterpriseSales"));
            Element(driver, Control("ActivityShareButton", "EnterpriseSales")).Click();
            ThinkTime(10);
            // }

            //else
            //{

            //    WaitUntil(driver, Control("ActivityShareButton", "EnterpriseSales"), 30);
            //    MoveToElement(driver, Control("ActivityShareButton", "EnterpriseSales"));
            //    ThinkTime(3);
            //    Element(driver, Control("ActivityShareButton", "EnterpriseSales")).Click();
            //    ThinkTime(10);
            //}


            ThinkTime(10);

            SwitchToFrame(driver, "InlineDialog_Iframe");
            ThinkTime(3);
            WaitUntil(driver, Control("SelectAllUsers", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("SelectAllUsers", "EnterpriseSales"));
            ThinkTime(3);
            Element(driver, Control("SelectAllUsers", "EnterpriseSales")).Click();
            ThinkTime(5);
            //WaitUntil(driver, Control("RemoveSelectedUser", "EnterpriseSales"), 30);
            //MoveToElement(driver, Control("RemoveSelectedUser", "EnterpriseSales"));
            //Element(driver, Control("RemoveSelectedUser", "EnterpriseSales")).Click();
            //ThinkTime(5);
            //AlertHandling(driver, "Accept");



            WaitUntil(driver, Control("AddUserTeam", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("AddUserTeam", "EnterpriseSales"));
            ThinkTime(3);
            Element(driver, Control("AddUserTeam", "EnterpriseSales")).Click();

            ThinkTime(3);

            driver.SwitchTo().DefaultContent();
            SwitchToFrame(driver, "InlineDialog1_Iframe");
            ThinkTime(3);
            WaitUntil(driver, Control("SearchUserTeamInput", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("SearchUserTeamInput", "EnterpriseSales"));
            Element(driver, Control("SearchUserTeamInput", "EnterpriseSales")).Click();
            ThinkTime(3);
            Element(driver, Control("SearchUserTeamInput", "EnterpriseSales")).SendKeys(User);
            ThinkTime(3);
            Element(driver, Control("SearchUserTeamButton", "EnterpriseSales")).Click();

            ThinkTime(3);

            WaitUntil(driver, Control("SeleckAllRecord", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("SeleckAllRecord", "EnterpriseSales"));
            ThinkTime(3);
            Element(driver, Control("SeleckAllRecord", "EnterpriseSales")).Click();

            ThinkTime(3);

            MoveToElement(driver, Control("SelectButton", "EnterpriseSales"));
            ThinkTime(3);
            Element(driver, Control("SelectButton", "EnterpriseSales")).Click();
            ThinkTime(3);
            MoveToElement(driver, Control("AddButton", "EnterpriseSales"));
            ThinkTime(3);
            Element(driver, Control("AddButton", "EnterpriseSales")).Click();

            ThinkTime(3);

            driver.SwitchTo().DefaultContent();
            SwitchToFrame(driver, "InlineDialog_Iframe");
            ThinkTime(3);

            WaitUntil(driver, Control("SelectUserPermission", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("SelectUserPermission", "EnterpriseSales"));
            ThinkTime(3);
            Element(driver, Control("SelectUserPermission", "EnterpriseSales")).Click();
            ThinkTime(3);

            MoveToElement(driver, Control("ToogleAllPermission", "EnterpriseSales"));
            Element(driver, Control("ToogleAllPermission", "EnterpriseSales")).Click();
            //ActionsDoubleClick(driver, Control("ToogleAllPermission", "EnterpriseSales"));

            ThinkTime(3);

            WaitUntil(driver, Control("AppendCheckbox", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("AppendCheckbox", "EnterpriseSales"));
            ThinkTime(3);
            Element(driver, Control("AppendCheckbox", "EnterpriseSales")).Click();
            ThinkTime(3);
            WaitUntil(driver, Control("ShareCheckbox", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("ShareCheckbox", "EnterpriseSales"));
            ThinkTime(3);
            Element(driver, Control("ShareCheckbox", "EnterpriseSales")).Click();
            ThinkTime(3);
            MoveToElement(driver, Control("ShareButton", "EnterpriseSales"));
            ThinkTime(3);
            Element(driver, Control("ShareButton", "EnterpriseSales")).Click();
            ThinkTime(10);

        }

        //Method to Share Record to anothor user if its in 3dots.
        public void ShareRecord3Dots(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string User)
        {
            ThinkTime(15);

            if (Elements(driver, Control("ActivityShareButton", "EnterpriseSales")) != 0)
            {
                MoveToElement(driver, Control("ActivityShareButton", "EnterpriseSales"));
                Element(driver, Control("ActivityShareButton", "EnterpriseSales")).Click();
                ThinkTime(10);
            }
            else
            {
                ThinkTime(15);
                //MoveToElement(driver, Control("Threedots", "EnterpriseSales"));
                //Element(driver, Control("Threedots", "EnterpriseSales")).Click();
                MoveToElement(driver, Control("Moreheadernew", "Opportunity"));
                Element(driver, Control("Moreheadernew", "Opportunity")).Click();
                //    ThinkTime(3);
                ThinkTime(2);
                //Element(driver, Control("Threedots", "EnterpriseSales")).SendKeys(Keys.Tab);
                //Element(driver, Control("Threedots", "EnterpriseSales")).SendKeys(Keys.Enter);
                //ThinkTime(5);
                //if (Elements(driver, Control("ActivityShareButton", "EnterpriseSales")) == 0)
                //{
                //    ThinkTime(3);
                //WaitUntil(driver, Control("ActivityShareButton", "EnterpriseSales"), 30);
                MoveToElement(driver, Control("ActivityShareButton", "EnterpriseSales"));
                Element(driver, Control("ActivityShareButton", "EnterpriseSales")).Click();
                ThinkTime(10);

            }
            //else
            //{
            //    MoveToElement(driver, Control("Moreheadernew", "Opportunity"));
            //    Element(driver, Control("Moreheadernew", "Opportunity")).Click();
            //    ThinkTime(3);
            //    WaitUntil(driver, Control("ActivityShareButton", "EnterpriseSales"), 30);
            //    MoveToElement(driver, Control("ActivityShareButton", "EnterpriseSales"));
            //    ThinkTime(3);
            //    Element(driver, Control("ActivityShareButton", "EnterpriseSales")).Click();
            //    ThinkTime(10);
            //}


            ThinkTime(10);

            SwitchToFrame(driver, "InlineDialog_Iframe");
            ThinkTime(3);
            WaitUntil(driver, Control("SelectAllUsers", "EnterpriseSales"), 30);
            if (Elements(driver, Control("SelectUserPermission", "EnterpriseSales")) > 0)
            {


                WaitUntil(driver, Control("SelectAllUsers", "EnterpriseSales"), 30);
                MoveToElement(driver, Control("SelectAllUsers", "EnterpriseSales"));
                ThinkTime(3);
                Element(driver, Control("SelectAllUsers", "EnterpriseSales")).Click();
                ThinkTime(5);
                WaitUntil(driver, Control("RemoveSelectedUser", "EnterpriseSales"), 30);
                MoveToElement(driver, Control("RemoveSelectedUser", "EnterpriseSales"));
                Element(driver, Control("RemoveSelectedUser", "EnterpriseSales")).Click();
                //ThinkTime(5);
                //AlertHandling(driver, "Accept");
            }


            WaitUntil(driver, Control("AddUserTeam", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("AddUserTeam", "EnterpriseSales"));
            ThinkTime(3);
            Element(driver, Control("AddUserTeam", "EnterpriseSales")).Click();

            ThinkTime(3);

            driver.SwitchTo().DefaultContent();
            SwitchToFrame(driver, "InlineDialog1_Iframe");
            ThinkTime(3);
            WaitUntil(driver, Control("SearchUserTeamInput", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("SearchUserTeamInput", "EnterpriseSales"));
            Element(driver, Control("SearchUserTeamInput", "EnterpriseSales")).Click();
            ThinkTime(3);
            Element(driver, Control("SearchUserTeamInput", "EnterpriseSales")).SendKeys(User);
            ThinkTime(3);
            Element(driver, Control("SearchUserTeamButton", "EnterpriseSales")).Click();

            ThinkTime(3);

            WaitUntil(driver, Control("SeleckAllRecord", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("SeleckAllRecord", "EnterpriseSales"));
            ThinkTime(3);
            Element(driver, Control("SeleckAllRecord", "EnterpriseSales")).Click();

            ThinkTime(3);

            MoveToElement(driver, Control("SelectButton", "EnterpriseSales"));
            ThinkTime(3);
            Element(driver, Control("SelectButton", "EnterpriseSales")).Click();
            ThinkTime(3);
            MoveToElement(driver, Control("AddButton", "EnterpriseSales"));
            ThinkTime(3);
            Element(driver, Control("AddButton", "EnterpriseSales")).Click();
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "User Added", "User Added");
            ThinkTime(3);

            driver.SwitchTo().DefaultContent();
            SwitchToFrame(driver, "InlineDialog_Iframe");
            ThinkTime(3);



            WaitUntil(driver, Control("SelectUserPermission", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("SelectUserPermission", "EnterpriseSales"));
            ThinkTime(3);
            Element(driver, Control("SelectUserPermission", "EnterpriseSales")).Click();
            ThinkTime(3);

            MoveToElement(driver, Control("ToogleAllPermission", "EnterpriseSales"));
            Element(driver, Control("ToogleAllPermission", "EnterpriseSales")).Click();
            //ActionsDoubleClick(driver, Control("ToogleAllPermission", "EnterpriseSales"));

            ThinkTime(3);

            WaitUntil(driver, Control("AppendCheckbox", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("AppendCheckbox", "EnterpriseSales"));
            ThinkTime(3);
            Element(driver, Control("AppendCheckbox", "EnterpriseSales")).Click();
            ThinkTime(3);
            WaitUntil(driver, Control("ShareCheckbox", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("ShareCheckbox", "EnterpriseSales"));
            ThinkTime(3);
            //Element(driver, Control("ShareCheckbox", "EnterpriseSales")).Click();
            ThinkTime(3);
            MoveToElement(driver, Control("ShareButton", "EnterpriseSales"));
            ThinkTime(3);
            Element(driver, Control("ShareButton", "EnterpriseSales")).Click();
            ThinkTime(10);
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Shared Contact to " + User, "Shared Contact to " + User);

        }


        //Method to Share Record to anothor user.
        public void ShareOpportunityRecord(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string User)
        {



            ThinkTime(10);
            if (Elements(driver, Control("ActivityShareButton", "EnterpriseSales")) == 0)
            {

                MoveToElement(driver, Control("MoreHeaderOptions", "EnterpriseSales"));
                Element(driver, Control("MoreHeaderOptions", "EnterpriseSales")).Click();
                WaitUntil(driver, Control("ActivityShareButton", "EnterpriseSales"), 60);
                MoveToElement(driver, Control("ActivityShareButton", "EnterpriseSales"));
                Element(driver, Control("ActivityShareButton", "EnterpriseSales")).Click();
            }

            else
            {
                WaitUntil(driver, Control("ActivityShareButton", "EnterpriseSales"), 30);
                MoveToElement(driver, Control("ActivityShareButton", "EnterpriseSales"));
                Element(driver, Control("ActivityShareButton", "EnterpriseSales")).Click();

            }


            ThinkTime(10);

            SwitchToFrame(driver, "InlineDialog_Iframe");
            ThinkTime(5);
            WaitUntil(driver, Control("AddUserTeam", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("AddUserTeam", "EnterpriseSales"));
            Element(driver, Control("AddUserTeam", "EnterpriseSales")).Click();

            ThinkTime(3);

            driver.SwitchTo().DefaultContent();
            SwitchToFrame(driver, "InlineDialog1_Iframe");

            WaitUntil(driver, Control("SearchUserTeamInput", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("SearchUserTeamInput", "EnterpriseSales"));
            Element(driver, Control("SearchUserTeamInput", "EnterpriseSales")).Click();
            Element(driver, Control("SearchUserTeamInput", "EnterpriseSales")).SendKeys(User);

            Element(driver, Control("SearchUserTeamButton", "EnterpriseSales")).Click();

            ThinkTime(3);

            WaitUntil(driver, Control("SeleckAllRecord", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("SeleckAllRecord", "EnterpriseSales"));
            Element(driver, Control("SeleckAllRecord", "EnterpriseSales")).Click();

            ThinkTime(3);

            MoveToElement(driver, Control("SelectButton", "EnterpriseSales"));
            Element(driver, Control("SelectButton", "EnterpriseSales")).Click();

            MoveToElement(driver, Control("AddButton", "EnterpriseSales"));
            Element(driver, Control("AddButton", "EnterpriseSales")).Click();

            ThinkTime(3);

            driver.SwitchTo().DefaultContent();
            SwitchToFrame(driver, "InlineDialog_Iframe");


            WaitUntil(driver, Control("SelectUserPermission", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("SelectUserPermission", "EnterpriseSales"));
            Element(driver, Control("SelectUserPermission", "EnterpriseSales")).Click();


            MoveToElement(driver, Control("ToogleAllPermission", "EnterpriseSales"));
            Element(driver, Control("ToogleAllPermission", "EnterpriseSales")).Click();
            //ActionsDoubleClick(driver, Control("ToogleAllPermission", "EnterpriseSales"));

            ThinkTime(3);

            WaitUntil(driver, Control("AppendCheckbox", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("AppendCheckbox", "EnterpriseSales"));
            Element(driver, Control("AppendCheckbox", "EnterpriseSales")).Click();

            WaitUntil(driver, Control("ShareCheckbox", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("ShareCheckbox", "EnterpriseSales"));
            Element(driver, Control("ShareCheckbox", "EnterpriseSales")).Click();

            MoveToElement(driver, Control("ShareButton", "EnterpriseSales"));
            Element(driver, Control("ShareButton", "EnterpriseSales")).Click();

        }




        //Method to verify Account editable for enterprise sales user.

        public void VerifyAccountEditable(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string ParentAccountName)
        {
            ThinkTime(3);

            scrollDownContactPage(driver, testInReport, testName, testDataIteration);

            ThinkTime(3);

            if (Elements(driver, Control("NewParentAccountLabel", "EnterpriseSales")) > 0)
            {

                WaitUntil(driver, Control("NewParentAccountLabel", "EnterpriseSales"), 30);
                MoveToElement(driver, Control("NewParentAccountLabel", "EnterpriseSales"));
                Element(driver, Control("NewParentAccountDeleteButton", "EnterpriseSales")).Click();

                WaitUntil(driver, Control("ParentAccountInput", "EnterpriseSales"), 30);
                MoveToElement(driver, Control("ParentAccountInput", "EnterpriseSales"));
                Element(driver, Control("ParentAccountInput", "EnterpriseSales")).SendKeys(ParentAccountName);

                WaitUntil(driver, Control("ParentAccountDropdaownSelect", "EnterpriseSales"), 30);
                MoveToElement(driver, Control("ParentAccountDropdaownSelect", "EnterpriseSales"));
                Element(driver, Control("ParentAccountDropdaownSelect", "EnterpriseSales")).Click();
            }

            else
            {
                WaitUntil(driver, Control("ParentAccountInput", "EnterpriseSales"), 30);
                MoveToElement(driver, Control("ParentAccountInput", "EnterpriseSales"));
                Element(driver, Control("ParentAccountInput", "EnterpriseSales")).SendKeys(ParentAccountName);

                WaitUntil(driver, Control("ParentAccountDropdaownSelect", "EnterpriseSales"), 30);
                MoveToElement(driver, Control("ParentAccountDropdaownSelect", "EnterpriseSales"));
                Element(driver, Control("ParentAccountDropdaownSelect", "EnterpriseSales")).Click();
            }


            //ThinkTime(3);
            //WaitUntil(driver, Control("NewParentAccountNameInput", "EnterpriseSales"), 30);
            //MoveToElement(driver, Control("NewParentAccountNameInput", "EnterpriseSales"));
            //Element(driver, Control("NewParentAccountNameInput", "EnterpriseSales")).SendKeys(ParentAccountName);

            //ThinkTime(3);
            //WaitUntil(driver, Control("OpportunityContactSave", "EnterpriseSales"), 30);
            //MoveToElement(driver, Control("OpportunityContactSave", "EnterpriseSales"));
            //Element(driver, Control("OpportunityContactSave", "EnterpriseSales")).Click();

            ThinkTime(3);

            saveFooter(driver, testInReport, testName, testDataIteration);

            string NewAccount = Element(driver, Control("NewParentAccountLabel", "EnterpriseSales")).GetAttribute("title");

            if (NewAccount == ParentAccountName)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Parent Account Field is editable", "Account Edit Verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Account field is not updated", "Account edit Verificaton");
                Assert.Fail("Account edit verification failed");
            }


        }


        public void VerifyDeletebuttononheader(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {
            ThinkTime(10);

            if (Elements(driver, Control("VerifyActivityDeleteButton", "EnterpriseSales")) == 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Delete button is unavailable", "Delete permission Verification");


            }
            else
            {
                Assert.Fail("User has permission to delete other contact details");
            }

        }

        public void VerifyDeleteaccessdenied(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {
            ThinkTime(3);

            WaitUntil(driver, Control("VerifyActivityDeleteButton", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("VerifyActivityDeleteButton", "EnterpriseSales"));
            ElementHighlight(driver, Control("VerifyActivityDeleteButton", "EnterpriseSales"));
            Element(driver, Control("VerifyActivityDeleteButton", "EnterpriseSales")).Click();
            ThinkTime(10);
            if (Elements(driver, Control("Deleteaccessdeny", "EnterpriseSales")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Delete access is denied", "Delete permission Verification");
                Element(driver, Control("Cancelbutton", "EnterpriseSales")).Click();


            }
            else
            {
                Assert.Fail("User has permission to delete other contact details");
            }
        }
        public void Deletewindowerror(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {
            ThinkTime(2);
            if (Elements(driver, Control("Deleteokerror", "EnterpriseSales")) > 0)
            {
                ActionsClick(driver, Control("Deleteokerror", "EnterpriseSales"));
            }
        }
        //method to navigate to enterpise sales ribbon activities.

        public void NavigateToRibbonButtonActivities(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string RibbonButton)
        {
            ThinkTime(10);

            WaitUntil(driver, Control("ActivityRibbonButton", RibbonButton, "EnterpriseSales"), 30);
            Element(driver, Control("ActivityRibbonButton", RibbonButton, "EnterpriseSales")).Click();
            //MoveToElement(driver, Control("ActivityRibbonButton", RibbonButton, "EnterpriseSales"));
            //ElementHighlight(driver, Control("ActivityRibbonButton", RibbonButton, "EnterpriseSales"));
            //ActionsClick(driver, Control("ActivityRibbonButton", RibbonButton, "EnterpriseSales"));
            ThinkTime(3);
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
        }

        public void OpenFirstActiveContact(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {
            ThinkTime(3);

            WaitUntil(driver, Control("ActiveFirstContact", "Contacts"), 30);
            MoveToElement(driver, Control("ActiveFirstContact", "Contacts"));
            // Element(driver, Control("ActiveFirstContact", "Contacts")).Click();
            ActionsDoubleClick(driver, Control("ActiveFirstContact", "Contacts"));

            ThinkTime(25);
        }



        public void NewPhoneCallActivity(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {
            //Subject field

            string Date = DateTime.Today.ToString("dd-MM-yyyy");
            DateTime Now = DateTime.Now;
            string Time = Date + Convert.ToString(Now.Hour) + Convert.ToString(Now.Millisecond);
            string NewSubject = "PhoneCallActivity" + Time;

            DateTime dateTime1 = DateTime.UtcNow.Date;
            DateTime dateTime2 = dateTime1.AddDays(1);



            ThinkTime(3);
            WaitUntil(driver, Control("PhoneCallSubject", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("PhoneCallSubject", "EnterpriseSales"));
            ThinkTime(3);
            Element(driver, Control("PhoneCallSubject", "EnterpriseSales")).SendKeys(Keys.Control + "a");
            Element(driver, Control("PhoneCallSubject", "EnterpriseSales")).SendKeys(Keys.Delete);
            ThinkTime(3);
            Element(driver, Control("PhoneCallSubject", "EnterpriseSales")).SendKeys(NewSubject);

            //Call To field
            ThinkTime(3);
            WaitUntil(driver, Control("PhoneCallCallTo", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("PhoneCallCallTo", "EnterpriseSales"));
            Element(driver, Control("PhoneCallCallTo", "EnterpriseSales")).SendKeys(Keys.Control + "a");
            Element(driver, Control("PhoneCallCallTo", "EnterpriseSales")).SendKeys(Keys.Delete);
            ThinkTime(3);
            Element(driver, Control("PhoneCallCallTo", "EnterpriseSales")).SendKeys("CRM Activity Test Account");

            ThinkTime(3);
            WaitUntil(driver, Control("SelectDropDownToField", "ITSales"), 30);
            MoveToElement(driver, Control("SelectDropDownToField", "ITSales"));
            ThinkTime(3);
            Element(driver, Control("SelectDropDownToField", "ITSales")).Click();
            ThinkTime(3);
            Element(driver, Control("ClickLabelCallTo", "EnterpriseSales")).Click();

            ThinkTime(3);

            WaitUntil(driver, Control("Dueinputfield", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("Dueinputfield", "EnterpriseSales"));

            Element(driver, Control("Dueinputfield", "EnterpriseSales")).SendKeys(dateTime2.ToString("d"));
            //ThinkTime(3);
            //WaitUntil(driver, Control("StartButtonYear", "BookATour"), 30);
            //MoveToElement(driver, Control("StartButtonYear", "BookATour"));
            //ThinkTime(3);
            //Element(driver, Control("StartButtonYear", "BookATour")).Click();

            //ThinkTime(3);

            //WaitUntil(driver, Control("StartButtonMonth", "Dec", "BookATour"), 30);
            //MoveToElement(driver, Control("StartButtonMonth", "Dec", "BookATour"));
            //ThinkTime(3);
            //Element(driver, Control("StartButtonMonth", "Dec", "BookATour")).Click();

            //ThinkTime(3);
            ////WaitUntil(driver, Control("InputDueDate", "EnterpriseSales"), 30);
            ////MoveToElement(driver, Control("InputDueDate", "EnterpriseSales"));
            ////Element(driver, Control("InputDueDate", "EnterpriseSales")).Click();

            //MoveToElement(driver, Control("PickDueDate", "EnterpriseSales"));
            //ThinkTime(3);
            //Element(driver, Control("PickDueDate", "EnterpriseSales")).Click();
            //ThinkTime(3);
            if (Elements(driver, Control("regardingfield", "phoneCall")) > 0)
            {
                MoveToElement(driver, Control("regardingfield", "phoneCall"));
                ThinkTime(3);
                Element(driver, Control("regardingfield", "phoneCall")).Click();
                ThinkTime(3);
                MoveToElement(driver, Control("Languagedropdown", "EnterpriseSales"));
                Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();
                ThinkTime(3);

            }

            saveFooter(driver, testInReport, testName, testDataIteration);
        }



        //method to Create  new activity Phone call

        public string CreateNewPhoneCallActivity(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string Time, string Subject, string Account)
        {
            //Subject field
            string NewSubject = Subject + Time;


            ThinkTime(3);
            WaitUntil(driver, Control("PhoneCallSubject", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("PhoneCallSubject", "EnterpriseSales"));
            ThinkTime(3);
            Element(driver, Control("PhoneCallSubject", "EnterpriseSales")).SendKeys(Keys.Control + "a");
            Element(driver, Control("PhoneCallSubject", "EnterpriseSales")).SendKeys(Keys.Delete);
            ThinkTime(3);
            Element(driver, Control("PhoneCallSubject", "EnterpriseSales")).SendKeys(NewSubject);

            //Call To field
            ThinkTime(3);
            WaitUntil(driver, Control("PhoneCallCallTo", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("PhoneCallCallTo", "EnterpriseSales"));
            ThinkTime(3);
            Element(driver, Control("PhoneCallCallTo", "EnterpriseSales")).SendKeys(Account);

            ThinkTime(3);
            WaitUntil(driver, Control("SelectDropDownToField", "ITSales"), 30);
            MoveToElement(driver, Control("SelectDropDownToField", "ITSales"));
            ThinkTime(3);
            Element(driver, Control("SelectDropDownToField", "ITSales")).Click();
            ThinkTime(3);
            Element(driver, Control("ClickLabelCallTo", "EnterpriseSales")).Click();

            ThinkTime(3);

            WaitUntil(driver, Control("Dueinputfield", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("Dueinputfield", "EnterpriseSales"));
            ThinkTime(3);
            Element(driver, Control("Dueinputfield", "EnterpriseSales")).Click();
            ThinkTime(3);
            WaitUntil(driver, Control("StartButtonYear", "BookATour"), 30);
            MoveToElement(driver, Control("StartButtonYear", "BookATour"));
            ThinkTime(3);
            Element(driver, Control("StartButtonYear", "BookATour")).Click();

            ThinkTime(3);

            WaitUntil(driver, Control("StartButtonMonth", "Dec", "BookATour"), 30);
            MoveToElement(driver, Control("StartButtonMonth", "Dec", "BookATour"));
            ThinkTime(3);
            Element(driver, Control("StartButtonMonth", "Dec", "BookATour")).Click();

            ThinkTime(3);
            //WaitUntil(driver, Control("InputDueDate", "EnterpriseSales"), 30);
            //MoveToElement(driver, Control("InputDueDate", "EnterpriseSales"));
            //Element(driver, Control("InputDueDate", "EnterpriseSales")).Click();

            MoveToElement(driver, Control("PickDueDate", "EnterpriseSales"));
            ThinkTime(3);
            Element(driver, Control("PickDueDate", "EnterpriseSales")).Click();
            ThinkTime(3);
            if (Elements(driver, Control("regardingfield", "phoneCall")) > 0)
            {
                MoveToElement(driver, Control("regardingfield", "phoneCall"));
                ThinkTime(3);
                Element(driver, Control("regardingfield", "phoneCall")).Click();
                ThinkTime(3);
                MoveToElement(driver, Control("Languagedropdown", "EnterpriseSales"));
                Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();
                ThinkTime(3);

            }

            saveFooter(driver, testInReport, testName, testDataIteration);

            ThinkTime(3);
            WaitUntil(driver, Control("VerifyNewActivityPhoneCall", NewSubject, "EnterpriseSales"), 30);

            MoveToElement(driver, Control("VerifyNewActivityPhoneCall", NewSubject, "EnterpriseSales"));
            ThinkTime(3);
            ElementHighlight(driver, Control("VerifyNewActivityPhoneCall", NewSubject, "EnterpriseSales"));
            if (Elements(driver, Control("VerifyNewActivityPhoneCall", NewSubject, "EnterpriseSales")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "New Phone call activity created successfully", "New Phone call Activity Verification");

            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "New Phonew call activity verification failed", "New Phone call Activity Verification");
                Assert.Fail("New Phone call Activity Verification failed");
            }

            return NewSubject;
        }

        public string CreateNewPhoneCallActivityEnterpriseSales(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string Time, string Subject, string Account)
        {
            //Subject field
            string NewSubject = Subject + Time;


            ThinkTime(3);
            WaitUntil(driver, Control("PhoneCallSubject", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("PhoneCallSubject", "EnterpriseSales"));
            ThinkTime(3);
            Element(driver, Control("PhoneCallSubject", "EnterpriseSales")).SendKeys(Keys.Control + "a");
            Element(driver, Control("PhoneCallSubject", "EnterpriseSales")).SendKeys(Keys.Delete);
            ThinkTime(3);
            Element(driver, Control("PhoneCallSubject", "EnterpriseSales")).SendKeys(NewSubject);

            //Call To field

            WaitUntil(driver, Control("PhoneCallCallTo", "EnterpriseSales"), 360);
            MoveToElement(driver, Control("PhoneCallCallTo", "EnterpriseSales"));
            ThinkTime(3);
            Element(driver, Control("PhoneCallCallTo", "EnterpriseSales")).Click();
            Element(driver, Control("PhoneCallCallTo", "EnterpriseSales")).SendKeys(Account);


            WaitUntil(driver, Control("AccountDropdownSelect1", Account, "EnterpriseSales"), 360);
            MoveToElement(driver, Control("AccountDropdownSelect1", Account, "EnterpriseSales"));
            ThinkTime(3);
            Element(driver, Control("AccountDropdownSelect1", Account, "EnterpriseSales")).Click();
            ThinkTime(3);
            Element(driver, Control("ClickLabelCallTo", "EnterpriseSales")).Click();

            ThinkTime(3);
            scrollDownOpportunityEnterprise(driver, testInReport, testName, testDataIteration);

            WaitUntil(driver, Control("regardingfield", "phoneCall"), 360);
            if (Elements(driver, Control("regardingfield", "phoneCall")) > 0)
            {
                MoveToElement(driver, Control("regardingfield", "phoneCall"));
                ThinkTime(3);
                Element(driver, Control("regardingfield", "phoneCall")).Click();
                ThinkTime(3);
                MoveToElement(driver, Control("Languagedropdown", "EnterpriseSales"));
                Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();
                ThinkTime(3);

            }

            saveFooter(driver, testInReport, testName, testDataIteration);

            ThinkTime(3);
            WaitUntil(driver, Control("VerifyNewActivityPhoneCall", Subject, "EnterpriseSales"), 360);
            MoveToElement(driver, Control("VerifyNewActivityPhoneCall", Subject, "EnterpriseSales"));
            ThinkTime(3);
            ElementHighlight(driver, Control("VerifyNewActivityPhoneCall", Subject, "EnterpriseSales"));
            if (Elements(driver, Control("VerifyNewActivityPhoneCall", Subject, "EnterpriseSales")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "New Phone call activity created successfully", "New Phone call Activity Verification");

            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "New Phonew call activity verification failed", "New Phone call Activity Verification");
                Assert.Fail("New Phone call Activity Verification failed");
            }

            return NewSubject;
        }
        public void CreateNewAppointment(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string Time, string Subject, string centre)
        {
            //Subject field
            string NewSubject = Subject + Time;

            ThinkTime(3);
            WaitUntil(driver, Control("AppointmentSubject", "Appointment"), 30);
            MoveToElement(driver, Control("AppointmentSubject", "Appointment"));
            Element(driver, Control("AppointmentSubject", "Appointment")).SendKeys(Keys.Control + "a");
            Element(driver, Control("AppointmentSubject", "Appointment")).SendKeys(Keys.Delete);
            Element(driver, Control("AppointmentSubject", "Appointment")).SendKeys(NewSubject);
            ThinkTime(3);
            Element(driver, Control("Appointmentcentre", "Appointment")).SendKeys(Keys.Control + "a");
            Element(driver, Control("Appointmentcentre", "Appointment")).SendKeys(Keys.Delete);
            Element(driver, Control("Appointmentcentre", "Appointment")).SendKeys(centre);
            ThinkTime(5);
            WaitUntil(driver, Control("Languagedropdown", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("Languagedropdown", "EnterpriseSales"));
            ThinkTime(1);
            Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();
            ThinkTime(4);
            ActionsClick(driver, Control("Regardingfield", "Opportunity"));
            ThinkTime(1);
            ActionsClick(driver, Control("Regardingsearch", "Opportunity"));
            ThinkTime(5);
            ActionsClick(driver, Control("Addnewregard", "Opportunity"));
            ThinkTime(7);
            ActionsClick(driver, Control("Regardingaccount", "Opportunity"));
            ThinkTime(5);
            Element(driver, Control("Quickcreateaccount", "Opportunity")).SendKeys(NewSubject + "1");
            ThinkTime(5);
            ActionsClick(driver, Control("Saveregardingaccount", "Opportunity"));
            ThinkTime(5);
            Element(driver, Control("Starttime", "Opportunity")).SendKeys("4:00 AM");

            // Click Save
            // Element(driver, Control("AppointmentSave", "Appointment")).Click();
            saveFooter(driver, testInReport, testName, testDataIteration);
            ThinkTime(5);
            if (Elements(driver, Control("SchedulingAlerts", "Appointment")) > 0)
            {
                Element(driver, Control("IgnoreandSave", "Appointment")).Click();
                ThinkTime(5);
            }
        }

        //Method to navigate to related tab entities.

        public void NavigateToRelatedTabEntities(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string RelatedTabEntity)
        {
            WaitUntil(driver, Control("RelatedTab", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("RelatedTab", "EnterpriseSales"));
            ThinkTime(3);
            Element(driver, Control("RelatedTab", "EnterpriseSales")).Click();
            ThinkTime(3);
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Related ", "");

            WaitUntil(driver, Control("RelatedTabEntities", RelatedTabEntity, "EnterpriseSales"), 30);
            MoveToElement(driver, Control("RelatedTabEntities", RelatedTabEntity, "EnterpriseSales"));
            ThinkTime(3);
            Element(driver, Control("RelatedTabEntities", RelatedTabEntity, "EnterpriseSales")).Click();

        }

        public void NavigateToRelatedTabEntitiesLead(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string RelatedTabEntity)
        {
            WaitUntil(driver, Control("RelatedTab", "EnterpriseSales"), 100);
            MoveToElement(driver, Control("RelatedTab", "EnterpriseSales"));
            ThinkTime(3);
            Element(driver, Control("RelatedTab", "EnterpriseSales")).Click();
            ThinkTime(3);
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Related ", "");

            WaitUntil(driver, Control("RelatedTabEntities", RelatedTabEntity, "Opportunity"), 30);
            MoveToElement(driver, Control("RelatedTabEntities", RelatedTabEntity, "Opportunity"));
            ThinkTime(3);
            Element(driver, Control("RelatedTabEntities", RelatedTabEntity, "Opportunity")).Click();

        }
        public void VerifyRelatedTabDoesNotContains(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string RelatedTabEntity)
        {
            WaitUntil(driver, Control("RelatedTab", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("RelatedTab", "EnterpriseSales"));
            Element(driver, Control("RelatedTab", "EnterpriseSales")).Click();
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Related Tag Clicked", "");
            if (Elements(driver, Control("RelatedTabEntities", RelatedTabEntity, "EnterpriseSales")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", " Stakeholders Tab is not hiddden", "Stakeholders Tab Verification");
                Assert.Fail(" Stakeholders Tab is not hiddden");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", " Stakeholders Tab is hidden", "Stakeholders Tab Verification");
            }

        }

        public void VerifyOpportunityBrokerAssociationView(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {
            ThinkTime(3);
            ElementHighlight(driver, Control("OpportunityBrokerTab", "Opportunity"));
            if (Elements(driver, Control("OpportunityBrokerTab", "Opportunity")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", " Opportunity Broker Associated view is visible", "Opportunity Broker Associated view verification");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", " Opportunity Broker Associated view is not visible", "Opportunity Broker Associated view verification");
                Assert.Fail(" Opportunity Broker Associated view  is not available");
            }
        }


        //Method to verify  Delete Button in Communication Profole.

        public void VerifyDeleteButtonCommunicationProfile(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {
            if (Elements(driver, Control("DeleteButtonComunicationProfile", "EnterpriseSales")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Delete button is visible", "Delete button verification");
                Assert.Fail("Delete Button Verification failed");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Delete button is not visible", "Delete button verification");

            }


        }


        //method to add new contact and account in Oppotunity page.
        public string AddNewContactAccountinOpportunity(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string Topic, string TimeInSec, string ContactName, string Language)
        {

            string Date = DateTime.Today.ToString("dd-MM-yyyy");
            DateTime Now = DateTime.Now;
            string Time = Date + Convert.ToString(Now.Hour) + Convert.ToString(Now.Millisecond);
            string NewContactName = ContactName + Time;

            ThinkTime(3);

            WaitUntil(driver, Control("NewOpportunityTopic", "Contacts"), 180);
            MoveToElement(driver, Control("NewOpportunityTopic", "Contacts"));
            Element(driver, Control("NewOpportunityTopic", "Contacts")).SendKeys(Keys.Control + "a");
            Element(driver, Control("NewOpportunityTopic", "Contacts")).SendKeys(Keys.Delete);

            ThinkTime(3);

            Element(driver, Control("NewOpportunityTopic", "Contacts")).SendKeys(Topic);
            Element(driver, Control("NewOpportunityTopicClick", "Contacts")).Click();

            WaitUntil(driver, Control("NewOpportunityContactInput", "Contacts"), 180);
            MoveToElement(driver, Control("NewOpportunityContactInput", "Contacts"));
            Element(driver, Control("NewOpportunityContactSearch", "Contacts")).Click();
            WaitUntil(driver, Control("NewContactButton", "Contacts"), 180);
            MoveToElement(driver, Control("NewContactButton", "Contacts"));
            Element(driver, Control("NewContactButton", "Contacts")).Click();

            WaitUntil(driver, Control("NewContactLName", "Contacts"), 180);
            MoveToElement(driver, Control("NewContactLName", "Contacts"));
            Element(driver, Control("NewContactLName", "Contacts")).Click();
            Element(driver, Control("NewContactLName", "Contacts")).SendKeys(NewContactName);

            ThinkTime(3);

            WaitUntil(driver, Control("NewContactlanguage", "Contacts"), 180);
            MoveToElement(driver, Control("NewContactlanguage", "Contacts"));
            Element(driver, Control("NewContactlanguage", "Contacts")).Click();
            Element(driver, Control("NewContactlanguage", "Contacts")).SendKeys(Language);

            ThinkTime(3);

            WaitUntil(driver, Control("NewContactlanguageSelect", "Contacts"), 180);
            MoveToElement(driver, Control("NewContactlanguageSelect", "Contacts"));
            Element(driver, Control("NewContactlanguageSelect", "Contacts")).Click();

            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Contact added successfully", "Contact field verification");
            ThinkTime(4);
            WaitUntil(driver, Control("SaveContactButton", "Generic"), 30);
            MoveToElement(driver, Control("SaveContactButton", "Generic"));
            Element(driver, Control("SaveContactButton", "Generic")).Click();

            ThinkTime(2);

            scrollDownContactPage(driver, testInReport, testName, testDataIteration);
            string nullvalue = Element(driver, Control("NewOpportunityCompany", "Contacts")).GetAttribute("defaultValue");

            if (nullvalue == "---")
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Account or Company Field is Not Autopopulated", "Account or Company field verification");

            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Account or Company Field is Autopopulated", "Account or Company field verification");
                Assert.Fail("Account/Company  is Verification Failed");
            }

            saveFooter(driver, testInReport, testName, testDataIteration);
            return NewContactName;
        }

        public void Addnewaccountopportunity(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string TimeInSec, string ContactName)
        {

            string NewContactName = ContactName + TimeInSec;
            ThinkTime(3);
            WaitUntil(driver, Control("VerifyCompanyField", "Opportunity"), 30);
            MoveToElement(driver, Control("VerifyCompanyField", "Opportunity"));
            ActionsClick(driver, Control("VerifyCompanyField", "Opportunity"));
            ThinkTime(1);
            ActionsClick(driver, Control("Addaccountlookup", "Opportunity"));
            ThinkTime(2);
            ActionsClick(driver, Control("Addnewaccount", "Opportunity"));
            ThinkTime(3);
            Element(driver, Control("Accountnamefield", "Opportunity")).SendKeys(NewContactName);
            ThinkTime(1);
            ActionsClick(driver, Control("Addaccountsavebutton", "Opportunity"));
            ThinkTime(1);
            saveFooter(driver, testInReport, testName, testDataIteration);


        }

        //method to Add new oppotunity and verify opportunity not Autopopulated in sales user.
        public void AddAndVerifyContactInOpportunitySales(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string Time, string Lname, string Language)
        {

            string NewLname = Lname + Time;

            ThinkTime(7);
            //if (Elements(driver, Control("HandleScriptError", "Opportunity")) > 0)
            //{
            //    Element(driver, Control("Scripterrorhandle", "Opportunity")).Click();
            //}
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);

            WaitUntil(driver, Control("OpportunityContactInput", "Opportunity"), 30);
            MoveToElement(driver, Control("OpportunityContactInput", "Opportunity"));
            Element(driver, Control("OpportunityContactSearch", "Opportunity")).Click();

            ThinkTime(3);
            Element(driver, Control("NewContact", "Opportunity")).Click();

            WaitUntil(driver, Control("NewContactLname", "Opportunity"), 30);
            MoveToElement(driver, Control("NewContactLname", "Opportunity"));
            Element(driver, Control("NewContactLname", "Opportunity")).Click();
            Element(driver, Control("NewContactLname", "Opportunity")).SendKeys(NewLname);

            WaitUntil(driver, Control("NewLanguageName", "Opportunity"), 30);
            MoveToElement(driver, Control("NewLanguageName", "Opportunity"));
            Element(driver, Control("NewLanguageName", "Opportunity")).Click();
            Element(driver, Control("NewLanguageName", "Opportunity")).SendKeys(Language);

            WaitUntil(driver, Control("NewLanguageDropdown", "Opportunity"), 30);
            MoveToElement(driver, Control("NewLanguageDropdown", "Opportunity"));
            Element(driver, Control("NewLanguageDropdown", "Opportunity")).Click();

            ThinkTime(3);

            WaitUntil(driver, Control("SaveContactSales", "Opportunity"), 30);
            MoveToElement(driver, Control("SaveContactSales", "Opportunity"));
            Element(driver, Control("SaveContactSales", "Opportunity")).Click();

            ThinkTime(10);
            HandleScriptError(driver, testInReport, testName, testDataIteration);
            ThinkTime(3);
            HandleScriptError(driver, testInReport, testName, testDataIteration);
            ThinkTime(3);
            HandleScriptError(driver, testInReport, testName, testDataIteration);
            ThinkTime(3);

            WaitUntil(driver, Control("VerifyCompanyField", "Opportunity"), 30);
            MoveToElement(driver, Control("VerifyCompanyField", "Opportunity"));
            ElementHighlight(driver, Control("VerifyCompanyField", "Opportunity"));

            if (Elements(driver, Control("VerifyCompanyField", "Opportunity")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Account or Company Field is Not Autopopulated", "Account or Company field verification");

            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Account or Company Field is Autopopulated", "Account or Company field verification");
                Assert.Fail("Account/Company  is Verification Failed");
            }

        }





        //Method to handle discard Changes new opportunity
        public void DiscardChanges(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {
            try
            {

                ThinkTime(5);
                MoveToElement(driver, Control("SavePopUp", "Contacts"));
                if (Elements(driver, Control("SavePopUp", "Contacts")) > 0)
                {

                    WaitUntil(driver, Control("Discardbutton", "Opportunity"), 50);
                    MoveToElement(driver, Control("Discardbutton", "Opportunity"));
                    Element(driver, Control("Discardbutton", "Opportunity")).Click();

                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Discard changes PopUp  Handled", "PopUp handling");

                }
                else
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Discard changes PopUp is not visible", "PopUp handling");
                    //Assert.Fail("PopUp Handling Failed ");
                }
            }
            catch (Exception E)
            {

            }
        }

        //method to get System Time in seconds.
        public string GetSystemTimeInSec(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {
            DateTime Now = DateTime.Now;
            string Time = Convert.ToString(Now.Second);
            return Time;
        }
        public string GetSystemTimeInSecnew(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {
            DateTime Now = DateTime.Now;
            string Time = Convert.ToString(Now.Hour) + Convert.ToString(Now.Millisecond);
            return Time;
        }


        //Verfiy Color of vertical slots
        public void VerfiyColorCenter(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {
            driver.SwitchTo().DefaultContent();
            string parentWindowHandle = driver.CurrentWindowHandle;
            WindowHandling(driver);
            WindowHandling(driver);
            driver.Manage().Window.Maximize();

            ThinkTime(4);

            WaitUntil(driver, Control("Today", "BookATour"), 180);
            MoveToElement(driver, Control("Today", "BookATour"));
            Element(driver, Control("Today", "BookATour")).Click();

            ThinkTime(4);

            WaitUntil(driver, Control("SelectCentreDropdown", "Opportunity"), 180);
            MoveToElement(driver, Control("SelectCentreDropdown", "Opportunity"));
            Element(driver, Control("SelectCentreDropdown", "Opportunity")).Click();


            for (int i = 0; i <= 3;)
            {
                string j = i.ToString();
                Element(driver, Control("SlotColor", j, "BookATour")).Click();
                if (Elements(driver, Control("SlotColor", "BookATour")) > 0)
                {

                    switch (i)
                    {
                        case 0:

                            WaitUntil(driver, Control("SlotColor", "BookATour"), 180);
                            MoveToElement(driver, Control("SlotColor", "BookATour"));
                            String color = Element(driver, Control("SlotColor", "BookATour")).GetCssValue("background-color");
                            ConvertColorofSlot1(driver, testInReport, testDataIteration, testName, color);
                            break;

                        case 1:
                            WaitUntil(driver, Control("SlotColor", "BookATour"), 180);
                            MoveToElement(driver, Control("SlotColor", "BookATour"));
                            String color1 = Element(driver, Control("SlotColor", "BookATour")).GetCssValue("background-color");

                            ConvertColorofSlot2(driver, testInReport, testDataIteration, testName, color1);
                            break;

                        case 2:
                            WaitUntil(driver, Control("SlotColor", "BookATour"), 180);
                            MoveToElement(driver, Control("SlotColor", "BookATour"));
                            String color2 = Element(driver, Control("SlotColor", "BookATour")).GetCssValue("background-color");

                            ConvertColorofSlot2(driver, testInReport, testDataIteration, testName, color2);
                            break;
                    }

                }
            }
        }


        public void VerifyRedBlockforAbsentASM(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {
            driver.SwitchTo().DefaultContent();
            string parentWindowHandle = driver.CurrentWindowHandle;
            WindowHandling(driver);
            string parentWindowHandle1 = driver.CurrentWindowHandle;
            WindowHandling(driver);
            driver.Manage().Window.Maximize();

            ThinkTime(4);


            WaitUntil(driver, Control("RedBlock", "BookATour"), 180);
            MoveToElement(driver, Control("RedBlock", "BookATour"));
            String color = Element(driver, Control("RedBlock", "BookATour")).GetCssValue("background-color");
            ConvertColorofRedBlock(driver, testInReport, testDataIteration, testName, color);

        }

        public void Verifytimezoneuserandcentre(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {
            ThinkTime(3);
            ScrolldownTourpage(driver, testInReport, testDataIteration, testName);
            ThinkTime(3);

            // Get User start and end time from tour page
            string getuserstarttime1 = Element(driver, Control("Touruserstarttime", "Opportunity")).GetAttribute("defaultValue");

            string getuserendtime1 = Element(driver, Control("Touruserendtime", "Opportunity")).GetAttribute("defaultValue");


            // Get Centre start and end time from tour page
            ScrolldownTourpage(driver, testInReport, testDataIteration, testName);
            ThinkTime(3);
            string centrestarttime = Element(driver, Control("Tourcentrestarttime", "Opportunity")).GetAttribute("defaultValue");
            string centreendtime = Element(driver, Control("Tourcentreendtime", "Opportunity")).GetAttribute("defaultValue");

            // Verify whether user time is 7 hours ahead of centre time

            DateTime starttime1 = Convert.ToDateTime(centrestarttime, System.Globalization.CultureInfo.GetCultureInfo("hi-IN").DateTimeFormat);


            //  DateTime starttime1 = DateTime.ParseExact(centrestarttime, "hh:mm tt", System.Globalization.CultureInfo.InvariantCulture);
            DateTime Expectedstarttime = starttime1.AddHours(-1);

            string CentreStarttime = Expectedstarttime.ToString("hh:mm tt");
            string CentreStarttime2 = Expectedstarttime.ToString("h:mm tt");
            DateTime Endtime1 = Convert.ToDateTime(centreendtime, System.Globalization.CultureInfo.GetCultureInfo("hi-IN").DateTimeFormat);
            //DateTime Endtime2 = DateTime.ParseExact(centreendtime, "hh:mm tt", System.Globalization.CultureInfo.InvariantCulture);
            DateTime Expectedendtime = Endtime1.AddHours(-1);
            string CentreEndtime = Expectedendtime.ToString("hh:mm tt");
            string CentreEndtime2 = Expectedendtime.ToString("h:mm tt");

            if (getuserstarttime1 == CentreStarttime && getuserendtime1 == CentreEndtime || getuserstarttime1 == CentreStarttime2 && getuserendtime1 == CentreEndtime2)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Userregiontimezoneverification", "Userregiontimezoneverification");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Userregiontimezoneverification", "Userregiontimezoneverification");

            }
        }

        public void VerifyRedBlockforAbsentASMNew(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {
            string parentWindowHandle = driver.CurrentWindowHandle;
            WindowHandling(driver);
            driver.Manage().Window.Maximize();

            ThinkTime(4);
            //WaitUntil(driver, Control("OutOfOffice", "Generic"), 60);
            //MoveToElement(driver, Control("OutOfOffice", "Generic"));
            //Element(driver, Control("OutOfOffice", "Generic")).Click();
            IWebElement OutOfficeblock;
            Actions action = new Actions(driver);
            OutOfficeblock = driver.FindElement(By.XPath("(//div[@class='dxsc-apt-gradient dxsc-apt-bg dxsc-al1'])[1]"));
            action = new Actions(driver);
            action.ContextClick(OutOfficeblock).Build().Perform();
            ThinkTime(4);
            IWebElement NewAppBtn = driver.FindElement(By.XPath("//span[text()='Out of Office']"));
            if (NewAppBtn.Displayed)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Cannot able to add new appointment if away", "Cannot able to add new appointment if away");

            }
            else
            {
                Assert.Fail("User can able to add new appointment when out of office/Away");
            }
            driver.SwitchTo().Window(parentWindowHandle);
            driver.SwitchTo().DefaultContent();
        }

        public void VerifyNoAgentColor(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {
            driver.SwitchTo().DefaultContent();
            string parentWindowHandle = driver.CurrentWindowHandle;
            WindowHandling(driver);
            driver.Manage().Window.Maximize();

            ThinkTime(4);

            WaitUntil(driver, Control("Today", "BookATour"), 180);
            MoveToElement(driver, Control("Today", "BookATour"));
            Element(driver, Control("Today", "BookATour")).Click();

            WaitUntil(driver, Control("RedBlock", "BookATour"), 180);
            MoveToElement(driver, Control("RedBlock", "BookATour"));
            String color = Element(driver, Control("RedBlock", "BookATour")).GetCssValue("background-color");
            ConvertColorofRedBlock(driver, testInReport, testDataIteration, testName, color);
        }
        //Verify Color of Past date
        public void VerifyColorPastDate(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {

            driver.SwitchTo().DefaultContent();
            string parentWindowHandle = driver.CurrentWindowHandle;
            WindowHandling(driver);
            driver.Manage().Window.Maximize();


            ThinkTime(4);

            WaitUntil(driver, Control("Today", "BookATour"), 180);
            MoveToElement(driver, Control("Today", "BookATour"));
            Element(driver, Control("Today", "BookATour")).Click();

            ThinkTime(3);

            WaitUntil(driver, Control("Backward", "BookATour"), 180);
            MoveToElement(driver, Control("Backward", "BookATour"));
            Element(driver, Control("Backward", "BookATour")).Click();

            ThinkTime(7);

            WaitUntil(driver, Control("PreviousDateColor", "Generic"), 180);
            MoveToElement(driver, Control("PreviousDateColor", "Generic"));
            String color = Element(driver, Control("PreviousDateColor", "Generic")).GetCssValue("background-color");

            ConvertColor(driver, testInReport, testDataIteration, testName, color);

            driver.Close();
            WindowHandling(driver, parentWindowHandle);

        }

        //Verify Book a tour in Past date
        public void VerifyBookTourInPastDate(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {

            ThinkTime(7);
            driver.SwitchTo().DefaultContent();
            SwitchToFrame(driver, "IFRAME_bookavisit");

            ThinkTime(4);

            WaitUntil(driver, Control("TodayButton", "Generic"), 40);
            MoveToElement(driver, Control("TodayButton", "Generic"));
            Element(driver, Control("TodayButton", "Generic")).Click();

            ThinkTime(3);

            WaitUntil(driver, Control("BackwardButton", "Generic"), 40);
            MoveToElement(driver, Control("BackwardButton", "Generic"));
            Element(driver, Control("BackwardButton", "Generic")).Click();

            ThinkTime(2);
            WaitUntil(driver, Control("BackwardButton", "Generic"), 40);
            MoveToElement(driver, Control("BackwardButton", "Generic"));
            Element(driver, Control("BackwardButton", "Generic")).Click();


            WaitUntil(driver, Control("FirstSlot", "Generic"), 40);
            MoveToElement(driver, Control("FirstSlot", "Generic"));
            ElementHighlight(driver, Control("FirstSlot", "Generic"));

            ThinkTime(3);

            Actions action = new Actions(driver);
            IWebElement eleSlot1 = Element(driver, Control("FirstSlot", "Generic"));
            action.ContextClick(eleSlot1).Build().Perform();

            ThinkTime(3);

            WaitUntil(driver, Control("SelectMouseOption", "Generic"), 40);
            MoveToElement(driver, Control("SelectMouseOption", "Generic"));
            Element(driver, Control("SelectMouseOption", "Generic")).Click();

            ThinkTime(4);


            WaitUntil(driver, Control("PopUpDailogueBox", "Generic"), 40);
            MoveToElement(driver, Control("PopUpDailogueBox", "Generic"));
            ElementHighlight(driver, Control("PopUpDailogueBox", "Generic"));

            if (Elements(driver, Control("PopUpDailogueBox", "Generic")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "User cannot book a tour in past verified", "verify PopUp");
            }

            else

            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Unable to Verify book a tour in past", "verify PopUp");
                Assert.Fail("popup is not visible");
            }
        }



        //Verify SchedulingTime in Book a tour

        public void VerifySchedulingTime(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {

            driver.SwitchTo().DefaultContent();
            string parentWindowHandle = driver.CurrentWindowHandle;
            WindowHandling(driver);



            ThinkTime(7);
            //driver.SwitchTo().DefaultContent();
            //SwitchToFrame(driver, "IFRAME_bookavisit");

            ThinkTime(4);

            WaitUntil(driver, Control("TodayButton", "Generic"), 40);
            MoveToElement(driver, Control("TodayButton", "Generic"));
            Element(driver, Control("TodayButton", "Generic")).Click();


            WaitUntil(driver, Control("FirstSlot", "Generic"), 40);
            MoveToElement(driver, Control("FirstSlot", "Generic"));
            ElementHighlight(driver, Control("FirstSlot", "Generic"));

            ThinkTime(3);

            Actions action = new Actions(driver);
            IWebElement eleSlot1 = Element(driver, Control("FirstSlot", "Generic"));
            //action.ContextClick(eleSlot1).Build().Perform();

            ThinkTime(3);

            if (Elements(driver, Control("VerifyTime", "Generic")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "verified Default Time 30 min ", "verify Sheduling time");
            }

            //else

            //{
            //    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Unable to verify default time", "verify Sheduling time");
            //    Assert.Fail("popup is not visible");
            //}
            //driver.SwitchTo().DefaultContent();


        }
        //Verify New Button is not availabe for IT SalesManager
        public void HeaderFieldVerification(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(2);



            if (Elements(driver, Control("HeaderVerification", "Accounts")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "New Button is visible", "ITSalesManagerAccount");
                Assert.Fail(" New Button is available");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "New Button Verification", "ITSalesManagerAccount");

            }

        }


        public void HeaderDeleteButtonVerification(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(2);



            if (Elements(driver, Control("DeleteButtonVerification", "Accounts")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Delete Button is visible", "ITSalesManagerAccount");
                Assert.Fail(" Delete Button is available");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Delete Button Verification", "ITSalesManagerAccount");

            }

        }

        public void HeaderFieldVerificationITSales(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string Actionname)
        {
            ThinkTime(2);



            if (Elements(driver, Control("HeaderVerification", Actionname, "Opportunity")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "New Button is visible", "Quotes tab is hidden in Opportunity form");
                Assert.Fail(" New Button is available");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "New Button Verification", "Quotes tab is hidden in Opportunity form");

            }


        }
        public void OpportunityMenus(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string optionname)
        {
            ThinkTime(10);
            Element(driver, Control("OpportunityMenu", optionname, "Opportunity")).Click();

            AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Product line items present", "Product line items is displayed in Opportunity form");

            if (Elements(driver, Control("AddProductOpportunity", "Opportunity")) > 0 && Elements(driver, Control("RefreshproductOpportunity", "Opportunity")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Add Product and refresh options present", "Add Product and Refresh buttons are displayed in Opportunity form");

            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Add Product and refresh options not present", "Add Product and Refresh buttons not displayed in Opportunity form");
                Assert.Fail(" Add Product and Refresh buttons are not available");
            }

        }


        public void OpportunityMenusheader(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string optionname)
        {
            ThinkTime(10);
            ElementHighlight(driver, Control("OpportunityMenu", optionname, "Opportunity"));
            int a = Elements(driver, Control("OpportunityMenu", optionname, "Opportunity"));

            if (a > 0)
            {
                ThinkTime(2);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Opportunity headers available", "Opportunity headers displayed");

            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Opportunity headers not displayed", "Opportunity headers not displayed");
                Assert.Fail("Opportunity headers not displayed");
            }

        }

        public void RibbonExtend(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string optionname)
        {
            //  Element(driver, Control("RibbonExtend", "Opportunity")).Displayed)
            ThinkTime(9);
            ElementHighlight(driver, Control("RibbonExtend", "Opportunity"));
            ActionsClick(driver, Control("RibbonExtend", "Opportunity"));
            MoveToElement(driver, Control("RibbonExtend", "Opportunity"));

            if (Elements(driver, Control("HeaderVerification", optionname, "Opportunity")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "New Button is visible", "Quotes tab is hidden in Opportunity form");
                Assert.Fail(" New Button is available");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "New Button Verification", "Quotes tab is hidden in Opportunity form");

            }
        }

        //Book a tour For a particular centre and slot
        public void VerifyFreeSlotAndBookatour(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {
            WaitUntil(driver, Control("SearchButton", "Generic"), 180);
            MoveToElement(driver, Control("SearchButton", "Generic"));
            Element(driver, Control("SearchButton", "Generic")).Clear();
            Element(driver, Control("SearchButton", "Generic")).SendKeys("TestUser4 Testing - Canada");
            Element(driver, Control("SearchEnter", "Generic")).Click();
            ThinkTime(2);

            SelectingActiveCell(driver, testInReport, testDataIteration, testName);
            SelectanyOpportunitybutton(driver, testInReport, testName, testDataIteration, "Book Tour");
            ThinkTime(2);

            SwitchToFrame(driver, "IFRAME_bookavisit");

            ThinkTime(2);

            WaitUntil(driver, Control("TodayButton", "Generic"), 180);
            MoveToElement(driver, Control("TodayButton", "Generic"));
            Element(driver, Control("TodayButton", "Generic")).Click();

            WaitUntil(driver, Control("ForwardButton", "Generic"), 180);
            MoveToElement(driver, Control("ForwardButton", "Generic"));
            Element(driver, Control("ForwardButton", "Generic")).Click();

            ThinkTime(2);

            WaitUntil(driver, Control("FirstSlot", "Generic"), 180);
            MoveToElement(driver, Control("FirstSlot", "Generic"));
            ElementHighlight(driver, Control("FirstSlot", "Generic"));

            Actions action = new Actions(driver);
            IWebElement eleSlot1 = Element(driver, Control("FirstSlot", "Generic"));
            action.ContextClick(eleSlot1).Build().Perform();

            WaitUntil(driver, Control("SelectMouseOption", "Generic"), 180);
            MoveToElement(driver, Control("SelectMouseOption", "Generic"));
            Element(driver, Control("SelectMouseOption", "Generic")).Click();

            ThinkTime(3);

            driver.SwitchTo().DefaultContent();
            scrollDown(driver, testInReport, testName, testDataIteration);

            ThinkTime(3);

            SwitchToFrame(driver, "IFRAME_bookavisit");

            WaitUntil(driver, Control("AvailableButton", "Generic"), 180);
            MoveToElement(driver, Control("AvailableButton", "Generic"));
            Element(driver, Control("AvailableButton", "Generic")).Click();


        }
        public void ConvertColorofRedBlock(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string c2)
        {

            string c = "rgba(255, 89, 50, 1)";

            if (c == c2)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Expected color verified", "Color verification");

            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Expected color is not met", "Color verification");
                Assert.Fail("colour not matching");

            }


        }
        //Verify color of slot1
        public void ConvertColorofSlot1(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string c2)
        {

            string c = "rgba(255, 244, 188, 1)";

            if (c == c2)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Expected color verified", "Color verification");

            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Expected color is not met", "Color verification");
                Assert.Fail("colour not matching");

            }


        }

        //Verify color of slot2
        public void ConvertColorofSlot2(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string c2)
        {

            string c = "rgba(240, 240, 240, 1)";

            if (c == c2)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Expected color verified", "Color verification");

            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Expected color is not met", "Color verification");
                Assert.Fail("colour not matching");

            }


        }

        //Verify color of slot3
        public void ConvertColorofSlot3(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string c2)
        {

            string c = "rgba(179, 212, 151, 1)";

            if (c == c2)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Expected color verified", "Color verification");

            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Expected color is not met", "Color verification");
                Assert.Fail("colour not matching");

            }


        }

        //Verify Color of Past date
        public void ConvertColor(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string c2)
        {

            string c = "rgba(220, 220, 220, 1)";
            //"rgba(220, 220, 220, 1)"

            if (c == c2)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Expected color verified", "Color verification");

            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Expected color is not met", "Color verification");
                Assert.Fail("colour not matching");

            }

            //Color mycolor = Color.FromArgb(220,220,220);
            //string hex = mycolor.R.ToString("X2") + mycolor.G.ToString("X2") + mycolor.B.ToString("X2");
            //return String.Format("RGB({0},{1},{2})", c.R, c.G, c.B);

        }




        //Verify time slot in Book tour page

        public void VerifyTimeSlotinBookTourPage(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {
            //ThinkTime(10);
            // driver.SwitchTo().Frame("IFRAME_bookavisit");    
            WaitUntil(driver, Control("TimeSlot", "Contacts"), 360);
            int count = Elements(driver, Control("TimeSlot", "Contacts"));
            IList<IWebElement> obj = driver.FindElements(Control("TimeSlot", "Contacts"));

            if (count > 0)
            {
                Console.Write("Time Slots");

                for (int k = 1; k < 13; k++)
                {
                    for (int i = 0; i < count; i++)
                    {

                        if (obj[i].Text.Equals(k.ToString()))
                        {
                            Console.Write(" " + k);
                        }

                    }

                }

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Time slots are available", "Time Slots");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Time slots are not available", "Time Slots");
            }

            driver.SwitchTo().DefaultContent();

        }



        //Select City Diary and Centre
        public void VerifyCityDiaryandCentre(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string CityDiary, string Centre)
        {


            ThinkTime(5);
            //driver.SwitchTo().DefaultContent();
            string parentWindowHandle = driver.CurrentWindowHandle;
            WindowHandling(driver);
            //string parentWindowHandle1 = driver.CurrentWindowHandle;
            //WindowHandling(driver);

            ThinkTime(15);
            //driver.SwitchTo().Frame("IFRAME_bookavisit");
            ThinkTime(5);
            WaitUntil(driver, Control("CityDiary", "Opportunity"), 360);
            Element(driver, Control("CityDiary", "Opportunity")).SendKeys(Keys.Control + "a");
            Element(driver, Control("CityDiary", "Opportunity")).SendKeys(Keys.Delete);
            Element(driver, Control("CityDiary", "Opportunity")).SendKeys(CityDiary);
            ThinkTime(10);
            MoveToElement(driver, Control("CityDiaryCitySelection", CityDiary, "Opportunity"));
            Element(driver, Control("CityDiaryCitySelection", CityDiary, "Opportunity")).Click();
            ThinkTime(20);
            WaitUntil(driver, Control("Centre", "Opportunity"), 360);
            Element(driver, Control("Centre", "Opportunity")).Click();
            Element(driver, Control("Centre", "Opportunity")).SendKeys(Keys.Control + "a");
            Element(driver, Control("Centre", "Opportunity")).SendKeys(Keys.Delete);
            Element(driver, Control("Centre", "Opportunity")).SendKeys(Centre);
            ThinkTime(5);
            //WaitUntil(driver, Control("SelectCityValue", Centre, "Opportunity"), 30);
            Element(driver, Control("Centre", "Opportunity")).Click();

            //MoveToElement(driver, Control("SelectCityValue", Centre, "Opportunity"));
            // Element(driver, Control("SelectCityValue", Centre, "Opportunity")).Click();


            //Element(driver, Control("CityDairyDropdown","Opportunity")).Click();
            ////CityDairyDropdown
            //MoveToElement(driver, Control("CityDairyDropdownValue", CityDiary, "Opportunity"));
            //Element(driver, Control("CityDairyDropdownValue", CityDiary, "Opportunity")).Click();


            ThinkTime(4);
            WaitUntil(driver, Control("CityDiary", "Opportunity"), 360);
            if (Element(driver, Control("CityDiary", "Opportunity")).GetAttribute("value").Contains(CityDiary) && Element(driver, Control("Centre", "Opportunity")).GetAttribute("value").Contains(Centre))
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Correct City Diary and Centre", "CityDiary and Centre");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Incorrect City Diary and Centre", "CityDiary and Centre");
                Assert.Fail("Incorrect City Diary and Centre");
            }

            ThinkTime(5);
            //driver.SwitchTo().Window(parentWindowHandle);

        }

        //Select City Diary and Centre
        public void SelectingCityDiaryandCentre(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string CityDiary, string Centre)
        {


            ThinkTime(5);
            //driver.SwitchTo().DefaultContent();
            string parentWindowHandle = driver.CurrentWindowHandle;
            WindowHandling(driver);
            //string parentWindowHandle1 = driver.CurrentWindowHandle;
            //WindowHandling(driver);

            ThinkTime(15);
            //driver.SwitchTo().Frame("IFRAME_bookavisit");
            ThinkTime(5);
            WaitUntil(driver, Control("CityDiary", "Opportunity"), 360);
            Element(driver, Control("CityDiary", "Opportunity")).SendKeys(Keys.Control + "a");
            Element(driver, Control("CityDiary", "Opportunity")).SendKeys(Keys.Delete);
            Element(driver, Control("CityDiary", "Opportunity")).SendKeys(CityDiary);
            ThinkTime(10);
            MoveToElement(driver, Control("CityDiaryCitySelection", CityDiary, "Opportunity"));
            Element(driver, Control("CityDiaryCitySelection", CityDiary, "Opportunity")).Click();
            ThinkTime(20);
            WaitUntil(driver, Control("Centre", "Opportunity"), 360);
            Element(driver, Control("Centre", "Opportunity")).Click();
            Element(driver, Control("Centre", "Opportunity")).SendKeys(Keys.Control + "a");
            Element(driver, Control("Centre", "Opportunity")).SendKeys(Keys.Delete);
            Element(driver, Control("Centre", "Opportunity")).SendKeys(Centre);
            ThinkTime(5);
            //WaitUntil(driver, Control("SelectCityValue", Centre, "Opportunity"), 30);
            Element(driver, Control("centreSel", "Opportunity")).Click();

            //MoveToElement(driver, Control("SelectCityValue", Centre, "Opportunity"));
            //Element(driver, Control("SelectCityValue", Centre, "Opportunity")).Click();


            //Element(driver, Control("CityDairyDropdown","Opportunity")).Click();
            ////CityDairyDropdown
            //MoveToElement(driver, Control("CityDairyDropdownValue", CityDiary, "Opportunity"));
            //Element(driver, Control("CityDairyDropdownValue", CityDiary, "Opportunity")).Click();


            ThinkTime(4);
            WaitUntil(driver, Control("CityDiary", "Opportunity"), 360);
            if (Element(driver, Control("CityDiary", "Opportunity")).GetAttribute("value").Contains(CityDiary) && Element(driver, Control("Centre", "Opportunity")).GetAttribute("value").Contains(Centre))
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Correct City Diary and Centre", "CityDiary and Centre");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Incorrect City Diary and Centre", "CityDiary and Centre");
                Assert.Fail("Incorrect City Diary and Centre");
            }

            ThinkTime(5);
            //driver.SwitchTo().Window(parentWindowHandle);

        }


        //Select City Diary and Centre
        public void VerifyCityDiaryandCentreRTA5000(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string CityDiary, string Centre)
        {


            ThinkTime(5);
            //driver.SwitchTo().DefaultContent();
            string parentWindowHandle = driver.CurrentWindowHandle;
            WindowHandling(driver);
            //string parentWindowHandle1 = driver.CurrentWindowHandle;
            //WindowHandling(driver);

            ThinkTime(15);
            //driver.SwitchTo().Frame("IFRAME_bookavisit");
            ThinkTime(5);
            WaitUntil(driver, Control("CityDiary", "Opportunity"), 360);
            Element(driver, Control("CityDiary", "Opportunity")).SendKeys(Keys.Control + "a");
            Element(driver, Control("CityDiary", "Opportunity")).SendKeys(Keys.Delete);
            Element(driver, Control("CityDiary", "Opportunity")).SendKeys(CityDiary);
            ThinkTime(10);
            MoveToElement(driver, Control("CityDiaryCitySelection", CityDiary, "Opportunity"));
            Element(driver, Control("CityDiaryCitySelection", CityDiary, "Opportunity")).Click();
            ThinkTime(20);
            WaitUntil(driver, Control("Centre", "Opportunity"), 360);
            Element(driver, Control("Centre", "Opportunity")).Click();
            Element(driver, Control("Centre", "Opportunity")).SendKeys(Keys.Control + "a");
            Element(driver, Control("Centre", "Opportunity")).SendKeys(Keys.Delete);
            Element(driver, Control("Centre", "Opportunity")).SendKeys(Centre);
            ThinkTime(5);
            //WaitUntil(driver, Control("SelectCityValue", Centre, "Opportunity"), 30);
            Element(driver, Control("Centre", "Opportunity")).Click();

            //MoveToElement(driver, Control("SelectCityValue", Centre, "Opportunity"));
            // Element(driver, Control("SelectCityValue", Centre, "Opportunity")).Click();


            //Element(driver, Control("CityDairyDropdown","Opportunity")).Click();
            ////CityDairyDropdown
            //MoveToElement(driver, Control("CityDairyDropdownValue", CityDiary, "Opportunity"));
            //Element(driver, Control("CityDairyDropdownValue", CityDiary, "Opportunity")).Click();


            ThinkTime(4);
            WaitUntil(driver, Control("CityDiary", "Opportunity"), 360);
            if (Element(driver, Control("CityDiary", "Opportunity")).GetAttribute("value").Contains(CityDiary) && Element(driver, Control("Centre", "Opportunity")).GetAttribute("value").Contains(Centre))
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Correct City Diary and Centre", "CityDiary and Centre");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Incorrect City Diary and Centre", "CityDiary and Centre");
                Assert.Fail("Incorrect City Diary and Centre");
            }

            ThinkTime(5);
            driver.SwitchTo().Window(parentWindowHandle);

        }


        public void VerifyCityDiaryandCentreNew(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string CityDiary, string Centre)
        {

            ThinkTime(10);
            driver.SwitchTo().DefaultContent();
            string parentWindowHandle = driver.CurrentWindowHandle;
            WindowHandling(driver);
            //string parentWindowHandle1 = driver.CurrentWindowHandle;
            WindowHandling(driver);

            ThinkTime(15);
            driver.SwitchTo().Frame("IFRAME_bookavisit");
            ThinkTime(10);
            Element(driver, Control("CityDiary", "Opportunity")).SendKeys(Keys.Control + "a");
            Element(driver, Control("CityDiary", "Opportunity")).SendKeys(Keys.Delete);
            Element(driver, Control("CityDiary", "Opportunity")).SendKeys(CityDiary);
            ThinkTime(10);
            MoveToElement(driver, Control("CityDiaryCitySelection", CityDiary, "Opportunity"));
            Element(driver, Control("CityDiaryCitySelection", CityDiary, "Opportunity")).Click();
            ThinkTime(5);
            WaitUntil(driver, Control("Centre", "Opportunity"), 30);
            Element(driver, Control("Centre", "Opportunity")).SendKeys(Centre);
            ThinkTime(5);
            //WaitUntil(driver, Control("SelectCityValue", Centre, "Opportunity"), 30);
            Element(driver, Control("Centre", "Opportunity")).Click();

            //MoveToElement(driver, Control("SelectCityValue", Centre, "Opportunity"));
            // Element(driver, Control("SelectCityValue", Centre, "Opportunity")).Click();


            //Element(driver, Control("CityDairyDropdown","Opportunity")).Click();
            ////CityDairyDropdown
            //MoveToElement(driver, Control("CityDairyDropdownValue", CityDiary, "Opportunity"));
            //Element(driver, Control("CityDairyDropdownValue", CityDiary, "Opportunity")).Click();
            // SelectanyOpportunitybutton(driver, testInReport, testName, testDataIteration, "Refresh");

            ThinkTime(4);
            if (Element(driver, Control("CityDiary", "Opportunity")).GetAttribute("value").Contains(CityDiary) && Element(driver, Control("Centre", "Opportunity")).GetAttribute("value").Contains(Centre))
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Correct City Diary and Centre", "CityDiary and Centre");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Incorrect City Diary and Centre", "CityDiary and Centre");
                Assert.Fail("Incorrect City Diary and Centre");
            }

            ThinkTime(10);
            driver.SwitchTo().Window(parentWindowHandle);

        }
        //Select City Diary and Centre
        public void VerifyCityDiaryandCentre1(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string CityDiary, string Centre)
        {


            ThinkTime(10);
            //driver.SwitchTo().DefaultContent();
            //string parentWindowHandle = driver.CurrentWindowHandle;
            //WindowHandling(driver);
            string parentWindowHandle1 = driver.CurrentWindowHandle;
            WindowHandling(driver);

            ThinkTime(15);
            //driver.SwitchTo().Frame("IFRAME_bookavisit");
            ThinkTime(10);
            WaitUntil(driver, Control("CityDiary", "Opportunity"), 360);
            Element(driver, Control("CityDiary", "Opportunity")).SendKeys(Keys.Control + "a");
            Element(driver, Control("CityDiary", "Opportunity")).SendKeys(Keys.Delete);
            Element(driver, Control("CityDiary", "Opportunity")).SendKeys(CityDiary);
            ThinkTime(10);
            MoveToElement(driver, Control("CityDiaryCitySelection", CityDiary, "Opportunity"));
            Element(driver, Control("CityDiaryCitySelection", CityDiary, "Opportunity")).Click();
            ThinkTime(5);
            WaitUntil(driver, Control("Centre", "Opportunity"), 30);
            Element(driver, Control("Centre", "Opportunity")).SendKeys(Centre);
            ThinkTime(5);
            //WaitUntil(driver, Control("SelectCityValue", Centre, "Opportunity"), 30);
            Element(driver, Control("Centre", "Opportunity")).Click();

            //MoveToElement(driver, Control("SelectCityValue", Centre, "Opportunity"));
            // Element(driver, Control("SelectCityValue", Centre, "Opportunity")).Click();


            //Element(driver, Control("CityDairyDropdown","Opportunity")).Click();
            ////CityDairyDropdown
            //MoveToElement(driver, Control("CityDairyDropdownValue", CityDiary, "Opportunity"));
            //Element(driver, Control("CityDairyDropdownValue", CityDiary, "Opportunity")).Click();


            ThinkTime(4);
            WaitUntil(driver, Control("CityDiary", "Opportunity"), 360);
            if (Element(driver, Control("CityDiary", "Opportunity")).GetAttribute("value").Contains(CityDiary) && Element(driver, Control("Centre", "Opportunity")).GetAttribute("value").Contains(Centre))
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Correct City Diary and Centre", "CityDiary and Centre");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Incorrect City Diary and Centre", "CityDiary and Centre");
                Assert.Fail("Incorrect City Diary and Centre");
            }

            ThinkTime(5);
            string parentWindowHandle = driver.CurrentWindowHandle;
            driver.SwitchTo().Window(parentWindowHandle);

        }
        //Select City Diary and Centre
        public void VerifyCityDiaryandCentreValues(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string CityDiary, string Centre)
        {
            //driver.SwitchTo().Frame("IFRAME_bookavisit");
            ThinkTime(2);
            Element(driver, Control("CityDiary", "Opportunity")).SendKeys(Keys.Control + "a");
            Element(driver, Control("CityDiary", "Opportunity")).SendKeys(Keys.Delete);
            Element(driver, Control("CityDiary", "Opportunity")).SendKeys(CityDiary);

            WaitUntil(driver, Control("CityDiaryCitySelection", CityDiary, "Opportunity"), 360);
            MoveToElement(driver, Control("CityDiaryCitySelection", CityDiary, "Opportunity"));
            Element(driver, Control("CityDiaryCitySelection", CityDiary, "Opportunity")).Click();
            ThinkTime(5);
            WaitUntil(driver, Control("Centre", "Opportunity"), 30);
            Element(driver, Control("Centre", "Opportunity")).SendKeys(Centre);
            ThinkTime(5);
            //WaitUntil(driver, Control("SelectCityValue", Centre, "Opportunity"), 30);
            Element(driver, Control("Centre", "Opportunity")).Click();

            //MoveToElement(driver, Control("SelectCityValue", Centre, "Opportunity"));
            // Element(driver, Control("SelectCityValue", Centre, "Opportunity")).Click();


            //Element(driver, Control("CityDairyDropdown","Opportunity")).Click();
            ////CityDairyDropdown
            //MoveToElement(driver, Control("CityDairyDropdownValue", CityDiary, "Opportunity"));
            //Element(driver, Control("CityDairyDropdownValue", CityDiary, "Opportunity")).Click();


            ThinkTime(4);
            if (Element(driver, Control("CityDiary", "Opportunity")).GetAttribute("value").Contains(CityDiary) && Element(driver, Control("Centre", "Opportunity")).GetAttribute("value").Contains(Centre))
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Correct City Diary and Centre", "CityDiary and Centre");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Incorrect City Diary and Centre", "CityDiary and Centre");
                Assert.Fail("Incorrect City Diary and Centre");
            }

            ThinkTime(5);
            //driver.SwitchTo().Window(parentWindowHandle);

        }
        public void CreateATour(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {

            ThinkTime(10);
            string parentWindowHandle = driver.CurrentWindowHandle;
            WindowHandling(driver);
            ElementHighlight(driver, Control("ExistingTour", "Opportunity"));
            if (Elements(driver, Control("ExistingTour", "Opportunity")) > 0)
            {
                ThinkTime(6);
                CloseTour(driver, testInReport, testDataIteration, testName);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Tour is already Created", "Tour already exist");

            }
            else
            {

                Actions action;
                IWebElement ele;
                //string parentWindowHandle = driver.CurrentWindowHandle;
                //WindowHandling(driver);
                ThinkTime(10);

                // Check for Free slot to Book Tour
                for (int i = 3; i <= 28;)
                {
                    ele = driver.FindElement(By.XPath("//td[@id='ASPxSchedulerAgentView_containerBlock_DXCntv0_" + i + "']"));
                    action = new Actions(driver);
                    action.ContextClick(ele).Build().Perform();
                    if (Element(driver, Control("Opentour", "Opportunity")).Displayed)
                    {
                        ThinkTime(3);
                        i += 3;
                    }


                    // Book a Tour in free slot
                    //else if (Element(driver, Control("Newtourappointment", "Opportunity")).Displayed)
                    //{

                    ////Element(driver, Control("Newtourappointment", "Opportunity")).Click();
                    ////ThinkTime(10);
                    ////WaitUntil(driver, Control("BookTouravailablebutton", "Opportunity"), 360);
                    ////Element(driver, Control("BookTouravailablebutton", "Opportunity")).Click();
                    ////ThinkTime(2);
                    //////WaitUntil(driver, Control("Tourbookclose", "Opportunity"), 360);
                    //////Element(driver, Control("Tourbookclose", "Opportunity")).Click();
                    ////AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Free slot verified successfully", "Free slot verification");
                    ////ThinkTime(1);

                    //  action.ClickAndHold(ele).Build().Perform();
                    // IJavaScriptExecutor js = (IJavaScriptExecutor)driver;
                    //js.ExecuteScript("arguments[0].click", ele);


                    // mouse hover/click full details verification

                    // scrollDownOpportunityEnterprise(driver, testInReport, testName, testDataIteration);

                    // Verify the pop up details for the vertical slot

                    WaitUntil(driver, Control("SaveTour", "Opportunity"), 360);
                    Element(driver, Control("SaveTour", "Opportunity")).Click();
                    ThinkTime(3);


                }
                //}
                ThinkTime(6);
                CloseTour(driver, testInReport, testDataIteration, testName);

                //driver.SwitchTo().Window(parentWindowHandle);
                //driver.SwitchTo().DefaultContent();

            }



        }



        public void CreateATourForVerifyingColour(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {

            Actions action;
            IWebElement ele;
            string parentWindowHandle = driver.CurrentWindowHandle;
            WindowHandling(driver);
            ThinkTime(15);

            // Check for Free slot to Book Tour

            for (int i = 4; i <= 28;)

            {

                ele = driver.FindElement(By.XPath("//td[@id='ASPxSchedulerAgentView_containerBlock_DXCntv0_" + i + "']"));

                action = new Actions(driver);

                action.ContextClick(ele).Build().Perform();


                if (Element(driver, Control("Opentour", "Opportunity")).Displayed)

                {

                    ThinkTime(3);

                    i += 2;

                }





                // Book a Tour in free slot

                else if (Element(driver, Control("Newtourappointment", "Opportunity")).Displayed)

                {



                    Element(driver, Control("Newtourappointment", "Opportunity")).Click();

                    ThinkTime(5);

                    //Element(driver, Control("BookTouravailablebutton", "Opportunity")).Click();

                    //ThinkTime(7);

                    //Element(driver, Control("Tourbookclose", "Opportunity")).Click();

                    // AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Free slot verified successfully", "Free slot verification");

                    /*  ThinkTime(1)*/
                    ;



                    //  action.ClickAndHold(ele).Build().Perform();

                    // IJavaScriptExecutor js = (IJavaScriptExecutor)driver;

                    //js.ExecuteScript("arguments[0].click", ele);



                    // Verify the pop up details for the vertical slot

                    WaitUntil(driver, Control("SaveTour", "Opportunity"), 360);
                    Element(driver, Control("SaveTour", "Opportunity")).Click();


                }

            }
            //ThinkTime(6);
            //driver.Close();
            //driver.SwitchTo().Window(parentWindowHandle);
            //driver.SwitchTo().DefaultContent();


        }

        public void CreateATourForVerifyingColour1(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {

            Actions action;
            IWebElement ele;
            string parentWindowHandle = driver.CurrentWindowHandle;
            WindowHandling(driver);
            ThinkTime(15);

            // Check for Free slot to Book Tour
            for (int i = 4; i <= 28;)
            {
                ele = driver.FindElement(By.XPath("//td[@id='ASPxSchedulerAgentView_containerBlock_DXCntv0_" + i + "']"));
                action = new Actions(driver);
                action.ContextClick(ele).Build().Perform();
                if (Element(driver, Control("Opentour", "Opportunity")).Displayed)
                {
                    ThinkTime(3);
                    i += 2;
                }


                // Book a Tour in free slot
                else if (Element(driver, Control("Newtourappointment", "Opportunity")).Displayed)
                {

                    Element(driver, Control("Newtourappointment", "Opportunity")).Click();
                    ThinkTime(5);
                    //WaitUntil(driver, Control("BookTouravailablebutton", "Opportunity"), 360);
                    //Element(driver, Control("BookTouravailablebutton", "Opportunity")).Click();
                    //ThinkTime(2);
                    //WaitUntil(driver, Control("Tourbookclose", "Opportunity"), 360);
                    //Element(driver, Control("Tourbookclose", "Opportunity")).Click();
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Free slot verified successfully", "Free slot verification");
                    ThinkTime(1);

                    //  action.ClickAndHold(ele).Build().Perform();
                    // IJavaScriptExecutor js = (IJavaScriptExecutor)driver;
                    //js.ExecuteScript("arguments[0].click", ele);


                    // mouse hover/click full details verification

                    // scrollDownOpportunityEnterprise(driver, testInReport, testName, testDataIteration);

                    // Verify the pop up details for the vertical slot
                    ThinkTime(2);
                    WaitUntil(driver, Control("SaveTour", "Opportunity"), 360);
                    Element(driver, Control("SaveTour", "Opportunity")).Click();
                    ThinkTime(3);

                    ThinkTime(3);
                    driver.Close();

                    WindowHandling(driver, parentWindowHandle);
                    break;
                }


            }

            //ThinkTime(6);
            //driver.Close();
            driver.SwitchTo().Window(parentWindowHandle);
            driver.SwitchTo().DefaultContent();

        }

        public void CreateATourByASMForVerifyingColour(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {

            Actions action;
            IWebElement ele;
            string parentWindowHandle = driver.CurrentWindowHandle;
            WindowHandling(driver);
            ThinkTime(15);

            // Check for Free slot to Book Tour
            for (int i = 4; i <= 28;)
            {
                ele = driver.FindElement(By.XPath("//td[@id='ASPxSchedulerAgentView_containerBlock_DXCntv1_" + i + "']")); action = new Actions(driver);
                action.ContextClick(ele).Build().Perform();
                if (Element(driver, Control("Opentour", "Opportunity")).Displayed)
                {
                    ThinkTime(3);
                    i += 2;
                }


                // Book a Tour in free slot
                else if (Element(driver, Control("Newtourappointment", "Opportunity")).Displayed)
                {

                    Element(driver, Control("Newtourappointment", "Opportunity")).Click();
                    ThinkTime(5);
                    //WaitUntil(driver, Control("BookTouravailablebutton", "Opportunity"), 360);
                    //Element(driver, Control("BookTouravailablebutton", "Opportunity")).Click();
                    //ThinkTime(2);
                    //WaitUntil(driver, Control("Tourbookclose", "Opportunity"), 360);
                    //Element(driver, Control("Tourbookclose", "Opportunity")).Click();
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Free slot verified successfully", "Free slot verification");
                    ThinkTime(1);

                    //  action.ClickAndHold(ele).Build().Perform();
                    // IJavaScriptExecutor js = (IJavaScriptExecutor)driver;
                    //js.ExecuteScript("arguments[0].click", ele);


                    // mouse hover/click full details verification

                    // scrollDownOpportunityEnterprise(driver, testInReport, testName, testDataIteration);

                    // Verify the pop up details for the vertical slot
                    ThinkTime(2);
                    WaitUntil(driver, Control("SaveTour", "Opportunity"), 360);
                    Element(driver, Control("SaveTour", "Opportunity")).Click();
                    ThinkTime(3);

                    ThinkTime(3);
                    driver.Close();

                    WindowHandling(driver, parentWindowHandle);
                    break;
                }


            }

            //ThinkTime(6);
            //driver.Close();
            driver.SwitchTo().Window(parentWindowHandle);
            driver.SwitchTo().DefaultContent();
        }

        public void closeBookTourPage(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {
            ThinkTime(2);
            string parentWindowHandle = driver.CurrentWindowHandle;
            WindowHandling(driver);
            driver.SwitchTo().Window(parentWindowHandle);
            string parentWindowHandle1 = driver.CurrentWindowHandle;
            WindowHandling(driver);
            //driver.Close();

        }

        public void closeBookTourPage1(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {

            string parentWindowHandle = driver.CurrentWindowHandle;
            WindowHandling(driver);
            driver.SwitchTo().Window(parentWindowHandle);
            string parentWindowHandle1 = driver.CurrentWindowHandle;
            WindowHandling(driver);
            //driver.Close();
            ThinkTime(10);
            driver.SwitchTo().DefaultContent();

            //ThinkTime(6);
            //driver.Close();
            //driver.SwitchTo().Window(parentWindowHandle);
            //driver.SwitchTo().DefaultContent();

        }

        public void AddProvidentCustomer(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string CustomerName)
        {
            ThinkTime(5);
            string PotentialCustomer = CustomerName;
            WaitUntil(driver, Control("PotentialCustomersSelect", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("PotentialCustomersSelect", "EnterpriseSales"));
            Element(driver, Control("PotentialCustomersSelect", "EnterpriseSales")).Click();
            Element(driver, Control("PotentialCustomersSelect", "EnterpriseSales")).SendKeys(PotentialCustomer);
            ThinkTime(5);
            try
            {



                MoveToElement(driver, Control("NewLanguageSelect", "Opportunity"));
                Element(driver, Control("NewLanguageSelect", "Opportunity")).Click();
            }
            catch (Exception e)
            {



                MoveToElement(driver, Control("PotentialCustomersLookUp", "EnterpriseSales"));
                Element(driver, Control("PotentialCustomersLookUp", "EnterpriseSales")).Click();
            }




        }

        public void closeBookTourPage2(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {

            string parentWindowHandle1 = driver.CurrentWindowHandle;
            WindowHandling(driver);

            ThinkTime(6);
            driver.Close();

            //string parentWindowHandle = driver.CurrentWindowHandle;
            WindowHandling(driver, parentWindowHandle1);

        }
        //Verify City Center
        public void VerifyCentre1(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string CityDiary, string Centre)
        {

            //ThinkTime(5);
            //driver.SwitchTo().DefaultContent();
            //string parentWindowHandle = driver.CurrentWindowHandle;
            //WindowHandling(driver);
            ////string parentWindowHandle1 = driver.CurrentWindowHandle;
            //WindowHandling(driver);

            ThinkTime(5);
            driver.SwitchTo().Frame("IFRAME_bookavisit");
            ThinkTime(5);
            Element(driver, Control("CityDiary", "Opportunity")).SendKeys(Keys.Control + "a");
            Element(driver, Control("CityDiary", "Opportunity")).SendKeys(Keys.Delete);
            Element(driver, Control("CityDiary", "Opportunity")).SendKeys(CityDiary);
            ThinkTime(2);
            MoveToElement(driver, Control("CityDiaryCitySelection", CityDiary, "Opportunity"));
            Element(driver, Control("CityDiaryCitySelection", CityDiary, "Opportunity")).Click();
            ThinkTime(2);
            WaitUntil(driver, Control("Centre", "Opportunity"), 30);
            Element(driver, Control("Centre", "Opportunity")).SendKeys(Centre);
            ThinkTime(7);
            //WaitUntil(driver, Control("SelectCityValue", Centre, "Opportunity"), 30);
            Element(driver, Control("Centre", "Opportunity")).Click();


            ThinkTime(4);
            if (Element(driver, Control("CityDiary", "Opportunity")).GetAttribute("value").Contains(CityDiary) && Element(driver, Control("Centre", "Opportunity")).GetAttribute("value").Contains(Centre))
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Correct City Diary and Centre", "CityDiary and Centre");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Incorrect City Diary and Centre", "CityDiary and Centre");
                Assert.Fail("Incorrect City Diary and Centre");
            }

            if (Elements(driver, Control("CloseBook", "Opportunity")) > 0)
            {
                Element(driver, Control("CloseBook", "Opportunity")).Click();
                ThinkTime(3);
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "No Script error present", "No Script error present");
            }
            ThinkTime(3);
            driver.SwitchTo().DefaultContent();
        }

        public void HndleingBookTourTimeOut(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {
            WaitUntil(driver, Control("BookaVisitTimeout", "Opportunity"), 360);
            Element(driver, Control("BookaVisitTimeout", "Opportunity")).Click();
        }

        //Select new centre Centre

        public void VerifyCentre(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string CityDiary, string Centre)
        {

            ThinkTime(15);
            driver.SwitchTo().Frame("IFRAME_bookavisit");
            //ThinkTime(10);
            ThinkTime(10);
            driver.SwitchTo().DefaultContent();
            string parentWindowHandle = driver.CurrentWindowHandle;
            WindowHandling(driver);
            string parentWindowHandle1 = driver.CurrentWindowHandle;
            WindowHandling(driver);

            ThinkTime(5);
            driver.Manage().Window.Maximize();

            Element(driver, Control("CityDiary", "Opportunity")).SendKeys(Keys.Control + "a");
            Element(driver, Control("CityDiary", "Opportunity")).SendKeys(Keys.Delete);
            Element(driver, Control("CityDiary", "Opportunity")).SendKeys(CityDiary);
            ThinkTime(10);
            MoveToElement(driver, Control("CityDiaryCentreSelection", CityDiary, "Opportunity"));
            Element(driver, Control("CityDiaryCentreSelection", CityDiary, "Opportunity")).Click();


            WaitUntil(driver, Control("SelectCityDropdown", "Opportunity"), 30);
            MoveToElement(driver, Control("SelectCityDropdown", "Opportunity"));
            Element(driver, Control("SelectCityDropdown", "Opportunity")).Click();

            MoveToElement(driver, Control("SelectCityValue", Centre, "Opportunity"));
            Element(driver, Control("SelectCityValue", Centre, "Opportunity")).Click();

            //if (Elements(driver, Control("CheckErrorPopUp", "Opportunity")) > 0)
            //{
            //    MoveToElement(driver, Control("CloseButtonPopUp", "Opportunity"));
            //    Element(driver, Control("CloseButtonPopUp", "Opportunity")).Click();
            //    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "No active resources found @ Calgary Sun Life. PopUp Handled", "PopUp Handled");
            //}

            //else

            //{
            //    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "No PopUp handled", "PopUp Handled");

            //}

            ThinkTime(4);
            if (Element(driver, Control("CityDiary", "Opportunity")).GetAttribute("value").Contains(CityDiary) && Element(driver, Control("Centre", "Opportunity")).GetAttribute("value").Contains(Centre))
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Correct City Diary and Centre", "CityDiary and Centre");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Incorrect City Diary and Centre", "CityDiary and Centre");
                Assert.Fail("Incorrect City Diary and Centre");
            }


        }
        public void WindowHandle(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {

            ThinkTime(10);
            driver.SwitchTo().DefaultContent();
            string parentWindowHandle = driver.CurrentWindowHandle;
            WindowHandling(driver);
            driver.SwitchTo().Window(parentWindowHandle);
        }

        public void VerifySlotCentreName(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string centrename)
        {

            ThinkTime(10);
            driver.SwitchTo().DefaultContent();
            string parentWindowHandle = driver.CurrentWindowHandle;
            WindowHandling(driver);
            string parentWindowHandle1 = driver.CurrentWindowHandle;
            WindowHandling(driver);



            ThinkTime(5);
            driver.Manage().Window.Maximize();


            ThinkTime(15);
            string centre = Element(driver, Control("SlotCentreName", "BookATour")).GetAttribute("value");
            if (centre.Contains(centrename))
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Centre Verified successfully", "Centre");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Centre Verification Failed successfully", "Centre");
                Assert.Fail(" City Diary Field Not Autopopulated");


            }
            ThinkTime(10);
            driver.SwitchTo().Window(parentWindowHandle);
        }


        public void VerifyBusinessCentreList(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {
            ThinkTime(10);
            driver.SwitchTo().DefaultContent();
            string parentWindowHandle = driver.CurrentWindowHandle;
            WindowHandling(driver);
            string parentWindowHandle1 = driver.CurrentWindowHandle;
            WindowHandling(driver);



            ThinkTime(5);
            driver.Manage().Window.Maximize();


            ThinkTime(10);
            WaitUntil(driver, Control("CityDiaryField", "Opportunity"), 360);
            string city = Element(driver, Control("CityDiaryField", "Opportunity")).GetAttribute("value");
            if (city != null)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "City Diary Autopopulated list Verified successfully", "City Diary");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "City Diary  Not Autopopulated list Verified successfully", "City Diary");
                Assert.Fail(" City Diary Field Not Autopopulated");


            }

            ThinkTime(10);

            if (Elements(driver, Control("CentreField", "BookATour")) > 0)
            {
                MoveToElement(driver, Control("SelectCentreDropdown", "Opportunity"));
                Element(driver, Control("SelectCentreDropdown", "Opportunity")).Click();

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Bussiness Centre list Verified successfully", "Business Centre");
                //Assert.Fail("Incorrect City Diary and Centre");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Bussiness Centre list Verification Failed", "Business Centre");
                Assert.Fail("Incorrect City Diary and Centre");


            }
            ThinkTime(10);
            driver.SwitchTo().Window(parentWindowHandle);
            driver.SwitchTo().DefaultContent();

        }


        public void VerifyBusinessCentreList1(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {
            ThinkTime(10);
            driver.SwitchTo().DefaultContent();
            string parentWindowHandle = driver.CurrentWindowHandle;
            WindowHandling(driver);
            //string parentWindowHandle1 = driver.CurrentWindowHandle;
            //WindowHandling(driver);



            ThinkTime(5);
            driver.Manage().Window.Maximize();


            ThinkTime(10);
            WaitUntil(driver, Control("CityDiaryField", "Opportunity"), 360);
            string city = Element(driver, Control("CityDiaryField", "Opportunity")).GetAttribute("value");
            if (city != null)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "City Diary Autopopulated list Verified successfully", "City Diary");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "City Diary  Not Autopopulated list Verified successfully", "City Diary");
                Assert.Fail(" City Diary Field Not Autopopulated");


            }

            ThinkTime(10);

            if (Elements(driver, Control("CentreField", "BookATour")) > 0)
            {
                MoveToElement(driver, Control("SelectCentreDropdown", "Opportunity"));
                Element(driver, Control("SelectCentreDropdown", "Opportunity")).Click();

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Bussiness Centre list Verified successfully", "Business Centre");
                //Assert.Fail("Incorrect City Diary and Centre");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Bussiness Centre list Verification Failed", "Business Centre");
                Assert.Fail("Incorrect City Diary and Centre");


            }
            ThinkTime(10);
            driver.SwitchTo().Window(parentWindowHandle);
            driver.SwitchTo().DefaultContent();

        }

        public void VerifyAnotherCityCentreSelection(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string Centre, string centrename)
        {
            ThinkTime(10);
            driver.SwitchTo().DefaultContent();
            string parentWindowHandle = driver.CurrentWindowHandle;
            WindowHandling(driver);
            string parentWindowHandle1 = driver.CurrentWindowHandle;
            WindowHandling(driver);



            ThinkTime(5);
            driver.Manage().Window.Maximize();
            ThinkTime(10);
            MoveToElement(driver, Control("CentreField", "BookATour"));
            Element(driver, Control("CentreField", "BookATour")).Click();
            Element(driver, Control("CentreField", "BookATour")).SendKeys(Centre);
            ThinkTime(6);
            if (Element(driver, Control("CentreField", "BookATour")).GetAttribute("value").Contains(centrename))
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Centre name is same default value", "Business Centre");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Failed", "New Centre added ", "Business Centre");
                Assert.Fail(" User able to enter centre of another city");
            }


            ThinkTime(10);
            driver.SwitchTo().Window(parentWindowHandle);
        }




        public void CentreSelect(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string Centre)
        {
            ThinkTime(10);
            driver.SwitchTo().DefaultContent();
            string parentWindowHandle = driver.CurrentWindowHandle;
            WindowHandling(driver);
            string parentWindowHandle1 = driver.CurrentWindowHandle;
            WindowHandling(driver);



            ThinkTime(5);
            driver.Manage().Window.Maximize();
            ThinkTime(10);


            WaitUntil(driver, Control("Centre", "Opportunity"), 360);
            Element(driver, Control("Centre", "Opportunity")).Click();
            Element(driver, Control("Centre", "Opportunity")).SendKeys(Centre);
            ThinkTime(5);
            WaitUntil(driver, Control("Centre", "Opportunity"), 360);
            Element(driver, Control("Centre", "Opportunity")).Click();
            //WaitUntil(driver, Control("SelectCityValue", Centre, "Opportunity"), 30);
            //Element(driver, Control("Centre", "Opportunity")).Click();
            //WaitUntil(driver, Control("CentreField", "BookATour"), 360);
            //MoveToElement(driver, Control("CentreField", "BookATour"));



            //WaitUntil(driver, Control("SelectCityDropdown", "Opportunity"), 30);
            //MoveToElement(driver, Control("SelectCityDropdown", "Opportunity"));
            //Element(driver, Control("SelectCityDropdown", "Opportunity")).Click();

            //MoveToElement(driver, Control("SelectCityValue", Centre, "Opportunity"));
            //Element(driver, Control("SelectCityValue", Centre, "Opportunity")).Click();
        }

        public void CentreSelect1(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string Centre)
        {
            ThinkTime(10);
            driver.SwitchTo().DefaultContent();
            string parentWindowHandle = driver.CurrentWindowHandle;
            WindowHandling(driver);
            string parentWindowHandle1 = driver.CurrentWindowHandle;
            WindowHandling(driver);



            ThinkTime(5);
            driver.Manage().Window.Maximize();
            ThinkTime(10);
            MoveToElement(driver, Control("CentreField", "BookATour"));



            WaitUntil(driver, Control("SelectCityDropdown", "Opportunity"), 30);
            MoveToElement(driver, Control("SelectCityDropdown", "Opportunity"));
            Element(driver, Control("SelectCityDropdown", "Opportunity")).Click();

            MoveToElement(driver, Control("SelectCityValue", Centre, "Opportunity"));
            Element(driver, Control("SelectCityValue", Centre, "Opportunity")).Click();
        }







        //Select and verify list of Bussiness Centres

        public void CityandcentreList(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string CityDiary)
        {
            ThinkTime(10);
            driver.SwitchTo().DefaultContent();
            string parentWindowHandle = driver.CurrentWindowHandle;
            WindowHandling(driver);
            string parentWindowHandle1 = driver.CurrentWindowHandle;
            WindowHandling(driver);



            ThinkTime(5);
            driver.Manage().Window.Maximize();


            //ThinkTime(10);
            WaitUntil(driver, Control("CityDiary", "Opportunity"), 360);
            Element(driver, Control("CityDiary", "Opportunity")).SendKeys(Keys.Control + "a");
            Element(driver, Control("CityDiary", "Opportunity")).SendKeys(Keys.Delete);
            Element(driver, Control("CityDiary", "Opportunity")).SendKeys(CityDiary);
            ThinkTime(10);
            MoveToElement(driver, Control("CityDiaryCentreSelection", CityDiary, "Opportunity"));
            Element(driver, Control("CityDiaryCentreSelection", CityDiary, "Opportunity")).Click();



            ThinkTime(10);
            MoveToElement(driver, Control("CentreField", "BookATour"));

            if (Elements(driver, Control("CentreField", "BookATour")) > 0)
            {
                MoveToElement(driver, Control("SelectCentreDropdown", "Opportunity"));
                Element(driver, Control("SelectCentreDropdown", "Opportunity")).Click();

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Bussiness Centre list Verified successfully", "Business Centre");
                //Assert.Fail("Incorrect City Diary and Centre");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Bussiness Centre list Verification Failed", "Business Centre");
                Assert.Fail("Incorrect City Diary and Centre");


            }
            ThinkTime(10);
            driver.SwitchTo().Window(parentWindowHandle);
            driver.SwitchTo().DefaultContent();

        }


        //Select and verify list of Bussiness Centres

        public void CityandcentreList1(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string CityDiary)
        {
            ThinkTime(10);
            driver.SwitchTo().DefaultContent();
            string parentWindowHandle = driver.CurrentWindowHandle;
            WindowHandling(driver);
            //string parentWindowHandle1 = driver.CurrentWindowHandle;
            //WindowHandling(driver);



            ThinkTime(5);
            driver.Manage().Window.Maximize();


            //ThinkTime(10);
            WaitUntil(driver, Control("CityDiary", "Opportunity"), 360);
            Element(driver, Control("CityDiary", "Opportunity")).SendKeys(Keys.Control + "a");
            Element(driver, Control("CityDiary", "Opportunity")).SendKeys(Keys.Delete);
            Element(driver, Control("CityDiary", "Opportunity")).SendKeys(CityDiary);


            //MoveToElement(driver, Control("CityDiaryCentreSelection", CityDiary, "Opportunity"));
            WaitUntil(driver, Control("CityDiaryCitySelection", CityDiary, "Opportunity"), 360);
            Element(driver, Control("CityDiaryCitySelection", CityDiary, "Opportunity")).Click();



            ThinkTime(10);
            MoveToElement(driver, Control("CentreField", "BookATour"));

            if (Elements(driver, Control("CentreField", "BookATour")) > 0)
            {
                MoveToElement(driver, Control("SelectCentreDropdown", "Opportunity"));
                Element(driver, Control("SelectCentreDropdown", "Opportunity")).Click();

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Bussiness Centre list Verified successfully", "Business Centre");
                //Assert.Fail("Incorrect City Diary and Centre");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Bussiness Centre list Verification Failed", "Business Centre");
                Assert.Fail("Incorrect City Diary and Centre");


            }
            ThinkTime(10);
            driver.Close();
            driver.SwitchTo().Window(parentWindowHandle);
            // driver.SwitchTo().DefaultContent();

        }


        //Select and verify Recommended Business Centre
        public void SelectingandVerifyingRecommendedBusinessCentre(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string BusinessCentre, string Button)
        {

            ThinkTime(10);
            //if (Elements(driver, Control("RecommededBusinessCentre", "Opportunity")) > 0)
            //{
            //    Element(driver, Control("RecommededBusinessCentre", "Opportunity")).SendKeys(Keys.Control + "a");
            //    Element(driver, Control("RecommededBusinessCentre", "Opportunity")).SendKeys(Keys.Delete);
            //    Element(driver, Control("RecommededBusinessCentre", "Opportunity")).SendKeys(BusinessCentre);
            //    ThinkTime(5);
            //    WaitUntil(driver, Control("BusinessCentreSelection", BusinessCentre, "Opportunity"), 30);
            //    Element(driver, Control("BusinessCentreSelection", BusinessCentre, "Opportunity")).Click();
            //}

            //else

            //{
            //    ThinkTime(4);
            //    MoveToElement(driver, Control("SelectedBusinessCentre", "Opportunity"));
            //    Element(driver, Control("CancelButton", "Opportunity")).Click();
            //    ThinkTime(10);
            //    Element(driver, Control("RecommededBusinessCentre", "Opportunity")).SendKeys(BusinessCentre);
            //    WaitUntil(driver, Control("BusinessCentreSelection", BusinessCentre, "Opportunity"), 40);
            //    Element(driver, Control("BusinessCentreSelection", BusinessCentre, "Opportunity")).Click();
            //    ThinkTime(3);
            //}

            //saveFooter(driver, testInReport, testName, testDataIteration);
            //ThinkTime(3);

            //string s = Element(driver, Control("SelectedBusinessCentre", "Opportunity")).Text.ToString();

            //if (!s.Contains(BusinessCentre))
            //{
            //    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Bussiness Centre not updated successfully", "Business Centre");
            //    Assert.Fail("Incorrect Business Centre");
            //}

            //else
            //{
            //    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Business Centre is updated successfully", "Business Centre");
            //}

            SelectanyOpportunitybutton(driver, testInReport, testName, testDataIteration, Button);

            ThinkTime(30);
            driver.SwitchTo().Frame("IFRAME_bookavisit");

            if (Element(driver, Control("Centre", "Opportunity")).GetAttribute("value").Contains(BusinessCentre))
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Centre Name is same as Recommeded Business Centre", "Centre");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Incorrect City Diary and Centre", "Centre");
                Assert.Fail("Centre Name is not same as Recommeded Business Centre");
            }

        }


        //Select any header button outside the opportunity screen in sales
        public void SelectHeaderButton(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string button)
        {
            ThinkTime(10);
            WaitUntil(driver, Control("HeaderButtons", button, "Generic"), 30);
            Element(driver, Control("HeaderButtons", button, "Generic")).Click();
            ThinkTime(8);
        }

        public void SelectandVerifyExcelTemplate(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string option, string SelectExcelType, string button = "")
        {
            ThinkTime(5);
            WaitUntil(driver, Control("ExcelOptions", option, "Generic"), 30);
            Element(driver, Control("ExcelOptions", option, "Generic")).Click();
            ThinkTime(5);
            WaitUntil(driver, Control("ExcelOptions", SelectExcelType, "Generic"), 80);
            Element(driver, Control("Excelselection", SelectExcelType, "Generic")).Click();

            ThinkTime(10);
            driver.SwitchTo().Frame("wopi_frame");
            ThinkTime(5);
            if (Elements(driver, Control("Sheet", "Generic")) == 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Excel is opened in Excel Online", "ExcelOnline");
            }

            else

            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Excel is not opened in Excel Online", "ExcelOnline");
                Assert.Fail("Enterprise Sales Manager is not able to open report in Excel Online");
            }

            driver.SwitchTo().DefaultContent();

            Element(driver, Control("Close/ReturnExcelButton1", "Return", "Generic")).Click();
            ThinkTime(1);
            //try
            //{

            //    if (Elements(driver, Control("popup", "Generic")) > 0)
            //    {

            //        AddLog(driver, testInReport, testName, testDataIteration, "Info", "Warning popup displayed", "Warning popup displayed");


            //    }
            //    else {
            //        AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Excel is not able to close in Excel Online", "ExcelOnlineUnable to Close");
            //    }
            //}
            //catch(Exception e)

            //{
            //    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Excel is not able to close in Excel Online", "ExcelOnlineUnable to Close");
            //    Assert.Fail("Enterprise Sales Manager is not able to Close report in Excel Online");
            //}



        }


        //Verify the phone calls in the activities table
        public void VerifyPhoneCallFieldsinTable(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string subject, string CallFrom, string CallTo, string Regarding, string Calloutcome, string Centre, string Direction, string Phone, string Actualstart, string Actualend, string due, string nextdate, string salespipeline)
        {
            ThinkTime(5);
            int field1 = Elements(driver, Control("Phonecallheaderverification", subject, "Opportunity"));
            int field2 = Elements(driver, Control("Phonecallheaderverification", CallFrom, "Opportunity"));
            int field3 = Elements(driver, Control("Phonecallheaderverification", CallTo, "Opportunity"));
            int field4 = Elements(driver, Control("Phonecallheaderverification", Regarding, "Opportunity"));
            int field5 = Elements(driver, Control("Phonecallheaderverification", Calloutcome, "Opportunity"));
            int field6 = Elements(driver, Control("Phonecallheaderverification", Centre, "Opportunity"));
            int field7 = Elements(driver, Control("Phonecallheaderverification", Direction, "Opportunity"));
            int field8 = Elements(driver, Control("Phonecallheaderverification", Phone, "Opportunity"));
            int field9 = Elements(driver, Control("Phonecallheaderverification", Actualstart, "Opportunity"));
            int field10 = Elements(driver, Control("Phonecallheaderverification", Actualend, "Opportunity"));
            int field11 = Elements(driver, Control("Phonecallheaderverification", due, "Opportunity"));
            int field12 = Elements(driver, Control("Phonecallheaderverification", nextdate, "Opportunity"));
            int field13 = Elements(driver, Control("Phonecallheaderverification", salespipeline, "Opportunity"));


            if (field1 > 0 && field2 > 0 && field3 > 0 && field4 > 0 && field5 > 0 && field6 > 0 && field7 > 0 && field8 > 0 && field9 > 0 && field10 > 0 && field11 > 0 && field12 > 0 && field13 > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "All the Columns are available", "ActivitiesTable");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "All the Columns are not available", "ActivitiesTable");
                Assert.Fail("Activities table are missing some columns");
            }

        }



        //Verify KPI is sales manager dashboard

        public void VerifySalesManagerDashboardkpi(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string kpi1, string kpi2, string kpi3, string kpi4, string kpi5)
        {
            ThinkTime(8);
            WaitUntil(driver, Control("KPIViewsVerify", kpi1, "Dashboards"), 30);
            int value1 = Elements(driver, Control("KPIViewsVerify", kpi1, "Dashboards"));
            int value2 = Elements(driver, Control("KPIViewsVerify", kpi2, "Dashboards"));
            int value3 = Elements(driver, Control("KPIViewsVerify", kpi3, "Dashboards"));
            scrollMiddleDashboard(driver, testInReport, testName, testDataIteration, "Scroll");
            ThinkTime(8);
            int value4 = Elements(driver, Control("KPIChart", kpi2, "Dashboards"));
            int value5 = Elements(driver, Control("KPIChart", kpi5, "Dashboards"));

            if (value1 > 0 && value2 > 0 && value3 > 0 && value4 > 0 && value5 > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Available KPIs are correct", "DashboardKPI");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "KPIs are incorrect", "DashboardKPI");
                Assert.Fail("Incorrect KPI");
            }

        }

        public void VerifyEnterpriseSalesManagerDashboardkpi(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string kpi3, string More1)
        {

            WaitUntil(driver, Control("KPIViewsVerify", kpi3, "Dashboards"), 30);
            int value1 = Elements(driver, Control("KPIViewsVerify", kpi3, "Dashboards"));
            if (value1 > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Available KPIs are correct", "DashboardKPI");
                ThinkTime(2);
                ActionsClick(driver, Control("CEAMore", More1, "Dashboards"));
                ThinkTime(2);
                ActionsClick(driver, Control("SeeAllRecordAssociateBtn", "GenericOld"));


            }
        }

        public void Viewrecordsincorse(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string kpi3, string More1)
        {

            WaitUntil(driver, Control("KPIViewsVerify1", kpi3, "Dashboards"), 30);
            int value1 = Elements(driver, Control("KPIViewsVerify1", kpi3, "Dashboards"));
            if (value1 > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Available KPIs are correct", "DashboardKPI");
                ThinkTime(2);
                ActionsClick(driver, Control("More1", "Dashboards"));
                ThinkTime(2);
                // ActionsClick(driver, Control("SeeAllRecordAssociateBtn", "Dashboards"));


            }
        }









        public void VerifyITSalesManagerDashboardkpiheaders(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string kpi1, string kpi2, string kpi3, string kpi5, string kpi6)
        {

            WaitUntil(driver, Control("KPIViewsVerify", kpi1, "Dashboards"), 30);
            int value1 = Elements(driver, Control("KPIViewsVerify", kpi1, "Dashboards"));
            int value2 = Elements(driver, Control("KPIViewsVerify", kpi2, "Dashboards"));
            scrollDownDashboard(driver, testInReport, testName, testDataIteration);

            int value3 = Elements(driver, Control("KPIViewsVerify", kpi3, "Dashboards"));
            scrollDownDashboard(driver, testInReport, testName, testDataIteration);
            int value4 = Elements(driver, Control("DashChartheader1", "Dashboards"));

            int value5 = Elements(driver, Control("ClosedOpportunities", kpi5, "Dashboards"));
            int value6 = Elements(driver, Control("WonOpportunities", kpi6, "Dashboards"));

            if (value1 > 0 && value2 > 0 && value3 > 0 && value4 > 0 && value5 > 0 && value6 > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Available KPIs are correct", "DashboardKPI");
                ThinkTime(2);
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "KPIs are incorrect", "DashboardKPI");
                Assert.Fail("Incorrect KPI");
            }
        }





        //Verify KPI is sales manager dashboard

        public void VerifyEnterpriseSalesManagerDashboardkpiheaders(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string kpi1, string kpi2, string kpi3, string kpi4, string kpi5)
        {
            ThinkTime(5);
            // WaitUntil(driver, Control("KPIViews", kpi1, "Dashboards"), 30);
            int value1 = Elements(driver, Control("KPIViews", kpi1, "Dashboards"));
            Console.WriteLine(value1);
            int value2 = Elements(driver, Control("KPIViews", kpi2, "Dashboards"));
            Console.WriteLine(value2);
            scrollMiddleDown(driver, testInReport, testName, testDataIteration);
            ThinkTime(5);
            int value3 = Elements(driver, Control("KPIViews", kpi3, "Dashboards"));
            Console.WriteLine(value3);
            int value4 = Elements(driver, Control("DashChartheader", kpi4, "Dashboards"));
            Console.WriteLine(value4);
            scrollDownDashboard(driver, testInReport, testName, testDataIteration);
            ThinkTime(5);
            int value5 = Elements(driver, Control("DashChartheader", kpi5, "Dashboards"));
            Console.WriteLine(value5);
            if (value1 > 0 && value2 > 0 && value3 > 0 && value4 > 0 && value5 > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "KPIs are incorrect", "DashboardKPI");
                Assert.Fail("Incorrect KPI");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Available KPIs are correct", "DashboardKPI");
                ThinkTime(2);

            }

        }

        public void Dashboardactivityverification(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string data1, string data2)
        {
            ThinkTime(6);
            int Due = Elements(driver, Control("Dueverification", data1, "Dashboards"));
            ThinkTime(2);
            int Owner = Elements(driver, Control("Dueverification", data2, "Dashboards"));
            // string text= Element(driver, Control("Dueverification", data2, "Dashboards")).GetAttribute("innerText").ToString();
            ThinkTime(2);

            if (Due > 0 && Owner > 0)

            {
                ThinkTime(2);
                ActionsClick(driver, Control("Regardingvalue", "Dashboards"));
                ThinkTime(5);
                if (Elements(driver, Control("Opportunitylabel", "Opportunity")) > 0)
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Due, Owner and Regarding are correct", "DashboardKPI");

                }
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Due, Owner and Regarding are Incorrect", "DashboardKPI");

            }
            ThinkTime(5);


        }
        public void VerifyEnterpriseSalesManagerDashboardactivityverification(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(5);
            int value1 = Elements(driver, Control("Data1", "Dashboards"));
            ThinkTime(1);
            if (value1 > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Topic label is displayed", "Topic available");

            }
            else
            {
                Assert.Fail("Topic not displayed");
            }
            ActionsClick(driver, Control("Ownerdropdown", "Dashboards"));
            int value2 = Elements(driver, Control("OpportunityfieldsOwner", "Generic"));
            ThinkTime(1);
            if (value2 > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Sale owner label is displayed", "Sale owner available");

            }
            else
            {
                Assert.Fail("Sale Owner not displayed");
            }

        }

        public void Verifyincoursprocessstageworkflow(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string Incoursestage1, string Incoursestage2, string Incoursestage3, string Incoursestage4, string Incoursestage5)
        {
            ThinkTime(8);
            scrollMiddleDashboard(driver, testInReport, testName, testDataIteration, "Scroll");
            ThinkTime(8);
            int stage1 = Elements(driver, Control("pitchdashboard", Incoursestage1, "EnterpriseSales"));
            int stage2 = Elements(driver, Control("pitchdashboard", Incoursestage2, "EnterpriseSales"));
            int stage3 = Elements(driver, Control("pitchdashboard", Incoursestage3, "EnterpriseSales"));
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Process stage verification", "Process stage available");
            ThinkTime(3);
            ActionsClick(driver, Control("dashboardforwardarrow", "EnterpriseSales"));
            ThinkTime(3);
            ActionsClick(driver, Control("dashboardforwardarrow", "EnterpriseSales"));
            //ActionsClick(driver, Control("dashboardforwardarrow", "EnterpriseSales"));
            //ActionsClick(driver, Control("dashboardforwardarrow", "EnterpriseSales"));
            ThinkTime(3);
            int stage4 = Elements(driver, Control("pitchdashboard", Incoursestage4, "EnterpriseSales"));
            int stage5 = Elements(driver, Control("pitchdashboard", Incoursestage5, "EnterpriseSales"));

            if (stage1 > 0 || stage2 > 0 || stage3 > 0 || stage4 > 0 || stage5 > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Process stage verification", "Process stage verification");

            }
            else
            {
                Assert.Fail("Incourse process stage workflow are incorrect");
            }

        }










        public void VerifyEnterpriseSalesManagerDashboardrecordverification(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string data1, string data2, string data3, string data4, string data5, string data6, string data7, string data8, string data9 = "")
        {
            ThinkTime(5);
            int value1 = Elements(driver, Control("Enterpriseactivityheader", data1, "Dashboards"));
            ThinkTime(1);
            int value2 = Elements(driver, Control("Enterpriseactivityheader", data2, "Dashboards"));
            ThinkTime(1);
            int value3 = Elements(driver, Control("Enterpriseactivityheader", data3, "Dashboards"));
            ThinkTime(1);
            int value4 = Elements(driver, Control("Enterpriseactivityheader", data4, "Dashboards"));
            ThinkTime(1);
            int value5 = Elements(driver, Control("Enterpriseactivityheader", data5, "Dashboards"));
            ThinkTime(1);
            int value6 = Elements(driver, Control("Enterpriseactivityheader", data6, "Dashboards"));
            ThinkTime(1);
            int value7 = Elements(driver, Control("Enterpriseactivityheader", data7, "Dashboards"));
            ThinkTime(1);
            int value8 = Elements(driver, Control("Enterpriseactivityheader", data8, "Dashboards"));
            ThinkTime(1);
            if (value1 > 0 && value2 > 0 && value3 > 0 && value4 > 0 && value6 > 0 && value8 > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Available KPIs headers are correct", "DashboardKPI");

            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "KPIs are incorrect", "DashboardKPI");
                Assert.Fail("Incorrect KPI");
            }
            int test1 = Elements(driver, Control("Enterpriseactivityheader", "Subject", "Dashboards"));
            int test2 = Elements(driver, Control("Enterpriseactivityheader", "Activity Type", "Dashboards"));

            if (Elements(driver, Control("Enterpriseactivityheader", "Subject", "Dashboards")) > 0 && Elements(driver, Control("Enterpriseactivityheader", "Activity Type", "Dashboards")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Subject and Activity type headers are correct", "DashboardKPI");

            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Subject and Activity type headers are incorrect", "DashboardKPI");

            }



        }

        public void VerifyEnterpriseSalesManagerDashboardheaderverification(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string data1, string data2, string data3, string data4, string data5, string data6, string data7, string data8, string data9 = "")
        {

            int value1 = Elements(driver, Control("EnterpriseAcctheader", data1, "Dashboards"));
            int value2 = Elements(driver, Control("EnterpriseAcctheader", data2, "Dashboards"));
            int value3 = Elements(driver, Control("EnterpriseAcctheader", data3, "Dashboards"));
            int value4 = Elements(driver, Control("EnterpriseAcctheader", data4, "Dashboards"));
            int value5 = Elements(driver, Control("EnterpriseAcctheader", data5, "Dashboards"));
            int value6 = Elements(driver, Control("EnterpriseAcctheader", data6, "Dashboards"));
            int value7 = Elements(driver, Control("EnterpriseAcctheader", data7, "Dashboards"));
            int value8 = Elements(driver, Control("EnterpriseAcctheader", data8, "Dashboards"));

            if (value1 > 0 && value2 > 0 && value3 > 0 && value4 > 0 && value6 > 0 && value8 > 0 && value5 > 0 && value7 > 0 && value8 > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Available KPIs headers are correct", "DashboardKPI");

            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "KPIs are incorrect", "DashboardKPI");
                Assert.Fail("Incorrect KPI");
            }
        }


        //Verify the enterprise account table fields
        public void VerifyEnterpriseAccountablefields(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string option, string Companynamefield, string parentaccountfield, string primarycontactfield, string emailfield, string phonefield, string manager, string city, string country, string CreatedOn = "")
        {

            WaitUntil(driver, Control("TableFields", Companynamefield, "Accounts"), 30);
            int field1 = Elements(driver, Control("TableFields", Companynamefield, "Accounts"));
            int field2 = Elements(driver, Control("TableFields", parentaccountfield, "Accounts"));
            int field3 = Elements(driver, Control("TableFields", primarycontactfield, "Accounts"));
            int field4 = Elements(driver, Control("TableFields", emailfield, "Accounts"));
            int field5 = Elements(driver, Control("TableFields", phonefield, "Accounts"));
            int field6 = Elements(driver, Control("TableFields", manager, "Accounts"));
            scrollRight(driver, testInReport, testName, testDataIteration, "Scroll");
            int field7 = Elements(driver, Control("TableFields", city, "Accounts"));
            int field8 = Elements(driver, Control("TableFields", country, "Accounts"));
            if (option == "Recently Created Accounts")
            {
                int field9 = Elements(driver, Control("TableFields", CreatedOn, "Accounts"));
                if (field9 > 0)
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Created on field is available", "EnterpriseAccountTable");
                }

                else
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Created on field is not available", "EnterpriseAccountTable");
                    Assert.Fail("Created on Field is not available");
                }
            }
            scrollLeft(driver, testInReport, testName, testDataIteration, "Scroll");
            if (field1 > 0 && field2 > 0 && field3 > 0 && field4 > 0 && field5 > 0 && field6 > 0 && field7 > 0 && field8 > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Fields are available", "EnterpriseAccountTable");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Fields are not available", "EnterpriseAccountTable");
                Assert.Fail("Incorrect Fields in the Enterprise Account Table");

            }

        }


        public void VerifySalesAccountablefields(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string Companynamefield, string parentaccountfield, string primarycontactfield, string emailfield, string phonefield, string manager, string city, string country)
        {

            WaitUntil(driver, Control("TableFields", Companynamefield, "Accounts"), 30);
            int field1 = Elements(driver, Control("TableFields", Companynamefield, "Accounts"));
            int field2 = Elements(driver, Control("TableFields", parentaccountfield, "Accounts"));
            int field3 = Elements(driver, Control("TableFields", primarycontactfield, "Accounts"));
            int field4 = Elements(driver, Control("TableFields", emailfield, "Accounts"));
            int field5 = Elements(driver, Control("TableFields", phonefield, "Accounts"));
            int field6 = Elements(driver, Control("TableFields", manager, "Accounts"));
            scrollRight(driver, testInReport, testName, testDataIteration, "Scroll");
            int field7 = Elements(driver, Control("TableFields", city, "Accounts"));
            int field8 = Elements(driver, Control("TableFields", country, "Accounts"));
            //if (option == "Recently Created Accounts")
            //{
            //    int field9 = Elements(driver, Control("TableFields", CreatedOn, "Accounts"));
            //    if (field9 > 0)
            //    {
            //        AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Created on field is available", "EnterpriseAccountTable");
            //    }

            //else
            //{
            //    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Created on field is not available", "EnterpriseAccountTable");
            //    Assert.Fail("Created on Field is not available");
            //}
            // }
            scrollLeft(driver, testInReport, testName, testDataIteration, "Scroll");
            if (field1 > 0 && field2 > 0 && field3 > 0 && field4 > 0 && field5 > 0 && field6 > 0 && field7 > 0 && field8 > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Fields are available", "EnterpriseAccountTable");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Fields are not available", "EnterpriseAccountTable");
                Assert.Fail("Incorrect Fields in the Enterprise Account Table");

            }

        }



        public void VerifyITSalesAccountablefields(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string option, string Companynamefield, string parentaccountfield, string primarycontactfield, string emailfield, string phonefield, string manager, string city, string country, string status, string results)
        {

            WaitUntil(driver, Control("TableFields", Companynamefield, "Accounts"), 30);
            int field1 = Elements(driver, Control("TableFields", Companynamefield, "Accounts"));
            int field2 = Elements(driver, Control("TableFields", parentaccountfield, "Accounts"));
            int field3 = Elements(driver, Control("TableFields", primarycontactfield, "Accounts"));
            int field4 = Elements(driver, Control("TableFields", emailfield, "Accounts"));
            int field5 = Elements(driver, Control("TableFields", phonefield, "Accounts"));
            int field6 = Elements(driver, Control("TableFields", manager, "Accounts"));
            int field7 = Elements(driver, Control("TableFields", city, "Accounts"));
            int field8 = Elements(driver, Control("TableFields", country, "Accounts"));
            int field9 = Elements(driver, Control("TableFields", status, "Accounts"));

            if (option == "Active Accounts")
            {
                if (field1 > 0 && field2 > 0 && field3 > 0 && field4 > 0 && field5 > 0 && field6 > 0 && field7 > 0 && field8 > 0)
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Active Accounts fields are available", "EnterpriseAccountTable");
                }

                else
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Active Accounts fields are not available", "EnterpriseAccountTable");
                    Assert.Fail("Active Accounts fields are not available");
                }
            }

            if (option == "Accounts I Follow")
            {

                if (field1 > 0 && field3 > 0 && field4 > 0 && field5 > 0 && field9 > 0)
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", " Accounts I follow fields are available", "EnterpriseAccountTable");
                }

                else
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Accounts I follow fields are not available", "EnterpriseAccountTable");
                    Assert.Fail("Accounts I follow fields are not available");
                }
            }

            if (option == "My Active Accounts")
            {
                if (field1 > 0 && field3 > 0 && field4 > 0 && field5 > 0 && field7 > 0)
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "My Active Accounts fields are available", "EnterpriseAccountTable");
                }

                else
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "My Active Accounts fields are not available", "EnterpriseAccountTable");
                    Assert.Fail("My Active Accounts fields are not available");
                }
            }

            if (option == "Inactive Accounts")
            {
                if (field1 > 0 && field3 > 0 && field4 > 0 && field5 > 0 && field7 > 0)
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "InActive Accounts fields are available", "EnterpriseAccountTable");
                }

                else
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "InActive Accounts fields are not available", "EnterpriseAccountTable");
                    Assert.Fail("InActive Accounts fields are not available");
                }
            }
            string record1 = Element(driver, Control("RecordCount", "Accounts")).Text.ToString();
            GetCountfromAdvancedFind(driver, testInReport, testName, testDataIteration, results, record1);
        }

        //Verifying  closed and lost opp count is same as Adv find results
        public void VerifyOppcount(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string results)
        {
            WaitUntil(driver, Control("MyOppMoreButton", "Accounts"), 30);
            MoveToElement(driver, Control("MyOppMoreButton", "Accounts"));
            Element(driver, Control("MyOppMoreButton", "Accounts")).Click();
            ThinkTime(3);
            WaitUntil(driver, Control("ViewRecords", "Accounts"), 30);
            MoveToElement(driver, Control("ViewRecords", "Accounts"));
            Element(driver, Control("ViewRecords", "Accounts")).Click();
            ThinkTime(5);

            string record1 = Element(driver, Control("RecordCount", "Accounts")).Text.ToString();
            GetCountfromAdvancedFind(driver, testInReport, testName, testDataIteration, results, record1);
        }

        public void VerifyITSalesContactfields(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string option, string fullname, string companyfield, string emailfield, string phonefield, string parentcustomer, string results)
        {

            WaitUntil(driver, Control("TableFields", fullname, "Accounts"), 30);
            int field1 = Elements(driver, Control("TableFields", fullname, "Accounts"));
            int field2 = Elements(driver, Control("TableFields", companyfield, "Accounts"));
            int field3 = Elements(driver, Control("TableFields", emailfield, "Accounts"));
            int field4 = Elements(driver, Control("TableFields", phonefield, "Accounts"));
            int field5 = Elements(driver, Control("ContactTypeField", parentcustomer, "Accounts"));

            if (option == "Active Contacts")
            {
                if (field1 > 0 && field2 > 0 && field3 > 0 && field4 > 0)
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "My Active Contacts fields are available", "EnterpriseAccountTable");
                }

                else
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Active Accounts fields are not available", "EnterpriseAccountTable");
                    Assert.Fail("My Active Contacts fields are not available");
                }
            }

            if (option == "My Active Contacts")
            {
                if (field1 > 0 && field3 > 0 && field4 > 0 && field5 > 0)
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "My Active Contacts fields are available", "EnterpriseAccountTable");
                }

                else
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "My Active Contacts fields are not available", "EnterpriseAccountTable");
                    Assert.Fail("My Active Contacts fields are not available");
                }
            }

            if (option == "Customer Contacts")
            {
                if (field1 > 0 && field2 > 0 && field3 > 0 && field4 > 0)
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Customer Contacts fields are available", "EnterpriseAccountTable");
                }

                else
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Customer Contacts fields are not available", "EnterpriseAccountTable");
                    Assert.Fail("Customer Contacts fields are not available");
                }
            }

            if (option == "Inactive Contacts")
            {
                if (field1 > 0 && field2 > 0 && field4 > 0)
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "InActive Contacts fields are available", "EnterpriseAccountTable");
                }

                else
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "InActive Contacts fields are not available", "EnterpriseAccountTable");
                    Assert.Fail("InActive Contacts fields are not available");
                }
            }

            if (option == "My Connections")
            {
                if (field1 > 0 && field3 > 0 && field4 > 0 && field5 > 0)
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "My Connections fields are available", "EnterpriseAccountTable");
                }

                else
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "My Connections fields are not available", "EnterpriseAccountTable");
                    Assert.Fail("My Connections fields are not available");
                }
            }
            string record1 = Element(driver, Control("RecordCount", "Accounts")).Text.ToString();
            GetCountfromAdvancedFind(driver, testInReport, testName, testDataIteration, results, record1);
        }

        public void VerifyITSalesActivitiesfields(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string option, string duedate, string activity, string regarding, string brand, string owner, string businessphone, string email, string fullname, string alternateitphone, string alternateitemail, string alternateitname, string results)
        {

            WaitUntil(driver, Control("TableFields", duedate, "Accounts"), 30);
            int field1 = Elements(driver, Control("TableFields", duedate, "Accounts"));
            int field2 = Elements(driver, Control("TableFields", activity, "Accounts"));
            int field3 = Elements(driver, Control("TableFields", regarding, "Accounts"));
            int field4 = Elements(driver, Control("TableFields", brand, "Accounts"));
            int field5 = Elements(driver, Control("TableFields", owner, "Accounts"));
            int field6 = Elements(driver, Control("TableFields", businessphone, "Accounts"));
            ThinkTime(5);
            scrollRight(driver, testInReport, testName, testDataIteration, "Scroll");
            ThinkTime(10);
            int field7 = Elements(driver, Control("TableFields", email, "Accounts"));
            int field8 = Elements(driver, Control("TableFields", fullname, "Accounts"));
            int field9 = Elements(driver, Control("TableFields", alternateitphone, "Accounts"));
            int field10 = Elements(driver, Control("TableFields", alternateitemail, "Accounts"));
            int field11 = Elements(driver, Control("TableFields", alternateitname, "Accounts"));

            if (option == "My Assigned Open Activities - ALL")
            {
                if (field1 > 0 && field2 > 0 && field3 > 0 && field4 > 0 && field5 > 0 && field6 > 0 && field7 > 0 && field8 > 0 && field9 > 0 && field10 > 0 && field11 > 0)
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "My Assigned Open Activities - ALL fields are available", "EnterpriseAccountTable");
                }

                else
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "My Assigned Open Activities - ALL fields are not available", "EnterpriseAccountTable");
                    Assert.Fail("My Assigned Open Activities - ALL fields are not available");
                }
            }

            if (option == "My open IT Sales activities")
            {
                if (field1 > 0 && field2 > 0 && field3 > 0 && field4 > 0 && field5 > 0 && field6 > 0 && field7 > 0 && field8 > 0 && field9 > 0 && field10 > 0 && field11 > 0)
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", " My open IT Sales activities fields are available", "EnterpriseAccountTable");
                }

                else
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "My open IT Sales activities fields are not available", "EnterpriseAccountTable");
                    Assert.Fail("My open IT Sales activities fields are not available");
                }
            }

            if (option == "Open Activities - ALL")
            {
                if (field1 > 0 && field2 > 0 && field3 > 0 && field4 > 0 && field5 > 0 && field6 > 0 && field7 > 0 && field8 > 0 && field9 > 0 && field10 > 0 && field11 > 0)
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Open Activities - ALL fields are available", "EnterpriseAccountTable");
                }

                else
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Open Activities - ALL fields are not available", "EnterpriseAccountTable");
                    Assert.Fail("Open Activities - ALL fields are not available");
                }
            }
            string record1 = Element(driver, Control("RecordCount", "Accounts")).Text.ToString();
            GetCountfromAdvancedFind(driver, testInReport, testName, testDataIteration, results, record1);
        }

        public void VerifyITSalesActivitiesPhoneCallsfields(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string option, string subject, string regarding, string activitytype, string activitystatus, string owner, string startdate, string due, string actualstart, string actualend, string company, string results)
        {

            WaitUntil(driver, Control("TableFields", due, "Accounts"), 30);
            int field1 = Elements(driver, Control("TableFields", due, "Accounts"));
            int field2 = Elements(driver, Control("TableFields", actualstart, "Accounts"));
            int field3 = Elements(driver, Control("TableFields", actualend, "Accounts"));
            int field4 = Elements(driver, Control("TableFields", subject, "Accounts"));
            ThinkTime(5);
            scrollRight(driver, testInReport, testName, testDataIteration, "Scroll");
            ThinkTime(10);
            int field5 = Elements(driver, Control("TableFields", regarding, "Accounts"));
            int field6 = Elements(driver, Control("TableFields", company, "Accounts"));
            int field7 = Elements(driver, Control("TableFields", activitytype, "Accounts"));
            int field8 = Elements(driver, Control("TableFields", activitystatus, "Accounts"));
            int field9 = Elements(driver, Control("TableFields", owner, "Accounts"));
            int field10 = Elements(driver, Control("TableFields", startdate, "Accounts"));


            if (option == "IT Sales Phone Calls")
            {
                if (field1 > 0 && field2 > 0 && field3 > 0 && field4 > 0 && field5 > 0 && field6 > 0 && field7 > 0 && field8 > 0)
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "IT Sales Phone Calls fields are available", "EnterpriseAccountTable");
                }

                else
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "IT Sales Phone Calls fields are not available", "EnterpriseAccountTable");
                    Assert.Fail("IT Sales Phone Calls fields are not available");
                }
            }

            if (option == "IT Sales Phone Calls for today")
            {
                if (field1 > 0 && field4 > 0 && field5 > 0 && field6 > 0 && field7 > 0 && field8 > 0 && field10 > 0)
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", " IT Sales Phone Calls for today activities fields are available", "EnterpriseAccountTable");
                }

                else
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "IT Sales Phone Calls for today activities fields are not available", "EnterpriseAccountTable");
                    Assert.Fail("IT Sales Phone Calls for today activities fields are not available");
                }
            }

            if (option == "My IT Sales Phone Calls for today")
            {
                if (field1 > 0 && field4 > 0 && field5 > 0 && field6 > 0 && field7 > 0 && field8 > 0 && field10 > 0)
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "My IT Sales Phone Calls for today fields are available", "EnterpriseAccountTable");
                }

                else
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "My IT Sales Phone Calls for today fields are not available", "EnterpriseAccountTable");
                    Assert.Fail("My IT Sales Phone Calls for today fields are not available");
                }
            }
            if (option == "My Phone Calls for today")
            {
                if (field1 > 0 && field4 > 0 && field5 > 0 && field6 > 0 && field7 > 0 && field8 > 0 && field10 > 0)
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "My Phone Calls for today fields are available", "EnterpriseAccountTable");
                }

                else
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "My Phone Calls for today fields are not available", "EnterpriseAccountTable");
                    Assert.Fail("My Phone Calls for today fields are not available");
                }
            }
            string record1 = Element(driver, Control("RecordCount", "Accounts")).Text.ToString();
            GetCountfromAdvancedFind(driver, testInReport, testName, testDataIteration, results, record1);
        }

        public void VerifyITSalesActivitiesTasksAndEmailfields(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string option, string subject, string regarding, string priority, string duedate, string actualend, string from, string to, string statusreason, string modifiedon, string lastopened, string opencount, string attachments, string links, string reply, string location, string starttime, string endtime, string results)
        {

            WaitUntil(driver, Control("TableFields", subject, "Accounts"), 30);
            int field1 = Elements(driver, Control("TableFields", subject, "Accounts"));
            int field2 = Elements(driver, Control("TableFields", regarding, "Accounts"));
            int field3 = Elements(driver, Control("TableFields", priority, "Accounts"));
            int field4 = Elements(driver, Control("TableFields", duedate, "Accounts"));
            int field5 = Elements(driver, Control("TableFields", actualend, "Accounts"));
            int field6 = Elements(driver, Control("TableFields", from, "Accounts"));
            int field7 = Elements(driver, Control("TableFields", to, "Accounts"));
            int field8 = Elements(driver, Control("TableFields", statusreason, "Accounts"));
            int field9 = Elements(driver, Control("TableFields", modifiedon, "Accounts"));
            int field10 = Elements(driver, Control("TableFields", lastopened, "Accounts"));
            int field11 = Elements(driver, Control("TableFields", opencount, "Accounts"));
            ThinkTime(5);
            scrollRight(driver, testInReport, testName, testDataIteration, "Scroll");
            ThinkTime(10);
            int field13 = Elements(driver, Control("TableFields", links, "Accounts"));
            int field14 = Elements(driver, Control("TableFields", reply, "Accounts"));
            int field12 = Elements(driver, Control("TableFields", attachments, "Accounts"));
            int field15 = Elements(driver, Control("TableFields", location, "Accounts"));
            int field16 = Elements(driver, Control("TableFields", starttime, "Accounts"));
            int field17 = Elements(driver, Control("TableFields", endtime, "Accounts"));


            if (option == "My Tasks")
            {
                if (field1 > 0 && field2 > 0 && field3 > 0 && field4 > 0)
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "My Tasks fields are available", "EnterpriseAccountTable");
                }

                else
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "My Tasks fields are not available", "EnterpriseAccountTable");
                    Assert.Fail("My Tasks fields are not available");
                }
            }

            if (option == "My Received Emails")
            {
                if (field1 > 0 && field2 > 0 && field3 > 0 && field5 > 0 && field6 > 0)
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "My Received Emails activities fields are available", "EnterpriseAccountTable");
                }

                else
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "My Received Emails activities fields are not available", "EnterpriseAccountTable");
                    Assert.Fail("My Received Emails activities fields are not available");
                }
            }

            if (option == "All Followed Emails")
            {
                if (field1 > 0 && field2 > 0 && field3 > 0 && field6 > 0 && field7 > 0 && field8 > 0 && field9 > 0 && field10 > 0)
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "All Followed Emails fields are available", "EnterpriseAccountTable");
                }

                else
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "All Followed Emails fields are not available", "EnterpriseAccountTable");
                    Assert.Fail("All Followed Emails fields are not available");
                }
                scrollRight(driver, testInReport, testName, testDataIteration, "Scroll");

                WaitUntil(driver, Control("TableFields", opencount, "Accounts"), 30);
                Element(driver, Control("TableFields", opencount, "Accounts")).Click();
                ThinkTime(3);
                if (field11 > 0 && field12 > 0 && field13 > 0 && field14 > 0)
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "All Followed Emails fields are available", "EnterpriseAccountTable");
                }

                else
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "All Followed Emails fields are not available", "EnterpriseAccountTable");
                    Assert.Fail("All Followed Emails fields are not available");
                }

            }
            if (option == "My Sent Emails")
            {
                if (field1 > 0 && field2 > 0 && field3 > 0 && field5 > 0 && field7 > 0)
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "My Sent Emails fields are available", "EnterpriseAccountTable");
                }

                else
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "My Sent Emails fields are not available", "EnterpriseAccountTable");
                    Assert.Fail("My Sent Emails fields are not available");
                }
            }
            if (option == "My Appointments")
            {
                if (field1 > 0 && field2 > 0 && field3 > 0 && field15 > 0 && field16 > 0 && field17 > 0)
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "My Appointments fields are available", "EnterpriseAccountTable");
                }

                else
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "My Appointments fields are not available", "EnterpriseAccountTable");
                    Assert.Fail("My Appointments fields are not available");
                }
            }
            string record1 = Element(driver, Control("RecordCount", "Accounts")).Text.ToString();
            GetCountfromAdvancedFind(driver, testInReport, testName, testDataIteration, results, record1);
        }

        public void OpportunitiesSystemView(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string Manager)
        {
            ThinkTime(5);
            Element(driver, Control("activeCaseSelector", "GenericOld")).Click();
            ThinkTime(5);

            WaitUntil(driver, Control("SelectDropdownOption", Manager, "Opportunity"), 60);
            ElementHighlight(driver, Control("SelectDropdownOption", Manager, "Opportunity"));
            string dashboardView = Element(driver, Control("SelectDropdownOption", Manager, "Opportunity")).Text;

            if (dashboardView == Manager)
            {

                ThinkTime(1);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "user is able to view IT Sales Manager dashboard view", "EnterpriseAccountTable");
            }

            else
            {
                ThinkTime(1);
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "user is not able to view IT Sales Manager dashboard view", "EnterpriseAccountTable");
            }

            string[] dropdownvalue = { "IT Sales Centre Opportunities", "IT Sales Opportunities current year", "IT Sales Opportunities D10 D03", "My IT Sales Opportunities to follow up", "My IT Sales Opportunities D10 D03" };
            for (int i = 0; i < 5; i++)
            {
                ThinkTime(2);

                if (Elements(driver, Control("SelectDropdownOption", dropdownvalue[i], "Opportunity")) == 0)
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "User is not able to view" + dropdownvalue[i] + "dashboard view", "EnterpriseAccountTable");
                }

                else
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "User is able to view" + dropdownvalue[i] + "dashboard view", "EnterpriseAccountTable");

                }
            }
        }

        public void EnterpriseSalesChartsnotVisible(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(5);
            Element(driver, Control("activeCaseSelector", "GenericOld")).Click();
            ThinkTime(5);

            string[] dropdownvalue = { "Enterprise Opportunities in Course", "My Enterprise Opportunities Funnel", "Won Enterprise Opportunities by Sales Owner1" };

            for (int i = 0; i < 3; i++)
            {
                ThinkTime(2);

                if (Elements(driver, Control("SelectDropdownOption", dropdownvalue[i], "Opportunity")) == 0)
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "User is not able to view" + dropdownvalue[i] + "dashboard view", "EnterpriseAccountTable");
                }

                else
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "User is able to view" + dropdownvalue[i] + "dashboard view", "EnterpriseAccountTable");

                }
            }
        }



        public void VerifySalesOpenOpportunityfields(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string Topic, string Account, string EstClosedate, string Contact, string Phone, string SaleOwner, string Pipeline, string Status)
        {
            ThinkTime(8);
            WaitUntil(driver, Control("TableFields", Topic, "Accounts"), 30);
            ElementHighlight(driver, Control("TableFields", Topic, "Accounts"));
            int field1 = Elements(driver, Control("TableFields", Topic, "Accounts"));
            ThinkTime(2);
            ElementHighlight(driver, Control("TableFields", Account, "Accounts"));
            int field2 = Elements(driver, Control("TableFields", Account, "Accounts"));
            ThinkTime(2);
            ElementHighlight(driver, Control("TableFields", EstClosedate, "Accounts"));
            int field3 = Elements(driver, Control("TableFields", EstClosedate, "Accounts"));
            ThinkTime(2);
            ElementHighlight(driver, Control("TableFields", Contact, "Accounts"));
            int field4 = Elements(driver, Control("TableFields", Contact, "Accounts"));
            ThinkTime(2);
            ElementHighlight(driver, Control("TableFields", Phone, "Accounts"));
            int field5 = Elements(driver, Control("TableFields", Phone, "Accounts"));
            ThinkTime(2);
            ElementHighlight(driver, Control("TableFields", SaleOwner, "Accounts"));
            int field6 = Elements(driver, Control("TableFields", SaleOwner, "Accounts"));
            ThinkTime(2);
            ElementHighlight(driver, Control("TableFields", Pipeline, "Accounts"));
            int field7 = Elements(driver, Control("TableFields", Pipeline, "Accounts"));
            ThinkTime(2);
            ElementHighlight(driver, Control("TableFields", Status, "Accounts"));
            int field8 = Elements(driver, Control("TableFields", Status, "Accounts"));
            ThinkTime(2);

            if (field1 > 0)
            {
                ThinkTime(5);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Fields are available", "EnterpriseOpportunityTable");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Fields are not available", "EnterpriseOpportunityTable");
                Assert.Fail("Topic not in the Enterprise Account Table");

            }

            if (field3 > 0)
            {
                ThinkTime(5);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Fields are available", "EnterpriseOpportunityTable");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Fields are not available", "EnterpriseOpportunityTable");
                Assert.Fail("Est Close date Fields not in the Enterprise Account Table");

            }

            if (field5 > 0)
            {
                ThinkTime(5);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Fields are available", "EnterpriseOpportunityTable");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Fields are not available", "EnterpriseOpportunityTable");
                Assert.Fail("Phone Fields not in the Enterprise Account Table");

            }


            if (field6 > 0)
            {
                ThinkTime(5);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Fields are available", "EnterpriseOpportunityTable");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Fields are not available", "EnterpriseOpportunityTable");
                Assert.Fail("Owner Fields not in the Enterprise Account Table");

            }


            if (field7 > 0)
            {
                ThinkTime(5);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Fields are available", "EnterpriseOpportunityTable");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Fields are not available", "EnterpriseOpportunityTable");
                Assert.Fail("Pipeline Fields not in the Enterprise Account Table");

            }


            if (field8 > 0)
            {
                ThinkTime(5);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Fields are available", "EnterpriseOpportunityTable");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Fields are not available", "EnterpriseOpportunityTable");
                Assert.Fail("Status Fields not in the Enterprise Account Table");

            }
            if (Elements(driver, Control("TableFields", Account, "Accounts")) > 0)
            {

                ThinkTime(10);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Fields are available", "EnterpriseOpportunityTable");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Fields are not available", "EnterpriseOpportunityTable");
                Assert.Fail("Account not in the Enterprise Account Table");

            }
            if (field4 > 0)
            {
                ThinkTime(10);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Fields are available", "EnterpriseOpportunityTable");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Fields are not available", "EnterpriseOpportunityTable");
                Assert.Fail("Contact Fields not in the Enterprise Account Table");

            }

        }

        public void VerifySalesLostOpportunityfields(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string Topic, string Account, string ActClosedate, string Contact, string Phone, string SaleOwner, string Status, string Outcome)
        {
            ThinkTime(3);
            WaitUntil(driver, Control("TableFields", Topic, "Accounts"), 30);
            int field1 = Elements(driver, Control("TableFields", Topic, "Accounts"));
            int field2 = Elements(driver, Control("TableFields", Account, "Accounts"));
            int field3 = Elements(driver, Control("TableFields", ActClosedate, "Accounts"));
            int field4 = Elements(driver, Control("TableFields", Contact, "Accounts"));
            int field5 = Elements(driver, Control("TableFields", Phone, "Accounts"));
            int field6 = Elements(driver, Control("TableFields", SaleOwner, "Accounts"));
            int field7 = Elements(driver, Control("TableFields", Outcome, "Accounts"));
            int field8 = Elements(driver, Control("Field8", Status, "Accounts"));

            if (field1 > 0)
            {
                ThinkTime(5);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Fields are available", "EnterpriseOpportunityTable");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Fields are not available", "EnterpriseOpportunityTable");
                Assert.Fail("Topic not in the Enterprise Account Table");

            }

            if (field3 > 0)
            {
                ThinkTime(5);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Fields are available", "EnterpriseOpportunityTable");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Fields are not available", "EnterpriseOpportunityTable");
                Assert.Fail("Est Close date Fields not in the Enterprise Account Table");

            }

            if (field5 > 0)
            {
                ThinkTime(5);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Fields are available", "EnterpriseOpportunityTable");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Fields are not available", "EnterpriseOpportunityTable");
                Assert.Fail("Phone Fields not in the Enterprise Account Table");

            }


            if (field6 > 0)
            {
                ThinkTime(5);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Fields are available", "EnterpriseOpportunityTable");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Fields are not available", "EnterpriseOpportunityTable");
                Assert.Fail("Owner Fields not in the Enterprise Account Table");

            }


            if (field7 > 0)
            {
                ThinkTime(5);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Fields are available", "EnterpriseOpportunityTable");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Fields are not available", "EnterpriseOpportunityTable");
                Assert.Fail("Pipeline Fields not in the Enterprise Account Table");

            }


            if (field8 > 0)
            {
                ThinkTime(5);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Fields are available", "EnterpriseOpportunityTable");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Fields are not available", "EnterpriseOpportunityTable");
                Assert.Fail("Status Fields not in the Enterprise Account Table");

            }
            if (field2 > 0)
            {

                ThinkTime(10);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Fields are available", "EnterpriseOpportunityTable");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Fields are not available", "EnterpriseOpportunityTable");
                Assert.Fail("Account not in the Enterprise Account Table");

            }
            if (field4 > 0)
            {
                ThinkTime(10);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Fields are available", "EnterpriseOpportunityTable");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Fields are not available", "EnterpriseOpportunityTable");
                Assert.Fail("Contact Fields not in the Enterprise Account Table");

            }

        }

        public void VerifycontactsummaryEnterpriseManager(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string Contact, string LastName)
        {

            WaitUntil(driver, Control("ContactInfo", Contact, "Contacts"), 30);
            int Last_Name = Elements(driver, Control("ContactSummaryLastName", "Contacts"));

            //int Language = Elements(driver, Control("ContactSummaryLanguage", "Contacts"));


            if (Last_Name > 0)
            {
                ThinkTime(5);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Lastname field is available", "ContactSummarydetails displayed");
                scrollDownOpportunityEnterprise(driver, testInReport, testName, testDataIteration);
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Lsstname field not available", "ContactSummarydetails not displayed");
                Assert.Fail("Last Name not in the Contact Summary  Table");

            }
            scrollDownOpportunity(driver, testInReport, testName, testDataIteration);

            ThinkTime(3);

            int Language = Elements(driver, Control("ContactSummaryLanguage", "Contacts"));
            if (Language > 0)
            {
                ThinkTime(5);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Language Preference is available", "ContactSummarydetails displayed");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Language Preference is not available", "ContactSummarydetails not displayed");
                Assert.Fail("Est Close date Fields not in the Enterprise Account Table");

            }
        }


        public void VerifyaccountsummaryEnterpriseManager(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string Summary, string Companyheader, string Oppheader, string Timelineheader, string Caseheader, string Profileheader, string Addressheader, string Custtypeheader, string rolesheader)
        {
            driver.SwitchTo().DefaultContent();
            WaitUntil(driver, Control("Accountdetails", Summary, "Contacts"), 30);
            Element(driver, Control("Accountdetails", Summary, "Contacts")).Click();
            ThinkTime(4);
            int Companyheader1 = Elements(driver, Control("AccountSummarydetails1", Companyheader, "Contacts"));
            int Oppheader1 = Elements(driver, Control("AccountSummarydetails", Oppheader, "Contacts"));
            int Timelineheader1 = Elements(driver, Control("AccountSummaryTimeline", Timelineheader, "Contacts"));
            int caseheader1 = Elements(driver, Control("AccountSummaryCases", Caseheader, "Contacts"));

            int profleheader1 = Elements(driver, Control("AccountSummarydetails", Profileheader, "Contacts"));
            int addressheader1 = Elements(driver, Control("AccountSummarydetails1", Addressheader, "Contacts"));
            int custtype1 = Elements(driver, Control("AccountSummarydetails1", Custtypeheader, "Contacts"));

            scrollDownOpportunityEnterprise(driver, testInReport, testName, testDataIteration);
            scrollDownOpportunityEnterprise(driver, testInReport, testName, testDataIteration);
            scrollDownOpportunityEnterprise(driver, testInReport, testName, testDataIteration);

            int contacts1 = Elements(driver, Control("AccountSummarydetailscontact", "Contacts"));
            int role1 = Elements(driver, Control("AccountSummarydetails", rolesheader, "Contacts"));

            if (Companyheader1 > 0 && Oppheader1 > 0 && Timelineheader1 > 0 && caseheader1 > 0 && profleheader1 > 0 && addressheader1 > 0 && custtype1 > 0 && contacts1 > 0 && role1 > 0)
            {
                ThinkTime(25);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Account Summary Headers are available", "Accountsummary displayed");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Account Summary Headers not available", "Accountsummary not displayed");
                Assert.Fail(" Header not in the Account Summary  Table");

            }

        }

        public void VerifyaccountdetailsEnterpriseManager(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string Details, string Companyheader, string contactheader, string orgheader, string industry, string SICCode, string Ownership, string Contactmethod, string email, string followemail, string Bulkmail, string Phone, string Fax, string Mail, string Marketingheader, string Lead, string Date)
        {
            driver.SwitchTo().DefaultContent();
            WaitUntil(driver, Control("Accountdetails", Details, "Contacts"), 30);
            Element(driver, Control("Accountdetails", Details, "Contacts")).Click();
            ThinkTime(4);
            int Companyheader1 = Elements(driver, Control("ContactDetailsHeader", Companyheader, "Contacts"));
            int Contactheader1 = Elements(driver, Control("ContactDetailsHeader", contactheader, "Contacts"));
            int Orgheader1 = Elements(driver, Control("ContactDetailsHeader", orgheader, "Contacts"));
            int childAccounts1 = Elements(driver, Control("AccountOrg", "Contacts"));

            int Industry1 = Elements(driver, Control("ContactDetailLabels", industry, "Contacts"));
            int SICCode1 = Elements(driver, Control("ContactDetailLabels", SICCode, "Contacts"));
            int Ownership1 = Elements(driver, Control("ContactDetailLabels", Ownership, "Contacts"));

            int Contactmethod1 = Elements(driver, Control("ContactDetailLabels", Contactmethod, "Contacts"));
            int Email1 = Elements(driver, Control("ContactDetailLabels", email, "Contacts"));
            int Followemal1 = Elements(driver, Control("ContactDetailLabels", followemail, "Contacts"));

            int Bulkmail1 = Elements(driver, Control("ContactDetailLabels", Bulkmail, "Contacts"));
            ThinkTime(2);
            int Fax1 = Elements(driver, Control("ContactDetailLabels", Fax, "Contacts"));
            int Mail1 = Elements(driver, Control("ContactDetailLabels", Mail, "Contacts"));

            int Marketingheader1 = Elements(driver, Control("ContactDetailsHeader", Marketingheader, "Contacts"));
            int Lead1 = Elements(driver, Control("ContactDetailLabels", Lead, "Contacts"));
            int Date1 = Elements(driver, Control("ContactDetailLabels", Date, "Contacts"));
            int Phone1 = Elements(driver, Control("ContactDetailLabels", Phone, "Contacts"));
            ThinkTime(2);
            //  int Material1 = Elements(driver, Control("AccountMarketing", "Contacts"));

            if (Companyheader1 > 0 && Contactheader1 > 0 && Orgheader1 > 0 && Marketingheader1 > 0 && Orgheader1 > 0)
            {
                ThinkTime(25);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Account Details Headers are available", "Contactdetails displayed");

            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Contact Details Headers not available", "Contactdetails not displayed");
                Assert.Fail("Marketing Details Header not in the Contact Summary  Table");

            }

            if (Industry1 > 0 && SICCode1 > 0 && Ownership1 > 0)
            {
                ThinkTime(25);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Company Details are available", "Companydetails displayed");

            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Company Details  not available", "Companydetails not displayed");
                Assert.Fail("Company Details not in the Account details  Table");

            }

            if (Contactmethod1 > 0 && Email1 > 0 && Followemal1 > 0 && Bulkmail1 > 0 && Phone1 > 0 && Fax1 > 0 && Mail1 > 0)
            {
                ThinkTime(25);
                scrollDownOpportunityEnterprise(driver, testInReport, testName, testDataIteration);

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Contact Details are available", "Companydetails displayed");

            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Contact Details  not available", "Companydetails not displayed");
                Assert.Fail("Contact Details not in the Account details  Table");

            }



            if (childAccounts1 > 0)
            {
                ThinkTime(25);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Org Details are available", "Orgdetails displayed");

            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Org Details  not available", "Orgdetails not displayed");
                Assert.Fail("Org Details not in the Account details  Table");

            }

        }

        public void Disablecontactdetails(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string Contact, string Details, string condition)
        {

            WaitUntil(driver, Control("ContactInfo", Contact, "Contacts"), 30);
            Element(driver, Control("ContactDetails", Details, "Contacts")).Click();
            ThinkTime(4);

            if (condition == "phone")
            {
                scrollDownContactPage(driver, testInReport, testName, testDataIteration);
                scrollDownContactPage(driver, testInReport, testName, testDataIteration);

                Element(driver, Control("Donotallowphone", "Contacts")).Click();
                ThinkTime(4);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "phone Details are available", "phone details displayed");
                // Save Footer
                saveFooter(driver, testInReport, testName, testDataIteration);
                ThinkTime(5);

            }

            if (condition == "contact")
            {
                Element(driver, Control("Donotallowcontact", "Contacts")).Click();
                ThinkTime(4);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "phone Details are available", "phone details displayed");
                // Save Footer
                saveFooter(driver, testInReport, testName, testDataIteration);
                ThinkTime(5);

            }


        }

        public void VerifycontactdetailsEnterpriseManager(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string Contact, string Details, string Personal, string Description, string Marketing, string Billing, string ContactPref, string Marital, string Spouse, string Birthday, string Anniversary, string Originating, string Campaign, string Material, string Currency, string Limit, string Hold, string Payment, string ContactMethod, string Email, string Followemail, string Bulkemail, string Mobile, string Fax, string Mail)
        {
            ThinkTime(5);
            string ContactSel = "Contact: Sales Customer";
            WaitUntil(driver, Control("ContactInfo", Contact, "Contacts"), 120);
            Element(driver, Control("SelectContact", "CommonObj")).Click();
            ThinkTime(2);
            WaitUntil(driver, Control("SelectExpectedCon", ContactSel, "CommonObj"), 120);
            Element(driver, Control("SelectExpectedCon", ContactSel, "CommonObj")).Click();
            ThinkTime(2);
            WaitUntil(driver, Control("ContactDetails", Details, "Contacts"), 120);
            Element(driver, Control("ContactDetails", Details, "Contacts")).Click();
            ThinkTime(4);
            int Personaldetails = Elements(driver, Control("ContactDetailsHeader", Personal, "Contacts"));
            int Descriptiondetails = Elements(driver, Control("ContactDetailsHeader", Description, "Contacts"));
            int Marketingdetails = Elements(driver, Control("ContactDetailsHeader", Marketing, "Contacts"));
            int Contactdetails = Elements(driver, Control("ContactDetailsHeader", Contact, "Contacts"));
            int Billingdetails = Elements(driver, Control("ContactDetailsHeader", Billing, "Contacts"));

            int Personal1 = Elements(driver, Control("ContactDetailPMBlabels", Marital, "Contacts"));
            int Personal2 = Elements(driver, Control("ContactDetailPMBlabels", Spouse, "Contacts"));
            int Personal3 = Elements(driver, Control("ContactDetailPMBlabels", Birthday, "Contacts"));
            int Personal4 = Elements(driver, Control("ContactDetailPMBlabels", Anniversary, "Contacts"));

            int Marketing1 = Elements(driver, Control("ContactDetailPMBlabels", Originating, "Contacts"));
            int Marketing2 = Elements(driver, Control("ContactDetailPMBlabels", Campaign, "Contacts"));
            int Marketing3 = Elements(driver, Control("ContactDetailPMBlabels", Material, "Contacts"));

            int Billing1 = Elements(driver, Control("ContactDetailPMBlabels", Currency, "Contacts"));
            int Billing2 = Elements(driver, Control("ContactDetailPMBlabels", Limit, "Contacts"));
            int Billing3 = Elements(driver, Control("ContactDetailPMBlabels", Hold, "Contacts"));
            int Billing4 = Elements(driver, Control("ContactDetailPMBlabels", Payment, "Contacts"));
            scrollDownOpportunityEnterprise(driver, testInReport, testName, testDataIteration);

            int Contact1 = Elements(driver, Control("ContactDetailClabels", ContactMethod, "Contacts"));
            int Contact2 = Elements(driver, Control("ContactDetailClabels", Email, "Contacts"));
            int Contact3 = Elements(driver, Control("ContactDetailClabels", Followemail, "Contacts"));
            int Contact4 = Elements(driver, Control("ContactDetailClabels", Bulkemail, "Contacts"));
            //int Contact5 = Elements(driver, Control("ContactDetailLabels", Mobile, "Contacts"));
            int Contact6 = Elements(driver, Control("ContactDetailClabels", Fax, "Contacts"));
            scrollDownOpportunityEnterprise(driver, testInReport, testName, testDataIteration);
            ThinkTime(2);
            int Contact7 = Elements(driver, Control("ContactDetailClabels", Mail, "Contacts"));


            if (Marketingdetails > 0)
            {
                ThinkTime(25);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Contact Details Headers are available", "Contactdetails displayed");

            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Contact Details Headers not available", "Contactdetails not displayed");
                Assert.Fail("Marketing Details Header not in the Contact Summary  Table");

            }

            if (Billingdetails > 0)
            {
                ThinkTime(25);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Contact Details Headers are available", "Contactdetails displayed");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Contact Details Headers not available", "Contactdetails not displayed");
                Assert.Fail("Billing Details Header not in the Contact Summary  Table");

            }

            if (Contactdetails > 0)
            {
                ThinkTime(25);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Contact Details Headers are available", "Contactdetails displayed");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Contact Details Headers not available", "Contactdetails not displayed");
                Assert.Fail("Contact Details Header not in the Contact Summary  Table");

            }

            if (Personaldetails > 0)
            {
                ThinkTime(25);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Contact Details Headers are available", "Contactdetails displayed");
                scrollDownOpportunityEnterprise(driver, testInReport, testName, testDataIteration);
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Contact Details Headers not available", "Contactdetails not displayed");
                Assert.Fail("Personal Details Header not in the Contact Summary  Table");

            }
            if (Descriptiondetails > 0)
            {
                ThinkTime(5);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Contact Details Headers are available", "Contactdetails displayed");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Contact Details Headers not available", "Contactdetails not displayed");
                Assert.Fail("Deescription Header not in the Contact Summary  Table");

            }

            if ((Personal1 > 0) && (Personal2 > 0) && (Personal3 > 0) && (Personal4 > 0))
            {
                ThinkTime(5);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Personal Details Headers are available", "Personal displayed");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Personal Details Headers not available", "Personal not displayed");
                Assert.Fail("Personal details not displayed");

            }


            if ((Marketing1 > 0) && (Marketing2 > 0) && (Marketing3 > 0))
            {
                ThinkTime(5);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Marketing Details Headers are available", "Marketing labels displayed");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Marketing Details Headers not available", "Marketing labels not displayed");
                Assert.Fail("Marketing labels not present");

            }

            if ((Billing1 > 0) && (Billing2 > 0) && (Billing3 > 0) && (Billing4 > 0))
            {
                ThinkTime(5);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Billing Details Headers are available", "Billing labels displayed");
                scrollDownOpportunityEnterprise(driver, testInReport, testName, testDataIteration);

            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Billing labels not present", "Billing labels not displayed");
                Assert.Fail("Billing labels not present");

            }

            if ((Contact1 > 0) && (Contact2 > 0) && (Contact3 > 0) && (Contact4 > 0) && (Contact6 > 0) && (Contact7 > 0))
            {
                ThinkTime(5);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Contact Details Headers are available", "Contact labels displayed");

            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Billing labels not present", "Contact labels not displayed");
                Assert.Fail("Contact labels not present");

            }
            scrollUpOpportunityEnterprise(driver, testInReport, testName, testDataIteration);
            scrollUpOpportunityEnterprise(driver, testInReport, testName, testDataIteration);
            ThinkTime(2);
            WaitUntil(driver, Control("ContactDetails", "Summary", "Contacts"), 30);
            Element(driver, Control("ContactDetails", "Summary", "Contacts")).Click();
            string ContactSel1 = "Contact: Customer";
            Element(driver, Control("SelectContact", "CommonObj")).Click();
            ThinkTime(2);
            Element(driver, Control("SelectExpectedCon", ContactSel1, "CommonObj")).Click();
        }

        //Verify corporate account is set to yes and Enterprise key account manager field is available
        public void VerifyAvailablefieldsinAccountsform(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string accountmanagerfield)
        {

            ThinkTime(10);
            IJavaScriptExecutor js = (IJavaScriptExecutor)driver;


            if (Elements(driver, Control("CorporateAccountYes", "Accounts")) > 0 && (Elements(driver, Control("AccountManager", "Accounts")) > 0))
            {
                js.ExecuteScript("arguments[0].scrollIntoView();", Element(driver, Control("CorporateAccountYes", "Accounts")));
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Corporate account Field is available with Yes value", "EnterpriseAccountForm");
                js.ExecuteScript("arguments[0].scrollIntoView();", Element(driver, Control("AccountManager", "Accounts")));
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", accountmanagerfield + "Field is available", "EnterpriseAccountForm");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Incorrect fields", "EnterpriseAccountForm");
                Assert.Fail("Fields as per requirements are not available");
            }
        }


        //Verify probability and Est.Close Date field are avilable in an opportunity
        public void OpportunityFieldVerification(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string field1, string field2)
        {
            WaitUntil(driver, Control("FieldVerification", field1, "Accounts"), 30);
            if (Elements(driver, Control("FieldVerification", field1, "Accounts")) > 0 && Elements(driver, Control("FieldVerification", field2, "Accounts")) > 0)
            {
                scrollMiddleOpportunityPage(driver, testInReport, testName, testDataIteration);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", field1 + "and" + field2 + "Fields are available", "EnterpriseOpportunityForm");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", field1 + "and" + field2 + "Fields are not available", "EnterpriseOpportunityForm");
                Assert.Fail(field1 + " and " + field2 + "Fields are not available in Enterprise Opportunity form");
            }
        }

        public void OpportunityBrokerverification(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string field1, string field2)
        {
            WaitUntil(driver, Control("FieldVerificationOppNew", "Accounts"), 30);
            if (Elements(driver, Control("FieldVerificationOppNew", "Accounts")) > 0 && Elements(driver, Control("FieldVerificationOppNew", "Accounts")) > 0)
            {
                scrollMiddleOpportunityPage(driver, testInReport, testName, testDataIteration);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", field1 + "and" + field2 + "Fields are available", "EnterpriseOpportunityForm");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", field1 + "and" + field2 + "Fields are not available", "EnterpriseOpportunityForm");
                Assert.Fail(field1 + " and " + field2 + "Fields are not available in Enterprise Opportunity form");
            }
        }






        //Advanced Find to Search bookable resource Characvterstics
        public string AdvancedFind(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {
            ThinkTime(2);
            WaitUntil(driver, Control("AdvancedFind", "Generic"), 60);
            Element(driver, Control("AdvancedFind", "Generic")).Click();
            ThinkTime(3);
            string parentWindowHandle = driver.CurrentWindowHandle;
            WindowHandling(driver);
            ThinkTime(1);
            driver.Manage().Window.Maximize();
            ThinkTime(5);
            return parentWindowHandle;

        }

        public void AdvancedfilterMyteamsOpenOpp(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string Looksfor, string view, string ownerlead)
        {
            ThinkTime(3);
            SwitchToFrame(driver, "contentIFrame0");
            Select(Element(driver, Control("Looksfordrop", "Generic"))).SelectByText(Looksfor);
            ThinkTime(5);
            Element(driver, Control("SavedQuerrySelector", "Generic")).Click();
            ThinkTime(3);
            Select(Element(driver, Control("SavedQuerrySelector", "Generic"))).SelectByText(view);
            ThinkTime(10);
            ThinkTime(2);
            int filter1 = Elements(driver, Control("OwnerFilter", "Generic"));
            int filter2 = Elements(driver, Control("UserTeamFilter", "Generic"));


            if (filter1 > 0 && filter2 > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "My Team’s Open Opportunities view has an additional filter for User’s Teams", "Tour Booked");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "My Team’s Open Opportunities view has an additional filter for User’s Teams", "Tour Booked");
                Assert.Fail("My Team’s Open Opportunities view has an additional filter for User’s Teams");
            }

            driver.Close();


        }

        public void AdvancedfindfilterSalesTeam(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string Looksfor, string view, string selectvalue, string equalcondition, string oppname, string Resultsbutton)
        {
            ThinkTime(3);
            SwitchToFrame(driver, "contentIFrame0");
            Select(Element(driver, Control("Looksfordrop", "Generic"))).SelectByText(Looksfor);
            ThinkTime(5);
            Element(driver, Control("SavedQuerrySelector", "Generic")).Click();
            ThinkTime(3);
            Select(Element(driver, Control("SavedQuerrySelector", "Generic"))).SelectByText(view);


            ThinkTime(8);
            WaitUntil(driver, Control("EqualNewValue", "Opportunity"), 60);
            ElementHighlight(driver, Control("EqualNewValue", "Opportunity"));
            //  MoveToElement(driver, Control("SelectFirstEqual", "Opportunity"));
            //ThinkTime(8);
            Element(driver, Control("EqualNewValue", "Opportunity")).Click();
            ThinkTime(8);
            Select(Element(driver, Control("SelectFirstEqual", "Opportunity"))).SelectByText(equalcondition);
            ThinkTime(8);

            WaitUntil(driver, Control("SecondEqualField", "Opportunity"), 60);
            Element(driver, Control("SecondEqualField", "Opportunity")).Click();
            ThinkTime(8);
            Element(driver, Control("EnterValueAdvFind", "Opportunity")).SendKeys(Keys.Control + "a");
            Element(driver, Control("EnterValueAdvFind", "Opportunity")).SendKeys(Keys.Delete);
            ThinkTime(2);
            Element(driver, Control("EnterValueAdvFind", "Opportunity")).SendKeys(oppname);
            ThinkTime(2);
            driver.SwitchTo().DefaultContent();
            ThinkTime(4);
            AddLog(driver, testInReport, testName, testDataIteration, "Pas", "Query added to find", "Query added to find");

            //// ActionsDoubleClick(driver, Control("AdvancefindEntervalue", "Opportunity"));

            Element(driver, Control("Results", "Generic")).Click();
            AddLog(driver, testInReport, testName, testDataIteration, "pass", "Results Verified", "Results Verified");
            ThinkTime(5);

        }

        public void VerifySalesTeamLanguage(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string SalesTeamName)
        {
            driver.SwitchTo().DefaultContent();
            string parentWindowHandle = driver.CurrentWindowHandle;
            WindowHandling(driver);
            ThinkTime(1);
            driver.Manage().Window.Maximize();
            ThinkTime(1);
            driver.SwitchTo().DefaultContent();
            driver.SwitchTo().DefaultContent();
            // HidingPureCloudNew(driver, testInReport, testName, testDataIteration);
            driver.SwitchTo().DefaultContent();
            ThinkTime(2);
            //  scrollDown(driver, testInReport, testName, testDataIteration);
            SelectRelatedTab(driver, testInReport, testName, testDataIteration, "Languages");
            AddLog(driver, testInReport, testName, testDataIteration, "Pas", "Language Verified", "Language verification");

            int Language1 = Elements(driver, Control("SalesTeamLanguage", "UK English", "Opportunity"));
            int Language2 = Elements(driver, Control("SalesTeamLanguage", "US English", "Opportunity"));
            int Language3 = Elements(driver, Control("SalesTeamLanguage", "Belgian French", "Opportunity"));
            int Language4 = Elements(driver, Control("SalesTeamLanguage", "Canadian French", "Opportunity"));
            int Language5 = Elements(driver, Control("SalesTeamLanguage", "French", "Opportunity"));
            int Language6 = Elements(driver, Control("SalesTeamLanguage", "Swiss French", "Opportunity"));
            int Language7 = Elements(driver, Control("SalesTeamLanguage", "Brazilian Portuguese", "Opportunity"));
            int Language8 = Elements(driver, Control("SalesTeamLanguage", "Portuguese", "Opportunity"));
            int Language9 = Elements(driver, Control("SalesTeamLanguage", "Spanish", "Opportunity"));
            int Language10 = Elements(driver, Control("SalesTeamLanguage", "LatAm Spanish", "Opportunity"));
            int Language11 = Elements(driver, Control("SalesTeamLanguage", "German", "Opportunity"));
            int Language12 = Elements(driver, Control("SalesTeamLanguage", "Swiss German", "Opportunity"));
            int Language13 = Elements(driver, Control("SalesTeamLanguage", "Italian", "Opportunity"));
            int Language14 = Elements(driver, Control("SalesTeamLanguage", "Swiss Italian", "Opportunity"));
            int Language15 = Elements(driver, Control("SalesTeamLanguage", "Cantonese", "Opportunity"));
            int Language16 = Elements(driver, Control("SalesTeamLanguage", "Traditional Chinese", "Opportunity"));

            string a = SalesTeamName;
            if (a.Equals("Barcelona Sales English") || a.Equals("Belfast Sales English") || a.Equals("Dallas Sales English") || a.Equals("Kuala Lumpur Sales English"))
            {
                if (Language1 > 0 && Language2 > 0)
                {

                    AddLog(driver, testInReport, testName, testDataIteration, "Pas", "Language Verified", "Contacttypeverification");

                }
                else
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Language not verified", "Contacttypeverification");
                    Assert.Fail(" Funtionality not Working");
                }
            }
            else if (a.Equals("Barcelona Sales French") || a.Equals("Dallas Sales French"))
            {
                if (Language3 > 0 && Language4 > 0 && Language5 > 0 && Language6 > 0)
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pas", "Language Verified", "Contacttypeverification");
                }
                else
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Language not verified", "Contacttypeverification");
                    Assert.Fail(" Funtionality not Working");
                }
            }
            else if (a.Equals("Barcelona Sales Portuguese") || a.Equals("Dallas Sales Portuguese"))
            {
                if (Language7 > 0 && Language8 > 0)
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pas", "Language Verified", "Contacttypeverification");
                }
                else
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Language not verified", "Contacttypeverification");
                    Assert.Fail(" Funtionality not Working");
                }
            }
            else if (a.Equals("Barcelona Sales Spanish") || a.Equals("Dallas Sales Spanish"))
            {
                if (Language9 > 0 && Language10 > 0)
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pas", "Language Verified", "Contacttypeverification");

                }
                else
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Language not verified", "Contacttypeverification");
                    Assert.Fail(" Funtionality not Working");
                }
            }
            else if (a.Equals("Barcelona Sales German"))
            {
                if (Language11 > 0 && Language12 > 0)
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pas", "Language Verified", "Contacttypeverification");

                }
                else
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Language not verified", "Contacttypeverification");
                    Assert.Fail(" Funtionality not Working");
                }
            }
            else if (a.Equals("Barcelona Sales Italian"))
            {
                if (Language13 > 0 && Language14 > 0)
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pas", "Language Verified", "Contacttypeverification");

                }
                else
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Language not verified", "Contacttypeverification");
                    Assert.Fail(" Funtionality not Working");
                }
            }
            else if (a.Equals("Kuala Lumpur Sales Chinese Cantonese"))
            {
                if (Language15 > 0 && Language16 > 0)
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pas", "Language Verified", "Contacttypeverification");

                }
                else
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Language not verified", "Contacttypeverification");
                    Assert.Fail(" Funtionality not Working");
                }
            }





            driver.Close();


        }

        public void SwitchToAdvancedFindfromResult(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {
            ThinkTime(3);
            driver.SwitchTo().DefaultContent();
            ThinkTime(4);
            WaitUntil(driver, Control("SwitchtoAdvncdFind", "Opportunity"), 60);
            Element(driver, Control("SwitchtoAdvncdFind", "Opportunity")).Click();
            ThinkTime(8);
            AddLog(driver, testInReport, testName, testDataIteration, "Pas", "Adv Find", "Adv Find");


        }





        public string AdvancedFindhidingpurecloudhandle(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {

            WaitUntil(driver, Control("AdvancedFind", "Generic"), 30);
            Element(driver, Control("AdvancedFind", "Generic")).Click();

            string parentWindowHandle = driver.CurrentWindowHandle;
            WindowHandling(driver);
            string parentWindowHandle1 = driver.CurrentWindowHandle;
            WindowHandling(driver);
            ThinkTime(1);
            driver.Manage().Window.Maximize();
            ThinkTime(5);
            return parentWindowHandle;

        }




        public void Advancedfindfilter(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string Looksfor, string selectvalue, string selectvalue2, string equalcondition, string selectvalue3, string oppname)
        {
            ThinkTime(6);
            SwitchToFrame(driver, "contentIFrame0");
            Select(Element(driver, Control("Looksfordrop", "Generic"))).SelectByText(Looksfor);
            ThinkTime(2);
            MoveToElement(driver, Control("AdvanceFindselect", "Opportunity"));
            ThinkTime(2);
            Element(driver, Control("AdvanceFindselect", "Opportunity")).Click();
            ThinkTime(1);
            Select(Element(driver, Control("AdvancefindSelectvalue", "Opportunity"))).SelectByText(selectvalue);
            ThinkTime(2);
            MoveToElement(driver, Control("Equalcondition", "Opportunity"));
            ThinkTime(2);
            Element(driver, Control("Equalcondition", "Opportunity")).Click();
            ThinkTime(1);
            Select(Element(driver, Control("Equalcondition", "Opportunity"))).SelectByText(equalcondition);
            ThinkTime(2);
            MoveToElement(driver, Control("AdvanceFindselect", "Opportunity"));
            ThinkTime(2);
            //Element(driver, Control("AdvanceFindselect", "Opportunity")).Click();
            ThinkTime(1);
            Select(Element(driver, Control("AdvancefindSelectvalue", "Opportunity"))).SelectByText(selectvalue2);
            ThinkTime(3);
            ElementHighlight(driver, Control("Advancefiindlastselect", "Opportunity"));
            ThinkTime(3);
            MoveToElement(driver, Control("Advancefiindlastselect", "Opportunity"));
            ThinkTime(3);
            Select(Element(driver, Control("AdvancefindSelectvalue_1", "Opportunity"))).SelectByText(selectvalue3);
            ThinkTime(2);

            MoveToElement(driver, Control("AdvancefindEntervalue", "Opportunity"));
            ThinkTime(3);
            Element(driver, Control("AdvancefindValuelookup", "Opportunity")).Click();
            ThinkTime(5);
            //SwitchToFrame(driver, "resultFrame");
            //ThinkTime(3);
            driver.SwitchTo().DefaultContent();
            ThinkTime(2);
            //SwitchToFrame(driver, "contentIFrame0");
            //ThinkTime(8);
            SwitchToFrame(driver, "InlineDialog_Iframe");
            ThinkTime(5);

            Element(driver, Control("Advancefindvalue", "Opportunity")).SendKeys(oppname);
            ThinkTime(1);
            Element(driver, Control("Advancefindsearchopp", "Opportunity")).Click();
            ThinkTime(3);
            Element(driver, Control("SelectCheckbox1", "Opportunity")).Click();
            ThinkTime(3);
            Element(driver, Control("Addopp", "Opportunity")).Click();
            ThinkTime(3);
            Element(driver, Control("AdvancefindAddbutton", "Opportunity")).Click();
            ThinkTime(3);

            // ActionsDoubleClick(driver, Control("AdvancefindEntervalue", "Opportunity"));
            ThinkTime(1);
            driver.SwitchTo().DefaultContent();
            Element(driver, Control("Results", "Generic")).Click();
            AddLog(driver, testInReport, testName, testDataIteration, "pass", "Results Verified", "Results Verified");
            ThinkTime(5);



        }


        public void OpenSecondActiveRecord(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(3);
            WaitUntil(driver, Control("BookableResourceRecord2", "Opportunity"), 30);
            ActionsDoubleClick(driver, Control("BookableResourceRecord2", "Opportunity"));

            ThinkTime(7);
        }


        public string VerifyBookableResourceReadOnlyStatus(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(10);
            driver.SwitchTo().DefaultContent();
            string parentWindowHandle = driver.CurrentWindowHandle;
            WindowHandling(driver);
            ThinkTime(1);
            driver.Manage().Window.Maximize();
            ThinkTime(5);
            WaitUntil(driver, Control("RatingValue", "Opportunity"), 30);
            if (Elements(driver, Control("RatingValue", "Opportunity")) > 0)

            {
                ThinkTime(4);
                ActionsClick(driver, Control("RatingValue", "Opportunity"));
                ThinkTime(3);
                VerifyReadOnlyStatus(driver, testInReport, testName, testDataIteration);
                ThinkTime(3);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Record is read-only", "DashBoard Role");


            }
            else
            {
                Assert.Fail("Record not Read only");
            }

            ThinkTime(7);
            return parentWindowHandle;
        }


        public string ChangeRatingValue(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {

            ThinkTime(10);
            driver.SwitchTo().DefaultContent();
            string parentWindowHandle = driver.CurrentWindowHandle;
            WindowHandling(driver);
            ThinkTime(1);
            driver.Manage().Window.Maximize();
            ThinkTime(5);

            // Enter Rating Value
            WaitUntil(driver, Control("RatingValue", "Opportunity"), 30);
            MoveToElement(driver, Control("RatingValue", "Opportunity"));
            Element(driver, Control("RatingValue", "Opportunity")).SendKeys(Keys.Control + "a");
            Element(driver, Control("RatingValue", "Opportunity")).SendKeys(Keys.Delete);
            Element(driver, Control("RatingValue", "Opportunity")).SendKeys("3");
            Element(driver, Control("RatingDropValue", "Opportunity")).Click();

            WaitUntil(driver, Control("SaveBookableResource", "Generic"), 360);
            Element(driver, Control("SaveBookableResource", "Generic")).Click();

            ThinkTime(15);
            return parentWindowHandle;


        }


        //Verifying Adding of Sales Assist Connections in Opportunity is denied.
        public void VerifyAddSalesAssistConnectionDenied(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {

            ThinkTime(10);
            //Select Coonect
            WaitUntil(driver, Control("Connect", "Generic"), 30);
            MoveToElement(driver, Control("Connect", "Generic"));
            Element(driver, Control("Connect", "Generic")).Click();
            ThinkTime(10);
            //Filling up name and role
            WaitUntil(driver, Control("NameInput", "Generic"), 30);
            MoveToElement(driver, Control("NameInput", "Generic"));
            Element(driver, Control("NameInput", "Generic")).Click();
            Element(driver, Control("NameInput", "Generic")).SendKeys(Keys.Control + "a");
            Element(driver, Control("NameInput", "Generic")).SendKeys(Keys.Delete);
            Element(driver, Control("NameInput", "Generic")).SendKeys("CRM TEST 10");
            Element(driver, Control("NameLookUp", "Generic")).Click();
            ThinkTime(10);
            Element(driver, Control("SelectName", "Generic")).Click();

            WaitUntil(driver, Control("RoleInput", "Generic"), 30);
            MoveToElement(driver, Control("RoleInput", "Generic"));
            Element(driver, Control("RoleInput", "Generic")).Click();
            Element(driver, Control("RoleInput", "Generic")).SendKeys(Keys.Control + "a");
            Element(driver, Control("RoleInput", "Generic")).SendKeys(Keys.Delete);
            Element(driver, Control("RoleInput", "Generic")).SendKeys("Sales Assist");
            Element(driver, Control("RoleLookUp", "Generic")).Click();
            ThinkTime(10);
            Element(driver, Control("RoleSelect", "Generic")).Click();

            saveFooter(driver, testInReport, testName, testDataIteration);

            ThinkTime(3);

            if (Elements(driver, Control("AccessDenied", "Generic")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Access is denied for Manual addition of Sales Assist in Connections", "Sales Assist Addition");
                Element(driver, Control("ErrorOK", "Generic")).Click();
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Manual addition of Sales Assist in Connections is allowed", "Sales Assist Addition");
                Assert.Fail("Sales Assist addition in Connection Allowed");
            }
        }


        //Verifying Adding of Sales Assist Connections in Opportunity is allowed.
        public void VerifyAddSalesAssistConnectionAllowed(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string name, string cell)
        {
            string salesassist = "Sales Assist";
            Console.WriteLine(salesassist);
            ThinkTime(10);
            //Select Coonect
            WaitUntil(driver, Control("Connect", "Generic"), 30);
            MoveToElement(driver, Control("Connect", "Generic"));
            Element(driver, Control("Connect", "Generic")).Click();
            ThinkTime(10);
            //Filling up name and role
            WaitUntil(driver, Control("NameInput", "Generic"), 120);
            MoveToElement(driver, Control("NameInput", "Generic"));
            Element(driver, Control("NameInput", "Generic")).Click();
            Element(driver, Control("NameInput", "Generic")).SendKeys(Keys.Control + "a");
            Element(driver, Control("NameInput", "Generic")).SendKeys(Keys.Delete);
            Element(driver, Control("NameInput", "Generic")).SendKeys(name);
            ThinkTime(2);
            WaitUntil(driver, Control("Languagedropdown", "EnterpriseSales"), 60);
            Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();

            ThinkTime(2);
            WaitUntil(driver, Control("RoleInput", "Generic"), 60);
            MoveToElement(driver, Control("RoleInput", "Generic"));
            Element(driver, Control("RoleInput", "Generic")).Click();
            Element(driver, Control("RoleInput", "Generic")).SendKeys(Keys.Control + "a");
            Element(driver, Control("RoleInput", "Generic")).SendKeys(Keys.Delete);
            Element(driver, Control("RoleInput", "Generic")).SendKeys("Sales Assist");
            //Element(driver, Control("RoleLookUp", "Generic")).Click();
            ThinkTime(10);
            Element(driver, Control("selectrole", "EnterpriseSales")).Click();

            saveFooter(driver, testInReport, testName, testDataIteration);

            ThinkTime(5);
            Element(driver, Control("Details", "Generic")).Click();
            ThinkTime(5);
            Element(driver, Control("ConnectedFrom", "Generic")).Click();
            ThinkTime(15);
            SelectRelatedTab(driver, testInReport, testName, testDataIteration, "Connections");
            ThinkTime(5);
            if (Elements(driver, Control("ConnectedTo", name, "phoneCall")) > 0 && (Elements(driver, Control("RoleToSalesassist", salesassist, "EnterpriseSales")) > 0))
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "User Linked to the Opp as Sales Assist", "Sales Assist Connection Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "User not Linked to the Opp as Sales Assist", "Sales Assist Connection Verification");
                Assert.Fail("Sales Assist Connection Verification Failed");
            }


        }




        public void AdvancedfindfilterBookableCharLocation(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string looksfor, string view, string selectvalue1, string equals, string equalvalue1, string selectvalue2, string equalvalue2, string selectvalue3, string equalvalue3, string Resultsbutton)
        {
            ThinkTime(3);
            SwitchToFrame(driver, "contentIFrame0");
            Select(Element(driver, Control("Looksfordrop", "Generic"))).SelectByText(looksfor);
            ThinkTime(5);
            Element(driver, Control("SavedQuerrySelector", "Generic")).Click();
            ThinkTime(3);
            Select(Element(driver, Control("SavedQuerrySelector", "Generic"))).SelectByText(view);
            MoveToElement(driver, Control("AdvanceFindselect", "Opportunity"));
            ThinkTime(2);
            Element(driver, Control("AdvanceFindselect", "Opportunity")).Click();
            ThinkTime(1);
            Select(Element(driver, Control("AdvancefindSelectvalue", "Opportunity"))).SelectByText(selectvalue1);
            ThinkTime(2);
            MoveToElement(driver, Control("Equalcondition", "Opportunity"));
            ThinkTime(4);
            Element(driver, Control("Equalcondition", "Opportunity")).Click();
            ThinkTime(1);
            Select(Element(driver, Control("Equalcondition", "Opportunity"))).SelectByText(equals);
            ThinkTime(2);
            WaitUntil(driver, Control("AdvFindOppRefValue", "Opportunity"), 60);
            Element(driver, Control("AdvFindOppRefValue", "Opportunity")).Click();
            ThinkTime(2);
            WaitUntil(driver, Control("AdvFindSelectOptionButton", "Opportunity"), 60);
            Element(driver, Control("AdvFindSelectOptionButton", "Opportunity")).Click();
            ThinkTime(15);
            driver.SwitchTo().DefaultContent();
            ThinkTime(3);

            SwitchToFrame(driver, "InlineDialog_Iframe");
            ThinkTime(4);
            WaitUntil(driver, Control("ActiveButton", "Opportunity"), 60);
            Element(driver, Control("ActiveButton", "Opportunity")).Click();
            ThinkTime(5);
            Element(driver, Control("MoveRight", "Opportunity")).Click();
            ThinkTime(5);
            Element(driver, Control("AdvancefindAddbutton", "Opportunity")).Click();
            ThinkTime(6);
            SwitchToFrame(driver, "contentIFrame0");
            //ThinkTime(4);
            //MoveToElement(driver, Control("AdvanceFindselect", "Opportunity"));
            //ThinkTime(3);
            //Element(driver, Control("AdvanceFindselect", "Opportunity")).Click();
            //ThinkTime(2);
            //Select(Element(driver, Control("AdvancefindSelectvalue", "Opportunity"))).SelectByText(selectvalue2);
            //ThinkTime(3);
            //MoveToElement(driver, Control("Equalcondition", "Opportunity"));
            //ThinkTime(3);
            //Element(driver, Control("Equalcondition", "Opportunity")).Click();
            //ThinkTime(2);
            //Select(Element(driver, Control("Equalcondition", "Opportunity"))).SelectByText(equals);
            //ThinkTime(2);
            //WaitUntil(driver, Control("EqualValue2", "Opportunity"), 60);
            //Element(driver, Control("AdvancefindSelectvalue", "Opportunity")).SendKeys(Keys.Tab);
            //MoveToElement(driver, Control("EqualValue2", "Opportunity"));
            //Element(driver, Control("EqualValue2", "Opportunity")).Click();
            //ThinkTime(3);
            //Element(driver, Control("EqualValue2", "Opportunity")).SendKeys(equalvalue2);
            //ThinkTime(2);
            //WaitUntil(driver, Control("ValueLookup", "Opportunity"), 120);
            //Element(driver, Control("ValueLookup", "Opportunity")).Click();
            //ThinkTime(3);

            //MoveToElement(driver, Control("AdvanceFindselect", "Opportunity"));
            //ThinkTime(2);
            //Element(driver, Control("AdvanceFindselect", "Opportunity")).Click();
            //ThinkTime(1);
            //Select(Element(driver, Control("AdvancefindSelectvalue", "Opportunity"))).SelectByText(selectvalue3);
            //ThinkTime(2);
            //// MoveToElement(driver, Control("EqualCondtn3", "Opportunity"));
            // ThinkTime(2);
            // Element(driver, Control("EqualCondtn3", "Opportunity")).Click();
            // ThinkTime(1);
            // Select(Element(driver, Control("EqualCondtn3", "Opportunity"))).SelectByText(equals);
            // ThinkTime(2);
            // WaitUntil(driver, Control("EqualValue3", "Opportunity"), 60);
            // Element(driver, Control("EqualValue3", "Opportunity")).Click();
            // ThinkTime(2);
            // Element(driver, Control("EqualValue3", "Opportunity")).SendKeys(equalvalue3);
            //ThinkTime(1);
            //WaitUntil(driver, Control("ValueLookup", "Opportunity"), 60);
            //Element(driver, Control("ValueLookup", "Opportunity")).Click();
            ThinkTime(3);

            // ActionsDoubleClick(driver, Control("AdvancefindEntervalue", "Opportunity"));
            Element(driver, Control("Results", "Generic")).Click();
            AddLog(driver, testInReport, testName, testDataIteration, "pass", "Results Verified", "Results Verified");
            ThinkTime(5);

        }





        public void advancefindfiltertourinopp(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string Looksfor, string selectvalue, string equalcondition, string oppname)
        {
            ThinkTime(3);
            SwitchToFrame(driver, "contentIFrame0");
            Select(Element(driver, Control("Looksfordrop", "Generic"))).SelectByText(Looksfor);
            ThinkTime(5);
            Element(driver, Control("SavedQuerrySelector", "Generic")).Click();
            ThinkTime(3);

            ThinkTime(2);
            Element(driver, Control("AdvanceFindselect", "Opportunity")).Click();
            ThinkTime(1);
            Select(Element(driver, Control("AdvancefindSelectvalue", "Opportunity"))).SelectByText(selectvalue);
            ThinkTime(2);
            MoveToElement(driver, Control("Equalcondition", "Opportunity"));
            ThinkTime(2);
            Element(driver, Control("Equalcondition", "Opportunity")).Click();
            ThinkTime(1);
            Select(Element(driver, Control("Equalcondition", "Opportunity"))).SelectByText(equalcondition);
            ThinkTime(2);


            MoveToElement(driver, Control("Selectvalue", "Opportunity"));
            //Element(driver, Control("Selectvalue", "Opportunity")).Click();

            ThinkTime(3);
            Element(driver, Control("AdvancefindValuelookup", "Opportunity")).Click();
            ThinkTime(5);
            //SwitchToFrame(driver, "resultFrame");
            //ThinkTime(3);
            driver.SwitchTo().DefaultContent();
            ThinkTime(2);
            //SwitchToFrame(driver, "contentIFrame0");
            //ThinkTime(8);
            SwitchToFrame(driver, "InlineDialog_Iframe");
            ThinkTime(5);

            Element(driver, Control("Advancefindvalue", "Opportunity")).SendKeys(oppname);
            ThinkTime(1);
            Element(driver, Control("Advancefindsearchopp", "Opportunity")).Click();
            ThinkTime(5);
            Element(driver, Control("SortOpportunity", "Opportunity")).Click();
            ThinkTime(5);
            Element(driver, Control("SelectCheckbox1", "Opportunity")).Click();
            ThinkTime(5);
            Element(driver, Control("Addopp", "Opportunity")).Click();
            ThinkTime(3);
            Element(driver, Control("AdvancefindAddbutton", "Opportunity")).Click();
            ThinkTime(3);

            driver.SwitchTo().DefaultContent();

            ThinkTime(4);
            WaitUntil(driver, Control("EditColumnEmail", "GenericOld"), 60);
            Element(driver, Control("EditColumnEmail", "GenericOld")).Click();
            ThinkTime(4);

            SwitchToFrame(driver, "InlineDialog_Iframe");
            ThinkTime(4);
            SwitchToFrame(driver, "viewEditor");
            ThinkTime(3);
            WaitUntil(driver, Control("AddColumns", "GenericOld"), 60);
            Element(driver, Control("AddColumns", "GenericOld")).Click();
            ThinkTime(4);
            driver.SwitchTo().DefaultContent();
            SwitchToFrame(driver, "InlineDialog1_Iframe");
            WaitUntil(driver, Control("Tourremainder", "Opportunity"), 60);
            Element(driver, Control("Tourremainder", "Opportunity")).Click();
            ThinkTime(4);
            WaitUntil(driver, Control("Okbutton", "GenericOld"), 60);
            Element(driver, Control("Okbutton", "GenericOld")).Click();
            ThinkTime(4);


            driver.SwitchTo().DefaultContent();
            SwitchToFrame(driver, "InlineDialog_Iframe");
            //SwitchToFrame(driver, "viewEditor");
            ThinkTime(4);
            WaitUntil(driver, Control("EditColumnOK", "GenericOld"), 60);
            Element(driver, Control("EditColumnOK", "GenericOld")).Click();
            driver.SwitchTo().DefaultContent();
            ThinkTime(4);

            driver.SwitchTo().DefaultContent();


            Element(driver, Control("Results", "Generic")).Click();
            AddLog(driver, testInReport, testName, testDataIteration, "pass", "Results Verified", "Results Verified");
            ThinkTime(5);



        }

        public void Advancedfindfilteresults(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string Looksfor, string view, string selectvalue, string equalcondition, string oppname, string Resultsbutton, string addcolumn)
        {
            ThinkTime(3);
            SwitchToFrame(driver, "contentIFrame0");
            Select(Element(driver, Control("Looksfordrop", "Generic"))).SelectByText(Looksfor);
            ThinkTime(5);
            Element(driver, Control("SavedQuerrySelector", "Generic")).Click();
            ThinkTime(3);
            Select(Element(driver, Control("SavedQuerrySelector", "Generic"))).SelectByText(view);
            ThinkTime(2);
            MoveToElement(driver, Control("AdvanceFindselect", "Opportunity"));
            ThinkTime(2);
            Element(driver, Control("AdvanceFindselect", "Opportunity")).Click();
            ThinkTime(1);
            Select(Element(driver, Control("AdvancefindSelectvalue", "Opportunity"))).SelectByText(selectvalue);
            ThinkTime(2);
            MoveToElement(driver, Control("Equalcondition", "Opportunity"));
            ThinkTime(2);
            //Element(driver, Control("Equalcondition", "Opportunity")).Click();
            //ThinkTime(1);
            //Select(Element(driver, Control("Equalcondition", "Opportunity"))).SelectByText(equalcondition);
            //ThinkTime(2);

            if (Elements(driver, Control("Entertextadvfind", "Opportunity")) > 0)
            {

                WaitUntil(driver, Control("AdvFindOppRefValue", "Opportunity"), 60);
                Element(driver, Control("AdvFindOppRefValue", "Opportunity")).Click();
                ThinkTime(2);
                //MoveToElement(driver, Control("Entertextadvfind", "Opportunity"));
                //ThinkTime(3);
                //WaitUntil(driver, Control("Entertextvalueadvfind", "Opportunity"), 60);
                //ElementHighlight(driver, Control("Entertextvalueadvfind", "Opportunity"));
                //Element(driver, Control("Entertextvalueadvfind", "Opportunity")).Click();
                //ThinkTime(2);
                Element(driver, Control("Entertextvalueadvfind", "Opportunity")).SendKeys(oppname);
                ThinkTime(2);

            }
            else
            {
                WaitUntil(driver, Control("EnterValue", "Opportunity"), 60);
                Element(driver, Control("EnterValue", "Opportunity")).Click();
                ThinkTime(2);
                MoveToElement(driver, Control("EnterValue", "Opportunity"));
                ThinkTime(3);


                Element(driver, Control("AdvancefindValuelookup", "Opportunity")).Click();
                ThinkTime(5);

                driver.SwitchTo().DefaultContent();
                ThinkTime(2);
                SwitchToFrame(driver, "InlineDialog_Iframe");
                ThinkTime(5);

                Element(driver, Control("Advancefindvalue", "Opportunity")).SendKeys(oppname);
                ThinkTime(1);
                Element(driver, Control("Advancefindsearchopp", "Opportunity")).Click();
                ThinkTime(5);
                Element(driver, Control("SortOpportunity", "Opportunity")).Click();
                ThinkTime(5);
                Element(driver, Control("SelectCheckbox1", "Opportunity")).Click();
                ThinkTime(5);
                Element(driver, Control("Addopp", "Opportunity")).Click();
                ThinkTime(3);
                Element(driver, Control("AdvancefindAddbutton", "Opportunity")).Click();
                ThinkTime(3);

            }

            ThinkTime(4);
            driver.SwitchTo().DefaultContent();
            ThinkTime(3);

            if (addcolumn != "")
            {
                WaitUntil(driver, Control("EditColumnEmail", "GenericOld"), 60);
                Element(driver, Control("EditColumnEmail", "GenericOld")).Click();
                ThinkTime(4);

                SwitchToFrame(driver, "InlineDialog_Iframe");
                ThinkTime(4);
                SwitchToFrame(driver, "viewEditor");
                ThinkTime(3);
                WaitUntil(driver, Control("AddColumns", "GenericOld"), 60);
                Element(driver, Control("AddColumns", "GenericOld")).Click();
                ThinkTime(4);
                //Changing record type
                driver.SwitchTo().DefaultContent();
                SwitchToFrame(driver, "InlineDialog1_Iframe");
                ThinkTime(2);
                WaitUntil(driver, Control("Addcolumnfromlist", addcolumn, "GenericOld"), 60);
                ElementHighlight(driver, Control("Addcolumnfromlist", addcolumn, "GenericOld"));
                ThinkTime(2);
                Element(driver, Control("Addcolumnfromlist", addcolumn, "GenericOld")).Click();

                WaitUntil(driver, Control("Okbutton", "GenericOld"), 60);
                Element(driver, Control("Okbutton", "GenericOld")).Click();
                ThinkTime(4);
                driver.SwitchTo().DefaultContent();
                SwitchToFrame(driver, "InlineDialog_Iframe");

                ThinkTime(4);
                WaitUntil(driver, Control("EditColumnOK", "GenericOld"), 60);
                Element(driver, Control("EditColumnOK", "GenericOld")).Click();
                driver.SwitchTo().DefaultContent();
                ThinkTime(4);
            }
            Element(driver, Control("Results", "Generic")).Click();
            AddLog(driver, testInReport, testName, testDataIteration, "pass", "Results Verified", "Results Verified");
            ThinkTime(5);

        }












        public void AdvancedfindfilterCurrency(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string Looksfor, string view, string selectvalue, string equalcondition, string oppname, string Resultsbutton)
        {
            ThinkTime(3);
            SwitchToFrame(driver, "contentIFrame0");
            Select(Element(driver, Control("Looksfordrop", "Generic"))).SelectByText(Looksfor);
            ThinkTime(5);
            Element(driver, Control("SavedQuerrySelector", "Generic")).Click();
            ThinkTime(3);
            Select(Element(driver, Control("SavedQuerrySelector", "Generic"))).SelectByText(view);
            MoveToElement(driver, Control("AdvanceFindselect", "Opportunity"));
            ThinkTime(2);
            Element(driver, Control("AdvanceFindselect", "Opportunity")).Click();
            ThinkTime(1);
            Select(Element(driver, Control("AdvancefindSelectvalue", "Opportunity"))).SelectByText(selectvalue);
            ThinkTime(2);
            MoveToElement(driver, Control("Equalcondition", "Opportunity"));
            ThinkTime(2);
            Element(driver, Control("Equalcondition", "Opportunity")).Click();
            ThinkTime(1);
            Select(Element(driver, Control("Equalcondition", "Opportunity"))).SelectByText(equalcondition);
            ThinkTime(2);
            WaitUntil(driver, Control("AdvFindOppRefValue", "Opportunity"), 60);
            Element(driver, Control("AdvFindOppRefValue", "Opportunity")).Click();
            ThinkTime(2);
            WaitUntil(driver, Control("AdvFindEnterOppRef", "Opportunity"), 30);
            Element(driver, Control("AdvFindEnterOppRef", "Opportunity")).SendKeys(oppname);
            ThinkTime(2);
            //WaitUntil(driver, Control("AdvancefindResults", "Opportunity"), 60);
            //Element(driver, Control("AdvancefindResults", "Opportunity")).Click();
            //ThinkTime(5);
            //Element(driver, Control("SortOpportunity", "Opportunity")).Click();
            //ThinkTime(5);
            //Element(driver, Control("SelectCheckbox1", "Opportunity")).Click();
            //ThinkTime(5);
            //Element(driver, Control("Addopp", "Opportunity")).Click();
            //ThinkTime(3);
            //Element(driver, Control("AdvancefindAddbutton", "Opportunity")).Click();
            //ThinkTime(3);


            ThinkTime(4);
            driver.SwitchTo().DefaultContent();
            ThinkTime(3);
            WaitUntil(driver, Control("EditColumnEmail", "GenericOld"), 60);
            Element(driver, Control("EditColumnEmail", "GenericOld")).Click();
            ThinkTime(4);

            SwitchToFrame(driver, "InlineDialog_Iframe");
            ThinkTime(4);
            SwitchToFrame(driver, "viewEditor");
            ThinkTime(3);
            WaitUntil(driver, Control("AddColumns", "GenericOld"), 60);
            Element(driver, Control("AddColumns", "GenericOld")).Click();
            ThinkTime(4);
            //driver.SwitchTo().DefaultContent();
            //SwitchToFrame(driver, "InlineDialog1_Iframe");
            //WaitUntil(driver, Control("CountryEditCoulmn", "Opportunity"), 60);
            //Element(driver, Control("CountryEditCoulmn", "Opportunity")).Click();
            //ThinkTime(4);
            //WaitUntil(driver, Control("CurrencyEditColumn", "Opportunity"), 60);
            //Element(driver, Control("CurrencyEditColumn", "Opportunity")).Click();
            //ThinkTime(4);
            //WaitUntil(driver, Control("EstRevenueEditColumn", "Opportunity"), 60);
            //Element(driver, Control("EstRevenueEditColumn", "Opportunity")).Click();
            //ThinkTime(4);

            //Changing record type
            driver.SwitchTo().DefaultContent();
            SwitchToFrame(driver, "InlineDialog1_Iframe");
            ThinkTime(2);
            WaitUntil(driver, Control("RecordType1", "GenericOld"), 60);
            ElementHighlight(driver, Control("RecordType1", "GenericOld"));
            ThinkTime(2);
            Element(driver, Control("RecordType1", "GenericOld")).Click();
            ThinkTime(2);
            Select(Element(driver, Control("RecordType1", "GenericOld"))).SelectByText("Currency (Currency)");
            ThinkTime(2);
            driver.SwitchTo().DefaultContent();
            SwitchToFrame(driver, "InlineDialog1_Iframe");
            ThinkTime(2);
            WaitUntil(driver, Control("CurrencyCodeEditColumn", "Opportunity"), 60);
            Element(driver, Control("CurrencyCodeEditColumn", "Opportunity")).Click();
            ThinkTime(4);
            WaitUntil(driver, Control("CurrencySymbolEditColumn", "Opportunity"), 60);
            Element(driver, Control("CurrencySymbolEditColumn", "Opportunity")).Click();
            ThinkTime(4);
            WaitUntil(driver, Control("Okbutton", "GenericOld"), 60);
            Element(driver, Control("Okbutton", "GenericOld")).Click();
            ThinkTime(4);
            driver.SwitchTo().DefaultContent();
            SwitchToFrame(driver, "InlineDialog_Iframe");
            //SwitchToFrame(driver, "viewEditor");
            ThinkTime(4);
            WaitUntil(driver, Control("EditColumnOK", "GenericOld"), 60);
            Element(driver, Control("EditColumnOK", "GenericOld")).Click();
            driver.SwitchTo().DefaultContent();
            ThinkTime(4);




            // ActionsDoubleClick(driver, Control("AdvancefindEntervalue", "Opportunity"));

            Element(driver, Control("Results", "Generic")).Click();
            AddLog(driver, testInReport, testName, testDataIteration, "pass", "Results Verified", "Results Verified");
            ThinkTime(5);



            //driver.SwitchTo().DefaultContent();
            ////MoveToElement(driver, Control("advFindRibbons", Resultsbutton, "Generic"));
            //Element(driver, Control("advFindRibbons", Resultsbutton, "Generic")).Click();


        }

        public void AdvancedfindfilterWithCntry(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string Looksfor, string selectvalue, string selectvalue2, string equalcondition, string selectvalue3, string oppname)
        {
            ThinkTime(6);
            SwitchToFrame(driver, "contentIFrame0");

            Select(Element(driver, Control("Looksfordrop", "Generic"))).SelectByText(Looksfor);
            ThinkTime(2);
            MoveToElement(driver, Control("AdvanceFindselect", "Opportunity"));
            ThinkTime(2);
            Element(driver, Control("AdvanceFindselect", "Opportunity")).Click();
            ThinkTime(1);
            Select(Element(driver, Control("AdvancefindSelectvalue", "Opportunity"))).SelectByText(selectvalue);
            ThinkTime(2);
            MoveToElement(driver, Control("Equalcondition", "Opportunity"));
            ThinkTime(2);
            Element(driver, Control("Equalcondition", "Opportunity")).Click();
            ThinkTime(1);
            Select(Element(driver, Control("Equalcondition", "Opportunity"))).SelectByText(equalcondition);
            ThinkTime(2);
            MoveToElement(driver, Control("AdvanceFindselect", "Opportunity"));
            ThinkTime(2);
            //Element(driver, Control("AdvanceFindselect", "Opportunity")).Click();
            ThinkTime(1);
            Select(Element(driver, Control("AdvancefindSelectvalue", "Opportunity"))).SelectByText(selectvalue2);
            ThinkTime(3);
            ElementHighlight(driver, Control("Advancefiindlastselect", "Opportunity"));
            ThinkTime(3);
            MoveToElement(driver, Control("Advancefiindlastselect", "Opportunity"));
            ThinkTime(3);
            Select(Element(driver, Control("AdvancefindSelectvalue_1", "Opportunity"))).SelectByText(selectvalue3);
            ThinkTime(2);

            MoveToElement(driver, Control("AdvancefindEntervalue", "Opportunity"));
            ThinkTime(3);
            Element(driver, Control("AdvancefindValuelookup", "Opportunity")).Click();
            ThinkTime(5);
            //SwitchToFrame(driver, "resultFrame");
            //ThinkTime(3);
            driver.SwitchTo().DefaultContent();
            ThinkTime(2);
            //SwitchToFrame(driver, "contentIFrame0");
            //ThinkTime(8);
            SwitchToFrame(driver, "InlineDialog_Iframe");
            ThinkTime(5);

            Element(driver, Control("Advancefindvalue", "Opportunity")).SendKeys(oppname);
            ThinkTime(1);
            Element(driver, Control("Advancefindsearchopp", "Opportunity")).Click();
            ThinkTime(5);
            Element(driver, Control("SortOpportunity", "Opportunity")).Click();
            ThinkTime(5);
            Element(driver, Control("SelectCheckbox1", "Opportunity")).Click();
            ThinkTime(5);
            Element(driver, Control("Addopp", "Opportunity")).Click();
            ThinkTime(3);
            Element(driver, Control("AdvancefindAddbutton", "Opportunity")).Click();
            ThinkTime(3);


            ThinkTime(4);
            WaitUntil(driver, Control("EditColumnEmail", "GenericOld"), 60);
            Element(driver, Control("EditColumnEmail", "GenericOld")).Click();
            ThinkTime(4);

            SwitchToFrame(driver, "InlineDialog_Iframe");
            ThinkTime(4);
            SwitchToFrame(driver, "viewEditor");
            ThinkTime(3);
            WaitUntil(driver, Control("AddColumns", "GenericOld"), 60);
            Element(driver, Control("AddColumns", "GenericOld")).Click();
            ThinkTime(4);
            driver.SwitchTo().DefaultContent();
            SwitchToFrame(driver, "InlineDialog1_Iframe");
            WaitUntil(driver, Control("CreatedOn", "GenericOld"), 60);
            Element(driver, Control("CreatedOn", "GenericOld")).Click();
            ThinkTime(4);
            WaitUntil(driver, Control("Okbutton", "GenericOld"), 60);
            Element(driver, Control("Okbutton", "GenericOld")).Click();
            ThinkTime(4);
            driver.SwitchTo().DefaultContent();
            SwitchToFrame(driver, "InlineDialog_Iframe");
            //SwitchToFrame(driver, "viewEditor");
            ThinkTime(4);
            WaitUntil(driver, Control("EditColumnOK", "GenericOld"), 60);
            Element(driver, Control("EditColumnOK", "GenericOld")).Click();
            driver.SwitchTo().DefaultContent();
            ThinkTime(4);




            // ActionsDoubleClick(driver, Control("AdvancefindEntervalue", "Opportunity"));

            Element(driver, Control("Results", "Generic")).Click();
            AddLog(driver, testInReport, testName, testDataIteration, "pass", "Results Verified", "Results Verified");
            ThinkTime(5);



        }


        public void AdvancedfindfilterNew(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string Looksfor, string selectvalue, string selectvalue2, string equalcondition, string selectvalue3, string oppname)
        {
            ThinkTime(6);
            SwitchToFrame(driver, "contentIFrame0");
            Select(Element(driver, Control("Looksfordrop", "Generic"))).SelectByText(Looksfor);
            ThinkTime(2);
            MoveToElement(driver, Control("AdvanceFindselect", "Opportunity"));
            ThinkTime(2);
            Element(driver, Control("AdvanceFindselect", "Opportunity")).Click();
            ThinkTime(1);
            Select(Element(driver, Control("AdvancefindSelectvalue", "Opportunity"))).SelectByText(selectvalue);
            ThinkTime(2);
            MoveToElement(driver, Control("Equalcondition", "Opportunity"));
            ThinkTime(2);
            Element(driver, Control("Equalcondition", "Opportunity")).Click();
            ThinkTime(1);
            Select(Element(driver, Control("Equalcondition", "Opportunity"))).SelectByText(equalcondition);
            ThinkTime(2);
            MoveToElement(driver, Control("AdvanceFindselect", "Opportunity"));
            ThinkTime(2);
            //Element(driver, Control("AdvanceFindselect", "Opportunity")).Click();
            ThinkTime(1);
            Select(Element(driver, Control("AdvancefindSelectvalue", "Opportunity"))).SelectByText(selectvalue2);
            ThinkTime(3);
            ElementHighlight(driver, Control("Advancefiindlastselect", "Opportunity"));
            ThinkTime(3);
            MoveToElement(driver, Control("Advancefiindlastselect", "Opportunity"));
            ThinkTime(3);
            Select(Element(driver, Control("AdvancefindSelectvalue_1", "Opportunity"))).SelectByText(selectvalue3);
            ThinkTime(2);

            MoveToElement(driver, Control("AdvancefindEntervalue", "Opportunity"));
            ThinkTime(3);
            Element(driver, Control("AdvancefindValuelookup", "Opportunity")).Click();
            ThinkTime(5);
            //SwitchToFrame(driver, "resultFrame");
            //ThinkTime(3);
            driver.SwitchTo().DefaultContent();
            ThinkTime(2);
            //SwitchToFrame(driver, "contentIFrame0");
            //ThinkTime(8);
            SwitchToFrame(driver, "InlineDialog_Iframe");
            ThinkTime(5);

            Element(driver, Control("Advancefindvalue", "Opportunity")).SendKeys(oppname);
            ThinkTime(1);
            Element(driver, Control("Advancefindsearchopp", "Opportunity")).Click();
            ThinkTime(3);
            Element(driver, Control("SelectCheckbox1", "Opportunity")).Click();
            ThinkTime(3);
            Element(driver, Control("Addopp", "Opportunity")).Click();
            ThinkTime(3);
            Element(driver, Control("AdvancefindAddbutton", "Opportunity")).Click();
            ThinkTime(3);

            // ActionsDoubleClick(driver, Control("AdvancefindEntervalue", "Opportunity"));
            ThinkTime(1);
            driver.SwitchTo().DefaultContent();
            Element(driver, Control("Results", "Generic")).Click();
            AddLog(driver, testInReport, testName, testDataIteration, "pass", "Results Verified", "Results Verified");
            ThinkTime(10);


        }

        public void Advancedfindfilter1(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string Looksfor, string selectvalue, string equalcondition, string Resultsbutton, string view, string selectvalue1, string equalcondition1)
        {
            ThinkTime(3);
            SwitchToFrame(driver, "contentIFrame0");
            Select(Element(driver, Control("Looksfordrop", "Generic"))).SelectByText(Looksfor);
            ThinkTime(5);
            Element(driver, Control("SavedQuerrySelector", "Generic")).Click();
            ThinkTime(3);
            Select(Element(driver, Control("SavedQuerrySelector", "Generic"))).SelectByText(view);
            MoveToElement(driver, Control("AdvanceFindselect", "Opportunity"));
            ThinkTime(2);
            Element(driver, Control("AdvanceFindselect", "Opportunity")).Click();
            ThinkTime(1);
            Select(Element(driver, Control("AdvancefindSelectvalue", "Opportunity"))).SelectByText(selectvalue);
            ThinkTime(2);
            MoveToElement(driver, Control("Equalcondition", "Opportunity"));
            ThinkTime(2);
            Element(driver, Control("Equalcondition", "Opportunity")).Click();
            ThinkTime(1);
            Select(Element(driver, Control("Equalcondition", "Opportunity"))).SelectByText(equalcondition);
            ThinkTime(2);
            MoveToElement(driver, Control("AdvanceFindselect", "Opportunity"));
            ThinkTime(2);
            Element(driver, Control("AdvanceFindselect", "Opportunity")).Click();
            ThinkTime(1);
            Select(Element(driver, Control("AdvancefindSelectvalue", "Opportunity"))).SelectByText(selectvalue1);
            ThinkTime(3);
            WaitUntil(driver, Control("EqualConditionExtra1", "Opportunity"), 60);
            MoveToElement(driver, Control("EqualConditionExtra1", "Opportunity"));
            Element(driver, Control("EqualConditionExtra1", "Opportunity")).Click();
            ThinkTime(2);
            Select(Element(driver, Control("EqualConditionExtra1", "Opportunity"))).SelectByText(equalcondition1);


            ThinkTime(2);
            WaitUntil(driver, Control("ValueAdvFindClick", "Opportunity"), 60);
            //MoveToElement(driver, Control("EnterValueAdvFind", "Opportunity"));
            // Element(driver, Control("EnterValueAdvFind", "Opportunity")).Click();
            Element(driver, Control("ValueAdvFindClick", "Opportunity")).Click();
            ThinkTime(2);
            Element(driver, Control("EnterValueAdvFind", "Opportunity")).SendKeys("testhouse");
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Search Critirea Pass", "Search critirea pass");
            ThinkTime(2);
            //MoveToElement(driver, Control("Equalcondition", "Opportunity"));
            //ThinkTime(2);
            //Element(driver, Control("Equalcondition", "Opportunity")).Click();
            //ThinkTime(1);
            //Select(Element(driver, Control("Equalcondition", "Opportunity"))).SelectByText(equalcondition);
            //ThinkTime(2);
            //WaitUntil(driver, Control("AdvSelectSecond", "Generic"), 30);
            //IWebElement select= Element(driver, Control("AdvSelectSecond", "Generic"));
            //IJavaScriptExecutor js = (IJavaScriptExecutor)driver;
            //js.ExecuteScript("arguments[0].click();", select);

            //ThinkTime(2);
            //Element(driver, Control("AdvSelectSecond", "Generic")).Click();
            //ThinkTime(1);
            //MoveToElement(driver, Control("AdvSelectSecond", "Generic"));
            //ThinkTime(2);
            //Select(Element(driver, Control("AdvSelectSecond", "Generic"))).SelectByText(selectvalue2);
            //ThinkTime(3);
            //ElementHighlight(driver, Control("Advancefiindlastselect", "Opportunity"));
            //ThinkTime(3);
            //MoveToElement(driver, Control("Advancefiindlastselect", "Opportunity"));
            //ThinkTime(3);
            //Select(Element(driver, Control("AdvancefindSelectvalue_1", "Opportunity"))).SelectByText(selectvalue3);
            //ThinkTime(2);
            driver.SwitchTo().DefaultContent();
            //MoveToElement(driver, Control("advFindRibbons", Resultsbutton, "Generic"));
            Element(driver, Control("advFindRibbons", Resultsbutton, "Generic")).Click();
            //MoveToElement(driver, Control("AdvancefindEntervalue", "Opportunity"));
            //ThinkTime(3);
            //Element(driver, Control("AdvancefindValuelookup", "Opportunity")).Click();
            //ThinkTime(3);
            //SwitchToFrame(driver, "InlineDialog_Iframe");
            //ThinkTime(1);
            //Element(driver, Control("Advancefindvalue", "Opportunity")).SendKeys(oppname);
            //ThinkTime(1);
            //Element(driver, Control("Advancefindsearchopp", "Opportunity")).Click();
            //ThinkTime(3);
            //Element(driver, Control("Selectcheckbox", "Opportunity")).Click();
            //ThinkTime(3);
            //Element(driver, Control("Addopp", "Opportunity")).Click();
            //ThinkTime(3);
            //WaitUntil(driver, Control("TopicFilter", "Opportunity"), 20);
            //Element(driver, Control("TopicFilter", "Opportunity")).Click();
            //ThinkTime(3);

            // ActionsDoubleClick(driver, Control("AdvancefindEntervalue", "Opportunity"));
            // ThinkTime(1);
            // driver.SwitchTo().DefaultContent();
            //Element(driver, Control("Results", "Generic")).Click();

        }
        public void Advancedfindfilter2(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string Looksfor, string selectvalue, string equalcondition, string Resultsbutton, string view)
        {
            ThinkTime(3);
            SwitchToFrame(driver, "contentIFrame0");
            Select(Element(driver, Control("Looksfordrop", "Generic"))).SelectByText(Looksfor);
            ThinkTime(5);
            //Element(driver, Control("SavedQuerrySelector", "Generic")).Click();
            //ThinkTime(3);
            //Select(Element(driver, Control("SavedQuerrySelector", "Generic"))).SelectByText(view);
            MoveToElement(driver, Control("AdvanceFindselect", "Opportunity"));
            ThinkTime(2);
            Element(driver, Control("AdvanceFindselect", "Opportunity")).Click();
            ThinkTime(1);
            Select(Element(driver, Control("AdvancefindSelectvalue", "Opportunity"))).SelectByText(selectvalue);
            ThinkTime(5);
            //MoveToElement(driver, Control("Equalcondition", "Opportunity"));
            //ThinkTime(2);
            //Element(driver, Control("Equalcondition", "Opportunity")).Click();
            //ThinkTime(1);
            //Select(Element(driver, Control("Equalcondition", "Opportunity"))).SelectByText(equalcondition);
            //ThinkTime(2);


            MoveToElement(driver, Control("EmptySelect", "Generic"));
            ThinkTime(2);
            Element(driver, Control("EmptySelect", "Generic")).Click();
            ThinkTime(1);
            Select(Element(driver, Control("new1", "Generic"))).SelectByText(equalcondition);
            ThinkTime(2);
            MoveToElement(driver, Control("EnterValue", "Generic"));
            Element(driver, Control("LookupforEmail", "Generic")).Click();
            ThinkTime(1);
            driver.SwitchTo().DefaultContent();

            //WaitUntil(driver, Control("AdvSelectSecond", "Generic"), 30);
            //IWebElement select= Element(driver, Control("AdvSelectSecond", "Generic"));
            //IJavaScriptExecutor js = (IJavaScriptExecutor)driver;
            //js.ExecuteScript("arguments[0].click();", select);

            //ThinkTime(2);
            //Element(driver, Control("AdvSelectSecond", "Generic")).Click();
            //ThinkTime(1);
            //MoveToElement(driver, Control("AdvSelectSecond", "Generic"));
            //ThinkTime(2);
            //Select(Element(driver, Control("AdvSelectSecond", "Generic"))).SelectByText(selectvalue2);
            //ThinkTime(3);
            //ElementHighlight(driver, Control("Advancefiindlastselect", "Opportunity"));
            //ThinkTime(3);
            //MoveToElement(driver, Control("Advancefiindlastselect", "Opportunity"));
            //ThinkTime(3);
            //Select(Element(driver, Control("AdvancefindSelectvalue_1", "Opportunity"))).SelectByText(selectvalue3);
            //ThinkTime(2);
            //driver.SwitchTo().DefaultContent();
            ////MoveToElement(driver, Control("advFindRibbons", Resultsbutton, "Generic"));
            //Element(driver, Control("advFindRibbons", Resultsbutton, "Generic")).Click();
            ////MoveToElement(driver, Control("AdvancefindEntervalue", "Opportunity"));
            ////ThinkTime(3);
            //Element(driver, Control("AdvancefindValuelookup", "Opportunity")).Click();
            //ThinkTime(3);
            //SwitchToFrame(driver, "InlineDialog_Iframe");
            //ThinkTime(1);
            //Element(driver, Control("Advancefindvalue", "Opportunity")).SendKeys(oppname);
            //ThinkTime(1);
            //Element(driver, Control("Advancefindsearchopp", "Opportunity")).Click();
            //ThinkTime(3);
            //Element(driver, Control("Selectcheckbox", "Opportunity")).Click();
            //ThinkTime(3);
            //Element(driver, Control("Addopp", "Opportunity")).Click();
            //ThinkTime(3);
            //Element(driver, Control("AdvancefindAddbutton", "Opportunity")).Click();
            //ThinkTime(3);

            // ActionsDoubleClick(driver, Control("AdvancefindEntervalue", "Opportunity"));
            // ThinkTime(1);
            // driver.SwitchTo().DefaultContent();
            //Element(driver, Control("Results", "Generic")).Click();

        }
        public void Advancedfindfilter1old(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string Looksfor, string selectvalue, string equalcondition, string Resultsbutton, string view, string selectvalue2)
        {
            ThinkTime(3);
            SwitchToFrame(driver, "contentIFrame0");
            Select(Element(driver, Control("Looksfordrop", "Generic"))).SelectByText(Looksfor);
            ThinkTime(5);
            Element(driver, Control("SavedQuerrySelector", "Generic")).Click();
            ThinkTime(3);
            Select(Element(driver, Control("SavedQuerrySelector", "Generic"))).SelectByText(view);
            MoveToElement(driver, Control("AdvanceFindselect", "Opportunity"));
            ThinkTime(2);
            Element(driver, Control("AdvanceFindselect", "Opportunity")).Click();
            ThinkTime(1);
            Select(Element(driver, Control("AdvancefindSelectvalue", "Opportunity"))).SelectByText(selectvalue);
            ThinkTime(2);
            MoveToElement(driver, Control("Advanceequal1", "Opportunity"));
            ThinkTime(2);
            Element(driver, Control("Advanceequal1", "Opportunity")).Click();
            ThinkTime(1);
            Select(Element(driver, Control("Equalcondition", "Opportunity"))).SelectByText(equalcondition);
            ThinkTime(2);
            //MoveToElement(driver, Control("Equalcondition", "Opportunity"));
            //ThinkTime(2);
            //Element(driver, Control("Equalcondition", "Opportunity")).Click();
            //ThinkTime(1);
            //Select(Element(driver, Control("Equalcondition", "Opportunity"))).SelectByText(equalcondition);
            //ThinkTime(2);
            //WaitUntil(driver, Control("AdvSelectSecond", "Generic"), 30);
            //IWebElement select= Element(driver, Control("AdvSelectSecond", "Generic"));
            //IJavaScriptExecutor js = (IJavaScriptExecutor)driver;
            //js.ExecuteScript("arguments[0].click();", select);

            MoveToElement(driver, Control("AdvanceFindselect", "Opportunity"));
            ThinkTime(2);
            Element(driver, Control("AdvanceFindselect", "Opportunity")).Click();
            ThinkTime(1);
            Select(Element(driver, Control("AdvancefindSelectvalue", "Opportunity"))).SelectByText(selectvalue2);
            ThinkTime(4);
            MoveToElement(driver, Control("Advanceequalvalue1", "Opportunity"));
            ThinkTime(4);
            Element(driver, Control("Advanceequalvalue1", "Opportunity")).Click();
            ThinkTime(3);
            Select(Element(driver, Control("Advanceequalvalue1", "Opportunity"))).SelectByText(equalcondition);
            ThinkTime(2);

            //Select(Element(driver, Control("Advanceselectvalue", "Opportunity"))).SelectByText(selectvalue2);
            //ThinkTime(3);
            ////ElementHighlight(driver, Control("Advancefiindlastselect", "Opportunity"));
            //ThinkTime(3);
            //MoveToElement(driver, Control("Advanceequal", "Opportunity"));
            //ThinkTime(2);
            //Element(driver, Control("Advanceequal", "Opportunity")).Click();
            //ThinkTime(1);
            //Select(Element(driver, Control("Advanceequalvalue", "Opportunity"))).SelectByText(equalcondition);
            //ThinkTime(2);



            //MoveToElement(driver, Control("Advancefiindlastselect", "Opportunity"));
            //ThinkTime(3);
            //Select(Element(driver, Control("AdvancefindSelectvalue_1", "Opportunity"))).SelectByText(selectvalue3);
            //ThinkTime(2);
            driver.SwitchTo().DefaultContent();
            //MoveToElement(driver, Control("advFindRibbons", Resultsbutton, "Generic"));
            Element(driver, Control("advFindRibbons", Resultsbutton, "Generic")).Click();
            //MoveToElement(driver, Control("AdvancefindEntervalue", "Opportunity"));
            //ThinkTime(3);
            //Element(driver, Control("AdvancefindValuelookup", "Opportunity")).Click();
            //ThinkTime(3);
            //SwitchToFrame(driver, "InlineDialog_Iframe");
            //ThinkTime(1);
            //Element(driver, Control("Advancefindvalue", "Opportunity")).SendKeys(oppname);
            //ThinkTime(1);
            //Element(driver, Control("Advancefindsearchopp", "Opportunity")).Click();
            //ThinkTime(3);
            //Element(driver, Control("Selectcheckbox", "Opportunity")).Click();
            //ThinkTime(3);
            //Element(driver, Control("Addopp", "Opportunity")).Click();
            //ThinkTime(3);
            //Element(driver, Control("AdvancefindAddbutton", "Opportunity")).Click();
            //ThinkTime(3);

            // ActionsDoubleClick(driver, Control("AdvancefindEntervalue", "Opportunity"));
            // ThinkTime(1);
            // driver.SwitchTo().DefaultContent();
            //Element(driver, Control("Results", "Generic")).Click();

        }


        public void Verifyfunnelstages(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(3);
            //WaitUntil(driver, Control("LeftArrow", "Dashboards"), 12);
            //MoveToElement(driver, Control("LeftArrow", "Dashboards"));
            //Element(driver, Control("LeftArrow", "Dashboards")).Click();
            //ThinkTime(3);
            if (Elements(driver, Control("Purpose", "Dashboards")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Purpose stage exists", "DashBoard Role");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Purpose stage does not exists", "DashBoard Role");
                Assert.Fail("Purpose stage does not exists");
            }
            ThinkTime(3);
            if (Elements(driver, Control("Develop", "Dashboards")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Develop stage exists", "DashBoard Role");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Develop stage does not exists", "DashBoard Role");
                Assert.Fail("Develop stage does not exists");
            }
            ThinkTime(3);
            if (Elements(driver, Control("Close", "Dashboards")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Close stage exists", "DashBoard Role");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Close stage does not exists", "DashBoard Role");
                Assert.Fail("Close stage does not exists");
            }
            ThinkTime(3);
            if (Elements(driver, Control("Qualify", "Dashboards")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Qualify stage exists", "DashBoard Role");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Qualify stage does not exists", "DashBoard Role");
                Assert.Fail("Qualify stage does not exists");
            }
            ThinkTime(3);
        }

        public void Verifybrokercontactdetailsold(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string namevalue, string phonevalue, string Companyvalue)
        {
            ThinkTime(2);
            WaitUntil(driver, Control("Firstnamelabel", "EnterpriseSales"), 12);

            int firstname = Elements(driver, Control("Firstnamelabel", "EnterpriseSales"));
            int secondname = Elements(driver, Control("Lastnamelabel", "EnterpriseSales"));
            int email = Elements(driver, Control("Emaillabel", "EnterpriseSales"));
            int Busphone = Elements(driver, Control("Busphonelabel", "EnterpriseSales"));
            int company = Elements(driver, Control("Comapnylabel", "EnterpriseSales"));
            int salutation = Elements(driver, Control("Salutationlabel", "EnterpriseSales"));

            if (firstname > 0 && secondname > 0 && email > 0 && Busphone > 0 && company > 0 && salutation > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "pass", "Broker contact field updated successfully", "Broker contact field verification");

            }
            else
            {
                Assert.Fail("Broker contacts field not populated");
            }

            int Namevalue = Elements(driver, Control("LastNameBusphonevalue", namevalue, "EnterpriseSales"));
            int Phonevalue = Elements(driver, Control("LastNameBusphonevalue", phonevalue, "EnterpriseSales"));
            int companyvalue = Elements(driver, Control("Companyvalue", Companyvalue, "EnterpriseSales"));

            if (Namevalue > 0 && Phonevalue > 0 && companyvalue > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "pass", "Broker contact field value updated successfully", "Broker contact field verification");

            }
            else
            {
                Assert.Fail("Broker contacts value not populated");
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Broker contact field value not updated successfully", "Broker contact field verification");

            }

        }
        public void GetCountfromAdvancedFind(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string ResultsButton, string number)

        {
            WaitUntil(driver, Control("AdvancedFind", "Generic"), 30);
            Element(driver, Control("AdvancedFind", "Generic")).Click();

            string parentWindowHandle = driver.CurrentWindowHandle;
            WindowHandling(driver);
            ThinkTime(1);
            driver.Manage().Window.Maximize();
            ThinkTime(5);

            driver.SwitchTo().DefaultContent();
            ThinkTime(3);

            Element(driver, Control("AdvanceResult", ResultsButton, "Generic")).Click();
            SwitchToFrame(driver, "contentIFrame0");
            SwitchToFrame(driver, "resultFrame");
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Result page is displayed", "Results Page");
            WaitUntil(driver, Control("Recordnumber", "Generic"), 20);
            ElementHighlight(driver, Control("Recordnumber", "Generic"));
            string record = Element(driver, Control("Recordnumber", "Generic")).Text.ToString();

            if (record == number)

            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Same view displayed in dashboard", "Dashbord view verification verification ");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "fail", " view displayed iis different", "Dashbord view verification ");
                Assert.Fail("View change");
            }


            driver.Close();
            WindowHandling(driver, parentWindowHandle);
        }


        public void VerifyLocationField(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string Looksfor, string selectvalue, string Resultsbutton)
        {
            ThinkTime(3);
            SwitchToFrame(driver, "contentIFrame0");
            Select(Element(driver, Control("Looksfordrop", "Generic"))).SelectByText(Looksfor);
            ThinkTime(2);
            MoveToElement(driver, Control("AdvanceFindselect", "Opportunity"));
            ThinkTime(2);
            Element(driver, Control("AdvanceFindselect", "Opportunity")).Click();
            ThinkTime(1);
            Select(Element(driver, Control("AdvancefindSelectvalue", "Opportunity"))).SelectByText(selectvalue);
            ThinkTime(2);
            Element(driver, Control("CaseIDText", "AdvanceFind")).Click();
            Element(driver, Control("CaseID", "AdvanceFind")).SendKeys("");
            //MoveToElement(driver, Control("Equalcondition", "Opportunity"));
            //ThinkTime(2);
            //Element(driver, Control("Equalcondition", "Opportunity")).Click();
            //ThinkTime(1);
            //Select(Element(driver, Control("Equalcondition", "Opportunity"))).SelectByText(equalcondition);
            //ThinkTime(2);
            driver.SwitchTo().DefaultContent();
            //MoveToElement(driver, Control("advFindRibbons", Resultsbutton, "Generic"));
            Element(driver, Control("advFindRibbons", Resultsbutton, "Generic")).Click();

        }
        public void Verifyduedateinadvancefind(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string date, string starttime1)
        {
            SwitchToFrame(driver, "contentIFrame0");
            ThinkTime(2);
            SwitchToFrame(driver, "resultFrame");


            string duetime = Element(driver, Control("DueDateText", "Opportunity")).GetAttribute("innerText");

            string starttime = Element(driver, Control("StartDateText", "Opportunity")).GetAttribute("innerText");
            //DateTime duetime = DateTime.Parse(duetime1);
            //DateTime dateTime = DateTime.Parse(starttimeFrmCRM);
            //DateTime starttime = dateTime.AddMinutes(120);


            if (starttime != duetime)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Tour due date verification", "Tour Due date verification");

            }
            else
            {
                Assert.Fail("Due date for tour is not 2 hours from start date");
            }

        }

        public void AdvancedfindBookableResourcefilter(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string Looksfor, string view, string selectvalue, string equalcondition, string name, string Resultsbutton)
        {
            ThinkTime(10);
            SwitchToFrame(driver, "contentIFrame0");
            Select(Element(driver, Control("Looksfordrop", "Generic"))).SelectByText(Looksfor);
            ThinkTime(5);
            Element(driver, Control("SavedQuerrySelector", "Generic")).Click();
            ThinkTime(3);
            Select(Element(driver, Control("SavedQuerrySelector", "Generic"))).SelectByText(view);
            ThinkTime(5);
            MoveToElement(driver, Control("AdvanceFindselect", "Opportunity"));
            ThinkTime(2);
            Element(driver, Control("AdvanceFindselect", "Opportunity")).Click();
            ThinkTime(1);
            Select(Element(driver, Control("AdvancefindSelectvalue", "Opportunity"))).SelectByText(selectvalue);
            ThinkTime(2);
            ThinkTime(2);
            MoveToElement(driver, Control("NewEqual", "Opportunity"));
            ThinkTime(2);
            Element(driver, Control("NewEqual", "Opportunity")).Click();
            ThinkTime(1);
            Select(Element(driver, Control("NewEqualValue", "Opportunity"))).SelectByText(equalcondition);
            ThinkTime(2);
            MoveToElement(driver, Control("EnterValue", "Opportunity"));
            ThinkTime(3);

            WaitUntil(driver, Control("search", "Opportunity"), 30);
            MoveToElement(driver, Control("search ", "Appointment"));

            Element(driver, Control("search ", "Appointment")).Click();


            ThinkTime(10);
            // Lookup For Records
            ThinkTime(8);

            driver.SwitchTo().DefaultContent();
            ThinkTime(3);

            SwitchToFrame(driver, "InlineDialog_Iframe");
            ThinkTime(4);

            //SwitchToFrame(driver, "InlineDialog_Iframe");
            //driver.SwitchTo().Frame("InlineDialog_Iframe");

            ThinkTime(5);



            WaitUntil(driver, Control("searchRecord", "Appointment"), 30);
            MoveToElement(driver, Control("searchRecord", "Appointment"));
            Element(driver, Control("searchRecord", "Appointment")).Click();

            WaitUntil(driver, Control("InputSearch", "Appointment"), 30);
            MoveToElement(driver, Control("InputSearch", "Appointment"));
            Element(driver, Control("InputSearch", "Appointment")).Click();

            for (int i = 0; i < 100; i++)
            {
                //WaitUntil(driver, Control("ContactValidationError", "Generic"), 90);
                if (Elements(driver, Control("CheckboxClick", name, "Appointment")) == 0)
                    Element(driver, Control("LoadNextpage", "Appointment")).Click();
                i++;
            }



            WaitUntil(driver, Control("CheckboxClick", name, "Appointment"), 30);
            MoveToElement(driver, Control("CheckboxClick", name, "Appointment"));
            Element(driver, Control("CheckboxClick", name, "Appointment")).Click();

            WaitUntil(driver, Control("SelectButton", "Appointment"), 30);
            MoveToElement(driver, Control("SelectButton", "Appointment"));
            Element(driver, Control("SelectButton", "Appointment")).Click();

            WaitUntil(driver, Control("AddButton", "Appointment"), 30);
            MoveToElement(driver, Control("AddButton", "Appointment"));
            Element(driver, Control("AddButton", "Appointment")).Click();

            ThinkTime(3);

            driver.SwitchTo().DefaultContent();
            SwitchToFrame(driver, "contentIFrame0");





            ThinkTime(1);

            driver.SwitchTo().DefaultContent();
            //MoveToElement(driver, Control("advFindRibbons", Resultsbutton, "Generic"));
            Element(driver, Control("advFindRibbons", Resultsbutton, "Generic")).Click();

        }
        //find BookableResourceCharacvterstics from advanced find
        public void BookableResourceCharacvtersticsAdvancedFind(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string Looksfor)
        {
            ThinkTime(3);
            SwitchToFrame(driver, "contentIFrame0");
            Select(Element(driver, Control("Looksfordrop", "Generic"))).SelectByText(Looksfor);
            ThinkTime(2);
            driver.SwitchTo().DefaultContent();
            Element(driver, Control("Results", "Generic")).Click();



            WaitUntil(driver, Control("AdvancedFindResultpage", "Generic"), 60);
            if (Elements(driver, Control("AdvancedFindResultpage", "Generic")) > 0)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "list of Active Bookable Resource are displayed", "Bookable Resource Characristics");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "list of Active Bookable Resource not Displayed", "Bookable Resource Characristics");
                Assert.Fail(" Funtionality not Working");
            }

        }

        //To open particular record from advanced find result page
        public void OpenRecordFromAdavncedFindResultPage(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {

            driver.SwitchTo().Frame("contentIFrame0");
            ThinkTime(3);

            driver.SwitchTo().Frame("resultFrame");

            ThinkTime(2);
            MoveToElement(driver, Control("SelectRecord", "Generic"));
            ActionsDoubleClick(driver, Control("SelectRecord", "Generic"));


        }

        //Adding new Bookable Resource Characvterstics
        public void AddingNewBookableResourceCharacvterstics(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {
            driver.SwitchTo().DefaultContent();
            string parentWindowHandle = driver.CurrentWindowHandle;
            WindowHandling(driver);
            ThinkTime(1);
            driver.Manage().Window.Maximize();
            ThinkTime(1);

            HidingPureCloud(driver, testInReport, testName, testDataIteration);

            WaitUntil(driver, Control("MoreCommands", "Generic"), 30);
            Element(driver, Control("MoreCommands", "Generic")).Click();

            WaitUntil(driver, Control("NewBookableResourceBtn", "Generic"), 260);
            Element(driver, Control("NewBookableResourceBtn", "Generic")).Click();
            ThinkTime(2);

        }

        //Adding new Bookable Resource Characvterstics
        public void NewBookableResourceCharacteristicLocation(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string ResourceCharacteristics,
                        string ResourceLocation, string RatingValue, string ResourceValue, string Caracteristics)
        {
            driver.SwitchTo().DefaultContent();
            ThinkTime(3);

            String BookableResourceTitle = Element(driver, Control("Bookableresource", "Generic")).GetAttribute("title");
            Console.WriteLine(BookableResourceTitle);
            WaitUntil(driver, Control("ResourceCharacteristicsField", "Generic"), 30);
            Element(driver, Control("ResourceCharacteristicsField", "Generic")).Click();
            Element(driver, Control("BRCLsearchBtn", "Generic")).Click();
            ThinkTime(2);
            Element(driver, Control("ResourceCharacteristicsDrop", ResourceCharacteristics, "Generic")).Click(); ;

            WaitUntil(driver, Control("LocationField", "Generic"), 30);
            Element(driver, Control("LocationField", "Generic")).Click();
            Element(driver, Control("BRCLsearchBtn", "Generic")).Click();
            WaitUntil(driver, Control("LocationField", "Generic"), 30);
            Element(driver, Control("LocationField", "Generic")).SendKeys(ResourceLocation);
            ThinkTime(2);
            Element(driver, Control("Lookup", ResourceLocation, "Generic")).Click();

            WaitUntil(driver, Control("RatingValueField", "Generic"), 30);
            Element(driver, Control("RatingValueField", "Generic")).Click();
            Element(driver, Control("BRCLsearchBtn", "Generic")).Click();
            Element(driver, Control("RatingValueField", "Generic")).SendKeys(RatingValue);
            ThinkTime(2);
            Element(driver, Control("Lookup", RatingValue, "Generic")).Click();

            Element(driver, Control("ExstingResource", "Generic")).SendKeys(Keys.Delete);
            WaitUntil(driver, Control("ResourceField", "Generic"), 30);
            Element(driver, Control("ResourceField", "Generic")).Click();
            //Element(driver, Control("BRCLsearchBtn", "Generic")).Click();
            Element(driver, Control("ResourceField", "Generic")).SendKeys(ResourceValue);
            ThinkTime(2);
            Element(driver, Control("Lookup", ResourceValue, "Generic")).Click();

            WaitUntil(driver, Control("CharacteristicField", "Generic"), 30);
            Element(driver, Control("CharacteristicField", "Generic")).Click();
            Element(driver, Control("BRCLsearchBtn", "Generic")).Click();
            Element(driver, Control("CharacteristicField", "Generic")).SendKeys(Caracteristics);
            ThinkTime(2);
            Element(driver, Control("Lookup", Caracteristics, "Generic")).Click();

            ThinkTime(2);
            saveFooter(driver, testInReport, testName, testDataIteration);
            WaitUntil(driver, Control("Bookableresource", "Generic"), 30);
            String BookableResourceHeaderTitle = Element(driver, Control("Bookableresource", "Generic")).GetAttribute("title");
            Console.WriteLine(BookableResourceHeaderTitle);
            if (BookableResourceTitle != BookableResourceHeaderTitle)
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Bookable Resource is saved successfully", "Bookable Resource Characristics");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Bookable Resource is not saved", "Bookable Resource Characristics");
                Assert.Fail("Funtionality not Working");
            }

            ThinkTime(3);
            driver.Close();
            //string parentWindowHandle = driver.CurrentWindowHandle;
            //WindowHandling(driver);
            driver.SwitchTo().Window(driver.WindowHandles[1]);
            driver.SwitchTo().DefaultContent();
            //driver.SwitchTo().Window(tabs2.get(1));
            ThinkTime(10);
            //OpenRecordFromAdavncedFindResultPage(driver, testInReport, testName, testDataIteration);
            //driver.SwitchTo().Frame("resultFrame");
            MoveToElement(driver, Control("AdvancedFindResultpage", "Generic"));
            ThinkTime(2);
            //MoveToElement(driver, Control("SelectRecord", "Generic"));
            ActionsDoubleClick(driver, Control("SelectRecord", "Generic"));
            ThinkTime(3);
        }


        //Adding new Bookable Resource Characvterstics
        public void VerifyTourRanks(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {
            string parentWindowHandle = driver.CurrentWindowHandle;
            WindowHandling(driver);
            ThinkTime(1);
            driver.Manage().Window.Maximize();
            ThinkTime(5);

            HidingPureCloud(driver, testInReport, testName, testDataIteration);
            SwitchToFrame(driver, "contentIFrame0");

            ThinkTime(2);
            string Tourrank = Element(driver, Control("RatingValueVerify", "Generic")).ToString();
            //if (Tourrank == BookableResourceHeaderTitle)
            //{

            //    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Rating value verified successfully", "Rating Value");
            //}

            //else
            //{
            //    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Bookable Resource is not saved", "Rating Value");
            //    Assert.Fail("Funtionality not Working");
            //}

            ThinkTime(2);
            //string locationverify = Element(driver, Control("LocationFieldVerify", "Generic")).ToString();
            //if (locationverify == BookableResourceHeaderTitle)
            //{

            //    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Location verified successfully", "Location");
            //}

            //else
            //{
            //    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Location is not verified", "Location");
            //    Assert.Fail("Funtionality not Working");
            //}
        }


        //To Search Existing OPP
        public string SearchExistingOppo(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string SearchOPP)
        {

            WaitUntil(driver, Control("SearchView", "Opportunity"), 30);
            Element(driver, Control("SearchView", "Opportunity")).SendKeys(SearchOPP);

            WaitUntil(driver, Control("Searchrelated", "Opportunity"), 60);
            Element(driver, Control("Searchrelated", "Opportunity")).Click();
            ThinkTime(2);
            return SearchOPP;
        }

        public string SearchPhoneOppo(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string oppname)
        {

            WaitUntil(driver, Control("SearchView", "Opportunity"), 30);
            Element(driver, Control("SearchView", "Opportunity")).SendKeys(oppname);

            WaitUntil(driver, Control("Searchrelated", "Opportunity"), 60);
            Element(driver, Control("Searchrelated", "Opportunity")).Click();
            ThinkTime(2);

            WaitUntil(driver, Control("ActiveCell", "Generic"), 40);
            Element(driver, Control("ActiveCell", "Generic"));
            ActionsDoubleClick(driver, Control("ActiveCell", "Generic"));

            return oppname;
        }

        //To Book a tour
        public void BookaTour(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {
            ThinkTime(30);

            ElementHighlight(driver, Control("NewAppointmentPlus", "Generic"));
            Element(driver, Control("newAppointment", "Generic")).Click();
            WaitUntil(driver, Control("SaveOpp", "Generic"), 360);
            Element(driver, Control("SaveOpp", "Generic")).Click();

        }

        public void VerifyTourActivitiesDetails(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {


            ThinkTime(2);
            string Tourrank = Element(driver, Control("RatingValueVerify", "Generic")).ToString();
            //if (Tourrank == BookableResourceHeaderTitle)
            //{

            //    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Rating value verified successfully", "Rating Value");
            //}

            //else
            //{
            //    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Bookable Resource is not saved", "Rating Value");
            //    Assert.Fail("Funtionality not Working");
            //}

            ThinkTime(2);
            //string locationverify = Element(driver, Control("LocationFieldVerify", "Generic")).ToString();
            //if (locationverify == BookableResourceHeaderTitle)
            //{

            //    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Location verified successfully", "Location");
            //}

            //else
            //{
            //    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Location is not verified", "Location");
            //    Assert.Fail("Funtionality not Working");
            //}
        }

        //To select Tablist Options 
        public void TablistSelection(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string TabListOption)
        {
            ThinkTime(3);
            ScriptErrorExcep(driver, testInReport, testDataIteration, testName);
            ThinkTime(3);
            WaitUntil(driver, Control("RelatedTab1", TabListOption, "Generic"), 360);
            Element(driver, Control("RelatedTab1", TabListOption, "Generic")).Click();

        }

        //To search a activites from relatedtab 
        public void RelatedSearch(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string search)
        {
            WaitUntil(driver, Control("SearchView", "Opportunity"), 60);
            MoveToElement(driver, Control("SearchView", "Opportunity"));
            Element(driver, Control("SearchView", "Opportunity")).SendKeys(search);
            Element(driver, Control("Searchrelated", "Opportunity")).Click();

        }

        //To open PhoneCallActivity
        public void PhoneCallActivity(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string search)
        {
            WaitUntil(driver, Control("SearchView", "Opportunity"), 60);
            MoveToElement(driver, Control("SearchView", "Opportunity"));
            Element(driver, Control("SearchView", "Opportunity")).SendKeys(search);
            Element(driver, Control("Searchrelated", "Opportunity")).Click();

            ThinkTime(10);
            WaitUntil(driver, Control("ActiveCell", "Generic"), 90);
            Element(driver, Control("ActiveCell", "Generic"));
            ActionsDoubleClick(driver, Control("ActiveCell", "Generic"));

        }

        //To select Options from Related Tab 
        public void RelatedTab(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string RelatedTabOption)
        {
            //WaitUntil(driver, Control("Workorders", RelatedTabOption, "Work Orders"), 60);
            //MoveToElement(driver, Control("Workorders", RelatedTabOption, "Work Orders"));
            //JSClick(driver, Control("Workorders", RelatedTabOption, "Work Orders"));

            WaitUntil(driver, Control("Workorders", "Opportunity"), 60);
            MoveToElement(driver, Control("Workorders", "Opportunity"));
            JSClick(driver, Control("Workorders", "Opportunity"));
        }

        //To select Phone call from related tab
        public void RelatedPhoneCallTab(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {
            WaitUntil(driver, Control("Related", "Opportunity"), 60);
            MoveToElement(driver, Control("Related", "Opportunity"));
            JSClick(driver, Control("Related", "Opportunity"));

            WaitUntil(driver, Control("PhoneCall", "Opportunity"), 60);
            MoveToElement(driver, Control("PhoneCall", "Opportunity"));
            JSClick(driver, Control("PhoneCall", "Opportunity"));
        }

        //To Open Existing tour
        public void OpenExistingTour(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {
            ThinkTime(10);
            if (Elements(driver, Control("TourAssociateView", "Tour")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Associated Tour View Displayed Successfully", "Page Displayed");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Associated Tour View not Displayed", "Page Not Displayed");
                Assert.Fail(" Funtionality not Working");
            }

            Element(driver, Control("SelectingTourByLink", "Tour")).Click();
            ThinkTime(20);
            //WaitUntil(driver, Control("TourPage", "Tour"), 90);
            if (Elements(driver, Control("TourPage", "Tour")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Tour Page is  Displayed Successfully", "Page Displayed");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Tour page is not Displayed", "Page Not Displayed");
                //Assert.Fail(" Funtionality not Working");
            }
        }

        //To Reschedule Existing tour
        public void VerifyTourDateAndTimeInTourPage(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {

            WaitUntil(driver, Control("TourStartDate", "Tour"), 30);
            MoveToElement(driver, Control("TourStartDate", "Tour"));
            string TourStartsDate = Element(driver, Control("TourStartDate", "Tour")).Text.ToString();

            WaitUntil(driver, Control("TourStartTime", "Tour"), 30);
            MoveToElement(driver, Control("TourStartTime", "Tour"));
            string TourStartsTime = Element(driver, Control("TourStartTime", "Tour")).Text.ToString();

            WaitUntil(driver, Control("TourEndDate", "Tour"), 30);
            MoveToElement(driver, Control("TourEndDate", "Tour"));
            string TourEndsDate = Element(driver, Control("TourEndDate", "Tour")).Text.ToString();

            WaitUntil(driver, Control("TourEndTime", "Tour"), 30);
            MoveToElement(driver, Control("TourEndTime", "Tour"));
            string TourEndsTime = Element(driver, Control("TourEndTime", "Tour")).Text.ToString();

            Console.WriteLine(TourStartsDate, TourStartsTime, TourEndsDate, TourEndsTime);
            ThinkTime(5);
            //VerifyRequiredAttendees(driver, testInReport, testName, testDataIteration);
            RescheduleTour(driver, testInReport, testName, testDataIteration, "");
            BookaTour(driver, testInReport, testName, testDataIteration);
            HandlingPravisionalPopUP(driver, testInReport, testName, testDataIteration, "Available");

        }


        //To verify RequiredAttendees Locked OR nOT
        public void RequiredAttendeesLocked(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {
            ThinkTime(2);
            if (Elements(driver, Control("RequiredAttendeeLockedicon", "Tour")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Required Attendee are Locked", "RequiredAttendeeLockedicon");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Required Attendee are not Locked", "RequiredAttendeeLockedicon");
                Assert.Fail(" Funtionality not Working");
            }

        }

        //To HandlE Pravisional Pop-UP
        public void HandlingPravisionalPopUP(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string ProvisonalPopUp)
        {
            MoveToElement(driver, Control("AvailableBtn", ProvisonalPopUp, "Generic"));
            WaitUntil(driver, Control("AvailableBtn", ProvisonalPopUp, "Generic"), 30);
            Element(driver, Control("AvailableBtn", ProvisonalPopUp, "Generic")).Click();

        }


        //To Reschedule Existing tour
        public void RescheduleTour(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string entityheader)
        {


            if (Elements(driver, Control("RescheduleTour", "Tour")) == 0)
            {
                ThinkTime(2);
                WaitUntil(driver, Control("Reshadulemorebutton", "Opportunity"), 60);
                MoveToElement(driver, Control("Reshadulemorebutton", "Opportunity"));
                Element(driver, Control("Reshadulemorebutton", "Opportunity")).Click();
                ThinkTime(2);
                WaitUntil(driver, Control("RescheduleTour", "Tour"), 180);
                Element(driver, Control("RescheduleTour", "Tour")).Click();

            }
            else
            {
                ThinkTime(2);
                WaitUntil(driver, Control("RescheduleTour", "Tour"), 180);
                Element(driver, Control("RescheduleTour", "Tour")).Click();

            }

        }
        //Launch IT Sales Form
        public void LaunchITSalesForm(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            driver.Navigate().GoToUrl("https://forms.office.com/Pages/ResponsePage.aspx?id=KFwViFD3E0CR04NH3bPapwCAZBXkdspJpVrn7Jy0wGpUN1hLRUg0U0pVSE9NOVVUNlNHNTg0NFpERS4u");
            driver.Manage().Window.Maximize();
        }

        //submitting the IT Sales Form

        public string SubmitingITSalesForm(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string CompanyName, string CustomerTitanid,
            string CustomerCont, string PersonEmail, string ContPersonPhno, string CentreCode, string AdditionalFeedback, string AddEmail, string time)
        {
            WaitUntil(driver, Control("ITSalesFormHomePage", "ITsalesform"), 360);
            if (Elements(driver, Control("ITSalesFormHomePage", "ITsalesform")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "IT Sales form is displayed", "IT Sales Form");
            }
            else
            {
                LaunchITSalesForm(driver, testInReport, testName, testDataIteration);
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "IT Sales form is not displayed", "IT Sales Form");
                Assert.Fail("IT Sales form is not opened");
            }

            string verifyContatcName = CustomerCont + time;
            WaitUntil(driver, Control("IsCorporateAcc", "ITsalesform"), 90);
            Element(driver, Control("IsCorporateAcc", "ITsalesform")).Click();

            WaitUntil(driver, Control("Company", "ITsalesform"), 90);
            Element(driver, Control("Company", "ITsalesform")).SendKeys(CompanyName);

            WaitUntil(driver, Control("CustomerTitanID", "ITsalesform"), 90);
            Element(driver, Control("CustomerTitanID", "ITsalesform")).SendKeys(CustomerTitanid);

            WaitUntil(driver, Control("CustomerContact", "ITsalesform"), 90);
            Element(driver, Control("CustomerContact", "ITsalesform")).SendKeys(CustomerCont);

            WaitUntil(driver, Control("ContactPersonsEmail", "ITsalesform"), 90);
            Element(driver, Control("ContactPersonsEmail", "ITsalesform")).SendKeys(PersonEmail);

            WaitUntil(driver, Control("ContactPersonsPhNo", "ITsalesform"), 30);
            Element(driver, Control("ContactPersonsPhNo", "ITsalesform")).SendKeys(ContPersonPhno);

            WaitUntil(driver, Control("CentreCodeNumber", "ITsalesform"), 30);
            Element(driver, Control("CentreCodeNumber", "ITsalesform")).SendKeys(CentreCode);

            WaitUntil(driver, Control("TypeOfService", "ITsalesform"), 30);
            Element(driver, Control("TypeOfService", "ITsalesform")).Click();

            WaitUntil(driver, Control("AddFeedback", "ITsalesform"), 30);
            Element(driver, Control("AddFeedback", "ITsalesform")).SendKeys(AdditionalFeedback);

            WaitUntil(driver, Control("AdditionaEmail", "ITsalesform"), 30);
            Element(driver, Control("AdditionaEmail", "ITsalesform")).SendKeys(AddEmail);
            Element(driver, Control("SubmitBtn", "ITsalesform")).Click();

            ThinkTime(10);
            if (Elements(driver, Control("ThanksMsg", "ITsalesform")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "IT Sales form is submitted successfully", "IT Sales Form");
            }
            else
            {
                //Element(driver, Control("SubmitBtn", "ITsalesform")).Click();
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "IT Sales form is not submitted successfully", "IT Sales Form");
                Assert.Fail("IT Sales form is not submitted");
            }
            ThinkTime(60);
            return CompanyName;

        }

        public void SelectFromDashboardDropDown(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string role)
        {

            WaitUntil(driver, Control("DashboardSelector", "Generic"), 30);
            Element(driver, Control("DashboardSelector", "Generic")).Click();
            AddLog(driver, testInReport, testName, testDataIteration, "Info", "Roles are available", "Dashboard Roles");
            driver.SwitchTo().DefaultContent();
            WaitUntil(driver, Control("DashboardRole1", "Generic"), 90);
            Element(driver, Control("DashboardRole1", role, "Generic")).Click();
            if (!Element(driver, Control("DashboardSelected", "Generic")).Text.ToString().Equals(role))
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "User is not able to select DashBoard Role", "DashBoard Role");
                Assert.Fail("User is not able to select DashBoard Role");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "User is able to select DashBoard Role", " DashBoard Role");
            }
            driver.Navigate().Refresh();
        }


        //verify Contact info updated in dyanamics as per IT Sales Form
        public void DataPopulatedInOppFromITSalesForm(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string CompanyName1, string CustomerTitanid1,
            string CustomerCont1, string PersonEmail1, string ContPersonPhno1, string CentreCode1, string AddEmail1, string checkFor)
        {
            //ThinkTime(10);
            //driver.SwitchTo().DefaultContent();


            //ElementHighlight(driver, Control("ContactName", "ITSales"));
            //string contactName = Element(driver, Control("ContactName", "ITSales")).Text;
            //Console.WriteLine("contactName "+contactName);
            //Console.WriteLine("CustomerCont1 "+CustomerCont1);


            //if (contactName == CustomerCont1)
            //{
            //    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Contact name is Displayed as per IT Sales Support Form" + CustomerCont1, "Contact name ");
            //}
            //else
            //{
            //    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Contact name  is not Displayed as per IT Sales Support Form", "Contact name ");

            //}
            //MoveToElement(driver, Control("ContactEmail", "ITSales"));
            //string contactEmail = Element(driver, Control("ContactEmail", "ITSales")).GetAttribute("title");
            //Console.WriteLine(contactEmail);
            //Console.WriteLine("PersonEmail1 " + PersonEmail1);
            //if (contactEmail == PersonEmail1)
            //{
            //    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Contact name is Displayed as per IT Sales Support Form" + contactEmail, "Contact name ");
            //}
            //else
            //{
            //    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Contact name  is not Displayed as per IT Sales Support Form", "Contact name ");

            //}
            //MoveToElement(driver, Control("CompanyField", "ITSales"));
            //string OppoCompanyName = Element(driver, Control("CompanyField", "ITSales")).Text;
            //Console.WriteLine(OppoCompanyName);
            //Console.WriteLine("CompanyName1 " + CompanyName1);
            //if (OppoCompanyName == CompanyName1)
            //{
            //    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Company name is Displayed as per IT Sales Support Form" + CompanyName1, "Company Name");
            //}
            //else
            //{
            //    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Company name is not Displayed as per IT Sales Support Form", "Company Name");

            //}
            //scrollDownOpportunityPageITSales(driver, testInReport, testName, testDataIteration);
            //MoveToElement(driver, Control("CompanyIDs", "ITSales"));
            //string CompanyID = Element(driver, Control("CompanyIDs", "ITSales")).GetAttribute("title").ToString();
            //Console.WriteLine(CompanyID);
            //Console.WriteLine("CustomerTitanid1 " + CustomerTitanid1);
            //if (CompanyID == CustomerTitanid1)
            //{
            //    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Companyid is Displayed as per IT Sales Support Form" + CompanyID, "Company ID");
            //}
            //else
            //{
            //    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Companyid is not Displayed as per IT Sales Support Form", "Company ID");

            //}

            //ThinkTime(4);
            //scrollDownOpportunityPage(driver, testInReport, testName, testDataIteration);
            //MoveToElement(driver, Control("AlternativeITContName", "ITSales"));
            //string ContactName = Element(driver, Control("AlternativeITContName", "ITSales")).Text;
            //Console.WriteLine(ContactName);
            //Console.WriteLine("CustomerCont1 " + CustomerCont1);
            //if (ContactName == CustomerCont1)
            //{
            //    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Contact name is Displayed as per IT Sales Support Form" + ContactName, "Contact name");
            //}
            //else
            //{
            //    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Contact name is not Displayed as per IT Sales Support Form", "Contact name");
            //    //Assert.Fail("Contact Name is Incorrect");
            //}


            //MoveToElement(driver, Control("ITSalesFormemail", "ITSales"));
            //string Email = Element(driver, Control("ITSalesFormemail", "ITSales")).Text;
            //if (Email == PersonEmail1)
            //{
            //    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Email is Displayed as per IT Sales Support Form" + PersonEmail1, "Email");
            //}
            //else
            //{
            //    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Email is not Displayed as per IT Sales Support Form", "Email");
            //    //Assert.Fail("Email is Incorrect");
            //}

            //MoveToElement(driver, Control("AlternativeITContPh", "ITSales"));
            //string phoneNumber = Element(driver, Control("AlternativeITContPh", "ITSales")).GetAttribute("title").ToString();
            //if (phoneNumber == ContPersonPhno1)
            //{
            //    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Phone No is Displayed as per IT Sales Support Form" + ContPersonPhno1, "Phone NO");
            //}
            //else
            //{
            //    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Phone no is not Displayed as per IT Sales Support Form", "Phone no");

            //}

            //MoveToElement(driver, Control("CentreNumber", "ITSales"));
            //string CentreNo = Element(driver, Control("CentreNumber", "ITSales")).GetAttribute("title").ToString();
            //if (CentreNo == CentreCode1)
            //{
            //    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Centre Code is Displayed as per IT Sales Support Form" + CentreCode1, "Centre Code");
            //}
            //else
            //{
            //    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Centre Code is not Displayed as per IT Sales Support Form", "Centre Code");

            //}

            ThinkTime(3);
            WaitUntil(driver, Control("contactLookUpValue", "ITSales"), 360);
            MoveToElement(driver, Control("contactLookUpValue", "ITSales"));
            string ContactName = Element(driver, Control("contactLookUpValue", "ITSales")).GetAttribute("title").ToString();
            Console.WriteLine("Contact Name " + ContactName);
            Console.WriteLine("Excel " + CustomerCont1);

            if (checkFor == "Matched Contact")
            {
                if (ContactName == CustomerCont1)
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Contact name is Populated and same as per IT Sales Support Form" + CompanyName1, "Contact Name");
                }
                else
                {
                    //AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Contact name is not populated as per IT Sales Support Form", "Contact Name");
                    ////Assert.Fail("Contact name is incorrect");
                    if (ContactName == "(UNKNOWN)")
                    {
                        AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Contact name is Populated and same as per IT Sales Support Form" + CompanyName1, "Contact Name");
                    }
                    else
                    {
                        AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Contact name is not populated as per IT Sales Support Form", "Contact Name");
                        Assert.Fail("Contact name is incorrect");
                    }
                }
            }
            else
            {

            }
            //else if (checkFor == "Unmatched Contact")
            //{
            //    if (ContactName == "(UNKNOWN)")
            //    {
            //        AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Contact name is Populated and same as per IT Sales Support Form" + CompanyName1, "Contact Name");
            //    }
            //    else
            //    {
            //        AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Contact name is not populated as per IT Sales Support Form", "Contact Name");
            //        Assert.Fail("Contact name is incorrect");
            //    }
            //}



            scrollDownOpportunityPage(driver, testInReport, testName, testDataIteration);
            MoveToElement(driver, Control("CompanyField", "ITSales"));
            string OppoCompanyName = Element(driver, Control("CompanyField", "ITSales")).Text;
            Console.WriteLine("Application " + OppoCompanyName);
            Console.WriteLine("Excel " + CompanyName1);
            if (OppoCompanyName == CompanyName1)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Company name is Displayed as per IT Sales Support Form" + CompanyName1, "Company Name");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Company name is not Displayed as per IT Sales Support Form", "Company Name");
                Assert.Fail("Company name is incorrect");
            }

            MoveToElement(driver, Control("CompanyIDs", "ITSales"));
            //string CompanyID = Element(driver, Control("CompanyIDs", "ITSales")).Text;
            string CompanyID = Element(driver, Control("CompanyIDs", "ITSales")).GetAttribute("title").ToString();
            Console.WriteLine("CompanyID " + CompanyID);
            Console.WriteLine("CustomerTitanid " + CustomerTitanid1);
            if (CompanyID == CustomerTitanid1)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Companyid is Displayed as per IT Sales Support Form" + CompanyID, "Company ID");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Companyid is not Displayed as per IT Sales Support Form", "Company ID");
                // Assert.Fail("Company id is Incorrect");
            }

            ThinkTime(4);
            MoveToElement(driver, Control("accountSection", "ITSales"));
            // scrollDownOpportunityPage(driver, testInReport, testName, testDataIteration);
            ThinkTime(3);
            MoveToElement(driver, Control("itContactDetailsSection", "ITSales"));
            string AltITContactName = Element(driver, Control("AlternativeITContName", "ITSales")).GetAttribute("title").ToString();
            Console.WriteLine("ContactName " + AltITContactName);
            Console.WriteLine("CustomerCont " + CustomerCont1);
            if (AltITContactName == CustomerCont1)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Alternative IT contact name is Displayed as per IT Sales Support Form" + ContactName, "Contact name");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Alternative IT contact name is not Displayed as per IT Sales Support Form", "Contact name");
                //Assert.Fail("Contact Name is Incorrect");
            }


            MoveToElement(driver, Control("ITSalesFormemail", "ITSales"));
            string Email = Element(driver, Control("ITSalesFormemail", "ITSales")).GetAttribute("title").ToString();
            Console.WriteLine("Email " + Email);
            Console.WriteLine("PersonEmail " + PersonEmail1);
            if (Email == PersonEmail1)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Alternative IT contact Email is Displayed as per IT Sales Support Form" + PersonEmail1, "Email");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Alternative IT contact Email is not Displayed as per IT Sales Support Form", "Email");
                //Assert.Fail("Email is Incorrect");
            }

            MoveToElement(driver, Control("AlternativeITContPh", "ITSales"));
            string phoneNumber = Element(driver, Control("AlternativeITContPh", "ITSales")).GetAttribute("title").ToString();
            Console.WriteLine("phoneNumber " + phoneNumber);
            Console.WriteLine("ContPersonPhno " + ContPersonPhno1);
            if (phoneNumber == ContPersonPhno1)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Alternative IT contact Phone No is Displayed as per IT Sales Support Form" + ContPersonPhno1, "Phone NO");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Alternative IT contact Phone no is not Displayed as per IT Sales Support Form", "Phone no");
                Assert.Fail("phoneNo is Incorrect");
            }

            MoveToElement(driver, Control("CentreNumber", "ITSales"));
            string CentreNo = Element(driver, Control("CentreNumber", "ITSales")).GetAttribute("title").ToString();
            Console.WriteLine("CentreNo " + CentreNo);
            Console.WriteLine("CentreCode " + CentreCode1);
            if (CentreNo == CentreCode1)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Centre Code is Displayed as per IT Sales Support Form" + CentreCode1, "Centre Code");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Centre Code is not Displayed as per IT Sales Support Form", "Centre Code");
                Assert.Fail("Centre Code is Incorrect");
            }


            MoveToElement(driver, Control("CentreNumber", "ITSales"));
            string additionalemail = Element(driver, Control("formSenderEmail", "ITSales")).GetAttribute("title").ToString();
            Console.WriteLine("additionalemail " + additionalemail);
            Console.WriteLine("AddEmail " + AddEmail1);
            if (additionalemail == AddEmail1)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Additional email is Displayed as per IT Sales Support Form" + AddEmail1, "Additional email");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Additional email is not Displayed as per IT Sales Support Form", "Additional email");
                Assert.Fail("Additional email is Incorrect");
            }

        }

        //Generic Dashboard Selection

        public void DashBordListSelection(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string DashboardViewSel)
        {
            WaitUntil(driver, Control("DashDropdwn", "Dashboards"), 60);
            Element(driver, Control("DashDropdwn", "Dashboards")).Click();
            ThinkTime(3);
            // WaitUntil(driver, Control("Dashboardrole1", "Generic"), 60);
            Element(driver, Control("DashboardRole2", DashboardViewSel, "Generic")).Click();

        }

        //open particular record from Unassigned IT Sales Opportunities view of the IT Sales Support user
        public void SelectOpenITSalesOpportunities(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string MSFormVerification)
        {
            ThinkTime(20);


            if ((Elements(driver, Control("OpenITSalesOppo", MSFormVerification, "Generic"))) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Opportunity is created in Dynamics from IT Sales form", "Opportunity Creation");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Opportunity is not created in Dynamics from IT Sales form", "Opportunity Creation");
                Assert.Fail("Opportunity not created");
            }

            WaitUntil(driver, Control("Openopp", "Generic"), 90);
            ActionsDoubleClick(driver, Control("Openopp", "Generic"));
            ThinkTime(15);

        }


        public void ReplacingNewReccommendedCentre(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string NewBussinessCentre)
        {
            scrollDownOpportunityEnterpriseCust(driver, testInReport, testDataIteration, testName, "550");

            ThinkTime(2);
            // WaitUntil(driver, Control("LeadLname", "Generic"), 30);
            //scrollMiddleOpportunityPage(driver, testInReport, testDataIteration, testName);
            //scrollDownOpportunityEnterprise(driver, testInReport, testDataIteration, testName);

            //WaitUntil(driver, Control("LeadRecmBusCentre", "Accounts"), 60);
            //MoveToElement(driver, Control("LeadRecmBusCentre", "Accounts"));
            ////Element(driver, Control("LeadRecmBusCentre", "Accounts")).Click();

            //WaitUntil(driver, Control("LeadRecmBusCentreCancel", "Accounts"), 60);
            //MoveToElement(driver, Control("LeadRecmBusCentreCancel", "Accounts"));
            //Element(driver, Control("LeadRecmBusCentreCancel", "Accounts")).Click();


            WaitUntil(driver, Control("ReccommendedCentreInput", "Accounts"), 60);
            Element(driver, Control("ReccommendedCentreInput", "Accounts")).Click();
            Element(driver, Control("ReccommendedCentreInput", "Accounts")).SendKeys(NewBussinessCentre);
            ThinkTime(2);
            WaitUntil(driver, Control("Languagedropdown", "EnterpriseSales"), 60);
            Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();

            saveFooter(driver, testInReport, testName, testDataIteration);
            ThinkTime(2);
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);

        }


        //changing recommended bussiness Centre

        public void ChangingRecommendedBussinessCentre(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string NewBussinessCentre)
        {
            ThinkTime(3);
            WaitUntil(driver, Control("RecomentedBussinessCentreLabel", "Opportunity"), 180);
            MoveToElement(driver, Control("RecomentedBussinessCentreLabel", "Opportunity"));
            string oldBussinesCentre = Element(driver, Control("RecomentedBussinessCentreLabel", "Opportunity")).GetAttribute("title");

            if (oldBussinesCentre != NewBussinessCentre)
            {
                WaitUntil(driver, Control("RecomentedBussinessCentreCloseButton", "Opportunity"), 180);
                MoveToElement(driver, Control("RecomentedBussinessCentreCloseButton", "Opportunity"));
                ElementHighlight(driver, Control("RecomentedBussinessCentreCloseButton", "Opportunity"));
                Element(driver, Control("RecomentedBussinessCentreCloseButton", "Opportunity")).Click();

                WaitUntil(driver, Control("RecomentedBussinessCentreInputButton", "Opportunity"), 180);
                Element(driver, Control("RecomentedBussinessCentreInputButton", "Opportunity")).SendKeys(NewBussinessCentre);
                ThinkTime(2);
                MoveToElement(driver, Control("Languagedropdown", "EnterpriseSales"));
                Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();
                ThinkTime(2);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "New recommended bussiness centre is updated", "New Bussiness centre");

                saveFooter(driver, testInReport, testName, testDataIteration);
                ThinkTime(2);
                ScriptErrorExcep(driver, testInReport, testName, testDataIteration);

            }
            else
            {
                Assert.Fail("new Bussiness centre is not updated");
                //AddLog(driver, testInReport, testName, testDataIteration, "Pass", "recommended bussiness centre is already updated", "Recommended Bussiness centre");
            }


        }

        //changing recommended bussiness Centre

        public void ChangingRecommendedBussinessCentreNew(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string NewBussinessCentre)
        {
            ThinkTime(3);
            scrollDownOpportunityEnterprise2(driver, testInReport, testName, testDataIteration);
            WaitUntil(driver, Control("RecomentedBussinessCentreLabel", "Opportunity"), 180);
            MoveToElement(driver, Control("RecomentedBussinessCentreLabel", "Opportunity"));
            string oldBussinesCentre = Element(driver, Control("RecomentedBussinessCentreLabel", "Opportunity")).GetAttribute("title");

            if (oldBussinesCentre != NewBussinessCentre)
            {
                WaitUntil(driver, Control("RecomentedBussinessCentreCloseButton", "Opportunity"), 180);
                MoveToElement(driver, Control("RecomentedBussinessCentreCloseButton", "Opportunity"));
                ElementHighlight(driver, Control("RecomentedBussinessCentreCloseButton", "Opportunity"));
                Element(driver, Control("RecomentedBussinessCentreCloseButton", "Opportunity")).Click();

                WaitUntil(driver, Control("RecomentedBussinessCentreInputButton", "Opportunity"), 180);
                Element(driver, Control("RecomentedBussinessCentreInputButton", "Opportunity")).SendKeys(NewBussinessCentre);
                ThinkTime(2);
                MoveToElement(driver, Control("Languagedropdown", "EnterpriseSales"));
                Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();
                ThinkTime(2);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "New recommended bussiness centre is updated", "New Bussiness centre");

                saveFooter(driver, testInReport, testName, testDataIteration);
                ThinkTime(2);
                ScriptErrorExcep(driver, testInReport, testName, testDataIteration);

            }
            else
            {
                Assert.Fail("new Bussiness centre is not updated");
                //AddLog(driver, testInReport, testName, testDataIteration, "Pass", "recommended bussiness centre is already updated", "Recommended Bussiness centre");
            }


        }


        //verify opportunity is created in dyanamics as per IT Sales Form
        public void OpportunityIsCreatedInDyanamicsFromITSalesForm(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string CompanyName, string CustomerTitanid,
            string CustomerCont, string PersonEmail, string ContPersonPhno, string CentreCode, string AddEmail)
        {
            ThinkTime(15);

            scrollDownOpportunityPage(driver, testInReport, testName, testDataIteration);
            MoveToElement(driver, Control("CompanyField", "ITSales"));
            string OppoCompanyName = Element(driver, Control("CompanyField", "ITSales")).Text;
            Console.WriteLine("Application " + OppoCompanyName);
            Console.WriteLine("Excel " + CompanyName);
            if (OppoCompanyName == CompanyName)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Company name is Displayed as per IT Sales Support Form" + CompanyName, "Company Name");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Company name is not Displayed as per IT Sales Support Form", "Company Name");
                Assert.Fail("Company name is incorrect");
            }

            //MoveToElement(driver, Control("CompanyIDs", "ITSales"));
            ////string CompanyID = Element(driver, Control("CompanyIDs", "ITSales")).Text;
            //string CompanyID = Element(driver, Control("CompanyIDs", "ITSales")).GetAttribute("title").ToString();
            //Console.WriteLine("CompanyID " + CompanyID);
            //Console.WriteLine("CustomerTitanid " + CustomerTitanid);
            //if (CompanyID == CustomerTitanid)
            //{
            //    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Companyid is Displayed as per IT Sales Support Form" + CompanyID, "Company ID");
            //}
            //else
            //{
            //    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Companyid is not Displayed as per IT Sales Support Form", "Company ID");
            //    Assert.Fail("Company id is Incorrect");
            //}

            ThinkTime(4);
            MoveToElement(driver, Control("accountSection", "ITSales"));
            // scrollDownOpportunityPage(driver, testInReport, testName, testDataIteration);
            ThinkTime(3);
            MoveToElement(driver, Control("itContactDetailsSection", "ITSales"));
            string ContactName = Element(driver, Control("AlternativeITContName", "ITSales")).GetAttribute("title").ToString();
            Console.WriteLine("ContactName " + ContactName);
            Console.WriteLine("CustomerCont " + CustomerCont);
            if (ContactName == CustomerCont)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Alternative IT contact name is Displayed as per IT Sales Support Form" + ContactName, "Contact name");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Alternative IT contact name is not Displayed as per IT Sales Support Form", "Contact name");
                //Assert.Fail("Contact Name is Incorrect");
            }


            MoveToElement(driver, Control("ITSalesFormemail", "ITSales"));
            string Email = Element(driver, Control("ITSalesFormemail", "ITSales")).GetAttribute("title").ToString();
            Console.WriteLine("Email " + Email);
            Console.WriteLine("PersonEmail " + PersonEmail);
            if (Email == PersonEmail)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Alternative IT contact Email is Displayed as per IT Sales Support Form" + PersonEmail, "Email");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Alternative IT contact Email is not Displayed as per IT Sales Support Form", "Email");
                //Assert.Fail("Email is Incorrect");
            }

            MoveToElement(driver, Control("AlternativeITContPh", "ITSales"));
            string phoneNumber = Element(driver, Control("AlternativeITContPh", "ITSales")).GetAttribute("title").ToString();
            Console.WriteLine("phoneNumber " + phoneNumber);
            Console.WriteLine("ContPersonPhno " + ContPersonPhno);
            if (phoneNumber == ContPersonPhno)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Alternative IT contact Phone No is Displayed as per IT Sales Support Form" + ContPersonPhno, "Phone NO");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Alternative IT contact Phone no is not Displayed as per IT Sales Support Form", "Phone no");
                Assert.Fail("phoneNo is Incorrect");
            }

            MoveToElement(driver, Control("CentreNumber", "ITSales"));
            string CentreNo = Element(driver, Control("CentreNumber", "ITSales")).GetAttribute("title").ToString();
            Console.WriteLine("CentreNo " + CentreNo);
            Console.WriteLine("CentreCode " + CentreCode);
            if (CentreNo == CentreCode)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Centre Code is Displayed as per IT Sales Support Form" + CentreCode, "Centre Code");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Centre Code is not Displayed as per IT Sales Support Form", "Centre Code");
                Assert.Fail("Centre Code is Incorrect");
            }


            MoveToElement(driver, Control("CentreNumber", "ITSales"));
            string additionalemail = Element(driver, Control("formSenderEmail", "ITSales")).GetAttribute("title").ToString();
            Console.WriteLine("additionalemail " + additionalemail);
            Console.WriteLine("AddEmail " + AddEmail);
            if (additionalemail == AddEmail)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Additional email is Displayed as per IT Sales Support Form" + AddEmail, "Additional email");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Additional email is not Displayed as per IT Sales Support Form", "Additional email");
                Assert.Fail("Additional email is Incorrect");
            }
        }

        //open particular record from Unassigned IT Sales Opportunities view of the IT Sales Support user
        public void OpenUnassignedITSalesOpportunities(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            WaitUntil(driver, Control("SelectITSalesRecord", "Generic"), 90);
            Element(driver, Control("SelectITSalesRecord", "Generic")).Click();
        }

        public void VerifyPhoneCallActivityFromActivitiesTab(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(5);
            // string Opptitle = Element(driver, Control("RecordType", "ITSalesOppo")).GetAttribute("title");
            if (Elements(driver, Control("Phonecall", "Opportunity")) > 0)
            {
                ThinkTime(5);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Phone call activity created", "All activities");

            }

            else
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Phone call activity not created", "All activities");
                Assert.Fail("Phone call activity not created");
            }

            // string ActivityUnderOppo = Element(driver, Control("ActivitiesRegarding", "Opportunity")).GetAttribute("title");
            //if (ActivityUnderOppo == Opptitle)
            //{
            //    string AtivityType = Element(driver, Control("Activitytype", "Opportunity")).GetAttribute("title");
            //    if (AtivityType == "Phone Call")
            //    {
            //        ThinkTime(2);
            //        AddLog(driver, testInReport, testName, testDataIteration, "Pass", "phona Call activity is created", "Phone Call Activity");
            //    }
            //    else
            //    {
            //        AddLog(driver, testInReport, testName, testDataIteration, "Fail", "phona Call activity is not created", "Phone Call Activity");
            //        Assert.Fail("phona Call activity verification failed");
            //    }
            //}
            //else
            //{
            //    ThinkTime(1);
            //    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Ph Call Activity is not under required Opp", "Phone call Acivity");
            //}
        }

        //to find and select particular record from Advanced find

        public void FindAndSelectParticulareRecordFromGlobalSearch(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string AdvancedSearchVal,
            string categorizedSearch, string FilterWithValue, string SearchValueCompare)
        {
            WaitUntil(driver, Control("AdvancdFindBtn", "Generic"), 60);
            Element(driver, Control("AdvancdFindBtn", "Generic")).Click();

            ThinkTime(6);
            Select(Element(driver, Control("RelatedSearch", "Generic"))).SelectByText("Categorized Search ");

            WaitUntil(driver, Control("AdvancedSearchArea", "Generic"), 30);
            Element(driver, Control("AdvancedSearchArea", "Generic")).SendKeys(AdvancedSearchVal);

            WaitUntil(driver, Control("AdvancedSearchBtn", "Generic"), 30);
            Element(driver, Control("AdvancedSearchBtn", "Generic")).Click();

            ThinkTime(4);
            Select(Element(driver, Control("FilterWith", "Generic"))).SelectByText(FilterWithValue);

            ThinkTime(6);
            WaitUntil(driver, Control("AdvancedSearchResult", "Generic"), 30);
            string VerifySearch = Element(driver, Control("AdvancedSearchResult", "Generic")).GetAttribute("innerText");
            Console.WriteLine(VerifySearch);
            if (VerifySearch == AdvancedSearchVal)
            {
                WaitUntil(driver, Control("AdvancedSearchResult", "Generic"), 360);
                Element(driver, Control("AdvancedSearchResult", "Generic")).Click();
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Search result filter with Opportunities", "Opportunities");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Search result filter with Opportunities", "Opportunities");
                Assert.Fail("Search result are not same");
            }


        }

        //drag and drop for same time slots
        public void DragAndDrop(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {

            IWebElement Drag = Element(driver, Control("DragTour", "Generic"));
            Element(driver, Control("DropLocation", "Generic")).Click();
            IWebElement DropLocation = Element(driver, Control("DropLocation", "Generic"));
            Actions actionProvider = new Actions(driver);
            actionProvider.DragAndDrop(Drag, DropLocation).Build().Perform();
            //verify text changed in to 'Drop here' box 
            //String DropValue = DropLocation.Text;
            ThinkTime(5);
            string Droptext = Element(driver, Control("VerifyDropValue", "Generic")).GetAttribute("text");
            Console.WriteLine(Droptext);
            ThinkTime(20);
        }

        //drag and drop for different time slots
        public void DragAndDropDifferentTimeSlots(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {

            IWebElement Drag = Element(driver, Control("DragTour", "Generic"));
            Element(driver, Control("DropDiffLoc", "Generic")).Click();
            IWebElement DropLocation = Element(driver, Control("DropDiffLoc", "Generic"));
            Actions actionProvider = new Actions(driver);
            actionProvider.DragAndDrop(Drag, DropLocation).Build().Perform();
            ThinkTime(10);
        }

        //drag and drop for different time slots(2:30PM to 4PM)
        public void DragAndDropToUnAvailableASM(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {

            IWebElement Drag = Element(driver, Control("DragTour1", "Generic"));
            //Element(driver, Control("Outofoffice", "Generic")).Click();
            IWebElement DropLocation = Element(driver, Control("DropTour1", "Generic"));
            Actions actionProvider = new Actions(driver);
            actionProvider.DragAndDrop(Drag, DropLocation).Build().Perform();
            ThinkTime(5);
        }

        //drag and drop for different time slots(2:30PM to 4PM)
        public void DragAndDropToUnAvailableASM1(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {

            IWebElement Drag = Element(driver, Control("DragBookedTour", "Generic"));
            //Element(driver, Control("Outofoffice", "Generic")).Click();
            IWebElement DropLocation = Element(driver, Control("DropTour1", "Generic"));
            Actions actionProvider = new Actions(driver);
            actionProvider.DragAndDrop(Drag, DropLocation).Build().Perform();
            ThinkTime(5);
        }

        //To verify Drag and Drop a booked tour to different time slot between ASMs will display error message
        public void NotAllowedMessageFordragAndDropTour(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {
            ThinkTime(10);
            WaitUntil(driver, Control("ErrorMsgDiffTimeSlot", "Generic"), 320);
            if (Elements(driver, Control("ErrorMsgDiffTimeSlot", "Generic")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "AD is able not able to drag tour to Diff time slot", "Not allowed");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "AD is able not able to drag tour to Diff time slot", "Not allowed");
                Assert.Fail("Funtionality not Working");
            }

        }

        //To verify Drag and Drop a booked tour to different time slot between ASMs will display error message
        public void ErrorMessageForOutOfficeASM(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {
            ThinkTime(10);
            WaitUntil(driver, Control("OutofofficeMsg", "Generic"), 320);
            if (Elements(driver, Control("OutofofficeMsg", "Generic")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "drag and drop tour is displayed Err msg for out office ASM", "Not allowed");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "drag and drop tour is displayed Err msg for out office ASM", "Not allowed");
                Assert.Fail("Funtionality not Working");
            }

        }

        //doesn't have permission to delete other users opportunity record
        public void DonotHavePermissionToDeleteOtherUsersRecord(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {
            ThinkTime(2);

            if (Elements(driver, Control("DeleteConfirmOpp", "Opportunity")) > 0)
            {
                ThinkTime(2);
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "have permission to delete other users opportunity record", "Delete Permission");
                Assert.Fail("Verification Failed");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "doesn't have permission to delete other users opportunity record", "Delete Permission");

            }
        }

        //Method to should not create new Account.
        public void ITSalesShouldNotCreateNewAccount(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {
            ThinkTime(2);

            if (Elements(driver, Control("OpportunityNewButton", "EnterpriseSales")) > 0)
            {
                ThinkTime(2);
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "IT Sales User is able to create new Account", "Account Creation");
                Assert.Fail("Verification Failed");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "IT Sales User is not able to create new Account", "Account Creation");

            }

        }

        //Generic Dashboard Selection

        public void OpenCalanderFromTourManagement(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(8);
            SwitchToFrame(driver, "ff055ff7-10a3-4311-a80f-f4175462c1a2_WebResource_tourManagementLink");

            ThinkTime(3);
            MoveToElement(driver, Control("CalenderWindow", "Dashboards"));
            Element(driver, Control("CalenderWindow", "Dashboards")).Click();

            ThinkTime(4);
            string parentWindowHandle = driver.CurrentWindowHandle;
            WindowHandling(driver);
            ThinkTime(1);
            driver.Manage().Window.Maximize();
            ThinkTime(1);
            WaitUntil(driver, Control("ManagerBTCalander", "Generic"), 180);
            if (Elements(driver, Control("ManagerBTCalander", "Generic")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Tour management calander view page is displayed", "Manager city Dairy");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Tour management calander view page is displayed", "Manager city Dairy");
            }

        }


        //Selecting city dairy
        public void SelectingCityDairyFromBTCalander(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string citydiary)
        {
            ThinkTime(10);
            driver.SwitchTo().DefaultContent();
            string parentWindowHandle = driver.CurrentWindowHandle;
            WindowHandling(driver);
            string parentWindowHandle1 = driver.CurrentWindowHandle;
            WindowHandling(driver);

            ThinkTime(5);
            driver.Manage().Window.Maximize();

            ThinkTime(10);
            Element(driver, Control("CityDiary", "Opportunity")).SendKeys(Keys.Control + "a");
            Element(driver, Control("CityDiary", "Opportunity")).SendKeys(Keys.Delete);
            Element(driver, Control("CityDiary", "Opportunity")).SendKeys(citydiary);
            Element(driver, Control("CityDiary", "Opportunity")).SendKeys(Keys.Enter);
            ThinkTime(10);

        }

        //selecting centre
        public void SelectingCentreFromBTCalander(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string SelectCentre)
        {

            ThinkTime(10);
            WaitUntil(driver, Control("SelectCityDropdown", "Opportunity"), 30);
            MoveToElement(driver, Control("SelectCityDropdown", "Opportunity"));
            Element(driver, Control("SelectCityDropdown", "Opportunity")).Click();

            WaitUntil(driver, Control("SelectCityValue", "Generic"), 180);
            MoveToElement(driver, Control("SelectCityValue", "Generic"));
            Element(driver, Control("SelectCityValue", "Generic")).SendKeys(SelectCentre);
            Element(driver, Control("SelectCityValue", "Generic")).SendKeys(Keys.Enter);
            ThinkTime(4);
            if (Element(driver, Control("Centre", "Opportunity")).GetAttribute("value").Contains(SelectCentre))
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Correct City Diary and Centre", "CityDiary and Centre");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Incorrect City Diary and Centre", "CityDiary and Centre");
                Assert.Fail("Incorrect City Diary and Centre");
            }

            ThinkTime(10);

        }
        //Handle save changes pop up
        public void HandleSaveChangespopup(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            WaitUntil(driver, Control("CancelButton", "Accounts"), 30);
            Element(driver, Control("CancelButton", "Accounts")).Click();

        }

        //Handle save changes pop up
        public void ForwardTheTourPage(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            WaitUntil(driver, Control("TourPageForwardBtn", "Generic"), 360);
            Element(driver, Control("TourPageForwardBtn", "Generic")).Click();
            ThinkTime(20);
        }
        // Enter Service Provider details
        public void Enterserviceproviderdetails(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            MoveToElement(driver, Control("ServiceProvideraccount", "Opportunity"));
            ActionsClick(driver, Control("ServiceProvideraccount", "Opportunity"));
            ActionsClick(driver, Control("serviceprovideraccountlookup", "Opportunity"));
            MoveToElement(driver, Control("Accountlookupvalue", "Opportunity"));

            ActionsClick(driver, Control("Accountlookupvalue", "Opportunity"));

            MoveToElement(driver, Control("ServiceProvidercontact", "Opportunity"));
            ActionsClick(driver, Control("ServiceProvidercontact", "Opportunity"));
            ActionsClick(driver, Control("serviceprovidercontactlookup", "Opportunity"));
            MoveToElement(driver, Control("Contactlookupvalue", "Opportunity"));

            ActionsClick(driver, Control("Contactlookupvalue", "Opportunity"));
            saveFooter(driver, testInReport, testName, testDataIteration);

        }


        public string SelectTourManager(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string TourManagement, string centre)
        {
            ThinkTime(2);
            WaitUntil(driver, Control("DashDropdwn", "Dashboards"), 90);
            MoveToElement(driver, Control("DashDropdwn", "Dashboards"));
            Element(driver, Control("DashDropdwn", "Dashboards")).Click();
            ThinkTime(2);

            MoveToElement(driver, Control("dropdownValue", TourManagement, "Dashboards"));
            Element(driver, Control("dropdownValue", TourManagement, "Dashboards")).Click();
            ThinkTime(20);

            SwitchToFrame(driver, "ff055ff7-10a3-4311-a80f-f4175462c1a2_WebResource_tourManagementLink");
            ThinkTime(2);
            WaitUntil(driver, Control("CalenderWindow", "Dashboards"), 90);
            MoveToElement(driver, Control("CalenderWindow", "Dashboards"));
            Element(driver, Control("CalenderWindow", "Dashboards")).Click();
            ThinkTime(4);

            ThinkTime(1);
            string parentWindowHandle = driver.CurrentWindowHandle;


            WindowHandling(driver);
            ThinkTime(1);
            driver.Manage().Window.Maximize();

            //driver.SwitchTo().DefaultContent();
            ThinkTime(2);
            WaitUntil(driver, Control("CityDrpdwn", "Dashboards"), 90);
            MoveToElement(driver, Control("CityDrpdwn", "Dashboards"));
            Element(driver, Control("CityDrpdwn", "Dashboards")).Click();
            ThinkTime(2);
            WaitUntil(driver, Control("CityValue", "Dashboards"), 90);
            MoveToElement(driver, Control("CityValue", "Dashboards"));
            Element(driver, Control("CityValue", "Dashboards")).Click();
            ThinkTime(2);
            WaitUntil(driver, Control("Slotcentredashboard", "Dashboards"), 90);
            ActionsClick(driver, Control("Slotcentredashboard", "Dashboards"));

            ThinkTime(10);
            WaitUntil(driver, Control("Slotopopupdashboard", "Dashboards"), 90);
            ElementHighlight(driver, Control("Slotopopupdashboard", "Dashboards"));
            ElementHighlight(driver, Control("Slotopopupdashboard", "Dashboards"));
            string value = Element(driver, Control("Slotopopupdashboard", "Dashboards")).GetAttribute("innerText");
            // WindowHandling(driver);
            Console.WriteLine(centre);
            Console.WriteLine(value);
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Verified successfully", "Verified successfully");
            WindowHandling(driver, parentWindowHandle);
            return parentWindowHandle;

        }

        public void SelectManager(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string TourManagement)
        {
            ThinkTime(2);
            WaitUntil(driver, Control("DashDropdwn", "Dashboards"), 180);
            MoveToElement(driver, Control("DashDropdwn", "Dashboards"));
            Element(driver, Control("DashDropdwn", "Dashboards")).Click();
            ThinkTime(2);

            MoveToElement(driver, Control("dropdownValue", TourManagement, "Dashboards"));
            Element(driver, Control("dropdownValue", TourManagement, "Dashboards")).Click();
            ThinkTime(2);

            SwitchToFrame(driver, "ff055ff7-10a3-4311-a80f-f4175462c1a2_WebResource_tourManagementLink");

            MoveToElement(driver, Control("CalenderWindow", "Dashboards"));
            Element(driver, Control("CalenderWindow", "Dashboards")).Click();
            ThinkTime(4);

            ThinkTime(1);
            string parentWindowHandle = driver.CurrentWindowHandle;


            WindowHandling(driver);
            ThinkTime(1);
            driver.Manage().Window.Maximize();
            ThinkTime(3);
            //driver.SwitchTo().DefaultContent();

            MoveToElement(driver, Control("CityDrpdwn", "Dashboards"));
            Element(driver, Control("CityDrpdwn", "Dashboards")).Click();
            ThinkTime(3);

            MoveToElement(driver, Control("CityValue", "Dashboards"));
            Element(driver, Control("CityValue", "Dashboards")).Click();
            ThinkTime(3);

            MoveToElement(driver, Control("CentreDrpdwn", "Dashboards"));
            Element(driver, Control("CentreDrpdwn", "Dashboards")).Click();
            ThinkTime(3);

            MoveToElement(driver, Control("CentreValue", "Dashboards"));
            Element(driver, Control("CentreValue", "Dashboards")).Click();
            ThinkTime(3);

            MoveToElement(driver, Control("BookedTr", "Dashboards"));
            string BookedCtr = Element(driver, Control("BookedTr", "Dashboards")).Text.ToString();
            Console.WriteLine(BookedCtr);
            if (BookedCtr.Contains("Alberta, Calgary - Crowfoot Centre;2556"))
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Selected City and Centre are not Present in the calender view", "Selected City and Centre are not Present in the calender view");
                Assert.Fail("Role1 is not Present in the calender view");


            }

            else
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Selected City and Centre are Present in the calender view", "Selected City and Centre are Present in the calender view");
            }

            driver.Close();
            driver.SwitchTo().Window(parentWindowHandle);
            driver.SwitchTo().DefaultContent();
        }


        public void VerifyUserRoles(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string Role1, string Role2, string parentWindowHandle)
        {
            ThinkTime(5);
            driver.SwitchTo().DefaultContent();
            parentWindowHandle = driver.CurrentWindowHandle;
            WindowHandling(driver);
            // WaitUntil(driver, Control("UserRole", Role1, "Dashboards"), 360); ;
            ElementHighlight(driver, Control("UserRole1", Role1, "Dashboards"));
            string UserRole1 = Element(driver, Control("UserRole1", Role1, "Dashboards")).GetAttribute("title").ToString();
            Console.WriteLine(Role1);
            Console.WriteLine(UserRole1);
            if (UserRole1 == Role1)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Role1 is Present in the calender view", "Role1 is Present in the calender view");

            }

            else
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Role1 is not Present in the calender view", "Role1 is not Present in the calender view");
                Assert.Fail("Role1 is not Present in the calender view");
            }

            MoveToElement(driver, Control("UserRole1", Role2, "Dashboards"));
            string UserRole2 = Element(driver, Control("UserRole1", Role2, "Dashboards")).Text.ToString();
            if (UserRole2 == Role2)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Role2 is Present in the calender view", "Role2 is Present in the calender view");

            }

            else
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Role2 is not Present in the calender view", "Role2 is not Present in the calender view");
                Assert.Fail("Role2 is not Present in the calender view");
            }





            driver.Close();
            driver.SwitchTo().Window(parentWindowHandle);
            driver.SwitchTo().DefaultContent();
        }


        //Select Service provider account 
        public void SelectandverifyServiceProviderAccount(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string accountname)
        {
            SearchforRecord(driver, testInReport, testName, testDataIteration, accountname);
            SelectActiveCellContacts(driver, testInReport, testName, testDataIteration);
            ThinkTime(5);
            scrollDownOpportunityPage(driver, testInReport, testName, testDataIteration);
            scrollDownOpportunityPage(driver, testInReport, testName, testDataIteration);
            if (Elements(driver, Control("FlipSwitch", "Accounts")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Service Provider is set to Yes", "ServiceProvider");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Service Provider is set to Yes", "ServiceProvider");
                Assert.Fail("Service Provider is not set to Yes");
            }
        }



        //Verify the drop down contains the specified values for opportunities
        public void VerifyDropDownValuesforopportunity(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {

            ThinkTime(30);
            Element(driver, Control("activeCaseSelector", "GenericOld")).Click();
            IList<IWebElement> obj = driver.FindElements(Control("DropDownValues", "Opportunity"));
            int count = Elements(driver, Control("DropDownValues", "Opportunity"));
            string[] dropdownvalue = { "Open Enterprise Opportunities", "My Enterprise Opportunities", "Enterprise Deals Won This Month", "Enterprise Lost Opportunities" };



            for (int i = 0; i < 4; i++)
            {
                int j = 0;

                for (int k = 0; k < count; k++)
                {


                    if ((dropdownvalue[i]).Equals(obj[k].Text))
                    {
                        Console.WriteLine("pass");
                        AddLog(driver, testInReport, testName, testDataIteration, "Pass", dropdownvalue[i] + "is available", "DropdownValues");
                    }

                    else
                    {
                        j++;
                    }
                }



                if (j > count - 1)
                {
                    Console.WriteLine(dropdownvalue[i] + "is not available");
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Faild to fine the dropdown value", "DropdownValues");
                    Assert.Fail("Failed to find the specified Option");
                }

            }
        }

        public void VerifyBrokerdropdownvaluesquickcreate(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string NewContactLname)
        {
            ThinkTime(2);
            WaitUntil(driver, Control("NewContactLname", "EnterpriseSales"), 70);
            Element(driver, Control("NewContactLname", "EnterpriseSales")).Click();
            Element(driver, Control("NewContactLname", "EnterpriseSales")).SendKeys(NewContactLname);
            ThinkTime(2);

            // Enter Language - UK English
            WaitUntil(driver, Control("ContactLanguage", "EnterpriseSales"), 70);
            Element(driver, Control("ContactLanguage", "EnterpriseSales")).Click();
            Element(driver, Control("ContactLanguage", "EnterpriseSales")).SendKeys("Uk english");
            ThinkTime(2);
            WaitUntil(driver, Control("ContactLanguageDropdownSelect", "EnterpriseSales"), 70);
            Element(driver, Control("ContactLanguageDropdownSelect", "EnterpriseSales")).Click();
            ThinkTime(2);
            //WaitUntil(driver, Control("QuickCreateContactAccount", "ITSales"), 30);
            //Element(driver, Control("QuickCreateContactAccount", "ITSales")).Click();
            //Element(driver, Control("QuickCreateContactAccount", "ITSales")).SendKeys("L Z Development Pty Ltd");
            //ThinkTime(7);
            //WaitUntil(driver, Control("QuickCreateAccountDropdownClick", "ITSales"), 30);
            //Element(driver, Control("QuickCreateAccountDropdownClick", "ITSales")).Click();
            //ThinkTime(4);
            scrollDownQuickCreatePageITSales(driver, testInReport, testName, testDataIteration);
            ThinkTime(2);
            MoveToElement(driver, Control("SelectBroker", "EnterpriseSales"));
            ThinkTime(1);
            Select(Element(driver, Control("SelectBroker", "EnterpriseSales"))).SelectByText("Internet/Web Broker");
            AddLog(driver, testInReport, testName, testDataIteration, "Pas", "Brokerdropdownvalueverification", "DropdownValues");

            Select(Element(driver, Control("SelectBroker", "EnterpriseSales"))).SelectByText("Real Estate Broker");
            AddLog(driver, testInReport, testName, testDataIteration, "Pas", "Brokerdropdownvalueverification", "DropdownValues");

            Select(Element(driver, Control("SelectBroker", "EnterpriseSales"))).SelectByText("Residential Broker");
            AddLog(driver, testInReport, testName, testDataIteration, "Pas", "Brokerdropdownvalueverification", "DropdownValues");

            Select(Element(driver, Control("SelectBroker", "EnterpriseSales"))).SelectByText("Partner");
            AddLog(driver, testInReport, testName, testDataIteration, "Pas", "Brokerdropdownvalueverification", "DropdownValues");

        }

        public void VerifyBrokerdropdownvaluesquickcreateAccount(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string companyname)
        {
            ThinkTime(8);

            WaitUntil(driver, Control("CompanyNameField", "Accounts"), 30);
            Element(driver, Control("CompanyNameField", "Accounts")).Click();
            Element(driver, Control("CompanyNameField", "Accounts")).SendKeys(companyname);
            ThinkTime(7);

            MoveToElement(driver, Control("SelectBroker", "EnterpriseSales"));
            ThinkTime(1);
            Select(Element(driver, Control("SelectBroker", "EnterpriseSales"))).SelectByText("Internet/Web Broker");
            AddLog(driver, testInReport, testName, testDataIteration, "Pas", "Brokerdropdownvalueverification", "DropdownValues");

            Select(Element(driver, Control("SelectBroker", "EnterpriseSales"))).SelectByText("Real Estate Broker");
            AddLog(driver, testInReport, testName, testDataIteration, "Pas", "Brokerdropdownvalueverification", "DropdownValues");

            Select(Element(driver, Control("SelectBroker", "EnterpriseSales"))).SelectByText("Residential Broker");
            AddLog(driver, testInReport, testName, testDataIteration, "Pas", "Brokerdropdownvalueverification", "DropdownValues");

            Select(Element(driver, Control("SelectBroker", "EnterpriseSales"))).SelectByText("Partner");
            AddLog(driver, testInReport, testName, testDataIteration, "Pas", "Brokerdropdownvalueverification", "DropdownValues");

        }




        public void VerifyBrokerdropdownvalues(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {

            ThinkTime(10);

            MoveToElement(driver, Control("Brokerdropdown", "Contacts"));
            ThinkTime(1);
            Select(Element(driver, Control("SelectBroker", "EnterpriseSales"))).SelectByText("Internet/Web Broker");
            AddLog(driver, testInReport, testName, testDataIteration, "Pas", "Brokerdropdownvalueverification", "DropdownValues");

            Select(Element(driver, Control("SelectBroker", "EnterpriseSales"))).SelectByText("Real Estate Broker");
            AddLog(driver, testInReport, testName, testDataIteration, "Pas", "Brokerdropdownvalueverification", "DropdownValues");

            Select(Element(driver, Control("SelectBroker", "EnterpriseSales"))).SelectByText("Residential Broker");
            AddLog(driver, testInReport, testName, testDataIteration, "Pas", "Brokerdropdownvalueverification", "DropdownValues");

            Select(Element(driver, Control("SelectBroker", "EnterpriseSales"))).SelectByText("Partner");
            AddLog(driver, testInReport, testName, testDataIteration, "Pas", "Brokerdropdownvalueverification", "DropdownValues");

        }

        public void Verifycontacttypefields(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(3);
            AddLog(driver, testInReport, testName, testDataIteration, "Pas", "Contacttypeverification", "Contacttypeverification");
            int Customer = Elements(driver, Control("Contacttypecustomer", "Contacts"));
            int Employee = Elements(driver, Control("Contacttypeemployee", "Contacts"));
            int Prospect = Elements(driver, Control("Contacttypeprospect", "Contacts"));
            int Supplier = Elements(driver, Control("Contacttypesupplier", "Contacts"));

            if (Customer > 0 && Employee > 0 && Prospect > 0 && Supplier > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pas", "Contacttypeverification", "Contacttypeverification");

            }

            else
            {
                Assert.Fail("Contact type labels incorrect");
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Contacttypeverification", "Contacttypeverification");

            }
        }

        public void VerifycontacttypefieldsAccount(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(3);
            AddLog(driver, testInReport, testName, testDataIteration, "Pas", "Contacttypeverification", "Contacttypeverification");
            int Customer = Elements(driver, Control("ContacttypecustomerAccount", "Contacts"));
            int contacttypeserviceprovider = Elements(driver, Control("ContacttypeServiceproviderAccount", "Contacts"));
            int Prospect = Elements(driver, Control("ContacttypeprospectAccount", "Contacts"));
            int Supplier = Elements(driver, Control("ContacttypesupplierAccount", "Contacts"));

            if (Customer > 0 && contacttypeserviceprovider > 0 && Prospect > 0 && Supplier > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pas", "Contacttypeverification", "Contacttypeverification");

            }

            else
            {
                Assert.Fail("Contact type labels incorrect");
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Contacttypeverification", "Contacttypeverification");

            }
        }




        public void Verifymultiplecontacttypeselected(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(3);
            AddLog(driver, testInReport, testName, testDataIteration, "Pas", "Contacttypeverification", "Contacttypeverification");
            Element(driver, Control("ToggleCustomer", "Contacts")).Click();
            //Element(driver, Control("ToggleEmployee", "Contacts")).Click();
            Element(driver, Control("ToggleProspect", "Contacts")).Click();
            // Element(driver, Control("togglesupplier", "Contacts")).Click();


            AddLog(driver, testInReport, testName, testDataIteration, "Pas", "Contacttypeverification", "Contacttypeverification");

            Element(driver, Control("Togglecustomertwice", "Contacts")).Click();
            saveFooter(driver, testInReport, testName, testDataIteration);

        }

        public void Verifymultiplecontacttypeselectedquickcreate(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(3);
            AddLog(driver, testInReport, testName, testDataIteration, "Pas", "Contacttypeverification", "Contacttypeverification");
            Element(driver, Control("ToggleCustomer", "Contacts")).Click();
            ThinkTime(2);
            //Element(driver, Control("ToggleEmployee", "Contacts")).Click();
            Element(driver, Control("ToggleProspect", "Contacts")).Click();
            ThinkTime(2);
            //Element(driver, Control("togglesupplier", "Contacts")).Click();
            AddLog(driver, testInReport, testName, testDataIteration, "Pas", "Contacttypeverification", "Contacttypeverification");

            // Save Footer
            WaitUntil(driver, Control("SaveContactButton", "Generic"), 30);
            MoveToElement(driver, Control("SaveContactButton", "Generic"));
            Element(driver, Control("SaveContactButton", "Generic")).Click();
            ThinkTime(5);
            AddLog(driver, testInReport, testName, testDataIteration, "Pas", "Contacttypeverification", "Contacttypeverification");




        }


        public void VerifyDashboardkpiheadersITinsideSales(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string kpi1, string kpi2, string kpi3, string kpi4, string kpi5)
        {
            WaitUntil(driver, Control("ITSalessupportdashboardheader", kpi1, "36.1_Dashboard"), 30);
            int value1 = Elements(driver, Control("ITSalessupportdashboardheader", kpi1, "36.1_Dashboard"));
            int value2 = Elements(driver, Control("ITSalessupportdashboardheader", kpi2, "36.1_Dashboard"));
            ThinkTime(1);
            scrollDownDashboard(driver, testInReport, testName, testDataIteration);
            ThinkTime(1);
            scrollDownDashboard(driver, testInReport, testName, testDataIteration);

            ThinkTime(3);
            int value3 = Elements(driver, Control("ITSalessupportdashboardheader", kpi3, "36.1_Dashboard"));

            int value4 = Elements(driver, Control("ITSalessupportdashboardchart", kpi4, "36.1_Dashboard"));
            ThinkTime(2);
            scrollDownDashboard(driver, testInReport, testName, testDataIteration);
            ThinkTime(1);
            scrollDownDashboard(driver, testInReport, testName, testDataIteration);
            ThinkTime(2);
            int value5 = Elements(driver, Control("ITSalessupportdashboardchart", kpi5, "36.1_Dashboard"));
            ThinkTime(2);

            if (value1 > 0 && value2 > 0 && value3 > 0 && value4 > 0 && value5 > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Available KPIs are correct", "DashboardKPI");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "KPIs are incorrect", "DashboardKPI");
                Assert.Fail("Incorrect KPI");
            }
            ThinkTime(4);
        }


        public void verifyoppstatusreasonforlost(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {
            ThinkTime(5);
            WaitUntil(driver, Control("StatusReasonlostwon", "Opportunity"), 30);
            //Select(Element(driver, Control("StatusReasonlostwon", "Opportunity"))).SelectByText(oppstatus);
            //ThinkTime(2);

            string[] oppstatusoptions = { "Incorrect / Invalid contact details", "Not a sales call", "Duplicate", "Decide to work from home", "Location not suitable", "Price too high", "Project cancelled", "Regus product", "Renewed existing lease options", "Selected competition", "Not able to reach", "Needs more time" };

            for (int i = 0; i < 2; i++)
            {
                if (Elements(driver, Control("OpporunityValue", oppstatusoptions[i], "Opportunity")) > 0)
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", oppstatusoptions[i] + "is available", "DropdownValues");

                }

                else
                    Assert.Fail(oppstatusoptions[i] + " option is not available");
            }
            Element(driver, Control("Cancelbutton", "Opportunity")).Click();
            ThinkTime(8);



            if (Elements(driver, Control("SavePopUp", "Contacts")) > 0)
            {
                DiscardChanges(driver, testInReport, testName, testDataIteration);
                //WaitUntil(driver, Control("Discardbutton", "Opportunity"), 30);
                //MoveToElement(driver, Control("Discardbutton", "Opportunity"));
                //Element(driver, Control("Discardbutton", "Opportunity")).Click();
                ThinkTime(3);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Discard changes PopUp  Handled", "PopUp handling");

            }
        }


        public void verifyoppstatusreasonforwon(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {
            ThinkTime(5);

            if (Elements(driver, Control("OppCloseButton", "Opportunity")) > 0)
            {
                Element(driver, Control("OppCloseButton", "Opportunity")).Click();
                ThinkTime(8);
            }
        }

        public void chooseoppstatusandclose(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string oppstatusoptions)
        {


            WaitUntil(driver, Control("StatusReasonlostwon", "Opportunity"), 30);
            Element(driver, Control("StatusReasonlostwon", "Opportunity")).Click();
            Select(Element(driver, Control("StatusReasonlostwon", "Opportunity"))).SelectByText("Not able to reach");
            ThinkTime(2);
            Element(driver, Control("OpporunityValue", oppstatusoptions, "Opportunity")).Click();
            ThinkTime(2);
            Element(driver, Control("Saveregardingaccount", "Opportunity")).Click();
            ThinkTime(2);
        }

        public void Verifystatusforalllostreason(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {
            string[] oppstatusoptions1 = { "Incorrect / Invalid contact details", "Not a sales call", "Duplicate", "Decide to work from home", "Location not suitable", "Price too high", "Project cancelled", "Regus product", "Renewed existing lease options", "Selected competition", "Not able to reach", "Needs more time" };

            for (int i = 0; i < 2; i++)
            {
                ThinkTime(5);
                // Click Closeas Lost
                SelectOpportunityheader(driver, testInReport, testName, testDataIteration, "Close as Lost", "Form:opportunity");
                ThinkTime(3);

                chooseoppstatusandclose(driver, testInReport, testName, testDataIteration, oppstatusoptions1[i]);
                ThinkTime(3);

                VerifyStatusReasonheader(driver, testInReport, testDataIteration, testName, oppstatusoptions1[i]);
                ThinkTime(3);
                VerifyOpportunitystatus(driver, testInReport, testDataIteration, testName, "Lost");
                //NavigateToEntity(driver, testInReport, testName, testDataIteration, "Closed Opportunities");
                // SelectingActiveCell(driver, testInReport, testName, testDataIteration);
                ThinkTime(3);

                // Reopen
                SelectOpportunityheader(driver, testInReport, testName, testDataIteration, "Reopen Opportunity", "Form:opportunity");
                ThinkTime(8);


            }

        }



        public void Verifyduplicaterecordforcloseaslost(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string oppname)
        {
            string[] oppstatusoptions1 = { "Incorrect / Invalid contact details", "Not a sales call", "Duplicate", "Decide to work from home", "Location not suitable", "Price too high", "Project cancelled", "Regus product", "Renewed existing lease options", "Selected competition", "Not able to reach", "Needs more time" };

            for (int i = 0; i < 1; i++)
            {
                // Click Closeas Lost
                SelectOpportunityheader(driver, testInReport, testName, testDataIteration, "Close as Lost", "Form:opportunity");

                chooseoppstatusandclose(driver, testInReport, testName, testDataIteration, oppstatusoptions1[i]);


                VerifyStatusReasonheader(driver, testInReport, testDataIteration, testName, oppstatusoptions1[i]);
                VerifyOpportunitystatus(driver, testInReport, testDataIteration, testName, "Lost");
                NavigateToEntity(driver, testInReport, testName, testDataIteration, "Opportunities");
                SelectValuesFromDropDown(driver, testInReport, testName, testDataIteration, "My Open Opportunities");
                ThinkTime(5);
                verifyduplicaterecordinopenopp(driver, testInReport, testName, testDataIteration, oppname);
                ThinkTime(8);
                SelectValuesFromDropDown(driver, testInReport, testName, testDataIteration, "All Opportunities");
                ThinkTime(5);
                verifyduplicaterecordinclosedopp(driver, testInReport, testName, testDataIteration, oppname);
                ThinkTime(8);
                RecordGlobalSearchopportunity(driver, testInReport, testName, testDataIteration, oppname);
                SelectingActiveCell(driver, testInReport, testName, testDataIteration);

                // Reopen
                SelectOpportunityheader(driver, testInReport, testName, testDataIteration, "Reopen Opportunity", "Form:opportunity");
                ThinkTime(8);

            }
        }

        public void ClickMoreandseeallrecordsforchart(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string more, string header)

        {
            ThinkTime(5);
            // Click on More and select to see all records
            ThinkTime(10);
            MoveToElement(driver, Control("ITSalessupportdashboardchart", header, "36.1_Dashboard"));
            ActionsClick(driver, Control("ITInsideSalesMorebutton", more, "36.1_Dashboard"));
            ThinkTime(2);
            ActionsClick(driver, Control("ViewRecord", "36.1_Dashboard"));
            ThinkTime(2);
        }

        public void ClickMoreandseeallrecordsforchart1(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string more, string header)

        {
            ThinkTime(5);
            // Click on More and select to see all records
            ThinkTime(10);
            WaitUntil(driver, Control("ITSalessupportdashboardchart", header, "36.1_Dashboard"), 360);
            MoveToElement(driver, Control("ITSalessupportdashboardchart", header, "36.1_Dashboard"));
            ActionsClick(driver, Control("ITInsideSalesMorebutton1", more, "36.1_Dashboard"));
            ThinkTime(2);
            ActionsClick(driver, Control("ViewRecord", "36.1_Dashboard"));
            ThinkTime(2);
        }


        public void Selectdashboardactivities(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string more1, string header1)
        {

            // Click on the first See more in the dashboard to view all records
            ThinkTime(4);

            WaitUntil(driver, Control("KPIViews", header1, "Dashboards"), 30);
            ThinkTime(4);
            ActionsClick(driver, Control("Managerdashdropdown", more1, "36.1_Dashboard"));
            ThinkTime(5);

            //ActionsClick(driver, Control("ContactDetails", header1, "Contacts"));
            //ThinkTime(2);



        }
        public void ClickMoreandseeallrecords(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string more1, string header1)
        {

            // Click on the first See more in the dashboard to view all records
            ThinkTime(4);

            WaitUntil(driver, Control("KPIViews", header1, "Dashboards"), 30);
            ThinkTime(4);
            ActionsClick(driver, Control("ITInsideSalesMorebutton1", more1, "36.1_Dashboard"));
            ThinkTime(5);
            MoveToElement(driver, Control("SeeAllRecordAssociateBtn", "GenericOld"));
            Element(driver, Control("SeeAllRecordAssociateBtn", "GenericOld")).Click();
            ThinkTime(3);


        }
        public void ClickMoreandseeallrecords1(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string more1, string header1)
        {

            // Click on the first See more in the dashboard to view all records
            ThinkTime(4);

            WaitUntil(driver, Control("KPIViewsVerify", header1, "Dashboards"), 360);
            ThinkTime(4);
            ActionsClick(driver, Control("ITInsideSalesMorebutton1", more1, "36.1_Dashboard"));
            ThinkTime(5);
            MoveToElement(driver, Control("SeeAllRecordAssociateBtn", "GenericOld"));
            Element(driver, Control("SeeAllRecordAssociateBtn", "GenericOld")).Click();
            ThinkTime(3);


        }

        public void ClickMoreandseeallrecords2(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string more1, string header1)
        {

            // Click on the first See more in the dashboard to view all records
            ThinkTime(4);

            WaitUntil(driver, Control("KPIViews1", header1, "Dashboards"), 30);
            ThinkTime(4);
            ActionsClick(driver, Control("ITInsideSalesMorebutton", more1, "36.1_Dashboard"));
            ThinkTime(5);
            //scrollMiddleDown(driver, testInReport,testName, testDataIteration);
            MoveToElement(driver, Control("SeeAllRecordAssociateBtn", "GenericOld"));
            Element(driver, Control("SeeAllRecordAssociateBtn", "GenericOld")).Click();
            ThinkTime(3);


        }
        public void ClickMoreManagerdashboardandseeallrecords(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string more1, string header1)
        {

            // Click on the first See more in the dashboard to view all records
            ThinkTime(4);

            WaitUntil(driver, Control("ITInsideSalesManagerMorebutton", more1, "36.1_Dashboard"), 30);
            ThinkTime(4);
            WaitUntil(driver, Control("ITInsideSalesManagerMorebutton", more1, "36.1_Dashboard"), 30);
            MoveToElement(driver, Control("ITInsideSalesManagerMorebutton", more1, "36.1_Dashboard"));
            ActionsClick(driver, Control("ITInsideSalesManagerMorebutton", more1, "36.1_Dashboard"));
            ThinkTime(5);
            MoveToElement(driver, Control("SeeAllRecordAssociateBtn", "GenericOld"));
            Element(driver, Control("SeeAllRecordAssociateBtn", "GenericOld")).Click();
            ThinkTime(3);
        }

        public void ClickMoreManagerdashboardandseeallrecords2(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string more1, string header1)
        {

            // Click on the first See more in the dashboard to view all records
            ThinkTime(4);

            WaitUntil(driver, Control("KPIViews1", header1, "Dashboards"), 30);
            ThinkTime(4);
            WaitUntil(driver, Control("ITInsideSalesMorebutton", more1, "36.1_Dashboard"), 30);
            MoveToElement(driver, Control("ITInsideSalesMorebutton", more1, "36.1_Dashboard"));
            ActionsClick(driver, Control("ITInsideSalesMorebutton", more1, "36.1_Dashboard"));
            ThinkTime(5);
            MoveToElement(driver, Control("SeeAllRecordAssociateBtn", "GenericOld"));
            Element(driver, Control("SeeAllRecordAssociateBtn", "GenericOld")).Click();
            ThinkTime(3);
        }


        public void ClickMoreManagerdashboardandseeallrecords1(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string more1, string header1)
        {

            // Click on the first See more in the dashboard to view all records
            ThinkTime(4);

            WaitUntil(driver, Control("KPIViewsVerify", header1, "Dashboards"), 30);
            ThinkTime(4);
            WaitUntil(driver, Control("ITInsideSalesMorebutton1", more1, "36.1_Dashboard"), 30);
            MoveToElement(driver, Control("ITInsideSalesMorebutton1", more1, "36.1_Dashboard"));
            ActionsClick(driver, Control("ITInsideSalesMorebutton1", more1, "36.1_Dashboard"));
            ThinkTime(5);
            MoveToElement(driver, Control("SeeAllRecordAssociateBtn", "GenericOld"));
            Element(driver, Control("SeeAllRecordAssociateBtn", "GenericOld")).Click();
            ThinkTime(3);
        }

        public void VerifyUnassignedOppscolumns(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string Createdon, string Country, string Company, string Brand, string Start, string End, string Saletype, string Recommended, string Language, string Noofusers)
        {

            // Click on the first See more in the dashboard to view all records
            ThinkTime(20);
            int header1 = Elements(driver, Control("Dashboardcolumnheader", Createdon, "36.1_Dashboard"));
            int header2 = Elements(driver, Control("Dashboardcolumnheader", Country, "36.1_Dashboard"));
            int header3 = Elements(driver, Control("Dashboardcolumnheader", Company, "36.1_Dashboard"));
            int header4 = Elements(driver, Control("Dashboardcolumnheader", Brand, "36.1_Dashboard"));
            int header5 = Elements(driver, Control("Dashboardcolumnheader", Start, "36.1_Dashboard"));
            int header6 = Elements(driver, Control("Dashboardcolumnheader", End, "36.1_Dashboard"));
            int header7 = Elements(driver, Control("Dashboardcolumnheader", Saletype, "36.1_Dashboard"));
            int header8 = Elements(driver, Control("Dashboardcolumnheader", Recommended, "36.1_Dashboard"));
            ThinkTime(3);
            int header9 = Elements(driver, Control("Dashboardcolumnheader", Language, "36.1_Dashboard"));
            int header10 = Elements(driver, Control("Dashboardcolumnheader", Noofusers, "36.1_Dashboard"));

            if (header1 > 0 && header2 > 0 && header3 > 0 && header4 > 0 && header5 > 0 && header6 > 0 && header7 > 0 && header8 > 0 && header9 > 0 && header10 > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Dashboard kpi header verification", "Dashboard kpi header verification");

            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Dashboard kpi header verification", "Dashboard kpi header verification");
                Assert.Fail("Dashboard KPI Headers missing");

            }

        }

        public void ActivityError(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string more, string header)
        {

            ThinkTime(10);
            if (Elements(driver, Control("ActivityErrorPromptOk", "36.1_Dashboard")) > 0)
            {
                ThinkTime(2);
                Element(driver, Control("ActivityErrorPromptOk", "36.1_Dashboard")).Click();
                ThinkTime(5);
                scrollMiddleDown(driver, testInReport, testName, testDataIteration);
                ThinkTime(5);
                ClickMoreManagerdashboardandseeallrecords1(driver, testInReport, testName, testDataIteration, more, header);
                ThinkTime(5);
            }
            ThinkTime(5);

        }
        public void ActivityError1(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string more, string header)
        {

            if (Elements(driver, Control("ActivityErrorPromptOk", "36.1_Dashboard")) > 0)
            {
                ThinkTime(2);
                Element(driver, Control("ActivityErrorPromptOk", "36.1_Dashboard")).Click();
                ThinkTime(5);
                scrollMiddleDown(driver, testInReport, testName, testDataIteration);
                ThinkTime(5);
                ClickMoreManagerdashboardandseeallrecords(driver, testInReport, testName, testDataIteration, more, header);
                ThinkTime(5);
            }
            ThinkTime(5);

        }
        public void ActivityError2(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string more, string header)
        {

            if (Elements(driver, Control("ActivityErrorPromptOk", "36.1_Dashboard")) > 0)
            {
                ThinkTime(2);
                Element(driver, Control("ActivityErrorPromptOk", "36.1_Dashboard")).Click();
                ThinkTime(5);
                scrollMiddleDown(driver, testInReport, testName, testDataIteration);
                ThinkTime(5);
                ClickMoreManagerdashboardandseeallrecords2(driver, testInReport, testName, testDataIteration, more, header);
                ThinkTime(5);
            }
            ThinkTime(5);

        }

        public void VerifyActivitiesinall(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string duedate, string activitytype, string regarding, string brand, string owner, string busphone, string email, string fullname, string contactphone, string contactemail, string contactname)
        {
            ThinkTime(15);



            int header1 = Elements(driver, Control("Dashboardcolumnheader", duedate, "36.1_Dashboard"));
            int header2 = Elements(driver, Control("Dashboardcolumnheader", activitytype, "36.1_Dashboard"));
            int header3 = Elements(driver, Control("Dashboardcolumnheader", regarding, "36.1_Dashboard"));
            int header4 = Elements(driver, Control("Dashboardcolumnheader", brand, "36.1_Dashboard"));
            int header5 = Elements(driver, Control("Dashboardcolumnheader", owner, "36.1_Dashboard"));
            int header6 = Elements(driver, Control("Dashboardcolumnheader", busphone, "36.1_Dashboard"));
            int header7 = Elements(driver, Control("Dashboardcolumnheader", email, "36.1_Dashboard"));
            int header8 = Elements(driver, Control("Dashboardcolumnheader", fullname, "36.1_Dashboard"));
            int header9 = Elements(driver, Control("Dashboardcolumnheader", contactphone, "36.1_Dashboard"));
            int header10 = Elements(driver, Control("Dashboardcolumnheader", contactemail, "36.1_Dashboard"));
            int header11 = Elements(driver, Control("Dashboardcolumnheader", contactname, "36.1_Dashboard"));

            if (header1 > 0 && header2 > 0 && header3 > 0 && header4 > 0 && header5 > 0 && header6 > 0 && header7 > 0 && header8 > 0 && header9 > 0 && header10 > 0 && header11 > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Dashboard kpi header verification", "Dashboard kpi header verification");

            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Dashboard kpi header verification", "Dashboard kpi header verification");
                Assert.Fail("Dashboard KPI Headers missing");

            }
        }


        public void VerifyOpenOpps(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string startdate, string enddate, string Company, string Pipeline, string Brand, string Owner, string CentreNum, string Country, string Saletype, string Noofusers, string contractvalue, string modifiedon, string CreatedOn)
        {

            // Click on the first See more in the dashboard to view all records
            ThinkTime(4);
            int header1 = Elements(driver, Control("Dashboardcolumnheader", startdate, "36.1_Dashboard"));
            int header2 = Elements(driver, Control("Dashboardcolumnheader", enddate, "36.1_Dashboard"));
            int header3 = Elements(driver, Control("Dashboardcolumnheader", Company, "36.1_Dashboard"));
            int header4 = Elements(driver, Control("Dashboardcolumnheader", Pipeline, "36.1_Dashboard"));
            int header5 = Elements(driver, Control("Dashboardcolumnheader", Brand, "36.1_Dashboard"));
            int header6 = Elements(driver, Control("Dashboardcolumnheader", Owner, "36.1_Dashboard"));
            int header7 = Elements(driver, Control("CentreOrg", "36.1_Dashboard"));
            int header8 = Elements(driver, Control("Dashboardcolumnheader", CentreNum, "36.1_Dashboard"));
            scrollRight(driver, testInReport, testName, testDataIteration, "Scroll");
            ThinkTime(2);
            int header9 = Elements(driver, Control("Dashboardcolumnheader", Country, "36.1_Dashboard"));
            int header10 = Elements(driver, Control("Dashboardcolumnheader", Saletype, "36.1_Dashboard"));
            int header11 = Elements(driver, Control("Dashboardcolumnheader", Noofusers, "36.1_Dashboard"));
            int header12 = Elements(driver, Control("Dashboardcolumnheader", contractvalue, "36.1_Dashboard"));
            int header13 = Elements(driver, Control("Dashboardcolumnheader", modifiedon, "36.1_Dashboard"));
            ThinkTime(2);
            int header14 = Elements(driver, Control("Dashboardcolumnheader", CreatedOn, "36.1_Dashboard"));

            if (header1 > 0 && header2 > 0 && header3 > 0 && header4 > 0 && header5 > 0 && header6 > 0 && header7 > 0 && header8 > 0 && header9 > 0 && header10 > 0 && header11 > 0 && header12 > 0 && header13 > 0 && header14 > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Dashboard kpi header verification", "Dashboard kpi header verification");

            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Dashboard kpi header verification", "Dashboard kpi header verification");
                Assert.Fail("Dashboard KPI Headers missing");

            }

        }


        public void VerifyNewITSalesOpps(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string startdate, string enddate, string Company, string Pipeline, string Brand, string Owner, string CentreNum, string Country, string Saletype, string Noofusers, string contractvalue, string modifiedon, string CentreOrgUn)
        {

            // Click on the first See more in the dashboard to view all records
            ThinkTime(4);
            int header1 = Elements(driver, Control("Dashboardcolumnheader", startdate, "36.1_Dashboard"));
            int header2 = Elements(driver, Control("Dashboardcolumnheader", enddate, "36.1_Dashboard"));
            int header3 = Elements(driver, Control("Dashboardcolumnheader", Company, "36.1_Dashboard"));
            int header4 = Elements(driver, Control("Dashboardcolumnheader", Pipeline, "36.1_Dashboard"));
            int header5 = Elements(driver, Control("Dashboardcolumnheader", Brand, "36.1_Dashboard"));
            int header6 = Elements(driver, Control("Dashboardcolumnheader", Owner, "36.1_Dashboard"));
            int header7 = Elements(driver, Control("CentreOrg", "36.1_Dashboard"));
            int header8 = Elements(driver, Control("Dashboardcolumnheader", CentreNum, "36.1_Dashboard"));
            scrollRight(driver, testInReport, testName, testDataIteration, "Scroll");
            ThinkTime(2);
            int header9 = Elements(driver, Control("Dashboardcolumnheader", Country, "36.1_Dashboard"));
            int header10 = Elements(driver, Control("Dashboardcolumnheader", Saletype, "36.1_Dashboard"));
            int header11 = Elements(driver, Control("Dashboardcolumnheader", Noofusers, "36.1_Dashboard"));
            int header12 = Elements(driver, Control("Dashboardcolumnheader", contractvalue, "36.1_Dashboard"));
            int header13 = Elements(driver, Control("Dashboardcolumnheader", modifiedon, "36.1_Dashboard"));
            ThinkTime(2);
            int header14 = Elements(driver, Control("Dashboardcolumnheader", CentreOrgUn, "36.1_Dashboard"));

            if (header1 > 0 && header2 > 0 && header3 > 0 && header4 > 0 && header5 > 0 && header6 > 0 && header7 > 0 && header8 > 0 && header9 > 0 && header10 > 0 && header11 > 0 && header12 > 0 && header13 > 0 && header14 > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Dashboard kpi header verification", "Dashboard kpi header verification");

            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Dashboard kpi header verification", "Dashboard kpi header verification");
                Assert.Fail("Dashboard KPI Headers missing");

            }

        }

        public void VerifyClosedOpps(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string ActualClose, string CreatedOn, string Topicfield, string Potential, string Country, string SaleType, string Column5, string Field9, string ActualRevenue)
        {

            // Click on the first See more in the dashboard to view all records
            ThinkTime(4);
            int header1 = Elements(driver, Control("Dashboardcolumnheader", ActualClose, "36.1_Dashboard"));
            int header2 = Elements(driver, Control("Dashboardcolumnheader", CreatedOn, "36.1_Dashboard"));
            int header3 = Elements(driver, Control("Dashboardcolumnheader", Topicfield, "36.1_Dashboard"));
            int header4 = Elements(driver, Control("Dashboardcolumnheader", Potential, "36.1_Dashboard"));
            int header5 = Elements(driver, Control("Dashboardcolumnheader", Country, "36.1_Dashboard"));
            int header6 = Elements(driver, Control("Dashboardcolumnheader", SaleType, "36.1_Dashboard"));
            scrollRight(driver, testInReport, testName, testDataIteration, "Scroll");

            int header7 = Elements(driver, Control("Dashboardcolumnheader", Column5, "36.1_Dashboard"));
            int header8 = Elements(driver, Control("Dashboardcolumnheader", Field9, "36.1_Dashboard"));
            int header9 = Elements(driver, Control("Dashboardcolumnheader", ActualRevenue, "36.1_Dashboard"));

            if (header1 > 0 && header2 > 0 && header3 > 0 && header4 > 0 && header5 > 0 && header6 > 0 && header7 > 0 && header8 > 0 && header9 > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Dashboard kpi header verification", "Dashboard kpi header verification");

            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Dashboard kpi header verification", "Dashboard kpi header verification");
                Assert.Fail("Dashboard KPI Headers missing");

            }

        }
        public void VerifyActivityDBHeaders(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {

            WaitUntil(driver, Control("DashActivities", "Dashboards"), 30);
            int value1 = Elements(driver, Control("DashActivities", "Dashboards"));
            if (value1 > 0)
            {
                // Verify the dropdown values
                ThinkTime(6);
                //WaitUntil(driver, Control("activeCaseSelector", dropdown1, "36.1_Dashboard"), 360);
                //Element(driver, Control("activeCaseSelector",dropdown1, "36.1_Dashboard")).Click();
                Element(driver, Control("DashActivities", "Dashboards")).Click();
                //WaitUntil(driver, Control("kpione", "36.1_Dashboard"), 360);
                //Element(driver, Control("kpione", "36.1_Dashboard")).Click();
                WaitUntil(driver, Control("DropDownValues", "Opportunity"), 360);
                IList<IWebElement> obj = driver.FindElements(Control("DropDownValues", "Opportunity"));

                int count = Elements(driver, Control("DropDownValues", "Opportunity"));
                string[] dropdownvalue = { "My Open Activities", "My Teams Open Activities" };

                for (int i = 0; i < 2; i++)
                {
                    int j = 0;

                    for (int k = 0; k < count; k++)
                    {


                        if ((dropdownvalue[i]).Equals(obj[k].Text))
                        {
                            Console.WriteLine("pass");
                            AddLog(driver, testInReport, testName, testDataIteration, "Pass", dropdownvalue[i] + "is available", "DropdownValues");
                        }

                        else
                        {
                            j++;
                        }
                    }
                    if (j > count - 1)
                    {
                        Console.WriteLine(dropdownvalue[i] + "is not available");
                        AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Faild to fine the dropdown value", "DropdownValues");
                        Assert.Fail("Failed to find the specified Option");
                    }
                }
            }
        }
        public void VerifyPerformanceDBHeaders(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {

            WaitUntil(driver, Control("Performanceheader3", "Dashboards"), 30);
            int value1 = Elements(driver, Control("Performanceheader3", "Dashboards"));
            if (value1 > 0)
            {
                // Verify the dropdown values
                ThinkTime(6);
                //WaitUntil(driver, Control("activeCaseSelector", dropdown1, "36.1_Dashboard"), 360);
                //Element(driver, Control("activeCaseSelector",dropdown1, "36.1_Dashboard")).Click();
                Element(driver, Control("Performanceheader3", "Dashboards")).Click();
                //WaitUntil(driver, Control("kpione", "36.1_Dashboard"), 360);
                //Element(driver, Control("kpione", "36.1_Dashboard")).Click();
                WaitUntil(driver, Control("DropDownValues", "Opportunity"), 360);
                IList<IWebElement> obj = driver.FindElements(Control("DropDownValues", "Opportunity"));

                int count = Elements(driver, Control("DropDownValues", "Opportunity"));
                string[] dropdownvalue = { "My Tours Booked for last calendar month", "My Tours Booked for this calendar month" };

                for (int i = 0; i < 2; i++)
                {
                    int j = 0;

                    for (int k = 0; k < count; k++)
                    {


                        if ((dropdownvalue[i]).Equals(obj[k].Text))
                        {
                            Console.WriteLine("pass");
                            AddLog(driver, testInReport, testName, testDataIteration, "Pass", dropdownvalue[i] + "is available", "DropdownValues");
                        }

                        else
                        {
                            j++;
                        }
                    }
                    if (j > count - 1)
                    {
                        Console.WriteLine(dropdownvalue[i] + "is not available");
                        AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Faild to fine the dropdown value", "DropdownValues");
                        Assert.Fail("Failed to find the specified Option");
                    }
                }
            }
            scrollMiddleDashboard(driver, testInReport, testName, testDataIteration, "Scroll");
            ThinkTime(3);
            int value2 = Elements(driver, Control("Performanceheader4", "Dashboards"));
            if (value2 > 0)
            {
                // Verify the dropdown values
                Element(driver, Control("Performanceheader4", "Dashboards")).Click();
                IList<IWebElement> obj1 = driver.FindElements(Control("DropDownValues", "Opportunity"));
                int count1 = Elements(driver, Control("DropDownValues", "Opportunity"));
                string[] dropdownvalue = { "My Completed Tours for this calendar month", "My Completed Tours for last calendar month" };

                for (int i = 0; i < 2; i++)
                {
                    int j = 0;

                    for (int k = 0; k < count1; k++)
                    {


                        if ((dropdownvalue[i]).Equals(obj1[k].Text))
                        {
                            Console.WriteLine("pass");
                            AddLog(driver, testInReport, testName, testDataIteration, "Pass", dropdownvalue[i] + "is available", "DropdownValues");
                        }

                        else
                        {
                            j++;
                        }
                    }
                    if (j > count1 - 1)
                    {
                        Console.WriteLine(dropdownvalue[i] + "is not available");
                        AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Faild to fine the dropdown value", "DropdownValues");
                        Assert.Fail("Failed to find the specified Option");
                    }
                }
            }


            ThinkTime(3);
            int value3 = Elements(driver, Control("Performanceheader5", "Dashboards"));
            if (value3 > 0)
            {
                // Verify the dropdown values
                Element(driver, Control("Performanceheader5", "Dashboards")).Click();
                IList<IWebElement> obj3 = driver.FindElements(Control("DropDownValues", "Opportunity"));
                int count3 = Elements(driver, Control("DropDownValues", "Opportunity"));
                string[] dropdownvalue3 = { "My Direct Sales for this calendar month", "My Direct Sales for last calendar month" };

                for (int i = 0; i < 2; i++)
                {
                    int j = 0;

                    for (int k = 0; k < count3; k++)
                    {


                        if ((dropdownvalue3[i]).Equals(obj3[k].Text))
                        {
                            Console.WriteLine("pass");
                            AddLog(driver, testInReport, testName, testDataIteration, "Pass", dropdownvalue3[i] + "is available", "DropdownValues");
                        }

                        else
                        {
                            j++;
                        }
                    }
                    if (j > count3 - 1)
                    {
                        Console.WriteLine(dropdownvalue3[i] + "is not available");
                        AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Faild to fine the dropdown value", "DropdownValues");
                        Assert.Fail("Failed to find the specified Option");
                    }
                }
            }
            scrollMiddleDashboard(driver, testInReport, testName, testDataIteration, "Scroll");
            ThinkTime(2);
            int value4 = Elements(driver, Control("Performanceheader7", "Dashboards"));
            if (value4 > 0)
            {
                // Verify the dropdown values
                Element(driver, Control("Performanceheader7", "Dashboards")).Click();
                IList<IWebElement> obj4 = driver.FindElements(Control("DropDownValues", "Opportunity"));
                int count4 = Elements(driver, Control("DropDownValues", "Opportunity"));
                string[] dropdownvalue4 = { "My Sales Assist for this calendar month", "My Potential Sales Assist for this calendar month", "My Sales Assist for last calendar month" };

                for (int i = 0; i < 3; i++)
                {
                    int j = 0;

                    for (int k = 0; k < count4; k++)
                    {


                        if ((dropdownvalue4[i]).Equals(obj4[k].Text))
                        {
                            Console.WriteLine("pass");
                            AddLog(driver, testInReport, testName, testDataIteration, "Pass", dropdownvalue4[i] + "is available", "DropdownValues");
                        }

                        else
                        {
                            j++;
                        }
                    }
                    if (j > count4 - 1)
                    {
                        Console.WriteLine(dropdownvalue4[i] + "is not available");
                        AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Faild to fine the dropdown value", "DropdownValues");
                        Assert.Fail("Failed to find the specified Option");
                    }
                }
            }
        }








        //jms

        public void VerifyDashboardkpiheadersITSales(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string kpi1, string kpi2, string kpi3, string kpi4, string kpi5, string dropdown1, string dropdown2, string dropdown3, string dropdown4)
        {

            //WaitUntil(driver, Control("KPIViews", kpi1, "Dashboards"), 60);
            WaitUntil(driver, Control("KPIViewsVerify", kpi1, "Dashboards"), 60);
            int value1 = Elements(driver, Control("KPIViews", kpi1, "Dashboards"));
            if (value1 > 0)
            {
                // Verify the dropdown values
                ThinkTime(6);
                //WaitUntil(driver, Control("activeCaseSelector", dropdown1, "36.1_Dashboard"), 360);
                //Element(driver, Control("activeCaseSelector",dropdown1, "36.1_Dashboard")).Click();
                WaitUntil(driver, Control("kpione", dropdown1, "36.1_Dashboard"), 360);
                Element(driver, Control("kpione", dropdown1, "36.1_Dashboard")).Click();
                WaitUntil(driver, Control("DropDownValues", "Opportunity"), 360);
                IList<IWebElement> obj = driver.FindElements(Control("DropDownValues", "Opportunity"));




                int count = Elements(driver, Control("DropDownValues", "Opportunity"));
                string[] dropdownvalue = { "Unassigned Opps - New customers D-1", "Unassigned Opps - Move-ins M-3", "Unassigned Opps - Move-ins D-3" };

                for (int i = 0; i < 3; i++)
                {
                    int j = 0;

                    for (int k = 0; k < count; k++)
                    {


                        if ((dropdownvalue[i]).Equals(obj[k].Text))
                        {
                            Console.WriteLine("pass");
                            AddLog(driver, testInReport, testName, testDataIteration, "Pass", dropdownvalue[i] + "is available", "DropdownValues");
                        }

                        else
                        {
                            j++;
                        }
                    }
                    if (j > count - 1)
                    {
                        Console.WriteLine(dropdownvalue[i] + "is not available");
                        AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Faild to fine the dropdown value", "DropdownValues");
                        Assert.Fail("Failed to find the specified Option");
                    }
                }
            }

            int value2 = Elements(driver, Control("KPIViews", kpi2, "Dashboards"));
            if (value2 > 0)
            {
                // Verify the dropdown values
                Element(driver, Control("kpitwo", dropdown2, "36.1_Dashboard")).Click();
                IList<IWebElement> obj1 = driver.FindElements(Control("DropDownValues", "Opportunity"));
                int count1 = Elements(driver, Control("DropDownValues", "Opportunity"));
                string[] dropdownvalue = { "My Open IT Sales Opportunities" };

                for (int i = 0; i < 1; i++)
                {
                    int j = 0;

                    for (int k = 0; k < count1; k++)
                    {


                        if ((dropdownvalue[i]).Equals(obj1[k].Text))
                        {
                            Console.WriteLine("pass");
                            AddLog(driver, testInReport, testName, testDataIteration, "Pass", dropdownvalue[i] + "is available", "DropdownValues");
                        }

                        else
                        {
                            j++;
                        }
                    }
                    if (j > count1 - 1)
                    {
                        Console.WriteLine(dropdownvalue[i] + "is not available");
                        AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Faild to fine the dropdown value", "DropdownValues");
                        Assert.Fail("Failed to find the specified Option");
                    }
                }
            }

            scrollDownDashboard(driver, testInReport, testName, testDataIteration);
            scrollDownDashboard(driver, testInReport, testName, testDataIteration);

            ThinkTime(3);
            int value3 = Elements(driver, Control("KPIViews", kpi3, "Dashboards"));
            if (value3 > 0)
            {
                // Verify the dropdown values
                Element(driver, Control("kpithree", dropdown3, "36.1_Dashboard")).Click();
                IList<IWebElement> obj2 = driver.FindElements(Control("DropDownValues", "Opportunity"));
                int count2 = Elements(driver, Control("DropDownValues", "Opportunity"));
                string[] dropdownvalue2 = { "My Assigned Open Activities - ALL" };

                for (int i = 0; i < 1; i++)
                {
                    int j = 0;

                    for (int k = 0; k < count2; k++)
                    {


                        if ((dropdownvalue2[i]).Equals(obj2[k].Text))
                        {
                            Console.WriteLine("pass");
                            AddLog(driver, testInReport, testName, testDataIteration, "Pass", dropdownvalue2[i] + "is available", "DropdownValues");
                        }

                        else
                        {
                            j++;
                        }
                    }
                    if (j > count2 - 1)
                    {
                        Console.WriteLine(dropdownvalue2[i] + "is not available");
                        AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Faild to fine the dropdown value", "DropdownValues");
                        Assert.Fail("Failed to find the specified Option");
                    }
                }
            }
            ThinkTime(2);
            int value4 = Elements(driver, Control("DashChartheaderfunnel", kpi4, "Dashboards"));
            ThinkTime(2);
            scrollDownDashboard(driver, testInReport, testName, testDataIteration);
            ThinkTime(2);
            int value5 = Elements(driver, Control("DashChartheaderfunnel", kpi5, "Dashboards"));
            ThinkTime(2);
            if (value4 > 0 && value5 > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Available KPIs are correct", "DashboardKPI");
                ThinkTime(2);
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "KPIs are incorrect", "DashboardKPI");
                Assert.Fail("Incorrect KPI");
            }

        }

        public void verifyoppstatusreason(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {







        }


        public void VerifyDashboardkpiheadersITSalesManager(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string kpi1, string kpi2, string kpi3, string kpi4, string kpi5, string kpi6, string dropdown1, string dropdown2, string dropdown3)
        {
            ThinkTime(3);
            WaitUntil(driver, Control("KPIViews1", kpi1, "Dashboards"), 90);
            int value1 = Elements(driver, Control("KPIViews1", kpi1, "Dashboards"));
            if (value1 > 0)
            {
                // Verify the dropdown values
                ThinkTime(5);
                WaitUntil(driver, Control("Managerdashdropdown", dropdown1, "36.1_Dashboard"), 360);
                Element(driver, Control("Managerdashdropdown", dropdown1, "36.1_Dashboard")).Click();
                IList<IWebElement> obj = driver.FindElements(Control("DropDownValues", "Opportunity"));

                int count = Elements(driver, Control("DropDownValues", "Opportunity"));
                string[] dropdownvalue = { "Open Opps - IT Sales Support", "Open Opps – Move ins D-3", "Open Opps – Move ins M-3", "Open Opps - New customers D-1" };

                for (int i = 0; i < 4; i++)
                {
                    int j = 0;

                    for (int k = 0; k < count; k++)
                    {


                        if ((dropdownvalue[i]).Equals(obj[k].Text))
                        {
                            Console.WriteLine("pass");
                            AddLog(driver, testInReport, testName, testDataIteration, "Pass", dropdownvalue[i] + "is available", "DropdownValues");
                        }

                        else
                        {
                            j++;
                        }
                    }
                    if (j > count - 1)
                    {
                        Console.WriteLine(dropdownvalue[i] + "is not available");
                        AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Faild to fine the dropdown value", "DropdownValues");
                        Assert.Fail("Failed to find the specified Option");
                    }
                }
            }

            int value2 = Elements(driver, Control("KPIViews", kpi2, "Dashboards"));
            if (value2 > 0)
            {
                // Verify the dropdown values
                Element(driver, Control("Managerdashdropdown", dropdown2, "36.1_Dashboard")).Click();
                IList<IWebElement> obj1 = driver.FindElements(Control("DropDownValues", "Opportunity"));
                int count1 = Elements(driver, Control("DropDownValues", "Opportunity"));
                string[] dropdownvalue = { "New Opps - IT Sales Support", "New Opps - Move ins D-3", "New Opps - Move ins M-3", "New Opps - New customer D-1" };

                for (int i = 0; i < 4; i++)
                {
                    int j = 0;

                    for (int k = 0; k < count1; k++)
                    {


                        if ((dropdownvalue[i]).Equals(obj1[k].Text))
                        {
                            Console.WriteLine("pass");
                            AddLog(driver, testInReport, testName, testDataIteration, "Pass", dropdownvalue[i] + "is available", "DropdownValues");
                        }

                        else
                        {
                            j++;
                        }
                    }
                    if (j > count1 - 1)
                    {
                        Console.WriteLine(dropdownvalue[i] + "is not available");
                        AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Faild to fine the dropdown value", "DropdownValues");
                        Assert.Fail("Failed to find the specified Option");
                    }
                }
            }

            scrollDownDashboard(driver, testInReport, testName, testDataIteration);
            scrollDownDashboard(driver, testInReport, testName, testDataIteration);

            ThinkTime(3);
            int value3 = Elements(driver, Control("KPIViews", kpi3, "Dashboards"));
            if (value3 > 0)
            {
                // Verify the dropdown values
                Element(driver, Control("Managerdashdropdown", dropdown3, "36.1_Dashboard")).Click();
                IList<IWebElement> obj2 = driver.FindElements(Control("DropDownValues", "Opportunity"));
                int count2 = Elements(driver, Control("DropDownValues", "Opportunity"));
                string[] dropdownvalue2 = { "My open IT Sales activities" };

                for (int i = 0; i < 1; i++)
                {
                    int j = 0;

                    for (int k = 0; k < count2; k++)
                    {


                        if ((dropdownvalue2[i]).Equals(obj2[k].Text))
                        {
                            Console.WriteLine("pass");
                            AddLog(driver, testInReport, testName, testDataIteration, "Pass", dropdownvalue2[i] + "is available", "DropdownValues");
                        }

                        else
                        {
                            j++;
                        }
                    }
                    if (j > count2 - 1)
                    {
                        Console.WriteLine(dropdownvalue2[i] + "is not available");
                        AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Faild to fine the dropdown value", "DropdownValues");
                        Assert.Fail("Failed to find the specified Option");
                    }
                }
            }
            ThinkTime(2);
            int value4 = Elements(driver, Control("DashChartheaderfunnel", kpi4, "Dashboards"));
            ThinkTime(2);
            scrollDownDashboard(driver, testInReport, testName, testDataIteration);
            ThinkTime(2);
            int value5 = Elements(driver, Control("DashChartheaderfunnel", kpi5, "Dashboards"));
            ThinkTime(2);
            int value6 = Elements(driver, Control("DashChartheaderfunnel", kpi6, "Dashboards"));
            ThinkTime(2);
            if (value4 > 0 && value5 > 0 && value6 > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Available KPIs are correct", "DashboardKPI");
                ThinkTime(2);
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "KPIs are incorrect", "DashboardKPI");
                Assert.Fail("Incorrect KPI");
            }

        }









        public void VerifyDropDownValuesfordashboard(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {

            ThinkTime(30);
            Element(driver, Control("activeCaseSelector", "GenericOld")).Click();
            IList<IWebElement> obj = driver.FindElements(Control("DropDownValues", "Opportunity"));
            int count = Elements(driver, Control("DropDownValues", "Opportunity"));
            string[] dropdownvalue = { "Unassigned Opps - New customers D-1", "Unassigned Opps - Move-ins M-3", "Unassigned Opps - Move-ins D-3" };



            for (int i = 0; i < 4; i++)
            {
                int j = 0;

                for (int k = 0; k < count; k++)
                {


                    if ((dropdownvalue[i]).Equals(obj[k].Text))
                    {
                        Console.WriteLine("pass");
                        AddLog(driver, testInReport, testName, testDataIteration, "Pass", dropdownvalue[i] + "is available", "DropdownValues");
                    }

                    else
                    {
                        j++;
                    }
                }



                if (j > count - 1)
                {
                    Console.WriteLine(dropdownvalue[i] + "is not available");
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Faild to fine the dropdown value", "DropdownValues");
                    Assert.Fail("Failed to find the specified Option");
                }

            }
        }





        //Verify the drop down contains the specified values for opportunities
        public void VerifyDropDownValuesforaccount(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {

            ThinkTime(30);
            Element(driver, Control("activeCaseSelector", "GenericOld")).Click();
            IList<IWebElement> obj = driver.FindElements(Control("DropDownValues", "Opportunity"));
            int count = Elements(driver, Control("DropDownValues", "Opportunity"));
            string[] dropdownvalue = { "All Enterprise Accounts", "My Enterprise Customers", "Recently Created Accounts" };



            for (int i = 0; i < 3; i++)
            {
                int j = 0;

                for (int k = 0; k < count; k++)
                {


                    if ((dropdownvalue[i]).Equals(obj[k].Text))
                    {

                        AddLog(driver, testInReport, testName, testDataIteration, "Pass", dropdownvalue[i] + "is available", "DropdownValues");
                    }

                    else
                    {
                        j++;
                    }
                }



                if (j > count - 1)
                {
                    Console.WriteLine(dropdownvalue[i] + "is not available");
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Faild to fine the dropdown value", "DropdownValues");
                    Assert.Fail("Failed to find the specified Option");
                }

            }
        }

        public void Selectcitydiaryandverify(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string TourManagement, string city)
        {
            driver.SwitchTo().DefaultContent();
            string parentWindowHandle = driver.CurrentWindowHandle;
            WindowHandling(driver);
            driver.Manage().Window.Maximize();

            MoveToElement(driver, Control("DashDropdwn", "Dashboards"));
            Element(driver, Control("DashDropdwn", "Dashboards")).Click();
            ThinkTime(2);

            MoveToElement(driver, Control("dropdownValue", TourManagement, "Dashboards"));
            Element(driver, Control("dropdownValue", TourManagement, "Dashboards")).Click();
            ThinkTime(2);

            SwitchToFrame(driver, "ff055ff7-10a3-4311-a80f-f4175462c1a2_WebResource_tourManagementLink");

            MoveToElement(driver, Control("CalenderWindow", "Dashboards"));
            Element(driver, Control("CalenderWindow", "Dashboards")).Click();
            ThinkTime(4);

            ThinkTime(1);



            WindowHandling(driver);
            ThinkTime(1);
            driver.Manage().Window.Maximize();
            ThinkTime(1);
            //driver.SwitchTo().DefaultContent();

            MoveToElement(driver, Control("CityDrpdwn", "Dashboards"));
            Element(driver, Control("CityDrpdwn", "Dashboards")).Click();
            ThinkTime(3);

            MoveToElement(driver, Control("NewCityValue", city, "Dashboards"));
            Element(driver, Control("NewCityValue", city, "Dashboards")).Click();
            ThinkTime(3);
            ThinkTime(3);
            MoveToElement(driver, Control("tourdetails", "BookATour"));
            Element(driver, Control("tourdetails", "BookATour")).Click();
            ThinkTime(2);
            if (Element(driver, Control("tourdetailspopup", "BookATour")).Displayed)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Info", "Pop-up displayed", "Tour details displayed");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Info", "Pop-up displayed", "Tour details not displayed");
            }
            ThinkTime(2);
            driver.Close();

            WindowHandling(driver, parentWindowHandle);

        }
        public void Selectcitydiaryandverify(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string option)
        {

            ThinkTime(5);
            if (Elements(driver, Control("Scvripterrorwindow", "Opportunity")) > 0)
            {
                ThinkTime(2);
                Element(driver, Control("Scripterrorhandle", "Opportunity")).Click();
            }
        }

        public void selecttouractivity(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            WaitUntil(driver, Control("touractivity", "BookATour"), 180);
            Element(driver, Control("touractivity", "BookATour")).Click();
            ThinkTime(5);
            AddLog(driver, testInReport, testName, testDataIteration, "Info", "Tour details", "Tour details");

        }
        public void verifytourdetails(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            AddLog(driver, testInReport, testName, testDataIteration, "Info", "verify Tour details", " Verify Tour details");
            WaitUntil(driver, Control("Customer", "BookATour"), 180);
            if (Element(driver, Control("Customer", "BookATour")).Displayed)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Info", "Customer details", "Customer details");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Info", "Customer details not displayed", "Customer details not displayed");
            }
            WaitUntil(driver, Control("Employee", "BookATour"), 180);
            if (Element(driver, Control("Employee", "BookATour")).Displayed)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Info", "Employee details", "Employee details");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Info", "Employee details not displayed", "Employee details not displayed");
            }
            WaitUntil(driver, Control("Subject", "BookATour"), 180);
            if (Element(driver, Control("Subject", "BookATour")).Displayed)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Info", "Subject details", "Subject details");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Info", "Subject details not displayed", "Subject details not displayed");
            }
            WaitUntil(driver, Control("Opportunity", "BookATour"), 180);
            if (Element(driver, Control("Opportunity", "BookATour")).Displayed)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Info", "Opportunity details", "Opportunity details");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Info", "Opportunity details not displayed", "Opportunity details not displayed");
            }
            WaitUntil(driver, Control("Attendees", "BookATour"), 180);
            if (Element(driver, Control("Attendees", "BookATour")).Displayed)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Info", "Attendees details", "Attendees details");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Info", "Attendees details not displayed", "Attendees details not displayed");
            }
            WaitUntil(driver, Control("Starttime", "BookATour"), 180);
            if (Element(driver, Control("Starttime", "BookATour")).Displayed)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Info", "Starttime details", "Starttime details");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Info", "Starttime details not displayed", "Starttime details not displayed");
            }
            WaitUntil(driver, Control("Endtime", "BookATour"), 180);
            if (Element(driver, Control("Endtime", "BookATour")).Displayed)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Info", "Endtime details", "Endtime details");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Info", "Endtime details not displayed", "Endtime details not displayed");
            }

        }
        public void Navigatetoapp(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            WaitUntil(driver, Control("Navigateapp", "BookATour"), 180);
            Element(driver, Control("Navigateapp", "BookATour")).Click();
            ThinkTime(5);
            WaitUntil(driver, Control("outlook", "BookATour"), 180);
            Element(driver, Control("outlook", "BookATour")).Click();

        }
        public void Outlooksearch(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string search, string maildate)
        {
            WaitUntil(driver, Control("outlooksearch", "BookATour"), 180);
            Element(driver, Control("outlooksearch", "BookATour")).SendKeys(search);
            ThinkTime(5);
            Element(driver, Control("searchicon", "BookATour")).Click();
            ThinkTime(3);
            Element(driver, Control("mailopen", maildate, "BookATour")).Click();
            ThinkTime(5);
            AddLog(driver, testInReport, testName, testDataIteration, "Info", "Mail details", "Mail details");
            driver.Close();
        }



        /// <summary>
        /// Method to Login to CRM Application
        /// </summary>
        /// <param name="driver"></param>
        /// <param name="testInReport"></param>
        /// <param name="hitUrl"></param>
        /// <param name="testName"></param>
        /// <param name="username"></param>
        /// <param name="password"></param>
        public void loginSharePoint(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string hitUrl, string username, string password)
        {
            AddLog(driver, testInReport, testName, "Info", "Test started for " + username);
            driver.Navigate().GoToUrl("https://regusgroupservices.sharepoint.com/sites/crm-test-files/SitePages/Home.aspx");

            AddLog(driver, testInReport, testName, testDataIteration, "Info", "SharePoint Application Login page successfully launched", "ApplicationLaunched");
            driver.Manage().Window.Maximize();
            WaitUntil(driver, Control("emailAddress", "GenericOld"), 30);
            ElementHighlight(driver, Control("emailAddress", "GenericOld"));
            Element(driver, Control("emailAddress", "GenericOld")).SendKeys(username);
            SendKeys.SendWait(@"{Enter}");
            ThinkTime(5);
            WaitUntil(driver, Control("passWord", "GenericOld"), 60);
            //ThinkTime(5);
            ElementHighlight(driver, Control("passWord", "GenericOld"));

            Element(driver, Control("passWord", "GenericOld")).SendKeys(password);
            ThinkTime(5);
            SendKeys.SendWait(@"{Enter}");
            //WaitUntil(driver, Control("signIn", "GenericOld"), 60);
            //ElementHighlight(driver, Control("signIn", "GenericOld"));
            //Element(driver, Control("signIn", "GenericOld")).Click();
            ThinkTime(10);

        }

        /// <summary>
        /// Method for selecting folders in SharePoint
        /// </summary>
        /// <param name="driver"></param>
        /// <param name="testInReport"></param>
        /// <param name="testName"></param>
        /// <param name="FolderName1"></param>
        /// <param name="FolderName2"></param>
        public void selectSharePointFolder(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string FolderName1, string FolderName2, string FileName)
        {

            ThinkTime(4);
            driver.SwitchTo().DefaultContent();
            WaitUntil(driver, Control("documentsTab", "sharePoint"), 12);
            Element(driver, Control("documentsTab", "sharePoint")).Click();
            WaitUntil(driver, Control("folderSelection", FolderName1, "sharePoint"), 30);
            Element(driver, Control("folderSelection", FolderName1, "sharePoint")).Click();
            WaitUntil(driver, Control("folderSelection", FolderName2, "sharePoint"), 30);
            Element(driver, Control("folderSelection", FolderName2, "sharePoint")).Click();
            ThinkTime(3);
            Element(driver, Control("sPUpload", "sharePoint")).Click();
            WaitUntil(driver, Control("uploadFiles", "sharePoint"), 30);
            Element(driver, Control("uploadFiles", "sharePoint")).Click();
            ThinkTime(3);
            string path = System.Reflection.Assembly.GetCallingAssembly().CodeBase;
            string actualPath = path.Substring(0, path.LastIndexOf("bin"));
            string projectPath = new Uri(actualPath).LocalPath;
            // projectPath = projectPath + "DataManager\\AddNote.txt";
            string filePath = projectPath + "DataManager\\" + FileName;
            ThinkTime(3);
            SendKeys.SendWait(filePath);
            SendKeys.SendWait(@"{Enter}");
            ThinkTime(15);

        }





        public void TourTimeZone(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string activitytitle, string yourTimezone, string centreTimezone)

        {
            ThinkTime(3);
            WaitUntil(driver, Control("PhoneActivity", activitytitle, "phoneCall"), 30);
            if (Elements(driver, Control("PhoneActivity", activitytitle, "phoneCall")) > 0)
            {
                Element(driver, Control("PhoneActivity", activitytitle, "phoneCall")).Click();
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Tour Booked email is available", "Activity");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Info", "No Activity Available.Please create one", "Activity");
                Assert.Fail("Activities are not  available.Please create one");
            }
            ThinkTime(5);
            if (Elements(driver, Control("TimeZone", yourTimezone, "phoneCall")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Time of Tour in your Timezone is available", "Activity");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Info", "No Activity Available.Please create one", "Activity");
                Assert.Fail("Activities are not  available.Please create one");
            }
            //scrollDownOpportunityPage(driver, testInReport, testName, testDataIteration);
            scrollDownEmail(driver, testInReport, testName, testDataIteration);
            ThinkTime(2);
            if (Elements(driver, Control("TimeZone", centreTimezone, "phoneCall")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "CentreTimezone is available", "Activity");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Info", "CentreTimezone not available", "Activity");
                Assert.Fail("Activities are not  available.Please create one");
            }
        }



        public void TourOutcomeArrive(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string activitytitle, string select)

        {


            ThinkTime(3);

            WaitUntil(driver, Control("PhoneActivity", activitytitle, "phoneCall"), 30);

            if (Elements(driver, Control("PhoneActivity", activitytitle, "phoneCall")) > 0)

            {

                ThinkTime(10);

                Element(driver, Control("PhoneActivity", activitytitle, "phoneCall")).Click();

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Tour Booked email is available", "Activity");

            }



            else

            {

                AddLog(driver, testInReport, testName, testDataIteration, "Info", "No Activity Available.Please create one", "Activity");

                Assert.Fail("Activities are not  available.Please create one");



            }



            ThinkTime(15);

            WaitUntil(driver, Control("TourOutcomeButton", "Tour"), 30);

            MoveToElement(driver, Control("TourOutcomeButton", "Tour"));

            Element(driver, Control("TourOutcomeButton", "Tour")).Click();



            ThinkTime(5);

            WaitUntil(driver, Control("ArriveTour", "Tour"), 60);

            Element(driver, Control("ArriveTour", "Tour")).Click();

            ThinkTime(5);


            Select(Element(driver, Control("ArriveTour", "Tour"))).SelectByText(select);
            saveFooter(driver, testInReport, testName, testDataIteration);
            WaitUntil(driver, Control("Markcomplete", "Generic"), 100);

            Element(driver, Control("Markcomplete", "Generic")).Click();



        }



        public void TourOutcome(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string activitytitle, string select, string Touroutcome)

        {
            for (int i = 0; i <= 25; i++)
            {

                ThinkTime(2);
                WaitUntil(driver, Control("RefreshPage2", "CommonObj"), 30);
                Element(driver, Control("RefreshPage2", "CommonObj")).Click();
                ThinkTime(2);
                if (Elements(driver, Control("PhoneActivity", activitytitle, "phoneCall")) > 0)
                {
                    break;
                }

            }
            ThinkTime(3);



            WaitUntil(driver, Control("PhoneActivity", activitytitle, "phoneCall"), 30);

            if (Elements(driver, Control("PhoneActivity", activitytitle, "phoneCall")) > 0)

            {

                ThinkTime(2);

                Element(driver, Control("PhoneActivity", activitytitle, "phoneCall")).Click();

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Tour Booked email is available", "Activity");

            }



            else

            {

                AddLog(driver, testInReport, testName, testDataIteration, "Info", "No Activity Available.Please create one", "Activity");

                Assert.Fail("Activities are not  available.Please create one");



            }
            ThinkTime(2);
            WaitUntil(driver, Control("TourOutcomeButton", "Tour"), 30);

            MoveToElement(driver, Control("TourOutcomeButton", "Tour"));

            Element(driver, Control("TourOutcomeButton", "Tour")).Click();



            ThinkTime(5);

            WaitUntil(driver, Control("ArriveTour", "Tour"), 60);

            Element(driver, Control("ArriveTour", "Tour")).Click();

            ThinkTime(5);


            Select(Element(driver, Control("ArriveTour", "Tour"))).SelectByText(select);

            // driver.SwitchTo().DefaultContent();

            //MoveToElement(driver, Control("DidntArrive", "phoneCall"));

            //ElementHighlight(driver, Control("DidntArrive", "phoneCall"));


            //Element(driver, Control("DidntArrive", "phoneCall")).Click();



            ThinkTime(2);

            WaitUntil(driver, Control("OutcomeTour", "Tour"), 60);

            Element(driver, Control("OutcomeTour", "Tour")).Click();

            Select(Element(driver, Control("OutcomeTour", "Tour"))).SelectByText(Touroutcome);


            //MoveToElement(driver, Control("touroutcomeopn",opn, "phoneCall"));

            //Element(driver, Control("AnotherTour", opn, "phoneCall")).Click();
            WaitUntil(driver, Control("Markcomplete", "Generic"), 100);

            Element(driver, Control("Markcomplete", "Generic")).Click();


            // saveFooter(driver, testInReport, testName, testDataIteration);



            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
        }


        public void MarkCompleteTour(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string select)
        {
            ThinkTime(2);
            WaitUntil(driver, Control("TourOutcomeButton", "Tour"), 30);
            MoveToElement(driver, Control("TourOutcomeButton", "Tour"));
            Element(driver, Control("TourOutcomeButton", "Tour")).Click();
            ThinkTime(5);
            WaitUntil(driver, Control("ArriveTour", "Tour"), 60);
            Element(driver, Control("ArriveTour", "Tour")).Click();
            ThinkTime(5);
            Select(Element(driver, Control("ArriveTour", "Tour"))).SelectByText(select);
            ThinkTime(2);

            ////WaitUntil(driver, Control("OutcomeTour", "Tour"), 60);
            ////Element(driver, Control("OutcomeTour", "Tour")).Click();
            ////Select(Element(driver, Control("OutcomeTour", "Tour"))).SelectByText(Touroutcome);

            WaitUntil(driver, Control("Markcomplete1", "Generic"), 100);
            Element(driver, Control("Markcomplete1", "Generic")).Click();
            AddLog(driver, testInReport, testName, testDataIteration, "Info", "Tour merked completely", "Tour marked complete");

            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
        }

        /// <summary>
        /// Method for navigato to dynamics from sharpoint
        /// </summary>
        /// <param name="driver"></param>
        /// <param name="testInReport"></param>
        /// <param name="testName"></param>
        public void sharePointToDynamics(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string hitUrl)
        {
            driver.Navigate().GoToUrl(hitUrl);
            AddLog(driver, testInReport, testName, testDataIteration, "Info", "Application successfully launched", "ApplicationLaunched");
        }


        public void VerifyOppreadonlyfields(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string action, string oppname, string Entityname)
        {

            ThinkTime(5);
            scrollDownOpportunityEnterprise(driver, testInReport, testName, testDataIteration);
            ThinkTime(1);
            scrollDownOpportunityEnterprise(driver, testInReport, testName, testDataIteration);
            ThinkTime(1);
            scrollDownOpportunityEnterprise(driver, testInReport, testName, testDataIteration);

            if (action == "Fieldspopulated")
            {
                ThinkTime(4);
                ActionsClick(driver, Control("Majorsource", "EnterpriseSales"));
                ThinkTime(3);
                VerifyReadOnlyStatus(driver, testInReport, testName, testDataIteration);
                //ThinkTime(6);
                //NavigateToMainDropDown(driver, testInReport, testName, testDataIteration, "Sales");

                //NavigateToEntity(driver, testInReport, testName, testDataIteration, Entityname);
                //SelectValuesFromDropDown(driver, testInReport, testName, testDataIteration, "All Opportunities");

                //OpenRecordGlobalSearch(driver, testInReport, testName, testDataIteration, oppname);
                //ThinkTime(5);
                //scrollDownOpportunityEnterprise(driver, testInReport, testName, testDataIteration);
                //ThinkTime(1);
                //scrollDownOpportunityEnterprise(driver, testInReport, testName, testDataIteration);
                //ThinkTime(1);
                //scrollDownOpportunityEnterprise(driver, testInReport, testName, testDataIteration);
                //ThinkTime(5);
                //ActionsClick(driver, Control("Minorsource", "EnterpriseSales"));
                //ThinkTime(4);
                //VerifyReadOnlyStatus(driver, testInReport, testName, testDataIteration);
                //AddLog(driver, testInReport, testName, testDataIteration, "Info", "Major and Minor fields Verified", "Major and Minor fields Verified");
                //ThinkTime(2);
            }
            else
            {
                Assert.Fail("Major and Minor source fields not Read only");
            }




        }

        public void VerifyOppreadonlyfieldsNew(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string action, string oppname, string Entityname)
        {

            ThinkTime(5);
            scrollDownOpportunityEnterpriseCust(driver, testInReport, testName, testDataIteration, "650");


            if (action == "Fieldspopulated")
            {
                ThinkTime(2);
                WaitUntil(driver, Control("Majorsource", "EnterpriseSales"), 30);
                ActionsClick(driver, Control("Majorsource", "EnterpriseSales"));
                ThinkTime(3);
                VerifyReadOnlyStatus(driver, testInReport, testName, testDataIteration);

                try
                {
                    ThinkTime(2);
                    WaitUntil(driver, Control("Minorsource", "EnterpriseSales"), 30);
                    ActionsClick(driver, Control("Minorsource", "EnterpriseSales"));
                    ThinkTime(4);
                    VerifyReadOnlyStatus(driver, testInReport, testName, testDataIteration);
                    AddLog(driver, testInReport, testName, testDataIteration, "Info", "Major and Minor fields Verified", "Major and Minor fields Verified");
                    ThinkTime(2);
                }
                catch (Exception e)
                { }
            }
            else
            {
                Assert.Fail("Major and Minor source fields not Read only");
            }




        }



        /// <summary>
        /// Method to check  activity type  value
        /// </summary>
        /// <param name="driver"></param>
        /// <param name="testInReport"></param>
        /// <param name="testName"></param>
        public void checkActivityCreation(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string activityCheck)
        {
            WaitUntil(driver, Control("ActivitiesSubjectCol", "Generic"), 30);

            if (activityCheck != "N")
            {
                string activityType = Element(driver, Control("ActivityType", "Generic")).GetAttribute("title");
                Console.WriteLine("activity Type" + activityType);
                ThinkTime(1);

                switch (activityCheck)
                {
                    case "P":
                        if (activityType == "Phone Call")
                        {
                            ThinkTime(1);
                            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Phone call activity is created automatically", "Phonecall is created automatically");

                        }

                        else
                        {
                            AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Phone call activity is not created automatically", "Phonecall activity is not created");
                            Assert.IsTrue(false);
                        }
                        break;

                    case "E":
                        if (activityType == "Email")
                        {
                            ThinkTime(1);
                            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Email activity is created automatically", "Email is created automatically");

                        }

                        else
                        {
                            AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Email activity is not created automatically", "Email activity is not created");
                            Assert.IsTrue(false);
                        }
                        break;

                    case "B":
                        if (activityType == "Phone Call")
                        {
                            ThinkTime(1);
                            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Phone call activity is created automatically", "Phonecall is created automatically");

                        }

                        else
                        {
                            AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Phone call activity is not created automatically", "Phonecall activity is not created");
                            Assert.IsTrue(false);
                        }
                        break;

                }

            }
            else
            {
                if (Elements(driver, Control("noDataAvailable", "Opportunity")) > 0)
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "No Activity records are created as expected ", "No records available");
                }

                else
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Activity records are created", "Records available");
                    Assert.Fail("Activity record is created even if phone number & email is not available ");
                }
            }
            //return activityCheck;
        }

        /// <summary>
        /// Method to take activity subject value
        /// </summary>
        /// <param name="driver"></param>
        /// <param name="testInReport"></param>
        /// <param name="testName"></param>
        public string selectActivitySubject(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {




            WaitUntil(driver, Control("ActivitiesSubjectCol", "Generic"), 30);



            ThinkTime(5);
            string subject = Element(driver, Control("ActivitiesSubjectCol", "Generic")).GetAttribute("title");
            return subject;
        }

        ///// <summary>
        ///// Method to take activity subject value
        ///// </summary>
        ///// <param name="driver"></param>
        ///// <param name="testInReport"></param>
        ///// <param name="testName"></param>
        //public string selectActivitySubjectw(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName);
        //{
        //   string subject = Element(driver, Control("ActivitiesSubjectCol", "Generic")).GetAttribute("title");

        //   WaitUntil(driver, Control("ActivitiesSubjectCol", "Generic"), 30);


        //   ThinkTime(5);

        //   return subject;

        //}



        /// <summary>
        /// Method to take activity data
        /// </summary>
        /// <param name="driver"></param>
        /// <param name="testInReport"></param>
        /// <param name="testName"></param>
        public string compareActivityDetailsWithOppDetails(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string oppTopic, string activityTypeCheck, string activityOwner, string purpose)
        {

            WaitUntil(driver, Control("ActivitiesSubjectCol", "Generic"), 30);
            ThinkTime(3);
            string subject = selectActivitySubject(driver, testInReport, testName, testDataIteration);
            string regarding = Element(driver, Control("ActivitiesRegardingCol", "Generic")).GetAttribute("title");
            string activityType = Element(driver, Control("ActivityType", "Generic")).GetAttribute("title");
            string activityStatus = Element(driver, Control("activityStatus", "Generic")).GetAttribute("title");
            string owner = Element(driver, Control("activityOwner", "Generic")).GetAttribute("title");
            string startDate = Element(driver, Control("activityStartDate", "Generic")).GetAttribute("title");
            string activityName = subject + " " + activityType + " " + startDate;

            Console.WriteLine("Owner " + owner);
            Console.WriteLine("activityOwner" + activityOwner);
            if (purpose == "AllData")
            {
                if (oppTopic == subject)
                {
                    ThinkTime(1);
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Phone call subject is same as Opportunity Topic as expected", "Phonecall subject & Opportunity topic are same");
                    ThinkTime(1);

                    if (oppTopic == regarding)
                    {
                        ThinkTime(1);
                        AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Phone call Regarding  is same as Parent Opportunity record as expected", "Phonecall Regarding & Opportunity record are same");
                        ThinkTime(1);
                    }

                    else
                    {
                        AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Phone call regarding is not the expected Opp record", "Phonecall Regarding & Opportunity record are not same");
                        Assert.IsTrue(false);
                    }

                    if (activityStatus == "Open")
                    {
                        ThinkTime(1);
                        AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Phone call activity status is open as expected", "Phonecall activity status Open");
                        ThinkTime(1);

                    }

                    else
                    {
                        AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Phone call activity is not in Open status", "Phonecall activity is not open");
                        Assert.IsTrue(false);
                    }

                    if (activityTypeCheck == "P")
                    {
                        if (owner == "IT Sales Team")
                        {
                            ThinkTime(1);
                            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Phone call owner is " + activityOwner + "is as expected", "Phonecall owner is " + activityOwner);
                            ThinkTime(1);

                        }
                        else
                        {
                            AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Phone call owner is not as expected and value is " + activityOwner, "Phonecall owner is different");
                            Assert.IsTrue(false);
                        }
                    }
                    else if (activityTypeCheck == "E")
                    {

                        if (owner == "crm_svc_adm crm_svc_adm")
                        {
                            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Email activity owner is as expected and value is " + activityOwner, "Phonecall owner is different");

                        }
                        else
                        {
                            AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Email owner is not as expected and value is " + activityOwner, "Phonecall owner is different");
                            Assert.IsTrue(false);
                        }
                    }
                    SelectingActiveCell(driver, testInReport, testName, testDataIteration);
                    ThinkTime(3);

                    AddLog(driver, testInReport, testName, testDataIteration, "Info", "Phone call actvity created automatically", "Phonecall activity");
                    ThinkTime(5);


                    WaitUntil(driver, Control("regardingRecord", regarding, "phoneCall"), 30);
                    Element(driver, Control("regardingRecord", regarding, "phoneCall")).Click();

                }
                else
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Phone call subject is not same as Opportunity Topic", "Phonecall subject & Opportunity topic are different");
                    Assert.IsTrue(false);
                }
            }
            else if (purpose == "OwnerCheck")
            {
                if (activityOwner == owner)
                {

                    ThinkTime(1);
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Activity owner is " + activityOwner + "is as expected", "Activity owner is " + activityOwner);
                    ThinkTime(1);
                }

                else
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Activity owner is not changed as expected and value is " + activityOwner, "Activity  owner is different");
                    Assert.IsTrue(false);
                }
            }
            return activityName;
        }

        //Method to Assign Record to Logged user.

        public void asssignOppRecordToLoggedInUser(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string User)
        {
            ThinkTime(3);

            WaitUntil(driver, Control("AssignButtonActivity", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("AssignButtonActivity", "EnterpriseSales"));
            Element(driver, Control("AssignButtonActivity", "EnterpriseSales")).Click();

            ThinkTime(5);
            WaitUntil(driver, Control("GetAssignUser", "EnterpriseSales"), 90);

            WaitUntil(driver, Control("AssignButtonPopup", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("AssignButtonPopup", "EnterpriseSales"));
            Element(driver, Control("AssignButtonPopup", "EnterpriseSales")).Click();
            ThinkTime(10);
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Record assigned to logged user", "Assign record");
            ThinkTime(5);
        }

        public void verifyAssignedUserInOpp(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string User)
        {
            ThinkTime(8);
            try
            {
                saveFooter(driver, testInReport, testName, testDataIteration);
            }
            catch
            {

                MoveToElement(driver, Control("saveAndContinue", "Opportunity"));
                Element(driver, Control("saveAndContinue", "Opportunity")).Click();
                ThinkTime(3);
            }

            ThinkTime(8);
            Element(driver, Control("refreshButton", "Opportunity")).Click();
            ThinkTime(5);
            WaitUntil(driver, Control("SelcectMoreHeaderFields", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("SelcectMoreHeaderFields", "EnterpriseSales"));
            Element(driver, Control("SelcectMoreHeaderFields", "EnterpriseSales")).Click();
            ThinkTime(6);
            string VerifyAssignedUser = Element(driver, Control("VerifyAssignedUser", "EnterpriseSales")).GetAttribute("innerText");
            Console.WriteLine("user " + VerifyAssignedUser);
            if (VerifyAssignedUser == User)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Record is successfully assigned to User", "Assign User Verification");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Assign User Failed", "AssignUser Verification");
                // Assert.Fail("Assign User Verification Failed");
            }
        }


        public void VerifyNewlyAssignedActivityAvailableInDashboard(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string activityName)
        {
            WaitUntil(driver, Control("myAssignedOpenActivity", "Dashboards"), 30);
            MoveToElement(driver, Control("myAssignedOpenActivity", "Dashboards"));
            try
            {

                if (Element(driver, Control("myAssignedOpenActivityName", activityName, "Dashboards")).Displayed)
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Newly Assigned activity successfully displayed in MyAssignedOpenActivity-ALL View", "Newly Assigned activity successfully displayed");
                }
                else
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Activity is not displayed in Dashboard view", "Activity is not Displayed");
                    Assert.Fail();
                }
            }
            catch
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Unable to find element", "We can't perform record search");
                Assert.Fail();

            }
        }


        public void excelData(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string TitanCompanyID)
        {
            Console.WriteLine("Titan ID =" + TitanCompanyID);
        }


        //[DataSource("System.Data.Odbc", "Dsn=Excel Files;Driver={Microsoft Excel Driver (*.xlsx)};dbq=|DataDirectory|\\DataManager\\IWG Customers M-3 - 2020-03-27_JIE74.xlsx;defaultdir=.;driverid=1046;maxbuffersize=2048;pagetimeout=5", "SharePoint$", DataAccessMethod.Sequential), TestMethod]
        //public void verifyOppdataWithExcelData(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        //{

        //    //excelData(driver, testInReport, testName, testDataIteration, TestContext.DataRow["TitanCompanyID"].ToString());

        //}



        //open particular record from Unassigned IT Sales Opportunities view of the IT Sales Support user
        public void verifyOppRecordCreatedInD365viaMSForm(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string companyName, string contactName, string checkFor)
        {
            ThinkTime(40);
            WaitUntil(driver, Control("unAssignedOppsITSalesSupportReq", "36.1_Dashboard"), 90);
            string OppRecordName;
            if (checkFor == "Matched Contact")
            {
                OppRecordName = companyName + " " + contactName;
                if (Element(driver, Control("oppRecordCreated", OppRecordName, "36.1_Dashboard")).Displayed)
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Opportunity is created in Dynamics from IT Sales form", "Opportunity Creation");
                }
                else
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Opportunity is not created in Dynamics from IT Sales form", "Opportunity Creation");

                }
            }
            else if (checkFor == "Unmatched Contact")
            {
                OppRecordName = companyName + " (UNKNOWN)";
                if (Element(driver, Control("oppRecordCreated", OppRecordName, "36.1_Dashboard")).Displayed)
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Opportunity is created in Dynamics from IT Sales form", "Opportunity Creation");
                }
                else
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Opportunity is not created in Dynamics from IT Sales form", "Opportunity Creation");

                }
            }

            //  string oppRecordName = Element(driver, Control("oppRecordCreated", OppRecordName, "36.1_Dashboard")).Text;
            // Console.WriteLine("oppRecordName "+ oppRecordName);


            WaitUntil(driver, Control("openopp", "Generic"), 90);
            ActionsDoubleClick(driver, Control("openopp", "Generic"));
            ThinkTime(10);

        }
        public void Verifystatusadvfind(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string status)
        {
            driver.SwitchTo().DefaultContent();
            SwitchToFrame(driver, "contentIFrame0");
            ThinkTime(2);
            SwitchToFrame(driver, "resultFrame");

            WaitUntil(driver, Control("selectRecord", "GenericOld"), 60);
            ElementHighlight(driver, Control("selectRecord", "GenericOld"));
            ActionsDoubleClick(driver, Control("selectRecord", "GenericOld"));
            ThinkTime(10);

            driver.SwitchTo().DefaultContent();
            string parentWindowHandle = driver.CurrentWindowHandle;
            WindowHandling(driver);
            ThinkTime(1);
            driver.Manage().Window.Maximize();
            ThinkTime(5);


            ThinkTime(4);



            driver.Manage().Window.Maximize();
            ThinkTime(10);
            if (Elements(driver, Control("Readonlypopup", "Appointment")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Status Verification", "Status Verification");

            }

            else
            {
                Assert.Fail("Status is not updated");
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Status Verification", "Status Verification");

            }


            WaitUntil(driver, Control("Activitybutton", "Appointment"), 90);
            ActionsClick(driver, Control("Activitybutton", "Appointment"));
            driver.SwitchTo().DefaultContent();
            ThinkTime(3);
            WaitUntil(driver, Control("Confirmaction", "Appointment"), 90);

            ActionsClick(driver, Control("Confirmaction", "Appointment"));
            ThinkTime(2);

            //driver.Close();
            //WindowHandling(driver, parentWindowHandle);

        }

        public void DeleteTourFn(IWebDriver driver, ExtentTest extentTest, string testName, string testDataIteration)
        {
            string parent = driver.CurrentWindowHandle;
            AdvancedFind(driver, extentTest, testName, testDataIteration);
            ThinkTime(2);
            //AdvFinddeletetour(driver, extentTest, testName, testDataIteration);
            driver.Close();
            driver.SwitchTo().Window(parent);
        }

        public void selectrecordmarginadvancefind(IWebDriver driver, string actiontype)
        {
            driver.SwitchTo().DefaultContent();
            SwitchToFrame(driver, "contentIFrame0");
            ThinkTime(2);
            SwitchToFrame(driver, "resultFrame");

            WaitUntil(driver, Control("selectRecord", "GenericOld"), 60);
            ElementHighlight(driver, Control("selectRecord", "GenericOld"));
            ActionsClick(driver, Control("selectRecord", "GenericOld"));
            ThinkTime(2);
            driver.SwitchTo().DefaultContent();
            ActionsClick(driver, Control("BookableResourceribbonadvancefind", actiontype, "Generic"));
            ThinkTime(4);

            ThinkTime(8);

            driver.SwitchTo().DefaultContent();
            ThinkTime(3);

            SwitchToFrame(driver, "InlineDialog_Iframe");
            ThinkTime(4);


            ActionsClick(driver, Control("Confirmaction", "Opportunity"));
            ThinkTime(2);

        }
        public void LoginafterlogoutOld(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string username, string password)
        {


            WaitUntil(driver, Control("UseAnotherAccount", "Generic"), 240);
            Element(driver, Control("UseAnotherAccount", "Generic")).Click();
            AddLog(driver, testInReport, testName, "Info", "Test started for " + username);

            WaitUntil(driver, Control("emailAddress", "Generic"), 30);
            Element(driver, Control("emailAddress", "Generic")).Click();
            Element(driver, Control("emailAddress", "Generic")).SendKeys(username);
            WaitUntil(driver, Control("passWord", "Generic"), 60);

            ThinkTime(3);

            WaitUntil(driver, Control("NextButton", "Opportunity"), 30);
            Element(driver, Control("NextButton", "Opportunity")).Click();


            Element(driver, Control("passWord", "Generic")).Click();
            Element(driver, Control("passWord", "Generic")).SendKeys(password);
            WaitUntil(driver, Control("signIn", "Generic"), 60);
            Element(driver, Control("signIn", "Generic")).Click();
            ThinkTime(10);

            HandlingEmailWarning(driver, testInReport, testName, testDataIteration);
            //HandlingEditPopUp(driver, testInReport, testName, testDataIteration);

        }




        public void advsncefilterdate(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string option1, string option2)
        {
            driver.SwitchTo().DefaultContent();

            WaitUntil(driver, Control("AdvanceFilter", "Generic"), 240);
            MoveToElement(driver, Control("AdvanceFilter", "Generic"));

            Element(driver, Control("AdvanceFilter", "Generic")).Click();
            ThinkTime(3);


            driver.SwitchTo().DefaultContent();

            WaitUntil(driver, Control("AddButton", "Generic"), 240);
            MoveToElement(driver, Control("AddButton", "Generic"));

            Element(driver, Control("AddButton", "Generic")).Click();
            ThinkTime(3);


            WaitUntil(driver, Control("addrow", "Generic"), 240);
            MoveToElement(driver, Control("addrow", "Generic"));

            Element(driver, Control("addrow", "Generic")).Click();
            ThinkTime(3);

            WaitUntil(driver, Control("inputbox", "Generic"), 240);
            MoveToElement(driver, Control("inputbox", "Generic"));

            Element(driver, Control("inputbox", "Generic")).Click();
            ThinkTime(3);

            WaitUntil(driver, Control("inputoption", option1, "Generic"), 240);
            MoveToElement(driver, Control("inputoption", option1, "Generic"));

            Element(driver, Control("inputoption", option1, "Generic")).Click();
            ThinkTime(3);


            WaitUntil(driver, Control("AddButton", "Generic"), 240);
            MoveToElement(driver, Control("AddButton", "Generic"));

            Element(driver, Control("AddButton", "Generic")).Click();
            ThinkTime(3);


            WaitUntil(driver, Control("addrow", "Generic"), 240);
            MoveToElement(driver, Control("addrow", "Generic"));

            Element(driver, Control("addrow", "Generic")).Click();
            ThinkTime(3);

            WaitUntil(driver, Control("selectoptn2", "Generic"), 240);
            MoveToElement(driver, Control("selectoptn2", "Generic"));

            Element(driver, Control("selectoptn2", "Generic")).Click();
            ThinkTime(3);

            WaitUntil(driver, Control("inputoption", option2, "Generic"), 240);
            MoveToElement(driver, Control("inputoption", option2, "Generic"));

            Element(driver, Control("inputoption", option2, "Generic")).Click();
            ThinkTime(3);

            WaitUntil(driver, Control("morefilter2", "Generic"), 240);
            MoveToElement(driver, Control("morefilter2", "Generic"));

            Element(driver, Control("morefilter2", "Generic")).Click();
            ThinkTime(3);


            WaitUntil(driver, Control("morefilteroptn", "Generic"), 240);
            MoveToElement(driver, Control("morefilteroptn", "Generic"));

            Element(driver, Control("morefilteroptn", "Generic")).Click();
            ThinkTime(3);


            WaitUntil(driver, Control("applybutton", "Generic"), 240);
            MoveToElement(driver, Control("applybutton", "Generic"));

            Element(driver, Control("applybutton", "Generic")).Click();
            ThinkTime(3);



        }
        public void ITmanagerdashboardphonecallverification(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {


            WaitUntil(driver, Control("phonecallactivity", "Dashboards"), 90);
            ThinkTime(2);
            if (Element(driver, Control("phonecallactivity", "Dashboards")).Displayed)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Phone call activity displayed", "Phone call activity displayed");

            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Phone call activity not displayed", " Phone call activity not displayed");
                Assert.Fail("Phone call activity not displayed");
            }

        }

        public void CancelTour(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            try
            {
                //NavigateToMainDropDown(driver, testInReport, testName, testDataIteration, "Sales");
                //NavigateToEntity(driver, testInReport, testName, testDataIteration, "Opportunities");
                //HidingPureCloud(driver, testInReport, testName, testDataIteration);
                ////
                //OpenRecordGlobalSearch(driver, testInReport, testName, testDataIteration, "OPP-001503");
                SelectOpportunityTab(driver, testInReport, testName, testDataIteration, "Activities");
                ThinkTime(2);
                //WaitUntil(driver, Control("ActivityDropdown", "CommonObj"), 30);
                //MoveToElement(driver, Control("ActivityDropdown", "CommonObj"));
                //Element(driver, Control("ActivityDropdown", "CommonObj")).Click();
                //ThinkTime(2);
                //WaitUntil(driver, Control("OpenAct", "CommonObj"), 30);
                //Element(driver, Control("OpenAct", "CommonObj")).Click();

                //ThinkTime(2);


                //WaitUntil(driver, Control("SelectAllBut", "CommonObj"), 30);
                //Element(driver, Control("SelectAllBut", "CommonObj")).Click();
                //ThinkTime(2);
                WaitUntil(driver, Control("ActivityStatus", "CommonObj"), 30);
                Element(driver, Control("ActivityStatus", "CommonObj")).Click();
                ThinkTime(2);
                WaitUntil(driver, Control("ZtoASort", "CommonObj"), 30);
                Element(driver, Control("ZtoASort", "CommonObj")).Click();
                ThinkTime(2);
                WaitUntil(driver, Control("AreaCheck1", "CommonObj"), 30);
                Element(driver, Control("AreaCheck1", "CommonObj")).Click();
                ThinkTime(2);

                WaitUntil(driver, Control("ComplActBut", "CommonObj"), 30);
                Element(driver, Control("ComplActBut", "CommonObj")).Click();
                ThinkTime(2);
                WaitUntil(driver, Control("DeleteBut", "CommonObj"), 30);
                Element(driver, Control("DeleteBut", "CommonObj")).Click();
                ThinkTime(2);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Tour completed", "Tour Completed");
            }
            catch (Exception e)
            {

            }
        }
        public void VerifyExcelButtondisplayed(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string excelbutton)
        {

            ThinkTime(3);
            if (Elements(driver, Control("ExportToExcel", excelbutton, "Dashboards")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Export to Excel Button Exists", "Excel button");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Export to Excel Button does not Exists", "Excel button");
                Assert.Fail("Export to Excel Button doesnot Exists");
            }



        }

        public void selectactivitytype(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string activitytypevalue)
        {

            WaitUntil(driver, Control("Activitytype", "Generic"), 180);
            MoveToElement(driver, Control("Activitytype", "Generic"));

            Element(driver, Control("Activitytype", "Generic")).Click();
            ThinkTime(5);
            MoveToElement(driver, Control("Activitytypevalue", activitytypevalue, "Generic"));
            ThinkTime(2);
            Element(driver, Control("Activitytypevaluecheck", activitytypevalue, "Generic")).Click();


        }
        public void searchrequest(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string commrequestname)
        {


            ThinkTime(2);
            WaitUntil(driver, Control("CaseSearchBar", "GenericOld"), 120);
            Element(driver, Control("CaseSearchBar", "GenericOld")).SendKeys(commrequestname);
            ThinkTime(2);
            WaitUntil(driver, Control("SearchEnter", "Generic"), 120);
            Element(driver, Control("SearchEnter", "Generic")).Click();

        }
        public void SelectingActiverequest(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {

            for (int i = 0; i <= 25; i++)
            {

                ThinkTime(2);
                WaitUntil(driver, Control("RefreshPage2", "CommonObj"), 30);
                Element(driver, Control("RefreshPage2", "CommonObj")).Click();
                ThinkTime(2);
                if (Elements(driver, Control("activecommrequest", "Generic")) > 0)
                {
                    break;
                }

            }
            ThinkTime(3);
            WaitUntil(driver, Control("activecommrequest", "Generic"), 65);
            MoveToElement(driver, Control("activecommrequest", "Generic"));
            ActionsDoubleClick(driver, Control("activecommrequest", "Generic"));

            ThinkTime(10);



        }


        public void selectConnectedTo(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string activitytitle)
        {

            ThinkTime(5);
            WaitUntil(driver, Control("ConnectedTo", activitytitle, "phoneCall"), 60);
            if (Elements(driver, Control("ConnectedTo", activitytitle, "phoneCall")) > 0)
            {
                ThinkTime(10);
                //Element(driver, Control("ConnectedTo", activitytitle, "phoneCall")).Click();
                MoveToElement(driver, Control("ConnectedTo", activitytitle, "phoneCall"));
                ActionsDoubleClick(driver, Control("ConnectedTo", activitytitle, "phoneCall"));
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Communication request created", "Activity");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Info", "No Activity Available.Please create one", "Activity");
                Assert.Fail("Activities are not  available.Please create one");

            }

        }

        public void VerifysalesassistroleNew(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string oppowner, string asrole)
        {
            string Connectname = Element(driver, Control("ConnectName", "CommonObj")).GetAttribute("title");
            string Connectrole = Element(driver, Control("ConnectRole", "CommonObj")).GetAttribute("title");

            if (Connectname == oppowner)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "owner verified", "sales assist");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "owneris wrong", "sales assist ");
                Assert.Fail("owner is wrong");
            }
            if (Connectrole == asrole)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "role verified", "sales assist");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Business center  is wrong", "sales assist");
                Assert.Fail("sales assist is wrong");
            }
        }

        public void Verifysalesassistrole(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string oppowner, string asrole)
        {
            string name = Element(driver, Control("connectuser", "Generic")).GetAttribute("title");
            string role = Element(driver, Control("AsthisRole", "Generic")).GetAttribute("title");


            if (name == oppowner)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "owner verified", "sales assist");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "owneris wrong", "sales assist ");
                Assert.Fail("owner is wrong");
            }
            if (role == asrole)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "role verified", "sales assist");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Business center  is wrong", "sales assist");
                Assert.Fail("sales assist is wrong");
            }


        }

        public void payloadnavigate(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            driver.Navigate().Refresh();
            //HidingPureCloudNew(driver, testInReport, testName, testDataIteration);
            // verifyCreatedby(driver, testInReport, testName, testDataIteration);
            ThinkTime(2);
            WaitUntil(driver, Control("payloadnavigation", "Generic"), 180);

            Element(driver, Control("payloadnavigation", "Generic")).Click();

            ThinkTime(2);


        }
        public void verifyCreatedby(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {


            string expCreated = "crm_svc_adm #";
            ThinkTime(2);
            WaitUntil(driver, Control("PayloadCreatedby", "CommonObj"), 90);
            string payCreated = Element(driver, Control("PayloadCreatedby", "CommonObj")).Text;
            if (expCreated.Equals(payCreated))
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Owner name is verfified", "Owner name is verfified");

            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Owner name is verfified but wrong", "Owner name is verfified but wrong");
                Assert.Fail("Wrong Owner name");
            }
        }

        public void tourcommrequestverify(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {


            DateTime now = DateTime.Now;

            string datestring = DateTime.Now.ToString("M/dd/yyyy", CultureInfo.InvariantCulture);
            string datestring1 = DateTime.Now.ToString("M/d/yyyy", CultureInfo.InvariantCulture);
            if (Elements(driver, Control("tourcommrequestverification", datestring, "Generic")) > 0 || Elements(driver, Control("tourcommrequestverification", datestring1, "Generic")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Tour Comm request created", "Tour Comm request");

            }
            else
            {

                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Tour Comm request not created", "Tour Comm request");
                Assert.Fail("Tour Comm request not created");
            }
        }
        public void payloadverificationforlang(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string lc)
        {
            string payload = Element(driver, Control("payloadverification", "Generic")).GetAttribute("defaultValue");
            string language = lc;

            bool languagecodecheck = payload.Contains(language);

            if (languagecodecheck == true)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Language code is correct", "Language code");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Language code is wrong", "Language code");
                Assert.Fail("Language code wrong");
            }

        }
        public void payloadverification01(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string lc, string Bc, string email, string Oppowner, string brandname = "", string brandimage = "", string centrename = "", string centreimage = "")
        {
            string payload = Element(driver, Control("payloadverification", "Generic")).GetAttribute("defaultValue");
            string language = lc;
            string center = Bc;
            string custinfo = email;
            string user = Oppowner;
            string Imngbrand = brandimage;
            string Imgcentre = centreimage;
            string namebrand = brandname;
            string namecentre = centrename;


            bool languagecodecheck = payload.Contains(language);
            bool businesscentrecheck = payload.Contains(Bc);
            //bool customermail = payload.Contains(custinfo);
            bool Oppowneruser = payload.Contains(user);
            bool Brandimage = payload.Contains(brandimage);
            bool cenreimage = payload.Contains(Imgcentre);
            bool Brandname = payload.Contains(namebrand);
            bool Centrename = payload.Contains(namecentre);

            if (Brandimage == true && cenreimage == true && Brandname == true && Centrename == true)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Image is correct", "Image for brand and centre code");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Image code is wrong", "Brand and centre image code");
                Assert.Fail("Image for brand and centre code wrong");
            }



            if (Oppowneruser == true)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Owner is correct", "Owner code");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Owner code is wrong", "Owner code");
                Assert.Fail("Owner code wrong");
            }
        }

        public void payloadverification(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string lc, string Bc, string email, string Oppowner, string brandname = "", string brandimage = "", string centrename = "", string centreimage = "")
        {
            string payload = Element(driver, Control("payloadverification", "Generic")).GetAttribute("defaultValue");
            string language = lc;
            string center = Bc;
            string custinfo = email;
            string user = Oppowner;
            string Imngbrand = brandimage;
            string Imgcentre = centreimage;
            string namebrand = brandname;
            string namecentre = centrename;


            bool languagecodecheck = payload.Contains(language);
            bool businesscentrecheck = payload.Contains(Bc);
            bool customermail = payload.Contains(custinfo);
            bool Oppowneruser = payload.Contains(user);
            bool Brandimage = payload.Contains(brandimage);
            bool cenreimage = payload.Contains(Imgcentre);
            bool Brandname = payload.Contains(namebrand);
            bool Centrename = payload.Contains(namecentre);

            if (Brandimage == true && cenreimage == true && Brandname == true && Centrename == true)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Image is correct", "Image for brand and centre code");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Image code is wrong", "Brand and centre image code");
                Assert.Fail("Image for brand and centre code wrong");
            }



            if (Oppowneruser == true)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Owner is correct", "Owner code");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Owner code is wrong", "Owner code");
                Assert.Fail("Owner code wrong");
            }


            if (languagecodecheck == true)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Language code is correct", "Language code");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Language code is wrong", "Language code");
                Assert.Fail("Language code wrong");
            }
            if (businesscentrecheck == true)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Business center is correct", "Business center");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Business center  is wrong", "Business center");
                Assert.Fail("Business center is wrong");
            }
            if (customermail == true)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Customer details is correct", "Customer details");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Customer details is wrong", "Customer details");
                Assert.Fail("Customer details is wrong");
            }


        }

        public void payloadverificationwithASM(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string lc, string Bc, string email, string ASMemail)
        {
            string payload = Element(driver, Control("payloadverification", "Generic")).GetAttribute("defaultValue");
            string language = lc;
            string center = Bc;
            string custinfo = email;
            string ASMinfo = ASMemail;

            bool languagecodecheck = payload.Contains(language);
            bool businesscentrecheck = payload.Contains(Bc);
            bool customermail = payload.Contains(custinfo);
            bool ASMdetails = payload.Contains(ASMinfo);


            if (languagecodecheck == true)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Language code is correct", "Language code");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Language code is wrong", "Language code");
                Assert.Fail("Language code wrong");
            }
            if (businesscentrecheck == true)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Business center is correct", "Business center");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Business center  is wrong", "Business center");
                Assert.Fail("Business center is wrong");
            }
            if (customermail == true)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Customer details is correct", "Customer details");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Customer details is wrong", "Customer details");
                Assert.Fail("Customer details is wrong");
            }

            if (ASMdetails == true)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "ASM details is correct", "Customer details");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "ASM details is wrong", "Customer details");
                Assert.Fail("Customer details is wrong");
            }



        }

        //Payload verification along with Business Centre
        public void payloadverificationASMBusinessCentre(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string lc, string Bc, string Brand, string email, string ASMemail)
        {
            string payload = Element(driver, Control("payloadverification", "Generic")).GetAttribute("defaultValue");
            string language = lc;
            string center = Bc;
            string vbrand = Brand;
            string custinfo = email;
            string ASMinfo = ASMemail;

            bool languagecodecheck = payload.Contains(language);
            bool businesscentrecheck = payload.Contains(center);
            bool brandcheck = payload.Contains(vbrand);
            bool customermail = payload.Contains(custinfo);
            bool ASMdetails = payload.Contains(ASMinfo);


            if (languagecodecheck == true)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Language code is correct", "Language code");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Language code is wrong", "Language code");
                Assert.Fail("Language code wrong");
            }
            if (businesscentrecheck == true)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Business center is correct", "Business center");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Business center  is wrong", "Business center");
                Assert.Fail("Business center is wrong");
            }
            if (brandcheck == true)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Business center is correct", "Business center");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Business center  is wrong", "Business center");
                Assert.Fail("Business center is wrong");
            }
            if (customermail == true)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Customer details is correct", "Customer details");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Customer details is wrong", "Customer details");
                Assert.Fail("Customer details is wrong");
            }

            if (ASMdetails == true)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "ASM details is correct", "Customer details");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "ASM details is wrong", "Customer details");
                Assert.Fail("Customer details is wrong");
            }



        }

        public void payloadverificationASMBusinessCentre1(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string lc, string Bc, string Brand, string email, string ASMemail)
        {
            string payload = Element(driver, Control("payloadverification", "Generic")).GetAttribute("defaultValue");
            string language = lc;
            string center = Bc;
            string vbrand = Brand;
            string custinfo = email;
            string ASMinfo = ASMemail;

            bool languagecodecheck = payload.Contains(language);
            bool businesscentrecheck = payload.Contains(center);
            bool brandcheck = payload.Contains(vbrand);
            bool customermail = payload.Contains(custinfo);
            bool ASMdetails = payload.Contains(ASMinfo);


            if (languagecodecheck == true)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Language code is correct", "Language code");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Language code is wrong", "Language code");
                Assert.Fail("Language code wrong");
            }
            if (businesscentrecheck == true)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Business center is correct", "Business center");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Business center  is wrong", "Business center");
                Assert.Fail("Business center is wrong");
            }
            if (brandcheck == true)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Business center is correct", "Business center");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Business center  is wrong", "Business center");
                Assert.Fail("Business center is wrong");
            }


            if (ASMdetails == true)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "ASM details is correct", "Customer details");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "ASM details is wrong", "Customer details");
                Assert.Fail("Customer details is wrong");
            }



        }





        public void payloadverificationbrandlangphone(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string lc, string bd, string email, string phone, string accountmail)
        {
            string payload = Element(driver, Control("payloadverification", "Generic")).GetAttribute("defaultValue");
            string language = lc;
            string brand = bd;
            string telephone = phone;
            string brandmail = accountmail;
            string uatmailid = "crm_ist_pilot@regus.com";

            bool languagecodecheck = payload.Contains(language);
            bool brandcheck = payload.Contains(bd);
            bool telephonecheck = payload.Contains(telephone);
            bool brandmailcheck = payload.Contains(brandmail);
            bool umail = payload.Contains(uatmailid);


            if (languagecodecheck == true)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Language code is correct", "Language code");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Language code is wrong", "Language code");
                Assert.Fail("Language code wrong");
            }
            if (brandcheck == true)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Business center is correct", "Business center");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Business center  is wrong", "Business center");
                Assert.Fail("Business center is wrong");
            }
            if (telephonecheck == true)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "ASM details is correct", "Customer details");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "ASM details is wrong", "Customer details");
                Assert.Fail("Customer details is wrong");
            }
            if (brandmailcheck == true)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Account mail is correct", "Customer details");
            }
            else
            {
                if (umail == true)
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Account mail is correct", "Customer details");
                }
                else
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Account mail is wrong", "Customer details");
                    Assert.Fail("mail is wrong");
                }
            }


        }

        public void CommrequestHeaderverification(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string owner)
        {

            string header = Element(driver, Control("Headerofcommrequest", "Opportunity")).GetAttribute("innerText");
            bool Createdby = header.Contains(owner);

            if (Createdby == true)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Header created by is correct", "Createdby by verification");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Createdby is wrong", "Createdby is wrong");
                Assert.Fail("Createdby is wrong");
            }
        }


        public void payloadverificationwithphone(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string lc, string bd, string email, string phone, string accountmail)
        {
            string payload = Element(driver, Control("payloadverification", "Generic")).GetAttribute("defaultValue");
            string language = lc;
            string brand = bd;
            string custinfo = email;
            string telephone = phone;
            string brandmail = accountmail;
            string uatmailid = "crm_ist_pilot@regus.com";

            bool languagecodecheck = payload.Contains(language);
            bool brandcheck = payload.Contains(bd);
            bool customermail = payload.Contains(email);
            bool telephonecheck = payload.Contains(telephone);
            bool brandmailcheck = payload.Contains(brandmail);
            bool umail = payload.Contains(uatmailid);

            if (languagecodecheck == true || payload.Contains("en-GB"))
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Language code is correct", "Language code");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Language code is wrong", "Language code");
                Assert.Fail("Language code wrong");
            }
            if (brandcheck == true)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Business center is correct", "Business center");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Business center  is wrong", "Business center");
                Assert.Fail("Business center is wrong");
            }
            if (customermail == true)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Customer details is correct", "Customer details");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Customer details is wrong", "Customer details");
                Assert.Fail("Customer details is wrong");
            }

            //if (telephonecheck == true)
            //{
            //    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "ASM details is correct", "Customer details");
            //}
            //else
            //{
            //    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "ASM details is wrong", "Customer details");
            //    Assert.Fail("Customer details is wrong");
            //}

            if (brandmailcheck == true)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Account mail is correct", "Customer details");
            }
            else
            {
                if (umail == true)
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Account mail is correct", "Customer details");
                }
                else
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Account mail is wrong", "Customer details");
                    Assert.Fail("mail is wrong");
                }
            }

        }

        public void payloadverificationbrand(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string lc, string bd)
        {
            string payload = Element(driver, Control("payloadverification", "Generic")).GetAttribute("defaultValue");
            string language = lc;
            string brand = bd;

            bool languagecodecheck = payload.Contains(language);
            bool brandcheck = payload.Contains(bd);


            if (languagecodecheck == true || payload.Contains("en-GB"))
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Language code is correct", "Language code");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Language code is wrong", "Language code");
                Assert.Fail("Language code wrong");
            }
            if (brandcheck == true)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Business center is correct", "Business center");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Business center  is wrong", "Business center");
                Assert.Fail("Business center is wrong");
            }

        }


        public void payloadverificationwithphoneCon1(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string lc, string bd, string email, string phone, string accountmail)
        {
            string payload = Element(driver, Control("payloadverification", "Generic")).GetAttribute("defaultValue");
            string language = lc;
            string brand = bd;
            string custinfo = email;
            string telephone = phone;
            string brandmail = accountmail;
            string uatmailid = "crm_ist_pilot@regus.com";

            bool languagecodecheck = payload.Contains(language);
            bool brandcheck = payload.Contains(bd);
            bool customermail = payload.Contains(email);
            bool telephonecheck = payload.Contains(telephone);
            bool brandmailcheck = payload.Contains(brandmail);
            bool umail = payload.Contains(uatmailid);

            if (languagecodecheck == true || payload.Contains("en-GB"))
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Language code is correct", "Language code");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Language code is wrong", "Language code");
                Assert.Fail("Language code wrong");
            }
            if (brandcheck == true)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Business center is correct", "Business center");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Business center  is wrong", "Business center");
                Assert.Fail("Business center is wrong");
            }
            if (customermail == true)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Customer details is correct", "Customer details");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Customer details is wrong", "Customer details");
                Assert.Fail("Customer details is wrong");
            }

            //if (telephonecheck == true)
            //{
            //    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "ASM details is correct", "Customer details");
            //}
            //else
            //{
            //    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "ASM details is wrong", "Customer details");
            //    Assert.Fail("Customer details is wrong");
            //}

            if (brandmailcheck == true)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Account mail is correct", "Customer details");
            }
            else
            {
                if (umail == true)
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Account mail is correct", "Customer details");
                }
                else
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Account mail is wrong", "Customer details");
                    Assert.Fail("mail is wrong");
                }
            }






        }





        public void payloadverificationASMinfo(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string ASMemail)
        {
            string payload = Element(driver, Control("payloadverification", "Generic")).GetAttribute("defaultValue");

            string ASMinfo = ASMemail;


            bool ASMdetails = payload.Contains(ASMinfo);



            if (ASMdetails == true)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "ASM details is correct", "Customer details");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "ASM details is wrong", "Customer details");
                Assert.Fail("Customer details is wrong");
            }
        }


        public void payloadverifyrqstnotprocessed(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string Response, string commreq)
        {
            ThinkTime(5);
            WaitUntil(driver, Control("payloadresponse", "Generic"), 80);
            string payload = Element(driver, Control("payloadresponse", "Generic")).Text;

            string text = Response;


            bool Responsetext = payload.Contains(text);



            if (Responsetext == true)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", " details is correct", "Customer details");
            }

            else

            {
                Backtooppotunity(driver, testInReport, testName, testDataIteration);
                SelectOpportunityTab(driver, testInReport, testName, testDataIteration, "Activities");
                WaitUntil(driver, Control("NoAnswerPostTour1", commreq, "phoneCall"), 120);
                if (Elements(driver, Control("NoAnswerPostTour1", commreq, "phoneCall")) > 0)
                {
                    ThinkTime(10);
                    Element(driver, Control("NoAnswerPostTour1", commreq, "phoneCall")).Click();
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Communication request created", "Activity");
                }

                payloadnavigate(driver, testInReport, testName, testDataIteration);

                string payload1 = Element(driver, Control("payloadresponse1", "Generic")).GetAttribute("title");
                bool Responsetext1 = payload.Contains(text);
                if (Responsetext1 == true)
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", " details is correct", "Customer details");
                }


                else
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", " details is wrong", "Customer details");
                    Assert.Fail("Payload details is wrong");
                }
            }
        }


        public void Backtooppotunity(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(2);
            WaitUntil(driver, Control("Generaltab", "Generic"), 80);
            Element(driver, Control("Generaltab", "Generic")).Click();
            ThinkTime(2);
            WaitUntil(driver, Control("regardingnavigate", "Generic"), 80);
            Element(driver, Control("regardingnavigate", "Generic")).Click();

        }
        public void BackButton(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(2);
            WaitUntil(driver, Control("BackBtn", "CommonObj"), 80);
            Element(driver, Control("BackBtn", "CommonObj")).Click();
        }




        public void Backtooppotunityfromconnection(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            WaitUntil(driver, Control("Details", "Generic"), 80);
            Element(driver, Control("Details", "Generic")).Click();
            ThinkTime(5);
            Element(driver, Control("ConnectedFrom", "Generic")).Click();
            ThinkTime(5);
        }
        public void BacktooppotunityfromTourpage(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(2);
            WaitUntil(driver, Control("Generaltab", "Generic"), 120);
            Element(driver, Control("Generaltab", "Generic")).Click();
            ThinkTime(5);

            Element(driver, Control("Backtoopportunity", "Generic")).Click();
            ThinkTime(5);

        }



        public void NavigateTourfrompayload(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            WaitUntil(driver, Control("Generaltab", "Generic"), 80);
            Element(driver, Control("Generaltab", "Generic")).Click();
            ThinkTime(5);
            Element(driver, Control("RegardingTour", "Generic")).Click();
            ThinkTime(5);
        }
        public void reschedulecommrequest(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(5);
            WaitUntil(driver, Control("twocommrequest", "Generic"), 80);
            if (Elements(driver, Control("twocommrequest", "Generic")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Two communication request created", "Tour Comm request");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Two communication request not created", "Tour Comm request");
                Assert.Fail("Two communication request not created");
            }
            ThinkTime(5);
        }

        public void CreateNewOpportunityRecentcontact(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string Channel, string MajorSource, string MinorSource, string contact, string Accountname)
        {
            ThinkTime(2);

            string Y1 = DateTime.Now.ToString("MMMM d");
            string Y2 = DateTime.Now.ToString("yyyy");
            string Y3 = Y1 + ", " + Y2;
            Console.WriteLine(Y1 + Y2);

            //create new contact
            WaitUntil(driver, Control("Contactlookup", "Opportunity"), 100);
            MoveToElement(driver, Control("Contactlookup", "Opportunity"));
            Element(driver, Control("Contactlookup", "Opportunity")).Click();
            Element(driver, Control("Contactlookup", "Opportunity")).SendKeys(contact);
            ThinkTime(3);
            WaitUntil(driver, Control("ITSalesCustomer", "Opportunity"), 360);
            MoveToElement(driver, Control("ITSalesCustomer", "Opportunity"));
            Element(driver, Control("ITSalesCustomer", "Opportunity")).Click();
            ThinkTime(2);


            if (Elements(driver, Control("RecentContact", contact, "Opportunity")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Recent Contact Selected", "Contact");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Recent Contact not Selected", "Conact");
                Assert.Fail("Recent Contact not Selected");
            }
            scrollDownContactPage(driver, testInReport, testDataIteration, testName);
            if (Elements(driver, Control("RecentAccount", Accountname, "Opportunity")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Linked Account Selected", "Contact");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Linked Account not Selected", "Conact");
                Assert.Fail("Recent Contact not Selected");
            }
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Accountname entered", "Accountname entered");

            ThinkTime(5);
            scrollDownContactPage(driver, testInReport, testDataIteration, testName);

            ThinkTime(2);
            WaitUntil(driver, Control("CountryInput", "Accounts"), 30);
            MoveToElement(driver, Control("CountryInput", "Accounts"));
            Element(driver, Control("CountryInput", "Accounts")).SendKeys(Keys.Control + "a");
            Element(driver, Control("CountryInput", "Accounts")).SendKeys(Keys.Delete);
            Element(driver, Control("CountryInput", "Accounts")).SendKeys("united kingdom");
            ThinkTime(2);
            WaitUntil(driver, Control("CountrySelect", "Accounts"), 30);
            MoveToElement(driver, Control("CountrySelect", "Accounts"));
            Element(driver, Control("CountrySelect", "Accounts")).Click();
            ThinkTime(3);

            scrollDownOpportunityEnterprise(driver, testInReport, testDataIteration, testName);
            scrollDownOpportunityEnterprise(driver, testInReport, testDataIteration, testName);

            //Add new Channel
            ThinkTime(2);
            WaitUntil(driver, Control("NewChannelInput", "Opportunity"), 30);
            MoveToElement(driver, Control("NewChannelInput", "Opportunity"));
            ThinkTime(2);
            Element(driver, Control("NewChannelInput", "Opportunity")).SendKeys(Keys.Control + "a");
            Element(driver, Control("NewChannelInput", "Opportunity")).SendKeys(Keys.Delete);
            ThinkTime(3);
            Element(driver, Control("NewChannelInput", "Opportunity")).SendKeys(Channel);
            ThinkTime(2);

            WaitUntil(driver, Control("NewChannelSelect", Channel, "Generic"), 30);
            MoveToElement(driver, Control("NewChannelSelect", Channel, "Generic"));
            Element(driver, Control("NewChannelSelect", Channel, "Generic")).Click();

            //Add new MajorSource
            ThinkTime(2);
            WaitUntil(driver, Control("NewMajorSourceInput", "Opportunity"), 100);
            MoveToElement(driver, Control("NewMajorSourceInput", "Opportunity"));
            ThinkTime(3);
            Element(driver, Control("NewMajorSourceInput", "Opportunity")).SendKeys(Keys.Control + "a");
            Element(driver, Control("NewMajorSourceInput", "Opportunity")).SendKeys(Keys.Delete);

            ThinkTime(2);
            Element(driver, Control("NewMajorSourceInput", "Opportunity")).SendKeys(MajorSource);
            ThinkTime(2);
            WaitUntil(driver, Control("NewMajorSourceSelect", MajorSource, "Generic"), 30);
            MoveToElement(driver, Control("NewMajorSourceSelect", MajorSource, "Generic"));
            Element(driver, Control("NewMajorSourceSelect", MajorSource, "Generic")).Click();

            //Add new MinorSource
            ThinkTime(2);
            WaitUntil(driver, Control("NewMinorSourceInput", "Opportunity"), 360);
            MoveToElement(driver, Control("NewMinorSourceInput", "Opportunity"));
            Element(driver, Control("NewMinorSourceInput", "Opportunity")).SendKeys(Keys.Control + "a");
            Element(driver, Control("NewMinorSourceInput", "Opportunity")).SendKeys(Keys.Delete);

            ThinkTime(2);
            Element(driver, Control("NewMinorSourceInput", "Opportunity")).SendKeys(MinorSource);
            ThinkTime(2);
            //WaitUntil(driver, Control("NewMinorSourceSelect", MinorSource, "Generic"), 30);
            //MoveToElement(driver, Control("NewMinorSourceSelect", MinorSource, "Generic"));
            //Element(driver, Control("NewMinorSourceSelect", MinorSource, "Generic")).Click();
            //ThinkTime(3);
            WaitUntil(driver, Control("Languagedropdown", "EnterpriseSales"), 60);
            MoveToElement(driver, Control("Languagedropdown", "EnterpriseSales"));
            Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();

            saveFooter(driver, testInReport, testName, testDataIteration);
            ThinkTime(4);
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Opportunity Created Successfully", "New Opportunity Verification");
            ThinkTime(4);



        }

        public void CreateNewOpportunityRecentAccount(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string Channel, string MajorSource, string MinorSource, string contact, string Accountname)
        {
            ThinkTime(2);

            string Y1 = DateTime.Now.ToString("MMMM d");
            string Y2 = DateTime.Now.ToString("yyyy");
            string Y3 = Y1 + ", " + Y2;
            Console.WriteLine(Y1 + Y2);


            // Enter Account
            WaitUntil(driver, Control("companyinputvalue", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("companyinputvalue", "EnterpriseSales"));
            Element(driver, Control("companyinputvalue", "EnterpriseSales")).Click();
            Element(driver, Control("companyinputvalue", "EnterpriseSales")).SendKeys(Keys.Control + "a");
            Element(driver, Control("companyinputvalue", "EnterpriseSales")).SendKeys(Keys.Delete);
            // Element(driver, Control("Companylookup", "EnterpriseSales")).Click();
            Element(driver, Control("companyinputvalue", "EnterpriseSales")).SendKeys(Accountname);
            ThinkTime(3);
            WaitUntil(driver, Control("CompanydropValue", "Accounts"), 360);
            Element(driver, Control("CompanydropValue", "Accounts")).Click();
            ThinkTime(3);
            if (Elements(driver, Control("RecentAccount", Accountname, "Opportunity")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Linked Account Selected", "Contact");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Linked Account not Selected", "Conact");
                Assert.Fail("Recent Contact not Selected");
            }
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Accountname entered", "Accountname entered");

            //Verifying Contact
            WaitUntil(driver, Control("Contactlookup", "Opportunity"), 100);
            MoveToElement(driver, Control("Contactlookup", "Opportunity"));
            Element(driver, Control("Contactlookup", "Opportunity")).Click();
            MoveToElement(driver, Control("Contactsearch", "Opportunity"));
            Element(driver, Control("Contactsearch", "Opportunity")).Click();

            WaitUntil(driver, Control("ITSalesCustomer", "Opportunity"), 360);
            MoveToElement(driver, Control("ITSalesCustomer", "Opportunity"));
            Element(driver, Control("ITSalesCustomer", "Opportunity")).Click();
            ThinkTime(2);

            if (Elements(driver, Control("RecentContact", contact, "Opportunity")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Recent Contact Selected", "Contact");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Recent Contact not Selected", "Conact");
                Assert.Fail("Recent Contact not Selected");
            }

            ThinkTime(5);
            scrollDownOpportunityEnterprise(driver, testInReport, testDataIteration, testName);

            ThinkTime(2);
            WaitUntil(driver, Control("CountryInput", "Accounts"), 30);
            MoveToElement(driver, Control("CountryInput", "Accounts"));
            Element(driver, Control("CountryInput", "Accounts")).SendKeys(Keys.Control + "a");
            Element(driver, Control("CountryInput", "Accounts")).SendKeys(Keys.Delete);
            Element(driver, Control("CountryInput", "Accounts")).SendKeys("united kingdom");
            ThinkTime(2);
            WaitUntil(driver, Control("CountrySelect", "Accounts"), 30);
            MoveToElement(driver, Control("CountrySelect", "Accounts"));
            Element(driver, Control("CountrySelect", "Accounts")).Click();
            ThinkTime(3);

            scrollDownOpportunityEnterprise(driver, testInReport, testDataIteration, testName);
            scrollDownOpportunityEnterprise(driver, testInReport, testDataIteration, testName);

            //Add new Channel
            ThinkTime(2);
            WaitUntil(driver, Control("NewChannelInput", "Opportunity"), 30);
            MoveToElement(driver, Control("NewChannelInput", "Opportunity"));
            ThinkTime(2);
            Element(driver, Control("NewChannelInput", "Opportunity")).SendKeys(Keys.Control + "a");
            Element(driver, Control("NewChannelInput", "Opportunity")).SendKeys(Keys.Delete);
            ThinkTime(3);
            Element(driver, Control("NewChannelInput", "Opportunity")).SendKeys(Channel);
            ThinkTime(2);

            WaitUntil(driver, Control("NewChannelSelect", Channel, "Generic"), 30);
            MoveToElement(driver, Control("NewChannelSelect", Channel, "Generic"));
            Element(driver, Control("NewChannelSelect", Channel, "Generic")).Click();

            //Add new MajorSource
            ThinkTime(2);
            WaitUntil(driver, Control("NewMajorSourceInput", "Opportunity"), 100);
            MoveToElement(driver, Control("NewMajorSourceInput", "Opportunity"));
            ThinkTime(3);
            Element(driver, Control("NewMajorSourceInput", "Opportunity")).SendKeys(Keys.Control + "a");
            Element(driver, Control("NewMajorSourceInput", "Opportunity")).SendKeys(Keys.Delete);

            ThinkTime(2);
            Element(driver, Control("NewMajorSourceInput", "Opportunity")).SendKeys(MajorSource);
            ThinkTime(2);
            WaitUntil(driver, Control("NewMajorSourceSelect", MajorSource, "Generic"), 30);
            MoveToElement(driver, Control("NewMajorSourceSelect", MajorSource, "Generic"));
            Element(driver, Control("NewMajorSourceSelect", MajorSource, "Generic")).Click();

            //Add new MinorSource
            ThinkTime(2);
            WaitUntil(driver, Control("NewMinorSourceInput", "Opportunity"), 360);
            MoveToElement(driver, Control("NewMinorSourceInput", "Opportunity"));
            Element(driver, Control("NewMinorSourceInput", "Opportunity")).SendKeys(Keys.Control + "a");
            Element(driver, Control("NewMinorSourceInput", "Opportunity")).SendKeys(Keys.Delete);

            ThinkTime(2);
            Element(driver, Control("NewMinorSourceInput", "Opportunity")).SendKeys(MinorSource);
            ThinkTime(2);
            WaitUntil(driver, Control("Languagedropdown", "EnterpriseSales"), 60);
            MoveToElement(driver, Control("Languagedropdown", "EnterpriseSales"));
            Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();

            saveFooter(driver, testInReport, testName, testDataIteration);
            ThinkTime(4);
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Opportunity Created Successfully", "New Opportunity Verification");
            ThinkTime(4);

        }

        public void CreateNewOpportunityExistingcontactandAccount(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string Channel, string MajorSource, string MinorSource, string contact, string account, string RecomendedBussinessCenre)
        {
            ThinkTime(3);
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            //create new contact
            WaitUntil(driver, Control("Contactlookup", "Opportunity"), 360);
            MoveToElement(driver, Control("Contactlookup", "Opportunity"));
            Element(driver, Control("Contactlookup", "Opportunity")).Click();
            ThinkTime(3);
            Element(driver, Control("Contactlookup", "Opportunity")).SendKeys(contact);
            ThinkTime(3);
            WaitUntil(driver, Control("ITSalesCustomer", "Opportunity"), 360);
            ThinkTime(2);
            MoveToElement(driver, Control("ITSalesCustomer", "Opportunity"));
            Element(driver, Control("ITSalesCustomer", "Opportunity")).Click();
            ThinkTime(2);
            //scrollDownOpportunityEnterprise(driver, testInReport, testDataIteration, testName);
            //if (Elements(driver, Control("CloseBrokerbutton", "EnterpriseSales"))>0)
            //{
            //    MoveToElement(driver, Control("CloseBrokerbutton", "EnterpriseSales"));
            //    Element(driver, Control("CloseBrokerbutton", "EnterpriseSales")).Click();
            //}

            //WaitUntil(driver, Control("NewAccountInput", "Opportunity"), 360);
            //MoveToElement(driver, Control("NewAccountInput", "Opportunity"));
            //Element(driver, Control("NewAccountInput", "Opportunity")).Click();

            //WaitUntil(driver, Control("NewAccountButton", "Opportunity"), 30);
            //MoveToElement(driver, Control("NewAccountButton", "Opportunity"));
            //Element(driver, Control("NewAccountButton", "Opportunity")).Click();

            //ThinkTime(5);
            //WaitUntil(driver, Control("NewCompanyNameInput", "Opportunity"), 30);
            //MoveToElement(driver, Control("NewCompanyNameInput", "Opportunity"));
            //Element(driver, Control("NewCompanyNameInput", "Opportunity")).SendKeys(account);

            //MoveToElement(driver, Control("NewContactSaveButton", "Opportunity"));
            //Element(driver, Control("NewContactSaveButton", "Opportunity")).Click();

            //ThinkTime(3);


            scrollDownOpportunityEnterprise(driver, testInReport, testDataIteration, testName);

            ThinkTime(1);
            WaitUntil(driver, Control("CountryInput", "Accounts"), 30);
            MoveToElement(driver, Control("CountryInput", "Accounts"));
            Element(driver, Control("CountryInput", "Accounts")).SendKeys(Keys.Control + "a");
            Element(driver, Control("CountryInput", "Accounts")).SendKeys(Keys.Delete);
            Element(driver, Control("CountryInput", "Accounts")).SendKeys("united kingdom");
            ThinkTime(2);
            WaitUntil(driver, Control("CountrySelect", "Accounts"), 30);
            MoveToElement(driver, Control("CountrySelect", "Accounts"));
            Element(driver, Control("CountrySelect", "Accounts")).Click();
            ThinkTime(3);
            scrollDownOpportunityEnterprise(driver, testInReport, testDataIteration, testName);
            ThinkTime(2);

            // Recommended Business centre
            WaitUntil(driver, Control("RecomentedBussinessCentreInputButton", "Opportunity"), 360);
            MoveToElement(driver, Control("RecomentedBussinessCentreInputButton", "Opportunity"));
            ThinkTime(2);
            Element(driver, Control("RecomentedBussinessCentreInputButton", "Opportunity")).SendKeys(Keys.Control + "a");
            Element(driver, Control("RecomentedBussinessCentreInputButton", "Opportunity")).SendKeys(Keys.Delete);

            ThinkTime(3);
            Element(driver, Control("RecomentedBussinessCentreInputButton", "Opportunity")).SendKeys(RecomendedBussinessCenre);

            ThinkTime(5);
            WaitUntil(driver, Control("Languagedropdown", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("Languagedropdown", "EnterpriseSales"));
            Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();
            ThinkTime(3);
            // Number of people
            WaitUntil(driver, Control("Numberofpeople", "Opportunity"), 360);
            MoveToElement(driver, Control("Numberofpeople", "Opportunity"));
            ActionsClick(driver, Control("Numberofpeople", "Opportunity"));
            ThinkTime(3);
            Element(driver, Control("Numberofpeople", "Opportunity")).SendKeys("8");
            ThinkTime(3);
            // scrollDownOpportunityEnterprise(driver, testInReport, testDataIteration, testName);


            scrollDownOpportunityEnterprise(driver, testInReport, testDataIteration, testName);
            scrollDownOpportunityEnterprise(driver, testInReport, testDataIteration, testName);

            //Add new Channel
            ThinkTime(6);
            WaitUntil(driver, Control("NewChannelInput", "Opportunity"), 30);
            MoveToElement(driver, Control("NewChannelInput", "Opportunity"));
            ThinkTime(2);
            Element(driver, Control("NewChannelInput", "Opportunity")).SendKeys(Keys.Control + "a");
            Element(driver, Control("NewChannelInput", "Opportunity")).SendKeys(Keys.Delete);
            ThinkTime(3);
            Element(driver, Control("NewChannelInput", "Opportunity")).SendKeys(Channel);
            ThinkTime(8);
            WaitUntil(driver, Control("NewChannelSelect", Channel, "Generic"), 30);
            MoveToElement(driver, Control("NewChannelSelect", Channel, "Generic"));
            ThinkTime(3);

            Element(driver, Control("NewChannelSelect", Channel, "Generic")).Click();

            //Add new MajorSource
            WaitUntil(driver, Control("NewMajorSourceInput", "Opportunity"), 360);
            MoveToElement(driver, Control("NewMajorSourceInput", "Opportunity"));
            ThinkTime(3);
            Element(driver, Control("NewMajorSourceInput", "Opportunity")).SendKeys(Keys.Control + "a");
            Element(driver, Control("NewMajorSourceInput", "Opportunity")).SendKeys(Keys.Delete);

            ThinkTime(2);
            Element(driver, Control("NewMajorSourceInput", "Opportunity")).SendKeys(MajorSource);
            ThinkTime(2);
            WaitUntil(driver, Control("NewMajorSourceSelect", MajorSource, "Generic"), 30);
            MoveToElement(driver, Control("NewMajorSourceSelect", MajorSource, "Generic"));
            ThinkTime(2);
            Element(driver, Control("NewMajorSourceSelect", MajorSource, "Generic")).Click();
            ThinkTime(2);


            //Add new MinorSource
            WaitUntil(driver, Control("NewMinorSourceInput", "Opportunity"), 360);
            MoveToElement(driver, Control("NewMinorSourceInput", "Opportunity"));
            Element(driver, Control("NewMinorSourceInput", "Opportunity")).SendKeys(Keys.Control + "a");
            Element(driver, Control("NewMinorSourceInput", "Opportunity")).SendKeys(Keys.Delete);

            ThinkTime(2);
            Element(driver, Control("NewMinorSourceInput", "Opportunity")).SendKeys(MinorSource);
            ThinkTime(5);
            WaitUntil(driver, Control("NewMinorSourceSelect", MinorSource, "Generic"), 30);
            MoveToElement(driver, Control("NewMinorSourceSelect", MinorSource, "Generic"));
            Element(driver, Control("NewMinorSourceSelect", MinorSource, "Generic")).Click();
            ThinkTime(3);


            saveFooter(driver, testInReport, testName, testDataIteration);
            ThinkTime(8);
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Opportunity Created Successfully", "New Opportunity Verification");
            ThinkTime(15);



        }
        public string CreateNewcontactReq(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string RecomendedBussinessCenre, string language, string email)
        {

            string Y1 = DateTime.Now.ToString("MMMM d");
            string Y2 = DateTime.Now.ToString("yyyy");
            string Y3 = Y1 + ", " + Y2;
            Console.WriteLine(Y1 + Y2);
            string Date = DateTime.Today.ToString("dd-MM-yyyy");
            DateTime Now = DateTime.Now;
            string Time = Date + Convert.ToString(Now.Hour) + Convert.ToString(Now.Millisecond);

            string Contact = "AutomatContact" + Time;
            string Company = "AutomatCompany" + Time;
            ThinkTime(2);
            WaitUntil(driver, Control("NewButn", "Opportunity"), 60);
            MoveToElement(driver, Control("NewButn", "Opportunity"));
            Element(driver, Control("NewButn", "Opportunity")).Click();
            ThinkTime(2);
            //Lastname
            ThinkTime(2);
            WaitUntil(driver, Control("NewContactLName", "Contacts"), 30);
            MoveToElement(driver, Control("NewContactLName", "Contacts"));
            Element(driver, Control("NewContactLName", "Contacts")).Click();
            ThinkTime(2);
            Element(driver, Control("NewContactLName", "Contacts")).SendKeys(Contact);
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Lastname added", "Lastname added");

            //Company Account
            ThinkTime(2);
            WaitUntil(driver, Control("ITSalesCompanyAccountInput", "ITSales"), 30);
            Element(driver, Control("ITSalesCompanyAccountInput", "ITSales")).Click();


            WaitUntil(driver, Control("NewAccountButton", "Opportunity"), 60);
            MoveToElement(driver, Control("NewAccountButton", "Opportunity"));
            Element(driver, Control("NewAccountButton", "Opportunity")).Click();

            ThinkTime(5);
            WaitUntil(driver, Control("AccountNameInput", "Opportunity"), 180);
            Element(driver, Control("AccountNameInput", "Opportunity")).Click();
            Element(driver, Control("AccountNameInput", "Opportunity")).SendKeys(Company);

            WaitUntil(driver, Control("ContactSaveButton", "Opportunity"), 180);
            Element(driver, Control("ContactSaveButton", "Opportunity")).Click();

            ThinkTime(3);
            saveFooter(driver, testInReport, testName, testDataIteration);
            return Contact;
        }

        public string CreateNewcontactOpportunity(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string RecomendedBussinessCenre, string language, string email)
        {

            string Y1 = DateTime.Now.ToString("MMMM d");
            string Y2 = DateTime.Now.ToString("yyyy");
            string Y3 = Y1 + ", " + Y2;
            Console.WriteLine(Y1 + Y2);
            string Date = DateTime.Today.ToString("dd-MM-yyyy");
            DateTime Now = DateTime.Now;
            string Time = Date + Convert.ToString(Now.Hour) + Convert.ToString(Now.Millisecond);

            string Contact = "AutomatContact" + Time;
            string Company = "AutomatCompany" + Time;

            ThinkTime(6);
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);


            ThinkTime(2);
            WaitUntil(driver, Control("NewButn", "Opportunity"), 60);
            MoveToElement(driver, Control("NewButn", "Opportunity"));
            Element(driver, Control("NewButn", "Opportunity")).Click();



            //create new contact.
            ThinkTime(2);
            WaitUntil(driver, Control("NewContactInput", "Opportunity"), 90);
            MoveToElement(driver, Control("NewContactInput", "Opportunity"));
            JSClick(driver, Control("NewContactInput", "Opportunity"));

            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            ThinkTime(2);
            WaitUntil(driver, Control("NewContactButton", "Opportunity"), 360);
            MoveToElement(driver, Control("NewContactButton", "Opportunity"));
            Element(driver, Control("NewContactButton", "Opportunity")).Click();



            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            ThinkTime(2);
            WaitUntil(driver, Control("NewContactLname", "Opportunity"), 60);
            MoveToElement(driver, Control("NewContactLname", "Opportunity"));
            Element(driver, Control("NewContactLname", "Opportunity")).Click();
            Element(driver, Control("NewContactLname", "Opportunity")).SendKeys(Keys.Control + "a");
            Element(driver, Control("NewContactLname", "Opportunity")).SendKeys(Keys.Delete);
            Element(driver, Control("NewContactLname", "Opportunity")).SendKeys(Contact);
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            ThinkTime(2);



            WaitUntil(driver, Control("NewLanguageInput", "Opportunity"), 360);
            MoveToElement(driver, Control("NewLanguageInput", "Opportunity"));
            Element(driver, Control("NewLanguageInput", "Opportunity")).Click();
            Element(driver, Control("NewLanguageInput", "Opportunity")).SendKeys(Keys.Control + "a");
            Element(driver, Control("NewLanguageInput", "Opportunity")).SendKeys(Keys.Delete);
            Element(driver, Control("NewLanguageInput", "Opportunity")).Clear();

            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            ThinkTime(2);
            WaitUntil(driver, Control("NewLanguageInput", "Opportunity"), 60);
            MoveToElement(driver, Control("NewLanguageInput", "Opportunity"));
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            ThinkTime(3);
            Element(driver, Control("NewLanguageInput", "Opportunity")).Click();
            Element(driver, Control("NewLanguageInput", "Opportunity")).SendKeys(Keys.Control + "a");
            Element(driver, Control("NewLanguageInput", "Opportunity")).SendKeys(Keys.Delete);
            Element(driver, Control("NewLanguageInput", "Opportunity")).SendKeys(language);
            ThinkTime(2);
            WaitUntil(driver, Control("NewLanguageSelect", "Opportunity"), 60);
            MoveToElement(driver, Control("NewLanguageSelect", "Opportunity"));
            Element(driver, Control("NewLanguageSelect", "Opportunity")).Click();


            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            Element(driver, Control("Contactemailfield", "36.1_Dashboard")).Click();
            Element(driver, Control("Contactemailfield", "36.1_Dashboard")).SendKeys(Keys.Control + "a");
            Element(driver, Control("Contactemailfield", "36.1_Dashboard")).SendKeys(Keys.Delete);
            ThinkTime(3);
            Element(driver, Control("Contactemailfield", "36.1_Dashboard")).SendKeys(email);

            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            ThinkTime(2);
            WaitUntil(driver, Control("MobilePhone", "CommonObj"), 60);
            Element(driver, Control("MobilePhone", "CommonObj")).Click();
            Element(driver, Control("MobilePhone", "CommonObj")).SendKeys(Keys.Control + "a");
            Element(driver, Control("MobilePhone", "CommonObj")).SendKeys(Keys.Delete);
            ThinkTime(3);
            Element(driver, Control("MobilePhone", "CommonObj")).SendKeys("+47566235232");
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            ThinkTime(2);
            WaitUntil(driver, Control("Quickcreatesave", "Opportunity"), 60);
            ThinkTime(2);
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            MoveToElement(driver, Control("Quickcreatesave", "Opportunity"));
            Element(driver, Control("Quickcreatesave", "Opportunity")).Click();


            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            scrollDownOpportunityEnterprise(driver, testInReport, testName, testDataIteration);
            ThinkTime(2);
            // Number of people
            WaitUntil(driver, Control("Numberofpeople", "Opportunity"), 100);
            MoveToElement(driver, Control("Numberofpeople", "Opportunity"));
            ActionsClick(driver, Control("Numberofpeople", "Opportunity"));
            Element(driver, Control("Numberofpeople", "Opportunity")).SendKeys("13");
            ThinkTime(2);

            //// Number of people
            //ThinkTime(2);
            //WaitUntil(driver, Control("Numberofpeople", "Opportunity"), 80);
            //    MoveToElement(driver, Control("Numberofpeople", "Opportunity"));
            //    ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            //    Element(driver, Control("Numberofpeople", "Opportunity")).Click();
            //    ThinkTime(2);
            //    Element(driver, Control("Numberofpeople", "Opportunity")).Click();
            //    Element(driver, Control("Numberofpeople", "Opportunity")).SendKeys(Keys.Control + "a");
            //    Element(driver, Control("Numberofpeople", "Opportunity")).SendKeys(Keys.Delete);
            //    Element(driver, Control("Numberofpeople", "Opportunity")).SendKeys("13");

            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);


            ThinkTime(2);
            //    //Create new account.
            //    //scrollDownOpportunityEnterprise(driver, testInReport, testName, testDataIteration);
            //    WaitUntil(driver, Control("NewAccountInput", "Opportunity"), 360);
            //    MoveToElement(driver, Control("NewAccountInput", "Opportunity"));
            //    Element(driver, Control("NewAccountInput", "Opportunity")).Click();
            //    ThinkTime(2);
            //    WaitUntil(driver, Control("NewAccountButton", "Opportunity"), 60);
            //    MoveToElement(driver, Control("NewAccountButton", "Opportunity"));
            //    Element(driver, Control("NewAccountButton", "Opportunity")).Click();

            //ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            //ThinkTime(2);
            //    WaitUntil(driver, Control("NewCompanyNameInput", "Opportunity"), 60);
            //    MoveToElement(driver, Control("NewCompanyNameInput", "Opportunity"));
            //    Element(driver, Control("NewCompanyNameInput", "Opportunity")).Click();
            //    Element(driver, Control("NewCompanyNameInput", "Opportunity")).SendKeys(Keys.Control + "a");
            //    Element(driver, Control("NewCompanyNameInput", "Opportunity")).SendKeys(Keys.Delete);
            //    Element(driver, Control("NewCompanyNameInput", "Opportunity")).SendKeys(Company);
            //    ThinkTime(2);
            //ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            //MoveToElement(driver, Control("NewContactSaveButton", "Opportunity"));
            //    Element(driver, Control("NewContactSaveButton", "Opportunity")).Click();

            //    ThinkTime(3);
            //ScriptErrorExcep(driver, testInReport, testName, testDataIteration);

            ////New Start Date


            //SelectOpportunityTab(driver, testInReport, testName, testDataIteration, "Summary");
            //    ThinkTime(2);
            //    WaitUntil(driver, Control("DatePickerViewButton", "Opportunity"), 60);
            //    MoveToElement(driver, Control("DatePickerViewButton", "Opportunity"));
            //    Element(driver, Control("DatePickerViewButton", "Opportunity")).Click();

            //    ThinkTime(2);
            //    WaitUntil(driver, Control("NewStartDate", Y3, "Opportunity"), 60);

            //    MoveToElement(driver, Control("NewStartDate", Y3, "Opportunity"));
            //    Element(driver, Control("NewStartDate", Y3, "Opportunity")).Click();
            //ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            scrollDownOpportunityEnterprise(driver, testInReport, testName, testDataIteration);

            ThinkTime(2);
            WaitUntil(driver, Control("RecomentedBussinessCentreInputButton", "Opportunity"), 60);
            MoveToElement(driver, Control("RecomentedBussinessCentreInputButton", "Opportunity"));
            Element(driver, Control("RecomentedBussinessCentreInputButton", "Opportunity")).Click();
            Element(driver, Control("RecomentedBussinessCentreInputButton", "Opportunity")).SendKeys(Keys.Control + "a");
            Element(driver, Control("RecomentedBussinessCentreInputButton", "Opportunity")).SendKeys(Keys.Delete);
            Element(driver, Control("RecomentedBussinessCentreInputButton", "Opportunity")).SendKeys(RecomendedBussinessCenre);
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            ThinkTime(2);
            WaitUntil(driver, Control("Languagedropdown", "EnterpriseSales"), 100);
            MoveToElement(driver, Control("Languagedropdown", "EnterpriseSales"));
            Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);


            //scrollDownOpportunityEnterprise(driver, testInReport, testName, testDataIteration);
            scrollDownOpportunity(driver, testInReport, testName, testDataIteration);
            //scrollDownOpportunity(driver, testInReport, testName, testDataIteration);


            //New Channel
            ThinkTime(2);
            WaitUntil(driver, Control("NewChannelInput", "Opportunity"), 30);
            MoveToElement(driver, Control("NewChannelInput", "Opportunity"));

            Element(driver, Control("NewChannelInput", "Opportunity")).Click();
            Element(driver, Control("NewChannelInput", "Opportunity")).SendKeys(Keys.Control + "a");
            Element(driver, Control("NewChannelInput", "Opportunity")).SendKeys(Keys.Delete);

            Element(driver, Control("NewChannelInput", "Opportunity")).SendKeys("CAM");
            ThinkTime(2);

            WaitUntil(driver, Control("NewChannelSelect", "CAM", "Generic"), 30);
            MoveToElement(driver, Control("NewChannelSelect", "CAM", "Generic"));


            Element(driver, Control("NewChannelSelect", "CAM", "Generic")).Click();
            ThinkTime(2);
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            scrollDownOpportunityEnterpriseCust(driver, testInReport, testName, testDataIteration, "300");
            //Add new MajorSource
            WaitUntil(driver, Control("NewMajorSourceInput", "Opportunity"), 360);
            MoveToElement(driver, Control("NewMajorSourceInput", "Opportunity"));
            ThinkTime(3);
            WaitUntil(driver, Control("NewMajorSourceInput", "Opportunity"), 30);
            Element(driver, Control("NewMajorSourceInput", "Opportunity")).Click();
            Element(driver, Control("NewMajorSourceInput", "Opportunity")).SendKeys(Keys.Control + "a");
            Element(driver, Control("NewMajorSourceInput", "Opportunity")).SendKeys(Keys.Delete);
            ThinkTime(2);
            Element(driver, Control("NewMajorSourceInput", "Opportunity")).SendKeys("Partnerships");
            ThinkTime(2);
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            WaitUntil(driver, Control("NewMajorSourceSelect", "Partnerships", "Generic"), 30);
            MoveToElement(driver, Control("NewMajorSourceSelect", "Partnerships", "Generic"));
            ThinkTime(2);
            Element(driver, Control("NewMajorSourceSelect", "Partnerships", "Generic")).Click();
            ThinkTime(2);
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);

            //Add new MinorSource
            WaitUntil(driver, Control("NewMinorSourceInput", "Opportunity"), 360);
            MoveToElement(driver, Control("NewMinorSourceInput", "Opportunity"));
            Element(driver, Control("NewMinorSourceInput", "Opportunity")).Click();
            Element(driver, Control("NewMinorSourceInput", "Opportunity")).SendKeys(Keys.Control + "a");
            Element(driver, Control("NewMinorSourceInput", "Opportunity")).SendKeys(Keys.Delete);

            ThinkTime(2);
            Element(driver, Control("NewMinorSourceInput", "Opportunity")).SendKeys("Hotels");
            ThinkTime(2);
            WaitUntil(driver, Control("NewMinorSourceSelect", "Hotels", "Generic"), 30);
            MoveToElement(driver, Control("NewMinorSourceSelect", "Hotels", "Generic"));
            Element(driver, Control("NewMinorSourceSelect", "Hotels", "Generic")).Click();
            ThinkTime(3);
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);

            saveFooter(driver, testInReport, testName, testDataIteration);
            ThinkTime(2);
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Opportunity Created Successfully", "New Opportunity Verification");
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);

            return Contact;
        }

        public string CreateNewcontactOpportunityWithBusPh(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string RecomendedBussinessCenre, string language, string email, string BusPhone)
        {

            string Y1 = DateTime.Now.ToString("MMMM d");
            string Y2 = DateTime.Now.ToString("yyyy");
            string Y3 = Y1 + ", " + Y2;
            Console.WriteLine(Y1 + Y2);
            string Date = DateTime.Today.ToString("dd-MM-yyyy");
            DateTime Now = DateTime.Now;
            string Time = Date + Convert.ToString(Now.Hour) + Convert.ToString(Now.Millisecond);

            string Contact = "AutomatContact" + Time;
            string Company = "AutomatCompany" + Time;

            ThinkTime(6);
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);


            ThinkTime(2);
            WaitUntil(driver, Control("NewButn", "Opportunity"), 60);
            MoveToElement(driver, Control("NewButn", "Opportunity"));
            Element(driver, Control("NewButn", "Opportunity")).Click();



            //create new contact.
            ThinkTime(2);
            WaitUntil(driver, Control("NewContactInput", "Opportunity"), 90);
            MoveToElement(driver, Control("NewContactInput", "Opportunity"));
            JSClick(driver, Control("NewContactInput", "Opportunity"));

            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            ThinkTime(2);
            WaitUntil(driver, Control("NewContactButton", "Opportunity"), 360);
            MoveToElement(driver, Control("NewContactButton", "Opportunity"));
            Element(driver, Control("NewContactButton", "Opportunity")).Click();



            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            ThinkTime(2);
            WaitUntil(driver, Control("NewContactLname", "Opportunity"), 60);
            MoveToElement(driver, Control("NewContactLname", "Opportunity"));
            Element(driver, Control("NewContactLname", "Opportunity")).Click();
            Element(driver, Control("NewContactLname", "Opportunity")).SendKeys(Keys.Control + "a");
            Element(driver, Control("NewContactLname", "Opportunity")).SendKeys(Keys.Delete);
            Element(driver, Control("NewContactLname", "Opportunity")).SendKeys(Contact);
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            ThinkTime(2);



            WaitUntil(driver, Control("NewLanguageInput", "Opportunity"), 360);
            MoveToElement(driver, Control("NewLanguageInput", "Opportunity"));
            Element(driver, Control("NewLanguageInput", "Opportunity")).Click();
            Element(driver, Control("NewLanguageInput", "Opportunity")).SendKeys(Keys.Control + "a");
            Element(driver, Control("NewLanguageInput", "Opportunity")).SendKeys(Keys.Delete);
            Element(driver, Control("NewLanguageInput", "Opportunity")).Clear();

            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            ThinkTime(2);
            WaitUntil(driver, Control("NewLanguageInput", "Opportunity"), 60);
            MoveToElement(driver, Control("NewLanguageInput", "Opportunity"));
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            ThinkTime(3);
            Element(driver, Control("NewLanguageInput", "Opportunity")).Click();
            Element(driver, Control("NewLanguageInput", "Opportunity")).SendKeys(Keys.Control + "a");
            Element(driver, Control("NewLanguageInput", "Opportunity")).SendKeys(Keys.Delete);
            Element(driver, Control("NewLanguageInput", "Opportunity")).SendKeys(language);
            ThinkTime(2);
            WaitUntil(driver, Control("NewLanguageSelect", "Opportunity"), 60);
            MoveToElement(driver, Control("NewLanguageSelect", "Opportunity"));
            Element(driver, Control("NewLanguageSelect", "Opportunity")).Click();


            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            Element(driver, Control("Contactemailfield", "36.1_Dashboard")).Click();
            Element(driver, Control("Contactemailfield", "36.1_Dashboard")).SendKeys(Keys.Control + "a");
            Element(driver, Control("Contactemailfield", "36.1_Dashboard")).SendKeys(Keys.Delete);
            ThinkTime(3);
            Element(driver, Control("Contactemailfield", "36.1_Dashboard")).SendKeys(email);

            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            ThinkTime(2);
            WaitUntil(driver, Control("MobilePhone", "CommonObj"), 60);
            Element(driver, Control("MobilePhone", "CommonObj")).Click();
            Element(driver, Control("MobilePhone", "CommonObj")).SendKeys(Keys.Control + "a");
            Element(driver, Control("MobilePhone", "CommonObj")).SendKeys(Keys.Delete);
            ThinkTime(3);
            Element(driver, Control("MobilePhone", "CommonObj")).SendKeys("+47566235232");
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            ThinkTime(2);
            WaitUntil(driver, Control("BusPhone", "CommonObj"), 30);
            Element(driver, Control("BusPhone", "CommonObj")).Click();
            Element(driver, Control("BusPhone", "CommonObj")).SendKeys(BusPhone);
            ThinkTime(2);
            WaitUntil(driver, Control("Quickcreatesave", "Opportunity"), 60);
            ThinkTime(2);
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            MoveToElement(driver, Control("Quickcreatesave", "Opportunity"));
            Element(driver, Control("Quickcreatesave", "Opportunity")).Click();


            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);



            // Number of people
            ThinkTime(2);
            WaitUntil(driver, Control("Numberofpeople", "Opportunity"), 80);
            MoveToElement(driver, Control("Numberofpeople", "Opportunity"));
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            Element(driver, Control("Numberofpeople", "Opportunity")).Click();
            ThinkTime(2);
            Element(driver, Control("Numberofpeople", "Opportunity")).Click();
            Element(driver, Control("Numberofpeople", "Opportunity")).SendKeys(Keys.Control + "a");
            Element(driver, Control("Numberofpeople", "Opportunity")).SendKeys(Keys.Delete);
            Element(driver, Control("Numberofpeople", "Opportunity")).SendKeys("13");

            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);


            ThinkTime(2);
            //Create new account.
            //scrollDownOpportunityEnterprise(driver, testInReport, testName, testDataIteration);
            WaitUntil(driver, Control("NewAccountInput", "Opportunity"), 360);
            MoveToElement(driver, Control("NewAccountInput", "Opportunity"));
            Element(driver, Control("NewAccountInput", "Opportunity")).Click();
            ThinkTime(2);
            WaitUntil(driver, Control("NewAccountButton", "Opportunity"), 60);
            MoveToElement(driver, Control("NewAccountButton", "Opportunity"));
            Element(driver, Control("NewAccountButton", "Opportunity")).Click();

            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            ThinkTime(2);
            WaitUntil(driver, Control("NewCompanyNameInput", "Opportunity"), 60);
            MoveToElement(driver, Control("NewCompanyNameInput", "Opportunity"));
            Element(driver, Control("NewCompanyNameInput", "Opportunity")).Click();
            Element(driver, Control("NewCompanyNameInput", "Opportunity")).SendKeys(Keys.Control + "a");
            Element(driver, Control("NewCompanyNameInput", "Opportunity")).SendKeys(Keys.Delete);
            Element(driver, Control("NewCompanyNameInput", "Opportunity")).SendKeys(Company);
            ThinkTime(2);
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            MoveToElement(driver, Control("NewContactSaveButton", "Opportunity"));
            Element(driver, Control("NewContactSaveButton", "Opportunity")).Click();

            ThinkTime(3);
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);

            //New Start Date


            SelectOpportunityTab(driver, testInReport, testName, testDataIteration, "Summary");
            ThinkTime(2);
            WaitUntil(driver, Control("DatePickerViewButton", "Opportunity"), 60);
            MoveToElement(driver, Control("DatePickerViewButton", "Opportunity"));
            Element(driver, Control("DatePickerViewButton", "Opportunity")).Click();

            ThinkTime(2);
            WaitUntil(driver, Control("NewStartDate", Y3, "Opportunity"), 60);

            MoveToElement(driver, Control("NewStartDate", Y3, "Opportunity"));
            Element(driver, Control("NewStartDate", Y3, "Opportunity")).Click();
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            scrollDownOpportunityEnterprise(driver, testInReport, testName, testDataIteration);

            ThinkTime(2);
            WaitUntil(driver, Control("RecomentedBussinessCentreInputButton", "Opportunity"), 60);
            MoveToElement(driver, Control("RecomentedBussinessCentreInputButton", "Opportunity"));
            Element(driver, Control("RecomentedBussinessCentreInputButton", "Opportunity")).Click();
            Element(driver, Control("RecomentedBussinessCentreInputButton", "Opportunity")).SendKeys(Keys.Control + "a");
            Element(driver, Control("RecomentedBussinessCentreInputButton", "Opportunity")).SendKeys(Keys.Delete);
            Element(driver, Control("RecomentedBussinessCentreInputButton", "Opportunity")).SendKeys(RecomendedBussinessCenre);
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            ThinkTime(2);
            WaitUntil(driver, Control("Languagedropdown", "EnterpriseSales"), 100);
            MoveToElement(driver, Control("Languagedropdown", "EnterpriseSales"));
            Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);


            //scrollDownOpportunityEnterprise(driver, testInReport, testName, testDataIteration);
            scrollDownOpportunity(driver, testInReport, testName, testDataIteration);
            //scrollDownOpportunity(driver, testInReport, testName, testDataIteration);


            //New Channel
            ThinkTime(2);
            WaitUntil(driver, Control("NewChannelInput", "Opportunity"), 30);
            MoveToElement(driver, Control("NewChannelInput", "Opportunity"));

            Element(driver, Control("NewChannelInput", "Opportunity")).Click();
            Element(driver, Control("NewChannelInput", "Opportunity")).SendKeys(Keys.Control + "a");
            Element(driver, Control("NewChannelInput", "Opportunity")).SendKeys(Keys.Delete);

            Element(driver, Control("NewChannelInput", "Opportunity")).SendKeys("CAM");
            ThinkTime(2);

            WaitUntil(driver, Control("NewChannelSelect", "CAM", "Generic"), 30);
            MoveToElement(driver, Control("NewChannelSelect", "CAM", "Generic"));


            Element(driver, Control("NewChannelSelect", "CAM", "Generic")).Click();
            ThinkTime(2);
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            scrollDownOpportunityEnterpriseCust(driver, testInReport, testName, testDataIteration, "300");
            //Add new MajorSource
            WaitUntil(driver, Control("NewMajorSourceInput", "Opportunity"), 360);
            MoveToElement(driver, Control("NewMajorSourceInput", "Opportunity"));
            ThinkTime(3);
            WaitUntil(driver, Control("NewMajorSourceInput", "Opportunity"), 30);
            Element(driver, Control("NewMajorSourceInput", "Opportunity")).Click();
            Element(driver, Control("NewMajorSourceInput", "Opportunity")).SendKeys(Keys.Control + "a");
            Element(driver, Control("NewMajorSourceInput", "Opportunity")).SendKeys(Keys.Delete);
            ThinkTime(2);
            Element(driver, Control("NewMajorSourceInput", "Opportunity")).SendKeys("Partnerships");
            ThinkTime(2);
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            WaitUntil(driver, Control("NewMajorSourceSelect", "Partnerships", "Generic"), 30);
            MoveToElement(driver, Control("NewMajorSourceSelect", "Partnerships", "Generic"));
            ThinkTime(2);
            Element(driver, Control("NewMajorSourceSelect", "Partnerships", "Generic")).Click();
            ThinkTime(2);
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);

            //Add new MinorSource
            WaitUntil(driver, Control("NewMinorSourceInput", "Opportunity"), 360);
            MoveToElement(driver, Control("NewMinorSourceInput", "Opportunity"));
            Element(driver, Control("NewMinorSourceInput", "Opportunity")).Click();
            Element(driver, Control("NewMinorSourceInput", "Opportunity")).SendKeys(Keys.Control + "a");
            Element(driver, Control("NewMinorSourceInput", "Opportunity")).SendKeys(Keys.Delete);

            ThinkTime(2);
            Element(driver, Control("NewMinorSourceInput", "Opportunity")).SendKeys("Hotels");
            ThinkTime(2);
            WaitUntil(driver, Control("NewMinorSourceSelect", "Hotels", "Generic"), 30);
            MoveToElement(driver, Control("NewMinorSourceSelect", "Hotels", "Generic"));
            Element(driver, Control("NewMinorSourceSelect", "Hotels", "Generic")).Click();
            ThinkTime(3);
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);

            saveFooter(driver, testInReport, testName, testDataIteration);
            ThinkTime(2);
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Opportunity Created Successfully", "New Opportunity Verification");
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);

            return Contact;
        }
        public void CreateNewOpportunityExistingcontact(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string Channel, string MajorSource, string MinorSource, string contact, string RecomendedBussinessCenre, string NoofPeople)
        {
            ThinkTime(2);

            string Y1 = DateTime.Now.ToString("MMMM d");
            string Y2 = DateTime.Now.ToString("yyyy");
            string Y3 = Y1 + ", " + Y2;
            Console.WriteLine(Y1 + Y2);

            //create new contact
            WaitUntil(driver, Control("Contactlookup", "Opportunity"), 100);
            MoveToElement(driver, Control("Contactlookup", "Opportunity"));
            Element(driver, Control("Contactlookup", "Opportunity")).Click();
            Element(driver, Control("Contactlookup", "Opportunity")).SendKeys(contact);
            ThinkTime(3);
            WaitUntil(driver, Control("ITSalesCustomer", "Opportunity"), 360);
            MoveToElement(driver, Control("ITSalesCustomer", "Opportunity"));
            Element(driver, Control("ITSalesCustomer", "Opportunity")).Click();
            ThinkTime(2);
            scrollDownOpportunityEnterprise(driver, testInReport, testDataIteration, testName);

            ThinkTime(2);
            WaitUntil(driver, Control("CountryInput", "Accounts"), 30);
            MoveToElement(driver, Control("CountryInput", "Accounts"));
            Element(driver, Control("CountryInput", "Accounts")).SendKeys(Keys.Control + "a");
            Element(driver, Control("CountryInput", "Accounts")).SendKeys(Keys.Delete);
            Element(driver, Control("CountryInput", "Accounts")).SendKeys("united kingdom");
            ThinkTime(2);
            WaitUntil(driver, Control("CountrySelect", "Accounts"), 30);
            MoveToElement(driver, Control("CountrySelect", "Accounts"));
            Element(driver, Control("CountrySelect", "Accounts")).Click();
            ThinkTime(3);
            //scrollDownOpportunityEnterprise(driver, testInReport, testDataIteration, testName);
            ThinkTime(2);

            // Recommended Business centre
            WaitUntil(driver, Control("RecomentedBussinessCentreInputButton", "Opportunity"), 100);
            MoveToElement(driver, Control("RecomentedBussinessCentreInputButton", "Opportunity"));
            ThinkTime(2);
            Element(driver, Control("RecomentedBussinessCentreInputButton", "Opportunity")).SendKeys(Keys.Control + "a");
            Element(driver, Control("RecomentedBussinessCentreInputButton", "Opportunity")).SendKeys(Keys.Delete);

            ThinkTime(3);
            Element(driver, Control("RecomentedBussinessCentreInputButton", "Opportunity")).SendKeys(RecomendedBussinessCenre);

            ThinkTime(2);
            WaitUntil(driver, Control("Languagedropdown", "EnterpriseSales"), 60);
            MoveToElement(driver, Control("Languagedropdown", "EnterpriseSales"));
            Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();
            ThinkTime(2);
            // Number of people
            WaitUntil(driver, Control("Numberofpeople", "Opportunity"), 100);
            MoveToElement(driver, Control("Numberofpeople", "Opportunity"));
            ActionsClick(driver, Control("Numberofpeople", "Opportunity"));
            Element(driver, Control("Numberofpeople", "Opportunity")).SendKeys(NoofPeople);
            ThinkTime(2);
            // scrollDownOpportunityEnterprise(driver, testInReport, testDataIteration, testName);

            //New Start Date


            SelectOpportunityTab(driver, testInReport, testName, testDataIteration, "Summary");
            ThinkTime(2);
            WaitUntil(driver, Control("DatePickerViewButton", "Opportunity"), 60);
            MoveToElement(driver, Control("DatePickerViewButton", "Opportunity"));
            Element(driver, Control("DatePickerViewButton", "Opportunity")).Click();

            ThinkTime(2);
            WaitUntil(driver, Control("NewStartDate", Y3, "Opportunity"), 60);
            MoveToElement(driver, Control("NewStartDate", Y3, "Opportunity"));
            Element(driver, Control("NewStartDate", Y3, "Opportunity")).Click();


            scrollDownOpportunityEnterprise(driver, testInReport, testDataIteration, testName);
            scrollDownOpportunityEnterprise(driver, testInReport, testDataIteration, testName);

            //Add new Channel
            ThinkTime(2);
            WaitUntil(driver, Control("NewChannelInput", "Opportunity"), 30);
            MoveToElement(driver, Control("NewChannelInput", "Opportunity"));
            ThinkTime(2);
            Element(driver, Control("NewChannelInput", "Opportunity")).SendKeys(Keys.Control + "a");
            Element(driver, Control("NewChannelInput", "Opportunity")).SendKeys(Keys.Delete);
            ThinkTime(3);
            Element(driver, Control("NewChannelInput", "Opportunity")).SendKeys(Channel);
            ThinkTime(2);

            WaitUntil(driver, Control("NewChannelSelect", Channel, "Generic"), 30);
            MoveToElement(driver, Control("NewChannelSelect", Channel, "Generic"));
            Element(driver, Control("NewChannelSelect", Channel, "Generic")).Click();

            //Add new MajorSource
            ThinkTime(2);
            WaitUntil(driver, Control("NewMajorSourceInput", "Opportunity"), 100);
            MoveToElement(driver, Control("NewMajorSourceInput", "Opportunity"));
            ThinkTime(3);
            Element(driver, Control("NewMajorSourceInput", "Opportunity")).SendKeys(Keys.Control + "a");
            Element(driver, Control("NewMajorSourceInput", "Opportunity")).SendKeys(Keys.Delete);

            ThinkTime(2);
            Element(driver, Control("NewMajorSourceInput", "Opportunity")).SendKeys(MajorSource);
            ThinkTime(2);
            WaitUntil(driver, Control("NewMajorSourceSelect", MajorSource, "Generic"), 30);
            MoveToElement(driver, Control("NewMajorSourceSelect", MajorSource, "Generic"));
            Element(driver, Control("NewMajorSourceSelect", MajorSource, "Generic")).Click();



            //Add new MinorSource
            ThinkTime(2);
            WaitUntil(driver, Control("NewMinorSourceInput", "Opportunity"), 360);
            MoveToElement(driver, Control("NewMinorSourceInput", "Opportunity"));
            Element(driver, Control("NewMinorSourceInput", "Opportunity")).SendKeys(Keys.Control + "a");
            Element(driver, Control("NewMinorSourceInput", "Opportunity")).SendKeys(Keys.Delete);

            ThinkTime(2);
            Element(driver, Control("NewMinorSourceInput", "Opportunity")).SendKeys(MinorSource);
            ThinkTime(2);
            //WaitUntil(driver, Control("NewMinorSourceSelect", MinorSource, "Generic"), 30);
            //MoveToElement(driver, Control("NewMinorSourceSelect", MinorSource, "Generic"));
            //Element(driver, Control("NewMinorSourceSelect", MinorSource, "Generic")).Click();
            //ThinkTime(3);
            WaitUntil(driver, Control("Languagedropdown", "EnterpriseSales"), 60);
            MoveToElement(driver, Control("Languagedropdown", "EnterpriseSales"));
            Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();

            saveFooter(driver, testInReport, testName, testDataIteration);
            ThinkTime(4);
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Opportunity Created Successfully", "New Opportunity Verification");
            ThinkTime(4);



        }
        public void verifycommrequest(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(5);

            if (Elements(driver, Control("twocommrequest", "Generic")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Two communication request created", "Tour Comm request");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Two communication request not created", "Tour Comm request");
                Assert.Fail("Two communication request not created");
            }
            ThinkTime(5);
        }

        public void posttourcommrequestverify(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string requestname)
        {
            for (int i = 0; i <= 25; i++)
            {

                ThinkTime(2);
                WaitUntil(driver, Control("RefreshPage2", "CommonObj"), 30);
                Element(driver, Control("RefreshPage2", "CommonObj")).Click();
                ThinkTime(2);
                if (Elements(driver, Control("posttourcommrequestverification", requestname, "Generic")) > 0)
                {
                    break;
                }

            }
            ThinkTime(3);
            WaitUntil(driver, Control("posttourcommrequestverification", requestname, "Generic"), 30);


            if (Elements(driver, Control("posttourcommrequestverification", requestname, "Generic")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "post Tour Comm request created", "Tour Comm request");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "post Tour Comm request not created", "Tour Comm request");
                Assert.Fail("post Tour Comm request not created");
            }
        }
        public void payloadtimezoneverification(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string lc, string Bc, string timezone)
        {
            string payload = Element(driver, Control("payloadverification", "Generic")).GetAttribute("defaultValue");
            string language = lc;
            string businessphone = Bc;
            string custtimezone = timezone;
            bool languagecodecheck = payload.Contains(language);
            bool businessphonecheck = payload.Contains(businessphone);
            bool ctimezone = payload.Contains(custtimezone);
            if (languagecodecheck == true)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Language code is correct", "Language code");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Language code is wrong", "Language code");
                Assert.Fail("Language code wrong");
            }
            if (businessphonecheck == true)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Business phone is correct", "Business phone");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Business phone  is wrong", "Business phone");
                Assert.Fail("Business phone is wrong");
            }


            if (ctimezone == true)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Customer timezone details is correct", "Customer timezone");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Customer timezone  details is wrong", "Customer timezone");
                Assert.Fail("Customer timezone details is wrong");
            }
        }
        public void TourOutcomesave(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string activitytitle, string select)

        {

            ThinkTime(5);
            for (int i = 0; i <= 25; i++)
            {

                ThinkTime(2);
                WaitUntil(driver, Control("RefreshPage2", "CommonObj"), 30);
                Element(driver, Control("RefreshPage2", "CommonObj")).Click();
                ThinkTime(2);
                if (Elements(driver, Control("PhoneActivity", activitytitle, "phoneCall")) > 0)
                {
                    break;
                }

            }
            ThinkTime(2);
            WaitUntil(driver, Control("PhoneActivity", activitytitle, "phoneCall"), 30);

            if (Elements(driver, Control("PhoneActivity", activitytitle, "phoneCall")) > 0)

            {
                ThinkTime(2);


                Element(driver, Control("PhoneActivity", activitytitle, "phoneCall")).Click();

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Tour Booked email is available", "Activity");

            }
            else

            {

                AddLog(driver, testInReport, testName, testDataIteration, "Info", "No Activity Available.Please create one", "Activity");

                Assert.Fail("Activities are not  available.Please create one");



            }

            ThinkTime(15);

            WaitUntil(driver, Control("TourOutcomeButton", "Tour"), 30);

            MoveToElement(driver, Control("TourOutcomeButton", "Tour"));

            Element(driver, Control("TourOutcomeButton", "Tour")).Click();



            ThinkTime(5);

            WaitUntil(driver, Control("ArriveTour", "Tour"), 60);

            Element(driver, Control("ArriveTour", "Tour")).Click();

            ThinkTime(5);


            Select(Element(driver, Control("ArriveTour", "Tour"))).SelectByText(select);
            ThinkTime(5);

            saveFooter(driver, testInReport, testName, testDataIteration);
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
        }


        public void dialercommrequest(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(5);
            for (int i = 0; i <= 25; i++)
            {

                ThinkTime(2);
                WaitUntil(driver, Control("RefreshPage2", "CommonObj"), 30);
                Element(driver, Control("RefreshPage2", "CommonObj")).Click();
                ThinkTime(2);
                if (Elements(driver, Control("dialeronerequest", "Generic")) > 0)
                {
                    break;
                }

            }
            ThinkTime(2);
            WaitUntil(driver, Control("dialeronerequest", "Generic"), 80);
            if (Elements(driver, Control("dialeronerequest", "Generic")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Only one communication request present", "Tour Comm request");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Two communication request created", "Tour Comm request");
                Assert.Fail("Two communication request  created");
            }
            ThinkTime(5);
        }
        public void verifydialeraction(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string action)
        {
            ThinkTime(2);
            WaitUntil(driver, Control("dialeraction", action, "Generic"), 99);

            if (Elements(driver, Control("dialeraction", action, "Generic")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Dialer request updated", "Dialer request");

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Dailer request not updated", "Dialer request");
                Assert.Fail("Dailer request not updated");
            }
            ThinkTime(5);
        }
        public string verifytoursceduledate(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string Lname, string time, string Phone)
        {
            ThinkTime(4);
            string scheduledate = Element(driver, Control("userlocaltime", "Generic")).GetAttribute("Value");
            string newFormat = DateTime.ParseExact(scheduledate, "dd'.'MM'.'yyyy", CultureInfo.InvariantCulture).ToString("yyyy'/'MM'/'dd");
            return newFormat;

        }
        public void verifyconnectoption(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {

            ThinkTime(6);
            if (Elements(driver, Control("Connect", "Generic")) > 0)
            {
                VerifyAddSalesAssistConnectionDenied(driver, testInReport, testName, testDataIteration);


            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Connect button not available", "Connect option");
            }




        }

        public void ScriptErrorExcepleadpage(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)

        {
            ThinkTime(7);
            if (Element(driver, Control("ScriptDialg", "Opportunity")).Displayed)
            {
                for (int i = 0; i < 3; i++)
                {
                    Element(driver, Control("HandleScriptError1", "Opportunity")).Click();
                    ThinkTime(3);
                }

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "No Script error present", "No Script error present");
            }
        }
        public void CreateNewOpportunityExistingcontactnocenter(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string Channel, string MajorSource, string MinorSource, string contact, string NoofPeople)
        {
            ThinkTime(10);

            string Y1 = DateTime.Now.ToString("MMMM d");
            string Y2 = DateTime.Now.ToString("yyyy");
            string Y3 = Y1 + ", " + Y2;
            Console.WriteLine(Y1 + Y2);

            //create new contact
            WaitUntil(driver, Control("Contactlookup", "Opportunity"), 360);
            MoveToElement(driver, Control("Contactlookup", "Opportunity"));
            Element(driver, Control("Contactlookup", "Opportunity")).Click();
            ThinkTime(3);
            Element(driver, Control("Contactlookup", "Opportunity")).SendKeys(contact);
            ThinkTime(3);
            WaitUntil(driver, Control("ITSalesCustomer", "Opportunity"), 360);
            ThinkTime(2);
            MoveToElement(driver, Control("ITSalesCustomer", "Opportunity"));
            Element(driver, Control("ITSalesCustomer", "Opportunity")).Click();
            ThinkTime(2);
            scrollDownOpportunityEnterprise(driver, testInReport, testDataIteration, testName);

            ThinkTime(1);
            WaitUntil(driver, Control("CountryInput", "Accounts"), 30);
            MoveToElement(driver, Control("CountryInput", "Accounts"));
            Element(driver, Control("CountryInput", "Accounts")).SendKeys(Keys.Control + "a");
            Element(driver, Control("CountryInput", "Accounts")).SendKeys(Keys.Delete);
            Element(driver, Control("CountryInput", "Accounts")).SendKeys("united kingdom");
            ThinkTime(2);
            WaitUntil(driver, Control("CountrySelect", "Accounts"), 30);
            MoveToElement(driver, Control("CountrySelect", "Accounts"));
            Element(driver, Control("CountrySelect", "Accounts")).Click();
            ThinkTime(3);
            scrollDownOpportunityEnterprise(driver, testInReport, testDataIteration, testName);
            ThinkTime(4);

            // Number of people
            WaitUntil(driver, Control("Numberofpeople", "Opportunity"), 360);
            MoveToElement(driver, Control("Numberofpeople", "Opportunity"));
            ActionsClick(driver, Control("Numberofpeople", "Opportunity"));
            ThinkTime(3);
            Element(driver, Control("Numberofpeople", "Opportunity")).SendKeys(NoofPeople);
            ThinkTime(3);
            // scrollDownOpportunityEnterprise(driver, testInReport, testDataIteration, testName);

            //New Start Date
            ThinkTime(20);

            SelectOpportunityTab(driver, testInReport, testName, testDataIteration, "Summary");
            ThinkTime(1);

            MoveToElement(driver, Control("DatePickerViewButton", "Opportunity"));
            Element(driver, Control("DatePickerViewButton", "Opportunity")).Click();

            ThinkTime(7);

            MoveToElement(driver, Control("NewStartDate", Y3, "Opportunity"));
            Element(driver, Control("NewStartDate", Y3, "Opportunity")).Click();


            scrollDownOpportunityEnterprise(driver, testInReport, testDataIteration, testName);
            scrollDownOpportunityEnterprise(driver, testInReport, testDataIteration, testName);

            //Add new Channel
            ThinkTime(6);
            WaitUntil(driver, Control("NewChannelInput", "Opportunity"), 30);
            MoveToElement(driver, Control("NewChannelInput", "Opportunity"));
            ThinkTime(2);
            Element(driver, Control("NewChannelInput", "Opportunity")).SendKeys(Keys.Control + "a");
            Element(driver, Control("NewChannelInput", "Opportunity")).SendKeys(Keys.Delete);
            ThinkTime(3);
            Element(driver, Control("NewChannelInput", "Opportunity")).SendKeys(Channel);
            ThinkTime(8);

            WaitUntil(driver, Control("NewChannelSelect", Channel, "Generic"), 30);
            MoveToElement(driver, Control("NewChannelSelect", Channel, "Generic"));
            ThinkTime(3);

            Element(driver, Control("NewChannelSelect", Channel, "Generic")).Click();

            //Add new MajorSource
            WaitUntil(driver, Control("NewMajorSourceInput", "Opportunity"), 360);
            MoveToElement(driver, Control("NewMajorSourceInput", "Opportunity"));
            ThinkTime(3);
            Element(driver, Control("NewMajorSourceInput", "Opportunity")).SendKeys(Keys.Control + "a");
            Element(driver, Control("NewMajorSourceInput", "Opportunity")).SendKeys(Keys.Delete);

            ThinkTime(2);
            Element(driver, Control("NewMajorSourceInput", "Opportunity")).SendKeys(MajorSource);
            ThinkTime(2);
            WaitUntil(driver, Control("NewMajorSourceSelect", MajorSource, "Generic"), 30);
            MoveToElement(driver, Control("NewMajorSourceSelect", MajorSource, "Generic"));
            ThinkTime(2);
            Element(driver, Control("NewMajorSourceSelect", MajorSource, "Generic")).Click();
            ThinkTime(2);


            //Add new MinorSource
            WaitUntil(driver, Control("NewMinorSourceInput", "Opportunity"), 360);
            MoveToElement(driver, Control("NewMinorSourceInput", "Opportunity"));
            Element(driver, Control("NewMinorSourceInput", "Opportunity")).SendKeys(Keys.Control + "a");
            Element(driver, Control("NewMinorSourceInput", "Opportunity")).SendKeys(Keys.Delete);

            ThinkTime(2);
            Element(driver, Control("NewMinorSourceInput", "Opportunity")).SendKeys(MinorSource);
            ThinkTime(5);
            WaitUntil(driver, Control("NewMinorSourceSelect", MinorSource, "Generic"), 30);
            MoveToElement(driver, Control("NewMinorSourceSelect", MinorSource, "Generic"));
            Element(driver, Control("NewMinorSourceSelect", MinorSource, "Generic")).Click();
            ThinkTime(3);


            saveFooter(driver, testInReport, testName, testDataIteration);
            ThinkTime(8);
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Opportunity Created Successfully", "New Opportunity Verification");
            ThinkTime(15);



        }
        public void VerifyActivityTitlepresent(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string activitytitle)
        {
            for (int i = 0; i <= 25; i++)
            {

                ThinkTime(2);
                WaitUntil(driver, Control("MoreButton", "CommonObj"), 30);
                Element(driver, Control("MoreButton", "CommonObj")).Click();
                ThinkTime(2);
                WaitUntil(driver, Control("RefreshPage2", "CommonObj"), 30);
                Element(driver, Control("RefreshPage2", "CommonObj")).Click();
                ThinkTime(2);
                if (Elements(driver, Control("CommunicationRequest", activitytitle, "phoneCall")) > 0)
                {
                    break;
                }

            }
            WaitUntil(driver, Control("CommunicationRequest", activitytitle, "phoneCall"), 60);
            if (Elements(driver, Control("CommunicationRequest", activitytitle, "phoneCall")) > 0)
            {
                ThinkTime(5);

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", activitytitle + "Communication request created", "Activity");
            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Info", activitytitle + "No Activity Available", "Activity");
                Assert.Fail("Activities are not  available.Please create one");

            }
        }
        public void oppcloseaslost(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string status)
        {

            ThinkTime(5);
            WaitUntil(driver, Control("Closeaslost", "Generic"), 60);
            Element(driver, Control("Closeaslost", "Generic")).Click();
            ThinkTime(3);
            WaitUntil(driver, Control("oppstatusreason", "Generic"), 60);
            Element(driver, Control("oppstatusreason", "Generic")).SendKeys(status);
            WaitUntil(driver, Control("Quickcreatesave", "Opportunity"), 30);
            MoveToElement(driver, Control("Quickcreatesave", "Opportunity"));
            Element(driver, Control("Quickcreatesave", "Opportunity")).Click();
        }
        public void payloadverificationnotintreseted(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string lc, string Bc, string appstore, string googlestore)
        {
            string payload = Element(driver, Control("payloadverification", "Generic")).GetAttribute("defaultValue");
            string language = lc;
            string center = Bc;
            string appstoreurl = appstore;
            string googlestoreurl = googlestore;

            bool languagecodecheck = payload.Contains(language);
            bool businesscentrecheck = payload.Contains(Bc);
            bool storeurl1 = payload.Contains(appstoreurl);
            bool storeurl2 = payload.Contains(googlestoreurl);


            if (languagecodecheck == true)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Language code is correct", "Language code");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Language code is wrong", "Language code");
                Assert.Fail("Language code wrong");
            }
            if (businesscentrecheck == true)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Brand is correct", "Business center");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Brand  is wrong", "Business center");
                Assert.Fail("Business center is wrong");
            }
            if (storeurl1 == true)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", appstore + " is correct", "Customer details");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", appstore + " is wrong", "Customer details");
                Assert.Fail("App store URL is wrong");
            }

            if (storeurl2 == true)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", googlestore + " is correct", "Customer details");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", googlestore + "is wrong", "Customer details");
                Assert.Fail("Google store url is wrong");
            }



        }
        public void relevancesearch(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string contactname)
        {
            WaitUntil(driver, Control("searchicon", "Generic"), 180);
            Element(driver, Control("searchicon", "Generic")).Click();
            WaitUntil(driver, Control("RelevanceSearchTextbox", "Generic"), 180);
            Element(driver, Control("RelevanceSearchTextbox", "Generic")).SendKeys(contactname);
            ThinkTime(5);
            Element(driver, Control("RelevanceSearchButton", "Generic")).Click();
            ThinkTime(15);
            MoveToElement(driver, Control("selectcontact", "Generic"));
            Element(driver, Control("selectcontact", "Generic")).Click();
            ThinkTime(5);
        }
        public void LogoutET(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            driver.SwitchTo().DefaultContent();


            WaitUntil(driver, Control("userInfoLink", "GenericOld"), 180);
            Element(driver, Control("userInfoLink", "GenericOld")).Click();
            WaitUntil(driver, Control("signOut", "GenericOld"), 180);
            MoveToElement(driver, Control("signOut", "GenericOld"));
            ElementHighlight(driver, Control("signOut", "GenericOld"));
            ActionsClick(driver, Control("signOut", "GenericOld"));
            // JSClick(driver, Control("signOut", "Generic"));
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "User logged out of application", "UserLogout");
            ThinkTime(2);


        }
        public string CreateNewPhoneCallActivityETteam(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string Time, string Subject, string Account)
        {
            //Subject field

            string NewSubject = Subject + Time;


            ThinkTime(3);
            WaitUntil(driver, Control("PhoneCallSubject", "EnterpriseSales"), 30);
            //MoveToElement(driver, Control("PhoneCallSubject", "EnterpriseSales"));
            //ThinkTime(3);
            //Element(driver, Control("PhoneCallSubject", "EnterpriseSales")).SendKeys(Keys.Control + "a");
            Element(driver, Control("PhoneCallSubject", "EnterpriseSales")).Click();
            Element(driver, Control("PhoneCallSubject", "EnterpriseSales")).SendKeys(NewSubject);

            //Call To field
            ThinkTime(3);
            WaitUntil(driver, Control("PhoneCallCallTo", "EnterpriseSales"), 30);
            //MoveToElement(driver, Control("PhoneCallCallTo", "EnterpriseSales"));
            //ThinkTime(3);
            Element(driver, Control("PhoneCallCallTo", "EnterpriseSales")).Click();
            Element(driver, Control("PhoneCallCallTo", "EnterpriseSales")).SendKeys(Account);

            ThinkTime(3);
            WaitUntil(driver, Control("SelectDropDownToField", "ITSales"), 30);
            //MoveToElement(driver, Control("SelectDropDownToField", "ITSales"));
            //ThinkTime(3);
            Element(driver, Control("SelectDropDownToField", "ITSales")).Click();
            // ThinkTime(3);
            WaitUntil(driver, Control("ClickLabelCallTo", "EnterpriseSales"), 30);
            Element(driver, Control("ClickLabelCallTo", "EnterpriseSales")).Click();

            ThinkTime(3);

            //Select due date
            string newdate = DateTime.Today.ToString("M/d/yyyy").Replace("-", "/");
            ThinkTime(5);
            if (Elements(driver, Control("DueDate", "phoneCall")) > 0)
            {
                WaitUntil(driver, Control("DueDate", "phoneCall"), 360);
                MoveToElement(driver, Control("DueDate", "phoneCall"));
                ActionsClick(driver, Control("DueDate", "phoneCall"));
                ThinkTime(3);
                ActionsClick(driver, Control("DueDate", "phoneCall"));
                ThinkTime(3);
                Element(driver, Control("DueDate", "phoneCall")).SendKeys(newdate);
                ThinkTime(8);
            }
            saveFooter(driver, testInReport, testName, testDataIteration);

            ThinkTime(3);
            WaitUntil(driver, Control("VerifyNewActivityPhoneCall", NewSubject, "EnterpriseSales"), 30);

            MoveToElement(driver, Control("VerifyNewActivityPhoneCall", NewSubject, "EnterpriseSales"));
            ThinkTime(3);
            ElementHighlight(driver, Control("VerifyNewActivityPhoneCall", NewSubject, "EnterpriseSales"));
            if (Elements(driver, Control("VerifyNewActivityPhoneCall", NewSubject, "EnterpriseSales")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "New Phone call activity created successfully", "New Phone call Activity Verification");

            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "New Phonew call activity verification failed", "New Phone call Activity Verification");
                Assert.Fail("New Phone call Activity Verification failed");
            }

            return NewSubject;
        }
        public void VerifyEnterpriseSalesManagerDashboardkpinew(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string kpi3, string More1)
        {

            WaitUntil(driver, Control("KPIViewsVerify", kpi3, "Dashboards"), 30);
            int value1 = Elements(driver, Control("KPIViewsVerify", kpi3, "Dashboards"));
            if (value1 > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Available KPIs are correct", "DashboardKPI");
                ThinkTime(2);
                ActionsClick(driver, Control("More3", "Dashboards"));
                ThinkTime(2);
                ActionsClick(driver, Control("SeeAllRecordAssociateBtn", "GenericOld"));
                ThinkTime(5);

            }
        }
        public void AddNewContactwithAccountinOpportunity(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string Topic, string TimeInSec, string ContactName, string Language, string acc)
        {

            string Date = DateTime.Today.ToString("dd-MM-yyyy");
            DateTime Now = DateTime.Now;
            string Time = Date + Convert.ToString(Now.Hour) + Convert.ToString(Now.Millisecond);
            string NewContactName = ContactName + Time;
            string AccountInput = "AccountInput " + Time;
            ThinkTime(3);

            WaitUntil(driver, Control("NewOpportunityTopic", "Contacts"), 180);
            MoveToElement(driver, Control("NewOpportunityTopic", "Contacts"));
            Element(driver, Control("NewOpportunityTopic", "Contacts")).SendKeys(Keys.Control + "a");
            Element(driver, Control("NewOpportunityTopic", "Contacts")).SendKeys(Keys.Delete);

            ThinkTime(3);

            Element(driver, Control("NewOpportunityTopic", "Contacts")).SendKeys(Topic);
            Element(driver, Control("NewOpportunityTopicClick", "Contacts")).Click();

            WaitUntil(driver, Control("NewOpportunityContactInput", "Contacts"), 180);
            MoveToElement(driver, Control("NewOpportunityContactInput", "Contacts"));
            Element(driver, Control("NewOpportunityContactSearch", "Contacts")).Click();
            WaitUntil(driver, Control("NewContactButton", "Contacts"), 180);
            MoveToElement(driver, Control("NewContactButton", "Contacts"));
            Element(driver, Control("NewContactButton", "Contacts")).Click();

            WaitUntil(driver, Control("NewContactLName", "Contacts"), 180);
            MoveToElement(driver, Control("NewContactLName", "Contacts"));
            Element(driver, Control("NewContactLName", "Contacts")).Click();
            Element(driver, Control("NewContactLName", "Contacts")).SendKeys(NewContactName);

            ThinkTime(3);

            WaitUntil(driver, Control("NewContactlanguage", "Contacts"), 180);
            MoveToElement(driver, Control("NewContactlanguage", "Contacts"));
            Element(driver, Control("NewContactlanguage", "Contacts")).SendKeys(Language);


            ThinkTime(3);
            WaitUntil(driver, Control("NewContactlanguageSelect", "Contacts"), 180);
            MoveToElement(driver, Control("NewContactlanguageSelect", "Contacts"));
            Element(driver, Control("NewContactlanguageSelect", "Contacts")).Click();

            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Contact added successfully", "Contact field verification");
            ThinkTime(4);
            WaitUntil(driver, Control("Companyinput", "EnterpriseSales"), 30);
            MoveToElement(driver, Control("Companyinput", "EnterpriseSales"));
            Element(driver, Control("Companyinput", "EnterpriseSales")).Click();
            Element(driver, Control("Companyinput", "EnterpriseSales")).SendKeys(acc);
            ThinkTime(2);
            WaitUntil(driver, Control("BrokerAccountDrop", "Accounts"), 30);
            MoveToElement(driver, Control("BrokerAccountDrop", "Accounts"));
            Element(driver, Control("BrokerAccountDrop", "Accounts")).Click();
            //WaitUntil(driver, Control("Accountinput", "EnterpriseSales"), 180);
            //Element(driver, Control("Accountinput", "EnterpriseSales")).Click();
            //Element(driver, Control("Accountinput", "EnterpriseSales")).SendKeys(AccountInput);
            ThinkTime(3);
            WaitUntil(driver, Control("SaveContactButton", "Generic"), 30);
            MoveToElement(driver, Control("SaveContactButton", "Generic"));
            Element(driver, Control("SaveContactButton", "Generic")).Click();

            ThinkTime(7);

            //scrollDownContactPage(driver, testInReport, testName, testDataIteration);
            ThinkTime(3);
            WaitUntil(driver, Control("accountvalue", acc, "EnterpriseSales"), 120);

            if (Element(driver, Control("accountvalue", acc, "EnterpriseSales")).Displayed)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Account or Company Field is  Autopopulated", "Account or Company field verification");

            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Account or Company Field is not  Autopopulated", "Account or Company field verification");
                Assert.Fail("Account/Company  is Verification Failed");
            }

            saveFooter(driver, testInReport, testName, testDataIteration);

        }
        public void verifyzzzRecommendedCentre(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string OppId, string rc)
        {



            WaitUntil(driver, Control("AdvancedFind", "Generic"), 30);
            Element(driver, Control("AdvancedFind", "Generic")).Click();
            ThinkTime(1);
            driver.Manage().Window.Maximize();
            WindowHandling(driver);
            ThinkTime(1);
            driver.Manage().Window.Maximize();
            ThinkTime(5);
            SwitchToFrame(driver, "contentIFrame0");
            MoveToElement(driver, Control("AdvanceFindselect", "Opportunity"));
            ThinkTime(2);
            Element(driver, Control("AdvanceFindselect", "Opportunity")).Click();
            ThinkTime(1);
            Select(Element(driver, Control("AdvancefindSelectvalue", "Opportunity"))).SelectByText("Reference");
            ThinkTime(2);
            Element(driver, Control("CaseIDText", "GenericOld")).Click();
            Element(driver, Control("CaseID", "GenericOld")).SendKeys(OppId);
            ThinkTime(2);
            driver.SwitchTo().DefaultContent();
            //SwitchToFrame(driver, "InlineDialog_Iframe");
            ThinkTime(4);
            // SwitchToFrame(driver, "viewEditor");
            ThinkTime(4);
            WaitUntil(driver, Control("EditColumnEmail", "GenericOld"), 60);
            Element(driver, Control("EditColumnEmail", "GenericOld")).Click();
            ThinkTime(4);
            SwitchToFrame(driver, "InlineDialog_Iframe");
            ThinkTime(4);
            SwitchToFrame(driver, "viewEditor");
            ThinkTime(3);
            WaitUntil(driver, Control("AddColumns", "GenericOld"), 60);
            Element(driver, Control("AddColumns", "GenericOld")).Click();
            ThinkTime(4);
            driver.SwitchTo().DefaultContent();
            SwitchToFrame(driver, "InlineDialog1_Iframe");
            ThinkTime(4);
            MoveToElement(driver, Control("SelectColumn", "locationid", "GenericOld"));
            Element(driver, Control("SelectColumn", "locationid", "GenericOld")).Click();
            //MoveToElement(driver, Control("SelectColumn", Columna, "GenericOld"));
            //Element(driver, Control("SelectColumn", Columna, "GenericOld")).Click();
            Element(driver, Control("OKButton", "Generic")).Click();
            driver.SwitchTo().DefaultContent();
            SwitchToFrame(driver, "InlineDialog_Iframe");
            Element(driver, Control("EditColumnsPopupOk", "GenericOld")).Click();
            driver.SwitchTo().DefaultContent();
            ThinkTime(4);
            Element(driver, Control("advFindRibbons", "Results", "GenericOld")).Click();
            SwitchToFrame(driver, "contentIFrame0");
            SwitchToFrame(driver, "resultFrame");
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Result page is displayed", "Results Page");
            WaitUntil(driver, Control("LastColumn", "Generic"), 240);
            ElementHighlight(driver, Control("LastColumn", "Generic"));
            string lastcolumn = Element(driver, Control("LastColumn", "Generic")).Text.ToString();
            Console.WriteLine(lastcolumn);
            scrollRight(driver, testInReport, testName, testDataIteration, "ScrollAdvanceFind");
            ThinkTime(4);
            driver.SwitchTo().DefaultContent();

            if (lastcolumn != rc)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Locatin wrong", "locationfield validation");
                Assert.Fail();

            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Location correct", "Location field validation");

            }
            ThinkTime(4);
        }

        public void AdvFinddeletetour(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {

            SwitchToFrame(driver, "contentIFrame0");
            MoveToElement(driver, Control("AdvanceFindselect", "Opportunity"));
            ThinkTime(2);
            Select(Element(driver, Control("Looksfordrop", "Generic"))).SelectByText("Tours");
            Element(driver, Control("AdvanceFindselect", "Opportunity")).Click();
            ThinkTime(1);
            Select(Element(driver, Control("AdvancefindSelectvalue", "Opportunity"))).SelectByText("Date Created");
            ThinkTime(4);
            Element(driver, Control("Equalcondition", "Opportunity")).Click();
            Select(Element(driver, Control("Equalcondition", "Opportunity"))).SelectByText("This Week");
            ThinkTime(2);
            driver.SwitchTo().DefaultContent();
            Element(driver, Control("advFindRibbons", "Results", "GenericOld")).Click();
            SwitchToFrame(driver, "contentIFrame0");
            SwitchToFrame(driver, "resultFrame");
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Result page is displayed", "Results Page");

            //// Delete Tour
            //ThinkTime(1);
            //SwitchToFrame(driver, "contentIFrame0");
            ThinkTime(1);
            if (Elements(driver, Control("FirstRecord", "BookATour")) > 0)
            {
                MoveToElement(driver, Control("SelectAllrecordsCheckbox", "BookATour"));
                ElementHighlight(driver, Control("SelectAllrecordsCheckbox", "BookATour"));
                ThinkTime(2);
                Element(driver, Control("SelectAllrecordsCheckbox", "BookATour")).Click();
                ThinkTime(2);
                driver.SwitchTo().DefaultContent();
                Element(driver, Control("DeleteTour", "BookATour")).Click();
                ThinkTime(5);
                SwitchToFrame(driver, "InlineDialog_Iframe");
                Element(driver, Control("Deletetourbutton", "BookATour")).Click();
                ThinkTime(2);

                if (Elements(driver, Control("Toursdeletedmsg", "BookATour")) > 0)
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Tours deleted", "Tours deleted");

                }
                else
                {
                    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Tours not deleted", "Tours not deleted");

                }
            }

            //else
            //{
            //    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "No Tours to delete", "No Tours to delete");
            //}

            //  WindowHandling(driver, parentWindowHandle);

        }



















        public void OwnerOpp1(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string ownerlead, string ownerlead1)
        {

            MoveToElement(driver, Control("Overflowbutton", "Opportunity"));
            Element(driver, Control("Overflowbutton", "Opportunity")).Click();

            ThinkTime(2);
            MoveToElement(driver, Control("OwnerText", "Opportunity"));
            ThinkTime(2);
            string owneropp = Element(driver, Control("OwnerText", "Opportunity")).GetAttribute("innerText");
            ThinkTime(2);

            if (owneropp == ownerlead)

            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Opp inherited from lead", "");
            }

            else if (owneropp == ownerlead1)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Opp inherited from lead", "");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Opp is not inherited from lead", "");
                Assert.Fail("Opp is not inherited from lead");
            }

        }
        public void Verifyaccessdenied(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {

            ThinkTime(10);
            if (Elements(driver, Control("Deleteaccessdeny", "EnterpriseSales")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Delete access is denied", "Delete permission Verification");
                Element(driver, Control("Cancelbutton", "EnterpriseSales")).Click();


            }
            else
            {
                Assert.Fail("User has permission to delete other contact details");
            }
        }

        public void LoopforRefresh(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {
            for (int i = 0; i <= 4; i++)
            {
                ThinkTime(2);
                WaitUntil(driver, Control("RefreshPage", "CommonObj"), 30);
                Element(driver, Control("RefreshPage", "CommonObj")).Click();
            }
        }
        public string GetOppID(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {
            LoopforRefresh(driver, testInReport, testName, testDataIteration);
            ThinkTime(2);
            WaitUntil(driver, Control("getOppID", "CommonObj"), 30);
            string Oppid = Element(driver, Control("getOppID", "CommonObj")).GetAttribute("Value");
            return Oppid;


        }
        public void LoopforRefreshUntilResult(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)
        {
            for (int i = 0; i <= 20; i++)
            {
                ThinkTime(2);
                WaitUntil(driver, Control("RefreshPage", "CommonObj"), 30);
                Element(driver, Control("RefreshPage", "CommonObj")).Click();
                ThinkTime(2);
                WaitUntil(driver, Control("GetOppTopic", "Opportunity"), 30);
                Element(driver, Control("GetOppTopic", "Opportunity")).Click();
                string getOppname = Element(driver, Control("GetOppTopic", "Opportunity")).GetAttribute("innerText");
                if (getOppname != "New Opportunity")
                {
                    break;
                }

            }

        }


        public void navigatetoemailrecordsfromdashboard(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName)

        {
            try
            {
                ThinkTime(2);
                WaitUntil(driver, Control("DSArecordsfromdashboard", "Generic"), 30);
                Element(driver, Control("DSArecordsfromdashboard", "Generic")).Click();
                ThinkTime(2);


            }
            catch
            {
                ThinkTime(2);
                WaitUntil(driver, Control("DSAMorerecordsindashbordemail", "Generic"), 30);
                MoveToElement(driver, Control("DSAMorerecordsindashbordemail", "Generic"));
                Element(driver, Control("DSAMorerecordsindashbordemail", "Generic")).Click();
                ThinkTime(2);
                Element(driver, Control("DSArecordsfromdashboard", "Generic")).Click();

                ThinkTime(2);
                //WaitUntil(driver, Control("Dashemailmore", "Dashboards"), 60);
                //Element(driver, Control("Dashemailmore", "Dashboards")).Click();
                //ThinkTime(2);
                //WaitUntil(driver, Control("SeeAllRecordAssociateBtn", "GenericOld"), 60);
                //MoveToElement(driver, Control("SeeAllRecordAssociateBtn", "GenericOld"));
                //Element(driver, Control("SeeAllRecordAssociateBtn", "GenericOld")).Click();
                //ThinkTime(3);
            }
        }

        public void advancefunnelclick(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(3);
            MoveToElement(driver, Control("dashboardadvfilter", "Dashboards"));
            WaitUntil(driver, Control("dashboardadvfilter", "Dashboards"), 180);
            Element(driver, Control("dashboardadvfilter", "Dashboards")).Click();

        }

        public void advancefiltercusemailpagefield(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            //status filter

            WaitUntil(driver, Control("advfiltererdata", "Status Reason", "Generic"), 30);
            int filterfield1 = Elements(driver, Control("advfiltererdata", "Status Reason", "Generic"));


            WaitUntil(driver, Control("advfilterequalcondition", "1", "Generic"), 30);
            int filtercondition1 = Elements(driver, Control("advfilterequalcondition", "1", "Generic"));

            WaitUntil(driver, Control("advancefiltervaluefied", "Received", "Generic"), 30);
            int FilterValue1 = Elements(driver, Control("advancefiltervaluefied", "Received", "Generic"));

            //email open filter

            WaitUntil(driver, Control("advfiltererdata", "EmailOpened", "Generic"), 30);
            int filterfield2 = Elements(driver, Control("advfiltererdata", "EmailOpened", "Generic"));

            WaitUntil(driver, Control("advfilterequalcondition", "2", "Generic"), 30);
            int filtercondition2 = Elements(driver, Control("advfilterequalcondition", "2", "Generic"));

            WaitUntil(driver, Control("advancefiltervaluefied", "No", "Generic"), 30);
            int FilterValue2 = Elements(driver, Control("advancefiltervaluefied", "No", "Generic"));

            ///owner filed

            WaitUntil(driver, Control("advfiltererdata", "Owner", "Generic"), 30);
            int filterfield3 = Elements(driver, Control("advfiltererdata", "Owner", "Generic"));

            WaitUntil(driver, Control("advfilterequalcondition", "3", "Generic"), 30);
            int filtercondition3 = Elements(driver, Control("advfilterequalcondition", "3", "Generic"));

            WaitUntil(driver, Control("advancefiltervaluefied", "crm_svc_adm", "Generic"), 30);
            int FilterValue3 = Elements(driver, Control("advancefiltervaluefied", "crm_svc_adm", "Generic"));


            //regarding oppertunity
            WaitUntil(driver, Control("advfiltererdata", "Regarding (Opportunities)", "Generic"), 30);
            int filterfield4 = Elements(driver, Control("advfiltererdata", "Regarding (Opportunities)", "Generic"));

            WaitUntil(driver, Control("advfiltercondition", "Contains data", "Generic"), 30);
            int filtercondition4 = Elements(driver, Control("advfiltercondition", "Contains data", "Generic"));

            WaitUntil(driver, Control("ownerfilter2advfltr", "Generic"), 30);
            int FilterVowner2 = Elements(driver, Control("ownerfilter2advfltr", "Generic"));


            WaitUntil(driver, Control("advfiltercondition", "Equals current user", "Generic"), 30);
            int Filterownervalue2 = Elements(driver, Control("advfiltercondition", "Equals current user", "Generic"));




            if (filterfield1 > 0 && filtercondition1 > 0 && FilterValue1 > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Adv filters present", "Adv Filter verification");

            }

            else
            {
                //Assert.Fail("Adv filters are missing for dashboard");
            }


            if (filterfield2 > 0 && filtercondition2 > 0 && FilterValue2 > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Adv filters present", "Adv Filter verification");

            }

            else
            {
                Assert.Fail("Adv filters are missing for dashboard");
            }

            //if (filterfield3 > 0 && filtercondition3 > 0 && FilterValue3 > 0)
            //{
            //    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Adv filters present", "Adv Filter verification");

            //}

            //else
            //{
            //    Assert.Fail("Adv filters are missing for dashboard");
            //}

            if (filterfield4 > 0 && filtercondition4 > 0 && FilterVowner2 > 0 && Filterownervalue2 > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Adv filters present", "Adv Filter verification");

            }

            else
            {
                Assert.Fail("Adv filters are missing for dashboard");
            }
            ThinkTime(4);
            WaitUntil(driver, Control("cancelbtnadvasncefilter", "Generic"), 120);
            Element(driver, Control("cancelbtnadvasncefilter", "Generic")).Click();
            ThinkTime(2);
        }


        public void SelectValuesFromunreadmaildropdwn(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string defaultvalue, string newvalue)
        {
            ThinkTime(3);
            MoveToElement(driver, Control("Completedtoursdropdown", defaultvalue, "Dashboards"));
            ThinkTime(2);
            ElementHighlight(driver, Control("Completedtoursdropdown", defaultvalue, "Dashboards"));
            Element(driver, Control("Completedtoursdropdown", defaultvalue, "Dashboards")).Click();
            ThinkTime(2);
            Element(driver, Control("DBSelectdropdownvalue", newvalue, "Dashboards")).Click();
            ThinkTime(2);


            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Available KPIs are correct", "DashboardKPI");
            ThinkTime(2);

            //ThinkTime(4);
            //WaitUntil(driver, Control("Dashbordunreaddrpdwn", "GenericOld"), 120);
            //Element(driver, Control("Dashbordunreaddrpdwn", "GenericOld")).Click();
            //ThinkTime(2);
            //WaitUntil(driver, Control("SelectDropdownOption", Option, "Opportunity"), 120);
            //Element(driver, Control("SelectDropdownOption", Option, "Opportunity")).Click();
            //ThinkTime(4);
            //ScriptErrorExcep(driver, testInReport, testName, testDataIteration);

            //ThinkTime(4);
            //String CaseView = Element(driver, Control("SelectedView", "GenericOld")).Text;
            //if (CaseView == Option)
            //{

            //    AddLog(driver, testInReport, testName, testDataIteration, "Pass", "User is able to select DashBoard Role", " DashBoard Role");

            //}
            //else
            //{
            //    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "User is not able to select DashBoard Role", "DashBoard Role");
            //    Assert.Fail("User is not able to select DashBoard Role");
            //}

        }
        public void DashAdvFiltersclick(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(5);
            WaitUntil(driver, Control("Fiilterfunnelforcompletedtours", "Dashboards"), 120);
            Element(driver, Control("Fiilterfunnelforcompletedtours", "Dashboards")).Click();
            ThinkTime(3);

        }
        public void filterverification(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(5);
            WaitUntil(driver, Control("salesassistfilteroption", "Generic"), 30);
            int filterfield = Elements(driver, Control("salesassistfilteroption", "Generic"));
            WaitUntil(driver, Control("salesassistfilteroption1", "Generic"), 30);
            int filterfield1 = Elements(driver, Control("salesassistfilteroption1", "Generic"));
            WaitUntil(driver, Control("salesassistfilteroption2", "Generic"), 30);
            int filterfield2 = Elements(driver, Control("salesassistfilteroption2", "Generic"));
            WaitUntil(driver, Control("salesassistfilteroption4", "Generic"), 30);
            int filterfield3 = Elements(driver, Control("salesassistfilteroption4", "Generic"));
            WaitUntil(driver, Control("salesassistfilteroption4", "Generic"), 30);
            int filterfield4 = Elements(driver, Control("salesassistfilteroption4", "Generic"));
            WaitUntil(driver, Control("salesassistfilteroption5", "Generic"), 30);
            int filterfield5 = Elements(driver, Control("salesassistfilteroption5", "Generic"));
            WaitUntil(driver, Control("salesassistfilteroption6", "Generic"), 30);
            int filterfield6 = Elements(driver, Control("salesassistfilteroption6", "Generic"));
            // WaitUntil(driver, Control("salesassistfilteroption7", "Generic"), 30);
            int filterfield7 = Elements(driver, Control("salesassistfilteroption7", "Generic"));
            if (filterfield > 0 && filterfield1 > 0 && filterfield2 > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Adv filters present", "Adv Filter verification");

            }

            else
            {
                Assert.Fail("Adv filters are missing for dashboard");
            }
            if (filterfield3 > 0 && filterfield4 > 0 && filterfield5 > 0 && filterfield6 > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Adv filters present", "Adv Filter verification");

            }

            else
            {
                Assert.Fail("Adv filters are missing for dashboard");
            }
            if (filterfield7 > 0)
            {
                Assert.Fail("Adv filters option present");

            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Adv filters option not  present", "Adv Filter verification");
            }
            ThinkTime(2);
            WaitUntil(driver, Control("Dashadvvalue", "Apply", "Dashboards"), 30);
            Element(driver, Control("Dashadvvalue", "Apply", "Dashboards")).Click();
            ThinkTime(3);
        }
        public void potentialfilterverification(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(5);
            WaitUntil(driver, Control("salesassistfilteroption", "Generic"), 30);
            int filterfield = Elements(driver, Control("salesassistfilteroption", "Generic"));
            WaitUntil(driver, Control("potentialsalesassistfilteroption", "Generic"), 30);
            int filterfield1 = Elements(driver, Control("potentialsalesassistfilteroption", "Generic"));
            WaitUntil(driver, Control("salesassistfilteroption2", "Generic"), 30);
            int filterfield2 = Elements(driver, Control("salesassistfilteroption2", "Generic"));
            WaitUntil(driver, Control("potentialsalesassistfilteroption3", "Generic"), 30);
            int filterfield3 = Elements(driver, Control("potentialsalesassistfilteroption3", "Generic"));
            WaitUntil(driver, Control("salesassistfilteroption4", "Generic"), 30);
            int filterfield4 = Elements(driver, Control("salesassistfilteroption4", "Generic"));
            WaitUntil(driver, Control("potentialsalesassistprospectfilteroption", "Generic"), 30);
            int filterfield5 = Elements(driver, Control("potentialsalesassistprospectfilteroption", "Generic"));
            WaitUntil(driver, Control("potentialsalesassistprospectfiltercondition", "Generic"), 30);
            int filterfield6 = Elements(driver, Control("potentialsalesassistprospectfiltercondition", "Generic"));
            WaitUntil(driver, Control("potentialsalesassistprospectfiltervalue", "Generic"), 30);
            int filterfield7 = Elements(driver, Control("potentialsalesassistprospectfiltervalue", "Generic"));
            WaitUntil(driver, Control("potentialsalesassistprospectfilteroption1", "Generic"), 30);
            int filterfield8 = Elements(driver, Control("potentialsalesassistprospectfilteroption1", "Generic"));
            WaitUntil(driver, Control("potentialsalesassistprospectfiltercondition1", "Generic"), 30);
            int filterfield9 = Elements(driver, Control("potentialsalesassistprospectfiltercondition1", "Generic"));
            // WaitUntil(driver, Control("potentialsalesassistfilteroptionremove", "Generic"), 30);
            int filterfield10 = Elements(driver, Control("potentialsalesassistfilteroptionremove", "Generic"));
            //WaitUntil(driver, Control("potentialsalesassistfilteroptionremove1", "Generic"), 30);
            int filterfield11 = Elements(driver, Control("potentialsalesassistfilteroptionremove1", "Generic"));
            //WaitUntil(driver, Control("potentialsalesassistfilteroptionremove2", "Generic"), 30);
            int filterfield12 = Elements(driver, Control("potentialsalesassistfilteroptionremove2", "Generic"));
            if (filterfield > 0 && filterfield1 > 0 && filterfield2 > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Adv filters present", "Adv Filter verification");

            }

            else
            {
                Assert.Fail("Adv filters are missing for dashboard");
            }

            if (filterfield3 > 0 && filterfield4 > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Adv filters present", "Adv Filter verification");

            }

            else
            {
                Assert.Fail("Adv filters are missing for dashboard");
            }
            if (filterfield5 > 0 && filterfield6 > 0 && filterfield7 > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Adv filters present", "Adv Filter verification");

            }

            else
            {
                Assert.Fail("Adv filters are missing for dashboard");
            }

            if (filterfield8 > 0 && filterfield9 > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Adv filters present", "Adv Filter verification");

            }

            else
            {
                Assert.Fail("Adv filters are missing for dashboard");
            }
            if (filterfield10 > 0 && filterfield11 > 0 && filterfield12 > 0)
            {
                Assert.Fail("Adv filters option present");

            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Adv filters option not  present", "Adv Filter verification");
            }
            ThinkTime(2);
            WaitUntil(driver, Control("Dashadvvalue", "Apply", "Dashboards"), 30);
            Element(driver, Control("Dashadvvalue", "Apply", "Dashboards")).Click();
            ThinkTime(3);
        }



        public string CreateNewLSCCaseMan(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, String CompanyName, String Type, string Source, string SubSource, string Parentcenter, string product)
        {

            string LastName1 = "New Contact";
            string CurrentTime = System.DateTime.UtcNow.ToString("h:mm tt");
            string LastName = LastName1 + CurrentTime;
            ThinkTime(2);
            WaitUntil(driver, Control("NewButton", "CaseCreation"), 60);
            Element(driver, Control("NewButton", "CaseCreation")).Click();

            ThinkTime(2);
            WaitUntil(driver, Control("CompanyName", "CaseCreation"), 30);
            Element(driver, Control("CompanyName", "CaseCreation")).Click();
            ThinkTime(2);
            Element(driver, Control("CompanyName", "CaseCreation")).SendKeys(CompanyName);

            ThinkTime(2);
            WaitUntil(driver, Control("SelectDDvalue", "CaseCreation"), 30);
            Element(driver, Control("SelectDDvalue", "CaseCreation")).Click();

            ThinkTime(2);
            WaitUntil(driver, Control("Product", "CaseCreation"), 30);
            Element(driver, Control("Product", "CaseCreation")).Click();
            Element(driver, Control("Product", "CaseCreation")).SendKeys(product);
            ThinkTime(2);
            WaitUntil(driver, Control("SelectDDvalue", "CaseCreation"), 30);
            Element(driver, Control("SelectDDvalue", "CaseCreation")).Click();

            ThinkTime(2);
            WaitUntil(driver, Control("typeFieldLabel", "CaseCreation"), 30);
            Select(Element(driver, Control("typeFieldLabel", "CaseCreation"))).SelectByText(Type);
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "", "Type Field Entered");

            ThinkTime(2);
            WaitUntil(driver, Control("ContactName", "CaseCreation"), 30);
            Element(driver, Control("ContactName", "CaseCreation")).Click();
            ThinkTime(2);
            WaitUntil(driver, Control("NewContactBtn", "CaseCreation"), 30);
            Element(driver, Control("NewContactBtn", "CaseCreation")).Click();

            ThinkTime(2);
            WaitUntil(driver, Control("LastName", "CaseCreation"), 30);
            Element(driver, Control("LastName", "CaseCreation")).Click();
            Element(driver, Control("LastName", "CaseCreation")).SendKeys(LastName);

            ThinkTime(2);
            WaitUntil(driver, Control("Email", "CaseCreation"), 30);
            Element(driver, Control("Email", "CaseCreation")).Click();
            Element(driver, Control("Email", "CaseCreation")).SendKeys("hash@test.com");

            ThinkTime(2);
            WaitUntil(driver, Control("SaveClose", "CaseCreation"), 30);
            Element(driver, Control("SaveClose", "CaseCreation")).Click();


            scrollDownCasePageCUST(driver, testInReport, testName, testDataIteration, "100");

            ThinkTime(20);
            WaitUntil(driver, Control("Source", "CaseCreation"), 30);
            Element(driver, Control("Source", "CaseCreation")).Click();
            Element(driver, Control("Source", "CaseCreation")).SendKeys(Source);
            ThinkTime(2);
            WaitUntil(driver, Control("SelectDDvalue", "CaseCreation"), 30);
            Element(driver, Control("SelectDDvalue", "CaseCreation")).Click();


            scrollDownCasePageCUST(driver, testInReport, testName, testDataIteration, "200");
            ThinkTime(5);
            WaitUntil(driver, Control("SubSource", "CaseCreation"), 30);
            Element(driver, Control("SubSource", "CaseCreation")).Click();
            ThinkTime(2);
            Element(driver, Control("SubSource", "CaseCreation")).SendKeys(SubSource);
            ThinkTime(2);
            WaitUntil(driver, Control("SelectDDvalue", "CaseCreation"), 30);
            Element(driver, Control("SelectDDvalue", "CaseCreation")).Click();
            scrollDownCasePage(driver, testInReport, testName, testDataIteration);




            ThinkTime(5);
            WaitUntil(driver, Control("Centre", "CaseCreation"), 30);
            Element(driver, Control("Centre", "CaseCreation")).Click();
            Element(driver, Control("Centre", "CaseCreation")).SendKeys(Parentcenter);
            ThinkTime(2);
            WaitUntil(driver, Control("SelectDDvalue", "CaseCreation"), 30);
            Element(driver, Control("SelectDDvalue", "CaseCreation")).Click();
            //scrollUpCasePageCentre(driver, testInReport, testName, testDataIteration);
            //scrollUpCasePage(driver, testInReport, testName, testDataIteration);
            scrollDownCasePageCUST(driver, testInReport, testName, testDataIteration, "100");
            saveFooter(driver, testInReport, testName, testDataIteration);

            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "LSC Case Created", "LSC Case Created");

            ThinkTime(4);

            WaitUntil(driver, Control("Refreshbtn", "CaseCreation"), 30);
            Element(driver, Control("Refreshbtn", "CaseCreation")).Click();
            ThinkTime(2);
            WaitUntil(driver, Control("GetCaseID", "CaseCreation"), 30);
            string getCaseId = Element(driver, Control("GetCaseID", "CaseCreation")).GetAttribute("title");
            return getCaseId;


        }



        public string CreateNewLSCCaseAdmin(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, String CompanyName, String Type, string Source, string SubSource, string Parentcenter, string product)
        {

            string LastName1 = "New Contact";
            string CurrentTime = System.DateTime.UtcNow.ToString("h:mm tt");
            string LastName = LastName1 + CurrentTime;
            ThinkTime(2);
            WaitUntil(driver, Control("NewButton", "CaseCreation"), 60);
            Element(driver, Control("NewButton", "CaseCreation")).Click();

            ThinkTime(2);
            WaitUntil(driver, Control("CompanyName", "CaseCreation"), 30);
            Element(driver, Control("CompanyName", "CaseCreation")).Click();
            ThinkTime(2);
            Element(driver, Control("CompanyName", "CaseCreation")).SendKeys(Keys.Control + "a");
            Element(driver, Control("CompanyName", "CaseCreation")).SendKeys(Keys.Delete);
            Element(driver, Control("CompanyName", "CaseCreation")).SendKeys(CompanyName);

            ThinkTime(2);
            WaitUntil(driver, Control("SelectDDvalue", "CaseCreation"), 30);
            Element(driver, Control("SelectDDvalue", "CaseCreation")).Click();

            ThinkTime(2);
            WaitUntil(driver, Control("Product", "CaseCreation"), 30);
            Element(driver, Control("Product", "CaseCreation")).Click();
            Element(driver, Control("Product", "CaseCreation")).SendKeys(Keys.Control + "a");
            Element(driver, Control("Product", "CaseCreation")).SendKeys(Keys.Delete);
            Element(driver, Control("Product", "CaseCreation")).SendKeys(product);
            ThinkTime(2);
            WaitUntil(driver, Control("SelectDDvalue", "CaseCreation"), 30);
            Element(driver, Control("SelectDDvalue", "CaseCreation")).Click();

            ThinkTime(2);
            WaitUntil(driver, Control("typeFieldLabel", "CaseCreation"), 30);
            Select(Element(driver, Control("typeFieldLabel", "CaseCreation"))).SelectByText(Type);
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "", "Type Field Entered");

            ThinkTime(2);
            WaitUntil(driver, Control("ContactName", "CaseCreation"), 30);
            Element(driver, Control("ContactName", "CaseCreation")).Click();
            ThinkTime(2);
            WaitUntil(driver, Control("NewContactBtn", "CaseCreation"), 30);
            Element(driver, Control("NewContactBtn", "CaseCreation")).Click();

            ThinkTime(2);
            WaitUntil(driver, Control("LastName", "CaseCreation"), 30);
            Element(driver, Control("LastName", "CaseCreation")).Click();
            Element(driver, Control("LastName", "CaseCreation")).SendKeys(LastName);

            ThinkTime(2);
            WaitUntil(driver, Control("Email", "CaseCreation"), 30);
            Element(driver, Control("Email", "CaseCreation")).Click();
            Element(driver, Control("Email", "CaseCreation")).SendKeys("hash@mailinator.com");

            ThinkTime(2);
            WaitUntil(driver, Control("SaveClose", "CaseCreation"), 30);
            Element(driver, Control("SaveClose", "CaseCreation")).Click();


            scrollDownCasePageCUST(driver, testInReport, testName, testDataIteration, "100");

            ThinkTime(20);
            WaitUntil(driver, Control("Source", "CaseCreation"), 30);
            Element(driver, Control("Source", "CaseCreation")).Click();
            Element(driver, Control("Source", "CaseCreation")).SendKeys(Source);
            ThinkTime(2);
            WaitUntil(driver, Control("SelectDDvalue", "CaseCreation"), 30);
            Element(driver, Control("SelectDDvalue", "CaseCreation")).Click();


            scrollDownCasePageCUST(driver, testInReport, testName, testDataIteration, "200");
            ThinkTime(5);
            WaitUntil(driver, Control("SubSource", "CaseCreation"), 30);
            Element(driver, Control("SubSource", "CaseCreation")).Click();
            ThinkTime(2);
            Element(driver, Control("SubSource", "CaseCreation")).SendKeys(SubSource);
            ThinkTime(2);
            WaitUntil(driver, Control("SelectDDvalue", "CaseCreation"), 30);
            Element(driver, Control("SelectDDvalue", "CaseCreation")).Click();






            saveFooter(driver, testInReport, testName, testDataIteration);

            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "LSC Case Created", "LSC Case Created");

            ThinkTime(4);

            WaitUntil(driver, Control("Refreshbtn", "CaseCreation"), 30);
            Element(driver, Control("Refreshbtn", "CaseCreation")).Click();
            ThinkTime(2);
            WaitUntil(driver, Control("GetCaseID", "CaseCreation"), 30);
            string getCaseId = Element(driver, Control("GetCaseID", "CaseCreation")).GetAttribute("title");
            return getCaseId;


        }

        public string CreateNewLSCCase(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, String contact, String Type, string Source, string SubSource, string Parentcenter, string product)
        {

            string caseName = "New Case";
            string CurrentTime = System.DateTime.UtcNow.ToString("h:mm tt");
            caseName = caseName + CurrentTime;


            WaitUntil(driver, Control("OpportunityNewButton", "EnterpriseSales"), 360);
            MoveToElement(driver, Control("OpportunityNewButton", "EnterpriseSales"));
            Element(driver, Control("OpportunityNewButton", "EnterpriseSales")).Click();

            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);


/*
            string LastName1 = "New Contact";
            string CurrentTime = System.DateTime.UtcNow.ToString("h:mm tt");
            string LastName = LastName1 + CurrentTime;
            ThinkTime(2);
            WaitUntil(driver, Control("NewButton", "CaseCreation"), 60);
            Element(driver, Control("NewButton", "CaseCreation")).Click();
*/
            ThinkTime(2);

            WaitUntil(driver, Control("CaseTitle", "CaseCreation"), 30);
            Element(driver, Control("CaseTitle", "CaseCreation")).Click();
            Element(driver, Control("CaseTitle", "CaseCreation")).SendKeys(caseName);

/*
            WaitUntil(driver, Control("CompanyName", "CaseCreation"), 30);
            Element(driver, Control("CompanyName", "CaseCreation")).Click();
            ThinkTime(2);
            Element(driver, Control("CompanyName", "CaseCreation")).SendKeys(CompanyName);
            */
            ThinkTime(2);
            WaitUntil(driver, Control("Product", "CaseCreation"), 30);
            Element(driver, Control("Product", "CaseCreation")).Click();
            Element(driver, Control("Product", "CaseCreation")).SendKeys("Selenium C#");
            ThinkTime(2);
            WaitUntil(driver, Control("Description", "CaseCreation"), 30);
            Element(driver, Control("Description", "CaseCreation")).Click();
            Element(driver, Control("Description", "CaseCreation")).SendKeys("Case Description...");

            /*
            ThinkTime(2);
            WaitUntil(driver, Control("SelectDDvalue", "CaseCreation"), 30);
            Element(driver, Control("SelectDDvalue", "CaseCreation")).Click();

            
            WaitUntil(driver, Control("SelectDDvalue", "CaseCreation"), 30);
            Element(driver, Control("SelectDDvalue", "CaseCreation")).Click();

            ThinkTime(2);
            WaitUntil(driver, Control("typeFieldLabel", "CaseCreation"), 30);
            Select(Element(driver, Control("typeFieldLabel", "CaseCreation"))).SelectByText(Type);
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "", "Type Field Entered");

            ThinkTime(2);
            WaitUntil(driver, Control("ContactName", "CaseCreation"), 30);
            Element(driver, Control("ContactName", "CaseCreation")).Click();
            ThinkTime(2);
            WaitUntil(driver, Control("NewContactBtn", "CaseCreation"), 30);
            Element(driver, Control("NewContactBtn", "CaseCreation")).Click();

            ThinkTime(2);
            WaitUntil(driver, Control("LastName", "CaseCreation"), 30);
            Element(driver, Control("LastName", "CaseCreation")).Click();
            Element(driver, Control("LastName", "CaseCreation")).SendKeys(LastName);
            */


            WaitUntil(driver, Control("Customer", "Opportunity"), 360);
            MoveToElement(driver, Control("Customer", "Opportunity"));
            Element(driver, Control("Customer", "Opportunity")).Click();
            ThinkTime(3);
            Element(driver, Control("Customer", "Opportunity")).SendKeys(Keys.Control + "s");
            Element(driver, Control("Customer", "Opportunity")).SendKeys(Keys.Delete);
            Element(driver, Control("Customer", "Opportunity")).SendKeys(contact);

            WaitUntil(driver, Control("companylookupclick", "Opportunity"), 60);
            Element(driver, Control("companylookupclick", "Opportunity")).Click();

            WaitUntil(driver, Control("Origin", "CaseCreation"), 30);
            Element(driver, Control("Origin", "CaseCreation")).SendKeys(Keys.Control + "p");
            Element(driver, Control("Origin", "CaseCreation")).SendKeys("Phone");
            Element(driver, Control("Origin", "CaseCreation")).Click();


            WaitUntil(driver, Control("CaseReason", "CaseCreation"), 30);
            Element(driver, Control("CaseReason", "CaseCreation")).SendKeys(Keys.Control + "n");
            Element(driver, Control("CaseReason", "CaseCreation")).SendKeys("NEw Problem");
            Element(driver, Control("CaseReason", "CaseCreation")).Click();

            WaitUntil(driver, Control("Type", "CaseCreation"), 30);
            Element(driver, Control("Type", "CaseCreation")).SendKeys(Keys.Control + "p");
            Element(driver, Control("Type", "CaseCreation")).SendKeys("Problem");
            Element(driver, Control("Type", "CaseCreation")).Click();



            //ThinkTime(2);
            //WaitUntil(driver, Control("Email", "CaseCreation"), 30);
            //Element(driver, Control("Email", "CaseCreation")).Click();
            //Element(driver, Control("Email", "CaseCreation")).SendKeys("hash@mailinator.com");


            WaitUntil(driver, Control("ButtonSaveAndCloseAccounts", "Opportunity"), 40);
            MoveToElement(driver, Control("ButtonSaveAndCloseAccounts", "Opportunity"));
            //WaitUntil(driver, Control("GetCaseID", "CaseCreation"), 30);
            //string getCaseId = Element(driver, Control("GetCaseID", "CaseCreation")).GetAttribute("title");
            Element(driver, Control("ButtonSaveAndCloseAccounts", "Opportunity")).Click();

 /*
            ThinkTime(2);
            WaitUntil(driver, Control("SaveClose", "CaseCreation"), 30);
            Element(driver, Control("SaveClose", "CaseCreation")).Click();
           


            scrollDownCasePageCUST(driver, testInReport, testName, testDataIteration, "300");
            ThinkTime(10);
            WaitUntil(driver, Control("Source", "CaseCreation"), 30);
            Element(driver, Control("Source", "CaseCreation")).Click();
            Element(driver, Control("Source", "CaseCreation")).SendKeys(Source);
            ThinkTime(2);
            WaitUntil(driver, Control("SelectDDvalue", "CaseCreation"), 30);
            Element(driver, Control("SelectDDvalue", "CaseCreation")).Click();

            ThinkTime(5);


            WaitUntil(driver, Control("SubSource", "CaseCreation"), 30);
            Element(driver, Control("SubSource", "CaseCreation")).Click();
            Element(driver, Control("SubSource", "CaseCreation")).SendKeys(SubSource);
            ThinkTime(2);
            WaitUntil(driver, Control("SelectDDvalue", "CaseCreation"), 30);
            Element(driver, Control("SelectDDvalue", "CaseCreation")).Click();
            scrollDownCasePage(driver, testInReport, testName, testDataIteration);




            ThinkTime(5);
            WaitUntil(driver, Control("Centre", "CaseCreation"), 30);
            Element(driver, Control("Centre", "CaseCreation")).Click();
            Element(driver, Control("Centre", "CaseCreation")).SendKeys(Parentcenter);
            ThinkTime(2);
            WaitUntil(driver, Control("SelectDDvalue", "CaseCreation"), 30);
            Element(driver, Control("SelectDDvalue", "CaseCreation")).Click();
            //scrollUpCasePageCentre(driver, testInReport, testName, testDataIteration);
            //scrollUpCasePage(driver, testInReport, testName, testDataIteration);
            scrollDownCasePageCUST(driver, testInReport, testName, testDataIteration, "100");


            
            saveFooter(driver, testInReport, testName, testDataIteration);
*/
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "New Case Created", "New Case Created");

            ThinkTime(4);

            WaitUntil(driver, Control("Refreshbtn", "CaseCreation"), 30);
            Element(driver, Control("Refreshbtn", "CaseCreation")).Click();
            ThinkTime(2);

            

            
            return caseName;


        }


        public void scrollDownCasePageCUST(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string custval)
        {
            ThinkTime(10);
            IWebElement scroll = Element(driver, Control("CaseScroll", "CaseCreation"));
            ElementHighlight(driver, Control("CaseScroll", "CaseCreation"));
            IJavaScriptExecutor js = (IJavaScriptExecutor)driver;
            js.ExecuteScript("arguments[0].scrollTop+=" + custval, scroll);
        }
        public void EmailtoCaseContact(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {


            ThinkTime(5);
            //generic.HandlingScriptError(driver, testInReport, testName, testDataIteration);
            ThinkTime(3);
            WaitUntil(driver, Control("MoveToLabelFromField", "ITSales"), 30);

            MoveToElement(driver, Control("MoveToLabelFromField", "ITSales"));
            //  ElementHighlight(driver, Control("MoveToLabelFromField", "CaseActivities"));
            ThinkTime(4);
            Element(driver, Control("FromFieldLabelCloseButton", "ITSales")).Click();
            ThinkTime(2);
            WaitUntil(driver, Control("EmailFromField1", "ITSales"), 30);
            Element(driver, Control("EmailFromField1", "ITSales")).Click();
            Element(driver, Control("EmailFromField1", "ITSales")).SendKeys("Account help desk");
            ThinkTime(5);
            WaitUntil(driver, Control("Languagedropdown", "EnterpriseSales"), 30);
            Element(driver, Control("Languagedropdown", "EnterpriseSales")).Click();
            ThinkTime(5);

            string TestSubject = "Test Email Track";

            ThinkTime(3);
            WaitUntil(driver, Control("EmailSubjectInput", "ITSales"), 30);
            Element(driver, Control("EmailSubjectInput", "ITSales")).Click();
            Element(driver, Control("EmailSubjectInput", "ITSales")).SendKeys(TestSubject);
            ThinkTime(3);


            //WaitUntil(driver, Control("EmailFromField", "ITSales"), 30);
            //Element(driver, Control("EmailFromField", "ITSales")).Click();

            ThinkTime(5);
            WaitUntil(driver, Control("SendButtonEmail", "ITSales"), 30);
            Element(driver, Control("SendButtonEmail", "ITSales")).Click();
            ThinkTime(3);
            AddLog(driver, testInReport, testName, testDataIteration, "Pass", "New Email activity token verified Successfully", "Email Activity token verification");
            //WaitUntil(driver, Control("SendButtonEmail", "ITSales"), 30);
            //Element(driver, Control("SendButtonEmail", "ITSales")).Click();


            ThinkTime(3);

            if (Elements(driver, Control("emailerror", "ITSales")) > 0)
            {
                WaitUntil(driver, Control("errorokbutton", "ITSales"), 30);
                Element(driver, Control("errorokbutton", "ITSales")).Click();

                SelectToFieldsEmail(driver, testInReport, testName, testDataIteration);
                WaitUntil(driver, Control("SendButtonEmail", "ITSales"), 30);
                Element(driver, Control("SendButtonEmail", "ITSales")).Click();

                //  saveFooter(driver, testInReport, testName, testDataIteration);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "New Email activity  verified Successfully", "Email Activity  verification");

                ThinkTime(3);

                //  saveFooter(driver, testInReport, testName, testDataIteration);
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "New Email activity  verified Successfully", "Email Activity  verification");
            }
            ThinkTime(2);


        }

        public void SelectToFieldsEmail(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            WaitUntil(driver, Control("EmailToFieldInput", "ITSales"), 120);
            //MoveToElement(driver, Control("ToLabel", "Generic"));
            //Element(driver, Control("ToDeleteButton", "Generic"))
            MoveToElement(driver, Control("EmailToFieldInput", "ITSales"));
            ThinkTime(2);

            if (Elements(driver, Control("Tofieldclose", "ITSales")) > 0)
            {
                MoveToElement(driver, Control("Tofieldclose", "ITSales"));
                Element(driver, Control("Tofieldclose", "ITSales")).Click();
            }
            else { }

            MoveToElement(driver, Control("EmailToFieldInput", "ITSales"));
            Element(driver, Control("EmailToFieldInput", "ITSales")).SendKeys(Keys.Enter);
            Element(driver, Control("EmailToFieldInput", "ITSales")).SendKeys(Keys.Control + "a");
            Element(driver, Control("EmailToFieldInput", "ITSales")).SendKeys(Keys.Delete);

            Element(driver, Control("EmailToFieldInput", "ITSales")).SendKeys("Test automation");




            ThinkTime(3);



            WaitUntil(driver, Control("SelectDropdownTo", "ITSales"), 120);
            MoveToElement(driver, Control("SelectDropdownTo", "ITSales"));
            Element(driver, Control("SelectDropdownTo", "ITSales")).Click();




            //WaitUntil(driver, Control("SubjectFiledInput", "Generic"), 120);
            //MoveToElement(driver, Control("SubjectFiledInput", "Generic"));
            //Element(driver, Control("SubjectFiledInput", "Generic")).SendKeys("Test Subject");


        }


        public void scrollDownCasePageTimeLine(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {

            WaitUntil(driver, Control("CasescrollLSC", "CaseCreation"), 120);
            IWebElement scroll = Element(driver, Control("CasescrollLSC", "CaseCreation"));
            ElementHighlight(driver, Control("CasescrollLSC", "CaseCreation"));
            IJavaScriptExecutor js = (IJavaScriptExecutor)driver;
            js.ExecuteScript("arguments[0].scrollTop+=300", scroll);

        }


        public void openemailrecord(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)

        {
            ThinkTime(5);
            WaitUntil(driver, Control("timelinehighlight", "CaseCreation"), 180);
            ThinkTime(3);
            MoveToElement(driver, Control("timelinehighlight", "CaseCreation"));
            Element(driver, Control("timelinehighlight", "CaseCreation")).Click();
            ThinkTime(2);
            MoveToElement(driver, Control("OpenRecord", "CaseCreation"));
            WaitUntil(driver, Control("OpenRecord", "CaseCreation"), 80);
            ElementHighlight(driver, Control("OpenRecord", "CaseCreation"));
            JSClick(driver, Control("OpenRecord", "CaseCreation"));
            ThinkTime(3);
        }

        public void NewActivity(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string option)
        {

            ThinkTime(6);
            MoveToElement(driver, Control("NewActivity", "CaseCreation"));
            Element(driver, Control("NewActivity", "CaseCreation")).Click();
            ThinkTime(3);
            MoveToElement(driver, Control("ActivitySelection1", option, "CaseCreation"));
            if (Elements(driver, Control("ActivitySelection1", option, "CaseCreation")) > 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "New Activities are available", "Activities");
                Element(driver, Control("ActivitySelection1", option, "CaseCreation")).Click();

            }

            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "New Activities are not available", "Activities");
                Assert.Fail("New activities are unavailable");
            }
        }

        public void HidingPureCloudNewCS(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            ThinkTime(3);
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            string parentWindowHandle = driver.CurrentWindowHandle;
            try
            {
                LogoutPurecloudCS(driver, testInReport, testName, testDataIteration);
            }
            catch (Exception e)
            {
                string parentWindowHandle1 = driver.CurrentWindowHandle;
                WindowHandling(driver);
                ThinkTime(1);
                //driver.Manage().Window.Maximize();
                //ThinkTime(1);
                driver.SwitchTo().DefaultContent();
            }
            ThinkTime(3);
            if (Elements(driver, Control("PureCloudButtonCS", "CommonObj")) > 0)
            {
                MoveToElement(driver, Control("PureCloudButtonCS", "CommonObj"));
                ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
                Element(driver, Control("PureCloudButtonCS", "CommonObj")).Click();
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Purecloud button clicked correctly", " Hidden Purecloud");
            }

            //else
            //{
            //    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Purecloud is not showing in the application", " ");
            //    Assert.Fail("Missing Purecloud application");
            //}
        }


        public void LogoutPurecloudCS(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {

            ThinkTime(15);
            WaitUntil(driver, Control("SidePanelFrame", "CommonObj"), 60);
            SwitchToFrame(driver, "SidePanelIFrame");
            ThinkTime(2);
            WaitUntil(driver, Control("PurecloudIframeCS", "CommonObj"), 60);
            SwitchToFrameElement(driver, By.XPath("//iframe[@title='InteractionSync for Genesys Cloud']"));
            ThinkTime(2);
            WaitUntil(driver, Control("isynccifframe", "CommonObj"), 60);
            SwitchToFrameElement(driver, By.XPath("//iframe[@id='isynccif']"));

            //if (Elements(driver, Control("cloudcalldisconnect", "Contacts")) > 0)
            //{
            //    WaitUntil(driver, Control("LogoutRibbon", "Contacts"), 60);
            //    MoveToElement(driver, Control("LogoutRibbon", "Contacts"));
            //    Element(driver, Control("LogoutRibbon", "Contacts")).Click();
            //    ThinkTime(2);
            //    WaitUntil(driver, Control("LogoutButtonCloud", "Contacts"), 60);
            //    MoveToElement(driver, Control("LogoutButtonCloud", "Contacts"));
            //    Element(driver, Control("LogoutButtonCloud", "Contacts")).Click();
            //}
            ThinkTime(3);
            WaitUntil(driver, Control("PureCloudHome", "Generic"), 60);
            MoveToElement(driver, Control("PureCloudHome", "Generic"));
            Element(driver, Control("PureCloudHome", "Generic")).Click();
            ThinkTime(3);
            WaitUntil(driver, Control("PureCloudMore", "Generic"), 60);
            MoveToElement(driver, Control("PureCloudMore", "Generic"));
            Element(driver, Control("PureCloudMore", "Generic")).Click();
            ThinkTime(3);
            WaitUntil(driver, Control("PureCloudSettings", "Generic"), 60);
            MoveToElement(driver, Control("PureCloudSettings", "Generic"));
            Element(driver, Control("PureCloudSettings", "Generic")).Click();
            ThinkTime(3);
            WaitUntil(driver, Control("PureCloudWebRtc", "Generic"), 60);
            MoveToElement(driver, Control("PureCloudWebRtc", "Generic"));
            Element(driver, Control("PureCloudWebRtc", "Generic")).Click();
            ThinkTime(3);
            WaitUntil(driver, Control("PureCloudCheckbox", "Generic"), 60);
            MoveToElement(driver, Control("PureCloudCheckbox", "Generic"));
            Element(driver, Control("PureCloudCheckbox", "Generic")).Click();

            ThinkTime(1);

            string parentWindowHandle1 = driver.CurrentWindowHandle;
            WindowHandling(driver);
            ThinkTime(1);
            //driver.Manage().Window.Maximize();
            //ThinkTime(1);
            driver.SwitchTo().DefaultContent();

            //else
            //{
            //    AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Purecloud is not showing in the application", " ");
            //    Assert.Fail("Missing Purecloud application");
            //}

        }

        public void HidingPureCloudcs(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {
            try
            {
                ThinkTime(10);
                if (Elements(driver, Control("PureCloudButtonCS", "CommonObj")) > 0)

                    if (Elements(driver, Control("PureCloudButtonCS", "CommonObj")) > 0)
                    {
                        MoveToElement(driver, Control("PureCloudButtonCS", "CommonObj"));
                        Element(driver, Control("PureCloudButtonCS", "CommonObj")).Click();
                        AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Purecloud button clicked correctly", "Hidden Purecloud");
                    }


                    else
                    {
                        AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Purecloud is not showing in the application", " ");
                        Assert.Fail("Missing Purecloud application");
                    }
            }

            catch (Exception e)
            {

            }
        }


        public void VerifyPhonefielderrormessage(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {

            ThinkTime(2);
            if (Elements(driver, Control("Bussinessphoneerrormsg", "Generic")) > 0)

            {
                ElementHighlight(driver, Control("Bussinessphoneerrormsg", "Generic"));
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Bussiness phone error message displayed", "phone field error message");
            }


            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", " phonefiled error  not displayed", " ");
                Assert.Fail("Missing Purecloud application");
            }


            if (Elements(driver, Control("mobilephoneerrormsg", "Generic")) > 0)
            {
                ElementHighlight(driver, Control("mobilephoneerrormsg", "Generic"));

                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "mobile phone error message displayed", "phone field error message");
            }


            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", " phonefiled error  not displayed", " ");
                Assert.Fail("Missing Purecloud application");
            }
        }

        public void WaitClear(IWebDriver driver, ExtentTest testInReport, string testDataIteration, string testName, string ObjName, string Objsheet)
        {
            WaitUntil(driver, Control(ObjName, Objsheet), 30);
            Element(driver, Control(ObjName, Objsheet)).Click();
            Element(driver, Control(ObjName, Objsheet)).SendKeys(Keys.Control + "a");
            Element(driver, Control(ObjName, Objsheet)).SendKeys(Keys.Delete);
        }


        //Method to quick create contact to check Broker field
        public void QuickCreateContactToCheckBroker(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string firstName, string lastName, string language, string _time)
        {
            string NewContactLname = lastName + _time;

            // Click on Add button to Quick create Contact
            ThinkTime(6);
            WaitUntil(driver, Control("QuickNew", "QuickCreate"), 40);
            JSClick(driver, Control("QuickNew", "QuickCreate"));

            // Click on Contact
            WaitUntil(driver, Control("QuickCnt", "QuickCreate"), 40);
            JSClick(driver, Control("QuickCnt", "QuickCreate"));

            // Enter First Name
            ThinkTime(4);
            WaitClear(driver, testInReport, testName, testDataIteration, "NewContactFirstName", "Opportunity");
            Element(driver, Control("NewContactFirstName", "Opportunity")).SendKeys(firstName);

            // Enter Last Name
            ThinkTime(4);
            WaitClear(driver, testInReport, testName, testDataIteration, "NewContactLname", "Opportunity");
            Element(driver, Control("NewContactLname", "Opportunity")).SendKeys(NewContactLname);

            // Enter Language
            WaitUntil(driver, Control("NewLanguageName", "Opportunity"), 30);
            MoveToElement(driver, Control("NewLanguageName", "Opportunity"));
            Element(driver, Control("NewLanguageName", "Opportunity")).Click();
            Element(driver, Control("NewLanguageName", "Opportunity")).SendKeys(language);

            WaitUntil(driver, Control("NewLanguageDropdown", "Opportunity"), 30);
            MoveToElement(driver, Control("NewLanguageDropdown", "Opportunity"));
            Element(driver, Control("NewLanguageDropdown", "Opportunity")).Click();

            // Check Broker value Before Setting Broker Type
            string brokerBeforeSettingBrokerType = Element(driver, Control("BrokerQuickAccount", "Opportunity")).GetAttribute("aria-checked");
            if (brokerBeforeSettingBrokerType == "false")
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Broker is displaying " + brokerBeforeSettingBrokerType + "as expected before setting Broker type", "Broker value is displaying as expected before setting Broker type.");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Broker is not displaying " + brokerBeforeSettingBrokerType + "as expected before setting Broker type", "Broker value is not displaying as expected before setting Broker type.");
            }

            // Select Broker Type with a value
            Element(driver, Control("BrokerType", "Opportunity")).Click();
            Element(driver, Control("BrokerTypeOption", "Opportunity")).Click();

            // Check Broker value After Setting Broker Type
            string brokerAfterSettingBrokerType = Element(driver, Control("BrokerQuickAccount1", "Opportunity")).GetAttribute("aria-checked");
            if (brokerAfterSettingBrokerType == "true")
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Broker is displaying " + brokerAfterSettingBrokerType + "as expected after setting Broker type", "Broker value is displaying as expected after setting Broker type.");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Broker is not displaying " + brokerAfterSettingBrokerType + "as expected before setting Broker type", "Broker value is not displaying as expected after setting Broker type.");
            }

            // Select Broker Type with a blank value
            Element(driver, Control("BrokerType", "Opportunity")).Click();
            Element(driver, Control("BrokerTypeBlankOption", "Opportunity")).Click();

            // Check Broker value After Setting Blank Broker Type
            string brokerWithBlankBrokerType = Element(driver, Control("BrokerQuickAccount1", "Opportunity")).GetAttribute("aria-checked");
            if (brokerWithBlankBrokerType == "true")
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Broker is displaying " + brokerWithBlankBrokerType + "as expected after setting Blank Broker type", "Broker value is displaying as expected after setting Blank Broker type.");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Broker is not displaying " + brokerWithBlankBrokerType + "as expected before setting Blank Broker type", "Broker value is not displaying as expected after setting Blank Broker type.");
            }

            // Click Save and Close button
            ThinkTime(3);
            WaitUntil(driver, Control("Quickcreatesave", "Opportunity"), 30);
            MoveToElement(driver, Control("Quickcreatesave", "Opportunity"));
            Element(driver, Control("Quickcreatesave", "Opportunity")).Click();

            // Verify success message
            ThinkTime(3);
            WaitUntil(driver, Control("QuickCreationNotification", "Opportunity"), 50);
            if (Element(driver, Control("QuickCreationNotification", "Opportunity")).Displayed)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Quick Contact creation is success", "Quick Contact creation is success");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Quick Contact creation failed", "Quick Contact creation failed");
                Assert.Fail("Quick Contact creation failed");
            }
        }

        public void QuickCreateAccountToCheckBroker(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string companyName, string _time)
        {
            string NewCompanyName = companyName + _time;


            // Click on Add button to Quick create Account
            ThinkTime(6);
            WaitUntil(driver, Control("QuickNew", "QuickCreate"), 40);
            JSClick(driver, Control("QuickNew", "QuickCreate"));

            ThinkTime(6);

            // Click on Account
            WaitUntil(driver, Control("QuickAccount", "QuickCreate"), 40);
            JSClick(driver, Control("QuickAccount", "QuickCreate"));

            // Enter Company Name
            ThinkTime(2);
            WaitClear(driver, testInReport, testName, testDataIteration, "NewCompanyNameInput", "Opportunity");
            Element(driver, Control("NewCompanyNameInput", "Opportunity")).SendKeys(NewCompanyName);

            // Check Broker value Before Setting Broker Type
            string brokerBeforeSettingBrokerType = Element(driver, Control("BrokerQuickAccount", "Opportunity")).GetAttribute("aria-checked");
            if (brokerBeforeSettingBrokerType == "false")
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Broker is displaying " + brokerBeforeSettingBrokerType + "as expected before setting Broker type", "Broker value is displaying as expected before setting Broker type.");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Broker is not displaying " + brokerBeforeSettingBrokerType + "as expected before setting Broker type", "Broker value is not displaying as expected before setting Broker type.");
            }

            // Select Broker Type with a value
            Element(driver, Control("BrokerType", "Opportunity")).Click();
            Element(driver, Control("BrokerTypeOption", "Opportunity")).Click();

            // Check Broker value After Setting Broker Type
            string brokerAfterSettingBrokerType = Element(driver, Control("BrokerQuickAccount1", "Opportunity")).GetAttribute("aria-checked");
            if (brokerAfterSettingBrokerType == "true")
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Broker is displaying " + brokerAfterSettingBrokerType + "as expected after setting Broker type", "Broker value is displaying as expected after setting Broker type.");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Broker is not displaying " + brokerAfterSettingBrokerType + "as expected before setting Broker type", "Broker value is not displaying as expected after setting Broker type.");
            }

            // Select Broker Type with a blank value
            Element(driver, Control("BrokerType", "Opportunity")).Click();
            Element(driver, Control("BrokerTypeBlankOption", "Opportunity")).Click();

            // Check Broker value After Setting Blank Broker Type
            string brokerWithBlankBrokerType = Element(driver, Control("BrokerQuickAccount1", "Opportunity")).GetAttribute("aria-checked");
            if (brokerWithBlankBrokerType == "true")
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Broker is displaying " + brokerWithBlankBrokerType + "as expected after setting Blank Broker type", "Broker value is displaying as expected after setting Blank Broker type.");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Broker is not displaying " + brokerWithBlankBrokerType + "as expected before setting Blank Broker type", "Broker value is not displaying as expected after setting Blank Broker type.");
            }

            // Click Save and Close button
            ThinkTime(3);
            WaitUntil(driver, Control("Quickcreatesave", "Opportunity"), 30);
            MoveToElement(driver, Control("Quickcreatesave", "Opportunity"));
            Element(driver, Control("Quickcreatesave", "Opportunity")).Click();

            // Verify success message
            ThinkTime(3);
            WaitUntil(driver, Control("QuickCreationNotification", "Opportunity"), 50);
            if (Element(driver, Control("QuickCreationNotification", "Opportunity")).Displayed)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Quick Account creation is success", "Quick Account creation is success");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Quick Account creation failed", "Quick Account creation failed");
                Assert.Fail("Quick Account creation failed");
            }
        }


        //Method to create contact to check Broker field
        public void CreateContactToCheckBroker(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string lastName, string language, string _time)
        {
            string NewContactLname = lastName + _time;

            // Click on Contact from menu
            NavigateToEntity(driver, testInReport, testName, testDataIteration, "Contacts");

            // Click on Add Account button
            ClickonNewButton(driver, testInReport, testName, testDataIteration, "New");

            // Enter Last Name
            ThinkTime(2);
            WaitUntil(driver, Control("NewContactLName", "Contacts"), 30);
            Element(driver, Control("NewContactLName", "Contacts")).Click();
            Element(driver, Control("NewContactLName", "Contacts")).SendKeys(NewContactLname);

            scrollDownOpportunity(driver, testInReport, testName, testDataIteration);
            ThinkTime(5);

            // Enter Language
            ThinkTime(2);
            WaitUntil(driver, Control("ActivityCreateContactInput", "EnterpriseSales"), 60);
            Element(driver, Control("ActivityCreateContactInput", "EnterpriseSales")).Click();
            Element(driver, Control("ActivityCreateContactInput", "EnterpriseSales")).SendKeys(language);

            ThinkTime(3);
            WaitUntil(driver, Control("ContactLanguageDropdownSelect", "EnterpriseSales"), 30);
            Element(driver, Control("ContactLanguageDropdownSelect", "EnterpriseSales")).Click();
            ScriptErrorExcep(driver, testInReport, testName, testDataIteration);
            ThinkTime(3);

            scrollDownContactsPageBroker(driver, testInReport, testName, testDataIteration);
            ThinkTime(5);

            // Check Broker value Before Setting Broker Type
            string brokerBeforeSettingBrokerType = Element(driver, Control("BrokerQuickAccount", "Opportunity")).GetAttribute("aria-checked");
            if (brokerBeforeSettingBrokerType == "false")
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Broker is displaying " + brokerBeforeSettingBrokerType + "as expected before setting Broker type", "Broker value is displaying as expected before setting Broker type.");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Broker is not displaying " + brokerBeforeSettingBrokerType + "as expected before setting Broker type", "Broker value is not displaying as expected before setting Broker type.");
            }

            // Select Broker Type with a value
            Element(driver, Control("BrokerType", "Opportunity")).Click();
            Element(driver, Control("BrokerTypeOption", "Opportunity")).Click();

            // Check Broker value After Setting Broker Type
            string brokerAfterSettingBrokerType = Element(driver, Control("BrokerQuickAccount1", "Opportunity")).GetAttribute("aria-checked");
            if (brokerAfterSettingBrokerType == "true")
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Broker is displaying " + brokerAfterSettingBrokerType + "as expected after setting Broker type", "Broker value is displaying as expected after setting Broker type.");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Broker is not displaying " + brokerAfterSettingBrokerType + "as expected before setting Broker type", "Broker value is not displaying as expected after setting Broker type.");
            }

            // Select Broker Type with a blank value
            Element(driver, Control("BrokerType", "Opportunity")).Click();
            Element(driver, Control("BrokerTypeBlankOption", "Opportunity")).Click();

            // Check Broker value After Setting Blank Broker Type
            string brokerWithBlankBrokerType = Element(driver, Control("BrokerQuickAccount1", "Opportunity")).GetAttribute("aria-checked");
            if (brokerWithBlankBrokerType == "true")
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Broker is displaying " + brokerWithBlankBrokerType + "as expected after setting Blank Broker type", "Broker value is displaying as expected after setting Blank Broker type.");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Broker is not displaying " + brokerWithBlankBrokerType + "as expected before setting Blank Broker type", "Broker value is not displaying as expected after setting Blank Broker type.");
            }

            // Click on Broker toggle button and verify null value is selected as Broker Type
            Element(driver, Control("BrokerQuickAccount1", "Opportunity")).Click();
            string BrokerTypeValue = Element(driver, Control("BrokerType", "Opportunity")).GetAttribute("value");
            if (BrokerTypeValue == "-1")
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Broker is displaying null after turning the toggle button off", "Broker value is displaying null as expected.");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Broker is not displaying null after turning the toggle button off", "Broker value is not displaying null as expected.");
            }

            // Click Save and Close button
            ThinkTime(3);
            WaitUntil(driver, Control("ButtonSaveAndCloseContacts", "Opportunity"), 30);
            MoveToElement(driver, Control("ButtonSaveAndCloseContacts", "Opportunity"));
            Element(driver, Control("ButtonSaveAndCloseContacts", "Opportunity")).Click();

            // Select the created Contact to edit
            VerifyContacts(driver, testInReport, testName, testDataIteration, NewContactLname);

            scrollDownContactsPageBroker1(driver, testInReport, testName, testDataIteration);
            ThinkTime(5);

            // Verify Broker is displaying previously saved value
            string brokerWithBlankBrokerTypeAfterSave = Element(driver, Control("BrokerQuickAccount", "Opportunity")).GetAttribute("aria-checked");
            if (brokerWithBlankBrokerTypeAfterSave == "false")
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Broker is displaying " + brokerWithBlankBrokerTypeAfterSave + "as expected after saving the Contact", "Broker value is displaying as expected after after saving the Contact.");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Broker is not displaying " + brokerWithBlankBrokerTypeAfterSave + "as expected after saving the Contact", "Broker value is not displaying as expected after saving the Contact.");
            }

            // Select Broker Type with a value
            Element(driver, Control("BrokerType", "Opportunity")).Click();
            Element(driver, Control("BrokerTypeOption", "Opportunity")).Click();

            // Check Broker value After Setting Broker Type
            string brokerAfterSettingBrokerType1 = Element(driver, Control("BrokerQuickAccount1", "Opportunity")).GetAttribute("aria-checked");
            if (brokerAfterSettingBrokerType1 == "true")
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Broker is displaying " + brokerAfterSettingBrokerType1 + "as expected after setting Broker type while editing", "Broker value is displaying as expected after setting Broker type while editing.");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Broker is not displaying " + brokerAfterSettingBrokerType1 + "as expected before setting Broker type while editing", "Broker value is not displaying as expected after setting Broker type while editing.");
            }

            // Select Broker Type with a blank value
            Element(driver, Control("BrokerType", "Opportunity")).Click();
            Element(driver, Control("BrokerTypeBlankOption", "Opportunity")).Click();

            // Check Broker value After Setting Blank Broker Type
            string brokerWithBlankBrokerType1 = Element(driver, Control("BrokerQuickAccount1", "Opportunity")).GetAttribute("aria-checked");
            if (brokerWithBlankBrokerType1 == "true")
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Broker is displaying " + brokerWithBlankBrokerType1 + "as expected after setting Blank Broker type while editing", "Broker value is displaying as expected after setting Blank Broker type while editing.");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Broker is not displaying " + brokerWithBlankBrokerType1 + "as expected before setting Blank Broker type while editing", "Broker value is not displaying as expected after setting Blank Broker type while editing.");
            }

            // Click on Broker toggle button and verify null value is selected as Broker Type
            Element(driver, Control("BrokerQuickAccount1", "Opportunity")).Click();
            string BrokerTypeValue1 = Element(driver, Control("BrokerType", "Opportunity")).GetAttribute("value");
            if (BrokerTypeValue1 == "-1")
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Broker is displaying null after turning the toggle button off while edit", "Broker value is displaying null as expected.");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Broker is not displaying null after turning the toggle button off while edit", "Broker value is not displaying null as expected.");
            }

            // Click Save and Close button
            ThinkTime(3);
            WaitUntil(driver, Control("ButtonSaveAndCloseContacts", "Opportunity"), 30);
            MoveToElement(driver, Control("ButtonSaveAndCloseContacts", "Opportunity"));
            Element(driver, Control("ButtonSaveAndCloseContacts", "Opportunity")).Click();
        }
        //For scrolling down the container in Contacts page to Broker.
        public void scrollDownContactsPageBroker(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {

            IWebElement scroll = Element(driver, Control("scrollDownOpportunity", "Opportunity"));
            ElementHighlight(driver, Control("scrollDownOpportunity", "Opportunity"));
            IJavaScriptExecutor js = (IJavaScriptExecutor)driver;
            js.ExecuteScript("arguments[0].scrollTop+=550", scroll);

        }

        //Method to create Account to check Broker field
        public void CreateAccountToCheckBroker(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string companyName, string _time)
        {
            string NewCompanyName = companyName + _time;

            // Click on Contact from menu
            NavigateToEntity(driver, testInReport, testName, testDataIteration, "Accounts");

            // Click on Add Contact button
            ClickonNewButton(driver, testInReport, testName, testDataIteration, "New");

            // Enter Company Name
            ThinkTime(2);
            WaitClear(driver, testInReport, testName, testDataIteration, "NewCompanyNameInput", "Opportunity");
            Element(driver, Control("NewCompanyNameInput", "Opportunity")).SendKeys(NewCompanyName);

            scrollDownAccountsPageBroker(driver, testInReport, testName, testDataIteration);
            ThinkTime(5);

            // Check Broker value Before Setting Broker Type
            string brokerBeforeSettingBrokerType = Element(driver, Control("BrokerQuickAccount", "Opportunity")).GetAttribute("aria-checked");
            if (brokerBeforeSettingBrokerType == "false")
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Broker is displaying " + brokerBeforeSettingBrokerType + "as expected before setting Broker type", "Broker value is displaying as expected before setting Broker type.");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Broker is not displaying " + brokerBeforeSettingBrokerType + "as expected before setting Broker type", "Broker value is not displaying as expected before setting Broker type.");
            }

            // Select Broker Type with a value
            Element(driver, Control("BrokerType", "Opportunity")).Click();
            Element(driver, Control("BrokerTypeOption", "Opportunity")).Click();

            // Check Broker value After Setting Broker Type
            string brokerAfterSettingBrokerType = Element(driver, Control("BrokerQuickAccount1", "Opportunity")).GetAttribute("aria-checked");
            if (brokerAfterSettingBrokerType == "true")
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Broker is displaying " + brokerAfterSettingBrokerType + "as expected after setting Broker type", "Broker value is displaying as expected after setting Broker type.");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Broker is not displaying " + brokerAfterSettingBrokerType + "as expected before setting Broker type", "Broker value is not displaying as expected after setting Broker type.");
            }

            // Select Broker Type with a blank value
            Element(driver, Control("BrokerType", "Opportunity")).Click();
            Element(driver, Control("BrokerTypeBlankOption", "Opportunity")).Click();

            // Check Broker value After Setting Blank Broker Type
            string brokerWithBlankBrokerType = Element(driver, Control("BrokerQuickAccount1", "Opportunity")).GetAttribute("aria-checked");
            if (brokerWithBlankBrokerType == "true")
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Broker is displaying " + brokerWithBlankBrokerType + "as expected after setting Blank Broker type", "Broker value is displaying as expected after setting Blank Broker type.");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Broker is not displaying " + brokerWithBlankBrokerType + "as expected before setting Blank Broker type", "Broker value is not displaying as expected after setting Blank Broker type.");
            }

            // Click on Broker toggle button and verify null value is selected as Broker Type
            Element(driver, Control("BrokerQuickAccount1", "Opportunity")).Click();
            string BrokerTypeValue = Element(driver, Control("BrokerType", "Opportunity")).GetAttribute("value");
            if (BrokerTypeValue == "-1")
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Broker is displaying null after turning the toggle button off", "Broker value is displaying null as expected.");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Broker is not displaying null after turning the toggle button off", "Broker value is not displaying null as expected.");
            }

            // Click Save and Close button
            ThinkTime(3);
            WaitUntil(driver, Control("ButtonSaveAndCloseAccounts", "Opportunity"), 40);
            MoveToElement(driver, Control("ButtonSaveAndCloseAccounts", "Opportunity"));
            Element(driver, Control("ButtonSaveAndCloseAccounts", "Opportunity")).Click();

            // Select the created Account to edit
            VerifyAccounts(driver, testInReport, testName, testDataIteration, NewCompanyName);

            scrollDownContactsPageBroker1(driver, testInReport, testName, testDataIteration);
            ThinkTime(5);

            // Verify Broker is displaying previously saved value
            string brokerWithBlankBrokerTypeAfterSave = Element(driver, Control("BrokerQuickAccount", "Opportunity")).GetAttribute("aria-checked");
            if (brokerWithBlankBrokerTypeAfterSave == "false")
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Broker is displaying " + brokerWithBlankBrokerTypeAfterSave + "as expected after saving the Contact", "Broker value is displaying as expected after after saving the Contact.");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Broker is not displaying " + brokerWithBlankBrokerTypeAfterSave + "as expected after saving the Contact", "Broker value is not displaying as expected after saving the Contact.");
            }

            // Select Broker Type with a value
            Element(driver, Control("BrokerType", "Opportunity")).Click();
            Element(driver, Control("BrokerTypeOption", "Opportunity")).Click();

            // Check Broker value After Setting Broker Type
            string brokerAfterSettingBrokerType1 = Element(driver, Control("BrokerQuickAccount1", "Opportunity")).GetAttribute("aria-checked");
            if (brokerAfterSettingBrokerType1 == "true")
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Broker is displaying " + brokerAfterSettingBrokerType1 + "as expected after setting Broker type while editing", "Broker value is displaying as expected after setting Broker type while editing.");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Broker is not displaying " + brokerAfterSettingBrokerType1 + "as expected before setting Broker type while editing", "Broker value is not displaying as expected after setting Broker type while editing.");
            }

            // Select Broker Type with a blank value
            Element(driver, Control("BrokerType", "Opportunity")).Click();
            Element(driver, Control("BrokerTypeBlankOption", "Opportunity")).Click();

            // Check Broker value After Setting Blank Broker Type
            string brokerWithBlankBrokerType1 = Element(driver, Control("BrokerQuickAccount1", "Opportunity")).GetAttribute("aria-checked");
            if (brokerWithBlankBrokerType1 == "true")
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Broker is displaying " + brokerWithBlankBrokerType1 + "as expected after setting Blank Broker type while editing", "Broker value is displaying as expected after setting Blank Broker type while editing.");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Broker is not displaying " + brokerWithBlankBrokerType1 + "as expected before setting Blank Broker type while editing", "Broker value is not displaying as expected after setting Blank Broker type while editing.");
            }

            // Click on Broker toggle button and verify null value is selected as Broker Type
            Element(driver, Control("BrokerQuickAccount1", "Opportunity")).Click();
            string BrokerTypeValue1 = Element(driver, Control("BrokerType", "Opportunity")).GetAttribute("value");
            if (BrokerTypeValue1 == "-1")
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Broker is displaying null after turning the toggle button off", "Broker value is displaying null as expected.");
            }
            else
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Broker is not displaying null after turning the toggle button off", "Broker value is not displaying null as expected.");
            }

            // Click Save and Close button
            ThinkTime(3);
            WaitUntil(driver, Control("ButtonSaveAndCloseContacts", "Opportunity"), 30);
            MoveToElement(driver, Control("ButtonSaveAndCloseContacts", "Opportunity"));
            Element(driver, Control("ButtonSaveAndCloseContacts", "Opportunity")).Click();
        }

        //For scrolling down the container in Accounts page to Broker.
        public void scrollDownAccountsPageBroker(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {

            IWebElement scroll = Element(driver, Control("scrollDownOpportunity", "Opportunity"));
            ElementHighlight(driver, Control("scrollDownOpportunity", "Opportunity"));
            IJavaScriptExecutor js = (IJavaScriptExecutor)driver;
            js.ExecuteScript("arguments[0].scrollTop+=690", scroll);

        }

        //For scrolling down the container in Contacts page to Broker.
        public void scrollDownContactsPageBroker1(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration)
        {

            IWebElement scroll = Element(driver, Control("scrollDownOpportunity", "Opportunity"));
            ElementHighlight(driver, Control("scrollDownOpportunity", "Opportunity"));
            IJavaScriptExecutor js = (IJavaScriptExecutor)driver;
            js.ExecuteScript("arguments[0].scrollTop+=900", scroll);

        }

        //Generic function to search and land on Contacts page
        public void VerifyAccountsOld(IWebDriver driver, ExtentTest testInReport, string testName, string testDataIteration, string CompanyName)
        {
            ThinkTime(7);
            WaitUntil(driver, Control("QuickSearch", "Generic"), 80);
            Element(driver, Control("QuickSearch", "Generic")).SendKeys(CompanyName);
            Element(driver, Control("QuickSearch", "Generic")).SendKeys(Keys.Enter);

            ThinkTime(4);
            Element(driver, Control("Employee", CompanyName, "Generic")).Click();
            WaitUntil(driver, Control("TitleCompanyInformation", "Generic"), 30);
            if (Elements(driver, Control("TitleCompanyInformation", "Generic")) == 0)
            {
                AddLog(driver, testInReport, testName, testDataIteration, "Fail", "Accounts Page is not displayed", "Accounts Page");
                Assert.Fail("Accounts Page is not displayed");
            }

            else

            {
                AddLog(driver, testInReport, testName, testDataIteration, "Pass", "Accounts Page is displayed", "Accounts Page");
            }

        }



    }

}












