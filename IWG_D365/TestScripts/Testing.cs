using Microsoft.VisualStudio.TestTools.UnitTesting;
using SeleniumCSharpMSTest.Functions;
using System;
using System.Configuration;
using System.Linq;
using SeleniumCSharpMSTest.GeneralFunctions;
using OpenQA.Selenium;
using System.Globalization;
using System.Collections.Generic;
using System.Data;


namespace SeleniumCSharpMSTest.TestScripts
{


    //[TestClass]
    public class Testing : BaseClass
    {
        GenericFunctions generic = new GenericFunctions();
        LoginFunctions login = new LoginFunctions();
        IntegrationFunctions integration = new IntegrationFunctions();


        public static int maxTestRunsCount = 0;
        public static int maxTestRuns = maxTestRunsCount;
        public static String token;



        /// <summary>///
        /// Method to set report path.
        /// </summary>
        [AssemblyInitialize]
        public static void StartReport(TestContext test)
        {
            AssemblyInitialize();
        }


        /// <summary>///
        /// Method to generate acess token
        /// </summary>
        [ClassInitialize]
        public static void classInitialize(TestContext test)
        {
            IntegrationFunctions integration = new IntegrationFunctions();
            String clientid = "EB31CADD608C4E0CA349DC59C78188C8";
            String password = "825463c42dd50b78b7f283870f3d6649773e1b06d54c9b124b2feb27a4dafe79";
            String tokenjson = integration.accessTokenJSON(clientid, password);
            token = integration.AccessTokenGeneration(tokenjson);

        }


        /// <summary>
        /// Method to start the driver and report
        /// </summary>
        [TestInitialize]
        public void Initialize()
        {
            var startTime = DateTime.Now.ToString("dd/MM/yyThh:mm:ss");
            TestInitialize();
            maxTestRuns = maxTestRunsCount;
        }

        public void InitializeForRerun()
        {
            TestInitialize();

        }
        public static IEnumerable<object[]> RTA_5848_Data()
        {
            foreach (DataRow row in getTestCaseList("Salesagent"))
            {
                yield return new object[] { row };
            }
        }


        /// <summary>
        /// Test Method to "Login to CRM" - Example on how rerun of test method can be Implemented if a element identification fails
        /// </summary>
        [TestCategory("smoke"), TestCategory("sample"), TestCategory("NoRework")]
        [TestProperty("TestcaseID", "TCRTA-")]
        [DataTestMethod]
        [DynamicData(nameof(RTA_5848_Data), DynamicDataSourceType.Method)]
        public void TC_01(DataRow Ro)
        {
            try
            {

                //login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                // generic.LoginVerify(driver, extentTest, testName, testDataIteration, Ro["UserName"].ToString(), Ro["Password"].ToString(), Ro["User"].ToString());
                // login.Logout(driver, extentTest, testName, testDataIteration);
            }
            catch (Exception e)
            {
                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Unexpected error " + e, "Unexpectederror");

            }
        }

        public static IEnumerable<object[]> RTA_5006()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }

        /// </summary>
        /// To verify whether book a tour button is available
        [TestCategory("smoke"), TestCategory("Validation1"), TestCategory("RerunMay9"), TestCategory("25Aug"), TestCategory("SprintUN")]
        [TestProperty("TestcaseID", "RTA-5006")]
        [DataTestMethod]
        [DynamicData(nameof(RTA_5006), DynamicDataSourceType.Method)]
        public void RTA_5006_BookTourbuttonisavailablewithintheopportunity(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "My Open Opportunities");
                //generic.SelectingActiveCell(driver, extentTest, testName, testDataIteration);
                generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);

                generic.CreateNewOpportunityBookATour(driver, extentTest, testName, testDataIteration, Ro["Centre"].ToString());

                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Button"].ToString());
                AddLog(driver, extentTest, testName, testDataIteration, "Pass", "Tour button available", "Tourbutton available");
                login.Logout(driver, extentTest, testName, testDataIteration);


            }
            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");


            }
        }



        public static IEnumerable<object[]> Test130()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }



        /// </summary>
        /// To verify whether book a tour button is available
        [TestCategory("smoke"), TestCategory("1410"), TestCategory("RerunMay9"), TestCategory("RerunJune30"), TestCategory("SprintUN")]
        [TestProperty("TestcaseID", "RTA-5073")]
        [DataTestMethod]
        [DynamicData(nameof(Test130), DynamicDataSourceType.Method)]
        public void VerifyBookATourTimeSlot_RTA_5073(DataRow Ro)
        {
            //try
            //{
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            driver.Navigate().Refresh();
            generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "Open Opportunities");
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
            generic.OpenRecordGlobalSearch(driver, extentTest, testDataIteration, testName, Ro["TestBookATour1"].ToString());
            //driver.Navigate().Refresh();
            //generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);    
            generic.SelectRecomendedBussinessCentre1(driver, extentTest, testName, testDataIteration, Ro["BussinessCentre"].ToString());
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Button"].ToString());

            generic.VerifyFreeSlotBookATour(driver, extentTest, testName, testDataIteration, Ro["VerifyCityDairy"].ToString(), Ro["VerifyCenter"].ToString());

            // generic.CancelTour(driver, extentTest, testName, testDataIteration);
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
            login.Logout(driver, extentTest, testName, testDataIteration);


            //}
            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");


            //}
        }

        public static IEnumerable<object[]> RTA_5023()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        /// </summary>
        /// To verify the City Diary scheduling only presents availability based on free slots within work hours
        [TestCategory("RerunMay9"), TestCategory("Validation1"), TestCategory("RF24-4-20"), TestCategory("BookaTour"), TestCategory("27Aug"), TestCategory("SprintUN")]
        [TestProperty("TestcaseID", "RTA-5023")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5023), DynamicDataSourceType.Method)]
        public void VerifyBookATourOutOfOfficeHour_5023(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName3"].ToString(), Ro["Password3"].ToString());
                string parentWindowHandle1 = driver.CurrentWindowHandle;
                // generic.OutofOfficeSetting(driver, extentTest, testName, testDataIteration);
                // login.LoginforUrl(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName3"].ToString(), Ro["Password3"].ToString());

                generic.NavigateToMainDropDown1(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);

                generic.CreateNewOpportunityBookATour(driver, extentTest, testName, testDataIteration, Ro["BussinessCentre2"].ToString());



                generic.BookTourBtn(driver, extentTest, testName, testDataIteration, "Book Tour");
                generic.VerifyRedBlockforAbsentASMNew(driver, extentTest, testDataIteration, testName);
                // generic.DelOutofOffice(driver, extentTest, testName, testDataIteration);
                //  generic.VerifyFreeSlotBookATour(driver, extentTest, testName, testDataIteration, Ro["VerifyCityDairy"].ToString(), Ro["VerifyCenter"].ToString());
                login.Logout(driver, extentTest, testName, testDataIteration);

            }
            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }

        }
        public static IEnumerable<object[]> RTA_5050()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        /// </summary>
        /// To verify To check if the highest ranked ASM is on holiday then next rank ASM is assigned.
        [TestCategory("RerunMay9"), TestCategory("Validation1"), TestCategory("RF24-4-20"), TestCategory("BookaTour"), TestCategory("SprintUN")]
        [TestProperty("TestcaseID", "RTA-5050")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5050), DynamicDataSourceType.Method)]
        public void VerifyBookATourASM1OnLeave_5050(DataRow Ro)
        {
            //try
            //{

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName3"].ToString(), Ro["Password3"].ToString());
            // string parentWindowHandle1 = driver.CurrentWindowHandle;
            //generic.OutofOfficeSetting(driver, extentTest, testName, testDataIteration);
            //login.LoginforUrl(driver, extentTest, testName, testDataIteration, "https://regusuat.crm4.dynamics.com/main.aspx?appid=85b98b72-9354-478d-832e-ad85d7d4d9c3&pagetype=dashboard&id=6d5b8eaf-2da6-ea11-a812-000d3a3a7a29&type=system&_canOverride=true", Ro["UserName3"].ToString(), Ro["Password3"].ToString());

            generic.NavigateToMainDropDown1(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);

            generic.CreateNewOpportunityBookATour(driver, extentTest, testName, testDataIteration, Ro["BussinessCentre2"].ToString());



            generic.BookTourBtn(driver, extentTest, testName, testDataIteration, "Book Tour");
            generic.VerifyRedBlockforAbsentASMNew(driver, extentTest, testDataIteration, testName);
            // generic.DelOutofOffice(driver, extentTest, testName, testDataIteration);
            //  generic.VerifyFreeSlotBookATour(driver, extentTest, testName, testDataIteration, Ro["VerifyCityDairy"].ToString(), Ro["VerifyCenter"].ToString());
            login.Logout(driver, extentTest, testName, testDataIteration);
            //}
            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");


            //}
        }
        public static IEnumerable<object[]> RTA_4987()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        /// </summary>
        /// To verify To check if the highest ranked ASM is on holiday then next rank ASM is assigned.
        [TestCategory("RerunMay9"), TestCategory("Validation1"), TestCategory("25Aug"), TestCategory("30062020_1"), TestCategory("30062020_1"), TestCategory("SprintUN")]
        [TestProperty("TestcaseID", "RTA-4987")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_4987), DynamicDataSourceType.Method)]
        public void Bookatourcalenderforwardview_4987(DataRow Ro)
        {
            try
            {

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
                generic.CreateNewOpportunityBookATour(driver, extentTest, testName, testDataIteration, Ro["BussinessCentre2"].ToString());
                generic.Bookatourcalender(driver, extentTest, testDataIteration, testName);
                login.Logout(driver, extentTest, testName, testDataIteration);

            }
            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");


            }
        }

        public static IEnumerable<object[]> RTA_5043_Data()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }

        /// </summary>
        /// To verify the screen should not display vertical slots more than the number of Area Sale manager linked to the selected centre.
        [TestCategory("RerunMay9"), TestCategory("Validation1"), TestCategory("BookaTour"), TestCategory("SprintUN")]
        [TestProperty("TestcaseID", "RTA-5043")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5043_Data), DynamicDataSourceType.Method)]
        public void VerifySlotNumberBookATour_5043(DataRow Ro)
        {
            try
            {

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);
                int count = generic.VerifyBookableResourcesBookATour(driver, extentTest, testName, testDataIteration, Ro["BussinessCentre2"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                generic.CreateNewOpportunityBookATour(driver, extentTest, testName, testDataIteration, Ro["BussinessCentre2"].ToString());
                generic.UpdateStartDate(driver, extentTest, testDataIteration, testName, Ro["SelectMonth"].ToString(), Ro["SelectDate"].ToString());
                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Button"].ToString());
                generic.VerifyScreenDisplaysColouredBlocks(driver, extentTest, testName, testDataIteration, count);

                login.Logout(driver, extentTest, testName, testDataIteration);

            }
            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");


            }
        }

        public static IEnumerable<object[]> RTA_5042()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }

        /// </summary>
        /// To verify the scheduling screen displays vertical slots less than or equal to number of Area Sales Manager linked to the selected centre.
        [TestCategory("RerunMay9"), TestCategory("Validation1"), TestCategory("BookaTour"), TestCategory("SprintUN"), TestCategory("25Aug")]
        [TestProperty("TestcaseID", "RTA-5042")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5042), DynamicDataSourceType.Method)]
        public void VerifySlotNumberBookATour_5042(DataRow Ro)
        {
            //try
            //{

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);
            int count = generic.VerifyBookableResourcesBookATour(driver, extentTest, testName, testDataIteration, Ro["BussinessCentre2"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.CreateNewOpportunityBookATour(driver, extentTest, testName, testDataIteration, Ro["BussinessCentre2"].ToString());
            generic.UpdateStartDate(driver, extentTest, testDataIteration, testName, Ro["SelectMonth"].ToString(), Ro["SelectDate"].ToString());
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Button"].ToString());
            generic.VerifyScreenDisplaysColouredBlocks(driver, extentTest, testName, testDataIteration, count);


            login.Logout(driver, extentTest, testName, testDataIteration);
            //}
            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");


            //}
        }
        public static IEnumerable<object[]> RTA14028()
        {
            foreach (DataRow row in getTestCaseList("DirectSalesAgent"))
            {
                yield return new object[] { row };
            }
        }

        /// <summary>
        /// CRM-5301
        /// Verify A qualified lead -> opportunity will have the Major and Minor sources locked
        /// </summary>
        [TestCategory("Priority1duplicate"), TestCategory("Validation1"), TestCategory("Sprint0.5"), TestCategory("Sep25"), TestCategory("Sprint3640")]
        [TestProperty("TestcaseID", "RTA-14028")]

        [DataTestMethod]
        [DynamicData(nameof(RTA14028), DynamicDataSourceType.Method)]
        public void RTA14028_DirectSales_Verifymajorandminorfieldsforqualifiedleadafterrefresh(DataRow Ro)
        {
            try
            {
                // Login as Direct Sales Agent and choose Sales
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                string time = System.DateTime.Now.ToString();

                // Select Contacts entity and create new
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
                generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
                generic.CreateNewContactDirectSalesUser(driver, extentTest, testDataIteration, testName, Ro["Contactname"].ToString(), time);
                string contactname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");

                // Select lead 
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString());

                string now = System.DateTime.Now.ToString();
                generic.createleaddirectsales(driver, extentTest, testName, testDataIteration, "Lead" + now, Ro["Email"].ToString(), Ro["BussinessPhone"].ToString(), Ro["Source"].ToString(), Ro["MajorSource"].ToString(), Ro["MinorSource2"].ToString(), now, "ExistingContact", "", contactname, "", "", "Alberta");



                // Navigate to Entity and Search for the newly created Lead
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString());
                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "All Leads");

                generic.OpenRecordGlobalSearch(driver, extentTest, testDataIteration, testName, "Lead" + now);

                // Verify the minor and major souorce fields are read only
                generic.NavigateToRelatedTabEntitiesLead(driver, extentTest, testName, testDataIteration, Ro["RelatedTabEntity"].ToString());
                generic.OppSelect(driver, extentTest, testName, testDataIteration);

                // Refresh the page
                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());
                string oppname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");

                // Verify the minor and major souorce fields are read only
                generic.VerifyOppreadonlyfields(driver, extentTest, testName, testDataIteration, "Fieldspopulated", oppname, "Opportunities");

                // generic.VerifyOppreadonlyfieldsNew(driver, extentTest, testName, testDataIteration, "Fieldspopulated", "Lead" + now, "Leads");

                // Logout from the app
                login.Logout(driver, extentTest, testName, testDataIteration);

            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }


        public static IEnumerable<object[]> RTA14034()
        {
            foreach (DataRow row in getTestCaseList("DirectSalesAgent"))
            {
                yield return new object[] { row };
            }
        }




        /// <summary>
        /// CRM-5301
        /// A Quick Created Lead has the Major and Minor Source fields locked
        /// </summary>
        [TestCategory("Direct Sales"), TestCategory("Priority1"), TestCategory("Sprint0.5"), TestCategory("25Nov"), TestCategory("Sprint3640")]
        [TestProperty("TestcaseID", "RTA-14034")]
        [DataTestMethod]
        [DynamicData(nameof(RTA14034), DynamicDataSourceType.Method)]
        public void RTA14034_DirectSales_Verifymajorandminorfieldslockedforqualifiedlead(DataRow Ro)
        {

            //try
            //{
            // Login as Direct Sales Agent and choose Sales
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            string time = System.DateTime.Now.ToString();

            // Select Contacts entity and create new
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
            generic.CreateNewContactDirectSalesUser(driver, extentTest, testDataIteration, testName, Ro["Contactname"].ToString(), time);
            string contactname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");

            // Select lead 
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString());

            string now = System.DateTime.Now.ToString();
            generic.createleaddirectsales(driver, extentTest, testName, testDataIteration, "Lead" + now, Ro["Email"].ToString(), Ro["BussinessPhone"].ToString(), Ro["Source"].ToString(), Ro["MajorSource"].ToString(), Ro["MinorSource2"].ToString(), now, "ExistingContact", "", contactname, "", "", "Alberta");
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());


            //// Navigate to Entity and Search for the newly created Lead
            //generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString());
            //    generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "All Leads");

            //    generic.OpenRecordGlobalSearch(driver, extentTest, testDataIteration, testName, "Lead" + now);

            // Verify the minor and major souorce fields are read only
            generic.VerifyOppreadonlyfieldsNew(driver, extentTest, testName, testDataIteration, "Fieldspopulated", "Lead" + now, "Leads");

            // Logout from the app
            login.Logout(driver, extentTest, testName, testDataIteration);

            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}
        }


        public static IEnumerable<object[]> RTA_14007()
        {
            foreach (DataRow row in getTestCaseList("DirectSalesAgent"))
            {
                yield return new object[] { row };
            }
        }

        /// <summary>
        /// CRM-5301
        /// A newly created opportunity should lock the Major and Minor source fields upon save and refresh
        /// </summary>

        [TestCategory("DirectSales"), TestCategory("Priority1"), TestCategory("Sprint0.5"), TestCategory("26AugFixed"), TestCategory("Sprint3640")]
        [TestProperty("TestcaseID", "RTA-14007")]
        [DataTestMethod]
        [DynamicData(nameof(RTA_14007), DynamicDataSourceType.Method)]
        public void RTA_14007_DirectSales_Verifymajorandminorsourcefieldsarereadonlyaftersave(DataRow Ro)
        {
            try
            {

                // Login as Direct Sales Agent and choose Sales
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());

                // Select Contacts entity and create new
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
                //string time = System.DateTime.Now.ToString();
                string now = System.DateTime.Now.ToString();

                generic.CreateNewContactEnterpriseSales(driver, extentTest, testDataIteration, testName, Ro["Contactname"].ToString(), now, Ro["Email"].ToString(), "");
                string contactname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");

                // Select opportunity tab and create New with minor and major source fields
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
                generic.CreateNewOpportunityEntetrprisewithprevcontact(driver, extentTest, testDataIteration, testName, Ro["TestChannel"].ToString(), Ro["TestMajorSource"].ToString(), Ro["TestMinorSource"].ToString(), contactname, Ro["spacesbrand"].ToString());
                generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);

                // Refresh the page
                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());

                // Verify the minor and major souorce fields are read only
                generic.VerifyOppreadonlyfields(driver, extentTest, testName, testDataIteration, "Fieldspopulated", contactname, "Opportunities");

                //// Logout
                login.Logout(driver, extentTest, testName, testDataIteration);
            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }

        public static IEnumerable<object[]> RTA_14032()
        {
            foreach (DataRow row in getTestCaseList("DirectSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// CRM-5301
        /// A Sales Admin user is able to edit the Major and Minor Source fields
        /// </summary>

        [TestCategory("Direct Sales"), TestCategory("Priority1"), TestCategory("Sprint0.5"), TestCategory("24Nov"), TestCategory("Sprint3640")]
        [TestProperty("TestcaseID", "RTA-14032")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_14032), DynamicDataSourceType.Method)]
        public void RTA_14032_IWGSalesAgent_Verifysalesadminmodifymajorandminorfields(DataRow Ro)
        {
            //try
            //{

            // Login as IWG Sales Agent and choose Sales
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());

            // Select Contacts entity and create new
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
            string time = System.DateTime.Now.ToString();
            string contactname = generic.CreateNewContactEnterpriseSales(driver, extentTest, testDataIteration, testName, Ro["Contactname"].ToString(), time, Ro["Email"].ToString());

            // Select opportunity tab and create New with minor and major source fields
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
            generic.CreateNewOpportunityEntetrprisewithprevcontact(driver, extentTest, testDataIteration, testName, Ro["TestChannel"].ToString(), Ro["TestMajorSource"].ToString(), Ro["TestMinorSource"].ToString(), contactname, Ro["spacesbrand"].ToString());
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);

            // Create Lead
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString());
            generic.createleaddirectsales(driver, extentTest, testName, testDataIteration, "AutomationLead" + time, Ro["Email"].ToString(), Ro["BussinessPhone"].ToString(), Ro["Source"].ToString(), Ro["MajorSource"].ToString(), Ro["MinorSource2"].ToString(), time, "", "", "", "", "", "Alberta");

            //// Logout
            //login.Logout(driver, extentTest, testName, testDataIteration);

            // Login as Sales Adm and choose Sales
            generic.Loginafterlogout(driver, extentTest, testName, testDataIteration, Ro["UserName1"].ToString(), Ro["Password1"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "All Opportunities");

            // Open Opportunity
            generic.RecordGlobalSearchopportunity(driver, extentTest, testName, testDataIteration, contactname);

            generic.SelectActiveCellContacts(driver, extentTest, testName, testDataIteration);

            // Verify major and minor fields are editable
            generic.scrollDownOpportunityEnterprise(driver, extentTest, testName, testDataIteration);
            generic.scrollDownOpportunityEnterprise(driver, extentTest, testName, testDataIteration);
            generic.Modifymajorandminorfields(driver, extentTest, testName, testDataIteration, "Retail", "B");

            //generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString());
            //generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, "New");
            //generic.CreateNewOpportunityEntetrprisewithprevcontactNew(driver, extentTest, testDataIteration, testName, Ro["TestChannel"].ToString(), Ro["TestMajorSource"].ToString(), Ro["TestMinorSource"].ToString(), contactname, Ro["spacesbrand"].ToString());

            // generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "All Leads");

            // Open Lead
            //generic.RecordGlobalSearchopportunity(driver, extentTest, testName, testDataIteration, "AutomationLead" + time);

            // generic.SelectActiveCellContacts(driver, extentTest, testName, testDataIteration);

            //// Verify major and minor fields are editable
            //generic.scrollDownOpportunityEnterprise(driver, extentTest, testName, testDataIteration);
            //generic.scrollDownOpportunityEnterprise(driver, extentTest, testName, testDataIteration);
            //generic.Modifymajorandminorfields(driver, extentTest, testName, testDataIteration, "Retail", "B");


            // Logout
            login.Logout(driver, extentTest, testName, testDataIteration);
            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}
        }

        public static IEnumerable<object[]> RTA_14970()
        {
            foreach (DataRow row in getTestCaseList("DirectSalesAgent"))
            {
                yield return new object[] { row };
            }
        }

        /// <summary>
        /// CRM-3997
        /// A Sales Admin user is able to edit the Major and Minor Source fields
        /// </summary>

        [TestCategory("Regresssion"), TestCategory("Priority1"), TestCategory("abhi"), TestCategory("Sprint3640"), TestCategory("HF")]
        [TestProperty("TestcaseID", "RTA-14970")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_14970), DynamicDataSourceType.Method)]
        public void RTA_14970_Verifycentrefieldisnotdisplayed(DataRow Ro)
        {

            try
            {
                string emailid = "crm.test2@regus.com";
                // Login as IWG Sales Agent and choose Sales
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                string now = System.DateTime.Now.ToString();

                // Select Contacts entity and create new
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
                generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);


                // string contactname1 = generic.CreateNewContactEnterpriseSales(driver, extentTest, testDataIteration, testName, Ro["Contactname"].ToString(), now, Ro["Email"].ToString(), "");
                generic.CreateNewContactEnterpriseSales1(driver, extentTest, testDataIteration, testName, Ro["Contactname"].ToString(), now);

                generic.EnterContactNumber(driver, extentTest, testName, testDataIteration, Ro["BussinessPhone"].ToString());
                generic.scrollDownOpportunityEnterpriseCust(driver, extentTest, testName, testDataIteration, "400");

                generic.Movetobroker(driver, extentTest, testName, testDataIteration, Ro["CustomerType2"].ToString());

                string time = System.DateTime.Now.ToString();
                string contactname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");
                string newdate = DateTime.Today.ToString("MM/dd/yyyy").Replace("-", "/");
                // Create Lead
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString());
                generic.createleaddirectsales(driver, extentTest, testName, testDataIteration, "AutomationLead" + now, Ro["Email"].ToString(), Ro["BussinessPhone"].ToString(), Ro["Source"].ToString(), Ro["MajorSource"].ToString(), Ro["MinorSource2"].ToString(), time, "", "", "", "", "", "Alberta");

                // Link Broker Contact
                generic.LinkBrokerdetails(driver, extentTest, testName, testDataIteration, contactname, Ro["BrokerContact"].ToString());
                //  generic.Maycontactcustomer(driver, extentTest, testDataIteration, testName);

                // Open primary Opp
                generic.NavigateToRelatedTabEntitiesLead(driver, extentTest, testName, testDataIteration, Ro["RelatedTabEntity"].ToString());
                generic.OppSelect(driver, extentTest, testName, testDataIteration);
                ThinkTime(6);
                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());
                ThinkTime(10);
                string oppreference = Element(driver, Control("OppReference", "EnterpriseSales")).GetAttribute("title");
                //generic.SelectOpportunityheader(driver, extentTest, testName, testDataIteration, "Qualify", "Form:opportunity");
                //ThinkTime(10);
                //generic.ClickContinue(driver, extentTest, testName, testDataIteration);
                //ThinkTime(10);
                // generic.saveFooter(driver, extentTest, testName, testDataIteration);
                ThinkTime(6);

                // Select Activities tab and verify phonecall activity is created
                generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, "Activities");
                //generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, Ro["Tab"].ToString());
                generic.SelectActivities1(driver, extentTest, testName, testDataIteration);
                string TimeInSec = generic.GetSystemTimeInSecnew(driver, extentTest, testDataIteration, testName);
                generic.NewActivity(driver, extentTest, testName, testDataIteration);
                String Account = generic.QuickCreatePhoneCallActivityFromOppo(driver, extentTest, testDataIteration, testName, Ro["SubjectValue"].ToString(), newdate);
                //generic.VerifyActivityTitle(driver, extentTest, testName, testDataIteration, Ro["ActivityTitle"].ToString());

                // Open phonecall acivity from timeline
                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Summary"].ToString());
                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());
                generic.OpenPhonecallactivitytimeline(driver, extentTest, testName, testDataIteration);

                // Verify centre field is displayed
                generic.VerifyCentreinOpenPhoneCall(driver, extentTest, testName, testDataIteration);

                // Logout
                login.Logout(driver, extentTest, testName, testDataIteration);
                generic.DiscardChanges(driver, extentTest, testName, testDataIteration);
            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }


        public static IEnumerable<object[]> RTA_26776()
        {
            foreach (DataRow row in getTestCaseList("DirectSalesAgent"))
            {
                yield return new object[] { row };
            }
        }

        /// <summary>
        /// CRM-8879
        /// A Sales Admin user is able to edit the Major and Minor Source fields
        /// </summary>

        [TestCategory("Regresssion"), TestCategory("HotFix"), TestCategory("HFrerun")]
        [TestProperty("TestcaseID", "RTA-26776")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_26776), DynamicDataSourceType.Method)]
        public void RTA_26776_Verifyleadcontactandoppismappedtpphonecall(DataRow Ro)
        {

            //try
            //{

            // Login as IWG Sales Agent and choose Sales
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            string now = System.DateTime.Now.ToString();

            // Select Contacts entity and create new
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
            generic.CreateNewContactEnterpriseSales1(driver, extentTest, testDataIteration, testName, Ro["Contactname"].ToString(), now);

            string time = System.DateTime.Now.ToString();
            string contactname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");

            // Create Lead
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString());
            generic.createleaddirectsales(driver, extentTest, testName, testDataIteration, "AutomationLead" + now, Ro["Email"].ToString(), Ro["BussinessPhone"].ToString(), Ro["Source"].ToString(), Ro["MajorSource"].ToString(), Ro["MinorSource2"].ToString(), time, "", "", "", "", "", "Alberta");

            // Open primary Opp
            generic.NavigateToRelatedTabEntitiesLead(driver, extentTest, testName, testDataIteration, Ro["RelatedTabEntity"].ToString());
            generic.OppSelect(driver, extentTest, testName, testDataIteration);
            ThinkTime(6);
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());
            ThinkTime(10);
            string oppreference = Element(driver, Control("OppReference", "EnterpriseSales")).GetAttribute("title");
            string opptitle = generic.Openedrecordheadertitle(driver, extentTest, testName, testDataIteration);

            ThinkTime(6);
            string newdate = DateTime.Today.ToString("MM/dd/yyyy").Replace("-", "/");

            //Creating new phonecall activity
            generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, Ro["Tab"].ToString());
            generic.CreatePhoneCallactivityopp(driver, extentTest, testName, testDataIteration, Ro["ActivityButton"].ToString(), time, newdate);
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, "Refresh");

            // Open phonecall acivity from timeline
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Summary"].ToString());
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());

            generic.OpenPhonecallactivitytimeline(driver, extentTest, testName, testDataIteration);

            // Go to Adv Find and verify whether contact is displayed correctly
            string parent = driver.CurrentWindowHandle;
            generic.AdvancedFind(driver, extentTest, testName, testDataIteration);
            ThinkTime(2);
            generic.Advancedfindfilteresults(driver, extentTest, testName, testDataIteration, "Phone Calls", "[new]", "Opportunity", "Equals", oppreference, "Results", "pro_contactid");
            generic.Verifycolumnstatusinadvfind(driver, extentTest, testName, testDataIteration, Ro["Contactname"].ToString() + now);
            driver.Close();
            driver.SwitchTo().Window(parent);

            // Go to Adv Find and verify whether Opp is displayed correctly           
            generic.AdvancedFind(driver, extentTest, testName, testDataIteration);
            ThinkTime(2);
            generic.Advancedfindfilteresults(driver, extentTest, testName, testDataIteration, "Phone Calls", "[new]", "Opportunity", "Equals", oppreference, "Results", "pro_opportunityid");
            generic.Verifycolumnstatusinadvfind(driver, extentTest, testName, testDataIteration, opptitle);
            driver.Close();
            driver.SwitchTo().Window(parent);

            // Select Contacts entity and create new
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
            generic.DiscardChanges(driver, extentTest, testName, testDataIteration);
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
            generic.OpenRecordGlobalSearch(driver, extentTest, testName, testDataIteration, contactname);

            // Verify timeiine is diosplayed
            generic.OpenPhonecallactivitytimeline(driver, extentTest, testName, testDataIteration);

            // Logout
            login.Logout(driver, extentTest, testName, testDataIteration);
            generic.DiscardChanges(driver, extentTest, testName, testDataIteration);
            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}
        }



        public static IEnumerable<object[]> RTA_26481()
        {
            foreach (DataRow row in getTestCaseList("DirectSalesAgent"))
            {
                yield return new object[] { row };
            }
        }

        /// <summary>
        /// CRM-8879
        /// A Sales Admin user is able to edit the Major and Minor Source fields
        /// </summary>

        [TestCategory("Regresssion"), TestCategory("HotFix"), TestCategory("HF")]
        [TestProperty("TestcaseID", "RTA-26481")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_26481), DynamicDataSourceType.Method)]
        public void RTA_26481_Verifyleadcontactisnotmappedtophonecall(DataRow Ro)
        {

            //try
            //{

            // Login as IWG Sales Agent and choose Sales
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            string now = System.DateTime.Now.ToString();
            string newdate = DateTime.Today.ToString("MM/dd/yyyy").Replace("-", "/");

            // Select Contacts entity and create new
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
            generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);
            generic.CreateNewContactEnterpriseSales1(driver, extentTest, testDataIteration, testName, Ro["Contactname"].ToString(), now);

            string time = System.DateTime.Now.ToString();
            string contactname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");

            // Create Lead
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString());
            generic.createleaddirectsales(driver, extentTest, testName, testDataIteration, "AutomationLead" + now, Ro["Email"].ToString(), Ro["BussinessPhone"].ToString(), Ro["Source"].ToString(), Ro["MajorSource"].ToString(), Ro["MinorSource2"].ToString(), time, "", "", "", "", "", "Alberta");

            // Open primary Opp
            generic.NavigateToRelatedTabEntitiesLead(driver, extentTest, testName, testDataIteration, Ro["RelatedTabEntity"].ToString());
            generic.OppSelect(driver, extentTest, testName, testDataIteration);
            ThinkTime(6);
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());
            ThinkTime(10);
            string oppreference = Element(driver, Control("OppReference", "EnterpriseSales")).GetAttribute("title");
            string opptitle = generic.Openedrecordheadertitle(driver, extentTest, testName, testDataIteration);

            ThinkTime(6);

            // Nviagte to Opp and open the record
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "All Opportunities");
            generic.OpenRecordGlobalSearch(driver, extentTest, testName, testDataIteration, oppreference);

            // Select Activities tab and verify phonecall activity is created
            generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, "Activities");
            //generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, Ro["Tab"].ToString());
            generic.SelectActivities1(driver, extentTest, testName, testDataIteration);
            string TimeInSec = generic.GetSystemTimeInSecnew(driver, extentTest, testDataIteration, testName);
            generic.NewActivity(driver, extentTest, testName, testDataIteration);
            String phonecall = generic.QuickCreatePhoneCallActivityFromOppo(driver, extentTest, testDataIteration, testName, "AutomationLead" + now, newdate);

            // Go to Adv Find and verify whether contact is displayed correctly
            string parent = driver.CurrentWindowHandle;
            generic.AdvancedFind(driver, extentTest, testName, testDataIteration);
            ThinkTime(2);
            generic.Advancedfindfilteresults(driver, extentTest, testName, testDataIteration, "Phone Calls", "[new]", "Opportunity", "Equals", "oppreference", "Results", "pro_contactid");
            generic.Verifycolumnstatusinadvfind(driver, extentTest, testName, testDataIteration, Ro["Contactname"].ToString() + now);
            driver.Close();
            driver.SwitchTo().Window(parent);

            // Nviagte to Opp and open the record
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "All Opportunities");
            generic.OpenRecordGlobalSearch(driver, extentTest, testName, testDataIteration, oppreference);

            // Select Activities tab and open the newly created activity
            generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, "Activities");
            generic.selectRequiredActivitty(driver, extentTest, testName, testDataIteration, phonecall);

            // Update the Call To field - Contact
            generic.UpdateCalltofield(driver, extentTest, testName, testDataIteration, "crm test5");


            // Go to Adv Find and verify whether contact is displayed correctly          
            generic.AdvancedFind(driver, extentTest, testName, testDataIteration);
            ThinkTime(2);
            generic.Advancedfindfilteresults(driver, extentTest, testName, testDataIteration, "Phone Calls", "[new]", "Opportunity", "Equals", oppreference, "Results", "pro_contactid");
            generic.Verifycolumnstatusinadvfind(driver, extentTest, testName, testDataIteration, "crm test5");
            driver.Close();
            driver.SwitchTo().Window(parent);

            // Logout
            login.Logout(driver, extentTest, testName, testDataIteration);
            generic.DiscardChanges(driver, extentTest, testName, testDataIteration);
            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}
        }














        public static IEnumerable<object[]> RTA_13669()
        {
            foreach (DataRow row in getTestCaseList("DirectSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// Verify that task is created with a gap of 2hours between start and due date when Requested Tour date/time filed is filled for an existing Opportunity.
        /// </summary>

        [TestCategory("27AugFixed"), TestCategory("Priority1"), TestCategory("Sprint0.5"), TestCategory("Validation1"), TestCategory("Sprint3640")]
        [TestProperty("TestcaseID", "RTA-13669")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_13669), DynamicDataSourceType.Method)]
        public void RTA_13669_IWGSalesAgent_Verifytaskiscreattedafterrequesttourdetails(DataRow Ro)
        {
            //try
            //{

            // Login as IWG Sales Agent and choose Sales
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());

            // Select Contacts entity and create new
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
            string time = System.DateTime.Now.ToString();
            string contactname = generic.CreateNewContactEnterpriseSales(driver, extentTest, testDataIteration, testName, Ro["Contactname"].ToString(), time, Ro["Email"].ToString());

            // Select opportunity tab and create New with minor and major source fields
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
            generic.CreateNewOpportunityEntetrprisewithprevcontact(driver, extentTest, testDataIteration, testName, Ro["TestChannel"].ToString(), Ro["TestMajorSource"].ToString(), Ro["TestMinorSource"].ToString(), contactname, Ro["spacesbrand"].ToString());
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());
            ThinkTime(5);
            string oppname = Element(driver, Control("HeadingCapture", "GenericOld")).GetAttribute("innerText");
            string Date = DateTime.Today.ToString("MM-dd-yyyy");

            // Enter requested tour details and refresh t verify the timeline
            generic.Enterrequestedtourdetails(driver, extentTest, testDataIteration, testName, "Date of Requested Tour Date/Time", Date);

            // Get time from timeline
            generic.scrollDownOpportunityEnterprise(driver, extentTest, testName, testDataIteration);

            string requesteddate = Element(driver, Control("Requesteddate", "Opportunity")).GetAttribute("defaultValue");
            ThinkTime(3);
            generic.scrollUpPage(driver, extentTest, testName, testDataIteration);

            string Timelinetime = Element(driver, Control("Timefortourintimeline2", "Opportunity")).GetAttribute("innerText");

            string starttime = DateTime.Now.AddHours(2).ToString(Timelinetime);
            ThinkTime(10);
            string parent = driver.CurrentWindowHandle;

            // Click on Advance Find
            string parentwindow = generic.AdvancedFind(driver, extentTest, testName, testDataIteration);

            /* // Add Column
             generic.AddColumninadvancefind(driver, extentTest, testName, testDataIteration, "ch_scheduledstart", parentwindow);
             */
            // Enter filter criteria
            generic.AdvancedfindfilterWithCntry(driver, extentTest, testName, testDataIteration, "Tasks", "Task", "Regarding (Opportunity)", "Contains Data", "Opportunity", contactname);

            // Verify due date for tour is 2 hours
            generic.Verifyduedateinadvancefind(driver, extentTest, testName, testDataIteration, requesteddate, starttime);
            driver.Close();
            driver.SwitchTo().Window(parent);

            //Logout
            login.Logout(driver, extentTest, testName, testDataIteration);
            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}
        }
        public static IEnumerable<object[]> RTA_13775()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }

        /// <summary>
        /// Verify that task is created with a gap of 2hours between start and due date when Requested Tour date/time filed is filled for an Opportunity which is qualified from a Lead
        /// </summary>

        [TestCategory("27Aug"), TestCategory("Priority1"), TestCategory("Sprint0.5"), TestCategory("Sep25"), TestCategory("Sprint3640")]
        [TestProperty("TestcaseID", "RTA-13775")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_13775), DynamicDataSourceType.Method)]
        public void RTA_13775_IWGSalesAgent_Verifytourdetailsforqualifiedlead(DataRow Ro)
        {
            //try
            //{

            // Login as IWG Sales Agent and choose Sales
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            string time = System.DateTime.Now.ToString();

            // Select Contacts entity and create new
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
            string contactname = generic.CreateNewContactEnterpriseSales(driver, extentTest, testDataIteration, testName, Ro["Contactname"].ToString(), time, Ro["Email"].ToString());

            // Select lead and qualify

            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity3"].ToString());
            string now = System.DateTime.Now.ToString();
            // generic.createandqualifylead(driver, extentTest, testName, testDataIteration, "Lead" + now, "tdst@gmail.com", Ro["BussinessPhone"].ToString(), "CAM", Ro["MajorSource"].ToString(), Ro["MinorSource2"].ToString(), now, "ExistingContact", "", contactname, "", "");
            generic.createleaddirectsales(driver, extentTest, testName, testDataIteration, "Lead" + now, Ro["Email"].ToString(), Ro["BussinessPhone"].ToString(), "CAM", Ro["MajorSource"].ToString(), Ro["MinorSource2"].ToString(), "", "ExistingContact", "", contactname, "UK English", "", "London - London Bridge");

            generic.NavigateToRelatedTabEntitiesLead(driver, extentTest, testName, testDataIteration, Ro["RelatedTabEntity"].ToString());
            generic.OppSelect(driver, extentTest, testName, testDataIteration);

            // Refresh the page
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());

            // Select opportunity tab and create New with minor and major source fields
            string oppname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");
            string Date = DateTime.Today.ToString("MM-dd-yyyy");

            // Enter requested tour details and refresh t verify the timeline
            generic.Enterrequestedtourdetails(driver, extentTest, testDataIteration, testName, "Date of Requested Tour Date/Time", Date);

            // Get time from timeline
            generic.scrollDownOpportunityEnterprise(driver, extentTest, testName, testDataIteration);

            string requesteddate = Element(driver, Control("Requesteddate", "Opportunity")).GetAttribute("defaultValue");
            generic.scrollUpPage(driver, extentTest, testName, testDataIteration);

            string Timelinetime = Element(driver, Control("Timefortourintimeline1", "Opportunity")).GetAttribute("innerText");

            string starttime = DateTime.Now.AddHours(2).ToString(Timelinetime);
            ThinkTime(10);
            string parent = driver.CurrentWindowHandle;
            //// Click on Advance Find
            string parentwindow = generic.AdvancedFind(driver, extentTest, testName, testDataIteration);

            /* // Add Column
             generic.AddColumninadvancefind(driver, extentTest, testName, testDataIteration, "ch_scheduledstart", parentwindow);
             */
            // Enter filter criteria
            generic.AdvancedfindfilterNew(driver, extentTest, testName, testDataIteration, "Tasks", "Task", "Regarding (Opportunity)", "Contains Data", "Opportunity", oppname);

            // Verify due date for tour is 2 hours
            //generic.Verifyduedateinadvancefind(driver, extentTest, testName, testDataIteration, requesteddate, starttime);
            // Logout
            driver.Close();
            driver.SwitchTo().Window(parent);
            login.Logout(driver, extentTest, testName, testDataIteration);
            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}
        }

        public static IEnumerable<object[]> RTA_11065()
        {
            foreach (DataRow row in getTestCaseList("ITSalesManager"))
            {
                yield return new object[] { row };
            }
        }

        /// <summary>
        /// CRM-4384
        /// To Verify that Verify the Status Reason values can be selected after choosing the opp as 'Close as Lost' for IT Sales Manager
        /// </summary>
        [TestCategory("Priority1"), TestCategory("IT Sales"), TestCategory("25Nov"), TestCategory("Sprint0.5"), TestCategory("Validation1"), TestCategory("Sprint3640")]
        [TestProperty("TestcaseID", "RTA-11065")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_11065), DynamicDataSourceType.Method)]
        public void RTA_11065_ITSalesManager_VerifystatusreasonforOpportunityclosingaslost(DataRow Ro)
        {
            //try
            //{

            // Login as IT Sales Manager and choose IT Sales
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());


            // Create new Opportunity 
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
            generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
            generic.ITSalesNewOpportunity(driver, extentTest, testName, testDataIteration, Ro["Topicfield"].ToString(), Ro["TopicValue"].ToString());
            // string S = generic.SelectTitle(driver, extentTest, testName, testDataIteration);

            // Create Close as lost and verify the opp status options
            generic.SelectOpportunityheader(driver, extentTest, testName, testDataIteration, Ro["LostButton"].ToString(), "Form:opportunity");
            generic.verifyoppstatusreasonforlost(driver, extentTest, testName, testDataIteration);

            // Submit the opportunity as lost and verify the status for each opp status reason
            generic.Verifystatusforalllostreason(driver, extentTest, testName, testDataIteration);

            // Logout from the app
            login.Logout(driver, extentTest, testName, testDataIteration);
            //}
            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");


            //}
        }
        public static IEnumerable<object[]> RTA_17863()
        {
            foreach (DataRow row in getTestCaseList("DirectSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// CRM-3454
        /// </summary>
        [TestCategory("JMS"), TestCategory("GlobalP1_S2"), TestCategory("25Nov")]
        [TestProperty("TestcaseID", "RTA-17863")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_17863), DynamicDataSourceType.Method)]
        public void RTA_17863_DirectSales_Verifybrokervaluesandcontacttype_Contact(DataRow Ro)
        {
            //try
            //{
            // Login as Direct Sales Agent and choose  Sales
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());

            // Enter Contact
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);

            string now = System.DateTime.Now.ToString();
            generic.CreateNewContactITSaleswithlanguageandemail(driver, extentTest, testDataIteration, testName, "TestContact", now, "test123@gmail.com", "TestCompany");
            ThinkTime(3);
            string contactname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");
            ThinkTime(1);

            generic.scrollDownContactPage(driver, extentTest, testName, testDataIteration);
            ThinkTime(3);
            generic.scrollDownContactPage(driver, extentTest, testName, testDataIteration);
            // Verify the drop down values for Broker and only option can be selected
            generic.VerifyBrokerdropdownvalues(driver, extentTest, testName, testDataIteration);

            // Verify the contacttype fields
            generic.Verifycontacttypefields(driver, extentTest, testName, testDataIteration);

            // Verify multiple options can be selected from customer type
            generic.Verifymultiplecontacttypeselected(driver, extentTest, testName, testDataIteration);

            // Verify in Advanced Find
            generic.verfyadvfindforbrokercontact(driver, extentTest, testName, testDataIteration, contactname);

            // Logout from the app
            login.Logout(driver, extentTest, testName, testDataIteration);
            //}
            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");


            //}
        }
        public static IEnumerable<object[]> RTA_17864()
        {
            foreach (DataRow row in getTestCaseList("DirectSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// CRM-3454
        /// </summary>
        [TestCategory("JMS"), TestCategory("GlobalP1_S2"), TestCategory("25Nov")]
        [TestProperty("TestcaseID", "RTA-17864")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_17864), DynamicDataSourceType.Method)]
        public void RTA_17864_ITSalesManager_Verifybrokervaluesandcontacttype_Account(DataRow Ro)
        {
            //try
            //{
            // Login as IT Sales Manager and choose IT Sales
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            string now = System.DateTime.Now.ToString();

            // Enter Account details
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity3"].ToString());
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
            generic.CreateNewAccount(driver, extentTest, testDataIteration, testName, "TestAutomation" + now);
            string Acctname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");

            generic.scrollDownaccounts(driver, extentTest, testName, testDataIteration);
            generic.scrollDownaccounts(driver, extentTest, testName, testDataIteration);

            // Verify the drop down values for Broker and only option can be selected
            generic.VerifyBrokerdropdownvalues(driver, extentTest, testName, testDataIteration);
            //generic.scrollDownaccounts(driver, extentTest, testName, testDataIteration);

            // Verify the contacttype fields
            generic.VerifycontacttypefieldsAccount(driver, extentTest, testName, testDataIteration);

            // Verify multiple options can be selected from customer type
            generic.Verifymultiplecontacttypeselected(driver, extentTest, testName, testDataIteration);

            // Verify in Advanced Find
            generic.verfyadvfindforbrokerAccount(driver, extentTest, testName, testDataIteration, Acctname);

            //}
            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");


            //}
        }
        public static IEnumerable<object[]> RTA_17865()
        {
            foreach (DataRow row in getTestCaseList("DirectSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// CRM-3454
        /// </summary>
        [TestCategory("JMS"), TestCategory("GlobalP1_S2"), TestCategory("1410")]
        [TestProperty("TestcaseID", "RTA-17865")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_17865), DynamicDataSourceType.Method)]
        public void RTA_17865_ITSalesManager_Verifybrokervaluesandcontacttype_QuickContact(DataRow Ro)
        {
            try
            {
                // Login as IT Sales Manager and choose IT Sales
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());

                // Enter Quick Contact details
                generic.QuickcreateITsales(driver, extentTest, testName, testDataIteration, "Contact");
                string time = System.DateTime.Now.ToString();
                // generic.Qickcretecontact(driver, extentTest, testDataIteration, testName, "TestContact", time);

                // Verify the drop down values for Broker and only option can be selected
                generic.VerifyBrokerdropdownvaluesquickcreate(driver, extentTest, testName, testDataIteration, "Test" + time);

                // Verify the contacttype fields
                generic.scrollDownQuickCreatePageITSales(driver, extentTest, testName, testDataIteration);
                generic.Verifycontacttypefields(driver, extentTest, testName, testDataIteration);

                // Verify multiple options can be selected from customer type
                generic.Verifymultiplecontacttypeselectedquickcreate(driver, extentTest, testName, testDataIteration);

                // Logout from the app
                login.Logout(driver, extentTest, testName, testDataIteration);

            }
            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");


            }
        }
        public static IEnumerable<object[]> RTA_17866()
        {
            foreach (DataRow row in getTestCaseList("DirectSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// CRM-3454
        /// </summary>
        [TestCategory("JMS"), TestCategory("GlobalP1_S2"), TestCategory("Validation1")]
        [TestProperty("TestcaseID", "RTA-17866")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_17866), DynamicDataSourceType.Method)]
        public void RTA_17866_ITSalesManager_Verifybrokervaluesandcontacttype_QuickAccount(DataRow Ro)
        {
            //try
            //{
            // Login as IT Sales Manager and choose IT Sales
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());

            // Enter Quick Account details  
            generic.QuickcreateITsales(driver, extentTest, testName, testDataIteration, "Account");
            string time = System.DateTime.Now.ToString();
            // generic.Qickcretecontact(driver, extentTest, testDataIteration, testName, "TestContact", time);

            // Verify the drop down values for Broker and only option can be selected
            generic.VerifyBrokerdropdownvaluesquickcreateAccount(driver, extentTest, testName, testDataIteration, "Test" + time);

            // Verify the contacttype fields
            generic.scrollDownQuickCreatePageITSales(driver, extentTest, testName, testDataIteration);
            generic.VerifycontacttypefieldsAccount(driver, extentTest, testName, testDataIteration);

            // Verify multiple options can be selected from customer type
            generic.Verifymultiplecontacttypeselectedquickcreate(driver, extentTest, testName, testDataIteration);

            // Logout from the app
            login.Logout(driver, extentTest, testName, testDataIteration);

            //}
            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");


            //}
        }
        public static IEnumerable<object[]> RTA_14708()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// CRM-2263
        /// To Verify that Core Sales User is able to see the Status Reason of an Opportunity when Closing as Lost
        /// </summary>
        [TestCategory("Priority1"), TestCategory("Sprint 0.5"), TestCategory("25Nov1"), TestCategory("Sprint3640")]
        [TestProperty("TestcaseID", "RTA-14708")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_14708), DynamicDataSourceType.Method)]
        public void RTA_14708_IWGSalesuser_Verifyduplicaterecordcreattedaftercloseaslost(DataRow Ro)
        {
            //try
            //{

            // Login as IWG Sales agent and choose Sales
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());

            // Select Contacts entity and create new
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
            //string time = System.DateTime.Now.ToString();
            string now = System.DateTime.Now.ToString();
            generic.CreateNewContactEnterpriseSales(driver, extentTest, testDataIteration, testName, Ro["Contactname"].ToString(), now, Ro["Email"].ToString());
            string contactname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");

            // Create new Opportunity with prev contact name
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
            generic.CreateNewOpportunityEntetrprisewithprevcontact(driver, extentTest, testDataIteration, testName, Ro["TestChannel"].ToString(), Ro["TestMajorSource"].ToString(), Ro["TestMinorSource"].ToString(), contactname, Ro["spacesbrand"].ToString());
            generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);
            string oppname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");

            // Create Close as lost and verify the opp status options
            generic.SelectOpportunityheader(driver, extentTest, testName, testDataIteration, Ro["LostButton"].ToString(), "Form:opportunity");
            generic.verifyoppstatusreasonforlost(driver, extentTest, testName, testDataIteration);
            // String contactname = "TestContact15-05-2020 16:24:47";
            // Submit the opportunity as lost and verify the status for each opp status reason and check whether duplicate opp is not created
            generic.Verifyduplicaterecordforcloseaslost(driver, extentTest, testName, testDataIteration, contactname);

            // Logout from the app
            login.Logout(driver, extentTest, testName, testDataIteration);
            //}
            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");


            //}
        }
        public static IEnumerable<object[]> RTA_10516()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// CRM-3385
        /// To Verify that Core Sales User is able to see the Status Reason of an Opportunity when Closing as Lost
        /// </summary>
        [TestCategory("Duplicateof17243"), TestCategory("25Nov1"), TestCategory("Sprint0.5"), TestCategory("IWGSalesAgent"), TestCategory("Validation1"), TestCategory("Sprint3640")]
        [TestProperty("TestcaseID", "RTA-10516")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_10516), DynamicDataSourceType.Method)]
        public void RTA_10516_IWGSalesuser_VerifystatusreasonforOpportunityclosingaslost(DataRow Ro)
        {
            //try
            //{

            // Login as IWG Sales agent and choose Sales
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());

            // Select Contacts entity and create new
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
            string time = System.DateTime.Now.ToString();
            string contactname = generic.CreateNewContactEnterpriseSales(driver, extentTest, testDataIteration, testName, Ro["Contactname"].ToString(), time, Ro["Email"].ToString());

            // Create new Opportunity with prev contact name
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
            generic.CreateNewOpportunityEntetrprisewithprevcontact(driver, extentTest, testDataIteration, testName, Ro["TestChannel"].ToString(), Ro["TestMajorSource"].ToString(), Ro["TestMinorSource"].ToString(), contactname, Ro["spacesbrand"].ToString());
            generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);

            // Create Close as lost and verify the opp status options
            generic.SelectOpportunityheader(driver, extentTest, testName, testDataIteration, Ro["LostButton"].ToString(), "Form:opportunity");
            generic.verifyoppstatusreasonforlost(driver, extentTest, testName, testDataIteration);

            // Submit the opportunity as lost and verify the status for each opp status reason
            generic.Verifystatusforalllostreason(driver, extentTest, testName, testDataIteration);

            // Logout from the app
            login.Logout(driver, extentTest, testName, testDataIteration);
            //}
            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");


            //}
        }
        public static IEnumerable<object[]> RTA_10593()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To Verify that duplicate opportunity is not created when an opportunity is won by completing all the sales stages process.
        /// </summary>
        [TestCategory("PriorReg"), TestCategory("Priority1"), TestCategory("Sprint0.5"), TestCategory("Validation1"), TestCategory(""), TestCategory("27Aug")]
        [TestProperty("TestcaseID", "RTA-10593")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_10593), DynamicDataSourceType.Method)]
        public void RTA_10593_IWGSalesagent_Verifyduplicaterecordnotcreated_Spaces(DataRow Ro)
        {
            //try
            //{

            // Login as IWG Sales agent and choose Sales
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());

            // Select Contacts entity and create new
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
            string time = System.DateTime.Now.ToString();
            string contactname = generic.CreateNewContactEnterpriseSales(driver, extentTest, testDataIteration, testName, Ro["Contactname"].ToString(), time, Ro["Email"].ToString());

            // Create new Opportunity with prev contact name
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
            generic.CreateNewOpportunityEntetrprisewithprevcontact(driver, extentTest, testDataIteration, testName, Ro["TestChannel"].ToString(), Ro["TestMajorSource"].ToString(), Ro["TestMinorSource"].ToString(), contactname, Ro["spacesbrand"].ToString());
            generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);

            // Verify brand populated as Spaces:
            generic.Verifybrandvalue(driver, extentTest, testName, testDataIteration, Ro["spacesbrand"].ToString());

            // Submit details using process stage
            generic.EnterOppdetailsviaprocessstage(driver, extentTest, testName, testDataIteration, Ro["processstage"].ToString(), Ro["Duration"].ToString(), "Number of People", "3", "5", Ro["Status"].ToString());

            // Create Close as Won and verify the opp status at footer
            // generic.SelectOpportunityheader(driver, extentTest, testName, testDataIteration, Ro["WonButton"].ToString(), "Form:opportunity");
            //Element(driver, Control("Saveregardingaccount", "Opportunity")).Click();
            //ThinkTime(2);
            generic.VerifyOpportunitystatus(driver, extentTest, testDataIteration, testName, "Won");

            // Logout from the app
            login.Logout(driver, extentTest, testName, testDataIteration);
            //}
            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");


            //}
        }
        public static IEnumerable<object[]> RTA_10594()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To Verify that duplicate opportunity is not created when an opportunity is won by completing all the sales stages process.
        /// </summary>
        [TestCategory("IWG Sales"), TestCategory("Priority1"), TestCategory("Sprint0.5"), TestCategory("Validation1"), TestCategory("Sprint3640")]
        [TestProperty("TestcaseID", "RTA-10594")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_10594), DynamicDataSourceType.Method)]
        public void RTA_10594_IWGSalesagent_VerifyclosingaslostforbrandHQ(DataRow Ro)
        {
            //try
            //{
            string now = System.DateTime.Now.ToString();
            // Login as Sales Agent
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());

            // Create Account
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString());
            generic.SelectNewTab(driver, extentTest, testName, testDataIteration);
            string Brokeraccount = generic.CreateNewAccountWithCustomerTypeNew(driver, extentTest, testDataIteration, testName, Ro["TestAccountLink"].ToString(), now, Ro["CustomerType2"].ToString());
            //generic.EnterContactNumber(driver, extentTest, testName, testDataIteration, Ro["BussinessPhone"].ToString());

            // Select Contacts entity and create new
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
            generic.CreateNewContactEnterpriseSales(driver, extentTest, testDataIteration, testName, Ro["Contactname"].ToString(), now, Ro["Email"].ToString());
            string contactname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");

            // Create new Opportunity with prev contact name
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());

            generic.CreateNewOpportunityEntetrprisewithprevcontact(driver, extentTest, testDataIteration, testName, Ro["TestChannel"].ToString(), Ro["TestMajorSource"].ToString(), Ro["TestMinorSource"].ToString(), contactname, Ro["Country"].ToString());


            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
            // Refresh the page
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());
            // Verify brand populated as HQ:
            generic.Verifybrandvalue(driver, extentTest, testName, testDataIteration, Ro["HqbrandNew"].ToString());

            // Submit details using process stage
            generic.EnterOppdetailsviaprocessstage(driver, extentTest, testName, testDataIteration, Ro["processstage"].ToString(), Ro["Duration"].ToString(), "Number of People", "3", "5", Ro["Status"].ToString());

            // Create Close as Won and verify the opp status at footer
            //generic.SelectOpportunityheader(driver, extentTest, testName, testDataIteration, Ro["WonButton"].ToString(), "Form:opportunity");
            //Element(driver, Control("Saveregardingaccount", "Opportunity")).Click();
            //ThinkTime(2);
            generic.VerifyOpportunitystatus(driver, extentTest, testDataIteration, testName, Ro["Won"].ToString());

            // Logout from the app
            login.Logout(driver, extentTest, testName, testDataIteration);
            //}
            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");


            //}
        }
        [Ignore]
        public static IEnumerable<object[]> RTA_15298()
        {
            foreach (DataRow row in getTestCaseList("ITSalesUser"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// CRM-3709
        /// To Verify that duplicate opportunity is not created when an opportunity is won by completing all the sales stages process.
        /// </summary>
        [TestCategory("Priority1"), TestCategory("Ignore"), TestCategory("28Sep2020"), TestCategory("Validation1"), TestCategory("Sprint3640")]
        [TestProperty("TestcaseID", "RTA-15298")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_15298), DynamicDataSourceType.Method)]
        public void RTA_15298_VerifyDuplicaterecordcannotbecreated(DataRow Ro)
        {
            //try
            //{

            // Login as IT Sales User and choose Sales
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Entitytype"].ToString());
            string time = System.DateTime.Now.ToString();

            // Select Contacts entity and create new
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
            string contactname = generic.CreateNewContactITSalesUser(driver, extentTest, testDataIteration, testName, Ro["contactname"].ToString(), time);

            // Select lead entity
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity4"].ToString());
            //generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
            string now = System.DateTime.Now.ToString();

            // Create Lead
            generic.CreateLeadwithproductITSales(driver, extentTest, testName, testDataIteration, "Lead" + now, Ro["AddEmail"].ToString(), Ro["BussinessPhone"].ToString(), Ro["Source"].ToString(), Ro["MajorSource"].ToString(), Ro["MinorSource2"].ToString(), now, "ExistingContact", "", contactname, "", "", "Alberta", "", "");

            string producttype = Element(driver, Control("Getproductname", "Opportunity")).GetAttribute("innerText");
            string Businesscentre = Element(driver, Control("GetBusinesscentre", "Opportunity")).GetAttribute("innerText");

            // Create Duplicate lead and verify status
            generic.CreateLeadwithproductITSales(driver, extentTest, testName, testDataIteration, "Lead" + now, Ro["AddEmail"].ToString(), Ro["BussinessPhone"].ToString(), Ro["Source"].ToString(), Ro["MajorSource"].ToString(), Ro["MinorSource2"].ToString(), now, "ExistingContact", "", contactname, "", "", Businesscentre, "ExistingProduct", producttype);

            // Verify Opp status is Disqualified
            generic.VerifyOpportunitystatus(driver, extentTest, testDataIteration, testName, "Disqualified");

            // Create different lead
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity4"].ToString());
            string now1 = System.DateTime.Now.ToString();
            generic.CreateLeadwithproductITSales(driver, extentTest, testName, testDataIteration, "Lead" + now1, Ro["AddEmail"].ToString(), Ro["BussinessPhone"].ToString(), Ro["Source"].ToString(), Ro["MajorSource"].ToString(), Ro["MinorSource2"].ToString(), now, "ExistingContact", "", contactname, "", "", "Alberta", "", "");

            // Verify Opp status is Open
            generic.VerifyOpportunitystatus(driver, extentTest, testDataIteration, testName, "Open");

            // Logout from the app
            login.Logout(driver, extentTest, testName, testDataIteration);
            //}
            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");


            //}
        }
        [Ignore]
        public static IEnumerable<object[]> RTA_15327()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// CRM-3709
        /// To Verify that duplicate opportunity is not created when an opportunity is won by completing all the sales stages process.
        /// </summary>
        [TestCategory("Priority1"), TestCategory("Ignore"), TestCategory("Validation1"), TestCategory("Sprint3640"), TestCategory("TestLock1")]
        [TestProperty("TestcaseID", "RTA-15327")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_15327), DynamicDataSourceType.Method)]
        public void RTA_15327_VerifyDuplicaterecordcannotbecreatedafterqualifylead(DataRow Ro)
        {
            try
            {

                // Login as Sales Agent and choose Sales
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                string time = System.DateTime.Now.ToString();


                // Select lead entity
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity3"].ToString());
                string now = System.DateTime.Now.ToString();

                //// Create Lead
                //generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);

                generic.createleaddirectsales(driver, extentTest, testName, testDataIteration, "Duplicate" + now, Ro["Email"].ToString(), Ro["BussinessPhone"].ToString(), Ro["Source"].ToString(), Ro["MajorSource"].ToString(), Ro["MinorSource2"].ToString(), "", "NewContact", "", "TestContact", "UK English", "", "London - London Bridge");
                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity3"].ToString());
                generic.createleaddirectsales(driver, extentTest, testName, testDataIteration, "Duplicate" + now, Ro["Email"].ToString(), Ro["BussinessPhone"].ToString(), Ro["Source"].ToString(), Ro["MajorSource"].ToString(), Ro["MinorSource2"].ToString(), "", "NewContact", "", "TestContact", "UK English", "", "London - London Bridge");
                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());
                generic.DuplicateCheck(driver, extentTest, testName, testDataIteration);

                // Logout from the app
                login.Logout(driver, extentTest, testName, testDataIteration);

            }
            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");


            }
        }

        public static IEnumerable<object[]> RTA_10572()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// CRM-2263
        /// To Verify that duplicate opportunity is not created when an opportunity is won by completing all the sales stages process.
        /// </summary>
        [TestCategory("IWG Sales Agent"), TestCategory("Priority1"), TestCategory("Sprint0.5"), TestCategory("Validation1"), TestCategory("Sprint3640")]
        [TestProperty("TestcaseID", "RTA-10572")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_10572), DynamicDataSourceType.Method)]
        public void RTA_10572_IWGSalesagent_VerifyclosingaslostforbrandRegus(DataRow Ro)
        {
            //try
            //{

            // Login as IWG Sales agent and choose Sales
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());

            // Select Contacts entity and create new
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
            string time = System.DateTime.Now.ToString();
            generic.CreateNewContactEnterpriseSales(driver, extentTest, testDataIteration, testName, Ro["Contactname"].ToString(), time, Ro["Email"].ToString());
            string contactname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");


            // Create new Opportunity with prev contact name
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());

            generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
            generic.CreateNewOpportunityEntetrprisewithprevcontact(driver, extentTest, testDataIteration, testName, Ro["TestChannel"].ToString(), Ro["TestMajorSource"].ToString(), Ro["TestMinorSource"].ToString(), contactname, "Abu Dhabi Al Arjan");



            // Verify brand populated as Regus:
            generic.Verifybrandvalue(driver, extentTest, testName, testDataIteration, Ro["regusbrand"].ToString());

            // Submit details using process stage
            generic.EnterOppdetailsviaprocessstage(driver, extentTest, testName, testDataIteration, Ro["processstage"].ToString(), Ro["Duration"].ToString(), "Number of People", "3", "5", Ro["Status"].ToString());


            generic.VerifyOpportunitystatus(driver, extentTest, testDataIteration, testName, "Won");

            // Logout from the app
            login.Logout(driver, extentTest, testName, testDataIteration);
            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");


            //}
        }

        public static IEnumerable<object[]> RTA_10517()
        {
            foreach (DataRow row in getTestCaseList("EnterpriseSalesManager"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// CRM-3385
        /// To Verify that Enterprise Sales User is able to see the Status Reason of an Opportunity when Closing as Lost
        /// </summary>
        [TestCategory("Priority1"), TestCategory("Enterprise Sales Manager"), TestCategory("Validation1"), TestCategory("Sprint0.5"), TestCategory("Sprint3640")]
        [TestProperty("TestcaseID", "RTA-10517")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_10517), DynamicDataSourceType.Method)]
        public void RTA_10517_EnterpriseSalesuser_Verifyclosingaslost(DataRow Ro)
        {
            //try
            //{

            // Login as ESM and choose Sales
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Entitytype"].ToString());

            // Select Contacts entity and create new
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["EntityContact"].ToString());
            string time = System.DateTime.Now.ToString();
            string contactname = generic.CreateNewContactEnterpriseSales(driver, extentTest, testDataIteration, testName, Ro["contactname"].ToString(), time, Ro["EmailUpdate"].ToString());

            // Create new opportunity
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
            generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
            generic.CreateNewOpportunityEntetrprisewithprevcontactNew(driver, extentTest, testDataIteration, testName, Ro["TestChannel"].ToString(), Ro["TestMajorSource"].ToString(), Ro["TestMinorSource"].ToString(), contactname, Ro["brandspaces"].ToString());

            string name = generic.Openedrecordheadertitle(driver, extentTest, testName, testDataIteration);


            // Create Close as lost and verify the opp status options
            generic.SelectOpportunityheader(driver, extentTest, testName, testDataIteration, Ro["LostButton"].ToString(), "Form:opportunity");
            generic.verifyoppstatusreasonforlost(driver, extentTest, testName, testDataIteration);

            // Submit the opportunity as lost and verify the status for each opp status reason
            generic.Verifystatusforalllostreason(driver, extentTest, testName, testDataIteration);

            // Logout from the app
            login.Logout(driver, extentTest, testName, testDataIteration);
            //}
            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");


            //}
        }
        public static IEnumerable<object[]> RTA_13119()
        {
            foreach (DataRow row in getTestCaseList("EnterpriseSalesManager"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// CRM-3385
        /// To Verify all the Status Reason values are displaying in the Quick Create:Opportunity Close page after choosing the opp as 'Close as Lost' for Enterprise Sales user
        /// </summary>
        [TestCategory("Duplicateof10517"), TestCategory("Enterprise Sales Manager"), TestCategory("25Nov"), TestCategory("Validation1"), TestCategory("Sprint0.5"), TestCategory("Sprint3640")]
        [TestProperty("TestcaseID", "RTA-13119")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_13119), DynamicDataSourceType.Method)]
        public void RTA_13119_EnterpriseSalesuser_Verifystatusreason(DataRow Ro)
        {
            //try
            //{

            // Login as ESM and choose Sales
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());

            // Select Contacts entity and create new
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["EntityContact"].ToString());
            string time = System.DateTime.Now.ToString();
            string contactname = generic.CreateNewContactEnterpriseSales(driver, extentTest, testDataIteration, testName, Ro["contactname"].ToString(), time, Ro["EmailUpdate"].ToString());

            // Create new opportunity
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
            generic.CreateNewOpportunityEntetrprisewithprevcontactNew(driver, extentTest, testDataIteration, testName, Ro["TestChannel"].ToString(), Ro["TestMajorSource"].ToString(), Ro["TestMinorSource"].ToString(), contactname, Ro["brandspaces"].ToString());
            // generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);

            // Create Close as lost and verify the opp status options
            generic.SelectOpportunityheader(driver, extentTest, testName, testDataIteration, Ro["LostButton"].ToString(), "Form:opportunity");
            generic.verifyoppstatusreasonforlost(driver, extentTest, testName, testDataIteration);

            // Submit the opportunity as lost and verify the status for each opp status reason
            generic.Verifystatusforalllostreason(driver, extentTest, testName, testDataIteration);
            login.Logout(driver, extentTest, testName, testDataIteration);
            //}
            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");


            //}
        }
        public static IEnumerable<object[]> RTA_5553()
        {
            foreach (DataRow row in getTestCaseList("ITSalesUser"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To verify whether IT Sales user is able to see the activities
        /// </summary>
        [TestCategory("smoke"), TestCategory("IT Sales"), TestCategory("RerunMay9"), TestCategory("RerunMay120"), TestCategory("Validation1"), TestCategory("RF24-4-20"), TestCategory("Sprint32NCS"), TestCategory("BUG")]
        [TestProperty("TestcaseID", "RTA-5553")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5553), DynamicDataSourceType.Method)]
        public void RTA_5553_ITSalesUserisabletoseeOpportunityActivitiesTab(DataRow Ro)
        {
            //try
            //{

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "IT Sales Manager Dashboard");
            generic.SelectingActiveCell(driver, extentTest, testName, testDataIteration);
            generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, Ro["Tab"].ToString());
            generic.VerifyActivities(driver, extentTest, testName, testDataIteration);
            generic.Logout(driver, extentTest, testName, testDataIteration);


            //}
            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");


            //}
        }
        // [Ignore]
        public static IEnumerable<object[]> RTA_5644()
        {
            foreach (DataRow row in getTestCaseList("ITSalesUser"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To verify whether IT Sales user is not able to create contact
        /// </summary>
        [TestCategory("RerunMay9"), TestCategory("Agentissue"), TestCategory("IT Sales"), TestCategory("Validation1"), TestCategory("Sprint32NC"), TestCategory("BUG")]
        [TestProperty("TestcaseID", "RTA-5644")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5644), DynamicDataSourceType.Method)]
        public void RTA_5644_NewContactbuttonhiddenverification(DataRow Ro)
        {
            try
            {

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
                string time = System.DateTime.Now.ToString();
                generic.CreateNewContactITSales(driver, extentTest, testDataIteration, testName, "TestContact", time);
                //  Assert.Fail("Able to create contact");
                generic.Logout(driver, extentTest, testName, testDataIteration);


            }
            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }

        

        public static IEnumerable<object[]> RTA_5748()
        {
            foreach (DataRow row in getTestCaseList("ITSalesUser"))
            {
                yield return new object[] { row };
            }
        }

        /// <summary>
        /// To verify whether IT Sales user is able to see the activities-Archived
        /// </summary>
        [Ignore]
        [TestCategory("smoke"), TestCategory("IT Sales"), TestCategory("Ignore")]
        [TestProperty("TestcaseID", "RTA-5748")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5748), DynamicDataSourceType.Method)]
        public void RTA_5748_ITSalesUserisabletoAddProduct(DataRow Ro)
        {
            try
            {

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "Open IT Sales Opportunities");
                generic.SelectingActiveCell(driver, extentTest, testName, testDataIteration);
                generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, Ro["Tab"].ToString());
                generic.AddAndVerifyNewProduct(driver, extentTest, testName, testDataIteration);

                generic.Logout(driver, extentTest, testName, testDataIteration);


            }
            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }
        public static IEnumerable<object[]> RTA_5076()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// Test Method to check the calendar gets grey to indicate the date and time in past is not available to book now.
        /// </summary>        
        [TestCategory("smoke"), TestCategory("Sales Agent"), TestCategory("Validation1"), TestCategory("RerunMay9"), TestCategory("RerunMay120"), TestCategory("SprintUN")]
        [TestProperty("TestcaseID", "RTA-5076")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5076), DynamicDataSourceType.Method)]
        public void RTA_5076_VerifyCalenderGetsGreyForPastBookingDate(DataRow Ro)
        {
            //try
            //{

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
            generic.CreateNewOpportunityBookATour(driver, extentTest, testName, testDataIteration, Ro["BussinessCentre2"].ToString());

            //generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "Open Opportunities");
            // generic.OpenRecordGlobalSearch(driver, extentTest, testDataIteration, testName, Ro["TestBookATour"].ToString());
            generic.BookTourBtn(driver, extentTest, testName, testDataIteration, "Book Tour");
            generic.VerifyColorPastDate(driver, extentTest, testDataIteration, testName);
            generic.Logout(driver, extentTest, testName, testDataIteration);

            //}
            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}
        }
        public static IEnumerable<object[]> RTA_5075()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }

        /// <summary>
        /// Test Method to check the calendar gets grey to indicate the date and time in past is not available to book now.
        /// </summary>
        [TestCategory("smoke"), TestCategory("BookaTour"), TestCategory("Validation1"), TestCategory("RerunMay9"), TestCategory("Rerun-14-05-2020"), TestCategory("Rerun-24062020"), TestCategory("SprintUN")]
        [TestProperty("TestcaseID", "RTA-5075")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5075), DynamicDataSourceType.Method)]
        public void RTA_5075_VerifySchedulingScreenDisplaysColouredBlocks(DataRow Ro)
        {
            try
            {

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
                generic.CreateNewOpportunityBookATour(driver, extentTest, testName, testDataIteration, Ro["BussinessCentre2"].ToString());
                generic.VerifyBookTourSlotColurDifferent(driver, extentTest, testDataIteration, testName);

                login.Logout(driver, extentTest, testName, testDataIteration);

            }
            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }


        public static IEnumerable<object[]> RTA_4994()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// TEST [D365_Sales] - To  verify the scheduling screen displays Sunday as next working day if the current day is Friday for Arabic Country
        /// </summary>
        [TestCategory("BookaTour"), TestCategory("Sales Agent"), TestCategory("Validation1"), TestCategory("RerunMay9"), TestCategory("RerunMay120"), TestCategory("Rerun-15062020"), TestCategory("SprintUN")]
        [TestProperty("TestcaseID", "RTA-4994")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_4994), DynamicDataSourceType.Method)]
        public void RTA_4994_ScreenDisplaySundayAsNextWorkingDay(DataRow Ro)
        {
            try
            {

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);
                //generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "Open Opportunities");
                //generic.OpenRecordGlobalSearch(driver, extentTest, testDataIteration, testName, Ro["OppSearch"].ToString());
                //generic.UpdateStartDate(driver, extentTest, testName, testDataIteration, Ro["SelectFeb"].ToString(), Ro["StartDateFeb"].ToString());
                ////  generic.ChangingRecommendedBussinessCentre(driver, extentTest, testName, testDataIteration, Ro["NewBussinessCentre"].ToString());
                //generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Button"].ToString());
                //// string datetime = "Friday, April 25";
                //generic.Slotheaderverification(driver, extentTest, testName, testDataIteration);
                generic.Logout(driver, extentTest, testName, testDataIteration);

            }
            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }

        public static IEnumerable<object[]> RTA_4998()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// Test Method to check the calendar gets grey to indicate the date and time in past is not available to book now.
        /// </summary>
        [TestCategory("BookaTour"), TestCategory("Sales Agent"), TestCategory("Validation1"), TestCategory("RF24-4-20"), TestCategory("RerunMay120"), TestCategory("Rerun-06062020"), TestCategory("Rerun-15062020"), TestCategory("Rerun-06062020"), TestCategory("Rerun-25062020_1"), TestCategory("TestLock1"), TestCategory("SprintUN")]
        [TestProperty("TestcaseID", "RTA-4998")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_4998), DynamicDataSourceType.Method)]
        public void RTA_4998_SAAbleToSeeTheFilteredData(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());

                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                //generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "My Open Opportunities");
                //generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "All Opportunities");

                generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
                //generic.SearchforRecord(driver, extentTest, testName, testDataIteration, "Automation - Canada");
                //generic.SelectingActiveCell(driver, extentTest, testName, testDataIteration);
                generic.CreateNewOpportunityBookATour(driver, extentTest, testName, testDataIteration, Ro["Centre"].ToString());
                //string contactname = generic.CreateNewOpportunityBookATour(driver, extentTest, testName, testDataIteration, Ro["BussinessCentre3"].ToString());
                generic.BookTourBtn(driver, extentTest, testName, testDataIteration, "Book Tour"); string centre = Ro["Centre"].ToString();
                //generic.Bookaslot(driver, extentTest, testName, testDataIteration, contactname, centre);
                generic.VerifyCityDiaryandCentre(driver, extentTest, testName, testDataIteration, Ro["City Diary"].ToString(), Ro["Centre"].ToString());
                string centre1 = Ro["Centre1"].ToString();
                try
                {
                    generic.VerifyCentreinBookedTour1(driver, extentTest, testName, testDataIteration, centre1);
                    generic.CentreSelect1(driver, extentTest, testName, testDataIteration, Ro["Centre1"].ToString());




                    login.Logout(driver, extentTest, testName, testDataIteration);
                }
                catch (Exception e)
                { }

            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }
        public static IEnumerable<object[]> Test140()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        /// </summary>
        /// //To verify the SA is able to see the tour tiles in a different colour on the scheduling screen for tours booked by ASM and tour booked by SA
        [TestCategory("0309"), TestCategory("Sales Agent"), TestCategory("BookaTour"), TestCategory("Validation1"), TestCategory("27Aug"), TestCategory("Rerun-06062020"), TestCategory("Rerun-15062020"), TestCategory("Rerun-06062020"), TestCategory("Rerun-25062020"), TestCategory("SprintUN")]
        [TestProperty("TestcaseID", "RTA-5061")]

        [DataTestMethod]
        [DynamicData(nameof(Test140), DynamicDataSourceType.Method)]
        public void Abletoseetourtilesindifferentcolour_5061(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
                try
                {
                    generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "All Opportunities");
                    string contactname = generic.CreateNewOpportunityBookATour(driver, extentTest, testName, testDataIteration, Ro["BussinessCentre1"].ToString());

                    generic.BookTourBtn(driver, extentTest, testName, testDataIteration, "Book Tour");
                    //generic.SelectingCityDairyFromBTCalander(driver, extentTest, testName, testDataIteration, Ro["Citydiary"].ToString());
                    //generic.SelectingCentreFromBTCalander(driver, extentTest, testName, testDataIteration, Ro["SelectCentre"].ToString());
                    //generic.VerifyCityDiaryandCentre(driver, extentTest, testName, testDataIteration, Ro["City Diary"].ToString(), Ro["Centre"].ToString());
                    generic.CreateATourForVerifyingColour1(driver, extentTest, testName, testDataIteration);
                    //generic.closeBookTourPage2(driver, extentTest, testName, testDataIteration);
                    generic.Logout(driver, extentTest, testName, testDataIteration);
                    generic.Loginafterlogout(driver, extentTest, testName, testDataIteration, Ro["UserName1"].ToString(), Ro["Password1"].ToString());
                    generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                    generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                    generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
                    generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "All Opportunities");
                    generic.SearchforRecord(driver, extentTest, testName, testDataIteration, "testhouse - Canada");
                    generic.SelectingActiveCell(driver, extentTest, testName, testDataIteration);
                    generic.UpdateStartDate(driver, extentTest, testDataIteration, testName, Ro["SelectMonthNov"].ToString(), Ro["SelectDateNov"].ToString());
                    generic.BookTourBtn(driver, extentTest, testName, testDataIteration, "Book Tour");
                    generic.CreateATourByASMForVerifyingColour(driver, extentTest, testName, testDataIteration);
                    generic.closeBookTourPage1(driver, extentTest, testName, testDataIteration);
                    generic.Logout(driver, extentTest, testName, testDataIteration);

                    generic.Loginafterlogout2(driver, extentTest, testName, testDataIteration, Ro["UserName"].ToString(), Ro["Password"].ToString());
                    generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                    generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                    generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
                    generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "All Opportunities");
                    generic.SearchforRecord(driver, extentTest, testName, testDataIteration, "testhouse - Canada");
                    generic.SelectingActiveCell(driver, extentTest, testName, testDataIteration);
                    generic.UpdateStartDate(driver, extentTest, testDataIteration, testName, Ro["SelectMonthNov"].ToString(), Ro["SelectDateNov"].ToString());
                    generic.BookTourBtn(driver, extentTest, testName, testDataIteration, "Book Tour");
                    generic.VerifyScreenDisplaysColouredBlocks1(driver, extentTest, testName, testDataIteration, "rgba(255, 244, 188, 1)", "rgba(240, 240, 240, 1)", "rgba(179, 212, 151, 1)");
                }
                catch (Exception e) { }

                // generic.Logout(driver, extentTest, testName, testDataIteration);
            }
            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }
        public static IEnumerable<object[]> RTA_5010()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// Test Method To check IWG Sales Agent is able to see coloured blocks on the screen for the tour booked with ASM from the selected centres
        /// </summary>        
        [TestCategory("smoke"), TestCategory("Sales Agent"), TestCategory("Validation1"), TestCategory("BookaTour"), TestCategory("RerunMay120"), TestCategory("SprintUN")]
        [TestProperty("TestcaseID", "RTA-5010")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5010), DynamicDataSourceType.Method)]
        public void RTA_5010_AbleToSeeColoredlocksonSCreenforTheTourBooked(DataRow Ro)
        {
            try
            {

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);
                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "Open Opportunities");
                //generic.OpenRecordGlobalSearch(driver, extentTest, testDataIteration, testName, Ro["TestBookATour"].ToString());
                string contactname = generic.CreateNewOpportunityBookATour(driver, extentTest, testName, testDataIteration, Ro["BussinessCentre1"].ToString());

                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, "Book Tour");
                //generic.VerfiyColorCenter(driver, extentTest, testDataIteration, testName);
                generic.Logout(driver, extentTest, testName, testDataIteration);

            }
            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }


        public static IEnumerable<object[]> RTA_4992()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// Test Method To verify IWG sales agent is not able to book the tour against absent ASM if the centre has ASM free for a specific slot
        /// </summary>        
        [TestCategory("smoke"), TestCategory("Sales Agent"), TestCategory("Validation1"), TestCategory("BookaTour"), TestCategory("RerunMay120"), TestCategory("27Aug"), TestCategory("Rerun-24062020"), TestCategory("TestLock1"), TestCategory("SprintUN")]
        [TestProperty("TestcaseID", "RTA-4992")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_4992), DynamicDataSourceType.Method)]
        public void RTA_4992_IWGSalesAgentnotabletobooktouraganistabsnetASM(DataRow Ro)
        {
            try
            {
                // Required to update as out office setting as work around

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName3"].ToString(), Ro["Password3"].ToString());
                string parentWindowHandle1 = driver.CurrentWindowHandle;
                //generic.OutofOfficeSetting(driver, extentTest, testName, testDataIteration);
                //login.LoginforUrl(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName3"].ToString(), Ro["Password3"].ToString());

                generic.NavigateToMainDropDown1(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);

                generic.CreateNewOpportunityBookATour(driver, extentTest, testName, testDataIteration, Ro["BussinessCentre2"].ToString());



                generic.BookTourBtn(driver, extentTest, testName, testDataIteration, "Book Tour");
                generic.VerifyRedBlockforAbsentASMNew(driver, extentTest, testDataIteration, testName);
                // generic.DelOutofOffice(driver, extentTest, testName, testDataIteration);
                //  generic.VerifyFreeSlotBookATour(driver, extentTest, testName, testDataIteration, Ro["VerifyCityDairy"].ToString(), Ro["VerifyCenter"].ToString());
                login.Logout(driver, extentTest, testName, testDataIteration);

            }
            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }

        public static IEnumerable<object[]> RTA_5034()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// Test Method to To verify the time displayed on scheduling screen is half hour(30min) increments.
        /// </summary>
        [TestCategory("RerunMay9"), TestCategory("BookaTour"), TestCategory("25Nov"), TestCategory("RF24-4-20"), TestCategory("RerunMay120"), TestCategory("Rerun-21062020_1"), TestCategory("Rerun-24062020"), TestCategory("SprintUN")]
        [TestProperty("TestcaseID", "RTA-5034")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5034), DynamicDataSourceType.Method)]
        public void RTA_5034_VerifySchedulingTimeSalesAgent(DataRow Ro)
        {
            //try
            //{


            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());

            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
            generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "My Open Opportunities");

            string parent = driver.CurrentWindowHandle;
            generic.CreateNewOpportunityBookATour(driver, extentTest, testName, testDataIteration, Ro["BussinessCentre2"].ToString());
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, "Book Tour");
            //generic.VerifyCityDiaryandCentreNew(driver, extentTest, testName, testDataIteration, Ro["City Diary"].ToString(), Ro["Centre"].ToString());
            generic.VerifySchedulingTime(driver, extentTest, testName, testDataIteration);

            // Logout
            driver.Close();
            driver.SwitchTo().Window(parent);
            login.Logout(driver, extentTest, testName, testDataIteration);
            //}
            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}
        }
        public static IEnumerable<object[]> RTA_5003()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesDirector"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// Test Method to To verify Sales Director can open the list of cities in the location.
        /// </summary>
        [TestCategory("smoke"), TestCategory("Sales Agent"), TestCategory("Validation1"), TestCategory("27Aug"), TestCategory("SprintUN")]
        [TestProperty("TestcaseID", "RTA-5003")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5003), DynamicDataSourceType.Method)]
        public void RTA_5003_VerifyCityFieldSalesDirector(DataRow Ro)
        {
            try
            {

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);
                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "My Open Opportunities");
                generic.SelectingActiveCell(driver, extentTest, testName, testDataIteration);
                generic.TablistSelection(driver, extentTest, testName, testDataIteration, "Related");
                generic.RelatedTab(driver, extentTest, testName, testDataIteration, "Tours");
                //generic.OpenTourRecord(driver, extentTest, testName, testDataIteration);
                //generic.VerifyCityFieldTourRecord(driver, extentTest, testName, testDataIteration);
                generic.Logout(driver, extentTest, testName, testDataIteration);

            }
            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }

        public static IEnumerable<object[]> RTA_17738()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesDirector"))
            {
                yield return new object[] { row };
            }
        }
        [DataTestMethod]
        /// <summary>
        /// Test Method to To verify Sales Director can open the list of cities in the location.
        /// </summary>
        [TestCategory("Sales Director"), TestCategory("Regression"), TestCategory("Sprint42.1"), TestCategory("CRM-6791"), TestCategory("2810")]
        [TestProperty("TestcaseID", "RTA-17738")]

        [DynamicData(nameof(RTA_17738), DynamicDataSourceType.Method)]
        public void RTA17738_VerifyPayloadnotupdateforlargedeals(DataRow Ro)
        {
            try
            {
                // Login as IWG Sales Director
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["EntityContact"].ToString());
                generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
                string now = System.DateTime.Now.ToString();

                generic.CreateNewContactEnterpriseSales(driver, extentTest, testDataIteration, testName, Ro["Contactname"].ToString(), now, Ro["Email"].ToString(), "");
                string contactname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");
                generic.EnterContactNumber(driver, extentTest, testName, testDataIteration, "+919497852369");

                //Click Opportunity and create new Opp
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, "New");
                generic.CreateNewOpportunityEntetrprisewithprevcontact(driver, extentTest, testDataIteration, testName, Ro["P1TestChannel"].ToString(), Ro["MajorSource"].ToString(), Ro["MinorSource"].ToString(), contactname, Ro["spacesbrand"].ToString());
                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());

                // Select Activities tab and choose Dialer
                generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, "Activities");
                generic.selectRequiredActivitty(driver, extentTest, testName, testDataIteration, "Call back Large deal");

                //Verifying Payload fields.
                generic.payloadnavigate(driver, extentTest, testName, testDataIteration);
                generic.VerifyDailerPosttour(driver, extentTest, testName, testDataIteration, "6", "");

                // Go back to Opportunity
                generic.Backtooppotunity(driver, extentTest, testName, testDataIteration);
                // Modify the Number of People
                WaitUntil(driver, Control("Numberofpeople", "Opportunity"), 360);
                MoveToElement(driver, Control("Numberofpeople", "Opportunity"));
                ActionsClick(driver, Control("Numberofpeople", "Opportunity"));
                ThinkTime(3);
                Element(driver, Control("Numberofpeople", "Opportunity")).SendKeys("18");
                ThinkTime(3);
                generic.saveFooter(driver, extentTest, testName, testDataIteration);
                ThinkTime(3);

                // Select Activities tab and open large deal req
                generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, "Activities");
                generic.selectRequiredActivitty(driver, extentTest, testName, testDataIteration, "Call back Large deal");

                //Verifying Payload fields.
                generic.payloadnavigate(driver, extentTest, testName, testDataIteration);
                generic.VerifyDailerPosttour(driver, extentTest, testName, testDataIteration, "6", "");

                // Logout 
                generic.Logout(driver, extentTest, testName, testDataIteration);

            }
            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }


        public static IEnumerable<object[]> RTA_17739()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesDirector"))
            {
                yield return new object[] { row };
            }
        }
        [DataTestMethod]
        /// <summary>
        /// Test Method to To verify Sales Director can open the list of cities in the location.
        /// </summary>
        [TestCategory("Sales Director"), TestCategory("Regression"), TestCategory("Sprint42.1"), TestCategory("CRM-6791"), TestCategory("2810")]
        [TestProperty("TestcaseID", "RTA-17739")]

        [DynamicData(nameof(RTA_17739), DynamicDataSourceType.Method)]
        public void RTA17739_VerifyPayloaddoesnotupdateforlargedealsless5(DataRow Ro)
        {
            try
            {
                // Login as IWG Sales Director
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["EntityContact"].ToString());
                generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
                string now = System.DateTime.Now.ToString();

                generic.CreateNewContactEnterpriseSales(driver, extentTest, testDataIteration, testName, Ro["Contactname"].ToString(), now, Ro["Email"].ToString(), "");
                string contactname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");
                generic.EnterContactNumber(driver, extentTest, testName, testDataIteration, "+919497852369");

                ////Click Opportunity and create new Opp
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, "New");
                generic.CreateNewOpportunityEntetrprisewithprevcontact(driver, extentTest, testDataIteration, testName, Ro["P1TestChannel"].ToString(), Ro["MajorSource"].ToString(), Ro["MinorSource"].ToString(), contactname, Ro["spacesbrand"].ToString());

                //// Refresh the page
                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());

                //// Select Activities tab and choose Dialer
                generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, "Activities");
                generic.selectRequiredActivitty(driver, extentTest, testName, testDataIteration, "Call back Large deal");

                //Verifying Payload fields.
                generic.payloadnavigate(driver, extentTest, testName, testDataIteration);
                generic.VerifyDailerPosttour(driver, extentTest, testName, testDataIteration, "8", "");

                // Go back to Opportunity
                generic.Backtooppotunity(driver, extentTest, testName, testDataIteration);
                //// Refresh the page
                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());

                // Modify the Number of People
                WaitUntil(driver, Control("Numberofpeople", "Opportunity"), 360);
                MoveToElement(driver, Control("Numberofpeople", "Opportunity"));
                ActionsClick(driver, Control("Numberofpeople", "Opportunity"));
                ThinkTime(3);
                Element(driver, Control("Numberofpeople", "Opportunity")).SendKeys("5");
                ThinkTime(3);
                generic.saveFooter(driver, extentTest, testName, testDataIteration);
                ThinkTime(3);

                // Select Activities tab and choose Dialer
                generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, "Activities");

                generic.selectRequiredActivitty(driver, extentTest, testName, testDataIteration, "Call back Large deal");

                //Verifying Payload fields.
                generic.payloadnavigate(driver, extentTest, testName, testDataIteration);
                generic.VerifyDailerPosttour(driver, extentTest, testName, testDataIteration, "5", "");

                // Logout 
                generic.Logout(driver, extentTest, testName, testDataIteration);

            }
            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }



        public static IEnumerable<object[]> RTA_000()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesDirector"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// 
        /// </summary>
        [TestCategory("smoke"), TestCategory("Sales Agent"), TestCategory("Validation1"), TestCategory("RF24-4-20")]
        [TestProperty("TestcaseID", "RTA-000")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_000), DynamicDataSourceType.Method)]
        public void RTA_000_VerifyCityFieldSalesDirector(DataRow Ro)
        {

            //try
            //{

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            //    generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            //    generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);
            //    generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "My Open Opportunities");
            //    generic.SelectingActiveCell(driver, extentTest, testName, testDataIteration);
            //    generic.TablistSelection(driver, extentTest, testName, testDataIteration, "Related");
            //    generic.RelatedTab(driver, extentTest, testName, testDataIteration, "Tours");
            //    generic.OpenTourRecord(driver, extentTest, testName, testDataIteration);
            //    generic.VerifyCityFieldTourRecord(driver, extentTest, testName, testDataIteration);
            //    generic.Logout(driver, extentTest, testName, testDataIteration);

            //}
            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}
        }






        public static IEnumerable<object[]> RTA_5853()
        {
            foreach (DataRow row in getTestCaseList("ITSalesManager"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To verify whetehr IT Sales manager is able to update existing contact record
        /// </summary>
        [TestCategory("smoke"), TestCategory("IT Sales"), TestCategory("RerunMay120"), TestCategory("Validation1"), TestCategory("Sprint32NC")]
        [TestProperty("TestcaseID", "RTA-5853")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5853), DynamicDataSourceType.Method)]
        public void RTA_5853_ITSalesM_Updateacontactrecord(DataRow Ro)
        {
            //try
            //{

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.SelectActiveCellContacts(driver, extentTest, testName, testDataIteration);
            generic.UpdateandVerifyContacts(driver, extentTest, testName, testDataIteration, Ro["Field"].ToString(), Ro["Name"].ToString(), Ro["LanguagePreferencevalue"].ToString());
            login.Logout(driver, extentTest, testName, testDataIteration);
            //}


            //catch (Exception e)
            //{


            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}

        }
        public static IEnumerable<object[]> RTA_5539()
        {
            foreach (DataRow row in getTestCaseList("ITSalesManager"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To verify whetehr IT Sales manager is able to update existing contact record
        /// </summary>
        [TestCategory("RerunMay9"), TestCategory("IT Sales"), TestCategory("RerunMay120"), TestCategory("Validation1"), TestCategory("RF24-4-20"), TestCategory("Sprint32NCS")]
        [TestProperty("TestcaseID", "RTA-5539")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5539), DynamicDataSourceType.Method)]
        public void RTA_5539_ITSalesM_TodaysITSalesphonecallschartverification(DataRow Ro)
        {
            try
            {

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity0"].ToString());
                generic.SelectValuesFromDashboardDropDown(driver, extentTest, testName, testDataIteration, "IT Sales Manager");
                generic.ITmanagerdashboardphonecallverification(driver, extentTest, testName, testDataIteration);
                login.Logout(driver, extentTest, testName, testDataIteration);
            }


            catch (Exception e)
            {


                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }

        }
        public static IEnumerable<object[]> RTA_5854()
        {
            foreach (DataRow row in getTestCaseList("ITSalesUser"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To verify whetehr IT Sales user is able to update existing contact record
        /// </summary>
        [TestCategory("smoke"), TestCategory("IT Sales"), TestCategory("RerunMay120"), TestCategory("Validation1"), TestCategory("RF24-4-20"), TestCategory("Sprint32NC")]
        [TestProperty("TestcaseID", "RTA-5854")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5854), DynamicDataSourceType.Method)]
        public void RTA_5854_ITSalesUserisabletoupdateacontactrecord(DataRow Ro)
        {
            //try
            //{

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
            //string time = System.DateTime.Now.ToString();
            //generic.CreateNewContactITSales(driver, extentTest, testDataIteration, testName, "TestContact", time);
            generic.SelectActiveCellContacts(driver, extentTest, testName, testDataIteration);
            generic.UpdateandVerifyContacts(driver, extentTest, testName, testDataIteration, Ro["Field"].ToString(), Ro["Name"].ToString(), Ro["LanguagePreferencevalue"].ToString());
            login.Logout(driver, extentTest, testName, testDataIteration);
            //}


            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");


            //}

        }
        public static IEnumerable<object[]> RTA_5643()
        {
            foreach (DataRow row in getTestCaseList("ITSalesUser"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        ///  IT Sales User To verify the Phone call Views..
        /// </summary>
        [TestCategory("smoke"), TestCategory("IT Sales"), TestCategory("RerunMay120"), TestCategory("Validation1"), TestCategory("RF24-4-20"), TestCategory("Sprint32NC")]
        [TestProperty("TestcaseID", "RTA-5643")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5643), DynamicDataSourceType.Method)]
        public void RTA_5643_ITSalesUser_phonecallViews(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Tab"].ToString());
                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "IT Sales Phone Calls");
                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "My Phone Calls for today");
                login.Logout(driver, extentTest, testName, testDataIteration);
            }


            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");


            }
        }
        public static IEnumerable<object[]> RTA_5645()
        {
            foreach (DataRow row in getTestCaseList("ITSalesUser"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        ///  verify that an IT Sales User is able to see the Opportunities Views.
        /// </summary>
        [TestCategory("smoke"), TestCategory("IT Sales"), TestCategory("Validation1"), TestCategory("RerunMay9"), TestCategory("Rerun-21062020_1"), TestCategory("Rerun-24062020"), TestCategory("Sprint32NCS")]
        [TestProperty("TestcaseID", "RTA-5645")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5645), DynamicDataSourceType.Method)]
        public void RTA_5645_ITSalesUserisabletoseetheOpportunitiesViews(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "New IT Sales Opportunities");
                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "Open IT Sales opportunities");
                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "New IT Sales Opportunities");
                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "My Open IT Sales Opportunities");
                //generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "My IT Sales Opportunities to Follow Up");
                login.Logout(driver, extentTest, testName, testDataIteration);
            }


            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }
        public static IEnumerable<object[]> RTA_5714()
        {
            foreach (DataRow row in getTestCaseList("ITSalesUser"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        ///  verify that an IT Sales User is able to see the Opportunities Views.
        /// </summary>
        [TestCategory("smoke"), TestCategory("IT Sales"), TestCategory("Validation1"), TestCategory("RerunMay9"), TestCategory("RF24-4-20"), TestCategory("Rerun-14-05-2020"), TestCategory("Rerun-21062020_1"), TestCategory("Rerun-24062020"), TestCategory("Sprint32NC")]
        [TestProperty("TestcaseID", "RTA-5714")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5714), DynamicDataSourceType.Method)]
        public void RTA_5714_ITSalesUserUpdateContactRecord(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
                generic.SelectingActiveCell(driver, extentTest, testName, testDataIteration);
                //generic.VerifyContactEditableITSalesUserNew(driver, extentTest, testDataIteration, testName);
                generic.VerifyContactEditableITSalesUser(driver, extentTest, testDataIteration, testName, Ro["FirstName"].ToString(), Ro["LastName"].ToString(), Ro["Language"].ToString(), Ro["Customer"].ToString());
                login.Logout(driver, extentTest, testName, testDataIteration);
            }
            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");


            }
        }


        public static IEnumerable<object[]> RTA_5007()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To verify whether book a tour page is opened on clicking Book a tour button
        /// </summary>
        [TestCategory("smoke"), TestCategory("Sales"), TestCategory("Validation1"), TestCategory("RF24-4-20"), TestCategory("30062020_1"), TestCategory("SprintUN")]
        [TestProperty("TestcaseID", "RTA-5007")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5007), DynamicDataSourceType.Method)]
        public void RTA_5007_BookTourbuttonBookAVisitSection(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                //generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "Open Opportunities");
                //generic.SelectingActiveCell(driver, extentTest, testName, testDataIteration);
                generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);
                generic.CreateNewOpportunityBookATour(driver, extentTest, testName, testDataIteration, Ro["BussinessCentre2"].ToString());

                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Button"].ToString());
                generic.VerifyBookTourPage(driver, extentTest, testName, testDataIteration);
                login.Logout(driver, extentTest, testName, testDataIteration);
            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }

        }
        public static IEnumerable<object[]> RTA_9571()
        {
            foreach (DataRow row in getTestCaseList("ITSalesManager"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// Test Method to "Login to CRM" - Example on how rerun of test method can be Implemented if a element identification fails
        /// </summary>
        [TestCategory("smoke"), TestCategory("26Aug"), TestCategory("SprintUN"), TestCategory("07Sep"), TestCategory("2910")]
        [TestProperty("TestcaseID", "RTA-9571")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_9571), DynamicDataSourceType.Method)]
        public void RTA_9571_ITSalesM_EditOpportunity(DataRow Ro)
        {
            try
            {

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "My Open IT Sales Opportunities");
                generic.SelectingActiveCell(driver, extentTest, testName, testDataIteration);
                generic.SelectAndVerifyCustomerFieldITSales1(driver, extentTest, testName, testDataIteration, Ro["TopicValue"].ToString(), Ro["Customer"].ToString(), Ro["Countryvalue"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
                generic.SelectNewTab(driver, extentTest, testName, testDataIteration);
                generic.SelectAndVerifyCustomerFieldITSales1(driver, extentTest, testName, testDataIteration, Ro["TopicValue"].ToString(), Ro["Customer"].ToString(), Ro["CountryCountryvalue"].ToString());
                generic.Logout(driver, extentTest, testName, testDataIteration);
            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }
        public static IEnumerable<object[]> RTA_5716()
        {
            foreach (DataRow row in getTestCaseList("ITSalesManager"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// Test Method to "Login to CRM" - Example on how rerun of test method can be Implemented if a element identification fails
        /// </summary>
        [TestCategory("smoke"), TestCategory("Validation1"), TestCategory("Sprint32NC"), TestCategory("25Nov")]
        [TestProperty("TestcaseID", "RTA-5716")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5716), DynamicDataSourceType.Method)]
        public void RTA_5716_NewAccountCreationITSalesManager(DataRow Ro)
        {
            //try
            //{
            string TimeInSec = generic.GetSystemTimeInSec(driver, extentTest, testName, testDataIteration);
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity3"].ToString());
            try
            {
                generic.CreateNewAccount(driver, extentTest, testDataIteration, testName, Ro["CompanyName"].ToString(), TimeInSec);
                generic.Verifyaccessdenied(driver, extentTest, testName, testDataIteration);
            }
            catch (Exception e)
            { }
            // generic.HeaderFieldVerification(driver, extentTest, testName, testDataIteration);
            generic.Logout(driver, extentTest, testName, testDataIteration);
            generic.DiscardChanges(driver, extentTest, testName, testDataIteration);
            //}
            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}
        }
        public static IEnumerable<object[]> RTA12271()
        {
            foreach (DataRow row in getTestCaseList("DirectSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// CRM-1393
        /// Clicking on the Create Quote button should open the correct URL (New Opp + Direct Sales Agent)
        /// </summary>
        [TestCategory("Priority1"), TestCategory("Sprint3640"), TestCategory("25Nov")]
        [TestProperty("TestcaseID", "RTA-12271")]

        [DataTestMethod]
        [DynamicData(nameof(RTA12271), DynamicDataSourceType.Method)]
        public void RTA12271_VerifyCreateQuoteURLforDirectSalesAgent(DataRow Ro)
        {
            //try
            //{
            // Login as Direct Sales Agent
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            //generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());

            //// Select Contacts entity and create new
            //generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
            string time = System.DateTime.Now.ToString();
            string contactname = generic.CreateNewContactEnterpriseSales(driver, extentTest, testDataIteration, testName, Ro["Contactname"].ToString(), time, Ro["Email"].ToString());

            // Select opportunity tab and create New with minor and major source fields
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
            //generic.DisbaleRTC(driver, extentTest, testName, testDataIteration);
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);

            generic.CreateNewOpportunityEntetrprisewithprevcontactNew(driver, extentTest, testDataIteration, testName, Ro["TestChannel"].ToString(), Ro["TestMajorSource"].ToString(), Ro["TestMinorSource"].ToString(), contactname, Ro["spacesbrand"].ToString());
            //generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);

            // Create Quote
            generic.SelectOpportunityheader(driver, extentTest, testName, testDataIteration, Ro["CreateQuote"].ToString(), "Form:opportunity");
            //generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);

            // Verify the URL
            generic.VerifyURL(driver, extentTest, testName, testDataIteration, Ro["ExpectedURL"].ToString());


            // Logout
            login.Logout(driver, extentTest, testName, testDataIteration);
            generic.DiscardChanges(driver, extentTest, testName, testDataIteration);

            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}
        }



        public static IEnumerable<object[]> RTA12273()
        {
            foreach (DataRow row in getTestCaseList("DirectSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// CRM-1393
        /// Clicking on the Create Quote button should open the correct URL (New Opp + Direct Sales Admin)
        /// </summary>

        [TestCategory("Priority1"), TestCategory("Sales"), TestCategory("Sprint3640"), TestCategory("25Nov")]
        [TestProperty("TestcaseID", "RTA-12273")]

        [DataTestMethod]
        [DynamicData(nameof(RTA12273), DynamicDataSourceType.Method)]
        public void RTA12273_VerifyCreateQuoteURLforDirectSalesAdmin(DataRow Ro)
        {
            try
            {
                // Login as Direct Sales Admin
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                //generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());

                // Select opportunity tab and create New with minor and major source fields
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
                //generic.CreateNewOpportunityEntetrprisewithprevcontact(driver, extentTest, testDataIteration, testName, Ro["TestChannel"].ToString(), Ro["TestMajorSource"].ToString(), Ro["TestMinorSource"].ToString(), Ro["Contactname"].ToString(), Ro["spacesbrand"].ToString());
                generic.DisbaleRTC(driver, extentTest, testName, testDataIteration);
                //    generic.ScriptErrorExcep(driver, extentTest, testName, testDataIteration);
                //generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);

                // Create Quote
                generic.SelectOpportunityheader(driver, extentTest, testName, testDataIteration, Ro["CreateQuote"].ToString(), "Form:opportunity");

                // Verify the URL
                generic.VerifyURL(driver, extentTest, testName, testDataIteration, Ro["ExpectedURL"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());

                generic.DiscardChanges(driver, extentTest, testName, testDataIteration);
                //generic.refreshpage(driver, extentTest, testDataIteration, testName);

                // Logout
                login.Logout(driver, extentTest, testName, testDataIteration);
                ThinkTime(2);


            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }
        public static IEnumerable<object[]> RTA_5554()
        {
            foreach (DataRow row in getTestCaseList("ITSalesUser"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// Test Method: To check whether for IT Sales User, "Opportunity Quotes Tab" in Opportunity form should be hidden
        /// </summary>
        [TestCategory("smoke"), TestCategory("25Nov"), TestCategory("SprintUN")]
        [TestProperty("TestcaseID", "RTA-5554")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5554), DynamicDataSourceType.Method)]
        public void RTA_5554_OppurtunityQuotestabhiddenITSales(DataRow Ro)
        {
            try
            {

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "My Open IT Sales Opportunities");
                generic.SelectingActiveCell(driver, extentTest, testName, testDataIteration);
                generic.HeaderFieldVerificationITSales(driver, extentTest, testName, testDataIteration, Ro["Actioname"].ToString());
                generic.RibbonExtend(driver, extentTest, testName, testDataIteration, Ro["Actioname"].ToString());

                generic.Logout(driver, extentTest, testName, testDataIteration);
            }
            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }
        public static IEnumerable<object[]> RTA_5555()
        {
            foreach (DataRow row in getTestCaseList("ITSalesUser"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// Test Method:Verify that the IT Sales User is able to see the "Product Line Items Section" in Opportunity form
        /// </summary>
        [TestCategory("smoke"), TestCategory("Validation1"), TestCategory("RF24-4-20"), TestCategory("Sprint32NC")]
        [TestProperty("TestcaseID", "RTA-5555")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5555), DynamicDataSourceType.Method)]
        public void RTA_5555_ProductLineItemssectionITSales(DataRow Ro)
        {
            try
            {

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "My Open IT Sales Opportunities");
                generic.SelectingActiveCell(driver, extentTest, testName, testDataIteration);
                generic.OpportunityMenus(driver, extentTest, testName, testDataIteration, Ro["OpportunityMenu"].ToString());
                generic.Logout(driver, extentTest, testName, testDataIteration);
            }
            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }
        public static IEnumerable<object[]> RTA_5543()
        {
            foreach (DataRow row in getTestCaseList("ITSalesUser"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// Test Method:Verify that the IT Sales User is able to see the "Product Line Items Section" in Opportunity form
        /// </summary>
        [TestCategory("smoke"), TestCategory("Validation1"), TestCategory("Sprint32NCS")]
        [TestProperty("TestcaseID", "RTA-5543")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5543), DynamicDataSourceType.Method)]
        public void RTA_5543_Opportunityheaderverification(DataRow Ro)
        {
            try
            {

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "My Open IT Sales Opportunities");
                generic.SelectingActiveCell(driver, extentTest, testName, testDataIteration);
                generic.OpportunityMenusheader(driver, extentTest, testName, testDataIteration, Ro["OpportunityMenu"].ToString());
                generic.OpportunityMenusheader(driver, extentTest, testName, testDataIteration, Ro["OpportunityMenu1"].ToString());
                generic.OpportunityMenusheader(driver, extentTest, testName, testDataIteration, Ro["OpportunityMenu2"].ToString());
                generic.OpportunityMenusheader(driver, extentTest, testName, testDataIteration, Ro["OpportunityMenu3"].ToString());

                generic.Logout(driver, extentTest, testName, testDataIteration);
            }
            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }
        public static IEnumerable<object[]> RTA_5574()
        {
            foreach (DataRow row in getTestCaseList("EnterpriseSalesManager"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// Test Method:To verify the All Enterprise Accounts And Their Fields
        /// </summary>
        [TestCategory("RerunMay9"), TestCategory("Validation1"), TestCategory("Sprint32NC")]
        [TestProperty("TestcaseID", "RTA-5574")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5574), DynamicDataSourceType.Method)]
        public void RTA_5574_EnterpriseAccountandFieldVerification(DataRow Ro)
        {
            try
            {

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString());
                generic.VerifySalesAccountablefields(driver, extentTest, testName, testDataIteration, Ro["Field1"].ToString(), Ro["Field2"].ToString(), Ro["Field3"].ToString(), Ro["Field4"].ToString(), Ro["Field5"].ToString(), Ro["Field6"].ToString(), Ro["Field7"].ToString(), Ro["Field8"].ToString());
                generic.Logout(driver, extentTest, testName, testDataIteration);
            }
            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }
        public static IEnumerable<object[]> RTA_5573()
        {
            foreach (DataRow row in getTestCaseList("EnterpriseSalesManager"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// Test Method:To Verify the Open Enterprise opportunities And Their Fields
        /// </summary>
        [TestCategory("smoke"), TestCategory("Validation1"), TestCategory("RerunMay9"), TestCategory("Sprint32NC"), TestCategory("25Aug")]
        [TestProperty("TestcaseID", "RTA-5573")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5573), DynamicDataSourceType.Method)]
        public void RTA_5573_EnterpriseOpenOpportunityVerification(DataRow Ro)
        {
            try
            {

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "Open Enterprise Opportunities");
                generic.VerifySalesOpenOpportunityfields(driver, extentTest, testName, testDataIteration, Ro["Topic"].ToString(), Ro["Account2"].ToString(), Ro["EstCloseDate"].ToString(), Ro["Contact2"].ToString(), Ro["Phone"].ToString(), Ro["Sale Owner"].ToString(), Ro["Pipeline Phase"].ToString(), Ro["Status"].ToString());
                generic.Logout(driver, extentTest, testName, testDataIteration);
            }
            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Info", "Failed due to" + e.Message, "Test Failed"); AddLog(driver, extentTest, testName, testDataIteration, "Info", "Failed due to" + e.Message, "Test Failed"); Type thisType = this.GetType(); object testCall = this; ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }
        public static IEnumerable<object[]> RTA_5571()
        {
            foreach (DataRow row in getTestCaseList("EnterpriseSalesManager"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// Test Method:To verify the Lost opportunities  fields In Enterprise Sales Team.
        /// </summary>
        [TestCategory("RerunMay9"), TestCategory("Validation1"), TestCategory("Sprint32NC"), TestCategory("25Aug")]
        [TestProperty("TestcaseID", "RTA-5571")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5571), DynamicDataSourceType.Method)]
        public void RTA_5571_EnterpriseLostOpportunityVerification(DataRow Ro)
        {
            //try
            //{

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            // generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "Enterprise Lost Opportunities");
            generic.VerifySalesLostOpportunityfields(driver, extentTest, testName, testDataIteration, Ro["Topic"].ToString(), Ro["Account2"].ToString(), Ro["ActualClosedate"].ToString(), Ro["Contact2"].ToString(), Ro["Phone"].ToString(), Ro["Sale Owner"].ToString(), Ro["Status Reason"].ToString(), Ro["Status"].ToString());
            generic.Logout(driver, extentTest, testName, testDataIteration);
            //}
            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Info", "Failed due to" + e.Message, "Test Failed"); AddLog(driver, extentTest, testName, testDataIteration, "Info", "Failed due to" + e.Message, "Test Failed"); Type thisType = this.GetType(); object testCall = this; ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}
        }
        public static IEnumerable<object[]> RTA_5570()
        {
            foreach (DataRow row in getTestCaseList("EnterpriseSalesManager"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// Test Method:To verify Enterprise Sales Manager is able to view Opportunity system views.
        /// </summary>
        [TestCategory("smoke"), TestCategory("InProgress"), TestCategory("NoRework"), TestCategory("Validation1"), TestCategory("Rerun"), TestCategory("Sprint32NC")]
        [TestProperty("TestcaseID", "RTA-5570")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5570), DynamicDataSourceType.Method)]
        public void RTA_5570_EnterpriseOpportunitydropdownVerification(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "Enterprise Deals Won This Month");
                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "Enterprise Lost Opportunities");

                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "My Enterprise Opportunities");
                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "My Enterprise Opportunities to Follow Up");
                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "Open Enterprise Opportunities");
                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "Enterprise Opportunities Won");
                generic.Logout(driver, extentTest, testName, testDataIteration);
            }
            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }
        public static IEnumerable<object[]> RTA_5548()
        {
            foreach (DataRow row in getTestCaseList("ITSalesUser"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// Test Method:To Verify IT Sales User is able to see "Source Tab"and its fields in "Opportunity Summary Section" of Opportunity form
        /// </summary>
        [TestCategory("RerunMay9"), TestCategory("Validation1"), TestCategory("Sprint32NCS")]
        [TestProperty("TestcaseID", "RTA-5548")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5548), DynamicDataSourceType.Method)]
        public void RTA_5548_OpportunitySummarysectionITUser(DataRow Ro)
        {
            try
            {

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "My Open IT Sales Opportunities");
                generic.SelectActiveCellContacts(driver, extentTest, testName, testDataIteration);
                generic.scrollDownOpportunityEnterprise(driver, extentTest, testName, testDataIteration);
                generic.scrollDownOpportunityEnterprise(driver, extentTest, testName, testDataIteration);
                generic.VerifyOpportunitySourcedetails(driver, extentTest, testName, testDataIteration);

                generic.Logout(driver, extentTest, testName, testDataIteration);
            }
            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Info", "Failed due to" + e.Message, "Test Failed"); AddLog(driver, extentTest, testName, testDataIteration, "Info", "Failed due to" + e.Message, "Test Failed"); Type thisType = this.GetType(); object testCall = this; ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }
        public static IEnumerable<object[]> RTA_5547()
        {
            foreach (DataRow row in getTestCaseList("ITSalesUser"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// Test Method:To Verify IT Sales User is able to see "Description Tab"and its fields in "Opportunity Summary Section" of Opportunity form
        /// </summary>
        [TestCategory("RerunMay9"), TestCategory("Validation1"), TestCategory("Sprint32NCS")]
        [TestProperty("TestcaseID", "RTA-5547")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5547), DynamicDataSourceType.Method)]
        public void RTA_5547_OpportunitySummarysectionDescriptionITUser(DataRow Ro)
        {
            try
            {

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "My Open IT Sales Opportunities");
                generic.SelectActiveCellContacts(driver, extentTest, testName, testDataIteration);
                generic.scrollDownOpportunityEnterprise(driver, extentTest, testName, testDataIteration);
                generic.VerifyOpportunitydescriptiondetails(driver, extentTest, testName, testDataIteration, Ro["Descriptiontext"].ToString());
                generic.Logout(driver, extentTest, testName, testDataIteration);
            }
            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Info", "Failed due to" + e.Message, "Test Failed"); AddLog(driver, extentTest, testName, testDataIteration, "Info", "Failed due to" + e.Message, "Test Failed"); Type thisType = this.GetType(); object testCall = this; ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }
        public static IEnumerable<object[]> RTA_5546()
        {
            foreach (DataRow row in getTestCaseList("ITSalesUser"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// Test Method:To Verify that the IT Sales User is able to see the "Details Tab" & its fields in "Opportunity Summary Section" of Opportunity form
        /// </summary>
        [TestCategory("smoke"), TestCategory("Validation1"), TestCategory("Sprint32NCS")]
        [TestProperty("TestcaseID", "RTA-5546")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5546), DynamicDataSourceType.Method)]
        public void RTA_5546_OpportunitySummarysectionDetailsITUser(DataRow Ro)
        {
            try
            {

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "My Open IT Sales Opportunities");
                generic.SelectActiveCellContacts(driver, extentTest, testName, testDataIteration);

                generic.VerifyOpportunitydetailstab(driver, extentTest, testName, testDataIteration);
                generic.Logout(driver, extentTest, testName, testDataIteration);
            }
            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Info", "Failed due to" + e.Message, "Test Failed"); AddLog(driver, extentTest, testName, testDataIteration, "Info", "Failed due to" + e.Message, "Test Failed"); Type thisType = this.GetType(); object testCall = this; ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }
        public static IEnumerable<object[]> RTA14779()
        {
            foreach (DataRow row in getTestCaseList("ITSalesUser"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// Verify “Channel”, “Sales Owner” and “Est. Close Date” fields from the IT Sales opportunity form and Business Process Flow stage
        /// </summary>
        [TestCategory("IT Sales"), TestCategory("Priority1"), TestCategory("Validation1"), TestCategory("Sprint0.5"), TestCategory("Sprint3640")]
        [TestProperty("TestcaseID", "RTA-14779")]

        [DataTestMethod]
        [DynamicData(nameof(RTA14779), DynamicDataSourceType.Method)]
        public void RTA14779_Verifyoppfieldsareremoved(DataRow Ro)
        {
            try
            {

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());

                // Create new Opportunity with prev contact name
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());

                // Verify the fields are removed
                generic.Verifychannelownerdatefieldsremoved(driver, extentTest, testName, testDataIteration);
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());

                generic.DiscardChanges(driver, extentTest, testName, testDataIteration);
                generic.Logout(driver, extentTest, testName, testDataIteration);
            }
            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }
        public static IEnumerable<object[]> RTA_5616()
        {
            foreach (DataRow row in getTestCaseList("EnterpriseSalesManager"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// Test Method:To verify An Enterprise Sales Manager is able to see Contact Summary section in the Contact Form and its related fields
        /// </summary>
        [TestCategory("smoke"), TestCategory("Validation1"), TestCategory("RerunMay9"), TestCategory("Sprint32NC"), TestCategory("07Sep")]
        [TestProperty("TestcaseID", "RTA-5616")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5616), DynamicDataSourceType.Method)]
        public void RTA_5616_ContactSummarySectionEntripriseManager(DataRow Ro)
        {
            try
            {

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["EntityContact"].ToString());
                generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
                // generic.OpenRecordGlobalSearch(driver, extentTest, testName, testDataIteration, Ro["Contactsearch"].ToString());
                generic.SelectNewTab(driver, extentTest, testName, testDataIteration);

                generic.VerifycontactsummaryEnterpriseManager(driver, extentTest, testName, testDataIteration, Ro["ContactInfo"].ToString(), Ro["ContactLastName"].ToString());
                generic.Logout(driver, extentTest, testName, testDataIteration);
            }
            catch (Exception e)
            {
                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "The testcase failed due to the following error :  " + e, " ");
                Assert.Fail(e.Message);
            }
        }
        public static IEnumerable<object[]> RTA_5617()
        {
            foreach (DataRow row in getTestCaseList("EnterpriseSalesManager"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// Test Method:To verify An Enterprise Sales Manager is able to see Contact Details section in the Contact Form and its related fields
        /// </summary>
        [TestCategory("smoke"), TestCategory("Validation1"), TestCategory("RF24-4-20"), TestCategory("RerunMay9"), TestCategory("TestLock1"), TestCategory("Sprint32NC"), TestCategory("09Sep")]
        [TestProperty("TestcaseID", "RTA-5617")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5617), DynamicDataSourceType.Method)]
        public void RTA_5617_ContactDetailsSectionEntripriseManager(DataRow Ro)
        {
            //try
            //{
            string time = System.DateTime.Now.ToString();
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["EntityContact"].ToString());
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
            generic.SelectActiveCellContact(driver, extentTest, testName, testDataIteration);
            generic.VerifycontactdetailsEnterpriseManager(driver, extentTest, testName, testDataIteration, Ro["ContactInfo"].ToString(), Ro["ContactDetails"].ToString(), Ro["Header1"].ToString(), Ro["Header2"].ToString(), Ro["Header3"].ToString(), Ro["Header4"].ToString(), Ro["Header5"].ToString(), Ro["Plabel1"].ToString(), Ro["Plabel2"].ToString(), Ro["Plabel3"].ToString(), Ro["Plabel4"].ToString(), Ro["Mlabel1"].ToString(), Ro["Mlabel2"].ToString(), Ro["Mlabel3"].ToString(), Ro["Blabel1"].ToString(), Ro["Blabel2"].ToString(), Ro["Blabel3"].ToString(), Ro["Blabel4"].ToString(), Ro["Clabel1"].ToString(), Ro["Clabel2"].ToString(), Ro["Clabel3"].ToString(), Ro["Clabel4"].ToString(), Ro["Clabel5"].ToString(), Ro["Clabel6"].ToString(), Ro["Clabel7"].ToString());
            generic.Logout(driver, extentTest, testName, testDataIteration);
            //    }
            //        catch (Exception e)
            //        {
            //            AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}
        }
        public static IEnumerable<object[]> RTA_5260()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// Verify the quick create contact details are same as lead details.
        /// </summary>
        [TestCategory("RerunMay9"), TestCategory("Validation1"), TestCategory("Rerun-24062020"), TestCategory("SprintUN")]
        [TestProperty("TestcaseID", "RTA-5260")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5260), DynamicDataSourceType.Method)]
        public void RTA_5260_SalesAgentLeadVerification(DataRow Ro)
        {
            try
            {
                string now = System.DateTime.Now.ToString();
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity3"].ToString());
                generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
                generic.SelectNewTab(driver, extentTest, testName, testDataIteration);
                generic.ScriptErrorExcep(driver, extentTest, testName, testDataIteration);
                generic.SelectAndVerifyLeadsFieldsSalesAgent(driver, extentTest, testName, testDataIteration, Ro["Lastname"].ToString(), Ro["Email"].ToString(), Ro["BussinessPhone"].ToString(), Ro["Source"].ToString(), Ro["MajorSource"].ToString(), Ro["MinorSource2"].ToString(), now);
                generic.scrollUpPage(driver, extentTest, testName, testDataIteration);
                generic.AddNewContact(driver, extentTest, testName, testDataIteration);
                generic.VerifyContactField1(driver, extentTest, testName, testDataIteration, Ro["Lastname"].ToString(), Ro["Email"].ToString(), Ro["BussinessPhone"].ToString(), Ro["Language"].ToString(), now);
                //generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity3"].ToString());
                //generic.SelectNewTab(driver, extentTest, testName, testDataIteration);
                ////generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);
                //generic.SelectAndVerifyLeadsFieldsSalesAgent(driver, extentTest, testName, testDataIteration, Ro["Lastname1"].ToString(), Ro["Email1"].ToString(), Ro["BussinessPhone"].ToString(), Ro["Source"].ToString(), Ro["MajorSource"].ToString(), Ro["MinorSource"].ToString(), now);
                //generic.scrollUpPage(driver, extentTest, testName, testDataIteration);
                //generic.AddNewContact(driver, extentTest, testName, testDataIteration);
                //generic.VerifyContactField1(driver, extentTest, testName, testDataIteration, Ro["Lastname1"].ToString(), Ro["Email1"].ToString(), Ro["BussinessPhone"].ToString(), Ro["Language"].ToString(), now);
                generic.Logout(driver, extentTest, testName, testDataIteration);


            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }
        public static IEnumerable<object[]> RTA_14230()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// CRM-4820
        /// Verify whether 'Click to Call' feature is enabled on the Contact record for Sales
        /// </summary>
        [TestCategory("25AugFixed"), TestCategory("Priority1"), TestCategory("10Sep"), TestCategory("Sprint3640")]
        [TestProperty("TestcaseID", "RTA-14230")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_14230), DynamicDataSourceType.Method)]
        public void RTA_14230_VerifyClicktoCallisenabledoncontacts(DataRow Ro)
        {
            //try
            //{
            //    string now = System.DateTime.Now.ToString();
            // Login as Sales Agent
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            //generic.LoginPurecloud(driver, extentTest, testName, testDataIteration, Ro["UserName"].ToString(), Ro["Password"].ToString());

            //Click Contacts and create new contact
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
            generic.SelectNewTab(driver, extentTest, testName, testDataIteration);

            // Verify call is connected and diconnected
            generic.Verifycloudinteraction(driver, extentTest, testName, testDataIteration, Ro["Mobilenumber"].ToString(), Ro["BussinessPhone"].ToString(), "1", "2");

            //Log out
            login.Logout(driver, extentTest, testName, testDataIteration);
            generic.DiscardChanges(driver, extentTest, testName, testDataIteration);

            //    }

            //        catch (Exception e)
            //        {

            //            AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}
        }


        public static IEnumerable<object[]> RTA_14242()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// CRM-4820
        /// Verify whether 'Click to Call' feature is enabled on the Lead record for Sales
        /// </summary>
        [TestCategory("Priority1"), TestCategory("Validation1"), TestCategory("Sprint3640")]
        [TestProperty("TestcaseID", "RTA-14242")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_14242), DynamicDataSourceType.Method)]
        public void RTA_14242_VerifyClicktoCallisenabledonLead(DataRow Ro)
        {
            try
            {
                string now = System.DateTime.Now.ToString();
                // Login as Sales Agent
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                // generic.LoginPurecloud(driver, extentTest, testName, testDataIteration, Ro["UserName"].ToString(), Ro["Password"].ToString());

                //Click Leads and create new Lead
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity3"].ToString());
                generic.SelectNewTab(driver, extentTest, testName, testDataIteration);

                // Verify call is connected and diconnected
                generic.VerifycloudinteractionLead(driver, extentTest, testName, testDataIteration, Ro["Mobilenumber"].ToString(), Ro["BussinessPhone"].ToString(), "2", "1");
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity3"].ToString());
                generic.DiscardChanges(driver, extentTest, testName, testDataIteration);
                //Log out
                generic.Logout(driver, extentTest, testName, testDataIteration);


            }
            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }



        public static IEnumerable<object[]> RTA15036()
        {
            foreach (DataRow row in getTestCaseList("ITSalesUser"))
            {
                yield return new object[] { row };
            }
        }


        /// </summary>
        [TestCategory("Sprint3640"), TestCategory("Enterprise Sales"), TestCategory("Validation1"), TestCategory("Priority1")]
        [TestProperty("TestcaseID", "RTA-15036")]
        [DataTestMethod]
        [DynamicData(nameof(RTA15036), DynamicDataSourceType.Method)]

        public void RTA15036_VerifyITINSIDESALESUSERdashboard(DataRow Ro)
        {

            //try
            //{
            //Login as IT Sales User and select Dashboards
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity0"].ToString());

            //Verify the Dashboard headers and dropdown values for IT inside Sales user

            generic.SelectValuesFromDashboardDropDown(driver, extentTest, testName, testDataIteration, "IT Inside Sales User");
            generic.ClickMoreandseeallrecords1(driver, extentTest, testName, testDataIteration, Ro["ITinsideSalesusermore1"].ToString(), Ro["ITKPI1"].ToString());

            // Verify the column headers for UnAssigned Opps
            generic.VerifyUnassignedOppscolumns(driver, extentTest, testName, testDataIteration, Ro["CreatedOn"].ToString(), Ro["Country"].ToString(), Ro["Company"].ToString(), Ro["Brand"].ToString(), Ro["Startdate"].ToString(), Ro["Enddate"].ToString(), Ro["SaleType"].ToString(), Ro["Recommended"].ToString(), Ro["Languageheader"].ToString(), Ro["NumberofUsers"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity0"].ToString());

            // Verify the Dashboard headers and dropdown values for IT inside Sales user
            generic.SelectValuesFromDashboardDropDown(driver, extentTest, testName, testDataIteration, "IT Inside Sales User");

            // Select more for Open Opps
            generic.ClickMoreandseeallrecords1(driver, extentTest, testName, testDataIteration, Ro["ITinsideSalesusermore2"].ToString(), Ro["ITKPI2"].ToString());

            // Verify columns for Open Opps
            generic.VerifyOpenOpps(driver, extentTest, testName, testDataIteration, Ro["Startdate"].ToString(), Ro["Enddate"].ToString(), Ro["Company"].ToString(), Ro["Pipeline"].ToString(), Ro["Brand"].ToString(), Ro["Column5"].ToString(), Ro["Centre Number"].ToString(), Ro["Country"].ToString(), Ro["SaleType"].ToString(), Ro["NumberofUsers"].ToString(), Ro["TotalContract"].ToString(), Ro["Modifiedon"].ToString(), Ro["CreatedOn"].ToString());

            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity0"].ToString());

            //Verify the Dashboard headers and dropdown values for IT inside Sales user

            generic.SelectValuesFromDashboardDropDown(driver, extentTest, testName, testDataIteration, "IT Inside Sales User");

            // Select more for Activities
            generic.scrollMiddleDown(driver, extentTest, testName, testDataIteration);

            generic.ClickMoreandseeallrecords1(driver, extentTest, testName, testDataIteration, Ro["ITinsideSalesusermore3"].ToString(), Ro["ITKPI3"].ToString());

            // Verify columns for Activities
            generic.ActivityError(driver, extentTest, testName, testDataIteration, Ro["ITinsideSalesusermore3"].ToString(), Ro["ITKPI3"].ToString());


            generic.VerifyActivitiesinall(driver, extentTest, testName, testDataIteration, Ro["Duedate"].ToString(), Ro["Activitytype"].ToString(), Ro["regardingobjectid"].ToString(), Ro["Brandid"].ToString(), Ro["Owner"].ToString(), Ro["Busphone"].ToString(), Ro["email1"].ToString(), Ro["fullname"].ToString(), Ro["Phone"].ToString(), Ro["Contactemail"].ToString(), Ro["Contactfullname"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity0"].ToString());
            generic.SelectValuesFromDashboardDropDown(driver, extentTest, testName, testDataIteration, "IT Inside Sales User");
            generic.scrollMiddleDown(driver, extentTest, testName, testDataIteration);


            // Select more for Open Opps chart
            generic.ClickMoreandseeallrecordsforchart1(driver, extentTest, testName, testDataIteration, Ro["ITinsideSalesusermore4"].ToString(), Ro["ITKPI4"].ToString());

            // Verify columns for Open Opps chart
            generic.VerifyOpenOpps(driver, extentTest, testName, testDataIteration, Ro["Startdate"].ToString(), Ro["Enddate"].ToString(), Ro["Company"].ToString(), Ro["Pipeline"].ToString(), Ro["Brand"].ToString(), Ro["Column5"].ToString(), Ro["Centre Number"].ToString(), Ro["Country"].ToString(), Ro["SaleType"].ToString(), Ro["NumberofUsers"].ToString(), Ro["TotalContract"].ToString(), Ro["Modifiedon"].ToString(), Ro["CreatedOn"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity0"].ToString());
            generic.SelectValuesFromDashboardDropDown(driver, extentTest, testName, testDataIteration, "IT Inside Sales User");
            generic.scrollDownDashboard(driver, extentTest, testName, testDataIteration);


            // Select more for Closed Opps chart
            generic.ClickMoreandseeallrecordsforchart1(driver, extentTest, testName, testDataIteration, Ro["ITinsideSalesusermore5"].ToString(), Ro["ITKPI5"].ToString());

            // Verify columns for Closed Opps chart
            generic.VerifyClosedOpps(driver, extentTest, testName, testDataIteration, Ro["ActualClose"].ToString(), Ro["CreatedOn"].ToString(), Ro["Topicfield1"].ToString(), Ro["Potential"].ToString(), Ro["Country"].ToString(), Ro["SaleType"].ToString(), Ro["Column5"].ToString(), Ro["Field9"].ToString(), Ro["ActualRevenue"].ToString());

            // Logout from the application
            login.Logout(driver, extentTest, testName, testDataIteration);
            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}

        }
        public static IEnumerable<object[]> RTA_14244()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// CRM-4820
        /// Verify whether 'Click to Call' feature is enabled on the Lead record for Sales
        /// </summary>
        [TestCategory("Priority1"), TestCategory("Validation1"), TestCategory("Sprint3640")]
        [TestProperty("TestcaseID", "RTA-14244")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_14244), DynamicDataSourceType.Method)]
        public void RTA_14244_VerifyClicktoCallisenabledonOpportunity(DataRow Ro)
        {

            //try
            //  {

            string now = System.DateTime.Now.ToString();
            // Login as Sales Agent
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            //generic.LoginPurecloud(driver, extentTest, testName, testDataIteration, Ro["UserName"].ToString(), Ro["Password"].ToString());

            // Select Contacts entity and create new
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
            //generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);
            generic.CreateNewContactEnterpriseSales1(driver, extentTest, testDataIteration, testName, Ro["Contactname"].ToString(), now);
            generic.EnterContactNumber(driver, extentTest, testName, testDataIteration, Ro["BussinessPhone"].ToString());
            generic.scrollDownOpportunityEnterpriseCust(driver, extentTest, testName, testDataIteration, "300");
            generic.Movetobroker(driver, extentTest, testName, testDataIteration, Ro["CustomerType2"].ToString());
            string contactname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");

            // Create Account
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString());
            generic.SelectNewTab(driver, extentTest, testName, testDataIteration);
            string Brokeraccount1 = generic.CreateNewAccountWithCustomerTypeNew(driver, extentTest, testDataIteration, testName, Ro["TestAccountLink"].ToString(), now, Ro["CustomerType2"].ToString(), "Phone", Ro["BussinessPhone"].ToString(), "City", "Kollam", "Country, Lookup");
            string Brokeraccount = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.SelectNewTab(driver, extentTest, testName, testDataIteration);
            generic.CreateNewOpportunityEntetrprisewithprevcontact(driver, extentTest, testDataIteration, testName, Ro["TestChannel"].ToString(), Ro["TestMajorSource"].ToString(), Ro["TestMinorSource"].ToString(), contactname, Ro["spacesbrand"].ToString());
            // Verify call is connected for Broker Account 
            generic.SelectOpportunityheader(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString(), "Form:opportunity");

            generic.scrollUpOpportunityEnterprise(driver, extentTest, testName, testDataIteration);
            generic.scrollUpOpportunityEnterprise(driver, extentTest, testName, testDataIteration);
            generic.scrollUpOpportunityEnterprise(driver, extentTest, testName, testDataIteration);
            generic.scrollUpOpportunityEnterprise(driver, extentTest, testName, testDataIteration);

            generic.Callbrokeropportunity(driver, extentTest, testName, testDataIteration);


            //    // Create Account
            //    generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString());
            //generic.SelectNewTab(driver, extentTest, testName, testDataIteration);
            //generic.CreateNewAccountWithCustomerTypeBroker(driver, extentTest, testDataIteration, testName, Ro["TestAccountLink"].ToString(), now, Ro["CustomerType2"].ToString());
            //string Brokeraccount1 = Element(driver, Control("AccountTitle", "Accounts")).GetAttribute("innerText");
            ////generic.EnterContactNumber(driver, extentTest, testName, testDataIteration, Ro["BussinessPhone"].ToString());

            //// Select Contacts entity and create new
            //generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
            //generic.CreateNewContactEnterpriseSalesForBroker(driver, extentTest, testDataIteration, testName, Ro["Contactname"].ToString(), now, Ro["Email"].ToString(), Ro["CustomerType2"].ToString());
            //string contactname = Element(driver, Control("ContactTitle", "Accounts")).GetAttribute("innerText");
            //generic.EnterContactNumber(driver, extentTest, testName, testDataIteration, Ro["BussinessPhone"].ToString());
            //generic.Entercompanyname(driver, extentTest, testName, testDataIteration, Brokeraccount1);
            //generic.Movetobroker(driver, extentTest, testName, testDataIteration, Ro["CustomerType2"].ToString());

            //Click Opportunity and create new Opp
            // Verify call is connected for Contact 
            // generic.Callandverifyconnectionestablished(driver, extentTest, testName, testDataIteration, "1");

            //Link Broker Account 
            //generic.LinkBrokerdetails(driver, extentTest, testName, testDataIteration, Brokeraccount1, Ro["BrokerAccount"].ToString());
            //generic.SelectOpportunityheader(driver, extentTest, testName, testDataIteration,"Refresh", "Form:opportunity");
            //generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, Ro["BrokerDetailsTab"].ToString());


            //// Close Broker Account
            //generic.Closebrokeracccount(driver, extentTest, testName, testDataIteration);

            //// Link Broker Contact
            //generic.LinkBrokerdetails(driver, extentTest, testName, testDataIteration, contactname, Ro["BrokerContact"].ToString());
            //generic.SelectOpportunityheader(driver, extentTest, testName, testDataIteration, "Refresh", "Form:opportunity");
            //generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, Ro["BrokerDetailsTab"].ToString());

            //// Verify call is connected for Broker Contact 
            //generic.Callbrokeropportunity(driver, extentTest, testName, testDataIteration);

            //Log out
            login.Logout(driver, extentTest, testName, testDataIteration);
            //generic.DiscardChanges(driver, extentTest, testName, testDataIteration);

            //   }

            //        catch (Exception e)
            //        {

            //            AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //            ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}
        }


        public static IEnumerable<object[]> RTA_11078_()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// CRM-4574
        ///  Verify whether while selecting a Broker contact on an Opportunity form it should populate the Broker Account with Broker Details.
        /// </summary>
        [TestCategory("Priority1"), TestCategory("25Aug"), TestCategory("abhi"), TestCategory("HF"), TestCategory("Sprint3640")]
        [TestProperty("TestcaseID", "RTA-11078")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_11078_), DynamicDataSourceType.Method)]
        public void RTA_11078_VerifyBrokeerAccountpopulatedonOpportunity(DataRow Ro)
        {

            //try
            //{
            string now = System.DateTime.Now.ToString();
            string emailid = "crm.test2@regus.com";

            // Login as Sales Agent
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());

            // Create Account
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString());
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
            generic.SelectNewTab(driver, extentTest, testName, testDataIteration);


            generic.CreateNewAccountWithCustomerType(driver, extentTest, testDataIteration, testName, Ro["TestAccountLink"].ToString(), now, Ro["CustomerType2"].ToString(), "Phone", Ro["Mobilenumber"].ToString(), "City", Ro["City Diary"].ToString(), "Country, Lookup");
            string Brokeraccount = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");

            // Select Contacts entity and create new
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
            //string contactname1 = generic.CreateNewContactEnterpriseSales(driver, extentTest, testDataIteration, testName, Ro["Contactname"].ToString(), now, Ro["Email"].ToString(), Brokeraccount);
            generic.CreateNewContactITSaleswithlanguageandemail(driver, extentTest, testDataIteration, testName, "TestContact", now, emailid, Brokeraccount);

            string contactname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");
            generic.EnterContactNumber(driver, extentTest, testName, testDataIteration, Ro["BussinessPhone"].ToString());
            generic.Movetobroker(driver, extentTest, testName, testDataIteration, Ro["CustomerType2"].ToString());

            //Click Opportunity and create new Opp
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.SelectNewTab(driver, extentTest, testName, testDataIteration);

            generic.CreateNewOpportunityEntetrprisewithprevcontact(driver, extentTest, testDataIteration, testName, Ro["TestChannel"].ToString(), Ro["TestMajorSource"].ToString(), Ro["TestMinorSource"].ToString(), contactname, Ro["spacesbrand"].ToString());
            string oppreference = Element(driver, Control("OppReference", "EnterpriseSales")).GetAttribute("title");

            // Verify product ref is populated from pivotal
            generic.verifyproductrefpopulated(driver, extentTest, testName, testDataIteration);

            // Link Broker Contact
            generic.LinkBrokerdetails(driver, extentTest, testName, testDataIteration, contactname, Ro["BrokerContact"].ToString());

            // Verify Brokr contact details are displayed
            generic.Verifybrokercontactdetailsold(driver, extentTest, testName, testDataIteration, contactname, "+44 20 8759 9036", Brokeraccount);

            // Verify Broker Account populated
            generic.VerifybrokerAccountdetails(driver, extentTest, testName, testDataIteration, Brokeraccount, "+91 94978 52369", "AB, Calgary-CBD", "+919497852369");

            // Select Summary tab and verify email is reflected in timeline
            generic.NavigateTabsOpportunity(driver, extentTest, testName, testDataIteration, "Summary");
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());
            generic.verifytimelineemail(driver, extentTest, testName, testDataIteration);

            //Log out
            // generic.Logout(driver, extentTest, testName, testDataIteration);
            //generic.Loginafterlogout(driver, extentTest, testName, testDataIteration, emailid, Ro["PasswordAD"].ToString());
            //generic.NavigateToOutlook(driver, extentTest, testName, testDataIteration);
            //generic.SearchAndVerifysystemEmailOutlook(driver, extentTest, testName, testDataIteration, contactname, contactname, oppreference, "Thank you for sending us your referral", "Regus Broker Team");

            // Log out
            generic.Logout(driver, extentTest, testName, testDataIteration);

            //}
            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}
        }
        public static IEnumerable<object[]> RTA_11121()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// CRM-4574
        ///  Verify whether while selecting a Broker contact on an Lead form it should populate the Broker Account with Broker Details.
        /// </summary>
        [TestCategory("BrokerAccount"), TestCategory("25Aug"), TestCategory("Sprint3640"), TestCategory("Priority1")]
        [TestProperty("TestcaseID", "RTA-11121")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_11121), DynamicDataSourceType.Method)]
        public void RTA_11121_VerifyBrokeerAccountpopulatedonLead(DataRow Ro)
        {
            try
            {
                string now = System.DateTime.Now.ToString();
                // Login as Sales Agent
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());

                // Create Account
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString());
                generic.SelectNewTab(driver, extentTest, testName, testDataIteration);
                string Brokeraccount = generic.CreateNewAccountWithCustomerTypeNew(driver, extentTest, testDataIteration, testName, Ro["TestAccountLink"].ToString(), now, Ro["CustomerType2"].ToString());
                //generic.EnterContactNumber(driver, extentTest, testName, testDataIteration, Ro["BussinessPhone"].ToString());

                // Select Contacts entity and create new
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
                string contactname = generic.CreateNewContactEnterpriseSalesForBroker(driver, extentTest, testDataIteration, testName, Ro["Contactname"].ToString(), now, Ro["Email"].ToString(), Brokeraccount);
                // generic.EnterContactNumber(driver, extentTest, testName, testDataIteration, Ro["BussinessPhone"].ToString());
                //generic.Entercompanyname(driver, extentTest, testName, testDataIteration,Brokeraccount);
                // generic.Movetobroker(driver, extentTest, testName, testDataIteration, Ro["CustomerType2"].ToString());

                //Click Lead and create new Lead
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity3"].ToString());
                generic.SelectNewTab(driver, extentTest, testName, testDataIteration);

                // generic.createandqualifylead(driver, extentTest, testName, testDataIteration, "Lead" + now, Ro["AddEmail"].ToString(), Ro["BussinessPhone"].ToString(), Ro["Source"].ToString(), Ro["MajorSource"].ToString(), Ro["MinorSource2"].ToString(), now, "ExistingContact", "", contactname, "", "");
                generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);


                // Link Broker Contact
                generic.LinkBrokerdetailsNew(driver, extentTest, testName, testDataIteration, Brokeraccount, contactname);

                // Verify Brokr contact details are displayed
                generic.VerifybrokercontactdetailsNew(driver, extentTest, testName, testDataIteration);


                // Verify Broker Account populated
                generic.VerifybrokerAccountdetailsLeadNew(driver, extentTest, testName, testDataIteration);


                //Log out
                login.Logout(driver, extentTest, testName, testDataIteration);
                generic.DiscardChanges(driver, extentTest, testName, testDataIteration);
            }
            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }

        public static IEnumerable<object[]> RTA_6129()
        {
            foreach (DataRow row in getTestCaseList("ITSalesUser"))
            {
                yield return new object[] { row };
            }
        }

        /// <summary>
        /// To verify that account field automatically gets filled in IT sales opportunity when contact is added.
        /// </summary>
        [TestCategory("smoke"), TestCategory("Validation1"), TestCategory("RF24-4-20"), TestCategory("Sprint32NC")]
        [TestProperty("TestcaseID", "RTA-6129")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_6129), DynamicDataSourceType.Method)]
        public void RTA_6129_ITSalesExistingContactAccountVerification(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
                generic.SelectNewTab(driver, extentTest, testName, testDataIteration);
                string TimeInSec = generic.GetSystemTimeInSec(driver, extentTest, testName, testDataIteration);
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                generic.SelectNewTab(driver, extentTest, testName, testDataIteration);
                generic.VerifyContactAndAccount(driver, extentTest, testName, testDataIteration, Ro["Topic"].ToString(), Ro["LName"].ToString(), TimeInSec, Ro["AccountName"].ToString());
                generic.Logout(driver, extentTest, testName, testDataIteration);
            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }
        public static IEnumerable<object[]> RTA_6133()
        {
            foreach (DataRow row in getTestCaseList("ITSalesUser"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To verify that account can be linked to contact in IT sales opportunity if they are not linked.
        /// </summary>
        [TestCategory("smoke"), TestCategory("Validation1"), TestCategory("RF24-4-20"), TestCategory("Sprint32NC")]
        [TestProperty("TestcaseID", "RTA-6133")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_6133), DynamicDataSourceType.Method)]
        public void RTA_6133_ITSalesNewContactAccountVerification(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                generic.SelectNewTab(driver, extentTest, testName, testDataIteration);
                string TimeInSec = generic.GetSystemTimeInSec(driver, extentTest, testName, testDataIteration);

                string name = generic.AddNewContactAccountinOpportunity(driver, extentTest, testName, testDataIteration, Ro["Topic"].ToString(), TimeInSec, Ro["LName"].ToString(), Ro["Language"].ToString());

                generic.Addnewaccountopportunity(driver, extentTest, testName, testDataIteration, TimeInSec, Ro["AccountName"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
                generic.OpenRecordGlobalSearch(driver, extentTest, testName, testDataIteration, name);
                generic.VerifyContactAndAccount(driver, extentTest, testName, testDataIteration, Ro["Topic"].ToString(), Ro["LName"].ToString(), TimeInSec, Ro["AccountName"].ToString());
                generic.Logout(driver, extentTest, testName, testDataIteration);
                //generic.DiscardChanges(driver, extentTest, testName, testDataIteration);

            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }
        public static IEnumerable<object[]> RTA_5852()
        {
            foreach (DataRow row in getTestCaseList("ITSalesManager"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To verify an IT Sales Manager is able to update account record
        /// </summary>
        [TestCategory("smoke"), TestCategory("IT Sales"), TestCategory("RerunMay9"), TestCategory("Validation1"), TestCategory("QARefactorfail"), TestCategory("Rerun-21062020_1"), TestCategory("Rerun-24062020"), TestCategory("Sprint32NC")]
        [TestProperty("TestcaseID", "RTA-5852")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5852), DynamicDataSourceType.Method)]

        public void RTA_5852_ITSalesManagerisabletoupdaterecord(DataRow Ro)
        {
            //try
            //{
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity3"].ToString());
            generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "Active Accounts");
            generic.SelectActiveCellContacts(driver, extentTest, testName, testDataIteration);
            generic.UpdateandVerifyAccounts(driver, extentTest, testName, testDataIteration, Ro["Field2"].ToString(), Ro["CompanyName"].ToString());
            login.Logout(driver, extentTest, testName, testDataIteration);

            //}

            //catch (Exception e)
            //{
            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "The testcase failed due to the following error :  " + e, " ");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}

        }
        public static IEnumerable<object[]> RTA_6132()
        {
            foreach (DataRow row in getTestCaseList("EnterpriseSalesManager"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To verify that account can be linked to contact in EnterpriseSales opportunity if they are not linked.
        /// </summary>
        [TestCategory("smoke"), TestCategory("Validation1"), TestCategory("QARefactorfail"), TestCategory("Sprint32NC"), TestCategory("11Sep")]
        [TestProperty("TestcaseID", "RTA-6132")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_6132), DynamicDataSourceType.Method)]
        public void RTA_6132_EnterpriseSalesNewContactAccountVerification(DataRow Ro)
        {
            //try
            //{
            string Date = DateTime.Today.ToString("dd-MM-yyyy");
            DateTime Now = DateTime.Now;
            string Time = Date + Convert.ToString(Now.Hour) + Convert.ToString(Now.Millisecond);
            string NewContactName = "ContactNamewithacc" + Time;
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
            generic.SelectNewTab(driver, extentTest, testName, testDataIteration);
            string TimeInSec = generic.GetSystemTimeInSec(driver, extentTest, testName, testDataIteration);
            string contactname = generic.AddNewContactAccountinOpportunity(driver, extentTest, testName, testDataIteration, Ro["Topic"].ToString(), TimeInSec, Ro["Newcontactname"].ToString(), Ro["TestContactLanguage"].ToString());

            ThinkTime(3);

            generic.SelectNewTab(driver, extentTest, testName, testDataIteration);
            generic.AddNewContactwithAccountinOpportunity(driver, extentTest, testName, testDataIteration, Ro["Topic"].ToString(), TimeInSec, Ro["Newcontactname"].ToString(), Ro["TestContactLanguage"].ToString(), Ro["TestAccount"].ToString());

            generic.Logout(driver, extentTest, testName, testDataIteration);


            //}

            //        catch (Exception e)
            //        {

            //            AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}
        }

        public static IEnumerable<object[]> RTA_6130()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To verify that account can be linked to contact in IT sales opportunity if they are not linked.
        /// </summary>
        [TestCategory("smoke"), TestCategory("1410"), TestCategory("RF24-4-20"), TestCategory("RerunMay120"), TestCategory("Sprint32NC")]
        [TestProperty("TestcaseID", "RTA-6130")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_6130), DynamicDataSourceType.Method)]
        public void RTA_6130_SalesNewContactAccountVerification(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                ThinkTime(3);
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                generic.SelectNewTab(driver, extentTest, testName, testDataIteration);
                ThinkTime(3);
                generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
                string TimeInSec = generic.GetSystemTimeInSec(driver, extentTest, testName, testDataIteration);
                generic.AddAndVerifyContactInOpportunitySales(driver, extentTest, testDataIteration, testName, TimeInSec, Ro["Lname"].ToString(), Ro["Language1"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
                generic.DiscardChanges(driver, extentTest, testName, testDataIteration);

                ThinkTime(10);
                generic.SelectNewTab(driver, extentTest, testName, testDataIteration);
                generic.AddNewContactITSales(driver, extentTest, testName, testDataIteration, Ro["LastNaame1"].ToString(), Ro["AccountName"].ToString(), Ro["Language"].ToString(), TimeInSec);
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                generic.SelectNewTab(driver, extentTest, testName, testDataIteration);
                generic.VerifyContactAndAccountSalesAutopopulated(driver, extentTest, testName, testDataIteration, Ro["Topic"].ToString(), Ro["LastNaame1"].ToString(), TimeInSec, Ro["AccountName"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
                generic.DiscardChanges(driver, extentTest, testName, testDataIteration);
                generic.Logout(driver, extentTest, testName, testDataIteration);


            }
            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }


        public static IEnumerable<object[]> RTA_6104()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To verify that account field automatically gets filled in sales opportunity when contact is added.
        /// </summary>
        [TestCategory("smoke"), TestCategory("Validation1"), TestCategory("RerunMay9"), TestCategory("Sprint32NC"), TestCategory("hash02")]
        [TestProperty("TestcaseID", "RTA-6104")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_6104), DynamicDataSourceType.Method)]
        public void RTA_6104_SalesExistingContactAccountVerification(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
                generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);
                generic.SelectNewTab(driver, extentTest, testName, testDataIteration);
                string TimeInSec = generic.GetSystemTimeInSecnew(driver, extentTest, testName, testDataIteration);
                Console.WriteLine(TimeInSec);
                generic.AddNewContactITSales(driver, extentTest, testName, testDataIteration, Ro["LName1"].ToString(), Ro["AccountName"].ToString(), Ro["Language"].ToString(), TimeInSec);
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                generic.SelectNewTab(driver, extentTest, testName, testDataIteration);
                generic.VerifyContactAndAccountSalesAutopopulated(driver, extentTest, testName, testDataIteration, Ro["Topic"].ToString(), Ro["LName1"].ToString(), TimeInSec, Ro["AccountName"].ToString());

                generic.saveFooter(driver, extentTest, testName, testDataIteration);

                generic.LogoutET(driver, extentTest, testName, testDataIteration);
                generic.DiscardChanges(driver, extentTest, testName, testDataIteration);


            }
            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }
        public static IEnumerable<object[]> RTA_6105()
        {
            foreach (DataRow row in getTestCaseList("EnterpriseSalesManager"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To verify that account field automatically gets filled in Enterprose sales opportunity when contact is added.
        /// </summary>
        [TestCategory("smoke"), TestCategory("Validation1"), TestCategory("0309"), TestCategory("Sprint32NC")]
        [TestProperty("TestcaseID", "RTA-6105")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_6105), DynamicDataSourceType.Method)]
        public void RTA_6105_EntSalesExistContAccVerify(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["EntityContact"].ToString());
                //generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);
                generic.SelectNewTab(driver, extentTest, testName, testDataIteration);
                string TimeInSec = DateTime.UtcNow.ToString("yyyy-MM-dd HH:mm:ss.fff", CultureInfo.InvariantCulture);
                generic.AddNewContactITSales(driver, extentTest, testName, testDataIteration, Ro["TestContactLname"].ToString(), Ro["TestOpportunityAccountName"].ToString(), Ro["TestContactLanguage"].ToString(), TimeInSec);
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                generic.SelectNewTab(driver, extentTest, testName, testDataIteration);

                generic.VerifyContactAndAccountSalesAutopopulated(driver, extentTest, testName, testDataIteration, Ro["Topic"].ToString(), Ro["TestContactLname"].ToString(), TimeInSec, Ro["TestOpportunityAccountName"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["EntityContact"].ToString());
                generic.DiscardChanges(driver, extentTest, testName, testDataIteration);
                login.Logout(driver, extentTest, testName, testDataIteration);
            }
            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }


        public static IEnumerable<object[]> RTA_6103()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }

        /// <summary>
        /// To verify that language gets included in sales opportunity when a contact is added.
        /// </summary>
        [TestCategory("smoke"), TestCategory("Validation1"), TestCategory("RF24-4-20"), TestCategory("TestLock1"), TestCategory("Sprint32NC"), TestCategory("25Aug")]
        [TestProperty("TestcaseID", "RTA-6103")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_6103), DynamicDataSourceType.Method)]
        public void RTA_6103_SalesLanguageVerification(DataRow Ro)
        {
            try
            {

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString());
                generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);
                string Time = System.DateTime.Now.ToString();

                // Create new account
                string Accountname = generic.CreateNewAccount(driver, extentTest, testDataIteration, testName, "Test" + Time);

                // Create new contact
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
                string contactname = generic.CreateNewContactITSaleswithlanguageandemail(driver, extentTest, testDataIteration, testName, "TestContact", Time, "test@gmal.com", Accountname);

                // Verify language auto populated
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                generic.SelectNewTab(driver, extentTest, testName, testDataIteration);
                generic.VerifyLanguageSalesAutopopulated(driver, extentTest, testName, testDataIteration, contactname);

                // Logout
                generic.LogoutET(driver, extentTest, testName, testDataIteration);
                generic.DiscardChanges(driver, extentTest, testName, testDataIteration);
            }
            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }

        public static IEnumerable<object[]> RTA_6122()
        {
            foreach (DataRow row in getTestCaseList("EnterpriseSalesManager"))
            {
                yield return new object[] { row };
            }
        }

        /// <summary>
        /// To verify that language gets included in Enterprisesales opportunity when a contact is added.
        /// </summary>
        [TestCategory("smoke"), TestCategory("Validation1"), TestCategory("Sprint32NC")]
        [TestProperty("TestcaseID", "RTA-6122")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_6122), DynamicDataSourceType.Method)]
        public void RTA_6122_ESalesLanguageVerification(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                string Time = System.DateTime.Now.ToString();

                // Create new account
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString());
                string Accountname = generic.CreateNewAccount(driver, extentTest, testDataIteration, testName, "Test" + Time);

                // Create new contact
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["EntityContact"].ToString());
                string contactname = generic.CreateNewContactITSaleswithlanguageandemail(driver, extentTest, testDataIteration, testName, "TestContact", Time, "test@gmal.com", Accountname);

                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity3"].ToString());
                generic.SelectNewTab(driver, extentTest, testName, testDataIteration);
                generic.VerifyLanguageSalesAutopopulated(driver, extentTest, testName, testDataIteration, contactname);
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity3"].ToString());
                generic.DiscardChanges(driver, extentTest, testName, testDataIteration);

                // Logout
                generic.Logout(driver, extentTest, testName, testDataIteration);

            }
            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }


        public static IEnumerable<object[]> RTA_6123()
        {
            foreach (DataRow row in getTestCaseList("ITSalesUser"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To verify that language gets included in ITsales opportunity when a contact is added.
        /// </summary>
        [TestCategory("smoke"), TestCategory("Validation1"), TestCategory("RF24-4-20"), TestCategory("Sprint32NC")]
        [TestProperty("TestcaseID", "RTA-6123")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_6123), DynamicDataSourceType.Method)]
        public void RTA_6123_ITSalesLanguageVerification(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                generic.SelectNewTab(driver, extentTest, testName, testDataIteration);
                generic.VerifyLanguageSalesAutopopulated(driver, extentTest, testName, testDataIteration, Ro["TestContact"].ToString());
                generic.Logout(driver, extentTest, testName, testDataIteration);
            }
            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }


        public static IEnumerable<object[]> RTA_6063()
        {
            foreach (DataRow row in getTestCaseList("SalesEnterpriseAccountManager"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To verify whether the Sales Enterprise Account Manager is provided with Activity entity Read and Write permission as "Org"
        /// </summary>
        [TestCategory("smoke"), TestCategory("Validation1"), TestCategory("Sprint32NC"), TestCategory("25Aug")]
        [TestProperty("TestcaseID", "RTA-6063")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_6063), DynamicDataSourceType.Method)]
        public void RTA_6063_SalesEAM_ActivityReadWritePermission(DataRow Ro)
        {
            try
            {

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
                //   generic.FilterOwnerEnterpriseSales(driver, extentTest, testName, testDataIteration, Ro["FilterCondition"].ToString(), Ro["Owner"].ToString());
                //  generic.FilterActivityTypeEnterpriseSales(driver, extentTest, testName, testDataIteration, Ro["ActivityType"].ToString());
                //  generic.SelectingActiveCellEnterpriseSales(driver, extentTest, testName, testDataIteration);

                string Time = System.DateTime.Now.ToString();
                generic.NavigateToRibbonButtonActivities(driver, extentTest, testName, testDataIteration, Ro["RibbonActivityPhoneCall"].ToString());

                string Activityname = generic.CreateNewPhoneCallActivityETteam(driver, extentTest, testName, testDataIteration, Time, Ro["PhoneCallSubject"].ToString(), Ro["TestAccount"].ToString());

                generic.VerifyActivityEditableEnterpriseSales(driver, extentTest, testName, testDataIteration, Ro["Subject"].ToString());
                generic.Logout(driver, extentTest, testName, testDataIteration);
            }


            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }
        public static IEnumerable<object[]> RTA_5618()
        {
            foreach (DataRow row in getTestCaseList("SalesEnterpriseDirector"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To check whether the Sales Enterprise Director is provided with account entity Read permission as "Org" and Write permission as "Org"
        /// </summary>
        [TestCategory("RerunMay9"), TestCategory("Validation1"), TestCategory("Rerun-21062020_1"), TestCategory("Sprint32NC"), TestCategory("25Aug")]
        [TestProperty("TestcaseID", "RTA-5618")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5618), DynamicDataSourceType.Method)]
        public void RTA_5618_SalesED_AccoountReadWritePermission(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString());
                // generic.OpenRecordGlobalSearch(driver, extentTest, testName, testDataIteration, Ro["Accountsearch"].ToString());
                generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
                generic.CreateNewAccount(driver, extentTest, testDataIteration, testName, Ro["CompanyName1"].ToString());

                generic.VerifyAccounteditableED(driver, extentTest, testDataIteration, testName, Ro["Phone"].ToString());
                login.Logout(driver, extentTest, testName, testDataIteration);

            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }

        public static IEnumerable<object[]> RTA_5565()
        {
            foreach (DataRow row in getTestCaseList("SalesEnterpriseDirector"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To check whether the Sales Enterprise Director is provided with account entity Read permission as "Org" and Write permission as "Org"
        /// </summary>
        [TestCategory("RerunMay9"), TestCategory("Validation1"), TestCategory("Sprint32NC"), TestCategory("25Aug")]
        [TestProperty("TestcaseID", "RTA-5565")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5565), DynamicDataSourceType.Method)]
        public void RTA_5565_SalesED_ActivityReadWritePermission(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());

                string Time = System.DateTime.Now.ToString();
                generic.NavigateToRibbonButtonActivities(driver, extentTest, testName, testDataIteration, Ro["RibbonActivityPhoneCall"].ToString());

                string Activityname = generic.CreateNewPhoneCallActivityETteam(driver, extentTest, testName, testDataIteration, Time, Ro["PhoneCallSubject"].ToString(), Ro["TestAccount"].ToString());


                //generic.OpenRecordGlobalSearch(driver, extentTest, testName, testDataIteration, Ro["Accountsearch"].ToString());
                //generic.VerifyAccounteditableED(driver, extentTest, testDataIteration, testName, Ro["Phone"].ToString());
                generic.VerifyActivityEditableEnterpriseSales(driver, extentTest, testName, testDataIteration, Ro["Subject"].ToString());

                login.Logout(driver, extentTest, testName, testDataIteration);
            }


            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }

        public static IEnumerable<object[]> RTA_5545()
        {
            foreach (DataRow row in getTestCaseList("ITSalesUser"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To Verify that the IT Sales User is able to see the "Location Tab" & its fields in "Opportunity Summary Section" of Opportunity form
        /// </summary>
        [TestCategory("smoke"), TestCategory("Validation1"), TestCategory("Sprint32NC")]
        [TestProperty("TestcaseID", "RTA-5545")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5545), DynamicDataSourceType.Method)]
        public void RTA_5545_VerifyLocationfieldsOpportunity(DataRow Ro)
        {
            try
            {

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "Open IT Sales opportunities");
                generic.SelectingActiveCell(driver, extentTest, testName, testDataIteration);
                generic.scrollDownOpportunityEnterprise(driver, extentTest, testName, testDataIteration);
                generic.scrollDownOpportunityEnterprise(driver, extentTest, testName, testDataIteration);
                generic.scrollDownOpportunityEnterprise(driver, extentTest, testName, testDataIteration);
                generic.scrollDownOpportunityEnterprise(driver, extentTest, testName, testDataIteration);
                generic.VerifyOpportunityLocation(driver, extentTest, testName, testDataIteration, Ro["Location"].ToString());
                generic.Logout(driver, extentTest, testName, testDataIteration);
            }


            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }
        public static IEnumerable<object[]> RTA_5544()
        {
            foreach (DataRow row in getTestCaseList("ITSalesUser"))
            {
                yield return new object[] { row };
            }
        }
        // <summary>
        /// To Verify that the IT Sales User is able to see the "Location Tab" & its fields in "Opportunity Summary Section" of Opportunity form
        /// </summary>
        [TestCategory("smoke"), TestCategory("Validation1"), TestCategory("RerunMay9"), TestCategory("RerunMay120"), TestCategory("QARefactorfail"), TestCategory("Sprint32NC")]
        [TestProperty("TestcaseID", "RTA-5544")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5544), DynamicDataSourceType.Method)]
        public void RTA_5544_ITSalesOpportunitySummarysectionverification(DataRow Ro)
        {
            try
            {

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "Open IT Sales opportunities");
                generic.SelectingActiveCell(driver, extentTest, testName, testDataIteration);
                generic.VerifyCustomerTabField(driver, extentTest, testName, testDataIteration, "Topic", "Opportunity sub-type", "Contact", "Business Phone", "Email", "Company", "Customer");
                generic.Logout(driver, extentTest, testName, testDataIteration);
            }


            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }



        public static IEnumerable<object[]> RTA_5792()
        {
            foreach (DataRow row in getTestCaseList("SalesEnterpriseAccountManager"))
            {
                yield return new object[] { row };
            }
        }

        /// <summary>
        /// To verify whether the Sales Enterprise Account Manager is provided with Opportunity entity Read permission as "Org" and Write permission as "Org".
        /// </summary>
        [TestCategory("RerunMay9"), TestCategory("Validation1"), TestCategory("Sprint32NC"), TestCategory("CreateOppEnt")]
        [TestProperty("TestcaseID", "RTA-5792")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5792), DynamicDataSourceType.Method)]
        public void RTA_5792_SalesEAM_OpportunityReadWritePermission(DataRow Ro)
        {
            //try
            //{
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            string time = System.DateTime.Now.ToString();
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
            generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
            generic.CreateNewOpportunityEntetrprise(driver, extentTest, testDataIteration, testName, Ro["TestOpportunityAccountName"].ToString(), time, Ro["TestCountry"].ToString(), Ro["TestCurrency"].ToString(), Ro["TestChannel"].ToString(), Ro["TestMajorSource"].ToString(), Ro["TestMinorSource"].ToString(), Ro["TestNewContact"].ToString());

            //generic.OpenRecordGlobalSearch(driver, extentTest, testName, testDataIteration, Ro["TestOpportunityReadEdit"].ToString());

            generic.VerifyOpportunityRecordEditable(driver, extentTest, testDataIteration, testName, time, "TestContact");
            generic.Logout(driver, extentTest, testName, testDataIteration);
            //}


            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}
        }

        public static IEnumerable<object[]> RTA_5791()
        {
            foreach (DataRow row in getTestCaseList("EnterpriseSalesManager"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To verify whether the Sales Enterprise Manager is provided with Opportunity entity Read permission as "Org" and Write permission as "Org".
        /// </summary>
        [TestCategory("smoke"), TestCategory("Validation1"), TestCategory("Sprint32NC"), TestCategory("CreateOppEnt"), TestCategory("2810")]
        [TestProperty("TestcaseID", "RTA-5791")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5791), DynamicDataSourceType.Method)]
        public void RTA_5791_SalesEM_OpportunityReadWritePermission(DataRow Ro)
        {
            //try
            //{
                login.Login(driver, extentTest, testName, testDataIteration, ESTuRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
               // generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                string now = System.DateTime.Now.ToString();
                generic.CreateNewOpportunityEntetrprise(driver, extentTest, testDataIteration, testName, Ro["TestOpportunityAccountName"].ToString(), now, Ro["TestCountry"].ToString(), Ro["TestCurrency"].ToString(), Ro["TestChannel"].ToString(), Ro["TestMajorSource"].ToString(), Ro["TestMinorSource"].ToString(), Ro["TestNewContact"].ToString());
                //generic.OpenRecordGlobalSearch(driver, extentTest, testName, testDataIteration, Ro["TestOpportunityReadEdit"].ToString());
                string time = System.DateTime.Now.ToString();
                generic.VerifyOpportunityRecordEditable(driver, extentTest, testDataIteration, testName, time, "TestContact");
                generic.Logout(driver, extentTest, testName, testDataIteration);
            //}


            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}
        }
        public static IEnumerable<object[]> RTA_5723()
        {
            foreach (DataRow row in getTestCaseList("EnterpriseSalesManager"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To verify whether the Sales Enterprise Manager is provided with Opportunity entity Read permission as "Org" and Write permission as "Org".
        /// </summary>
        [TestCategory("smoke"), TestCategory("Validation1"), TestCategory("Sprint32NCS")]
        [TestProperty("TestcaseID", "RTA-5723")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5723), DynamicDataSourceType.Method)]
        public void RTA_5723_SalesEM_ReadWritepermission(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["EntityContact"].ToString());
                //generic.OpenRecordGlobalSearch(driver, extentTest, testName, testDataIteration, Ro["ContactEdit"].ToString());
                string now = System.DateTime.Now.ToString();
                generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());

                generic.CreateNewContact(driver, extentTest, testDataIteration, testName, Ro["LastName"].ToString() + now, Ro["TestContactLanguage"].ToString(), Ro["UserName"].ToString());

                string time = System.DateTime.Now.ToString();
                generic.VerifyContactFirstNameEditable(driver, extentTest, testDataIteration, testName, Ro["AreaLabel1"].ToString(), Ro["Fname"].ToString(), time);
                generic.Logout(driver, extentTest, testName, testDataIteration);
            }


            catch (Exception e)
            {
                AddLog(driver, extentTest, testName, testDataIteration, "Info", "Failed due to" + e.Message, "Test Failed"); AddLog(driver, extentTest, testName, testDataIteration, "Info", "Failed due to" + e.Message, "Test Failed"); Type thisType = this.GetType(); object testCall = this; ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");


            }
        }
        public static IEnumerable<object[]> RTA_5268()
        {
            foreach (DataRow row in getTestCaseList("EnterpriseSalesManager"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To verify an Enterprise Sales Manager is able to see Sales Manager and Director Dashboard
        /// </summary>
        [TestCategory("smoke"), TestCategory("Validation1"), TestCategory("Sprint32NCS")]
        [TestProperty("TestcaseID", "RTA-5268")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5268), DynamicDataSourceType.Method)]
        public void RTA_5268_SalesManagerandDirectordashboard(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["DashboardEntity"].ToString());
                generic.SelectValuesFromDashboardDropDown(driver, extentTest, testName, testDataIteration, Ro["Role"].ToString());
                generic.Logout(driver, extentTest, testName, testDataIteration);
            }


            catch (Exception e)
            {
                AddLog(driver, extentTest, testName, testDataIteration, "Info", "Failed due to" + e.Message, "Test Failed"); AddLog(driver, extentTest, testName, testDataIteration, "Info", "Failed due to" + e.Message, "Test Failed"); Type thisType = this.GetType(); object testCall = this; ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");


            }
        }
        public static IEnumerable<object[]> RTA_5612()
        {
            foreach (DataRow row in getTestCaseList("EnterpriseSalesManager"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To verify whether appropriate sections are included in the opportunity record form
        /// /// </summary>
        [TestCategory("smoke"), TestCategory("Validation1"), TestCategory("Sprint32NC"), TestCategory("0309")]
        [TestProperty("TestcaseID", "RTA-5612")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5612), DynamicDataSourceType.Method)]
        public void RTA_5612_OppRecordFormvaliation(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
                generic.VerifyOpportunitydetails(driver, extentTest, testDataIteration, testName, Ro["EstimatedCloseDateField"].ToString(), Ro["ProbabilityField"].ToString());
                generic.SelectanyOpportunitybutton(driver, extentTest, testDataIteration, testName, Ro["ServiceProviderTab"].ToString());
                generic.OpportunityFieldVerification(driver, extentTest, testName, testDataIteration, Ro["ServiceProviderAccountField"].ToString(), Ro["ServiceProviderContact"].ToString());

                generic.Logout(driver, extentTest, testName, testDataIteration);

            }
            catch (Exception e)
            {
                AddLog(driver, extentTest, testName, testDataIteration, "Info", "Failed due to" + e.Message, "Test Failed"); AddLog(driver, extentTest, testName, testDataIteration, "Info", "Failed due to" + e.Message, "Test Failed"); Type thisType = this.GetType(); object testCall = this; ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");


            }
        }

        public static IEnumerable<object[]> RTA_5537()
        {
            foreach (DataRow row in getTestCaseList("ITSalesManager"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To verify whether appropriate sections are included in the opportunity record form
        /// /// </summary>
        [TestCategory("smoke"), TestCategory("Validation1"), TestCategory("Sprint32NC")]
        [TestProperty("TestcaseID", "RTA-5537")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5537), DynamicDataSourceType.Method)]
        public void RTA_5537_ITSalesManDBOpenITSalesOppoListVisible(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity0"].ToString());
                generic.SelectValuesFromDashboardDropDown(driver, extentTest, testName, testDataIteration, "IT Sales Manager");
                generic.SelectValuesFromSalesOpportunity(driver, extentTest, testName, testDataIteration, "Open IT Sales opportunities");
                generic.Logout(driver, extentTest, testName, testDataIteration);

            }

            catch (Exception e)
            {
                AddLog(driver, extentTest, testName, testDataIteration, "Info", "Failed due to" + e.Message, "Test Failed"); AddLog(driver, extentTest, testName, testDataIteration, "Info", "Failed due to" + e.Message, "Test Failed"); Type thisType = this.GetType(); object testCall = this; ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");


            }
        }

        public static IEnumerable<object[]> RTA_5538()
        {
            foreach (DataRow row in getTestCaseList("ITSalesManager"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To verify whether appropriate sections are included in the opportunity record form
        /// /// </summary>
        [TestCategory("smoke"), TestCategory("Validation1"), TestCategory("Sprint32NC")]
        [TestProperty("TestcaseID", "RTA-5538")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5538), DynamicDataSourceType.Method)]
        public void RTA_5538_ITSMDBNewITSalesOppVisible(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity0"].ToString());
                generic.SelectValuesFromDashboardDropDown(driver, extentTest, testName, testDataIteration, "IT Sales Manager");
                generic.SelectValuesFromSalesOpportunity(driver, extentTest, testName, testDataIteration, "New IT Sales Opportunities");
                generic.Logout(driver, extentTest, testName, testDataIteration);

            }

            catch (Exception e)
            {
                AddLog(driver, extentTest, testName, testDataIteration, "Info", "Failed due to" + e.Message, "Test Failed"); AddLog(driver, extentTest, testName, testDataIteration, "Info", "Failed due to" + e.Message, "Test Failed"); Type thisType = this.GetType(); object testCall = this; ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");


            }
        }
        public static IEnumerable<object[]> RTA_5540()
        {
            foreach (DataRow row in getTestCaseList("ITSalesManager"))
            {
                yield return new object[] { row };
            }
        }

        /// <summary>
        /// To verify whether appropriate sections are included in the opportunity record form
        ///  </summary>
        [TestCategory("smoke"), TestCategory("Validation1"), TestCategory("Sprint32NC")]
        [TestProperty("TestcaseID", "RTA-5540")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5540), DynamicDataSourceType.Method)]
        public void RTA_5540_ITSMDBITSalesPhoneSectionIsVisible(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                // generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity0"].ToString());
                generic.SelectValuesFromDashboardDropDown(driver, extentTest, testName, testDataIteration, "IT Sales Manager");

                generic.VerifyITSalesManagerDashboardkpiheaders(driver, extentTest, testName, testDataIteration, Ro["KPI1"].ToString(), Ro["KPI2"].ToString(), Ro["KPI3"].ToString(), Ro["KPI5"].ToString(), Ro["KPI6"].ToString());
                generic.Logout(driver, extentTest, testName, testDataIteration);

            }
            catch (Exception e)
            {
                AddLog(driver, extentTest, testName, testDataIteration, "Info", "Failed due to" + e.Message, "Test Failed"); AddLog(driver, extentTest, testName, testDataIteration, "Info", "Failed due to" + e.Message, "Test Failed"); Type thisType = this.GetType(); object testCall = this; ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");


            }
        }

        public static IEnumerable<object[]> RTA_5722()
        {
            foreach (DataRow row in getTestCaseList("SalesEnterpriseDirector"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To verify whether the Sales Enterprise Manager is provided with Opportunity entity Read permission as "Org" and Write permission as "Org".
        /// </summary>
        [TestCategory("RerunMay9"), TestCategory("Validation1"), TestCategory("Sprint32NC")]
        [TestProperty("TestcaseID", "RTA-5722")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5722), DynamicDataSourceType.Method)]
        public void RTA_5722_SalesED_ReadWritepermission(DataRow Ro)
        {

            //try
            // {
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["EntityContact"].ToString());
            string now = System.DateTime.Now.ToString();
            generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());

            generic.CreateNewContact(driver, extentTest, testDataIteration, testName, Ro["LastName"].ToString() + now, Ro["TestContactLanguage"].ToString(), Ro["UserName"].ToString());

            string Contactname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");

            // generic.OpenRecordGlobalSearch(driver, extentTest, testName, testDataIteration, Ro["ContactEdit"].ToString());
            string time = System.DateTime.Now.ToString();
            generic.VerifyContactFirstNameEditable(driver, extentTest, testDataIteration, testName, Ro["AreaLabel1"].ToString(), Ro["Fname"].ToString(), time);
            generic.Logout(driver, extentTest, testName, testDataIteration);
            //}


            //    catch (Exception e)
            //    {


            //        AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //        Type thisType = this.GetType();
            //        object testCall = this;
            //        ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //    }
        }
        public static IEnumerable<object[]> RTA_5725()
        {
            foreach (DataRow row in getTestCaseList("SalesEnterpriseAccountManager"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To verify whether the Sales Enterprise Manager is provided with Opportunity entity Read permission as "Org" and Write permission as "Org".
        /// </summary>
        [TestCategory("smoke"), TestCategory("Validation1"), TestCategory("Sprint32NC")]
        [TestProperty("TestcaseID", "RTA-5725")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5725), DynamicDataSourceType.Method)]
        public void RTA_5725_SalesEAM_ReadWritepermission(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["EntityContact"].ToString());
                //generic.OpenRecordGlobalSearch(driver, extentTest, testName, testDataIteration, Ro["ContactEdit"].ToString());
                string now = System.DateTime.Now.ToString();
                generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());

                generic.CreateNewContact(driver, extentTest, testDataIteration, testName, Ro["LastName"].ToString() + now, Ro["TestContactLanguage"].ToString(), Ro["UserName"].ToString());

                string time = System.DateTime.Now.ToString();
                generic.VerifyContactFirstNameEditable(driver, extentTest, testDataIteration, testName, Ro["AreaLabel1"].ToString(), Ro["Fname"].ToString(), time);
                generic.Logout(driver, extentTest, testName, testDataIteration);
            }


            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }
        public static IEnumerable<object[]> RTA_5665()
        {
            foreach (DataRow row in getTestCaseList("SalesEnterpriseAccountManager"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To verify whether the Sales Enterprise Account Manager is provided with Opportunity entity Read permission as "Org" and Write permission as "Org".
        /// </summary>
        [TestCategory("smoke"), TestCategory("Validation1"), TestCategory("Sprint32NC")]
        [TestProperty("TestcaseID", "RTA-5665")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5665), DynamicDataSourceType.Method)]
        public void RTA_5665_SalesEAM_AccountReadWritepermission(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString());
                string now = System.DateTime.Now.ToString();
                generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());

                generic.CreateNewAccount(driver, extentTest, testDataIteration, testName, Ro["CompanyName1"].ToString());

                // generic.OpenRecordGlobalSearch(driver, extentTest, testName, testDataIteration, Ro["EditAccount"].ToString());
                string time = System.DateTime.Now.ToString();
                generic.VerifyContactFirstNameEditable(driver, extentTest, testDataIteration, testName, Ro["AreaLabel2"].ToString(), Ro["WebsiteValue"].ToString(), time);
                generic.Logout(driver, extentTest, testName, testDataIteration);
            }


            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }

        public static IEnumerable<object[]> RTA_5614()
        {
            foreach (DataRow row in getTestCaseList("EnterpriseSalesManager"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To verify whether Enterprise Sales Manager is able to see Account DB Business Profile Summary Section and its related fields.
        /// </summary>
        [TestCategory("RerunMay9"), TestCategory("Validation1"), TestCategory("Sprint32NC")]
        [TestProperty("TestcaseID", "RTA-5614")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5614), DynamicDataSourceType.Method)]
        public void RTA_5614_SalesEnterpriseManagerAccountDBVerification(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString());
                //generic.OpenRecordGlobalSearch(driver, extentTest, testName, testDataIteration, Ro["TestAccountDB"].ToString());
                generic.SelectNewTab(driver, extentTest, testName, testDataIteration);

                generic.NavigateDBTabAndVerifyFields(driver, extentTest, testDataIteration, testName);

                generic.Logout(driver, extentTest, testName, testDataIteration);
            }


            catch (Exception e)
            {


                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }

        public static IEnumerable<object[]> RTA_5634()
        {
            foreach (DataRow row in getTestCaseList("SalesEnterpriseAccountManager"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To verify whether the Sales Enterprise Account Manager is provided with Opportunity entity Read permission as "Org" and Write permission as "Org".-Funnel verification
        /// </summary>
        [Ignore]
        [TestCategory("smoke"), TestCategory("Ignore")]
        [TestProperty("TestcaseID", "RTA-5634")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5634), DynamicDataSourceType.Method)]
        public void RTA_5634_EnterpriseAM_Dash_MyOpportunitiesFunnel(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity3"].ToString());
                generic.Logout(driver, extentTest, testName, testDataIteration);
            }


            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }

        public static IEnumerable<object[]> RTA_5633()
        {
            foreach (DataRow row in getTestCaseList("SalesEnterpriseAccountManager"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To verify whether the Sales Enterprise Account Manager is provided with Opportunity entity Read permission as "Org" and Write permission as "Org".
        /// </summary>
        [TestCategory("RerunMay9"), TestCategory("Validation1"), TestCategory("Sprint32NC"), TestCategory("hash02")]
        [TestProperty("TestcaseID", "RTA-5633")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5633), DynamicDataSourceType.Method)]
        public void RTA_5633_EnterpriseAM_Dash_MyOpportunitiesFollowUp(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity3"].ToString());
                generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
                generic.VerifyOpportunityFollowUp(driver, extentTest, testName, testDataIteration, "Topic", "Account", "Est. Close Date", "Est. Revenue", "Contact", "Main Phone (Account)", "Owner", "Pipeline Phase", "Status");
                generic.LogoutET(driver, extentTest, testName, testDataIteration);
            }


            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }
        public static IEnumerable<object[]> RTA_5632()
        {
            foreach (DataRow row in getTestCaseList("SalesEnterpriseAccountManager"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To verify whether the Sales Enterprise Account Manager is provided with Opportunity entity Read permission as "Org" and Write permission as "Org".
        /// </summary>
        [TestCategory("hash02"), TestCategory("Validation1"), TestCategory("Sprint32NC")]
        [TestProperty("TestcaseID", "RTA-5632")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5632), DynamicDataSourceType.Method)]
        public void RTA_5632_EnterpriseAM_Dash_MyActivitiesForThisWeek(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity3"].ToString());
                generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
                generic.VerifyMyActivitiesForThisWeek(driver, extentTest, testName, testDataIteration, "Due Date", "Start Date", "Actual End", "Actual Start", "Subject", "Regarding", "Activity Type", "Activity Status", "Owner");
                generic.Logout(driver, extentTest, testName, testDataIteration);
            }


            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }

        public static IEnumerable<object[]> RTA_5631()
        {
            foreach (DataRow row in getTestCaseList("SalesEnterpriseAccountManager"))
            {
                yield return new object[] { row };
            }
        } /// <summary>
          /// To verify whether the Sales Enterprise Account Manager is provided with Opportunity entity Read permission as "Org" and Write permission as "Org".
          /// </summary>

        [TestCategory("RerunMay9"), TestCategory("Validation1"), TestCategory("hash02"), TestCategory("Sprint32NC")]
        [TestProperty("TestcaseID", "RTA-5631")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5631), DynamicDataSourceType.Method)]
        public void RTA_5631_EnterpriseAM_Dash_MyCustomersField(DataRow Ro)
        {
            //try
            //{
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity3"].ToString());
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
            generic.VerifyMyCustomersField(driver, extentTest, testName, testDataIteration, "Company Name", "Parent Account", "Primary Contact", "Email (Primary Contact)", "Main Phone", "Broker", "Customer", "Prospect", "Service provider");
            login.Logout(driver, extentTest, testName, testDataIteration);
            //}


            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}
        }


        public static IEnumerable<object[]> RTA_5630()
        {
            foreach (DataRow row in getTestCaseList("SalesEnterpriseAccountManager"))
            {
                yield return new object[] { row };
            }
        }/// <summary>
         /// To verify whether the Sales Enterprise Account Manager is provided with Opportunity entity Read permission as "Org" and Write permission as "Org".
         /// </summary>
        [TestCategory("RerunMay9"), TestCategory("Validation1"), TestCategory("Sprint32NC")]
        [TestProperty("TestcaseID", "RTA-5630")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5630), DynamicDataSourceType.Method)]
        public void RTA_5630_EnterpriseAM_Dash_RetentionDevelopmentKPI(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity3"].ToString());
                generic.VerifyRetentionDevelopmentKPI(driver, extentTest, testName, testDataIteration, "My Enterprise Customers", "My Activities for this week", "My Enterprise Opportunities to Follow Up", "My Enterprise Opportunities Funnel");
                generic.Logout(driver, extentTest, testName, testDataIteration);
            }


            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }
        public static IEnumerable<object[]> RTA_6124()
        {
            foreach (DataRow row in getTestCaseList("EnterpriseSalesManager"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To verify whether the Sales Enterprise Account Manager is provided with Opportunity entity Read permission as "Org" and Write permission as "Org".
        /// </summary>
        [TestCategory("smoke"), TestCategory("hash02"), TestCategory("Sprint32NC")]
        [TestProperty("TestcaseID", "RTA-6124")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_6124), DynamicDataSourceType.Method)]
        public void RTA_6124_EnterpriseSU_BrandNotSetToRegusByDefault(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                generic.ClickNewButton(driver, extentTest, testDataIteration, testName);
                generic.VerifyBrandField(driver, extentTest, testName, testDataIteration, "INPUT");
                generic.Logout(driver, extentTest, testName, testDataIteration);
                generic.DiscardChanges(driver, extentTest, testName, testDataIteration);
            }


            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }
        public static IEnumerable<object[]> RTA_6125()
        {
            foreach (DataRow row in getTestCaseList("ITSalesUser"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To verify whether the Sales Enterprise Account Manager is provided with Opportunity entity Read permission as "Org" and Write permission as "Org".
        /// </summary>
        [TestCategory("RerunMay9"), TestCategory("Validation1"), TestCategory("QARefactorfail"), TestCategory("hash02"), TestCategory("RF24-4-20"), TestCategory("Rerun-21062020_1"), TestCategory("Sprint32NC")]
        [TestProperty("TestcaseID", "RTA-6125")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_6125), DynamicDataSourceType.Method)]
        public void RTA_6125_ITSU_BrandNotSetToRegusByDefault(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                // string OppSearch1 = generic.CreateNewOpportunity(driver, extentTest, testDataIteration, testName, Ro["Contact"].ToString(), Ro["Contry"].ToString(), Ro["Currency"].ToString(), Ro["channel"].ToString(), Ro["MajorSource"].ToString(), Ro["MinorSource"].ToString());

                // generic.SelectValuesFromDashboardDropDown(driver, extentTest, testName, testDataIteration, Ro["Role"].ToString());
                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "IT Sales Manager Dashboard");
                generic.OpenRecordGlobalSearch(driver, extentTest, testDataIteration, testName, "");//OppSearch
                generic.VerifyBrandField(driver, extentTest, testName, testDataIteration, "Regus");
                login.Logout(driver, extentTest, testName, testDataIteration);
                generic.DiscardChanges(driver, extentTest, testName, testDataIteration);

            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }

        public static IEnumerable<object[]> RTA_6106()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesDirector"))
            {
                yield return new object[] { row };
            }
        }

        /// <summary>
        /// To verify whether the Sales Enterprise Account Manager is provided with Opportunity entity Read permission as "Org" and Write permission as "Org".
        /// </summary>

        [TestCategory("RerunMay9"), TestCategory("25Nov"), TestCategory("HF"), TestCategory("Sprint32NC")]
        [TestProperty("TestcaseID", "RTA-6106")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_6106), DynamicDataSourceType.Method)]
        public void RTA_6106_SU_BrandSetToRegusByDefault(DataRow Ro)
        {
            //try
            //{
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
            generic.ClickNewButton(driver, extentTest, testDataIteration, testName);
            string TimeInSec = generic.GetSystemTimeInSec(driver, extentTest, testName, testDataIteration);
            string LeadName = generic.CreateNewLeadWithOutBrand(driver, extentTest, testName, testDataIteration, Ro["LastName"].ToString(), Ro["Email"].ToString(), Ro["Source"].ToString(), Ro["SourceSite"].ToString(), Ro["MajorSource"].ToString(), Ro["MinorSource"].ToString(), TimeInSec);
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, "Refresh");
            generic.VerifyLeadAutoQualified(driver, extentTest, testDataIteration, testName);
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            // generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
            generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "All Opportunities");
            generic.SearchforRecord(driver, extentTest, testName, testDataIteration, LeadName);
            generic.SelectingActiveCell(driver, extentTest, testName, testDataIteration);
            generic.VerifyBrandAutoPopulatedAfterQualify(driver, extentTest, testDataIteration, testName);
            generic.Logout(driver, extentTest, testName, testDataIteration);
            //}


            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}
        }
        public static IEnumerable<object[]> RTA_4986()
        {
            foreach (DataRow row in getTestCaseList("AreaDirector"))
            {
                yield return new object[] { row };
            }
        }
        //Summary
        //[Ignore]
        [TestCategory("smoke"), TestCategory("2610"), TestCategory("BookaTour"), TestCategory("26AugFixed"), TestCategory("Rerun-25062020"), TestCategory("TestLock1"), TestCategory("SprintUN")]
        [TestProperty("TestcaseID", "RTA-4986")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_4986), DynamicDataSourceType.Method)]
        public void RTA_4986_SU_CanSeeAllBookedTour(DataRow Ro)
        {
            //try
            //{
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
            string parentWindowHandle = generic.SelectTourManager(driver, extentTest, testName, testDataIteration, "Tour Management", "Tour Booked");
            //generic.VerifyUserRoles(driver, extentTest, testName, testDataIteration,"2. Home Centre - Dana Pasutto", "4. ASM - Taryn Cayer", parentWindowHandle);
            generic.Logout(driver, extentTest, testName, testDataIteration);


            //}


            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}
        }
        public static IEnumerable<object[]> RTA4985()
        {
            foreach (DataRow row in getTestCaseList("AreaDirector"))
            {
                yield return new object[] { row };
            }
        }
        //Summary

        // [Ignore]
        [TestCategory("smoke"), TestCategory("2610"), TestCategory("TestLock1"), TestCategory("26AugFixed"), TestCategory("SprintUN")]
        [TestProperty("TestcaseID", "RTA-4985")]

        [DataTestMethod]
        [DynamicData(nameof(RTA4985), DynamicDataSourceType.Method)]
        public void RTA4985_AD_CanSeeAllBookedTour(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown1(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
                generic.SelectTourManager(driver, extentTest, testName, testDataIteration, "Tour Management", "Alberta, Calgary - Altius Centre");
                generic.Logout(driver, extentTest, testName, testDataIteration);


            }


            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }


        public static IEnumerable<object[]> RTA_4984AD()
        {
            foreach (DataRow row in getTestCaseList("AreaDirector"))
            {
                yield return new object[] { row };
            }
        }
        //Summary
        //[Ignore]
        [TestCategory("smoke"), TestCategory("Validation1"), TestCategory("RerunMay120"), TestCategory("26Aug"), TestCategory("TestLock1"), TestCategory("SprintUN")]
        [TestProperty("TestcaseID", "RTA-4984")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_4984AD), DynamicDataSourceType.Method)]
        public void RTA_4984AD_CanSeeAllBookedTourForSameCentre(DataRow Ro)
        {
            //try
            //{
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown1(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
            generic.SelectManager(driver, extentTest, testName, testDataIteration, "Tour Management");
            generic.Logout(driver, extentTest, testName, testDataIteration);


            //}
            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}
        }

        public static IEnumerable<object[]> RTA_4997_SA()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        //Summary
        //[Ignore]
        [TestCategory("0309"), TestCategory("Validation1"), TestCategory("BookaTour"), TestCategory("RerunMay9"), TestCategory("Rerun-21062020_1"), TestCategory("SprintUN")]
        [TestProperty("TestcaseID", "RTA-4997")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_4997_SA), DynamicDataSourceType.Method)]
        public void RTA_4997_SA_CalendarSlotsChangedWhenCentreChanged(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
                string contactname = generic.CreateNewOpportunityBookATour(driver, extentTest, testName, testDataIteration, Ro["Centre"].ToString());
                // generic.UpdateStartDate(driver, extentTest, testDataIteration, testName, Ro["SelectMonth"].ToString(), Ro["SelectDate"].ToString());
                generic.VerifyDifCentreView(driver, extentTest, testDataIteration, testName, "");
                login.Logout(driver, extentTest, testName, testDataIteration);


            }


            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }
        public static IEnumerable<object[]> RTA_5533()
        {
            foreach (DataRow row in getTestCaseList("ITSalesUser"))
            {
                yield return new object[] { row };
            }
        }

        //Summary
        [Ignore]
        [TestCategory("RerunMay9"), TestCategory("Validation1"), TestCategory("Rerun-06062020"), TestCategory("Rerun-23062020"), TestCategory("Sprint32NC"), TestCategory("Ignore")]
        [TestProperty("TestcaseID", "RTA-5533")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5533), DynamicDataSourceType.Method)]
        public void RTA_5533_ITSU_AppropriateColumnsAredisplayedInDashBoard(DataRow Ro)
        {

            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity0"].ToString());
                //  generic.SelectValuesFromDashboardDropDown(driver, extentTest, testName, testDataIteration, "IT Inside Sales User");
                generic.SelectValuesFromSalesOpportunity(driver, extentTest, testName, testDataIteration, "My Open IT Sales Opportunities");
                generic.VerifySalesOppFields(driver, extentTest, testName, testDataIteration, "Topic", "Potential Customer", "Contact", "Business Phone (Contact)", "Owner", "Status", "Created On");
                generic.Logout(driver, extentTest, testName, testDataIteration);


            }


            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }
        public static IEnumerable<object[]> RTA_5640()
        {
            foreach (DataRow row in getTestCaseList("EnterpriseSalesManager"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To verify whether the Sales Enterprise Account Manager is provided with Opportunity entity Read permission as "Org" and Write permission as "Org".
        /// </summary>
        [TestCategory("smoke"), TestCategory("Validation1"), TestCategory("Sprint32NC")]
        [TestProperty("TestcaseID", "RTA-5640")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5640), DynamicDataSourceType.Method)]
        public void RTA_5640_SalesEM_AccountReadWritepermission(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString());
                generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
                generic.CreateNewAccount(driver, extentTest, testDataIteration, testName, Ro["CompanyName1"].ToString());
                string Accouontname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString());

                generic.RecordGlobalSearchopportunity(driver, extentTest, testName, testDataIteration, Accouontname);
                generic.SelectingActiveCell(driver, extentTest, testName, testDataIteration);

                string time = System.DateTime.Now.ToString();
                generic.VerifyContactFirstNameEditable(driver, extentTest, testDataIteration, testName, Ro["AreaLabel2"].ToString(), Ro["WebsiteValue"].ToString(), time);
                generic.Logout(driver, extentTest, testName, testDataIteration);

            }


            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }

        public static IEnumerable<object[]> RTA_5790()
        {
            foreach (DataRow row in getTestCaseList("SalesEnterpriseDirector"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To verify whether the Sales Enterprise Manager is provided with Opportunity entity Read permission as "Org" and Write permission as "Org".
        /// </summary>
        [TestCategory("RerunMay9"), TestCategory("Validation1"), TestCategory("Sprint32NC")]
        [TestProperty("TestcaseID", "RTA-5790")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5790), DynamicDataSourceType.Method)]
        public void RTA_5790_SalesED_OpportunityReadWritePermission(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                //  generic.OpenRecordGlobalSearch(driver, extentTest, testName, testDataIteration, Ro["TestOpportunityReadEdit2"].ToString());
                string time = System.DateTime.Now.ToString();
                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "Open Enterprise Opportunities");
                generic.SelectingActiveCell(driver, extentTest, testName, testDataIteration);
                generic.VerifyOpportunityRecordEditable(driver, extentTest, testDataIteration, testName, time, "TestContact");



                generic.Logout(driver, extentTest, testName, testDataIteration);
            }


            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }


        public static IEnumerable<object[]> RTA_5789()
        {
            foreach (DataRow row in getTestCaseList("SalesEnterpriseAccountManager"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To verify whether the Sales Enterprise Account Manager is provided with Opportunity entity creation permission as "Org".
        /// </summary>
        [TestCategory("smoke"), TestCategory("Validation1"), TestCategory(""), TestCategory("PriorReg"), TestCategory("CreateOppEnt")]
        [TestProperty("TestcaseID", "RTA-5789")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5789), DynamicDataSourceType.Method)]
        public void RTA_5789_SalesEAM_OpportunityCreatePermission(DataRow Ro)
        {
            //try
            //{
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            string time = System.DateTime.Now.ToString();

            generic.CreateNewOpportunityEntetrprise(driver, extentTest, testDataIteration, testName, Ro["TestOpportunityAccountName"].ToString(), time, Ro["TestCountry"].ToString(), Ro["TestCurrency"].ToString(), Ro["TestChannel"].ToString(), Ro["TestMajorSource"].ToString(), Ro["TestMinorSource"].ToString(), Ro["TestNewContact"].ToString());
            generic.GlobalSearchAndVerifyRecord1(driver, extentTest, testDataIteration, testName, time, Ro["TestNewContact"].ToString(), Ro["SearchFilterOption1"].ToString(), Ro["TestdataFilter2"].ToString());
            generic.Logout(driver, extentTest, testName, testDataIteration);
            // }


            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}
        }

        public static IEnumerable<object[]> RTA_5788()
        {
            foreach (DataRow row in getTestCaseList("EnterpriseSalesManager"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To verify whether the Sales Enterprise Account Manager is provided with Opportunity entity creation permission as "Org".
        /// </summary>
        [TestCategory("smoke"), TestCategory("Validation1"), TestCategory("Sprint32NC"), TestCategory("CreateOppEnt")]
        [TestProperty("TestcaseID", "RTA-5788")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5788), DynamicDataSourceType.Method)]
        public void RTA_5788_SalesEM_OpportunityCreatePermission(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                string time = System.DateTime.Now.ToString();
                generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());

                generic.CreateNewOpportunityEntetrprise(driver, extentTest, testDataIteration, testName, Ro["TestOpportunityAccountName"].ToString(), time, Ro["TestCountry"].ToString(), Ro["TestCurrency"].ToString(), Ro["TestChannel"].ToString(), Ro["TestMajorSource"].ToString(), Ro["TestMinorSource"].ToString(), Ro["TestNewContact"].ToString());
                generic.GlobalSearchAndVerifyRecord1(driver, extentTest, testDataIteration, testName, time, Ro["TestNewContact"].ToString(), Ro["SearchFilterOption1"].ToString(), Ro["TestdataFilter2"].ToString());
                generic.Logout(driver, extentTest, testName, testDataIteration);
            }


            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }


        public static IEnumerable<object[]> RTA_5636()
        {
            foreach (DataRow row in getTestCaseList("EnterpriseSalesManager"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To verify whether the Sales Enterprise Account Manager is provided with Opportunity entity creation permission as "Org".
        /// </summary>
        [TestCategory("smoke"), TestCategory("Validation1"), TestCategory("Sprint32NC"), TestCategory("CreateOppEnt")]
        [TestProperty("TestcaseID", "RTA-5636")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5636), DynamicDataSourceType.Method)]
        public void RTA_5636_SalesEM_OpportunityBPFVerification(DataRow Ro)
        {
            //try
            //{
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            string time = System.DateTime.Now.ToString();
            generic.ClickNewButton(driver, extentTest, testDataIteration, testName);
            generic.VerifyBPFStageFieldSalesProcess(driver, extentTest, testDataIteration, testName);
            generic.CreateNewOpportunityEntetrprise(driver, extentTest, testDataIteration, testName, Ro["TestOpportunityAccountName"].ToString(), time, Ro["TestCountry"].ToString(), Ro["TestCurrency"].ToString(), Ro["TestChannel"].ToString(), Ro["TestMajorSource"].ToString(), Ro["TestMinorSource"].ToString(), Ro["TestNewContact"].ToString());
            string oppname = generic.GetOppID(driver, extentTest, testName, testDataIteration);
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "Open Enterprise Opportunities");
            generic.RecordGlobalSearch(driver, extentTest, testName, testDataIteration, oppname);
            generic.SelectingActiveCell(driver, extentTest, testName, testDataIteration);

            generic.VerifyBPFStageFlowSalesProcess(driver, extentTest, testDataIteration, testName);
            generic.Logout(driver, extentTest, testName, testDataIteration);

            //}


            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}
        }


        public static IEnumerable<object[]> RTA_5787()
        {
            foreach (DataRow row in getTestCaseList("SalesEnterpriseDirector"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To verify whether the Sales Enterprise Account Manager is provided with Opportunity entity creation permission as "Org".
        /// </summary>
        [TestCategory("RerunMay9"), TestCategory("Validation1"), TestCategory("Sprint32NC"), TestCategory("CreateOppEnt")]
        [TestProperty("TestcaseID", "RTA-5787")]
        [DataTestMethod]
        [DynamicData(nameof(RTA_5787), DynamicDataSourceType.Method)]
        public void RTA_5787_SalesED_OpportunityCreatePermission(DataRow Ro)
        {
            //try
            //{
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            string time = System.DateTime.Now.ToString();
            generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());

            generic.CreateNewOpportunityEntetrprise(driver, extentTest, testDataIteration, testName, Ro["TestOpportunityAccountName"].ToString(), time, Ro["TestCountry"].ToString(), Ro["TestCurrency"].ToString(), Ro["TestChannel"].ToString(), Ro["TestMajorSource"].ToString(), Ro["TestMinorSource"].ToString(), Ro["TestNewContact"].ToString());
            generic.GlobalSearchAndVerifyRecord1(driver, extentTest, testDataIteration, testName, time, Ro["TestNewContact"].ToString(), Ro["SearchFilterOption1"].ToString(), Ro["TestdataFilter2"].ToString());
            generic.Logout(driver, extentTest, testName, testDataIteration);
            //}


            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}
        }



        public static IEnumerable<object[]> RTA_6062()
        {
            foreach (DataRow row in getTestCaseList("EnterpriseSalesManager"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To verify whether the Sales Enterprise Manager is provided with Activity entity Read and Write permission as "Org"
        /// </summary>
        [TestCategory("smoke"), TestCategory("Validation1"), TestCategory("Sprint32NC"), TestCategory("07Sep")]
        [TestProperty("TestcaseID", "RTA-6062")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_6062), DynamicDataSourceType.Method)]
        public void RTA_6062_SalesEM_ActivityReadWritePermission(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
                // generic.FilterOwnerEnterpriseSales(driver, extentTest, testName, testDataIteration, Ro["FilterCondition"].ToString(), Ro["Owner"].ToString());
                string Time = System.DateTime.Now.ToString();
                generic.NavigateToRibbonButtonActivities(driver, extentTest, testName, testDataIteration, Ro["RibbonActivityPhoneCall"].ToString());
                generic.CreateNewPhoneCallActivityEnterpriseSales(driver, extentTest, testName, testDataIteration, Time, Ro["PhoneCallSubject"].ToString(), Ro["TestAccount"].ToString());


                //generic.FilterActivityTypeEnterpriseSales(driver, extentTest, testName, testDataIteration, Ro["ActivityType"].ToString());
                //generic.SelectingActiveCellEnterpriseSales(driver, extentTest, testName, testDataIteration);
                generic.VerifyActivityEditableEnterpriseSales(driver, extentTest, testName, testDataIteration, Ro["Subject"].ToString());
                generic.Logout(driver, extentTest, testName, testDataIteration);
            }
            catch (Exception e)
            {


                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }
        public static IEnumerable<object[]> RTA_6057()
        {
            foreach (DataRow row in getTestCaseList("SalesEnterpriseDirector"))
            {
                yield return new object[] { row };
            }
        }

        /// <summary>
        /// To verify whether the Sales Enterprise Director is provided with Activity entity Read and Write permission as "Org"
        /// </summary>
        [TestCategory("07Sep"), TestCategory("RerunMay9"), TestCategory("Validation1"), TestCategory("Sprint32NC")]
        [TestProperty("TestcaseID", "RTA-6057")]
        [DataTestMethod]
        [DynamicData(nameof(RTA_6057), DynamicDataSourceType.Method)]
        public void RTA_6057_SalesED_ActivityReadWritePermission(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
                // generic.FilterOwnerEnterpriseSales(driver, extentTest, testName, testDataIteration, Ro["FilterCondition"].ToString(), Ro["Owner"].ToString());
                // generic.FilterActivityTypeEnterpriseSales(driver, extentTest, testName, testDataIteration, Ro["ActivityType"].ToString());
                //generic.SelectingActiveCellEnterpriseSales(driver, extentTest, testName, testDataIteration);
                generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
                string Time = System.DateTime.Now.ToString();
                generic.NavigateToRibbonButtonActivities(driver, extentTest, testName, testDataIteration, Ro["RibbonActivityPhoneCall"].ToString());
                // generic.CreateNewPhoneCallActivity(driver, extentTest, testName, testDataIteration, Time, Ro["PhoneCallSubject"].ToString(), Ro["TestAccount"].ToString());
                // generic.CreateNewPhoneCallActivityEnterpriseSales(driver, extentTest, testName, testDataIteration, Time, Ro["PhoneCallSubject"].ToString(), Ro["TestAccount"].ToString());
                string Activityname = generic.CreateNewPhoneCallActivityEnterpriseSales(driver, extentTest, testName, testDataIteration, Time, Ro["PhoneCallSubject"].ToString(), Ro["TestAccount"].ToString());
                generic.VerifyActivityEditableEnterpriseSales(driver, extentTest, testName, testDataIteration, Ro["Subject"].ToString());
                generic.Logout(driver, extentTest, testName, testDataIteration);
            }
            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }
        public static IEnumerable<object[]> RTA_6060()
        {
            foreach (DataRow row in getTestCaseList("SalesEnterpriseAccountManager"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To verify whether the Sales Enterprise Account Manager is provided with Communication Profile entity delete permission as "None".
        /// </summary>
        [TestCategory("smoke"), TestCategory("Validation1"), TestCategory("SprintUN")]
        [TestProperty("TestcaseID", "RTA-6060")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_6060), DynamicDataSourceType.Method)]
        public void RTA_6060_SalesEAM_CommunicationProfileDeleteButton(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString());
                //generic.OpenRecordGlobalSearch(driver, extentTest, testName, testDataIteration, Ro["Account"].ToString());
                generic.SelectingActiveCell(driver, extentTest, testName, testDataIteration);

                generic.NavigateToRelatedTabEntities(driver, extentTest, testName, testDataIteration, Ro["RelatedTabEntity"].ToString());
                string Time = generic.GetSystemTimeInSec(driver, extentTest, testName, testDataIteration);
                try
                {
                    generic.CreateNewCommunicationPrifile(driver, extentTest, testName, testDataIteration, Ro["CommunicationType"].ToString(), Time, Ro["CommunicatonEmail"].ToString());

                    //generic.SelectingActiveAccountEnterpriseSales(driver, extentTest, testName, testDataIteration);
                    generic.VerifyDeleteButtonCommunicationProfile(driver, extentTest, testName, testDataIteration);
                }
                catch (Exception e) { }
                generic.Logout(driver, extentTest, testName, testDataIteration);


            }

            catch (Exception e)
            {


                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }

        public static IEnumerable<object[]> RTA_6048()
        {
            foreach (DataRow row in getTestCaseList("SalesEnterpriseAccountManager"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To verify whether the Sales Enterprise Account Manager is provided with Communication Profile entity read permission as "Org" & edit permission as "None".
        /// </summary>
        [TestCategory("smoke"), TestCategory("25Nov1"), TestCategory("Sprint32NC")]
        [TestProperty("TestcaseID", "RTA-6048")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_6048), DynamicDataSourceType.Method)]
        public void RTA_6048_SEAM_CommProfileReadEditPermission(DataRow Ro)
        {
            //try
            //{
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString());
            // generic.OpenRecordGlobalSearch(driver, extentTest, testName, testDataIteration, Ro["Account1"].ToString());
            generic.SelectingActiveCell(driver, extentTest, testName, testDataIteration);

            generic.NavigateToRelatedTabEntities(driver, extentTest, testName, testDataIteration, Ro["RelatedTabEntity"].ToString());
            string Time = generic.GetSystemTimeInSec(driver, extentTest, testName, testDataIteration);
            generic.CreateNewCommunicationPrifile(driver, extentTest, testName, testDataIteration, Ro["CommunicationType"].ToString(), Time, Ro["CommunicatonEmail"].ToString());
            generic.VerifyCommunicationProfileReadWritePermission(driver, extentTest, testName, testDataIteration);
            generic.Logout(driver, extentTest, testName, testDataIteration);

            //}
            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}
        }


        public static IEnumerable<object[]> RTA_6047()
        {
            foreach (DataRow row in getTestCaseList("SalesEnterpriseAccountManager"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To verify whether the Sales Enterprise Manager is provided with Communication Profile entity read permission as "Org" &Edit permission as "None".
        /// </summary>
        [TestCategory("smoke"), TestCategory("25Nov1"), TestCategory("Sprint32NC")]
        [TestProperty("TestcaseID", "RTA-6047")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_6047), DynamicDataSourceType.Method)]
        public void RTA_6047_SalesEM_CommunicationProfileReadEditPermission(DataRow Ro)
        {

            //try
            //{
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString());
            //generic.OpenRecordGlobalSearch(driver, extentTest, testName, testDataIteration, Ro["Account1"].ToString());
            generic.SelectingActiveCell(driver, extentTest, testName, testDataIteration);

            generic.NavigateToRelatedTabEntities(driver, extentTest, testName, testDataIteration, Ro["RelatedTabEntity"].ToString());
            string Time = generic.GetSystemTimeInSec(driver, extentTest, testName, testDataIteration);
            generic.CreateNewCommunicationPrifile(driver, extentTest, testName, testDataIteration, Ro["CommunicationType"].ToString(), Time, Ro["CommunicatonEmail"].ToString());
            generic.VerifyCommunicationProfileReadWritePermission(driver, extentTest, testName, testDataIteration);
            generic.Logout(driver, extentTest, testName, testDataIteration);

            //}
            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}
        }

        public static IEnumerable<object[]> RTA_6046()
        {
            foreach (DataRow row in getTestCaseList("SalesEnterpriseDirector"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To verify whether the Sales Enterprise Director is provided with Communication Profile entity read permission as "Org" & edit permission as"None".
        /// </summary>
        [TestCategory("RerunMay9"), TestCategory("25Nov1"), TestCategory("SprintUN")]
        [TestProperty("TestcaseID", "RTA-6046")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_6046), DynamicDataSourceType.Method)]
        public void RTA_6046_SalesED_ProfileReadEditPermission(DataRow Ro)
        {
            //try
            //{
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString());
            // generic.OpenRecordGlobalSearch(driver, extentTest, testName, testDataIteration, Ro["Account1"].ToString());
            generic.SelectingActiveCell(driver, extentTest, testName, testDataIteration);

            generic.NavigateToRelatedTabEntities(driver, extentTest, testName, testDataIteration, Ro["RelatedTabEntity"].ToString());
            string Time = generic.GetSystemTimeInSec(driver, extentTest, testName, testDataIteration);
            generic.CreateNewCommunicationPrifile(driver, extentTest, testName, testDataIteration, Ro["CommunicationType"].ToString(), Time, Ro["CommunicatonEmail"].ToString());
            generic.VerifyCommunicationProfileReadWritePermission(driver, extentTest, testName, testDataIteration);
            generic.Logout(driver, extentTest, testName, testDataIteration);

            //}
            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}
        }

        public static IEnumerable<object[]> RTA_6039()
        {
            foreach (DataRow row in getTestCaseList("SalesEnterpriseAccountManager"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To verify whether the Sales Enterprise Director is provided with Communication Profile entity read permission as "Org" & edit permission as"None".
        /// </summary>
        [TestCategory("smoke"), TestCategory("Validation1"), TestCategory("Sprint32NC"), TestCategory("0309")]
        [TestProperty("TestcaseID", "RTA-6039")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_6039), DynamicDataSourceType.Method)]
        public void RTA_6039_SalesEAM_CommunicationProfileCreatePermission(DataRow Ro)
        {
            //try
            //{
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString());
            //generic.OpenRecordGlobalSearch(driver, extentTest, testName, testDataIteration, Ro["AccountTestCommunication"].ToString());
            generic.SelectingActiveCell(driver, extentTest, testName, testDataIteration);

            generic.NavigateToRelatedTabEntities(driver, extentTest, testName, testDataIteration, Ro["RelatedTabEntity"].ToString());
            string Time = generic.GetSystemTimeInSec(driver, extentTest, testName, testDataIteration);
            generic.CreateNewCommunicationPrifile(driver, extentTest, testName, testDataIteration, Ro["CommunicationType"].ToString(), Time, Ro["CommunicatonEmail"].ToString());
            generic.Logout(driver, extentTest, testName, testDataIteration);

            //}
            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}
        }

        public static IEnumerable<object[]> RTA_6038()
        {
            foreach (DataRow row in getTestCaseList("EnterpriseSalesManager"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To verify whether the Sales Enterprise Manager is provided with Communication Profile entity creation permission as "Org".
        /// </summary>
        [TestCategory("RerunMay9"), TestCategory("Validation1"), TestCategory("Sprint32NC"), TestCategory("0309")]
        [TestProperty("TestcaseID", "RTA-6038")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_6038), DynamicDataSourceType.Method)]
        public void RTA_6038_SalesEM_CommunicationProfileCreatePermission(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString());
                // generic.OpenRecordGlobalSearch(driver, extentTest, testName, testDataIteration, Ro["AccountTestCommunication"].ToString());

                generic.SelectingActiveCell(driver, extentTest, testName, testDataIteration);

                generic.NavigateToRelatedTabEntities(driver, extentTest, testName, testDataIteration, Ro["RelatedTabEntity"].ToString());
                string Time = generic.GetSystemTimeInSec(driver, extentTest, testName, testDataIteration);
                generic.CreateNewCommunicationPrifile(driver, extentTest, testName, testDataIteration, Ro["CommunicationType"].ToString(), Time, Ro["CommunicatonEmail"].ToString());
                generic.Logout(driver, extentTest, testName, testDataIteration);

            }
            catch (Exception e)
            {


                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }


        public static IEnumerable<object[]> RTA_6035()
        {
            foreach (DataRow row in getTestCaseList("SalesEnterpriseDirector"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To verify whether the Sales Enterprise Manager is provided with Communication Profile entity creation permission as "Org".
        /// </summary>
        [TestCategory("RerunMay9"), TestCategory("Validation1"), TestCategory("SprintUN")]
        [TestProperty("TestcaseID", "RTA-6035")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_6035), DynamicDataSourceType.Method)]
        public void RTA_6035_SalesED_CommunicationProfileCreatePermission(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString());
                //generic.OpenRecordGlobalSearch(driver, extentTest, testName, testDataIteration, Ro["AccountTestCommunication"].ToString());
                generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
                generic.CreateNewAccount(driver, extentTest, testDataIteration, testName, Ro["CompanyName1"].ToString());

                generic.NavigateToRelatedTabEntities(driver, extentTest, testName, testDataIteration, Ro["RelatedTabEntity"].ToString());
                string Time = generic.GetSystemTimeInSec(driver, extentTest, testName, testDataIteration);
                generic.CreateNewCommunicationPrifile(driver, extentTest, testName, testDataIteration, Ro["CommunicationType"].ToString(), Time, Ro["CommunicatonEmail"].ToString());
                generic.Logout(driver, extentTest, testName, testDataIteration);


            }
            catch (Exception e)
            {


                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }


        public static IEnumerable<object[]> RTA_6044()
        {
            foreach (DataRow row in getTestCaseList("SalesEnterpriseAccountManager"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To verify whether the Sales Enterprise Account Manager is provided with Activity entity creation permission as "BU".
        /// </summary>
        [TestCategory("smoke"), TestCategory("Validation1"), TestCategory("hash02"), TestCategory(""), TestCategory("PriorReg")]
        [TestProperty("TestcaseID", "RTA-6044")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_6044), DynamicDataSourceType.Method)]
        public void RTA_6044_SalesEAM_ActivityCreatePermission(DataRow Ro)
        {
            //try
            //{

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
            // generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
            string Time = System.DateTime.Now.ToString();
            generic.NavigateToRibbonButtonActivities(driver, extentTest, testName, testDataIteration, Ro["RibbonActivityPhoneCall"].ToString());
            generic.CreateNewPhoneCallActivityETteam(driver, extentTest, testName, testDataIteration, Time, Ro["PhoneCallSubject"].ToString(), Ro["TestAccount"].ToString());
            generic.Logout(driver, extentTest, testName, testDataIteration);
            //}
            //catch (Exception e)
            //{


            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;

            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");


            //}
        }

        public static IEnumerable<object[]> RTA_6043()
        {
            foreach (DataRow row in getTestCaseList("EnterpriseSalesManager"))
            {
                yield return new object[] { row };
            }
        }

        /// <summary>
        /// To verify whether the Sales Enterprise Manager is provided with Activity entity creation permission as "BU".
        /// </summary>
        [TestCategory("0309"), TestCategory("Validation1"), TestCategory("Sprint32NC")]
        [TestProperty("TestcaseID", "RTA-6043")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_6043), DynamicDataSourceType.Method)]
        public void RTA_6043_SalesEM_ActivityCreatePermission(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
                string Time = System.DateTime.Now.ToString();

                generic.NavigateToRibbonButtonActivities(driver, extentTest, testName, testDataIteration, "Appointment");
                generic.CreateNewAppointment(driver, extentTest, testName, testDataIteration, Time, Ro["AppointmentSubject"].ToString(), "Alberta");
                generic.VerifyOpportunitystatus(driver, extentTest, testDataIteration, testName, "Scheduled");

                generic.Logout(driver, extentTest, testName, testDataIteration);

            }
            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }

        }
        public static IEnumerable<object[]> RTA_6037()
        {
            foreach (DataRow row in getTestCaseList("SalesEnterpriseDirector"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To verify whether the Sales Enterprise Director is provided with Activity entity creation permission as "BU".
        /// </summary>
        [TestCategory("smoke"), TestCategory("Validation1"), TestCategory("RerunMay9"), TestCategory("Sprint32NC"), TestCategory("26Aug")]
        [TestProperty("TestcaseID", "RTA-6037")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_6037), DynamicDataSourceType.Method)]
        public void RTA_6037_SalesED_ActivityCreatePermission(DataRow Ro)
        {
            try
            {

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
                string Time = System.DateTime.Now.ToString();
                generic.NavigateToRibbonButtonActivities(driver, extentTest, testName, testDataIteration, Ro["RibbonActivityPhoneCall"].ToString());
                generic.CreateNewPhoneCallActivityETteam(driver, extentTest, testName, testDataIteration, Time, Ro["PhoneCallSubject"].ToString(), Ro["TestAccount"].ToString());
                //generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
                //generic.SearchAndVerifyRecord(driver, extentTest, testName, testDataIteration, Ro["PhoneCallSubject"].ToString(), Time);
                generic.Logout(driver, extentTest, testName, testDataIteration);

            }
            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }


        public static IEnumerable<object[]> RTA_6042()
        {
            foreach (DataRow row in getTestCaseList("SalesEnterpriseAccountManager"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To verify whether the Sales Enterprise Account Manager is provided with Activity entity delete permission as "None".
        /// </summary>
        [TestCategory("RerunMay9"), TestCategory("Validation1"), TestCategory("Sprint32NC"), TestCategory("26Aug")]
        [TestProperty("TestcaseID", "RTA-6042")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_6042), DynamicDataSourceType.Method)]
        public void RTA_6042_SalesEAM_ActivityDeletePermission(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
                string now = System.DateTime.Now.ToString();
                generic.NavigateToRibbonButtonActivities(driver, extentTest, testName, testDataIteration, Ro["RibbonActivityPhoneCall"].ToString());

                string Activityname = generic.CreateNewPhoneCallActivityETteam(driver, extentTest, testName, testDataIteration, now, Ro["PhoneCallSubject"].ToString(), Ro["TestAccount"].ToString());
                generic.VerifyDeleteButton(driver, extentTest, testName, testDataIteration);
                generic.Logout(driver, extentTest, testName, testDataIteration);

            }
            catch (Exception e)
            {


                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }

        public static IEnumerable<object[]> RTA_6041()
        {
            foreach (DataRow row in getTestCaseList("EnterpriseSalesManager"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To verify whether the Sales Enterprise Manager is provided with account entity delete permission as "None".
        /// </summary>
        [TestCategory("RerunMay9"), TestCategory("Validation1"), TestCategory("Sprint32NC")]
        [TestProperty("TestcaseID", "RTA-6041")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_6041), DynamicDataSourceType.Method)]
        public void RTA_6041_SalesEM_ActivityDeletePermission(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
                string now = System.DateTime.Now.ToString();
                generic.NavigateToRibbonButtonActivities(driver, extentTest, testName, testDataIteration, Ro["RibbonActivityPhoneCall"].ToString());

                string Activityname = generic.CreateNewPhoneCallActivityEnterpriseSales(driver, extentTest, testName, testDataIteration, now, Ro["PhoneCallSubject"].ToString(), Ro["TestAccount"].ToString());

                //generic.OpenRecordGlobalSearch(driver, extentTest, testName, testDataIteration, Ro["DeleteButtonVerification"].ToString());
                generic.VerifyDeleteButton(driver, extentTest, testName, testDataIteration);
                generic.Logout(driver, extentTest, testName, testDataIteration);

            }
            catch (Exception e)
            {


                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }

        public static IEnumerable<object[]> RTA_6040()
        {
            foreach (DataRow row in getTestCaseList("SalesEnterpriseDirector"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To verify whether the Sales Enterprise Director is provided with Activity entity delete permission as "None".
        /// </summary>
        [TestCategory("RerunMay9"), TestCategory("Validation1"), TestCategory("Sprint32NC"), TestCategory("26Aug")]
        [TestProperty("TestcaseID", "RTA-6040")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_6040), DynamicDataSourceType.Method)]
        public void RTA_6040_SalesED_ActivityDeletePermission(DataRow Ro)
        {

            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
                //generic.OpenRecordGlobalSearch(driver, extentTest, testName, testDataIteration, Ro["DeleteButtonVerification"].ToString());
                generic.NavigateToRibbonButtonActivities(driver, extentTest, testName, testDataIteration, Ro["RibbonActivityPhoneCall"].ToString());
                string now = System.DateTime.Now.ToString();
                string Activityname = generic.CreateNewPhoneCallActivityETteam(driver, extentTest, testName, testDataIteration, now, Ro["PhoneCallSubject"].ToString(), Ro["TestAccount"].ToString());

                generic.VerifyDeleteButton(driver, extentTest, testName, testDataIteration);
                generic.Logout(driver, extentTest, testName, testDataIteration);

            }
            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }


        public static IEnumerable<object[]> RTA_6059()
        {
            foreach (DataRow row in getTestCaseList("EnterpriseSalesManager"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To verify whether the Sales Enterprise Manager is provided with Communication Profile entity delete permission as "None".
        /// </summary>
        [TestCategory("RerunMay9"), TestCategory("Validation1"), TestCategory("Sprint32NC")]
        [TestProperty("TestcaseID", "RTA-6059")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_6059), DynamicDataSourceType.Method)]
        public void RTA_6059_SalesEM_CommunicationProfileDeleteButton(DataRow Ro)
        {
            try
            {

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString());
                //generic.OpenRecordGlobalSearch(driver, extentTest, testName, testDataIteration, Ro["Account"].ToString());
                generic.SelectingActiveCell(driver, extentTest, testName, testDataIteration);

                generic.NavigateToRelatedTabEntities(driver, extentTest, testName, testDataIteration, Ro["RelatedTabEntity"].ToString());
                string Time = generic.GetSystemTimeInSec(driver, extentTest, testName, testDataIteration);
                generic.CreateNewCommunicationPrifile(driver, extentTest, testName, testDataIteration, Ro["CommunicationType"].ToString(), Time, Ro["CommunicatonEmail"].ToString());


                //generic.SelectingActiveAccountEnterpriseSales(driver, extentTest, testName, testDataIteration);
                generic.VerifyDeleteButtonCommunicationProfile(driver, extentTest, testName, testDataIteration);
                generic.Logout(driver, extentTest, testName, testDataIteration);

            }
            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }

        public static IEnumerable<object[]> RTA_6058()
        {
            foreach (DataRow row in getTestCaseList("SalesEnterpriseDirector"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To verify whether the Sales Enterprise Director is provided with Communication Profile entity delete permission as "None".
        /// </summary>
        [TestCategory("RerunMay9"), TestCategory("Validation1"), TestCategory("Sprint32NC"), TestCategory("0309")]
        [TestProperty("TestcaseID", "RTA-6058")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_6058), DynamicDataSourceType.Method)]
        public void RTA_6058_SalesED_CommunicationProfileDeleteButton(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString());
                // generic.OpenRecordGlobalSearch(driver, extentTest, testName, testDataIteration, Ro["Accname"].ToString());
                generic.SelectingActiveCell(driver, extentTest, testName, testDataIteration);

                generic.NavigateToRelatedTabEntities(driver, extentTest, testName, testDataIteration, Ro["RelatedTabEntity"].ToString());
                string Time = generic.GetSystemTimeInSec(driver, extentTest, testName, testDataIteration);
                generic.CreateNewCommunicationPrifile(driver, extentTest, testName, testDataIteration, Ro["CommunicationType"].ToString(), Time, Ro["CommunicatonEmail"].ToString());


                generic.VerifyDeleteButtonCommunicationProfile(driver, extentTest, testName, testDataIteration);
                generic.Logout(driver, extentTest, testName, testDataIteration);

            }
            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }

        public static IEnumerable<object[]> RTA_6010()
        {
            foreach (DataRow row in getTestCaseList("SalesEnterpriseDirector"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To verify whether the Sales Enterprise  Director is provided with Opportunity entity share permission as "Org".
        /// </summary>
        [Ignore]
        [TestCategory("RerunMay9"), TestCategory("Validation1"), TestCategory("Rerun-15062020"), TestCategory("Rerun-06062020"), TestCategory("CreateOppEnt"), TestCategory("Sprint32NC"), TestCategory("Ignore")]
        [TestProperty("TestcaseID", "RTA-6010")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_6010), DynamicDataSourceType.Method)]
        public void RTA_6010_SalesED_OpportunitySharePermission(DataRow Ro)
        {

            //try
            //{
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
            string now = System.DateTime.Now.ToString();
            generic.CreateNewOpportunityEntetrprise(driver, extentTest, testDataIteration, testName, Ro["TestOpportunityAccountName"].ToString(), now, Ro["TestCountry"].ToString(), Ro["TestCurrency"].ToString(), Ro["TestChannel"].ToString(), Ro["TestMajorSource"].ToString(), Ro["TestMinorSource"].ToString(), Ro["TestNewContact"].ToString());

            generic.ShareOpportunityRecord(driver, extentTest, testName, testDataIteration, Ro["User1"].ToString());
            generic.Logout(driver, extentTest, testName, testDataIteration);

            generic.Loginafterlogout(driver, extentTest, testName, testDataIteration, Ro["UserName1"].ToString(), Ro["Password1"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "My Enterprise Opportunities");

            generic.OpenRecordGlobalSearch(driver, extentTest, testName, testDataIteration, Ro["Share"].ToString());
            string time1 = System.DateTime.Now.ToString();
            generic.VerifyOpportunityRecordEditable(driver, extentTest, testName, testDataIteration, time1, Ro["Share"].ToString());
            generic.Logout(driver, extentTest, testName, testDataIteration);
            //}
            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}
        }
        public static IEnumerable<object[]> RTA_6011()
        {
            foreach (DataRow row in getTestCaseList("EnterpriseSalesManager"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To verify whether the Sales Enterprise  Manager is provided with Opportunity entity share permission as "Org".
        /// </summary>
        [TestCategory("RerunMay9"), TestCategory("25Nov"), TestCategory("Sprint32NC"), TestCategory("CreateOppEnt")]
        [TestProperty("TestcaseID", "RTA-6011")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_6011), DynamicDataSourceType.Method)]
        public void RTA_6011_SalesEM_OpportunitySharePermission(DataRow Ro)
        {
            //try
            //{

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());

            string time = System.DateTime.Now.ToString();
            generic.CreateNewOpportunityEntetrprise(driver, extentTest, testDataIteration, testName, Ro["TestOpportunityAccountName"].ToString(), time, Ro["TestCountry"].ToString(), Ro["TestCurrency"].ToString(), Ro["TestChannel"].ToString(), Ro["TestMajorSource"].ToString(), Ro["TestMinorSource"].ToString(), Ro["TestNewContact"].ToString());
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, "Refresh");
            string oppname1 = generic.GetReferenceIDOpportunity(driver, extentTest, testName, testDataIteration);
            //generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());

            //generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "Open Enterprise Opportunities");
            //generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, "Refresh");
            //string oppname1 = generic.selectmargin(driver, extentTest, testName, testDataIteration);

            generic.ShareOpportunityRecord(driver, extentTest, testName, testDataIteration, Ro["User1"].ToString());
            generic.Logout(driver, extentTest, testName, testDataIteration);

            generic.Loginafterlogout2(driver, extentTest, testName, testDataIteration, Ro["UserName1"].ToString(), Ro["Password1"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());

            generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "Open Enterprise Opportunities");
            generic.OpenRecordGlobalSearch(driver, extentTest, testName, testDataIteration, oppname1);
            //  generic.SelectActiveCellContacts(driver, extentTest, testName, testDataIteration);

            string time1 = System.DateTime.Now.ToString();
            generic.VerifyOpportunityRecordEditable(driver, extentTest, testName, testDataIteration, time1, oppname1);
            generic.Logout(driver, extentTest, testName, testDataIteration);
            generic.DiscardChanges(driver, extentTest, testName, testDataIteration);
            //}
            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}
        }


        public static IEnumerable<object[]> RTA_6012()
        {
            foreach (DataRow row in getTestCaseList("SalesEnterpriseAccountManager"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To verify whether the Sales Enterprise Account Manager is provided with Opportunity entity share permission as "Org".
        /// </summary>
        [TestCategory("smoke"), TestCategory("Validation1"), TestCategory("RerunMay9"), TestCategory("RerunMay120"), TestCategory("Sprint32NC")]
        [TestProperty("TestcaseID", "RTA-6012")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_6012), DynamicDataSourceType.Method)]
        public void RTA_6012_SalesEAM_OpportunitySharePermission(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "Open Enterprise Opportunities");
                generic.RecordGlobalSearchopportunity(driver, extentTest, testName, testDataIteration, Ro["Share"].ToString());

                generic.ShareOpportunityRecord(driver, extentTest, testName, testDataIteration, Ro["User1"].ToString());
                generic.Logout(driver, extentTest, testName, testDataIteration);

                generic.Loginafterlogout2(driver, extentTest, testName, testDataIteration, Ro["UserName1"].ToString(), Ro["Password1"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "Open Enterprise Opportunities");
                generic.OpenRecordGlobalSearch(driver, extentTest, testName, testDataIteration, Ro["Share"].ToString());
                string time = System.DateTime.Now.ToString();
                generic.VerifyOpportunityRecordEditable(driver, extentTest, testName, testDataIteration, time, Ro["Share"].ToString());
                generic.Logout(driver, extentTest, testName, testDataIteration);
            }
            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }

        public static IEnumerable<object[]> RTA_6056()
        {
            foreach (DataRow row in getTestCaseList("SalesEnterpriseAccountManager"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To verify whether the Sales Enterprise Account Manager is provided with Activities entity share permission as "Org".
        /// </summary>
        [TestCategory("smoke"), TestCategory("Validation1"), TestCategory("0309"), TestCategory("RerunMay120"), TestCategory("Rerun-21062020_1"), TestCategory("Sprint32NC"), TestCategory("BUG")]
        [TestProperty("TestcaseID", "RTA-6056")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_6056), DynamicDataSourceType.Method)]
        public void RTA_6056_SalesEAM_ActivitySharePermission(DataRow Ro)
        {
            //try
            //{
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
            string Time = generic.GetSystemTimeInSec(driver, extentTest, testDataIteration, testName);
            generic.NavigateToRibbonButtonActivities(driver, extentTest, testName, testDataIteration, Ro["RibbonActivityPhoneCall"].ToString());
            string now = System.DateTime.Now.ToString();
            string Activityname = generic.CreateNewPhoneCallActivityETteam(driver, extentTest, testName, testDataIteration, now, Ro["PhoneCallSubject"].ToString(), Ro["Account"].ToString());

            //generic.SelectingActiveCell(driver, extentTest, testName, testDataIteration);
            //string name = generic.Openedrecordheadertitle(driver, extentTest, testName, testDataIteration);

            generic.ShareRecord3Dots(driver, extentTest, testName, testDataIteration, Ro["User"].ToString());
            login.Logout(driver, extentTest, testName, testDataIteration);
            /*
                        generic.Loginafterlogout(driver, extentTest, testName, testDataIteration, Ro["UserName1"].ToString(), Ro["Password1"].ToString());
                        generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                        generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
                       // generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "My Activities for this week");

                        generic.OpenRecordGlobalSearch(driver, extentTest, testName, testDataIteration, Activityname);
                        //generic.VerifySharedActivityEditableEnterpriseSales(driver, extentTest, testName, testDataIteration, Ro["UpdatePhoneNumber"].ToString());

                        generic.VerifySharedActivityEditable(driver, extentTest, testName, testDataIteration, Ro["TestContactLname"].ToString(), Ro["TestContactLanguage"].ToString());
                        generic.Logout(driver, extentTest, testName, testDataIteration);
                        // generic.DiscardChanges(driver, extentTest, testName, testDataIteration);
                        */
            //}
            //    catch (Exception e)
            //    {

            //            AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}
        }


        public static IEnumerable<object[]> RTA_5677()
        {
            foreach (DataRow row in getTestCaseList("SalesEnterpriseAccountManager"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To verify whether the Sales Enterprise Account Manager is provided with Account entity share permission as "Org".
        /// </summary>
        [TestCategory("RerunMay9"), TestCategory("Validation1"), TestCategory("Rerun-21062020_1"), TestCategory("Rerun-24062020"), TestCategory("SprintUN")]
        [TestProperty("TestcaseID", "RTA-5677")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5677), DynamicDataSourceType.Method)]
        public void RTA_5677_SalesEAM_AccountSharePermission(DataRow Ro)
        {
            //try
            //{

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString());
            string now = System.DateTime.Now.ToString();
            string Accountname = generic.CreateNewAccount(driver, extentTest, testDataIteration, testName, Ro["CompanyName1"].ToString(), now);
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString());
            generic.OpenRecordGlobalSearch(driver, extentTest, testName, testDataIteration, Accountname);
            generic.ShareRecord3Dots(driver, extentTest, testName, testDataIteration, Ro["User"].ToString());
            // generic.Logout(driver, extentTest, testName, testDataIteration);
            generic.Loginafterlogout(driver, extentTest, testName, testDataIteration, Ro["UserName1"].ToString(), Ro["Password1"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString());
            generic.OpenRecordGlobalSearch(driver, extentTest, testName, testDataIteration, Accountname);
            generic.VerifyAccountEditable(driver, extentTest, testDataIteration, testName, Ro["ParentAccountName"].ToString());
            login.Logout(driver, extentTest, testName, testDataIteration);
            //}
            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}
        }

        public static IEnumerable<object[]> RTA_5676()
        {
            foreach (DataRow row in getTestCaseList("EnterpriseSalesManager"))
            {
                yield return new object[] { row };
            }
        } /// <summary>
          /// To verify whether the Sales Enterprise Account Manager is provided with Account entity share permission as "Org".
          /// </summary>
        [TestCategory("RerunMay9"), TestCategory("Validation1"), TestCategory("Rerun-14-05-2020"), TestCategory("Rerun-21062020_1"), TestCategory("Sprint32NC")]
        [TestProperty("TestcaseID", "RTA-5676")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5676), DynamicDataSourceType.Method)]
        public void RTA_5676_SalesEM_AccountSharePermission(DataRow Ro)
        {
            try
            {

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString());
                generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
                string now = System.DateTime.Now.ToString();
                string Accountname = generic.CreateNewAccount(driver, extentTest, testDataIteration, testName, Ro["CompanyName1"].ToString(), now);

                generic.ShareRecord3Dots(driver, extentTest, testName, testDataIteration, Ro["User1"].ToString());
                // generic.Logout(driver, extentTest, testName, testDataIteration);
                generic.Loginafterlogout(driver, extentTest, testName, testDataIteration, Ro["UserName1"].ToString(), Ro["Password1"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString());
                generic.RecordGlobalSearch(driver, extentTest, testName, testDataIteration, Accountname);

                generic.SelectingActiveCell(driver, extentTest, testName, testDataIteration);


                // generic.OpenRecordGlobalSearch(driver, extentTest, testName, testDataIteration, Ro["Account1"].ToString());
                generic.VerifyAccountEditable(driver, extentTest, testDataIteration, testName, Ro["ParentAccountName"].ToString());
                login.Logout(driver, extentTest, testName, testDataIteration);
            }
            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }



        public static IEnumerable<object[]> RTA_5675()
        {
            foreach (DataRow row in getTestCaseList("SalesEnterpriseDirector"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To check whether the Sales Enterprise Director is provided with contact entity share permission as "Org"
        /// </summary>
        [TestCategory("RerunMay9"), TestCategory("1410"), TestCategory("Rerun-14-05-2020"), TestCategory("Rerun-21062020_1"), TestCategory("SprintUN")]
        [TestProperty("TestcaseID", "RTA-5675")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5675), DynamicDataSourceType.Method)]
        public void RTA_5675_SalesED_AccountSharePermission(DataRow Ro)
        {
            //try
            //{

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString());
            // generic.OpenRecordGlobalSearch(driver, extentTest, testName, testDataIteration, Ro["Account2"].ToString());
            generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
            string now = System.DateTime.Now.ToString();
            string Accountname = generic.CreateNewAccount(driver, extentTest, testDataIteration, testName, Ro["CompanyName1"].ToString(), now);


            generic.ShareRecord3Dots(driver, extentTest, testName, testDataIteration, Ro["User1"].ToString());
            // generic.Logout(driver, extentTest, testName, testDataIteration);

            generic.Loginafterlogout(driver, extentTest, testName, testDataIteration, Ro["UserName1"].ToString(), Ro["Password1"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString());
            //  generic.OpenRecordGlobalSearch(driver, extentTest, testName, testDataIteration, Accountname);
            generic.RecordGlobalSearch(driver, extentTest, testName, testDataIteration, Accountname);

            generic.SelectingActiveCell(driver, extentTest, testName, testDataIteration);

            generic.VerifyAccountEditable(driver, extentTest, testDataIteration, testName, Ro["ParentAccountName"].ToString());
            generic.Logout(driver, extentTest, testName, testDataIteration);
            //}
            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}
        }


        public static IEnumerable<object[]> RTA_5736()
        {
            foreach (DataRow row in getTestCaseList("SalesEnterpriseAccountManager"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To verify whether the Sales Enterprise Account Manager is provided with contact entity share permission as "Org".
        /// </summary>
        [TestCategory("RerunMay9"), TestCategory("Validation1"), TestCategory("Rerun-21062020_1"), TestCategory("27Aug"), TestCategory("SprintUN")]
        [TestProperty("TestcaseID", "RTA-5736")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5736), DynamicDataSourceType.Method)]
        public void RTA_5736_SalesEAM_ContactSharePermission(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown1(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["ContactEntity"].ToString());
                string emailid = "test123@gmail.com";
                string contactname = generic.CreateNewcontactReq(driver, extentTest, testName, testDataIteration, Ro["Centre"].ToString(), "US English", emailid);
                generic.ClickAdvanceFindButton(driver, extentTest, testName, testDataIteration);
                string ParentWindow = generic.FindValueInAdvanceFind(driver, extentTest, testName, testDataIteration, "Contact", contactname);

                //generic.OpenRecordGlobalSearch(driver, extentTest, testName, testDataIteration, Ro["TestContactShare"].ToString());
                generic.ShareRecord3Dots(driver, extentTest, testName, testDataIteration, Ro["User1"].ToString());
                driver.Close();
                generic.WindowHandling(driver, ParentWindow);
                // generic.Logout(driver, extentTest, testName, testDataIteration);

                generic.Loginafterlogout(driver, extentTest, testName, testDataIteration, Ro["UserName1"].ToString(), Ro["Password1"].ToString());
                generic.NavigateToMainDropDown1(driver, extentTest, testName, testDataIteration, Ro["Sales2"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["ContactEntity"].ToString());
                generic.ActiveContactSelect(driver, extentTest, testName, testDataIteration);
                generic.OpenRecordGlobalSearch(driver, extentTest, testName, testDataIteration, Ro["TestContactShare"].ToString());

                generic.VerifyContactEditableEnterprise(driver, extentTest, testDataIteration, testName, Ro["EmailUpdate"].ToString());
                generic.Logout(driver, extentTest, testName, testDataIteration);
            }
            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }

        public static IEnumerable<object[]> RTA_5735()
        {
            foreach (DataRow row in getTestCaseList("EnterpriseSalesManager"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To check whether the Sales Enterprise Manager is provided with contact entity share permission as "Org"
        /// </summary>
        [TestCategory("0409"), TestCategory("Validation1"), TestCategory("RerunMay9"), TestCategory("Rerun-21062020_1"), TestCategory("Rerun-24062020"), TestCategory("Sprint32NC")]
        [TestProperty("TestcaseID", "RTA-5735")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5735), DynamicDataSourceType.Method)]
        public void RTA_5735_SalesEM_ContactSharePermission(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                string now = System.DateTime.Now.ToString();
                // Create contact
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["ContactEntity"].ToString());
                // generic.OpenRecordGlobalSearch(driver, extentTest, testName, testDataIteration, Ro["Account2"].ToString());
                generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());

                generic.CreateNewContactEnterpriseSales(driver, extentTest, testDataIteration, testName, Ro["LastName"].ToString(), now, "Test@gmail.com", "Test" + now);

                string Contactname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");

                // generic.ClickAdvanceFindButton(driver, extentTest, testName, testDataIteration);
                //  string ParentWindow = generic.FindValueInAdvanceFind(driver, extentTest, testName, testDataIteration, "Contact", Ro["TestContactShare"].ToString());

                //generic.OpenRecordGlobalSearch(driver, extentTest, testName, testDataIteration, Ro["TestContactShare"].ToString());
                generic.ShareRecord3Dots(driver, extentTest, testName, testDataIteration, Ro["User1"].ToString());
                generic.Logout(driver, extentTest, testName, testDataIteration);

                //generic.LoginafterlogoutOld(driver, extentTest, testName, testDataIteration, Ro["UserName1"].ToString(), Ro["Password1"].ToString());
                //generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                //generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["EntityContact"].ToString());
                //generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "All Enterprise Contacts");
                //generic.RecordGlobalSearchopportunity(driver, extentTest, testName, testDataIteration, Contactname);
                //generic.SelectingActiveCell(driver, extentTest, testName, testDataIteration);
                //generic.VerifyContactEditableEnterprise(driver, extentTest, testDataIteration, testName, Ro["EmailUpdate"].ToString());
                //generic.Logout(driver, extentTest, testName, testDataIteration);
            }
            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }
        public static IEnumerable<object[]> RTA_5734()
        {
            foreach (DataRow row in getTestCaseList("SalesEnterpriseDirector"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To check whether the Sales Enterprise Director is provided with contact entity share permission as "Org"
        /// </summary>
        [TestCategory("RerunMay9"), TestCategory("Validation1"), TestCategory("Sprint32NC"), TestCategory("Gokul")]
        [TestProperty("TestcaseID", "RTA-5734")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5734), DynamicDataSourceType.Method)]
        public void RTA_5734_SalesED_ContactSharePermission(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["EntityContact"].ToString());
                generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
                string now = System.DateTime.Now.ToString();
                generic.CreateNewContact(driver, extentTest, testDataIteration, testName, Ro["LastName"].ToString() + now, Ro["TestContactLanguage"].ToString(), Ro["UserName"].ToString());
                string Contactname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");

                //generic.RecordGlobalSearchopportunity(driver, extentTest, testName, testDataIteration, Accouontname);
                //generic.SelectingActiveCell(driver, extentTest, testName, testDataIteration);

                //generic.OpenRecordGlobalSearch(driver, extentTest, testName, testDataIteration, Contactname);
                generic.ShareRecord3Dots(driver, extentTest, testName, testDataIteration, Ro["User1"].ToString());
                // generic.Logout(driver, extentTest, testName, testDataIteration);

                generic.Loginafterlogout(driver, extentTest, testName, testDataIteration, Ro["UserName1"].ToString(), Ro["Password1"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["EntityContact"].ToString());
                // generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "Active Contacts");

                generic.relevancesearch(driver, extentTest, testName, testDataIteration, Contactname);
                //  generic.SelectingActiveCell(driver, extentTest, testName, testDataIteration);
                generic.VerifyContactEditableEnterprise(driver, extentTest, testDataIteration, testName, Ro["EmailUpdate"].ToString());
                generic.Logout(driver, extentTest, testName, testDataIteration);
            }
            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }



        public static IEnumerable<object[]> RTA_6055()
        {
            foreach (DataRow row in getTestCaseList("EnterpriseSalesManager"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To verify whether the Sales Enterprise Manager is provided with Activities entity share permission as "Org".
        /// </summary>
        [TestCategory("RerunMay9"), TestCategory("25Nov"), TestCategory("RF24-4-20"), TestCategory("RerunMay120"), TestCategory("Rerun-06062020"), TestCategory("Rerun-15062020"), TestCategory("Sprint32NC")]
        [TestProperty("TestcaseID", "RTA-6055")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_6055), DynamicDataSourceType.Method)]
        public void RTA_6055_SalesEM_ActivitySharePermission(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
                string Time = System.DateTime.Now.ToString();
                generic.NavigateToRibbonButtonActivities(driver, extentTest, testName, testDataIteration, Ro["RibbonActivityPhoneCall"].ToString());

                string Activityname = generic.CreateNewPhoneCallActivityEnterpriseSales(driver, extentTest, testName, testDataIteration, Time, Ro["PhoneCallSubject"].ToString(), Ro["TestAccount"].ToString());

                // string name = generic.Openedrecordheadertitle(driver, extentTest, testName, testDataIteration);

                generic.Sharerecord(driver, extentTest, testName, testDataIteration, Ro["User1"].ToString());
                generic.Logout(driver, extentTest, testName, testDataIteration);

                generic.Loginafterlogout2(driver, extentTest, testName, testDataIteration, Ro["UserName1"].ToString(), Ro["Password1"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
                //generic.OpenRecordGlobalSearch(driver, extentTest, testName, testDataIteration, Activityname);
                //generic.VerifySharedActivityEditableEnterpriseSales(driver, extentTest, testName, testDataIteration, Ro["UpdatePhoneNumber"].ToString());
                generic.FindAndSelectParticulareRecordFromGlobalSearch(driver, extentTest, testName, testDataIteration, Activityname, "Categorized Search", "Activity", Ro["SearchValueCompare"].ToString());

                generic.VerifySharedActivityEditable(driver, extentTest, testName, testDataIteration, Ro["TestContactLname"].ToString(), Ro["TestContactLanguage"].ToString());
                generic.Logout(driver, extentTest, testName, testDataIteration);
            }
            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }

        public static IEnumerable<object[]> RTA_6054()
        {
            foreach (DataRow row in getTestCaseList("SalesEnterpriseDirector"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To verify whether the Sales Enterprise Director is provided with Activities entity share permission as "Org".
        /// </summary>
        [TestCategory("RerunMay9"), TestCategory("25Nov"), TestCategory("Gokul"), TestCategory("RF24-4-20"), TestCategory("Rerun-06062020"), TestCategory("Rerun-22062020"), TestCategory("Sprint32NC"), TestCategory("26Aug")]
        [TestProperty("TestcaseID", "RTA-6054")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_6054), DynamicDataSourceType.Method)]
        public void RTA_6054_SalesED_ActivitySharePermission(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
                // string regardingname = generic.Activityregardingvaluefromsearchresults(driver, extentTest, testName, testDataIteration);
                string Time = System.DateTime.Now.ToString();
                generic.NavigateToRibbonButtonActivities(driver, extentTest, testName, testDataIteration, Ro["RibbonActivityPhoneCall"].ToString());
                string now = System.DateTime.Now.ToString();
                string Activityname = generic.CreateNewPhoneCallActivityETteam(driver, extentTest, testName, testDataIteration, Time, Ro["PhoneCallSubject"].ToString() + now, Ro["TestAccount"].ToString());


                generic.Sharerecord(driver, extentTest, testName, testDataIteration, Ro["User1"].ToString());

                //  generic.Logout(driver, extentTest, testName, testDataIteration);

                generic.Loginafterlogout(driver, extentTest, testName, testDataIteration, Ro["UserName1"].ToString(), Ro["Password1"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
                //generic.RecordGlobalSearch(driver, extentTest, testName, testDataIteration, Activityname);
                // generic.FilterRegardingEnterpriseSales(driver, extentTest, testName, testDataIteration, Ro["FilterCondition"].ToString(), Activityname);
                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "Current Enterprise Activities");
                generic.FindAndSelectParticulareRecordFromGlobalSearch(driver, extentTest, testName, testDataIteration, Activityname, "Categorized Search", "Activity", Ro["SearchValueCompare"].ToString());

                //generic.SelectingActiveCell(driver, extentTest, testName, testDataIteration);

                generic.VerifySharedActivityEditable1(driver, extentTest, testName, testDataIteration, "Test Modified");
                generic.Logout(driver, extentTest, testName, testDataIteration);
            }
            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }

        public static IEnumerable<object[]> RTA_6051()
        {
            foreach (DataRow row in getTestCaseList("SalesEnterpriseAccountManager"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To verify whether the Sales Enterprise Account Manager is provided with Activity entity assign permission as "Org".
        /// </summary>
        [TestCategory("smoke"), TestCategory("InProgress"), TestCategory("0409"), TestCategory("Validation1"), TestCategory("Rerun"), TestCategory("Sprint32NCS"), TestCategory("0309"), TestCategory("09Sep")]
        [TestProperty("TestcaseID", "RTA-6051")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_6051), DynamicDataSourceType.Method)]
        public void RTA_6051_SalesEAM_AssignPermission(DataRow Ro)
        {
            try
            {
                string now = System.DateTime.Now.ToString();
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
                generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
                generic.NavigateToRibbonButtonActivities(driver, extentTest, testName, testDataIteration, Ro["RibbonActivityPhoneCall"].ToString());
                generic.CreateNewPhoneCallActivityETteam(driver, extentTest, testName, testDataIteration, now, Ro["PhoneCallSubject"].ToString(), Ro["TestAccount"].ToString());
                //generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "My Activities for this week");
                //generic.SelectingActiveCell(driver, extentTest, testName, testDataIteration);
                // generic.SelectingActiveCell(driver, extentTest, testName, testDataIteration);
                generic.AssignRecordLoggedUser(driver, extentTest, testName, testDataIteration, Ro["AssignTo"].ToString(), Ro["Loginuser"].ToString());
                generic.VerifyAssignedUserActivity(driver, extentTest, testName, testDataIteration, Ro["Owner"].ToString());
                generic.AssignRecordAnotherUser(driver, extentTest, testName, testDataIteration, Ro["AssignTo"].ToString(), Ro["User1"].ToString());
                generic.VerifyAssignedUserActivity(driver, extentTest, testName, testDataIteration, Ro["User1"].ToString());
                login.Logout(driver, extentTest, testName, testDataIteration);
            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }

        public static IEnumerable<object[]> RTA_5672()
        {
            foreach (DataRow row in getTestCaseList("SalesEnterpriseDirector"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To verify whether the Sales Enterprise  Director is provided with account entity assign permission as "Org".
        /// </summary>
        [TestCategory("RerunMay9"), TestCategory("Validation1"), TestCategory("SprintUN"), TestCategory("07Sep")]
        [TestProperty("TestcaseID", "RTA-5672")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5672), DynamicDataSourceType.Method)]
        public void RTA_5672_SalesED_AccountAssignPermission(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString());
                generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
                // generic.OpenRecordGlobalSearch(driver, extentTest, testName, testDataIteration, Ro["AcountAssign"].ToString());
                generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
                string now = System.DateTime.Now.ToString();
                string name = generic.CreateNewAccount(driver, extentTest, testDataIteration, testName, Ro["CompanyName"].ToString(), now);

                generic.AssignRecordLoggedUser(driver, extentTest, testName, testDataIteration, Ro["AssignTo"].ToString(), Ro["Loginuser"].ToString());
                generic.VerifyAssignedUserActivity(driver, extentTest, testName, testDataIteration, Ro["Owner"].ToString());
                generic.AssignRecordAnotherUser(driver, extentTest, testName, testDataIteration, Ro["AssignTo"].ToString(), Ro["User1"].ToString());
                generic.VerifyAssignedUserActivity(driver, extentTest, testName, testDataIteration, Ro["User1"].ToString());
                generic.Logout(driver, extentTest, testName, testDataIteration);
            }
            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }

        public static IEnumerable<object[]> RTA_5673()
        {
            foreach (DataRow row in getTestCaseList("EnterpriseSalesManager"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To verify whether the Sales Enterprise  Manager is provided with account entity assign permission as "Org".
        /// </summary>
        [TestCategory("RerunMay9"), TestCategory("Validation1"), TestCategory("Sprint32NCS"), TestCategory("26Aug")]
        [TestProperty("TestcaseID", "RTA-5673")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5673), DynamicDataSourceType.Method)]
        public void RTA_5673_SalesEM_AccountAssignPermission(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString());
                //generic.OpenRecordGlobalSearch(driver, extentTest, testName, testDataIteration, Ro["AcountAssign"].ToString());
                generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());

                string now = System.DateTime.Now.ToString();
                string name = generic.CreateNewAccount(driver, extentTest, testDataIteration, testName, Ro["CompanyName"].ToString(), now);

                generic.AssignRecordAnotherUser(driver, extentTest, testName, testDataIteration, Ro["AssignTo"].ToString(), Ro["User1"].ToString());
                generic.VerifyAssignedUserActivity(driver, extentTest, testName, testDataIteration, Ro["User1"].ToString());
                generic.Logout(driver, extentTest, testName, testDataIteration);
            }
            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }
        public static IEnumerable<object[]> RTA_5674()
        {
            foreach (DataRow row in getTestCaseList("SalesEnterpriseAccountManager"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To verify whether the Sales Enterprise Account Manager is provided with account entity assign permission as "Org".
        /// </summary>
        [TestCategory("RerunMay9"), TestCategory("Validation1"), TestCategory("09Sep"), TestCategory("Sprint32NCS")]
        [TestProperty("TestcaseID", "RTA-5674")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5674), DynamicDataSourceType.Method)]
        public void RTA_5674_SalesEAM_AccountAssignPermission(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString());
                //generic.OpenRecordGlobalSearch(driver, extentTest, testName, testDataIteration, "");
                generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());

                string now = System.DateTime.Now.ToString();
                string name = generic.CreateNewAccount(driver, extentTest, testDataIteration, testName, Ro["CompanyName"].ToString(), now);

                generic.AssignRecordLoggedUser(driver, extentTest, testName, testDataIteration, Ro["AssignTo"].ToString(), Ro["Loginuser"].ToString());
                generic.VerifyAssignedUserActivity(driver, extentTest, testName, testDataIteration, Ro["Owner"].ToString());
                generic.AssignRecordAnotherUser(driver, extentTest, testName, testDataIteration, Ro["AssignTo"].ToString(), Ro["User"].ToString());
                generic.VerifyAssignedUserActivity(driver, extentTest, testName, testDataIteration, Ro["User"].ToString());
                generic.Logout(driver, extentTest, testName, testDataIteration);
            }
            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }
        public static IEnumerable<object[]> RTA5731()
        {
            foreach (DataRow row in getTestCaseList("SalesEnterpriseAccountManager"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To verify whether the Sales Enterprise Account Manager is provided with Activity entity assign permission as "Org".
        /// </summary>
        [TestCategory("0409"), TestCategory("Validation1"), TestCategory("Sprint32NCS"), TestCategory("2910")]
        [TestProperty("TestcaseID", "RTA-5731")]

        [DataTestMethod]
        [DynamicData(nameof(RTA5731), DynamicDataSourceType.Method)]
        public void RTA5731_SalesEAM_ContactAssignPermission(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["ContactEntity"].ToString());
                generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
                generic.CreateNewContact(driver, extentTest, testDataIteration, testName, Ro["LastName"].ToString(), Ro["TestContactLanguage"].ToString(), Ro["UserName"].ToString());


                //   generic.OpenRecordGlobalSearch(driver, extentTest, testName, testDataIteration, Ro["TestContactAssign"].ToString());
                generic.AssignRecordLoggedUser(driver, extentTest, testName, testDataIteration, Ro["AssignTo"].ToString(), Ro["Loginuser"].ToString());
                //generic.VerifyAssignedUserActivity(driver, extentTest, testName, testDataIteration, Ro["Owner"].ToString());
                generic.AssignRecordAnotherUser(driver, extentTest, testName, testDataIteration, Ro["AssignTo"].ToString(), Ro["User"].ToString());
                //  generic.VerifyAssignedUserActivity(driver, extentTest, testName, testDataIteration, Ro["User"].ToString());
                login.Logout(driver, extentTest, testName, testDataIteration);
            }
            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }

        public static IEnumerable<object[]> RTA_5721()
        {
            foreach (DataRow row in getTestCaseList("SalesEnterpriseAccountManager"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To verify whether the Sales Enterprise Account Manager is provided with Contact entity creation permission as "Org".
        /// </summary>
        [TestCategory("Gokul"), TestCategory("Validation1"), TestCategory("TestLock1"), TestCategory("Sprint32NCS"), TestCategory("26Aug")]
        [TestProperty("TestcaseID", "RTA-5721")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5721), DynamicDataSourceType.Method)]
        public void RTA_5721_SalesEAM_ContactCreatePermission(DataRow Ro)
        {
            try
            {

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["ContactEntity"].ToString());
                string time = generic.GetSystemTimeInSec(driver, extentTest, testDataIteration, testName);
                string now = System.DateTime.Now.ToString();

                ///  generic.CreateNewContact(driver, extentTest, testDataIteration, testName, Ro["LastName"].ToString(), Ro["TestContactLanguage"].ToString(), Ro["UserName"].ToString());
                generic.CreateNewContactEnterpriseSales(driver, extentTest, testName, testDataIteration, Ro["TestContactLname"].ToString(), now);
                generic.GlobalSearchAndVerifyRecord(driver, extentTest, testDataIteration, testName, time, Ro["TestContactLname"].ToString(), Ro["SearchFilterOption2"].ToString(), Ro["TestdataFilter1"].ToString());

                generic.Logout(driver, extentTest, testName, testDataIteration);
            }
            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }

        public static IEnumerable<object[]> RTA_5713()
        {
            foreach (DataRow row in getTestCaseList("SalesEnterpriseDirector"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To verify whether the Sales Enterprise Director is provided with Contact entity creation permission as "Org".
        /// </summary>
        [TestCategory("RerunMay9"), TestCategory("Validation1"), TestCategory("TestLock1"), TestCategory("Sprint32NCS"), TestCategory("26Aug")]
        [TestProperty("TestcaseID", "RTA-5713")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5713), DynamicDataSourceType.Method)]
        public void RTA_5713_SalesED_ContactCreatePermission(DataRow Ro)
        {
            //try
            //{
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["ContactEntity"].ToString());
            string time = generic.GetSystemTimeInSec(driver, extentTest, testDataIteration, testName);
            string now = System.DateTime.Now.ToString();
            generic.CreateNewContactEnterpriseSales(driver, extentTest, testName, testDataIteration, Ro["TestContactLname"].ToString(), now);
            generic.GlobalSearchAndVerifyRecord(driver, extentTest, testDataIteration, testName, time, Ro["TestContactLname"].ToString(), Ro["SearchFilterOption2"].ToString(), Ro["TestdataFilter1"].ToString());
            generic.Logout(driver, extentTest, testName, testDataIteration);
            //}
            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}
        }

        public static IEnumerable<object[]> RTA_5715()
        {
            foreach (DataRow row in getTestCaseList("EnterpriseSalesManager"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To verify whether the Sales Enterprise Manager is provided with Contact entity creation permission as "Org".
        /// </summary>
        [TestCategory("RerunMay9"), TestCategory("21Oct"), TestCategory("Sprint32NCS"), TestCategory("26Aug")]
        [TestProperty("TestcaseID", "RTA-5715")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5715), DynamicDataSourceType.Method)]
        public void RTA_5715_SalesEM_ContactCreatePermission(DataRow Ro)
        {
            //try
            //{
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["ContactEntity"].ToString());
            string time = generic.GetSystemTimeInSec(driver, extentTest, testDataIteration, testName);
            string now = System.DateTime.Now.ToString();
            generic.CreateNewContactEnterpriseSales(driver, extentTest, testName, testDataIteration, Ro["TestContactLname"].ToString(), now);
            generic.GlobalSearchAndVerifyRecord(driver, extentTest, testDataIteration, testName, time, Ro["TestContactLname"].ToString(), Ro["SearchFilterOption2"].ToString(), Ro["TestdataFilter1"].ToString());
            generic.Logout(driver, extentTest, testName, testDataIteration);
            //}
            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}
        }



        public static IEnumerable<object[]> RTA_6009()
        {
            foreach (DataRow row in getTestCaseList("SalesEnterpriseAccountManager"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To verify whether the Sales Enterprise Account Manager is provided with Activity entity assign permission as "Org".
        /// </summary>
        [TestCategory("RerunMay9"), TestCategory("Validation1"), TestCategory("Sprint32NCS")]
        [TestProperty("TestcaseID", "RTA-6009")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_6009), DynamicDataSourceType.Method)]
        public void RTA_6009_SalesEAM_OpportunityAssignPermission(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "Open Enterprise Opportunities");

                generic.SelectingActiveCell(driver, extentTest, testName, testDataIteration);
                generic.AssignRecordLoggedUser(driver, extentTest, testName, testDataIteration, Ro["AssignTo"].ToString(), Ro["Loginuser"].ToString());
                generic.AssignRecordAnotherUser(driver, extentTest, testName, testDataIteration, Ro["AssignTo"].ToString(), Ro["User1"].ToString());
                generic.Logout(driver, extentTest, testName, testDataIteration);
            }
            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }

        public static IEnumerable<object[]> RTA6008()
        {
            foreach (DataRow row in getTestCaseList("EnterpriseSalesManager"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To verify whether the Sales Enterprise Manager is provided with opportunity entity assign permission as "Org".
        /// </summary>
        [TestCategory("RerunMay9"), TestCategory("Validation1"), TestCategory("Sprint32NCS"), TestCategory("0309")]
        [TestProperty("TestcaseID", "RTA-6008")]

        [DataTestMethod]
        [DynamicData(nameof(RTA6008), DynamicDataSourceType.Method)]
        public void RTA6008_SalesEM_OpportunityAssignPermission(DataRow Ro)
        {
            //try
            //{
            string Date = DateTime.Today.ToString("dd-MM-yyyy");
            DateTime Now = DateTime.Now;
            string Time = Date + Convert.ToString(Now.Hour) + Convert.ToString(Now.Millisecond);
            string NewContactName = "ContactNamewithacc" + Time;
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity3"].ToString());
            //generic.OpenRecordGlobalSearch(driver, extentTest, testName, testDataIteration, Ro["OpportunityAssign"].ToString());
            generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());

            string companyname1 = generic.CreateNewOpportunity(driver, extentTest, testDataIteration, testName, NewContactName, Ro["Contry"].ToString(), Ro["Currency"].ToString(), Ro["channel"].ToString(), Ro["MajorSource"].ToString(), Ro["MinorSource"].ToString());

            generic.AssignRecordLoggedUser(driver, extentTest, testName, testDataIteration, Ro["AssignTo"].ToString(), Ro["Loginuser"].ToString());
            generic.VerifyAssignedUserActivity(driver, extentTest, testName, testDataIteration, Ro["Owner"].ToString());
            generic.AssignRecordAnotherUser(driver, extentTest, testName, testDataIteration, Ro["AssignTo"].ToString(), Ro["User"].ToString());
            generic.VerifyAssignedUserActivity(driver, extentTest, testName, testDataIteration, Ro["User"].ToString());
            login.Logout(driver, extentTest, testName, testDataIteration);
            //}
            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}
        }

        public static IEnumerable<object[]> RTA6007()
        {
            foreach (DataRow row in getTestCaseList("SalesEnterpriseDirector"))
            {
                yield return new object[] { row };
            }
        }

        /// <summary>
        /// To verify whether the Sales Enterprise Director is provided with opportunity entity assign permission as "Org".
        /// </summary>
        [TestCategory("RerunMay9"), TestCategory("Validation1"), TestCategory("Sprint32NCS")]
        [TestProperty("TestcaseID", "RTA-6007")]

        [DataTestMethod]
        [DynamicData(nameof(RTA6007), DynamicDataSourceType.Method)]
        public void RTA6007_SalesED_OpportunityAssignPermission(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());

                string companyname1 = generic.CreateNewOpportunity(driver, extentTest, testDataIteration, testName, Ro["Contact"].ToString(), Ro["Contry"].ToString(), Ro["Currency"].ToString(), Ro["channel"].ToString(), Ro["MajorSource"].ToString(), Ro["MinorSource"].ToString());

                //generic.OpenRecordGlobalSearch(driver, extentTest, testName, testDataIteration, Ro["OpportunityAssign"].ToString());
                generic.AssignRecordLoggedUser(driver, extentTest, testName, testDataIteration, Ro["AssignTo"].ToString(), Ro["Loginuser"].ToString());
                //generic.VerifyAssignedUserActivity(driver, extentTest, testName, testDataIteration, Ro["Owner"].ToString());
                generic.AssignRecordAnotherUser(driver, extentTest, testName, testDataIteration, Ro["AssignTo"].ToString(), Ro["User1"].ToString());
                generic.VerifyAssignedUserActivity(driver, extentTest, testName, testDataIteration, Ro["User1"].ToString());
                login.Logout(driver, extentTest, testName, testDataIteration);
            }
            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }

        public static IEnumerable<object[]> Test141()
        {
            foreach (DataRow row in getTestCaseList("SalesEnterpriseAccountManager"))
            {
                yield return new object[] { row };
            }
        }

        /// <summary>
        /// To verify whether the Sales Enterprise Manager is provided with Activity entity assign permission as "Org".
        /// </summary>
        [TestCategory("RerunMay9"), TestCategory("0309"), TestCategory("09Sep"), TestCategory("Sprint32NCS")]
        [TestProperty("TestcaseID", "RTA-6050")]

        [DataTestMethod]
        [DynamicData(nameof(Test141), DynamicDataSourceType.Method)]
        public void SalesEM_AssignPermission_6050(DataRow Ro)
        {
            try
            {

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
                string now = DateTime.UtcNow.ToString("yyyy-MM-dd HH:mm:ss.fff", CultureInfo.InvariantCulture);
                generic.NavigateToRibbonButtonActivities(driver, extentTest, testName, testDataIteration, Ro["RibbonActivityPhoneCall"].ToString());
                generic.CreateNewPhoneCallActivityETteam(driver, extentTest, testName, testDataIteration, now, Ro["PhoneCallSubject"].ToString(), Ro["TestAccount"].ToString());
                generic.AssignRecordLoggedUser(driver, extentTest, testName, testDataIteration, Ro["AssignTo"].ToString(), Ro["Loginuser"].ToString());
                generic.AssignRecordAnotherUser(driver, extentTest, testName, testDataIteration, Ro["AssignTo"].ToString(), Ro["User1"].ToString());
                login.Logout(driver, extentTest, testName, testDataIteration);
            }
            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }





        public static IEnumerable<object[]> RTA_6049()
        {
            foreach (DataRow row in getTestCaseList("SalesEnterpriseDirector"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To verify whether the Sales Enterprise Director is provided with Activity entity Assign permission for users in other "BU".
        /// </summary>
        [TestCategory("RerunMay9"), TestCategory("Validation1"), TestCategory("TestLock1"), TestCategory("Sprint32NCS"), TestCategory("27Aug")]
        [TestProperty("TestcaseID", "RTA-6049")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_6049), DynamicDataSourceType.Method)]
        public void RTA_6049_SalesED_AssignPermission(DataRow Ro)
        {
            try
            {
                string now = System.DateTime.Now.ToString();
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
                generic.NavigateToRibbonButtonActivities(driver, extentTest, testName, testDataIteration, Ro["RibbonActivityPhoneCall"].ToString());
                generic.CreateNewPhoneCallActivityETteam(driver, extentTest, testName, testDataIteration, now, Ro["PhoneCallSubject"].ToString(), Ro["TestAccount"].ToString());
                //  generic.SelectingActiveCell(driver, extentTest, testName, testDataIteration);

                generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
                generic.AssignRecordLoggedUser(driver, extentTest, testName, testDataIteration, Ro["AssignTo"].ToString(), Ro["Loginuser"].ToString());
                generic.VerifyAssignedUserActivity(driver, extentTest, testName, testDataIteration, Ro["Owner"].ToString());
                generic.AssignRecordAnotherUser(driver, extentTest, testName, testDataIteration, Ro["AssignTo"].ToString(), Ro["User2"].ToString());
                generic.VerifyAssignedUserActivity(driver, extentTest, testName, testDataIteration, Ro["User2"].ToString());
                generic.Logout(driver, extentTest, testName, testDataIteration);
            }
            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }

        public static IEnumerable<object[]> RTA_5729()
        {
            foreach (DataRow row in getTestCaseList("SalesEnterpriseDirector"))
            {
                yield return new object[] { row };
            }
        }
        // Test
        /// To verify whether the Sales Enterprise Director is provided with Contact entity Assign permission as "Org"
        /// </summary>
        [TestCategory("0409"), TestCategory("1410"), TestCategory("Sprint32NCS"), TestCategory("2810"), TestCategory("2910")]
        [TestProperty("TestcaseID", "RTA-5729")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5729), DynamicDataSourceType.Method)]
        public void RTA_5729_SalesED_ContactAssignPermission(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["ContactEntity"].ToString());
                //    generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["EntityContact"].ToString());
                generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
                generic.CreateNewContact(driver, extentTest, testDataIteration, testName, Ro["LastName"].ToString(), Ro["TestContactLanguage"].ToString(), Ro["UserName"].ToString());

                //generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
                //string Time = System.DateTime.Now.ToString();
                //generic.NavigateToRibbonButtonActivities(driver, extentTest, testName, testDataIteration, Ro["RibbonActivityPhoneCall"].ToString());

                //string Activityname = generic.CreateNewPhoneCallActivity(driver, extentTest, testName, testDataIteration, Time, Ro["PhoneCallSubject"].ToString(), Ro["TestAccount"].ToString());

                //generic.OpenRecordGlobalSearch(driver, extentTest, testName, testDataIteration, Ro["TestContactAssign"].ToString());
                generic.AssignRecordLoggedUser(driver, extentTest, testName, testDataIteration, Ro["AssignTo"].ToString(), Ro["Loginuser"].ToString());
                //generic.VerifyAssignedUserActivity(driver, extentTest, testName, testDataIteration, Ro["Owner"].ToString());
                generic.AssignRecordAnotherUser(driver, extentTest, testName, testDataIteration, Ro["AssignTo"].ToString(), Ro["User1"].ToString());
                //generic.VerifyAssignedUserActivity(driver, extentTest, testName, testDataIteration, Ro["User1"].ToString());
                login.Logout(driver, extentTest, testName, testDataIteration);
            }
            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }





        public static IEnumerable<object[]> RTA_4999()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To verify whether IWG SA is able to change city in the City Diary and select the associated centre
        /// </summary>

        [TestCategory("smoke"), TestCategory("BookaTour"), TestCategory("25Nov"), TestCategory("23Oct"), TestCategory("SprintUN")]
        [TestProperty("TestcaseID", "RTA-4999")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_4999), DynamicDataSourceType.Method)]
        public void RTA_4999_VerifyUpdateCityCentreIWGSalesAgent(DataRow Ro)
        {
            //try
            //{

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());

            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
            generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "My Open Opportunities");


            generic.CreateNewOpportunityBookATour(driver, extentTest, testName, testDataIteration, Ro["BussinessCentre2"].ToString());

            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Button"].ToString());
            generic.VerifyBookTourPage(driver, extentTest, testName, testDataIteration);
            generic.VerifyCentre1(driver, extentTest, testName, testDataIteration, Ro["City1"].ToString(), Ro["CityCentre"].ToString());
            login.Logout(driver, extentTest, testName, testDataIteration);
            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}
        }

        public static IEnumerable<object[]> RTA_5032()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To verify scheduling screen displays the calendar control being defaulted to a day view
        /// </summary>
        [TestCategory("BookaTour"), TestCategory("Sales"), TestCategory("Validation1"), TestCategory("28Aug"), TestCategory("RerunMay120"), TestCategory("Rerun-21062020_1"), TestCategory("TestLock1"), TestCategory("SprintUN")]
        [TestProperty("TestcaseID", "RTA-5032")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5032), DynamicDataSourceType.Method)]
        public void RTA_5032_Verifycalendersectiondefauttoday(DataRow Ro)
        {
            try
            {

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());

                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());

                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "My Open Opportunities");
                generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
                try
                {
                    generic.CreateNewOpportunityBookATour(driver, extentTest, testName, testDataIteration, Ro["Centre"].ToString());
                    //generic.UpdateStartDate(driver, extentTest, testDataIteration, testName, Ro["SelectMonthFeb"].ToString(), Ro["SelectDateFeb"].ToString());

                    generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Button"].ToString());
                    //string datetimeExcel = Ro["TodayDate"].ToString();
                    //string datetime = datetimeExcel.Remove(datetimeExcel.Length - 6);
                    string Y1 = DateTime.Now.AddDays(1).ToString("MMMM d");
                    string Y2 = DateTime.Now.ToString("yyyy");
                    string Y3 = Y1 + ", " + Y2;
                    ThinkTime(3);
                    generic.SlotheaderverificationNew(driver, extentTest, testName, testDataIteration, Y3);
                }
                catch (Exception e) { }
                login.Logout(driver, extentTest, testName, testDataIteration);
            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }










        public static IEnumerable<object[]> RTA_5062()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }

        /// <summary>
        /// To verify SA is able to see the different vertical slots in case of overlap of existing tour in dashboard
        /// </summary>

        [TestCategory("smoke"), TestCategory("RerunMay9"), TestCategory("Validation1"), TestCategory("25Aug"), TestCategory("Rerun-14-05-2020"), TestCategory("Rerun-15062020"), TestCategory("TestLock1"), TestCategory("SprintUN")]
        [TestProperty("TestcaseID", "RTA-5062")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5062), DynamicDataSourceType.Method)]
        public void RTA_5062_Verifyverticalslotdisplayforoverlap(DataRow Ro)
        {
            try
            {

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());

                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
                string parent = driver.CurrentWindowHandle;
                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "My Open Opportunities");
                string contactname = generic.CreateNewOpportunityBookATour(driver, extentTest, testName, testDataIteration, Ro["Centre"].ToString());
                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Button"].ToString());
                string centre = Ro["Centre"].ToString();
                generic.SlotVerification(driver, extentTest, testName, testDataIteration);
                driver.SwitchTo().Window(parent);
                login.Logout(driver, extentTest, testName, testDataIteration);
            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }


        public static IEnumerable<object[]> RTA_5060()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// Verify the system should not be able to book the tour if the time slot overlaps with another tour booked on the same vertical column
        /// </summary>

        [TestCategory("smoke"), TestCategory("Sales"), TestCategory("BookaTour"), TestCategory("Validation1"), TestCategory("26AugFixed"), TestCategory("Rerun-14-05-2020"), TestCategory("SprintUN")]
        [TestProperty("TestcaseID", "RTA-5060")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5060), DynamicDataSourceType.Method)]
        public void RTA_5060_Verifytournotbookedforoverlaptimeslots(DataRow Ro)
        {
            try
            {

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());

                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "My Open Opportunities");
                string parent = driver.CurrentWindowHandle;
                generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);

                string contactname = generic.CreateNewOpportunityBookATour(driver, extentTest, testName, testDataIteration, Ro["Centre"].ToString());
                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Button"].ToString());
                string centre = Ro["Centre"].ToString();
                generic.Overlap(driver, extentTest, testName, testDataIteration, contactname, centre);
                driver.SwitchTo().Window(parent);
                login.Logout(driver, extentTest, testName, testDataIteration);
            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }

        public static IEnumerable<object[]> RTA_5806()
        {
            foreach (DataRow row in getTestCaseList("SalesEnterpriseAccountManager"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To verify whether sales Enterprise AccountManager Provided With Opportunity Entity Delete Permission
        /// </summary>

        [TestCategory("08Sep"), TestCategory("Sales"), TestCategory("Agentissue"), TestCategory("Validation1"), TestCategory("Sprint32NCS")]
        [TestProperty("TestcaseID", "RTA-5806")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5806), DynamicDataSourceType.Method)]
        public void RTA_5806_SalesEAM_EntityDeletePermission(DataRow Ro)
        {
            try
            {

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
                generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
                generic.CreateNewOpportunity(driver, extentTest, testDataIteration, testName, Ro["Contact"].ToString(), Ro["Contry"].ToString(), Ro["Currency"].ToString(), Ro["channel"].ToString(), Ro["MajorSource"].ToString(), Ro["MinorSource"].ToString());
                ThinkTime(5);
                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, "Refresh");
                string reference = generic.GetReferenceIDOpportunity(driver, extentTest, testName, testDataIteration);

                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "Open Enterprise Opportunities");

                generic.OpenRecordGlobalSearch(driver, extentTest, testName, testDataIteration, reference);
                generic.DeleteOpportunity(driver, extentTest, testDataIteration, testName);
                login.Logout(driver, extentTest, testName, testDataIteration);
            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }
        public static IEnumerable<object[]> RTA_5805()
        {
            foreach (DataRow row in getTestCaseList("EnterpriseSalesManager"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To verify whether sales Enterprise Manager Provided With Opportunity Entity Delete Permission
        /// </summary>

        [TestCategory("smoke"), TestCategory("Sales"), TestCategory("28Sep2020"), TestCategory("Validation1"), TestCategory("Sprint32NCS")]
        [TestProperty("TestcaseID", "RTA-5805")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5805), DynamicDataSourceType.Method)]
        public void RTA_5805_SalesEM_ProvidedWithOpportunityEntityDeletePermission(DataRow Ro)
        {
            try
            {

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
                generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
                generic.CreateNewOpportunity(driver, extentTest, testDataIteration, testName, Ro["Contact"].ToString(), Ro["Contry"].ToString(), Ro["Currency"].ToString(), Ro["channel"].ToString(), Ro["MajorSource"].ToString(), Ro["MinorSource"].ToString());
                ThinkTime(5);
                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, "Refresh");
                string reference = generic.GetReferenceIDOpportunity(driver, extentTest, testName, testDataIteration);
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "Open Enterprise Opportunities");

                generic.OpenRecordGlobalSearch(driver, extentTest, testName, testDataIteration, reference);
                generic.DeleteOpportunity(driver, extentTest, testDataIteration, testName);
                login.Logout(driver, extentTest, testName, testDataIteration);
            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }
        public static IEnumerable<object[]> RTA_5804()
        {
            foreach (DataRow row in getTestCaseList("SalesEnterpriseDirector"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To verify whether sales Enterprise Director Provided With Opportunity Entity Delete Permission
        /// </summary>

        [TestCategory("smoke"), TestCategory("08Sep"), TestCategory("RerunMay9"), TestCategory("Validation1"), TestCategory("Sprint32NCS")]
        [TestProperty("TestcaseID", "RTA-5804")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5804), DynamicDataSourceType.Method)]
        public void RTA_5804_SalesED_WithOpportunityEntityDeletePermission(DataRow Ro)
        {
            try
            {

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
                generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
                string companyname1 = generic.CreateNewOpportunity(driver, extentTest, testDataIteration, testName, Ro["Contact"].ToString(), Ro["Contry"].ToString(), Ro["Currency"].ToString(), Ro["channel"].ToString(), Ro["MajorSource"].ToString(), Ro["MinorSource"].ToString());
                ThinkTime(5);
                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, "Refresh");
                string reference = generic.GetReferenceIDOpportunity(driver, extentTest, testName, testDataIteration);
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "Open Enterprise Opportunities");

                generic.OpenRecordGlobalSearch(driver, extentTest, testName, testDataIteration, reference);
                generic.DeleteOpportunity(driver, extentTest, testDataIteration, testName);
                login.Logout(driver, extentTest, testName, testDataIteration);
            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }
        public static IEnumerable<object[]> RTA_5728()
        {
            foreach (DataRow row in getTestCaseList("SalesEnterpriseAccountManager"))
            {
                yield return new object[] { row };
            }
        }

        /// <summary>
        /// To verify whether sales Enterprise AccountManager Provided With Opportunity Entity Delete Permission
        /// </summary>

        [TestCategory("smoke"), TestCategory("Sales"), TestCategory("Agentissue"), TestCategory("25Nov"), TestCategory("Gokul"), TestCategory("Sprint32NCS")]
        [TestProperty("TestcaseID", "RTA-5728")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5728), DynamicDataSourceType.Method)]
        public void RTA_5728_SalesEAM_ContactDeletePermission(DataRow Ro)
        {
            try
            {

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["EntityContact"].ToString());
                generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
                generic.CreateNewContact(driver, extentTest, testDataIteration, testName, Ro["LastName"].ToString(), Ro["TestContactLanguage"].ToString(), Ro["UserName"].ToString());
                generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
                //    generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["EntityContact"].ToString());
                //generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "All Enterprise Contacts");


                //generic.RecordGlobalSearchopportunity(driver, extentTest, testName, testDataIteration, Ro["LastName"].ToString());
                //  generic.SelectActiveCellContact(driver, extentTest, testName, testDataIteration);
                generic.Deletecontact(driver, extentTest, testDataIteration, testName, Ro["LastName"].ToString());
                login.Logout(driver, extentTest, testName, testDataIteration);
            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }
        public static IEnumerable<object[]> RTA_5668()
        {
            foreach (DataRow row in getTestCaseList("SalesEnterpriseAccountManager"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To verify whether sales Enterprise AccountManager Provided With Opportunity Entity Delete Permission
        /// </summary>

        [TestCategory("smoke"), TestCategory("Sales"), TestCategory("Agentissue"), TestCategory("Validation1"), TestCategory("Sprint32NCS")]
        [TestProperty("TestcaseID", "RTA-5668")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5668), DynamicDataSourceType.Method)]
        public void RTA_5668_SalesEAM_AccountDeletePermission(DataRow Ro)
        {
            try
            {

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString());
                generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
                string now = System.DateTime.Now.ToString();
                string name = generic.CreateNewAccount(driver, extentTest, testDataIteration, testName, Ro["CompanyName"].ToString(), now);
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString());
                generic.OpenContactGlobalSearch(driver, extentTest, testName, testDataIteration, name);
                generic.DeleteAccount(driver, extentTest, testDataIteration, testName, name);
                login.Logout(driver, extentTest, testName, testDataIteration);
            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }

        public static IEnumerable<object[]> RTA_5598()
        {
            foreach (DataRow row in getTestCaseList("SalesEnterpriseDirector"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To verify whether the Sales Enterprise Director is provided with Account entity creation permission as "Org".
        /// </summary>
        [TestCategory("RerunMay9"), TestCategory("Validation1"), TestCategory("Agentissue"), TestCategory("Sprint32NCS")]
        [TestProperty("TestcaseID", "RTA-5598")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5598), DynamicDataSourceType.Method)]
        public void RTA_5598_SalesED_AccountCreatePermission(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString());

                generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
                generic.CreateNewAccount(driver, extentTest, testDataIteration, testName, Ro["CompanyName1"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString());
                generic.OpenContactGlobalSearch(driver, extentTest, testName, testDataIteration, Ro["CompanyName1"].ToString());

                generic.Logout(driver, extentTest, testName, testDataIteration);
            }
            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }
        public static IEnumerable<object[]> RTA_5599()
        {
            foreach (DataRow row in getTestCaseList("EnterpriseSalesManager"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To verify whether the Sales Enterprise Manager is provided with Account entity creation permission as "Org".
        /// </summary>
        [TestCategory("smoke"), TestCategory("Validation1"), TestCategory("Agentissue"), TestCategory("Sprint32NCS")]
        [TestProperty("TestcaseID", "RTA-5599")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5599), DynamicDataSourceType.Method)]
        public void RTA_5599_SalesEM_AccountCreatePermission(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString());
                generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
                string Accountname = generic.CreateNewAccount(driver, extentTest, testDataIteration, testName, Ro["CompanyName1"].ToString());
                //   generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString());
                string Savedname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");
                generic.Verifyentitycreatedsuccessfully(driver, extentTest, testName, testDataIteration, Accountname, Savedname);
                generic.Logout(driver, extentTest, testName, testDataIteration);
            }
            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }

        public static IEnumerable<object[]> RTA_5582_()
        {
            foreach (DataRow row in getTestCaseList("EnterpriseSalesManager"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To verify whether the Enterprise Sales Manager is able to create Service Provider in the Account and link it to opportunity.
        /// </summary>
        [TestCategory("smoke"), TestCategory("Validation1"), TestCategory("Agentissue"), TestCategory("0309"), TestCategory("RerunMay9"), TestCategory("Sprint32NCS"), TestCategory("2910")]
        [TestProperty("TestcaseID", "RTA-5582")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5582_), DynamicDataSourceType.Method)]
        public void RTA_5582_SalesEM_LinkServiceProviderAccountToOpportunity(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString());
                generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
                string Time = DateTime.UtcNow.ToString("yyyy-MM-dd HH:mm:ss.fff", CultureInfo.InvariantCulture);
                string Accountname1 = generic.CreateNewAccountWithSeriviceProvider(driver, extentTest, testDataIteration, testName, Ro["TestAccountLink"].ToString(), Time, Ro["CustomerType1"].ToString());
                string Accountname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");

                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity3"].ToString());
                generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());

                //generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "Open Enterprise Opportunities");
                // generic.OpenContactGlobalSearch(driver, extentTest, testName, testDataIteration, Ro["TestAccountLinkOpportunity"].ToString());
                //  generic.OpenContactGlobalSearch(driver, extentTest, testName, testDataIteration, Accountname);

                generic.VerifyServiceProviderAccount(driver, extentTest, testName, testDataIteration, Accountname);
                login.Logout(driver, extentTest, testName, testDataIteration);
                generic.DiscardChanges(driver, extentTest, testName, testDataIteration);

            }
            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }
        public static IEnumerable<object[]> RTA_5815()
        {
            foreach (DataRow row in getTestCaseList("EnterpriseSalesManager"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To verify whether the Sales Enterprise Manager is provided with Opportunity entity Read permission as "Org" and Write permission as "Org".
        /// </summary>
        [TestCategory("smoke"), TestCategory("Agentissue"), TestCategory("Validation1"), TestCategory("SprintUN"), TestCategory("CreateOppEnt")]
        [TestProperty("TestcaseID", "RTA-5815")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5815), DynamicDataSourceType.Method)]
        public void RTA_5815_SalesEMNopermissiontodeleteopprecord(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());


                string now = System.DateTime.Now.ToString();
                generic.CreateNewOpportunityEntetrprise(driver, extentTest, testDataIteration, testName, Ro["TestOpportunityAccountName"].ToString(), now, Ro["TestCountry"].ToString(), Ro["TestCurrency"].ToString(), Ro["TestChannel"].ToString(), Ro["TestMajorSource"].ToString(), Ro["TestMinorSource"].ToString(), Ro["TestNewContact"].ToString());

                generic.DeleteAccessOpp(driver, extentTest, testDataIteration, testName);
                login.Logout(driver, extentTest, testName, testDataIteration);
            }


            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }

        public static IEnumerable<object[]> RTA_5581()
        {
            foreach (DataRow row in getTestCaseList("EnterpriseSalesManager"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To verify whether the Enterprise Sales Manager is able to create Broker in the Account and link it to the opportunity.
        /// </summary>
        [TestCategory("smoke"), TestCategory("Validation1"), TestCategory("Agentissue"), TestCategory("PriorReg"), TestCategory("RerunMay120"), TestCategory("RF24-4-20"), TestCategory("Rerun-25062020_1"), TestCategory(""), TestCategory("Sprint32NCS")
                                        , TestCategory("0309")]
        [TestProperty("TestcaseID", "RTA-5581")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5581), DynamicDataSourceType.Method)]
        public void RTA_5581_SalesEM_LinkBrokerAccountToOpportunity(DataRow Ro)
        {
            //try
            //{
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString());
            generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
            string Time = DateTime.UtcNow.ToString("yyyy-MM-dd HH:mm:ss.fff", CultureInfo.InvariantCulture);
            generic.CreateNewAccountWithSeriviceProvider(driver, extentTest, testDataIteration, testName, Ro["TestAccountLink1"].ToString(), Time, Ro["CustomerType2"].ToString());
            string Accountname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");
            string CustomerName = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity3"].ToString());
            //generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "Open Enterprise Opportunities");
            generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
            generic.AddProvidentCustomer(driver, extentTest, testName, testDataIteration, CustomerName);
            generic.VerifyBrokerProviderAccount(driver, extentTest, testName, testDataIteration, Accountname);
            generic.Logout(driver, extentTest, testName, testDataIteration);
            //generic.DiscardChanges(driver, extentTest, testName, testDataIteration);
            //}
            //catch (Exception e)
            //{


            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}
        }






        public static IEnumerable<object[]> RTA_5584()
        {
            foreach (DataRow row in getTestCaseList("EnterpriseSalesManager"))
            {
                yield return new object[] { row };
            }
        }

        /// <summary>
        /// To verify whether the Enterprise Sales Manager is able to create  Brokers in the Account.
        /// </summary>
        [TestCategory("smoke"), TestCategory("Validation1"), TestCategory("Agentissue"), TestCategory("RerunMay9"), TestCategory("TestLock1"), TestCategory("Sprint32NCS"), TestCategory("27Aug")]
        [TestProperty("TestcaseID", "RTA-5584")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5584), DynamicDataSourceType.Method)]
        public void RTA_5584_SalesEM_createBrokersinAccount(DataRow Ro)
        {
            try
            {
                string now = System.DateTime.Now.ToString();
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString());
                generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
                string Time = generic.GetSystemTimeInSec(driver, extentTest, testName, testDataIteration);
                string Brokeraccount1 = generic.CreateNewAccountWithCustomerType(driver, extentTest, testDataIteration, testName, Ro["TestAccountLink"].ToString(), now, Ro["CustomerType2"].ToString(), "Phone", Ro["BussinessPhone"].ToString(), "City", "Kollam", "Country, Lookup");
                login.Logout(driver, extentTest, testName, testDataIteration);
            }
            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }


        public static IEnumerable<object[]> RTA_5603()
        {
            foreach (DataRow row in getTestCaseList("SalesEnterpriseAccountManager"))
            {
                yield return new object[] { row };
            }
        }

        /// <summary>
        /// To verify whether the Sales Enterprise Account Manager is provided with Account entity creation permission as "Org".
        /// </summary>
        [TestCategory("smoke"), TestCategory("Validation1"), TestCategory("Agentissue"), TestCategory("Sprint32NCS")]
        [TestProperty("TestcaseID", "RTA-5603")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5603), DynamicDataSourceType.Method)]
        public void RTA_5603_SalesEAM_AccountCreatePermission(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString());

                generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
                generic.CreateNewAccount(driver, extentTest, testDataIteration, testName, Ro["CompanyName1"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString());
                generic.OpenContactGlobalSearch(driver, extentTest, testName, testDataIteration, Ro["CompanyName1"].ToString());

                generic.Logout(driver, extentTest, testName, testDataIteration);
            }
            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }
        public static IEnumerable<object[]> RTA_5737()
        {
            foreach (DataRow row in getTestCaseList("SalesEnterpriseDirector"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To check whether the Sales Enterprise Account Manager doesn't have the permission to delete other users account record
        /// </summary>
        [TestCategory("RerunMay9"), TestCategory("Validation1"), TestCategory("Agentissue"), TestCategory("Sprint32NCS")]
        [TestProperty("TestcaseID", "RTA-5737")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5737), DynamicDataSourceType.Method)]
        public void RTA_5737_Unabletodeleteotheruseraccountrecord(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString());
                generic.SelectActiveCellContact(driver, extentTest, testName, testDataIteration);
                // generic.OpenSelectedActiveCellContact(driver, extentTest, testName, testDataIteration);
                generic.HeaderDeleteButtonVerification(driver, extentTest, testName, testDataIteration);
                generic.Logout(driver, extentTest, testName, testDataIteration);

            }
            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }
        public static IEnumerable<object[]> RTA5775()
        {
            foreach (DataRow row in getTestCaseList("SalesEnterpriseAccountManager"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To check whether the Sales Enterprise Account Manager doesn't have the permission to delete other users account record
        /// </summary>
        [TestCategory("smoke"), TestCategory("Validation1"), TestCategory("Agentissue"), TestCategory("Sprint32NCS")]
        [TestProperty("TestcaseID", "RTA-5775")]

        [DataTestMethod]
        [DynamicData(nameof(RTA5775), DynamicDataSourceType.Method)]
        public void RTA5775_Unabletodeleteotheruseraccountrecord(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString());
                generic.SelectActiveCellContact(driver, extentTest, testName, testDataIteration);

                generic.VerifyDeletebuttononheader(driver, extentTest, testName, testDataIteration);
                generic.Logout(driver, extentTest, testName, testDataIteration);
            }
            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }
        public static IEnumerable<object[]> RTA5778()
        {
            foreach (DataRow row in getTestCaseList("SalesEnterpriseAccountManager"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To check whether the Sales Enterprise Account Manager doesn't have the permission to delete other users contact record
        /// </summary>
        [TestCategory("smoke"), TestCategory("Validation1"), TestCategory("Agentissue"), TestCategory("SprintUN")]
        [TestProperty("TestcaseID", "RTA-5778")]

        [DataTestMethod]
        [DynamicData(nameof(RTA5778), DynamicDataSourceType.Method)]
        public void RTA5778_Unabletodeleteotherusercontactrecord(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["EntityContact"].ToString());
                generic.SelectActiveCellContact(driver, extentTest, testName, testDataIteration);
                generic.VerifyDeleteButton(driver, extentTest, testName, testDataIteration);


                //generic.NavigateToRibbonButtonActivities(driver, extentTest, testName, testDataIteration, "Delete");
                //generic.VerifyDeleteaccessdenied(driver, extentTest, testName, testDataIteration);
                generic.Logout(driver, extentTest, testName, testDataIteration);
            }
            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }

        public static IEnumerable<object[]> RTA5777()
        {
            foreach (DataRow row in getTestCaseList("EnterpriseSalesManager"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To check whether the Sales Enterprise  Manager doesn't have the permission to delete other users contact record
        /// </summary>
        [TestCategory("smoke"), TestCategory("Validation1"), TestCategory("Agentissue"), TestCategory("Sprint32NCS")]
        [TestProperty("TestcaseID", "RTA-5777")]

        [DataTestMethod]
        [DynamicData(nameof(RTA5777), DynamicDataSourceType.Method)]
        public void RTA5777_Unabletodeleteotherusercontactrecord(DataRow Ro)
        {
            try
            {

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["EntityContact"].ToString());
                generic.SelectActiveCellContact(driver, extentTest, testName, testDataIteration);
                generic.VerifyDeleteButton(driver, extentTest, testName, testDataIteration);
                generic.Logout(driver, extentTest, testName, testDataIteration);
            }
            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }

        public static IEnumerable<object[]> RTA_5776()
        {
            foreach (DataRow row in getTestCaseList("SalesEnterpriseDirector"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To check whether the Sales Enterprise  Director doesn't have the permission to delete other users contact record
        /// </summary>
        [TestCategory("RerunMay9"), TestCategory("Validation1"), TestCategory("Agentissue"), TestCategory("SprintUN")]
        [TestProperty("TestcaseID", "RTA-5776")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5776), DynamicDataSourceType.Method)]
        public void RTA_5776_Unabletodeleteotherusercontactrecord(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["EntityContact"].ToString());
                generic.SelectActiveCellContact(driver, extentTest, testName, testDataIteration);
                generic.VerifyDeleteButton(driver, extentTest, testName, testDataIteration);


                //generic.NavigateToRibbonButtonActivities(driver, extentTest, testName, testDataIteration, "Delete");
                //generic.VerifyDeleteaccessdenied(driver, extentTest, testName, testDataIteration);

                generic.Logout(driver, extentTest, testName, testDataIteration);
            }
            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }







        public static IEnumerable<object[]> RTA_5667()
        {
            foreach (DataRow row in getTestCaseList("EnterpriseSalesManager"))
            {
                yield return new object[] { row };
            }
        }

        /// <summary>
        /// To verify whether sales Enterprise AccountManager Provided With Opportunity Entity Delete Permission
        /// </summary>

        [TestCategory("smoke"), TestCategory("Sales"), TestCategory("Agentissue"), TestCategory("Validation1"), TestCategory("Sprint32NCS")]
        [TestProperty("TestcaseID", "RTA-5667")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5667), DynamicDataSourceType.Method)]
        public void RTA_5667_SalesEM_AccountDeletePermission(DataRow Ro)
        {
            try
            {

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString());
                generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
                string now = System.DateTime.Now.ToString();
                string name = generic.CreateNewAccount(driver, extentTest, testDataIteration, testName, Ro["CompanyName"].ToString(), now);
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString());
                generic.OpenContactGlobalSearch(driver, extentTest, testName, testDataIteration, name);
                generic.DeleteAccount(driver, extentTest, testDataIteration, testName, name);
                login.Logout(driver, extentTest, testName, testDataIteration);
            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }
        public static IEnumerable<object[]> RTA_5666()
        {
            foreach (DataRow row in getTestCaseList("SalesEnterpriseDirector"))
            {
                yield return new object[] { row };
            }
        }

        /// <summary>
        /// To verify whether sales Enterprise AccountManager Provided With Opportunity Entity Delete Permission
        /// </summary>

        [TestCategory("smoke"), TestCategory("Sales"), TestCategory("Agentissue"), TestCategory("Validation1"), TestCategory("RerunMay9"), TestCategory("Rerun-21062020_1"), TestCategory("Sprint32NCS"), TestCategory("28Aug")]
        [TestProperty("TestcaseID", "RTA-5666")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5666), DynamicDataSourceType.Method)]
        public void RTA_5666_SalesED_AccountDeletePermission(DataRow Ro)
        {
            try
            {

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString());
                generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
                string now = System.DateTime.Now.ToString();
                string Accountname = generic.CreateNewAccount(driver, extentTest, testDataIteration, testName, Ro["CompanyName"].ToString() + now);
                //generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString());
                //generic.OpenContactGlobalSearch(driver, extentTest, testName, testDataIteration, Ro["CompanyName"].ToString());
                generic.DeleteAccount(driver, extentTest, testDataIteration, testName, Accountname);
                login.Logout(driver, extentTest, testName, testDataIteration);
            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }
        public static IEnumerable<object[]> RTA_5727()
        {
            foreach (DataRow row in getTestCaseList("EnterpriseSalesManager"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To verify whether sales Enterprise AccountManager Provided With Opportunity Entity Delete Permission
        /// </summary>

        [TestCategory("smoke"), TestCategory("Sales"), TestCategory("Agentissue"), TestCategory("21Oct"), TestCategory("0309"), TestCategory("RerunMay120"), TestCategory("QARefactorfail"), TestCategory("Rerun-25062020"), TestCategory("Sprint32NCS"), TestCategory("0309")]
        [TestProperty("TestcaseID", "RTA-5727")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5727), DynamicDataSourceType.Method)]
        public void RTA_5727_SalesEM_ContactDeletePermission(DataRow Ro)
        {
            //try
            //{
            string now = System.DateTime.Now.ToString();

            string NewLName = "LName" + now;
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["EntityContact"].ToString());
            generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
            generic.CreateNewContactEM(driver, extentTest, testDataIteration, testName, NewLName, Ro["TestContactLanguage"].ToString(), Ro["UserName"].ToString());
            generic.Deletecontact(driver, extentTest, testDataIteration, testName, NewLName);
            login.Logout(driver, extentTest, testName, testDataIteration);
            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}
        }
        public static IEnumerable<object[]> RTA_5726()
        {
            foreach (DataRow row in getTestCaseList("SalesEnterpriseDirector"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To verify whether sales Enterprise AccountManager Provided With Opportunity Entity Delete Permission
        /// </summary>

        [TestCategory("07Sep"), TestCategory("smoke"), TestCategory("0409"), TestCategory("Agentissue"), TestCategory("Validation1"), TestCategory("Sprint32NCS")]
        [TestProperty("TestcaseID", "RTA-5726")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5726), DynamicDataSourceType.Method)]
        public void RTA_5726_SalesED_ContactDeletePermission(DataRow Ro)
        {
            try
            {

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["EntityContact"].ToString());
                generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
                generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
                string now = System.DateTime.Now.ToString();
                generic.CreateNewContactEM(driver, extentTest, testDataIteration, testName, Ro["LastName"].ToString() + now, Ro["TestContactLanguage"].ToString(), Ro["UserName"].ToString());
                // generic.CreateNewContact(driver, extentTest, testDataIteration, testName, Ro["LastName"].ToString() + now, Ro["TestContactLanguage"].ToString(), Ro["UserName"].ToString());
                //generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["EntityContact"].ToString());
                //generic.OpenRecordGlobalSearch(driver, extentTest, testName, testDataIteration, Ro["LastName"].ToString());
                generic.Deletecontact(driver, extentTest, testDataIteration, testName, Ro["LastName"].ToString() + now);
                login.Logout(driver, extentTest, testName, testDataIteration);

            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }

        public static IEnumerable<object[]> RTA_5026()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        //To verify the centre list is restricted to requested City dairy area limit


        [TestCategory("RerunMay9"), TestCategory("Sales"), TestCategory("BookaTour"), TestCategory("Validation1"), TestCategory("RF24-4-20"), TestCategory("RerunMay120"), TestCategory("Rerun-15062020"), TestCategory("SprintUN")]
        [TestProperty("TestcaseID", "RTA-5026")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5026), DynamicDataSourceType.Method)]
        public void RTA_5026_verifythecentrelistrestrictedtoCityDiaryAreaLimit(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "All Opportunities");
                generic.CreateNewOpportunityBookATour(driver, extentTest, testName, testDataIteration, Ro["BussinessCentre2"].ToString());
                //generic.SearchforRecord(driver, extentTest, testName, testDataIteration, "Automation - Canada");
                //generic.SelectingActiveCell(driver, extentTest, testName, testDataIteration);
                string BusinessCentre = generic.RetriveTheRecommandedBusinessCentreValue(driver, extentTest, testName, testDataIteration);
                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Button"].ToString());
                generic.VerifyRecBusinessCentreAutoPopulatedInCenterOfBookTour(driver, extentTest, testName, testDataIteration, BusinessCentre);
                generic.closeBookTourPage(driver, extentTest, testName, testDataIteration);
                //generic.VerifyBusinessCentreList1(driver, extentTest, testName, testDataIteration);
                generic.Logout(driver, extentTest, testName, testDataIteration);
            }



            catch (Exception e)
            {
                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "The testcase failed due to the following error :  " + e, " ");
                Assert.Fail(e.Message);
            }
        }




        public static IEnumerable<object[]> RTA_5001()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        //To verify IWG SA is able to change city in the City Diary and see the associated multiple centres in the centre field


        [TestCategory("smoke"), TestCategory("Sales"), TestCategory("BookaTour"), TestCategory("Validation1"), TestCategory("RerunMay9"), TestCategory("RerunMay120"), TestCategory("Rerun-15062020"), TestCategory("SprintUN")]
        [TestProperty("TestcaseID", "RTA-5001")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5001), DynamicDataSourceType.Method)]
        public void RTA_5001_VerifyCityCentreListIWGAgent(DataRow Ro)
        {
            try
            {

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "All Opportunities");
                generic.CreateNewOpportunityBookATour(driver, extentTest, testName, testDataIteration, Ro["BussinessCentre2"].ToString());

                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Button"].ToString());
                generic.VerifyBookTourPage(driver, extentTest, testName, testDataIteration);
                generic.CityandcentreList1(driver, extentTest, testName, testDataIteration, Ro["City Diary"].ToString());
                login.Logout(driver, extentTest, testName, testDataIteration);
            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }

        public static IEnumerable<object[]> RTA_5033()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To verify whether Scheduling screen shows the time slot in left side
        /// </summary>

        [TestCategory("smoke"), TestCategory("Sales"), TestCategory("BookaTour"), TestCategory("RerunMay9"), TestCategory("2610"), TestCategory("RF24-4-20"), TestCategory("Rerun-14-05-2020"), TestCategory("Rerun-25062020_1"), TestCategory("SprintUN")]
        [TestProperty("TestcaseID", "RTA-5033")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5033), DynamicDataSourceType.Method)]
        public void RTA_5033_Schedulingscreendisplaystimeslot(DataRow Ro)
        {
            //try
            //{

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
            generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "Open Opportunities");
            string contactname = generic.CreateNewOpportunityBookATour(driver, extentTest, testName, testDataIteration, Ro["Centre"].ToString());

            //generic.SearchforRecord(driver, extentTest, testName, testDataIteration, "Airavatha - Norway");
            //generic.SelectingActiveCell(driver, extentTest, testName, testDataIteration);
            ThinkTime(5);
            generic.SelectanyOpportunitybutton1(driver, extentTest, testName, testDataIteration, Ro["Button"].ToString());

            ////generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "Open Opportunities");
            //    //string contactname = generic.CreateNewOpportunityBookATour(driver, extentTest, testName, testDataIteration, Ro["BussinessCentre2"].ToString());

            //    //generic.SearchforRecord(driver, extentTest, testName, testDataIteration, "Airavatha - Norway");
            //    //generic.SelectingActiveCell(driver, extentTest, testName, testDataIteration);
            //    ThinkTime(5);
            //    generic.SelectanyOpportunitybutton1(driver, extentTest, testName, testDataIteration, Ro["Button"].ToString());


            //    generic.VerifyBookTourPage(driver, extentTest, testName, testDataIteration);
            //    ////generic.VerifyCityDiaryandCentre(driver, extentTest, testName, testDataIteration, Ro["City Diary"].ToString(), Ro["Centre"].ToString());
            //   // generic.SelectingCityDiaryandCentre(driver, extentTest, testName, testDataIteration, Ro["MyCity"].ToString(), Ro["MyCentre"].ToString());

            //    generic.VerifyTimeSlotinBookTourPage(driver, extentTest, testName, testDataIteration);
            //    generic.closeBookTourPage(driver, extentTest, testName, testDataIteration);
            //    driver.Navigate().Refresh();
            //generic.HndleingBookTourTimeOut(driver, extentTest, testName, testDataIteration);
            login.Logout(driver, extentTest, testName, testDataIteration);
            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}
        }
        public static IEnumerable<object[]> RTA_5078()
        {
            foreach (DataRow row in getTestCaseList("ASM"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// Area Sales Manager can Reschedule the tour to another ASM
        /// </summary>

        [TestCategory("Smoke"), TestCategory("26Aug"), TestCategory("SprintUN")]
        [TestProperty("TestcaseID", "RTA-5078")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5078), DynamicDataSourceType.Method)]
        public void RTA_5078_ASMrescheduleTourToAnotherASM(DataRow Ro)
        {
            try
            {

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "Open Opportunities");
                try
                {
                    generic.SelectingActiveCell(driver, extentTest, testName, testDataIteration);
                    generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);
                    generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Button"].ToString());
                    generic.OpenExistingTour(driver, extentTest, testName, testDataIteration);
                    generic.VerifyTourDateAndTimeInTourPage(driver, extentTest, testName, testDataIteration);
                }
                catch (Exception e) { }
                login.Logout(driver, extentTest, testName, testDataIteration);
            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }

        public static IEnumerable<object[]> RTA_5057()
        {
            foreach (DataRow row in getTestCaseList("ASM"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// Area Sales Manager cannot be Reschedule the tour to another ASM for a past time  & date
        /// </summary>

        [TestCategory("smoke"), TestCategory("")]
        [TestProperty("TestcaseID", "RTA-5057")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5057), DynamicDataSourceType.Method)]
        public void RTA_5057_ASMrescheduleTourToAnotherASM(DataRow Ro)
        {
            try
            {

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "Open Opportunities");
                generic.SelectingActiveCell(driver, extentTest, testName, testDataIteration);
                generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);
                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Button"].ToString());
                generic.OpenExistingTour(driver, extentTest, testName, testDataIteration);
                generic.VerifyTourDateAndTimeInTourPage(driver, extentTest, testName, testDataIteration);
                login.Logout(driver, extentTest, testName, testDataIteration);
            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }

        public static IEnumerable<object[]> RTA_5055()
        {
            foreach (DataRow row in getTestCaseList("AreaDirector"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// Area Director is not able to change the ASM assigned on a tour
        /// </summary>

        [TestCategory("smoke"), TestCategory("")]
        [TestProperty("TestcaseID", "RTA-5055")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5055), DynamicDataSourceType.Method)]
        public void RTA_5055_AreaDirectorNotAbletoChangeASMassignedonatour(DataRow Ro)
        {
            try
            {

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);
                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "All Opportunities");
                string SearchOPP = generic.SearchExistingOppo(driver, extentTest, testName, testDataIteration, Ro["SearchOPP"].ToString());
                generic.SelectingActiveCell(driver, extentTest, testName, testDataIteration);
                generic.TablistSelection(driver, extentTest, testName, testDataIteration, "Related");
                generic.RelatedTab(driver, extentTest, testName, testDataIteration, "Tours");
                generic.OpenExistingTour(driver, extentTest, testName, testDataIteration);
                generic.RequiredAttendeesLocked(driver, extentTest, testName, testDataIteration);
                login.Logout(driver, extentTest, testName, testDataIteration);
            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }
        public static IEnumerable<object[]> RTA_6109()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// verify that task is created to approve tour doesn't works for IT Sales Opportunity
        /// </summary>

        [TestCategory("smoke"), TestCategory("")]
        [TestProperty("TestcaseID", "RTA-6109")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_6109), DynamicDataSourceType.Method)]
        public void RTA_6109_TaskisNotCreatedIntheOpportunityTypeEqualsITSale(DataRow Ro)
        {
            try
            {

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, "Leads");
                generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);
                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "All Opportunities");
                //string SearchOPP = generic.SearchExistingOppo(driver, extentTest, testName, testDataIteration, Ro["SearchOPP"].ToString());
                //generic.SelectingActiveCell(driver, extentTest, testName, testDataIteration);
                //generic.TablistSelection(driver, extentTest, testName, testDataIteration, "Related");
                //generic.RelatedTab(driver, extentTest, testName, testDataIteration, "Tours");
                //generic.OpenExistingTour(driver, extentTest, testName, testDataIteration);
                //generic.VerifyTourDateAndTimeInTourPage(driver, extentTest, testName, testDataIteration);

                login.Logout(driver, extentTest, testName, testDataIteration);
            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }
        public static IEnumerable<object[]> RTA_5039()
        {
            foreach (DataRow row in getTestCaseList("DirectSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// Area Sales Manager cannot be Reschedule the tour to another ASM for a past time  & date
        /// </summary>

        [TestCategory("smoke"), TestCategory("")]
        [TestProperty("TestcaseID", "RTA-5039")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5039), DynamicDataSourceType.Method)]
        public void RTA_5039_DirectSalesAgentsReassignASMintoSameDaySlots(DataRow Ro)
        {
            try
            {

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "Open Opportunities");
                generic.SelectingActiveCell(driver, extentTest, testName, testDataIteration);
                generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);
                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Button"].ToString());
                generic.RelatedTab(driver, extentTest, testName, testDataIteration, "Tours");
                generic.OpenExistingTour(driver, extentTest, testName, testDataIteration);
                generic.VerifyTourDateAndTimeInTourPage(driver, extentTest, testName, testDataIteration);
                login.Logout(driver, extentTest, testName, testDataIteration);
            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }


        public static IEnumerable<object[]> RTA_5077()
        {
            foreach (DataRow row in getTestCaseList("AreaDirector"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// Area director is able to update the tour ranking of an Area sales manager in a specific centre
        /// </summary>

        [TestCategory("smoke"), TestCategory("")]
        [TestProperty("TestcaseID", "RTA-5077")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5077), DynamicDataSourceType.Method)]
        public void RTA_5077_AreaDirectorUpdateTourRankingOFareaSalesManagerCentre(DataRow Ro)
        {
            try
            {

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);
                generic.AdvancedFind(driver, extentTest, testName, testDataIteration);
                generic.BookableResourceCharacvtersticsAdvancedFind(driver, extentTest, testName, testDataIteration, Ro["Looksfor"].ToString());
                generic.OpenRecordFromAdavncedFindResultPage(driver, extentTest, testName, testDataIteration);
                generic.AddingNewBookableResourceCharacvterstics(driver, extentTest, testName, testDataIteration);
                generic.NewBookableResourceCharacteristicLocation(driver, extentTest, testName, testDataIteration, Ro["ResourceCharacteristics"].ToString(), Ro["ResourceLocation"].ToString(), Ro["RatingValue"].ToString(), Ro["ResourceValue"].ToString(), Ro["Caracteristics"].ToString());
                generic.OpenRecordFromAdavncedFindResultPage(driver, extentTest, testName, testDataIteration);
                generic.VerifyTourRanks(driver, extentTest, testName, testDataIteration);
                login.Logout(driver, extentTest, testName, testDataIteration);
            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }

        public static IEnumerable<object[]> RTA_5009()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// tour booked through the scheduling screen generates an tour against the originating Opportunity
        /// </summary>

        [TestCategory("smoke"), TestCategory("")]
        [TestProperty("TestcaseID", "RTA-5009")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5009), DynamicDataSourceType.Method)]
        public void RTA_5009_SchedulingScreenGneratesTourForOrginatingOpportunity(DataRow Ro)
        {
            try
            {

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);
                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "Open Opportunities");
                string SearchOPP = generic.SearchExistingOppo(driver, extentTest, testName, testDataIteration, Ro["SearchOPP"].ToString());
                generic.SelectingActiveCell(driver, extentTest, testName, testDataIteration);
                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Button"].ToString());
                generic.BookaTour(driver, extentTest, testName, testDataIteration);
                //driver.SwitchTo().Window(driver.WindowHandles[0]);
                generic.VerifyTourActivitiesDetails(driver, extentTest, testName, testDataIteration);
                login.Logout(driver, extentTest, testName, testDataIteration);
            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }
        public static IEnumerable<object[]> RTA_5004()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesDirector"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// Sales Director can configure the duration of tour default duration of 90 minutes is not applicable for a specific city
        /// </summary>

        [TestCategory("smoke"), TestCategory("")]
        [TestProperty("TestcaseID", "RTA-5004")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5004), DynamicDataSourceType.Method)]
        public void RTA_5004_AreaDirectorNotAbletoChangeASMassignedonatour(DataRow Ro)
        {
            try
            {

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);
                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "All Opportunities");
                string SearchOPP = generic.SearchExistingOppo(driver, extentTest, testName, testDataIteration, Ro["SearchOPP"].ToString());
                generic.SelectingActiveCell(driver, extentTest, testName, testDataIteration);
                generic.TablistSelection(driver, extentTest, testName, testDataIteration, "Related");
                generic.RelatedTab(driver, extentTest, testName, testDataIteration, "Tours");
                generic.OpenExistingTour(driver, extentTest, testName, testDataIteration);
                generic.VerifyTourDateAndTimeInTourPage(driver, extentTest, testName, testDataIteration);

                login.Logout(driver, extentTest, testName, testDataIteration);
            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }

        public static IEnumerable<object[]> RTA_5820()
        {
            foreach (DataRow row in getTestCaseList("SalesEnterpriseAccountManager"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To verify whether the Sales Account Enterprise Manager doesn't have the permission to delete other users opportunity record.
        /// SEAM=sales Enterprise account manager
        /// </summary>
        [TestCategory("smoke"), TestCategory("Validation1"), TestCategory("Agentissue"), TestCategory("SprintUN"), TestCategory("CreateOppEnt")]
        [TestProperty("TestcaseID", "RTA-5820")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5820), DynamicDataSourceType.Method)]
        public void RTA_5820_SEAMdoesnthaveThePermissionTodeleteOtherUsersOpportunityRecord(DataRow Ro)
        {
            //try
            //{
                login.Login(driver, extentTest, testName, testDataIteration, ESTuRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                //generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                string now = System.DateTime.Now.ToString();
                generic.CreateNewOpportunityEntetrprise(driver, extentTest, testDataIteration, testName, Ro["TestOpportunityAccountName"].ToString(), now, Ro["TestCountry"].ToString(), Ro["TestCurrency"].ToString(), Ro["TestChannel"].ToString(), Ro["TestMajorSource"].ToString(), Ro["TestMinorSource"].ToString(), Ro["TestNewContact"].ToString());
                generic.DeleteAccessOpp1(driver, extentTest, testDataIteration, testName);
                generic.HidingPureCloud1(driver, extentTest, testName, testDataIteration);

                generic.Logout(driver, extentTest, testName, testDataIteration);
            //}


            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}
        }

        public static IEnumerable<object[]> RTA_5811()
        {
            foreach (DataRow row in getTestCaseList("SalesEnterpriseDirector"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To verify whether the Sales Enterprise Director doesn't have the permission to delete other users opportunity record
        /// SEAM=sales Enterprise Director
        /// </summary>
        [TestCategory("RerunMay9"), TestCategory("Validation1"), TestCategory("Agentissue"), TestCategory("Sprint32NCS"), TestCategory("27Aug")]
        [TestProperty("TestcaseID", "RTA-5811")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5811), DynamicDataSourceType.Method)]
        public void RTA_5811_SEDdoesnthavePermissionTodelOthUsersOppoRecord(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                //generic.RecordGlobalSearchopportunity(driver, extentTest, testName, testDataIteration, Ro["Otheruser"].ToString());
                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "Open Enterprise Opportunities");
                generic.SelectingActiveCell(driver, extentTest, testName, testDataIteration);

                generic.DeleteAccessOpp(driver, extentTest, testDataIteration, testName);

                login.Logout(driver, extentTest, testName, testDataIteration);
            }


            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }
        public static IEnumerable<object[]> RTA_5338()
        {
            foreach (DataRow row in getTestCaseList("ITSalesManager"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// dynamics 365 will create an phone call activity record after centre user submitting the filled IT Sales Services form        
        /// </summary>
        [TestCategory("smoke"), TestCategory("25Nov"), TestCategory("Agentissue"), TestCategory("RerunMay9"), TestCategory("Gokul"), TestCategory("Sprint32NCS")]
        [TestProperty("TestcaseID", "RTA-5338")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5338), DynamicDataSourceType.Method)]
        public void RTA_5338_PhoneCallActCreatUsingITSalesForm(DataRow Ro)
        {
            //try
            //{
            generic.LaunchITSalesForm(driver, extentTest, testName, testDataIteration);
            string time = System.DateTime.Now.ToString();
            generic.SubmitingITSalesForm(driver, extentTest, testDataIteration, testName, Ro["CompanyName"].ToString(), Ro["CustomerTitanid"].ToString(), Ro["CustomerCont"].ToString(), Ro["PersonEmail"].ToString(), Ro["ContPersonPhno"].ToString(), Ro["CentreCode"].ToString(), Ro["AdditionalFeedback"].ToString(), Ro["AddEmail"].ToString(), time);
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, "Dashboards");
            generic.DashBordListSelection(driver, extentTest, testName, testDataIteration, "IT Sales Support User");
            generic.OpenUnassignedITSalesOpportunities(driver, extentTest, testName, testDataIteration);
            generic.OpportunityIsCreatedInDyanamicsFromITSalesForm(driver, extentTest, testName, testDataIteration, Ro["CompanyName"].ToString(), Ro["CustomerTitanid"].ToString(), Ro["CustomerCont"].ToString(), Ro["PersonEmail"].ToString(), Ro["ContPersonPhno"].ToString(), Ro["CentreCode"].ToString(), Ro["AddEmail"].ToString());
            generic.TablistSelection(driver, extentTest, testName, testDataIteration, "Activities");
            generic.VerifyPhoneCallActivityFromActivitiesTab(driver, extentTest, testName, testDataIteration);
            login.Logout(driver, extentTest, testName, testDataIteration);
            //}


            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}
        }
        public static IEnumerable<object[]> RTA_5336()
        {
            foreach (DataRow row in getTestCaseList("ITSalesManager"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// dynamics 365 will create an opportunity record after centre user submitting the filled IT Sales Services form        
        /// </summary>
        [TestCategory("RerunMay9"), TestCategory("25Nov"), TestCategory("Gokul"), TestCategory("Sprint32NCS")]
        [TestProperty("TestcaseID", "RTA-5336")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5336), DynamicDataSourceType.Method)]
        public void RTA_5336_OpportunityCreationInDynamicsUsingITSalesForm(DataRow Ro)
        {
            try
            {
                generic.LaunchITSalesForm(driver, extentTest, testName, testDataIteration);
                string time = System.DateTime.Now.ToString();
                string MSFormVerification = generic.SubmitingITSalesForm(driver, extentTest, testDataIteration, testName, Ro["CompanyName"].ToString(), Ro["CustomerTitanid"].ToString(), Ro["CustomerCont"].ToString(), Ro["PersonEmail"].ToString(), Ro["ContPersonPhno"].ToString(), Ro["CentreCode"].ToString(), Ro["AdditionalFeedback"].ToString(), Ro["AddEmail"].ToString(), time);
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, "Dashboards");
                generic.DashBordListSelection(driver, extentTest, testName, testDataIteration, "IT Sales Manager");
                generic.SelectOpenITSalesOpportunities(driver, extentTest, testName, testDataIteration, MSFormVerification);
                //   generic.OpportunityIsCreatedInDyanamicsFromITSalesForm(driver, extentTest, testName, testDataIteration, Ro["CompanyName"].ToString(), Ro["CustomerTitanid"].ToString(), Ro["CustomerCont"].ToString(), Ro["PersonEmail"].ToString(), Ro["ContPersonPhno"].ToString(), Ro["CentreCode"].ToString(), Ro["AddEmail"].ToString());
                login.Logout(driver, extentTest, testName, testDataIteration);
            }


            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");


            }
        }
        public static IEnumerable<object[]> RTA_5316()
        {
            foreach (DataRow row in getTestCaseList("ITSalesManager"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To verify that the user  will be able to cancel the scheduled call if if a response is obtained through e-mail
        /// </summary>
        [TestCategory("smoke"), TestCategory("25Nov1"), TestCategory("Agentissue"), TestCategory("RF24-4-20"), TestCategory("RerunMay9"), TestCategory("QARefactorfail"), TestCategory("Sprint32NCS")]
        [TestProperty("TestcaseID", "RTA-5316")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5316), DynamicDataSourceType.Method)]
        public void RTA_5316_Schedulecallcancelverification(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "Open IT Sales opportunities");
                generic.SelectingActiveCell(driver, extentTest, testName, testDataIteration);

                generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, Ro["Tab"].ToString());
                string[] s = generic.CreateandVerifyPhoneCall1(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString(), Ro["Button"].ToString(), Ro["Activity"].ToString(), Ro["Call To"].ToString(), Ro["Quick Create Form Button"].ToString(), Ro["Call Outcome1"].ToString(), Ro["Action"].ToString());
                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["CancelButtonPhoneCall"].ToString());
                generic.Phonecallcancel(driver, extentTest, testDataIteration, testName, Ro["Close"].ToString(), Ro["Status"].ToString());
                generic.VerifyPhoneCallActivityisReadOnlyOnMarkComplete(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString(), s[0]);
                login.Logout(driver, extentTest, testName, testDataIteration);
            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }
        public static IEnumerable<object[]> RTA_5314()
        {
            foreach (DataRow row in getTestCaseList("ITSalesManager"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To verify that the system will schedule a new phone call 24h ahead with customer if phone call outcome is "Not reachable/ Left Voicemail"
        /// </summary>
        [TestCategory("smoke"), TestCategory("1410"), TestCategory("25Nov1"), TestCategory("RF24-4-20"), TestCategory("RerunMay9"), TestCategory("QARefactorfail"), TestCategory("Rerun-25062020"), TestCategory("Sprint32NCS")]
        [TestProperty("TestcaseID", "RTA-5314")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5314), DynamicDataSourceType.Method)]
        public void RTA_5314_Phonecallscheduledurationifnotreachable(DataRow Ro)
        {
            //try
            //{
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, "Opportunities");
            generic.CreateNewOppITSalesWithData(driver, extentTest, testName, testDataIteration, "TestLNameEmail");
            string newdate = DateTime.Today.ToString("MM/dd/yyyy").Replace("-", "/");
            //generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "Open IT Sales opportunities");
            //generic.SelectingActiveCell(driver, extentTest, testName, testDataIteration);

            generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, Ro["Tab"].ToString());
            generic.SelectActivities1(driver, extentTest, testName, testDataIteration);
            string TimeInSec = generic.GetSystemTimeInSecnew(driver, extentTest, testDataIteration, testName);
            generic.NewActivity(driver, extentTest, testName, testDataIteration);
            String Account = generic.QuickCreatePhoneCallActivityFromOppo(driver, extentTest, testDataIteration, testName, Ro["SubjectValue"].ToString(), newdate);
            //string[] s = generic.CreateandVerifyPhoneCall(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString(), Ro["Button"].ToString(), Ro["Activity"].ToString(), Ro["Call To"].ToString(), Ro["QuickCreateactivitybutton"].ToString(), Ro["Call Outcome3"].ToString(), Ro["Action"].ToString());
            //generic.SelectActivitiesType(driver, extentTest, testName, testDataIteration);
            ////generic.FilterActivities(driver, extentTest, testName, testDataIteration);
            //generic.OpenActiveActivity(driver, extentTest, testName, testDataIteration);
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, "Activities");
            //string Activityname = s[0];
            generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "IT Sales Phone Calls");
            generic.OpenRecordGlobalSearch(driver, extentTest, testDataIteration, testName, Account);

            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["ClosePhoneCal"].ToString());
            generic.Phonecallcancel1(driver, extentTest, testDataIteration, testName, Ro["Close"].ToString(), Ro["Status"].ToString());
            //generic.Phonecalldurationverify(driver, extentTest, testDataIteration, testName, "Activities");

            // generic.VerifyPhoneCallActivityisReadOnlyOnMarkComplete(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString(), s[0]);
            login.Logout(driver, extentTest, testName, testDataIteration);
            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}
        }




        public static IEnumerable<object[]> RTA_5335()
        {
            foreach (DataRow row in getTestCaseList("ITSalesManager"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// able to submit IT Sales Services form to create opportunity in Dynamics   
        /// </summary>
        [TestCategory("smoke"), TestCategory("25Nov"), TestCategory("Agentissue"), TestCategory("Gokul"), TestCategory("RerunMay120"), TestCategory("Sprint32NCS")]
        [TestProperty("TestcaseID", "RTA-5335")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5335), DynamicDataSourceType.Method)]
        public void RTA_5335_VerifyOppoCreatUsingITSalesForm(DataRow Ro)
        {
            try
            {
                generic.LaunchITSalesForm(driver, extentTest, testName, testDataIteration);
                string time = System.DateTime.Now.ToString();
                string MSFormVerification = generic.SubmitingITSalesForm(driver, extentTest, testDataIteration, testName, Ro["CompanyName"].ToString(), Ro["CustomerTitanid"].ToString(), Ro["CustomerCont"].ToString(), Ro["PersonEmail"].ToString(), Ro["ContPersonPhno"].ToString(), Ro["CentreCode"].ToString(), Ro["AdditionalFeedback"].ToString(), Ro["AddEmail"].ToString(), time);
                Console.WriteLine(MSFormVerification);
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, "Dashboards");
                generic.DashBordListSelection(driver, extentTest, testName, testDataIteration, "IT Sales Manager");

                generic.SelectOpenITSalesOpportunities(driver, extentTest, testName, testDataIteration, MSFormVerification);
                generic.Logout(driver, extentTest, testName, testDataIteration);
            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }
        public static IEnumerable<object[]> RTA_4982()
        {
            foreach (DataRow row in getTestCaseList("AreaDirector"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// Area Director can Drag and Drop the tour for same time slot between ASMs   
        /// </summary>
        [TestCategory("smoke"), TestCategory("")]
        [TestProperty("TestcaseID", "RTA-4982")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_4982), DynamicDataSourceType.Method)]
        public void RTA_4982_AreaDirectorDragAndDropTourForSameTimeSlots(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, "Dashboards");
                generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);
                generic.SelectValuesFromDashboardDropDown(driver, extentTest, testName, testDataIteration, Ro["Role"].ToString());
                generic.OpenCalanderFromTourManagement(driver, extentTest, testName, testDataIteration);
                generic.SelectingCityDairyFromBTCalander(driver, extentTest, testName, testDataIteration, Ro["citydiary"].ToString());
                generic.DragAndDrop(driver, extentTest, testName, testDataIteration);

                driver.Close();
                generic.Logout(driver, extentTest, testName, testDataIteration);
            }


            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }
        public static IEnumerable<object[]> RTA_16712()
        {
            foreach (DataRow row in getTestCaseList("AreaDirector"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// CRM-3815
        /// Area Director can view the dashboard sections   
        /// </summary>
        [TestCategory("GlobalP11"), TestCategory("0911"), TestCategory("CRM-3815")]
        [TestProperty("TestcaseID", "RTA-16712")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_16712), DynamicDataSourceType.Method)]
        public void RTA_16712_AreaDirectorabletoviewdashboards(DataRow Ro)
        {
            //try
            //{
            // Loginas Area Director
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());

            // Select Dashboards
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, "Dashboards");
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);


            // Choose Country Metrics
            generic.SelectValuesFromDashboardDropDown(driver, extentTest, testName, testDataIteration, Ro["Role1"].ToString());

            // Verify the Dashboard headers
            generic.DBVerification(driver, extentTest, testName, testDataIteration);
            //generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);
            // Select dashboard
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, "Dashboards");

            generic.SelectValuesFromDashboardDropDown(driver, extentTest, testName, testDataIteration, Ro["Role1"].ToString());
            //generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);
            // Verify column headers for Qualified Opps this month
            generic.QualifiedOppsthismonth(driver, extentTest, testName, testDataIteration);

            // Verify column headers for Qualified Opps last month
            generic.QualifiedOppslastmonth(driver, extentTest, testName, testDataIteration);

            // Select Dashboard
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, "Dashboards");

            generic.SelectValuesFromDashboardDropDown(driver, extentTest, testName, testDataIteration, Ro["Role1"].ToString());
            // generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);
            //Verify column headers for Tours Booked this month
            generic.Toursbookedthismonth(driver, extentTest, testName, testDataIteration);

            //Verify column headers for Tours Booked last month
            generic.Toursbookedlastmonth(driver, extentTest, testName, testDataIteration);

            // Select Dashboard
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, "Dashboards");

            generic.SelectValuesFromDashboardDropDown(driver, extentTest, testName, testDataIteration, Ro["Role1"].ToString());
            // generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);
            generic.scrollMiddleDown(driver, extentTest, testName, testDataIteration);

            //Verify column headers for Tours Completed this month
            generic.Tourscompletedthismonth(driver, extentTest, testName, testDataIteration);

            //Verify column headers for Tours Completed last month
            generic.Tourscompletedlastmonth(driver, extentTest, testName, testDataIteration);

            // Select Dashboard
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, "Dashboards");

            generic.SelectValuesFromDashboardDropDown(driver, extentTest, testName, testDataIteration, Ro["Role1"].ToString());
            //  generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);
            generic.scrollMiddleDown(driver, extentTest, testName, testDataIteration);


            //Verify column headers for Deals not won
            generic.Dealsnotwon(driver, extentTest, testName, testDataIteration);

            // Select Dashboard
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, "Dashboards");
            generic.SelectValuesFromDashboardDropDown(driver, extentTest, testName, testDataIteration, Ro["Role1"].ToString());
            //  generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);
            generic.scrollDownDashboard(driver, extentTest, testName, testDataIteration);

            // Verify column headers for Deals won this month
            generic.Dealswonthismonth(driver, extentTest, testName, testDataIteration);

            // Verify column headers for Deals won last month
            generic.Dealswonlastmonth(driver, extentTest, testName, testDataIteration);

            // Logout 
            generic.Logout(driver, extentTest, testName, testDataIteration);
            //}


            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}
        }

        public static IEnumerable<object[]> RTA_15884()
        {
            foreach (DataRow row in getTestCaseList("AreaDirector"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// Area Director can view the dashboard sections   by filtering owner +centre
        /// CRM-3815
        /// </summary>
        [TestCategory("GlobalP11"), TestCategory("Validation1"), TestCategory("CRM-3815"), TestCategory("0911")]
        [TestProperty("TestcaseID", "RTA-15884")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_15884), DynamicDataSourceType.Method)]
        public void RTA_15884_AreaDirectorabletofilterbylocationandcity(DataRow Ro)
        {
            //try
            //{
            // Loginas Area Director
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());

            // Select Dashboards
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, "Dashboards");
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
            // Choose Country Metrics
            generic.SelectValuesFromDashboardDropDown(driver, extentTest, testName, testDataIteration, Ro["Role1"].ToString());

            //Verify column headers for Tours Booked this month
            generic.Toursbookedthismonthfilterby(driver, extentTest, testName, testDataIteration, "CRM Test3");

            // Logout 
            generic.Logout(driver, extentTest, testName, testDataIteration);
            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}
        }












        public static IEnumerable<object[]> RTA_4983()
        {
            foreach (DataRow row in getTestCaseList("AreaDirector"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// Area Director can Drag and Drop the tour for same time slot between ASMs from different centre   
        /// </summary>
        [TestCategory("smoke"), TestCategory("")]
        [TestProperty("TestcaseID", "RTA-4983")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_4983), DynamicDataSourceType.Method)]
        public void RTA_4983_AreaDirectorDragAndDropTourForSameTimeSlotsDiffCnetre(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, "Dashboards");
                generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);
                generic.SelectValuesFromDashboardDropDown(driver, extentTest, testName, testDataIteration, Ro["Role"].ToString());
                generic.OpenCalanderFromTourManagement(driver, extentTest, testName, testDataIteration);
                generic.SelectingCityDairyFromBTCalander(driver, extentTest, testName, testDataIteration, Ro["citydiary"].ToString());
                generic.SelectingCentreFromBTCalander(driver, extentTest, testName, testDataIteration, Ro["SelectCentre"].ToString());
                generic.DragAndDrop(driver, extentTest, testName, testDataIteration);
                generic.NotAllowedMessageFordragAndDropTour(driver, extentTest, testName, testDataIteration);
                driver.Close();
                generic.Logout(driver, extentTest, testName, testDataIteration);
            }


            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }
        public static IEnumerable<object[]> RTA_4981()
        {
            foreach (DataRow row in getTestCaseList("AreaDirector"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// an error message when Area Director drag and drop the tour into different time slot between ASM   
        /// </summary>
        [TestCategory("smoke"), TestCategory("")]
        [TestProperty("TestcaseID", "RTA-4981")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_4981), DynamicDataSourceType.Method)]
        public void RTA_4981_AreaDirectorDragAndDropTourForSameTimeSlotsBetweenASM(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, "Dashboards");
                generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);
                generic.SelectValuesFromDashboardDropDown(driver, extentTest, testName, testDataIteration, Ro["Role"].ToString());
                generic.OpenCalanderFromTourManagement(driver, extentTest, testName, testDataIteration);
                generic.SelectingCityDairyFromBTCalander(driver, extentTest, testName, testDataIteration, Ro["citydiary"].ToString());
                generic.DragAndDropDifferentTimeSlots(driver, extentTest, testName, testDataIteration);
                generic.NotAllowedMessageFordragAndDropTour(driver, extentTest, testName, testDataIteration);
                driver.Close();
                generic.Logout(driver, extentTest, testName, testDataIteration);
            }


            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }
        public static IEnumerable<object[]> RTA_5066()
        {
            foreach (DataRow row in getTestCaseList("AreaDirector"))
            {
                yield return new object[] { row };
            }
        }

        /// <summary>
        /// AD is able to drag and drop a tour to another ASM	  
        /// </summary>
        [TestCategory("smoke"), TestCategory("")]
        [TestProperty("TestcaseID", "RTA-5066")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5066), DynamicDataSourceType.Method)]
        public void RTA_5066_AreaDirectorDragAndDropTourToAnotherASM(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, "Dashboards");
                generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);
                generic.SelectValuesFromDashboardDropDown(driver, extentTest, testName, testDataIteration, Ro["Role"].ToString());
                generic.OpenCalanderFromTourManagement(driver, extentTest, testName, testDataIteration);
                generic.SelectingCityDairyFromBTCalander(driver, extentTest, testName, testDataIteration, Ro["citydiary"].ToString());
                generic.SelectingCityDairyFromBTCalander(driver, extentTest, testName, testDataIteration, Ro["SelectCentre"].ToString());
                generic.DragAndDrop(driver, extentTest, testName, testDataIteration);
                generic.NotAllowedMessageFordragAndDropTour(driver, extentTest, testName, testDataIteration);
                //driver.Close();
                generic.Logout(driver, extentTest, testName, testDataIteration);
            }


            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }
        public static IEnumerable<object[]> RTA_5068()
        {
            foreach (DataRow row in getTestCaseList("AreaDirector"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// error message when Area Director drag and drop the tour into different time slot between ASM  
        /// </summary>
        [TestCategory("smoke"), TestCategory("Validation1"), TestCategory("Agentissue"), TestCategory("RerunMay9"), TestCategory("RerunMay120"), TestCategory("Rerun-06062020"), TestCategory("Rerun-15062020"), TestCategory("Rerun-25062020_1"), TestCategory("TestLock1"), TestCategory("SprintUN")]
        [TestProperty("TestcaseID", "RTA-5068")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5068), DynamicDataSourceType.Method)]
        public void RTA_5068_ErrMsgWhnAreaDrDragDropTourDiffTimeSlots(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName1"].ToString(), Ro["Password1"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                //generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "Open Opportunities");
                //generic.SelectingActiveCell(driver, extentTest, testName, testDataIteration);
                generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
                generic.CreateNewOpportunityBookATour(driver, extentTest, testName, testDataIteration, Ro["BussinessCentre2"].ToString());
                //generic.UpdateStartDate(driver, extentTest, testDataIteration, testName, Ro["SelectMonthFeb"].ToString(), Ro["SelectDateFeb"].ToString());
                try
                {
                    generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Button"].ToString());
                    generic.CreateATourAtTwoThirty3(driver, extentTest, testName, testDataIteration);
                    //generic.CreateATourAtTwoThirty4(driver, extentTest, testName, testDataIteration);
                    generic.Logout(driver, extentTest, testName, testDataIteration);

                    login.Loginafterlogout(driver, extentTest, testName, testDataIteration, Ro["UserName"].ToString(), Ro["Password"].ToString());
                    generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                    generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, "Dashboards");
                    generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
                    generic.SelectValuesFromDashboardDropDown(driver, extentTest, testName, testDataIteration, Ro["Role"].ToString());
                    generic.OpenCalanderFromTourManagement(driver, extentTest, testName, testDataIteration);

                    generic.SelectingCityDairyFromBTCalander(driver, extentTest, testName, testDataIteration, Ro["citydiary"].ToString());
                    generic.SelectingCentreFromBTCalander(driver, extentTest, testName, testDataIteration, Ro["SelectCentre"].ToString());
                    generic.ForwardTheTourPage(driver, extentTest, testName, testDataIteration);
                    generic.DragAndDropToUnAvailableASM(driver, extentTest, testName, testDataIteration);
                    generic.ErrorMessageForOutOfficeASM(driver, extentTest, testName, testDataIteration);
                    driver.Close();

                    generic.Logout(driver, extentTest, testName, testDataIteration);
                }
                catch (Exception e)
                { }
            }


            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }
        public static IEnumerable<object[]> RTA_5562()
        {
            foreach (DataRow row in getTestCaseList("ITSalesManager"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// appropriate columns are displayed in 'My IT Sales Opportunities to Follow Up' list in 'IT Sales User Dashboard'
        /// /// </summary>
        [TestCategory("smoke"), TestCategory("Validation1"), TestCategory("Agentissue"), TestCategory("TestLock1"), TestCategory("Sprint32NCS")]
        [TestProperty("TestcaseID", "RTA-5562")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5562), DynamicDataSourceType.Method)]
        public void RTA_5562_MyITSalesOpportunitiesToFollowUpColumns(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity0"].ToString());
                //generic.SelectValuesFromDashboardDropDown(driver, extentTest, testName, testDataIteration, "IT Sales Manager", "Dashboard");
                //generic.SelectValuesFromSalesOpportunity(driver, extentTest, testName, testDataIteration, "New IT Sales Opportunities");
                generic.Logout(driver, extentTest, testName, testDataIteration);

            }

            catch (Exception e)
            {
                AddLog(driver, extentTest, testName, testDataIteration, "Info", "Failed due to" + e.Message, "Test Failed"); AddLog(driver, extentTest, testName, testDataIteration, "Info", "Failed due to" + e.Message, "Test Failed"); Type thisType = this.GetType(); object testCall = this; ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");


            }
        }

        /// <summary>
        /// To verify whether IWG SA is able to change city in the City Diary and select the associated centre
        /// </summary>
        /// 


        public static IEnumerable<object[]> RTA_5000()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        [TestCategory("smoke"), TestCategory("Sales"), TestCategory("Agentissue"), TestCategory("Validation1"), TestCategory("RerunMay9"), TestCategory("RF24-4-20"), TestCategory("RerunMay120"), TestCategory("Rerun-06062020"), TestCategory("Rerun-25062020_1"), TestCategory("TestLock1"), TestCategory("SprintUN")]
        [TestProperty("TestcaseID", "RTA-5000")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5000), DynamicDataSourceType.Method)]
        public void RTA_5000_VerifyCityCentreIWGAgent(DataRow Ro)
        {
            try
            {

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                //generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "Open Opportunities");
                //generic.SelectingActiveCell(driver, extentTest, testName, testDataIteration);
                generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
                //generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "All Opportunities");
                //generic.SearchforRecord(driver, extentTest, testName, testDataIteration, "Automation - Canada");
                //generic.SelectingActiveCell(driver, extentTest, testName, testDataIteration);
                string contactname = generic.CreateNewOpportunityBookATour(driver, extentTest, testName, testDataIteration, Ro["BussinessCentre1"].ToString());

                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Button"].ToString());
                // generic.VerifyBookTourPage(driver, extentTest, testName, testDataIteration);
                generic.VerifyCityDiaryandCentreRTA5000(driver, extentTest, testName, testDataIteration, Ro["City Diary"].ToString(), Ro["Centre"].ToString());
                ThinkTime(5);
                //generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
                login.Logout(driver, extentTest, testName, testDataIteration);
            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }
        public static IEnumerable<object[]> RTA_15642()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// CRM3521
        /// To verify whether User is able to view Activity db
        /// </summary>

        [TestCategory("25Sep2020"), TestCategory("25Nov"), TestCategory("CRM-3521"), TestCategory("Sales"), TestCategory("GlobalP11"), TestCategory("Validation1"), TestCategory("GlobalP11A"), TestCategory("08Sep"), TestCategory("0309"), TestCategory("28Sep2020")]
        [TestProperty("TestcaseID", "RTA-15642")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_15642), DynamicDataSourceType.Method)]
        public void RTA_15642_VerifyIWGAgentActivitydashboard(DataRow Ro)
        {
            //try
            //{

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());

            //Select Dashboards
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity5"].ToString());
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);

            //Select IWG Direct Agent Activity dashboard
            generic.SelectValuesFromDashboardDropDown(driver, extentTest, testName, testDataIteration, "IWG Direct Agent Activity dashboard");

            //Verify db headers for Activities
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Tab"].ToString());
            generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);

            generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "My Open Activities");
            generic.DashActivitiscolumns(driver, extentTest, testName, testDataIteration);

            generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "My Teams Open Activities");
            generic.DashActivitiscolumns(driver, extentTest, testName, testDataIteration);

            // Select Dashboards
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity5"].ToString());

            // Select IWG Direct Agent Activity dashboard
            generic.SelectValuesFromDashboardDropDown(driver, extentTest, testName, testDataIteration, "IWG Direct Agent Activity dashboard");
            //generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);

            // Verify db headers for open leads
            generic.DashOpenleadscolumns(driver, extentTest, testName, testDataIteration);

            // Select Dashboards
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity5"].ToString());
            // generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);

            // Select IWG Direct Agent Activity dashboard
            generic.SelectValuesFromDashboardDropDown(driver, extentTest, testName, testDataIteration, "IWG Direct Agent Activity dashboard");
            generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);

            // Verify db headers for callback
            generic.Dashcallbackcolumns(driver, extentTest, testName, testDataIteration);

            // Select Dashboards
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity5"].ToString());

            // Select IWG Direct Agent Activity dashboard
            generic.SelectValuesFromDashboardDropDown(driver, extentTest, testName, testDataIteration, "IWG Direct Agent Activity dashboard");
            generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);

            // Scrolldown dashboard
            generic.scrollDownDashboard(driver, extentTest, testName, testDataIteration);

            // Verify db headers for My Opps
            generic.DashOppcolumns(driver, extentTest, testName, testDataIteration);

            login.Logout(driver, extentTest, testName, testDataIteration);
            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}
        }
        public static IEnumerable<object[]> RTA_15651()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// CRM3521
        /// To verify whether user able to view Performance db
        /// </summary>

        [TestCategory("CRM3521"), TestCategory("Sales"), TestCategory("GlobalP11"), TestCategory("Validation1"), TestCategory("14082020"), TestCategory("TestLock1")]
        [TestProperty("TestcaseID", "RTA-15651")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_15651), DynamicDataSourceType.Method)]
        public void RTA_15651_VerifyIWGAgentPerformancedashboard(DataRow Ro)
        {
            //try
            //{

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());

            // Select Dashboards
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity5"].ToString());
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);

            // Select IWG Direct Agent Performance dashboard
            generic.SelectValuesFromDashboardDropDown(driver, extentTest, testName, testDataIteration, "IWG Direct Agent Performance dashboard");
            generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);

            // Verify My Tours
            generic.DashMyTours(driver, extentTest, testName, testDataIteration);

            // Select Dashboards
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity5"].ToString());

            // Select IWG Direct Agent Activity dashboard
            generic.SelectValuesFromDashboardDropDown(driver, extentTest, testName, testDataIteration, "IWG Direct Agent Performance dashboard");
            generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);

            // Verify db headers for My Opps
            generic.DashMyOpps(driver, extentTest, testName, testDataIteration);

            // Select Dashboards
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity5"].ToString());
            //generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);

            // Select IWG Direct Agent Activity dashboard
            generic.SelectValuesFromDashboardDropDown(driver, extentTest, testName, testDataIteration, "IWG Direct Agent Performance dashboard");
            generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);

            // Verify db headers for Booked Tour
            generic.DashBookedTour(driver, extentTest, testName, testDataIteration);

            // Verify db headers for Booked Tour last month
            generic.DashBookedTourlastmonth(driver, extentTest, testName, testDataIteration);

            // Select Dashboards
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity5"].ToString());

            // Select IWG Direct Agent Activity dashboard
            generic.SelectValuesFromDashboardDropDown(driver, extentTest, testName, testDataIteration, "IWG Direct Agent Performance dashboard");
            generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);

            // Scrolldown dashboard
            generic.scrollMiddleDashboard(driver, extentTest, testName, testDataIteration, "Scroll");

            //// Verify db headers for My Opps
            //generic.Dashcompletedtour(driver, extentTest, testName, testDataIteration);

            //// Verify db headers for My Opps
            //generic.Dashcompletedtourlastmonth(driver, extentTest, testName, testDataIteration);

            // Select Dashboards
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity5"].ToString());

            // Select IWG Direct Agent Performance dashboard
            generic.SelectValuesFromDashboardDropDown(driver, extentTest, testName, testDataIteration, "IWG Direct Agent Performance dashboard");
            generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);

            // Scrolldown dashboard
            generic.scrollMiddleDashboard(driver, extentTest, testName, testDataIteration, "Scroll");

            // Verify db headers for My Directsales
            generic.Dashdirectsales(driver, extentTest, testName, testDataIteration);

            // Verify db headers for My Directsales
            generic.Dashdirectsaleslastmonth(driver, extentTest, testName, testDataIteration);

            // Select Dashboards
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity5"].ToString());

            // Select IWG Direct Agent Performance dashboard
            generic.SelectValuesFromDashboardDropDown(driver, extentTest, testName, testDataIteration, "IWG Direct Agent Performance dashboard");
            generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);

            // Scrolldown dashboard
            generic.scrollMiddleDashboard(driver, extentTest, testName, testDataIteration, "Scroll");

            // Verify db headers for My Directsales
            generic.Dashpotentialdirect(driver, extentTest, testName, testDataIteration);

            // Select Dashboards
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity5"].ToString());

            // Select IWG Direct Agent Activity dashboard
            generic.SelectValuesFromDashboardDropDown(driver, extentTest, testName, testDataIteration, "IWG Direct Agent Performance dashboard");
            generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);

            // Scrolldown dashboard
            generic.scrollDownDashboard(driver, extentTest, testName, testDataIteration);

            // Verify db headers for My Sales Assist
            generic.DashSalesAssist(driver, extentTest, testName, testDataIteration);

            // Verify db headers for My Sales Assist last month
            generic.DashPotentialSalesAssist(driver, extentTest, testName, testDataIteration);

            // Logout
            login.Logout(driver, extentTest, testName, testDataIteration);

            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}
        }
        public static IEnumerable<object[]> RTA_15653()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// CRM3521
        /// To verify whether User able to view Processor db
        /// </summary>

        [TestCategory("CRM3521"), TestCategory("Sales"), TestCategory("GlobalP11"), TestCategory("Validation1"), TestCategory("TestLock1")]
        [TestProperty("TestcaseID", "RTA-15653")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_15653), DynamicDataSourceType.Method)]
        public void RTA_15653_VerifyIWGAgentProcessordashboard(DataRow Ro)
        {
            //try
            //{

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());

            // Select Dashboards
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity5"].ToString());
            generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);

            // Select IWG Direct Agent Processor dashboard
            generic.SelectValuesFromDashboardDropDown(driver, extentTest, testName, testDataIteration, "IWG Direct Processor dashboard");
            generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);

            // Verify Untreatedleads
            generic.Untreatedleads(driver, extentTest, testName, testDataIteration);

            // Logout
            login.Logout(driver, extentTest, testName, testDataIteration);

            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}
        }
        public static IEnumerable<object[]> RTA_16716()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// CRM3521
        /// To verify whether IWG SA is able to change city in the City Diary and select the associated centre
        /// </summary>

        [TestCategory("CRM3521"), TestCategory("Sales"), TestCategory("25Aug"), TestCategory("GlobalP11"), TestCategory("Validation1"), TestCategory("TestLock1")]
        [TestProperty("TestcaseID", "RTA-16716")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_16716), DynamicDataSourceType.Method)]
        public void RTA_16716_VerifyIWGAgentdashboard(DataRow Ro)
        {
            //try
            //{

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());

            // Select Dashboards
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity5"].ToString());
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
            // Select IWG Direct Agent Performance dashboard
            generic.SelectValuesFromDashboardDropDown(driver, extentTest, testName, testDataIteration, "IWG Direct Agent Performance dashboard");
            generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);

            // Verify db headers
            generic.VerifyPerformanceDBHeaders(driver, extentTest, testName, testDataIteration);

            // Select IWG Direct Agent Activity dashboard
            generic.SelectValuesFromDashboardDropDown(driver, extentTest, testName, testDataIteration, "IWG Direct Agent Activity dashboard");
            generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);

            // Verify db headers
            generic.VerifyActivityDBHeaders(driver, extentTest, testName, testDataIteration);

            // Logout
            login.Logout(driver, extentTest, testName, testDataIteration);

            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}
        }
        public static IEnumerable<object[]> RTA_5028()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }

        [TestCategory("smoke"), TestCategory("Sales"), TestCategory("25Aug"), TestCategory("Validation1"), TestCategory("RerunMay9"), TestCategory("RerunMay120"), TestCategory("Rerun-06062020"), TestCategory("Rerun-24062020"), TestCategory("TestLock1"), TestCategory("SprintUN")]
        [TestProperty("TestcaseID", "RTA-5028")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5028), DynamicDataSourceType.Method)]
        public void RTA_5028_CentrevaluesameasRecommendedBusinessCentre(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());

                // Select Contacts entity and create new
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
                string time = System.DateTime.Now.ToString();
                generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
                // Select opportunity tab and create New with minor and major source fields
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());

                generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
                generic.CreateNewOpportunityBookATour(driver, extentTest, testName, testDataIteration, Ro["BussinessCentre2"].ToString());
                generic.UpdateStartDate(driver, extentTest, testDataIteration, testName, Ro["SelectMonthFeb"].ToString(), Ro["SelectDateFeb"].ToString());
                string recomendedBusiness = generic.RetriveTheRecommandedBusinessCentreValue(driver, extentTest, testName, testDataIteration);
                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Button"].ToString());
                generic.VerifyBookTourPage(driver, extentTest, testName, testDataIteration);
                generic.VerifyRecBusinessCentreAutoPopulatedInCenterOfBookTour(driver, extentTest, testName, testDataIteration, recomendedBusiness);
                generic.closeBookTourPage(driver, extentTest, testName, testDataIteration);
                driver.Navigate().Refresh();
                login.Logout(driver, extentTest, testName, testDataIteration);
            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }
        public static IEnumerable<object[]> RTA_16138()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        // Verify the Barcelona Hub Teams Setup

        [TestCategory("CRM-3391"), TestCategory("0409"), TestCategory("GlobalP11"), TestCategory("Validation1"), TestCategory("RerunMay9"), TestCategory("RerunMay120"), TestCategory("Rerun-06062020"), TestCategory("Rerun-24062020"), TestCategory("TestLock1")]
        [TestProperty("TestcaseID", "RTA-16138")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_16138), DynamicDataSourceType.Method)]
        public void RTA_16138_VerifyBarcelonaHubTeamsSetup(DataRow Ro)
        {
            //try
            //{
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            string parent = driver.CurrentWindowHandle;
            // Choose Settings > Advanced Settings
            generic.MoveToAdvanceSettings(driver, extentTest, testName, testDataIteration);

            // Select Settings> Security> Teams
            generic.MoveToTeamAdvancedSettings(driver, extentTest, testName, testDataIteration);

            // string parentWindowHandle = driver.CurrentWindowHandle;


            // Verify Barcelona team email
            for (int i = 1; i < 49; i++)
            {
                generic.VerifyBarcelonahub(driver, extentTest, testName, testDataIteration, Ro["Barcelona" + i].ToString(), Ro["TeamEmailqa"].ToString());
            }
            driver.Close();
            ThinkTime(2);
            driver.SwitchTo().Window(parent);
            // generic.WindowHandling(driver, parentWindowHandle);

            // Logouts
            login.Logout(driver, extentTest, testName, testDataIteration);
            //    }

            //        catch (Exception e)
            //        {

            //            AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}
        }


        public static IEnumerable<object[]> RTA_5027()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        /// To verify SA is not able to select a centre not available in the selected city diary
        /// </summary>

        [TestCategory("smoke"), TestCategory("Sales"), TestCategory("Agentissue"), TestCategory("BookaTour"), TestCategory("2610"), TestCategory("RF24-4-20"), TestCategory("Rerun-06062020"), TestCategory("Rerun-23062020"), TestCategory("TestLock1"), TestCategory("SprintUN")]
        [TestProperty("TestcaseID", "RTA-5027")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5027), DynamicDataSourceType.Method)]
        public void RTA_5027_VerifySANotabletoselectcentrenotincitylist(DataRow Ro)
        {
            //try
            //{


            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
            generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "All Opportunities");


            string contactname = generic.CreateNewOpportunityBookATour(driver, extentTest, testName, testDataIteration, Ro["BussinessCentre1"].ToString());
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, "Refresh");
            generic.scrollDownOpportunity(driver, extentTest, testName, testDataIteration);
            string recomendedBusiness = generic.RetriveTheRecommandedBusinessCentreValue(driver, extentTest, testName, testDataIteration);
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Button"].ToString());
            generic.VerifyBookTourPage(driver, extentTest, testName, testDataIteration);
            generic.VerifyRecBusinessCentreAutoPopulatedInCenterOfBookTour(driver, extentTest, testName, testDataIteration, recomendedBusiness);
            generic.VerifyCityDiaryandCentreValues(driver, extentTest, testName, testDataIteration, Ro["City Diary"].ToString(), Ro["Centre"].ToString());
            generic.VerifyAnotherCityCentreSelection1(driver, extentTest, testName, testDataIteration, Ro["NewCentre"].ToString(), Ro["Centre"].ToString());
            generic.closeBookTourPage(driver, extentTest, testName, testDataIteration);

            login.Logout(driver, extentTest, testName, testDataIteration);

            //}
            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}
        }
        public static IEnumerable<object[]> RTA4995()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        /// To verify whether  IWG Sales Agent is able to filter the centres on the scheduling screen
        /// </summary>

        [TestCategory("smoke"), TestCategory("RerunMay9"), TestCategory("BookaTour"), TestCategory("Validation1"), TestCategory("RF24-4-20"), TestCategory("RerunMay120"), TestCategory("Rerun-06062020"), TestCategory("Rerun-15062020"), TestCategory("Rerun-06062020"), TestCategory("Rerun-25062020_1"), TestCategory("TestLock1"), TestCategory("SprintUN")]
        [TestProperty("TestcaseID", "RTA-4995")]

        [DataTestMethod]
        [DynamicData(nameof(RTA4995), DynamicDataSourceType.Method)]
        public void RTA4995_VerifyCentreFilterIWGAgent(DataRow Ro)
        {
            try
            {

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
                try
                {
                    //generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "All Opportunities");

                    generic.CreateNewOpportunityBookATour(driver, extentTest, testName, testDataIteration, Ro["BussinessCentre2"].ToString());

                    //generic.SearchforRecord(driver, extentTest, testName, testDataIteration, "Automation - Canada");
                    //generic.SelectingActiveCell(driver, extentTest, testName, testDataIteration);
                    generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Button"].ToString());

                    //generic.closeBookTourPage2(driver, extentTest, testName, testDataIteration);
                    //driver.Navigate().Refresh();
                    //generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
                    //generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Button"].ToString());

                    generic.VerifyBookTourPage(driver, extentTest, testName, testDataIteration);
                    generic.VerifyCityDiaryandCentre1(driver, extentTest, testName, testDataIteration, Ro["City Diary"].ToString(), Ro["Centre"].ToString());

                    //AddLog(driver, extentTest, testName, testDataIteration, "Pass", "Runtime err", "Runtime err");

                    //generic.VerifyFreeSlotBookATour1(driver, extentTest, testName, testDataIteration, Ro["VerifyCityDairy1"].ToString(), Ro["VerifyCenter1"].ToString());
                    //generic.CentreSelect1(driver, extentTest, testName, testDataIteration, Ro["Centre1"].ToString());
                    //generic.VerifyFreeSlotBookATour11(driver, extentTest, testName, testDataIteration, Ro["VerifyCityDairy1"].ToString(), Ro["Centre1"].ToString());
                    login.Logout(driver, extentTest, testName, testDataIteration);
                }
                catch (Exception e) { }
            }
            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }

        public static IEnumerable<object[]> RTA4996()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        [Ignore]
        ///  verify an IWG Sales Agent is able to select different centres for an opportunity on the scheduling screen
        /// </summary>

        [TestCategory("smoke"), TestCategory("RerunMay9"), TestCategory("Agentissue"), TestCategory("Validation1"), TestCategory("SprintUN")]
        [TestProperty("TestcaseID", "RTA-4996")]

        [DataTestMethod]
        [DynamicData(nameof(RTA4996), DynamicDataSourceType.Method)]
        public void RTA4996_VerifyBookedTourofDifferentCentresIWGAgent(DataRow Ro)
        {
            try
            {
                //Login
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "All Opportunities");
                generic.SelectingActiveCell(driver, extentTest, testName, testDataIteration);
                generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);
                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Button"].ToString());
                generic.VerifyBookTourPage(driver, extentTest, testName, testDataIteration);
                generic.VerifyCityDiaryandCentre(driver, extentTest, testName, testDataIteration, Ro["City Diary"].ToString(), Ro["Centre"].ToString());
                AddLog(driver, extentTest, testName, testDataIteration, "Pass", "Runtime err", "Runtime err");

                generic.Bookinfreeslot(driver, extentTest, testName, testDataIteration);


                generic.CentreSelect(driver, extentTest, testName, testDataIteration, Ro["Centre1"].ToString());
                generic.Bookinfreeslot(driver, extentTest, testName, testDataIteration);
                Assert.Fail("isuue");
                generic.CentreSelect(driver, extentTest, testName, testDataIteration, Ro["Centre2"].ToString());
                generic.Bookinfreeslot(driver, extentTest, testName, testDataIteration);

                generic.CentreSelect(driver, extentTest, testName, testDataIteration, Ro["Centre"].ToString());
                generic.VerifySlotCentreName(driver, extentTest, testName, testDataIteration, Ro["Centre"].ToString());
                generic.VerifySlotCentreName(driver, extentTest, testName, testDataIteration, Ro["Centre1"].ToString());
                generic.VerifySlotCentreName(driver, extentTest, testName, testDataIteration, Ro["Centre2"].ToString());
                login.Logout(driver, extentTest, testName, testDataIteration);
            }
            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }

        public static IEnumerable<object[]> RTA_17615()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        [TestCategory("smoke"), TestCategory("RerunMay9"), TestCategory("GlobalP1_S2"), TestCategory("Validation1"), TestCategory("TestLock1"), TestCategory("27AugFixed")]
        [TestProperty("TestcaseID", "RTA-17615")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_17615), DynamicDataSourceType.Method)]
        public void RTA_17615_OppReffieldshouldnotbeedit(DataRow Ro)
        {
            //try
            //{
            //Login
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
            generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "All Opportunities");
            //generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);

            generic.SelectingActiveCell(driver, extentTest, testName, testDataIteration);
            generic.Referencefieldcheck(driver, extentTest, testName, testDataIteration);
            login.Logout(driver, extentTest, testName, testDataIteration);
            //}
            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}
        }
        public static IEnumerable<object[]> RTA_17616()
        {
            foreach (DataRow row in getTestCaseList("EnterpriseSalesManager"))
            {
                yield return new object[] { row };
            }
        }
        [TestCategory("smoke"), TestCategory("RerunMay9"), TestCategory("GlobalP1_S2"), TestCategory("Validation1"), TestCategory("TestLock1")]
        [TestProperty("TestcaseID", "RTA-17616")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_17616), DynamicDataSourceType.Method)]
        public void RTA_17616_SaleOwnerfieldremovedfromEntSalesOpportunity(DataRow Ro)
        {
            //try
            //{
            //Login
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
            generic.RemovedSalesOwner(driver, extentTest, testName, testDataIteration);
            login.Logout(driver, extentTest, testName, testDataIteration);
            //}
            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}
        }
        public static IEnumerable<object[]> RTA_17618()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        [TestCategory("smoke"), TestCategory("RerunMay9"), TestCategory("GlobalP1_S2"), TestCategory("Validation1"), TestCategory("TestLock1")]
        [TestProperty("TestcaseID", "RTA-17618")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_17618), DynamicDataSourceType.Method)]
        public void RTA_17618_SaleOwnerfieldremovedfromOpportunity(DataRow Ro)
        {
            //try
            //{
            //Login
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);
            generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
            generic.RemovedSalesOwner(driver, extentTest, testName, testDataIteration);
            login.Logout(driver, extentTest, testName, testDataIteration);
            //}
            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}
        }
        public static IEnumerable<object[]> RTA_17619()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        // <summary>
        ///To Verify whether the user cant close the opportunity as Won,when payment received is No.
        //////CRM 4724, CRM-7830
        /// </summary>
        [TestCategory("smoke"), TestCategory("HF"), TestCategory("GlobalP1_S2"), TestCategory("25Nov"), TestCategory("08Sep"), TestCategory("27AugFixed"), TestCategory("2810"), TestCategory("2910")]
        [TestProperty("TestcaseID", "RTA-17619")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_17619), DynamicDataSourceType.Method)]
        public void RTA_17619_Oppoownerisinheritedfromthelead(DataRow Ro)
        {
            //try
            //{

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());

            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity3"].ToString());
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
            string Time = System.DateTime.Now.ToString();

            generic.createleaddirectsaleswithproduct(driver, extentTest, testName, testDataIteration, "Lead" + Time, Ro["Email"].ToString(), Ro["BussinessPhone"].ToString(), Ro["Source"].ToString(), Ro["MajorSource"].ToString(), Ro["MinorSource2"].ToString(), "", "NewContact", "", "TestContact", "UK English", "", "London - London Bridge", "Yes");
            string ownerlead = generic.OwnerLead(driver, extentTest, testName, testDataIteration);

            //generic.QualifyLead1(driver, extentTest, testName, testDataIteration);
            generic.NavigateToRelatedTabEntitiesLead(driver, extentTest, testName, testDataIteration, Ro["RelatedTabEntity"].ToString());
            generic.OppSelect(driver, extentTest, testName, testDataIteration);
            generic.OwnerOpp(driver, extentTest, testName, testDataIteration, ownerlead);
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, "Refresh");

            //Verification of centre in tour stage
            generic.VerifyCentreinTourSatge(driver, extentTest, testName, testDataIteration);
            generic.BackButton(driver, extentTest, testName, testDataIteration);
            //Verification of My Team’s Open Opportunities view has an additional filter for User’s Teams

            string parent = driver.CurrentWindowHandle;
            generic.AdvancedFind(driver, extentTest, testName, testDataIteration);
            generic.AdvancedfilterMyteamsOpenOpp(driver, extentTest, testName, testDataIteration, "Opportunities", "My Team's Open Opportunities", "Equals Current User's Teams");
            driver.SwitchTo().Window(parent);
            login.Logout(driver, extentTest, testName, testDataIteration);

            //}
            //catch (Exception e)
            //{
            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}

        }


        public static IEnumerable<object[]> RTA_25409()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        // <summary>
        ///To Verify whether Lead is auto qualified when description length is 3000
        //////CRM 8522
        /// </summary>
        [TestCategory("HotFix"), TestCategory("HF")]
        [TestProperty("TestcaseID", "RTA-25409")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_25409), DynamicDataSourceType.Method)]
        public void RTA_25409_Leadautoqualifiedwithlenght3000(DataRow Ro)
        {
            //try
            //{

            // Login as IWG Sales Agent
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());

            // Choose Sales > Leads
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity3"].ToString());
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
            string Time = System.DateTime.Now.ToString();

            // Create new leaad
            generic.createleaddirectsaleswithproduct(driver, extentTest, testName, testDataIteration, "Lead" + Time, Ro["Email"].ToString(), Ro["BussinessPhone"].ToString(), Ro["Source"].ToString(), Ro["MajorSource"].ToString(), Ro["MinorSource2"].ToString(), "", "NewContact", "", "TestContact", "UK English", "", "London - London Bridge", "No");

            generic.Enterleaddescription(driver, extentTest, testName, testDataIteration, Ro["Descriptiontext"].ToString());

            // Enter description with length - 3000
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, "Refresh");

            // Open the qualified Opp
            //generic.QualifyLead1(driver, extentTest, testName, testDataIteration);
            generic.NavigateToRelatedTabEntitiesLead(driver, extentTest, testName, testDataIteration, Ro["RelatedTabEntity"].ToString());
            generic.OppSelect(driver, extentTest, testName, testDataIteration);

            // Verify the description field is auto populated in the qualified Opp
            generic.VerifyqualifiedOppdescription(driver, extentTest, testName, testDataIteration, Ro["Descriptiontext"].ToString());

            // Logout from the application
            login.Logout(driver, extentTest, testName, testDataIteration);

            //}
            //catch (Exception e)
            //{
            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}

        }



        public static IEnumerable<object[]> RTA_22275()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        // <summary>
        ///To Verify whether Lead is auto qualified when description length is 3000
        //////CRM 8522
        /// </summary>
        [TestCategory("HotFix"), TestCategory("HFrerun")]
        [TestProperty("TestcaseID", "RTA-22275")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_22275), DynamicDataSourceType.Method)]
        public void RTA_22275_Verifytypeofsaleinqualifiedopp(DataRow Ro)
        {
            try
            {

                // Login as IWG Sales Agent
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());

                // Choose Sales > Leads
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity3"].ToString());
                generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
                string Time = System.DateTime.Now.ToString();

                // Create new leaad
                generic.createleaddirectsaleswithproduct(driver, extentTest, testName, testDataIteration, "Lead" + Time, Ro["Email"].ToString(), Ro["BussinessPhone"].ToString(), Ro["Source"].ToString(), Ro["MajorSource"].ToString(), Ro["MinorSource2"].ToString(), "", "NewContact", "", "TestContact", "UK English", "", "London - London Bridge", "Yes");
                string ownerlead = generic.OwnerLead(driver, extentTest, testName, testDataIteration);

                // Open the qualified Opp
                generic.NavigateToRelatedTabEntitiesLead(driver, extentTest, testName, testDataIteration, Ro["RelatedTabEntity"].ToString());
                generic.OppSelect(driver, extentTest, testName, testDataIteration);

                // Get Opp ref
                string oppname = Element(driver, Control("OppReference", "EnterpriseSales")).GetAttribute("title");

                //Click on Adv Find
                string parent = driver.CurrentWindowHandle;
                generic.AdvancedFind(driver, extentTest, testName, testDataIteration);
                ThinkTime(2);
                generic.Advancedfindfilteresults(driver, extentTest, testName, testDataIteration, "Opportunities", "[new]", "Reference", "Equals", oppname, "Results", "pro_typeofsale");
                generic.Verifycolumnstatusinadvfind(driver, extentTest, testName, testDataIteration, "New Sale");
                driver.Close();
                driver.SwitchTo().Window(parent);


                // Logout from the application
                login.Logout(driver, extentTest, testName, testDataIteration);

            }
            catch (Exception e)
            {
                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }

        }













        public static IEnumerable<object[]> RTA_17641()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesManager"))
            {
                yield return new object[] { row };
            }
        }
        // <summary>
        ///To Verify whether the user cant close the opportunity as Won,when payment received is No.
        //////CRM 3372
        /// </summary>
        [TestCategory("smoke"), TestCategory("25Nov"), TestCategory("GlobalP1_S2"), TestCategory("Validation1"), TestCategory("TestLock1")]
        [TestProperty("TestcaseID", "RTA-17641")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_17641), DynamicDataSourceType.Method)]
        public void RTA_17641_leadtobequalifiedtagasPriOpp(DataRow Ro)
        {
            //try
            //{

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            string Time = System.DateTime.Now.ToString();
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);

            //First Lead
            string firstleadname = generic.DuplicateLead(driver, extentTest, testName, testDataIteration, "Lead" + Time, Ro["Email"].ToString(), Ro["Product"].ToString(), "Pri", Ro["Source"].ToString(), Ro["MajorSource"].ToString(), Ro["MinorSource"].ToString(), Ro["BussinessCentre"].ToString(), Ro["BrokerContact"].ToString());
            //Second Lead
            string secondleadname = generic.DuplicateLead1(driver, extentTest, testName, testDataIteration, "Lead" + Time, Ro["Email"].ToString(), Ro["Product"].ToString(), "Sec", firstleadname, Ro["Source"].ToString(), Ro["MajorSource"].ToString(), Ro["MinorSource"].ToString(), Ro["BussinessCentre"].ToString(), Ro["BrokerContact"].ToString());

            // Qualify first lead
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.OpenRecordGlobalSearchLeadCust(driver, extentTest, testDataIteration, testName, firstleadname);
            generic.NavigateToRelatedTabEntitiesLead(driver, extentTest, testName, testDataIteration, Ro["RelatedTabEntity"].ToString());
            generic.OppSelect(driver, extentTest, testName, testDataIteration);

            //Verification of first lead
            generic.PrimaryOppVerify(driver, extentTest, testName, testDataIteration, Ro["BussinessCentre"].ToString());

            //Logout
            login.Logout(driver, extentTest, testName, testDataIteration);


            //    }

            //        catch (Exception e)
            //        {

            //            AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}

        }
        public static IEnumerable<object[]> RTA_17684()
        {
            foreach (DataRow row in getTestCaseList("DirectSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        // <summary>
        ///To Verify whether the user cant close the opportunity as Won,when payment received is No.
        //////CRM 5820
        /// </summary>
        [TestCategory("25Nov"), TestCategory("smoke"), TestCategory("RerunMay9"), TestCategory("24Nov"), TestCategory("GlobalP1_S2"), TestCategory("Validation1"), TestCategory("TestLock1"), TestCategory("10Sep")]
        [TestProperty("TestcaseID", "RTA-17684")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_17684), DynamicDataSourceType.Method)]
        public void RTA_17684_Oppcanbeassignedtoactiveuser(DataRow Ro)
        {
            //try
            //{

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);

            //Navigate to OPP Entity               
            generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "My Open Opportunities");
            generic.SelectingActiveAccountEnterpriseSales(driver, extentTest, testName, testDataIteration);
            //Assign to active user
            generic.AssignRecordAnotherUser(driver, extentTest, testName, testDataIteration, Ro["AssignTo"].ToString(), Ro["User1"].ToString());
            generic.OwnerOpp(driver, extentTest, testName, testDataIteration, Ro["User1"].ToString());
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, "Refresh");
            // login.Logout(driver, extentTest, testName, testDataIteration);

            //Logout and login as Sales Admin
            generic.Loginafterlogout(driver, extentTest, testName, testDataIteration, Ro["UserName2"].ToString(), Ro["Password2"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);
            // generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);

            ////Navigate to OPP Entity               
            generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "My Open Opportunities");
            generic.SelectingActiveAccountEnterpriseSales(driver, extentTest, testName, testDataIteration);

            //Assign to active user
            generic.AssignRecordAnotherUser(driver, extentTest, testName, testDataIteration, Ro["AssignTo"].ToString(), "CRM Test5");
            generic.OwnerOpp(driver, extentTest, testName, testDataIteration, "CRM Test5");
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, "Refresh");
            // login.Logout(driver, extentTest, testName, testDataIteration);

            //Logout and login as Field Sales agent
            generic.Loginafterlogout(driver, extentTest, testName, testDataIteration, Ro["UserName3"].ToString(), Ro["Password3"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);


            //Navigate to OPP Entity               
            generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "My Open Opportunities");
            generic.SelectingActiveAccountEnterpriseSales(driver, extentTest, testName, testDataIteration);

            //Assign to active user
            generic.AssignRecordAnotherUserwithError(driver, extentTest, testName, testDataIteration, Ro["AssignTo"].ToString(), Ro["User1"].ToString());

            //Logout
            login.Logout(driver, extentTest, testName, testDataIteration);

            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}

        }
        public static IEnumerable<object[]> RTA_17685()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        // <summary>
        ///To Verify whether the user cant close the opportunity as Won,when payment received is No.
        //////CRM 5820
        /// </summary>
        [TestCategory("smoke"), TestCategory("RerunMay9"), TestCategory("07Sep"), TestCategory("GlobalP1_S2"), TestCategory("Regression"), TestCategory("27AugFixed"), TestCategory("CreateOppEnt")]
        [TestProperty("TestcaseID", "RTA-17685")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_17685), DynamicDataSourceType.Method)]
        public void RTA_17685_Oppocannotbeassignedtoinactiveusers(DataRow Ro)
        {
            //try
            //{

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);

            string time = System.DateTime.Now.ToString();
            generic.CreateNewOpportunityEntetrprise(driver, extentTest, testDataIteration, testName, Ro["TestOpportunityAccountName"].ToString(), time, Ro["Country"].ToString(), Ro["TestCurrency"].ToString(), "On Line", Ro["TestMajorSource"].ToString(), "Acquisition", Ro["TestNewContact"].ToString());
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, "Refresh");
            string oppname = Element(driver, Control("OppReference", "EnterpriseSales")).GetAttribute("title");

            //Assigning to inactive user
            generic.AssignRecordAnotherUserwithError(driver, extentTest, testName, testDataIteration, Ro["AssignTo"].ToString(), Ro["InactiveUser"].ToString());
            generic.DiscardChanges(driver, extentTest, testName, testDataIteration);

            //Logout
            login.Logout(driver, extentTest, testName, testDataIteration);

            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}

        }

        public static IEnumerable<object[]> RTA_17547()
        {
            foreach (DataRow row in getTestCaseList("ASM"))
            {
                yield return new object[] { row };
            }
        }
        // <summary>
        ///To Verify whether Field Sales Agent can reassign the cases they own.
        //////CRM 5820
        /// </summary>
        [TestCategory("smoke"), TestCategory("GlobalP1_S2"), TestCategory("25Nov"), TestCategory("RegressionFail"), TestCategory("2910")]
        [TestProperty("TestcaseID", "RTA-17547")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_17547), DynamicDataSourceType.Method)]
        public void RTA_17547_FieldSalesAgentcanReassigncasestheyOwn(DataRow Ro)
        {
            //try
            //{
            string emailid = "Automat@gmail.com";
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);

            //Navigate to OPP Entity               
            string time = System.DateTime.Now.ToString();

            string contactname = generic.CreateNewcontactOpportunity(driver, extentTest, testName, testDataIteration, Ro["BussinessCentre"].ToString(), Ro["Language"].ToString(), emailid);
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, "Refresh");
            string oppname = Element(driver, Control("OppReference", "EnterpriseSales")).GetAttribute("title");
            ThinkTime(5);
            //Assign to IST Agent
            generic.AssignRecordAnotherUser(driver, extentTest, testName, testDataIteration, Ro["AssignTo"].ToString(), Ro["Team1"].ToString());
            generic.OwnerOpp(driver, extentTest, testName, testDataIteration, Ro["Team1"].ToString());
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, "Refresh");
            generic.VerifyReassignNote(driver, extentTest, testName, testDataIteration);
            //Assign to another field sales agent
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, "Refresh");
            generic.Loginafterlogout(driver, extentTest, testName, testDataIteration, Ro["UserName1"].ToString(), Ro["Password1"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
            generic.RecordGlobalSearch(driver, extentTest, testName, testDataIteration, oppname);
            generic.SelectActiveCellContact(driver, extentTest, testName, testDataIteration);


            generic.AssignRecordAnotherUser(driver, extentTest, testName, testDataIteration, Ro["AssignTo"].ToString(), Ro["Team2"].ToString());
            generic.OwnerOpp(driver, extentTest, testName, testDataIteration, Ro["Team2"].ToString());
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, "Refresh");


            //Assign to IWG Corporate Team
            generic.AssignRecordAnotherUser(driver, extentTest, testName, testDataIteration, Ro["AssignTo"].ToString(), Ro["Team3"].ToString());
            generic.OwnerOpp(driver, extentTest, testName, testDataIteration, Ro["Team3"].ToString());
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, "Refresh");

            //Assign to IWG Corporate Agent
            generic.AssignRecordAnotherUser(driver, extentTest, testName, testDataIteration, Ro["AssignTo"].ToString(), Ro["Team4"].ToString());
            generic.OwnerOpp(driver, extentTest, testName, testDataIteration, Ro["Team4"].ToString());
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, "Refresh");

            //Logout
            login.Logout(driver, extentTest, testName, testDataIteration);

            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}

        }


        public static IEnumerable<object[]> RTA_16930()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        // <summary>
        ///To Verify that sales opportunities can only be reassigned to certain users.
        //////CRM 5820
        /// </summary>
        [TestCategory("28Sep2020"), TestCategory("25Nov"), TestCategory("smoke"), TestCategory("GlobalP1_S2"), TestCategory("RegressionFail"), TestCategory("CreateOppEnt")]
        [TestProperty("TestcaseID", "RTA-16930")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_16930), DynamicDataSourceType.Method)]
        public void RTA_16930_SalesOppReassigning(DataRow Ro)
        {
            //try
            //{

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);

            string time = System.DateTime.Now.ToString();
            generic.CreateNewOpportunityEntetrprise(driver, extentTest, testDataIteration, testName, Ro["TestOpportunityAccountName"].ToString(), time, Ro["Country"].ToString(), Ro["TestCurrency"].ToString(), "On Line", Ro["TestMajorSource"].ToString(), "Acquisition", Ro["TestNewContact"].ToString());
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, "Refresh");

            //Assign to IST Agent
            generic.AssignRecordAnotherUser(driver, extentTest, testName, testDataIteration, Ro["AssignTo"].ToString(), Ro["ConnectedTo"].ToString());
            generic.OwnerOpp(driver, extentTest, testName, testDataIteration, Ro["ConnectedTo"].ToString());
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, "Refresh");

            //Assign to field sales agent
            generic.AssignRecordAnotherUser(driver, extentTest, testName, testDataIteration, Ro["AssignTo"].ToString(), Ro["User4"].ToString());
            generic.OwnerOpp(driver, extentTest, testName, testDataIteration, Ro["User4"].ToString());
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, "Refresh");

            //Assign to IWG Corporate Team
            generic.AssignRecordAnotherUser(driver, extentTest, testName, testDataIteration, Ro["AssignTo"].ToString(), Ro["User3"].ToString());
            generic.OwnerOpp(driver, extentTest, testName, testDataIteration, Ro["User3"].ToString());
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, "Refresh");

            //Assign to IWG Corporate Agent
            generic.AssignRecordAnotherUser(driver, extentTest, testName, testDataIteration, Ro["AssignTo"].ToString(), Ro["User2"].ToString());
            generic.OwnerOpp(driver, extentTest, testName, testDataIteration, Ro["User2"].ToString());
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, "Refresh");

            // // //Logout and login as Sales Admin
            generic.Loginafterlogout(driver, extentTest, testName, testDataIteration, Ro["UserName3"].ToString(), Ro["Password3"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);

            string time1 = System.DateTime.Now.ToString();
            generic.CreateNewOpportunityEntetrprise(driver, extentTest, testDataIteration, testName, Ro["TestOpportunityAccountName"].ToString(), time1, Ro["Country"].ToString(), Ro["TestCurrency"].ToString(), "On Line", Ro["TestMajorSource"].ToString(), "Acquisition", Ro["TestNewContact"].ToString());
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, "Refresh");

            //Assign to IST Agent
            generic.AssignRecordAnotherUser(driver, extentTest, testName, testDataIteration, Ro["AssignTo"].ToString(), Ro["ConnectedTo"].ToString());
            generic.OwnerOpp(driver, extentTest, testName, testDataIteration, Ro["ConnectedTo"].ToString());
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, "Refresh");

            //Assign to field sales agent
            generic.AssignRecordAnotherUser(driver, extentTest, testName, testDataIteration, Ro["AssignTo"].ToString(), Ro["User4"].ToString());
            generic.OwnerOpp(driver, extentTest, testName, testDataIteration, Ro["User4"].ToString());
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, "Refresh");

            //Assign to IWG Corporate Team
            generic.AssignRecordAnotherUser(driver, extentTest, testName, testDataIteration, Ro["AssignTo"].ToString(), Ro["User3"].ToString());
            generic.OwnerOpp(driver, extentTest, testName, testDataIteration, Ro["User3"].ToString());
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, "Refresh");

            //Assign to IWG Corporate Agent
            generic.AssignRecordAnotherUser(driver, extentTest, testName, testDataIteration, Ro["AssignTo"].ToString(), Ro["User2"].ToString());
            generic.OwnerOpp(driver, extentTest, testName, testDataIteration, Ro["User2"].ToString());
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, "Refresh");

            //Logout
            login.Logout(driver, extentTest, testName, testDataIteration);



            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}

        }

        public static IEnumerable<object[]> RTA_16938()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        // <summary>
        ///To Verify that if an opportunity was initially worked on by an IWG Internal Sales agent, and subsequently 
        ///handed over to Field Sales, cannot be reassigned manually back to IWG Internal Sales agents, except by Processors
        //////CRM 5820
        /// </summary>
        [TestCategory("26Aug"), TestCategory("smoke"), TestCategory("GlobalP1_S2"), TestCategory("RegressionFail")]
        [TestProperty("TestcaseID", "RTA-16938")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_16938), DynamicDataSourceType.Method)]
        public void RTA_16938_SalesOppReassigning(DataRow Ro)
        {
            //try
            //{

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
            string Time = System.DateTime.Now.ToString();

            //Navigate to OPP Entity               
            //generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "My Open Opportunities");
            //generic.SelectingActiveAccountEnterpriseSales(driver, extentTest, testName, testDataIteration);
            generic.HeaderButtonwithoutConfirmation(driver, extentTest, testName, testDataIteration, "New");
            generic.CreateOpportunityFormCondition(driver, extentTest, testName, testDataIteration, Time, "true", "true", "true", "true", "true", "true", "true", "true", "true", "true");
            ThinkTime(5);
            string oppname = Element(driver, Control("OppReference", "EnterpriseSales")).GetAttribute("title");

            //Assign to field sales agent
            generic.AssignRecordAnotherUser(driver, extentTest, testName, testDataIteration, Ro["AssignTo"].ToString(), Ro["User4"].ToString());
            generic.OwnerOpp(driver, extentTest, testName, testDataIteration, Ro["User4"].ToString());
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, "Refresh");

            // Logout and login as Field sales agent
            generic.Loginafterlogout(driver, extentTest, testName, testDataIteration, Ro["UserName2"].ToString(), Ro["Password2"].ToString());
            // generic.LoginafterlogoutOld(driver, extentTest, testName, testDataIteration, Ro["UserName2"].ToString(), Ro["Password2"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);

            //Navigate to OPP Entity               
            generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "All Opportunities");
            generic.OpenRecordGlobalSearch(driver, extentTest, testName, testDataIteration, oppname);

            //Assign to IST Agent 
            // generic.AssignRecordAnotherUser(driver, extentTest, testName, testDataIteration, Ro["AssignTo"].ToString(), Ro["ConnectedTo"].ToString());
            generic.AssignRecordAnotherUserwithError(driver, extentTest, testName, testDataIteration, Ro["AssignTo"].ToString(), Ro["ConnectedTo"].ToString());

            //Logout
            login.Logout(driver, extentTest, testName, testDataIteration);

            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}

        }
        public static IEnumerable<object[]> RTA_17690()
        {
            foreach (DataRow row in getTestCaseList("DirectSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        // <summary>
        ///To Verify whether the user cant close the opportunity as Won,when payment received is No.
        //////CRM 5826
        /// </summary>
        [TestCategory("07Sep"), TestCategory("27Aug"), TestCategory("smoke"), TestCategory("RerunMay9"), TestCategory("GlobalP1_S2"), TestCategory("Regression")]
        [TestProperty("TestcaseID", "RTA-17690")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_17690), DynamicDataSourceType.Method)]
        public void RTA_17690_Actrecordscanbeassignedtoactiveusers(DataRow Ro)
        {
            //try
            //{

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity4"].ToString());
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);

            //Assign activity to active user               
            generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "My Open Activities");
            generic.SelectHeaderButton(driver, extentTest, testName, testDataIteration, "Task");
            generic.AssignNewTask(driver, extentTest, testName, testDataIteration);

            generic.AssignRecordAnotherUser(driver, extentTest, testName, testDataIteration, Ro["AssignTo"].ToString(), Ro["User1"].ToString());
            generic.OwnerOpp(driver, extentTest, testName, testDataIteration, Ro["User1"].ToString());
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, "Refresh");

            //Assign email to active user    
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity4"].ToString());
            generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "All Emails");
            generic.SelectHeaderButton(driver, extentTest, testName, testDataIteration, "Email");
            generic.NewDraftEmailcreate(driver, extentTest, testName, testDataIteration);

            generic.AssignRecordAnotherUser(driver, extentTest, testName, testDataIteration, Ro["AssignTo"].ToString(), Ro["User1"].ToString());
            generic.OwnerOpp(driver, extentTest, testName, testDataIteration, Ro["User1"].ToString());
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, "Refresh");


            ////commented as Open appoinment cant be created//////
            ///
            ////Assign Appointment to active user  
            //generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity4"].ToString());
            //generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "My Appointments");
            //generic.SelectingActiveAccountEnterpriseSales(driver, extentTest, testName, testDataIteration);

            //generic.AssignRecordAnotherUser(driver, extentTest, testName, testDataIteration, Ro["AssignTo"].ToString(), Ro["User1"].ToString());
            //generic.OwnerOpp(driver, extentTest, testName, testDataIteration, Ro["User1"].ToString());
            //generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, "Refresh");

            //Assign Phone calls to active user
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity4"].ToString());
            generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "My Phone Calls");
            generic.SelectHeaderButton(driver, extentTest, testName, testDataIteration, "Phone Call");
            generic.NewPhoneCallActivity(driver, extentTest, testName, testDataIteration);

            generic.AssignRecordAnotherUser(driver, extentTest, testName, testDataIteration, Ro["AssignTo"].ToString(), Ro["User1"].ToString());
            generic.OwnerOpp(driver, extentTest, testName, testDataIteration, Ro["User1"].ToString());
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, "Refresh");

            //Logout
            login.Logout(driver, extentTest, testName, testDataIteration);

            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}

        }
        public static IEnumerable<object[]> RTA_17691()
        {
            foreach (DataRow row in getTestCaseList("DirectSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        // <summary>
        ///To Verify whether the user cant close the opportunity as Won,when payment received is No.
        //////CRM 5826
        /// </summary>
        [TestCategory("smoke"), TestCategory("RerunMay9"), TestCategory("25Nov"), TestCategory("GlobalP1_S2"), TestCategory("Regression")]
        [TestProperty("TestcaseID", "RTA-17691")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_17691), DynamicDataSourceType.Method)]
        public void RTA_17691_Actrecordscanbeassignedinactiveusers(DataRow Ro)
        {
            //try
            //{

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity4"].ToString());
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);

            //Assign activity to active user               
            generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "My Open Activities");
            generic.SelectHeaderButton(driver, extentTest, testName, testDataIteration, "Task");
            generic.AssignNewTask(driver, extentTest, testName, testDataIteration);

            generic.AssignRecordAnotherUserwithError(driver, extentTest, testName, testDataIteration, Ro["AssignTo"].ToString(), Ro["InactiveUser"].ToString());
            generic.DiscardChanges(driver, extentTest, testName, testDataIteration);

            //Assign email to active user    
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity4"].ToString());
            generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "All Emails");
            generic.SelectHeaderButton(driver, extentTest, testName, testDataIteration, "Email");
            generic.NewDraftEmailcreate(driver, extentTest, testName, testDataIteration);

            generic.AssignRecordAnotherUserwithError(driver, extentTest, testName, testDataIteration, Ro["AssignTo"].ToString(), Ro["InactiveUser"].ToString());
            generic.DiscardChanges(driver, extentTest, testName, testDataIteration);

            ////Assign Appointment to inactive user  
            //generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity4"].ToString());
            //    generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "My Appointments");
            //    generic.SelectingActiveAccountEnterpriseSales(driver, extentTest, testName, testDataIteration);
            //// generic.Inactiveuser(driver, extentTest, testName, testDataIteration, Ro["AssignTo"].ToString(), Ro["User2"].ToString());
            //generic.AssignRecordAnotherUserwithError(driver, extentTest, testName, testDataIteration, Ro["AssignTo"].ToString(), Ro["InactiveUser"].ToString());
            //generic.DiscardChanges(driver, extentTest, testName, testDataIteration);

            //Assign Phone calls to active user
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity4"].ToString());
            generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "My Phone Calls");
            generic.SelectHeaderButton(driver, extentTest, testName, testDataIteration, "Phone Call");
            generic.NewPhoneCallActivity(driver, extentTest, testName, testDataIteration);

            generic.AssignRecordAnotherUserwithError(driver, extentTest, testName, testDataIteration, Ro["AssignTo"].ToString(), Ro["InactiveUser"].ToString());
            generic.DiscardChanges(driver, extentTest, testName, testDataIteration);

            //Logout
            login.Logout(driver, extentTest, testName, testDataIteration);

            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}

        }


        [Ignore]
        //Ignored since sales agent couldn't able to create an email activity
        public static IEnumerable<object[]> RTA_17692()
        {
            foreach (DataRow row in getTestCaseList("DirectSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        // <summary>
        ///To Verify whether the user cant close the opportunity as Won,when payment received is No.
        //////CRM 5826
        /// </summary>
        [TestCategory("smoke"), TestCategory("25Nov"), TestCategory("GlobalP1_S2"), TestCategory("Regression"), TestCategory("08Sep")]
        [TestProperty("TestcaseID", "RTA-17692")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_17692), DynamicDataSourceType.Method)]
        public void RTA_17692_Closedactivityrecordscannotbeassigned(DataRow Ro)
        {
            //try
            //{

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());

            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity4"].ToString());
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);


            //Assign closed task to active user               
            generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "My Tasks");
            generic.SelectingActiveAccountEnterpriseSales(driver, extentTest, testName, testDataIteration);
            generic.CloseTask(driver, extentTest, testName, testDataIteration);
            generic.AssigntoClosedTask(driver, extentTest, testName, testDataIteration);

            //Assign closed email to active user    
            //generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity4"].ToString());
            //    generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "All Emails");

            //    string subject = generic.AssignuserCreateNewEmailActivity(driver, extentTest, testName, testDataIteration);
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity4"].ToString());
            generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "My Sent Emails");
            generic.SelectingActiveAccountEnterpriseSales(driver, extentTest, testName, testDataIteration);
            // generic.OpenRecordGlobalSearch(driver, extentTest, testDataIteration, testName, subject);
            generic.AssigntoClosedTask(driver, extentTest, testName, testDataIteration);

            //Assign closed Appointment to active user  
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity4"].ToString());
            generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "My Completed Appointments");
            generic.SelectingActiveAccountEnterpriseSales(driver, extentTest, testName, testDataIteration);
            generic.AssigntoClosedTask(driver, extentTest, testName, testDataIteration);

            //Assign closed Phone calls to active user
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity4"].ToString());
            generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "My Completed Phone Calls");
            generic.SelectingActiveAccountEnterpriseSales(driver, extentTest, testName, testDataIteration);
            generic.AssigntoClosedTask(driver, extentTest, testName, testDataIteration);

            //Logout
            login.Logout(driver, extentTest, testName, testDataIteration);
            generic.DiscardChanges(driver, extentTest, testName, testDataIteration);

            //    }

            //        catch (Exception e)
            //        {

            //            AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}

        }



        public static IEnumerable<object[]> RTA_17693()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }


        // <summary>
        ///To Verify whether the user cant close the opportunity as Won,when payment received is No.
        //////CRM 5826
        /// </summary>
        [TestCategory("26Aug"), TestCategory("smoke"), TestCategory("09Sep"), TestCategory("RerunMay9"), TestCategory("GlobalP1_S2"), TestCategory("Regression")]
        [TestProperty("TestcaseID", "RTA-17693")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_17693), DynamicDataSourceType.Method)]
        public void RTA_17693_Verifythatsalesactivityrecordscanonlybereassignedby3roles(DataRow Ro)
        {
            //try
            //{

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity4"].ToString());
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);


            ////Assign activity to active user               
            generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "My Open Activities");
            generic.SelectHeaderButton(driver, extentTest, testName, testDataIteration, "Task");
            generic.AssignNewTask(driver, extentTest, testName, testDataIteration);

            generic.AssignRecordAnotherUser(driver, extentTest, testName, testDataIteration, Ro["AssignTo"].ToString(), Ro["User1"].ToString());
            generic.OwnerOpp(driver, extentTest, testName, testDataIteration, Ro["User1"].ToString());
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, "Refresh");


            ////Assign email to active user    
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity4"].ToString());
            generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "All Emails");
            generic.SelectHeaderButton(driver, extentTest, testName, testDataIteration, "Email");
            generic.NewDraftEmailcreate(driver, extentTest, testName, testDataIteration);

            generic.AssignRecordAnotherUser(driver, extentTest, testName, testDataIteration, Ro["AssignTo"].ToString(), Ro["User1"].ToString());
            generic.OwnerOpp(driver, extentTest, testName, testDataIteration, Ro["User1"].ToString());
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, "Refresh");

            ////Assign Appointment to active user  
            //generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity4"].ToString());
            //generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "My Appointments");
            //generic.SelectingActiveAccountEnterpriseSales(driver, extentTest, testName, testDataIteration);

            //generic.AssignRecordAnotherUser(driver, extentTest, testName, testDataIteration, Ro["AssignTo"].ToString(), Ro["User1"].ToString());
            //generic.OwnerOpp(driver, extentTest, testName, testDataIteration, Ro["User1"].ToString());
            //generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, "Refresh");


            //Assign Phone calls to active user
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity4"].ToString());
            generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "My Phone Calls");
            generic.SelectHeaderButton(driver, extentTest, testName, testDataIteration, "Phone Call");
            generic.NewPhoneCallActivity(driver, extentTest, testName, testDataIteration);

            generic.AssignRecordAnotherUser(driver, extentTest, testName, testDataIteration, Ro["AssignTo"].ToString(), Ro["User1"].ToString());
            generic.OwnerOpp(driver, extentTest, testName, testDataIteration, Ro["User1"].ToString());
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, "Refresh");

            generic.Loginafterlogout(driver, extentTest, testName, testDataIteration, Ro["UserName2"].ToString(), Ro["Password2"].ToString());

            ////////////////////Filed Sales Agent//////////////////////

            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity4"].ToString());
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);

            //Assign activity to active user               
            generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "My Open Activities");
            //generic.SelectingActiveAccountEnterpriseSales(driver, extentTest, testName, testDataIteration);
            generic.SelectHeaderButton(driver, extentTest, testName, testDataIteration, "Task");
            generic.AssignNewTask(driver, extentTest, testName, testDataIteration);

            generic.AssignRecordAnotherUser(driver, extentTest, testName, testDataIteration, Ro["AssignTo"].ToString(), Ro["User1"].ToString());
            generic.OwnerOpp(driver, extentTest, testName, testDataIteration, Ro["User1"].ToString());
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, "Refresh");

            //Assign email to active user    
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity4"].ToString());
            generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "All Emails");
            //generic.SelectingActiveAccountEnterpriseSales(driver, extentTest, testName, testDataIteration);
            generic.SelectHeaderButton(driver, extentTest, testName, testDataIteration, "Email");
            generic.NewDraftEmailcreate(driver, extentTest, testName, testDataIteration);
            generic.AssignRecordAnotherUser(driver, extentTest, testName, testDataIteration, Ro["AssignTo"].ToString(), Ro["User1"].ToString());
            generic.OwnerOpp(driver, extentTest, testName, testDataIteration, Ro["User1"].ToString());
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, "Refresh");

            ////Assign Appointment to active user  
            //generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity4"].ToString());
            //generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "My Appointments");
            //generic.SelectingActiveAccountEnterpriseSales(driver, extentTest, testName, testDataIteration);

            //generic.AssignRecordAnotherUser(driver, extentTest, testName, testDataIteration, Ro["AssignTo"].ToString(), Ro["User1"].ToString());
            //generic.OwnerOpp(driver, extentTest, testName, testDataIteration, Ro["User1"].ToString());
            //generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, "Refresh");

            //Assign Phone calls to active user
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity4"].ToString());
            generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "IT Sales Phone Calls");
            //generic.SelectingActiveAccountEnterpriseSales(driver, extentTest, testName, testDataIteration);
            generic.SelectHeaderButton(driver, extentTest, testName, testDataIteration, "Phone Call");
            generic.NewPhoneCallActivity(driver, extentTest, testName, testDataIteration);
            generic.AssignRecordAnotherUser(driver, extentTest, testName, testDataIteration, Ro["AssignTo"].ToString(), Ro["User1"].ToString());
            generic.OwnerOpp(driver, extentTest, testName, testDataIteration, Ro["User1"].ToString());
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, "Refresh");

            //Logout
            login.Logout(driver, extentTest, testName, testDataIteration);

            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}

        }
        public static IEnumerable<object[]> RTA_17694()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        // <summary>
        ///To Verify whether the user cant close the opportunity as Won,when payment received is No.
        //////CRM 5826
        /// </summary>
        [TestCategory("smoke"), TestCategory("28Sep2020"), TestCategory("GlobalP1_S2"), TestCategory("Regression"), TestCategory("26AugFixed")]
        [TestProperty("TestcaseID", "RTA-17694")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_17694), DynamicDataSourceType.Method)]
        public void RTA_17694_Verifythatsalesactivity(DataRow Ro)
        {
            //try
            //{

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());

            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);

            //Commenting below code since internal sales agent cant create email.

            //Assign activity to active user               
            //generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "My open IT Sales activities");
            //generic.SelectingActiveAccountEnterpriseSales(driver, extentTest, testName, testDataIteration);

            //generic.AssignRecordAnotherUser(driver, extentTest, testName, testDataIteration, Ro["AssignTo"].ToString(), Ro["User1"].ToString());
            //generic.OwnerOpp(driver, extentTest, testName, testDataIteration, Ro["User1"].ToString());

            //Assign email to active user

            //generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity4"].ToString());
            //generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "All Emails");
            //generic.SelectingActiveAccountEnterpriseSales(driver, extentTest, testName, testDataIteration);

            //generic.AssignRecordAnotherUser(driver, extentTest, testName, testDataIteration, Ro["AssignTo"].ToString(), Ro["User2"].ToString());
            //generic.OwnerOpp(driver, extentTest, testName, testDataIteration, Ro["User2"].ToString());

            //Assign Appointment to active user 

            string Time = generic.GetSystemTimeInSec(driver, extentTest, testName, testDataIteration);
            generic.CreateOpportunityFormCondition(driver, extentTest, testName, testDataIteration, Time, "true", "true", "true", "true", "true", "true", "true", "true", "true", "true");
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, "Refresh");
            generic.CreateAppointmentActivityOpp(driver, extentTest, testName, testDataIteration, "", "Subject01");
            generic.OpenFirstRecordTimeline(driver, extentTest, testName, testDataIteration);
            //generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity4"].ToString());
            //generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "My Appointments");
            //generic.SelectingActiveAccountEnterpriseSales(driver, extentTest, testName, testDataIteration);
            ThinkTime(7);
            generic.AssignRecordAnotherUser(driver, extentTest, testName, testDataIteration, Ro["AssignTo"].ToString(), Ro["User2"].ToString());
            generic.OwnerOpp(driver, extentTest, testName, testDataIteration, Ro["User2"].ToString());
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, "Refresh");

            //Assign Phone calls to active user

            //generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity4"].ToString());
            //generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "IT Sales Phone Calls");
            //generic.SelectingActiveAccountEnterpriseSales(driver, extentTest, testName, testDataIteration);
            //generic.NavigatetooppfromAppointment(driver, extentTest, testName, testDataIteration);
            //generic.CreatePhoneCallActivityOpp(driver, extentTest, testName, testDataIteration, "CRM Test3", "Subject01");
            //generic.scrollDownOpportunity(driver, extentTest, testName, testDataIteration);
            //generic.OpenFirstPhoneRecordTimeline(driver, extentTest, testName, testDataIteration);
            //generic.AssignRecordAnotherUser(driver, extentTest, testName, testDataIteration, Ro["AssignTo"].ToString(), Ro["User3"].ToString());
            //generic.OwnerOpp(driver, extentTest, testName, testDataIteration, Ro["User3"].ToString());

            //Logout
            login.Logout(driver, extentTest, testName, testDataIteration);

            //    }

            //        catch (Exception e)
            //        {

            //            AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}

        }
        public static IEnumerable<object[]> RTA_17695()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        // <summary>
        ///To Verify whether the user cant close the opportunity as Won,when payment received is No.
        //////CRM 5826
        /// </summary>
        [TestCategory("28Sep2020"), TestCategory("smoke"), TestCategory("25Nov"), TestCategory("GlobalP1_S2"), TestCategory("Regression"), TestCategory("09Sep")]
        [TestProperty("TestcaseID", "RTA-17695")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_17695), DynamicDataSourceType.Method)]
        public void RTA_17695_FieldSAcanreassignanactivitythatownerof(DataRow Ro)
        {
            //try
            //{

            //Login as Direct Sales Agent
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity4"].ToString());
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);

            //Assign first activity to Field sales agent            
            generic.SelectHeaderButton(driver, extentTest, testName, testDataIteration, "Task");
            generic.AssignNewTask(driver, extentTest, testName, testDataIteration);
            string taskname1 = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");

            generic.AssignRecordAnotherUser(driver, extentTest, testName, testDataIteration, Ro["AssignTo"].ToString(), Ro["User4"].ToString());
            generic.OwnerOpp(driver, extentTest, testName, testDataIteration, Ro["User4"].ToString());
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, "Refresh");

            //Assign second activity to Field sales agent 
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity4"].ToString());
            generic.SelectHeaderButton(driver, extentTest, testName, testDataIteration, "Task");
            generic.AssignNewTask(driver, extentTest, testName, testDataIteration);
            string taskname2 = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");

            generic.AssignRecordAnotherUser(driver, extentTest, testName, testDataIteration, Ro["AssignTo"].ToString(), Ro["User4"].ToString());
            generic.OwnerOpp(driver, extentTest, testName, testDataIteration, Ro["User4"].ToString());
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, "Refresh");

            //Assign third activity to Field sales agent 
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity4"].ToString());
            generic.SelectHeaderButton(driver, extentTest, testName, testDataIteration, "Task");
            generic.AssignNewTask(driver, extentTest, testName, testDataIteration);
            string taskname3 = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");

            generic.AssignRecordAnotherUser(driver, extentTest, testName, testDataIteration, Ro["AssignTo"].ToString(), Ro["User4"].ToString());
            generic.OwnerOpp(driver, extentTest, testName, testDataIteration, Ro["User4"].ToString());
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, "Refresh");

            ////////////////////Filed Sales Agent//////////////////////
            generic.Loginafterlogout(driver, extentTest, testName, testDataIteration, Ro["UserName2"].ToString(), Ro["Password2"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity4"].ToString());
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);

            //Assign first activity to sales agent
            generic.OpenRecordGlobalSearch(driver, extentTest, testDataIteration, testName, taskname1);
            generic.AssignRecordAnotherUser(driver, extentTest, testName, testDataIteration, Ro["AssignTo"].ToString(), Ro["User1"].ToString());
            generic.OwnerOpp(driver, extentTest, testName, testDataIteration, Ro["User1"].ToString());
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, "Refresh");

            //Assign second activity to IWG Corporate Team 
            generic.OpenRecordGlobalSearch(driver, extentTest, testDataIteration, testName, taskname2);
            generic.AssignRecordAnotherUser(driver, extentTest, testName, testDataIteration, Ro["AssignTo"].ToString(), Ro["User3"].ToString());
            generic.OwnerOpp(driver, extentTest, testName, testDataIteration, Ro["User3"].ToString());
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, "Refresh");

            //Assign third activity to IWG Corporate agent
            generic.OpenRecordGlobalSearch(driver, extentTest, testDataIteration, testName, taskname3);
            generic.AssignRecordAnotherUser(driver, extentTest, testName, testDataIteration, Ro["AssignTo"].ToString(), Ro["User2"].ToString());
            generic.OwnerOpp(driver, extentTest, testName, testDataIteration, Ro["User2"].ToString());
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, "Refresh");

            //Logout
            login.Logout(driver, extentTest, testName, testDataIteration);

            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}

        }
        public static IEnumerable<object[]> RTA_5321()
        {
            foreach (DataRow row in getTestCaseList("EnterpriseSalesManager"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To check whether Enterprise Sales Manager is able to access Excel templates for opportunities won this month.
        /// </summary>
        [TestCategory("smoke"), TestCategory("Agentissue"), TestCategory("Enterprise Sales"), TestCategory("25Nov"), TestCategory("RerunMay120"), TestCategory("Regression"), TestCategory("Sprint32NCS"), TestCategory("08Sep")]
        [TestProperty("TestcaseID", "RTA-5321")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5321), DynamicDataSourceType.Method)]

        public void RTA_5321_Exceltemplatesforopportunitieswonthismonth(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);
                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "Open Enterprise Opportunities");

                generic.SelectHeaderButton(driver, extentTest, testName, testDataIteration, Ro["Header Button"].ToString());
                generic.SelectandVerifyExcelTemplate(driver, extentTest, testName, testDataIteration, Ro["Excel Template Option1"].ToString(), Ro["Excel Template Option2"].ToString());
                login.Logout(driver, extentTest, testName, testDataIteration);
            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }

        }

        public static IEnumerable<object[]> RTA_5308()
        {
            foreach (DataRow row in getTestCaseList("ITSalesManager"))
            {
                yield return new object[] { row };
            }
        }
        // <summary>
        /// To verify that the user should be able to fill Call Outcome field as "No services required" and then mark the phone call as complete
        /// </summary>
        [TestCategory("25Nov1"), TestCategory("IT Sales"), TestCategory("Regression"), TestCategory("QARefactorfail"), TestCategory("Sprint32NCS")]
        [TestProperty("TestcaseID", "RTA-5308")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5308), DynamicDataSourceType.Method)]
        public void RTA_5308_CallOutcomefieldasNoservicesrequireda(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "Open IT Sales opportunities");
                generic.SelectingActiveCell(driver, extentTest, testName, testDataIteration);
                string oppname = Element(driver, Control("OppReference", "EnterpriseSales")).GetAttribute("title");
                generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, Ro["Tab"].ToString());
                string[] s = generic.CreateandVerifyPhoneCall1(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString(), Ro["Button"].ToString(), Ro["Activity"].ToString(), Ro["Call To"].ToString(), Ro["Quick Create Form Button"].ToString(), Ro["Call Outcome1"].ToString(), Ro["Action"].ToString());
                generic.MarkComplete(driver, extentTest, testName, testDataIteration, Ro["Action"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "Open IT Sales opportunities");
                generic.SearchPhoneOppo(driver, extentTest, testName, testDataIteration, oppname);
                generic.RelatedPhoneCallTab(driver, extentTest, testName, testDataIteration);
                generic.PhoneCallActivity(driver, extentTest, testName, testDataIteration, s[0]);
                generic.VerifyPhoneCallActivityisReadOnlyOnMarkComplete(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString(), s[0]);
                login.Logout(driver, extentTest, testName, testDataIteration);
            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }

        }

        public static IEnumerable<object[]> RTA_5299()
        {
            foreach (DataRow row in getTestCaseList("ITSalesManager"))
            {
                yield return new object[] { row };
            }
        }
        // <summary>
        /// To verify that the user should be able to fill Call Outcome field as "Reached IT" and then mark the phone call as complete
        /// </summary>
        [TestCategory("25Nov1"), TestCategory("IT Sales"), TestCategory("Regression"), TestCategory("SprintUN")]
        [TestProperty("TestcaseID", "RTA-5299")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5299), DynamicDataSourceType.Method)]
        public void RTA_5299_CallOutcomefieldasReachedITa(DataRow Ro)
        {
            //try
            //{
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
            generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "Open IT Sales opportunities");
            generic.SelectingActiveCell(driver, extentTest, testName, testDataIteration);
            string oppname = Element(driver, Control("OppReference", "EnterpriseSales")).GetAttribute("title");
            generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, Ro["Tab"].ToString());
            string[] s = generic.CreateandVerifyPhoneCall1(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString(), Ro["Button"].ToString(), Ro["Activity"].ToString(), Ro["Call To"].ToString(), Ro["Quick Create Form Button"].ToString(), Ro["Call Outcome2"].ToString(), Ro["Action"].ToString());

            generic.MarkComplete(driver, extentTest, testName, testDataIteration, Ro["Action"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
            generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "Open IT Sales opportunities");
            generic.SearchPhoneOppo(driver, extentTest, testName, testDataIteration, oppname);
            generic.RelatedPhoneCallTab(driver, extentTest, testName, testDataIteration);
            generic.PhoneCallActivity(driver, extentTest, testName, testDataIteration, s[0]);
            generic.VerifyPhoneCallActivityisReadOnlyOnMarkComplete(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString(), s[0]);
            login.Logout(driver, extentTest, testName, testDataIteration);


            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}

        }


        public static IEnumerable<object[]> RTA_5311()
        {
            foreach (DataRow row in getTestCaseList("ITSalesManager"))
            {
                yield return new object[] { row };
            }
        }
        // <summary>
        /// To verify that the user should be able to fill Call Outcome field as "Further action scheduled" and then mark the phone call as complete
        /// </summary>
        [TestCategory("28Aug"), TestCategory("IT Sales"), TestCategory("Regression"), TestCategory("SprintUN")]
        [TestProperty("TestcaseID", "RTA-5311")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5311), DynamicDataSourceType.Method)]
        public void RTA_5311_CallOutcomefieldasCustomerNotReached(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "Open IT Sales opportunities");
                generic.SelectingActiveCell(driver, extentTest, testName, testDataIteration);
                string oppname = Element(driver, Control("OppReference", "EnterpriseSales")).GetAttribute("title");
                generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, Ro["Tab"].ToString());
                string[] s = generic.CreateandVerifyPhoneCall1(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString(), Ro["Button"].ToString(), Ro["Activity"].ToString(), Ro["Call To"].ToString(), Ro["Quick Create Form Button"].ToString(), Ro["Call Outcome3"].ToString(), Ro["Action"].ToString());
                generic.MarkComplete(driver, extentTest, testName, testDataIteration, Ro["Action"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "Open IT Sales opportunities");
                generic.SearchPhoneOppo(driver, extentTest, testName, testDataIteration, oppname);
                generic.RelatedPhoneCallTab(driver, extentTest, testName, testDataIteration);
                generic.PhoneCallActivity(driver, extentTest, testName, testDataIteration, s[0]);
                //generic.VerifyPhoneCallActivityisReadOnlyOnMarkComplete(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString(), s[0]);
                login.Logout(driver, extentTest, testName, testDataIteration);

            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }

        }
        public static IEnumerable<object[]> RTA_15041_15042()
        {
            foreach (DataRow row in getTestCaseList("ITSalesManager"))
            {
                yield return new object[] { row };
            }
        }
        // <summary>
        // CRM-5485
        /// To verify that the user should be able to fill Call Outcome field as "Further action scheduled" and then mark the phone call as complete
        /// </summary>
        [TestCategory("IT Sales"), TestCategory("Regression"), TestCategory("Sprint3640"), TestCategory("Priority1")]
        [TestProperty("TestcaseID", "RTA-15041")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_15041_15042), DynamicDataSourceType.Method)]
        public void RTA_15041_15042_OpportunityviewsarerenamedcorrectlyITSalesManager(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, Ro["Option1"].ToString());
                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, Ro["Option2"].ToString());
                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, Ro["Option3"].ToString());
                ////Verifiying removed OPP views///////////
                generic.VerifyRenamedOppUpdated(driver, extentTest, testName, testDataIteration, "Open Opps - New customers D-3");
                generic.VerifyRenamedOppUpdated(driver, extentTest, testName, testDataIteration, "New Opps - New customer D-3");
                generic.VerifyRenamedOppUpdated(driver, extentTest, testName, testDataIteration, "Unassigned Opps - New customers D-3");
                ///RTA-15042/////
                generic.VerifyRenamedOppUpdated(driver, extentTest, testName, testDataIteration, "IT Sales Centre Opportunities");
                generic.VerifyRenamedOppUpdated(driver, extentTest, testName, testDataIteration, "IT Sales Opportunities current year");
                generic.VerifyRenamedOppUpdated(driver, extentTest, testName, testDataIteration, "IT Sales Opportunities D10 D03");
                generic.VerifyRenamedOppUpdated(driver, extentTest, testName, testDataIteration, "My IT Sales Opportunities to follow up");
                generic.VerifyRenamedOppUpdated(driver, extentTest, testName, testDataIteration, "My IT Sales Opportunities D10 D03");

                ////////Verefiying fot IT sales User///////////////
                generic.Loginafterlogout(driver, extentTest, testName, testDataIteration, Ro["UserName1"].ToString(), Ro["Password1"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, Ro["Option1"].ToString());
                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, Ro["Option2"].ToString());
                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, Ro["Option3"].ToString());
                ////Verifiying removed OPP views///////////
                generic.VerifyRenamedOppUpdated(driver, extentTest, testName, testDataIteration, "Open Opps - New customers D-3");
                generic.VerifyRenamedOppUpdated(driver, extentTest, testName, testDataIteration, "New Opps - New customer D-3");
                generic.VerifyRenamedOppUpdated(driver, extentTest, testName, testDataIteration, "Unassigned Opps - New customers D-3");
                ///RTA-15042/////
                generic.VerifyRenamedOppUpdated(driver, extentTest, testName, testDataIteration, "IT Sales Centre Opportunities");
                generic.VerifyRenamedOppUpdated(driver, extentTest, testName, testDataIteration, "IT Sales Opportunities current year");
                generic.VerifyRenamedOppUpdated(driver, extentTest, testName, testDataIteration, "IT Sales Opportunities D10 D03");
                generic.VerifyRenamedOppUpdated(driver, extentTest, testName, testDataIteration, "My IT Sales Opportunities to follow up");
                generic.VerifyRenamedOppUpdated(driver, extentTest, testName, testDataIteration, "My IT Sales Opportunities D10 D03");

                login.Logout(driver, extentTest, testName, testDataIteration);

            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }

        }
        public static IEnumerable<object[]> RTA_15046()
        {
            foreach (DataRow row in getTestCaseList("ITSalesManager"))
            {
                yield return new object[] { row };
            }
        }
        // <summary>
        // CRM-5484
        /// To verify that the user should be able to fill Call Outcome field as "Further action scheduled" and then mark the phone call as complete
        /// </summary>
        [TestCategory("Priority1"), TestCategory("IT Sales Manager"), TestCategory("Regression"), TestCategory("Sprint3640")]
        [TestProperty("TestcaseID", "RTA-15046")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_15046), DynamicDataSourceType.Method)]
        public void RTA_15046_Opportunityareaviewselectorwithallthecolumns(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "IT Sales Manager Dashboard");
                generic.VerifyColumnManagerdashboard(driver, extentTest, testName, testDataIteration);


                generic.Loginafterlogout(driver, extentTest, testName, testDataIteration, Ro["UserName1"].ToString(), Ro["Password1"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "IT Sales Manager Dashboard");
                generic.VerifyColumnManagerdashboard(driver, extentTest, testName, testDataIteration);
                login.Logout(driver, extentTest, testName, testDataIteration);
            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }

        }
        public static IEnumerable<object[]> RTA_14830()
        {
            foreach (DataRow row in getTestCaseList("ITSalesUser"))
            {
                yield return new object[] { row };
            }
        }
        // <summary>
        // CRM-5486
        /// To verify that the user should be able to fill Call Outcome field as "Further action scheduled" and then mark the phone call as complete
        /// </summary>
        [TestCategory("21Oct"), TestCategory("IT Sales"), TestCategory("Regression"), TestCategory("Sprint3640")]
        [TestProperty("TestcaseID", "RTA-14830")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_14830), DynamicDataSourceType.Method)]
        public void RTA_14830_OpenITSalesopportunitiesfunnelgraphisshownbasedonBPFstages(DataRow Ro)
        {
            //try
            //{
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity0"].ToString());
            generic.SelectValuesFromDashboardDropDown(driver, extentTest, testName, testDataIteration, "IT Sales Manager");
            //generic.scrollDownOpportunityPage(driver, extentTest, testName, testDataIteration);
            generic.scrollMiddleDashboard(driver, extentTest, testName, testDataIteration, "Scroll");

            generic.Verifyfunnelstages(driver, extentTest, testName, testDataIteration);

            //////////Verefiying fot IT sales Manager///////////////
            generic.Loginafterlogout(driver, extentTest, testName, testDataIteration, Ro["UserName4"].ToString(), Ro["Password4"].ToString());
            // generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity0"].ToString());
            generic.SelectValuesFromDashboardDropDown(driver, extentTest, testName, testDataIteration, "IT Sales Manager");
            //generic.scrollDownOpportunityPage(driver, extentTest, testName, testDataIteration);
            generic.scrollMiddleDashboard(driver, extentTest, testName, testDataIteration, "Scroll");

            generic.Verifyfunnelstages(driver, extentTest, testName, testDataIteration);
            login.Logout(driver, extentTest, testName, testDataIteration);
            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}
        }
        public static IEnumerable<object[]> RTA_14831()
        {
            foreach (DataRow row in getTestCaseList("ITSalesUser"))
            {
                yield return new object[] { row };
            }
        }
        // <summary>
        // CRM-5486
        /// To verify that the user should be able to fill Call Outcome field as "Further action scheduled" and then mark the phone call as complete
        /// </summary>
        [TestCategory("21Oct"), TestCategory("0309"), TestCategory("Regression"), TestCategory("Sprint3640")]
        [TestProperty("TestcaseID", "RTA-14831")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_14831), DynamicDataSourceType.Method)]
        public void RTA_14831_MyopenITSalesopportunitiesfunnelgraphisshownbasedonBPFstages(DataRow Ro)
        {
            //try
            //{
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity0"].ToString());
            generic.SelectValuesFromDashboardDropDown(driver, extentTest, testName, testDataIteration, "IT Sales Support User");
            generic.scrollMiddleDown(driver, extentTest, testName, testDataIteration);
            generic.Verifyfunnelstages(driver, extentTest, testName, testDataIteration);

            ////////Verefiying fot IT sales manager///////////////
            generic.Loginafterlogout(driver, extentTest, testName, testDataIteration, Ro["UserName4"].ToString(), Ro["Password4"].ToString());
            //generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity0"].ToString());
            generic.SelectValuesFromDashboardDropDown(driver, extentTest, testName, testDataIteration, "IT Sales Support User");
            generic.scrollMiddleDown(driver, extentTest, testName, testDataIteration);
            generic.Verifyfunnelstages(driver, extentTest, testName, testDataIteration);
            login.Logout(driver, extentTest, testName, testDataIteration);
            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}
        }
        public static IEnumerable<object[]> RTA_14828()
        {
            foreach (DataRow row in getTestCaseList("ITSalesUser"))
            {
                yield return new object[] { row };
            }
        }
        // <summary>
        //CRM-5486
        /// To verify that the user should be able to fill Call Outcome field as "Further action scheduled" and then mark the phone call as complete
        /// </summary>
        [TestCategory("21Oct"), TestCategory("IT Sales"), TestCategory("Regression"), TestCategory("Sprint3640")]
        [TestProperty("TestcaseID", "RTA-14828")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_14828), DynamicDataSourceType.Method)]
        public void RTA_14828_MyopenITSalesuseroppfunnelgraphisshowonBPFstages(DataRow Ro)
        {
            //try
            //{
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity0"].ToString());
            generic.SelectValuesFromDashboardDropDown(driver, extentTest, testName, testDataIteration, "IT Inside Sales User");

            generic.scrollMiddleDown(driver, extentTest, testName, testDataIteration);
            generic.Verifyfunnelstages(driver, extentTest, testName, testDataIteration);

            ////////Verefiying fot IT sales manager///////////////
            generic.Loginafterlogout(driver, extentTest, testName, testDataIteration, Ro["UserName4"].ToString(), Ro["Password4"].ToString());
            //generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity0"].ToString());
            generic.SelectValuesFromDashboardDropDown(driver, extentTest, testName, testDataIteration, "IT Inside Sales User");
            generic.scrollMiddleDown(driver, extentTest, testName, testDataIteration);
            generic.Verifyfunnelstages(driver, extentTest, testName, testDataIteration);
            login.Logout(driver, extentTest, testName, testDataIteration);
            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}
        }
        public static IEnumerable<object[]> RTA_5300()
        {
            foreach (DataRow row in getTestCaseList("ITSalesManager"))
            {
                yield return new object[] { row };
            }
        }
        // <summary>
        /// To verify that the user should be able to fill Call Outcome field as "Further action scheduled" and then mark the phone call as complete
        /// </summary>
        [TestCategory("RerunMay9"), TestCategory("IT Sales"), TestCategory("Regression"), TestCategory("Sprint32NCS")]
        [TestProperty("TestcaseID", "RTA-5300")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5300), DynamicDataSourceType.Method)]
        public void RTA_5300_CallOutcomefieldasFurtheractionscheduled(DataRow Ro)
        {
            //try
            //{
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
            generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "Open IT Sales opportunities");
            generic.SelectingActiveCell(driver, extentTest, testName, testDataIteration);
            string oppname = Element(driver, Control("OppReference", "EnterpriseSales")).GetAttribute("title");
            generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, Ro["Tab"].ToString());
            string[] s = generic.CreateandVerifyPhoneCall1(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString(), Ro["Button"].ToString(), Ro["Activity"].ToString(), Ro["Call To"].ToString(), Ro["Quick Create Form Button"].ToString(), Ro["Call Outcome4"].ToString(), Ro["Action"].ToString());
            generic.MarkComplete(driver, extentTest, testName, testDataIteration, Ro["Action"].ToString());
            //generic.VerifyPhoneCallActivityisReadOnlyOnMarkComplete(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString(), s[0]);
            login.Logout(driver, extentTest, testName, testDataIteration);

            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}

        }
        public static IEnumerable<object[]> RTA_11282()
        {
            foreach (DataRow row in getTestCaseList("ITSalesUser"))
            {
                yield return new object[] { row };
            }
        }
        // <summary>
        //CRM-3997
        /// To verify that the user should be able to fill Call Outcome field as "Further action scheduled" and then mark the phone call as complete
        /// </summary>
        [TestCategory("Regression"), TestCategory("IT Sales"), TestCategory("25Nov"), TestCategory("Sprint3640"), TestCategory("CreateOppEnt")]
        [TestProperty("TestcaseID", "RTA-11282")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_11282), DynamicDataSourceType.Method)]
        public void RTA_11282_CentrehasbeenremovedonthePhonecall(DataRow Ro)
        {
            //try
            //{

            string time = System.DateTime.Now.ToString();
            ///////////For IT Sales User////////////
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());

            generic.CreateNewOppITSalesWithData(driver, extentTest, testName, testDataIteration, "TestLNameEmail");

            generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, "Activities");
            generic.VerifyCentreField(driver, extentTest, testName, testDataIteration, Ro["Button"].ToString());



            ////////////For IWG Field Sales Agent //////////////
            generic.Loginafterlogout(driver, extentTest, testName, testDataIteration, Ro["UserName2"].ToString(), Ro["Password2"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, "Sales");
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());

            generic.CreateNewOpportunityEntetrprise(driver, extentTest, testDataIteration, testName, Ro["TestOpportunityAccountName"].ToString(), time, "Ukraine", Ro["TestCurrency"].ToString(), "On Line", Ro["TestMajorSource"].ToString(), "Acquisition", Ro["TestNewContact"].ToString());

            generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, "Activities");
            generic.VerifyCentreField(driver, extentTest, testName, testDataIteration, Ro["Button"].ToString());


            login.Logout(driver, extentTest, testName, testDataIteration);
            generic.DiscardChanges(driver, extentTest, testName, testDataIteration);

            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}

        }
        public static IEnumerable<object[]> RTA_11281()
        {
            foreach (DataRow row in getTestCaseList("ITSalesUser"))
            {
                yield return new object[] { row };
            }
        }
        // <summary>
        //CRM-3997
        /// To verify that the user should be able to fill Call Outcome field as "Further action scheduled" and then mark the phone call as complete
        /// </summary>
        [TestCategory("Priority1"), TestCategory("25Nov"), TestCategory("Regression"), TestCategory("Sprint3640"), TestCategory("CreateOppEnt")]
        [TestProperty("TestcaseID", "RTA-11281")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_11281), DynamicDataSourceType.Method)]
        public void RTA_11281_CentrehasbeenremovedonthePhonecall(DataRow Ro)
        {
            try
            {
                string time = System.DateTime.Now.ToString();
                ///////////For IT Sales User////////////
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                //generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "Open IT Sales opportunities");
                //generic.SelectingActiveCell(driver, extentTest, testName, testDataIteration);
                generic.CreateNewOppITSalesWithData(driver, extentTest, testName, testDataIteration, "TestLNameEmail");
                generic.VerifyCentreFieldinTask(driver, extentTest, testName, testDataIteration);

                //////////////For IWG Corporate Sales User //////////////
                //generic.Loginafterlogout(driver, extentTest, testName, testDataIteration, Ro["UserName1"].ToString(), Ro["Password1"].ToString());
                //generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                //generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                //generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "Open IT Sales opportunities");
                //generic.SelectingActiveCell(driver, extentTest, testName, testDataIteration);
                //generic.VerifyCentreFieldinTask(driver, extentTest, testName, testDataIteration);

                ////////////For IWG Field Sales Agent //////////////
                generic.Loginafterlogout(driver, extentTest, testName, testDataIteration, Ro["UserName2"].ToString(), Ro["Password2"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, "Sales Management");
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                //generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "Open IT Sales opportunities");
                //generic.SelectingActiveCell(driver, extentTest, testName, testDataIteration);
                generic.CreateNewOpportunityEntetrprise(driver, extentTest, testDataIteration, testName, Ro["TestOpportunityAccountName"].ToString(), time, "Ukraine", Ro["TestCurrency"].ToString(), "On Line", Ro["TestMajorSource"].ToString(), "Acquisition", Ro["TestNewContact"].ToString());

                generic.VerifyCentreFieldinTask(driver, extentTest, testName, testDataIteration);

                //////////////For IWG Corporate Sales User //////////////
                //generic.Loginafterlogout(driver, extentTest, testName, testDataIteration, Ro["UserName3"].ToString(), Ro["Password3"].ToString());
                //generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                //generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                //generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "Open IT Sales opportunities");
                //generic.SelectingActiveCell(driver, extentTest, testName, testDataIteration);
                //generic.VerifyCentreFieldinTask(driver, extentTest, testName, testDataIteration);
                login.Logout(driver, extentTest, testName, testDataIteration);

            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }

        }
        public static IEnumerable<object[]> RTA_11280()
        {
            foreach (DataRow row in getTestCaseList("ITSalesUser"))
            {
                yield return new object[] { row };
            }
        }
        // <summary>
        // CRM-3997
        /// To verify that the user should be able to fill Call Outcome field as "Further action scheduled" and then mark the phone call as complete
        /// </summary>
        [TestCategory("21Oct"), TestCategory("IT Sales"), TestCategory("Regression"), TestCategory("Sprint3640")]
        [TestProperty("TestcaseID", "RTA-11280")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_11280), DynamicDataSourceType.Method)]
        public void RTA_11280_CentrehasbeenremovedonthePhonecall(DataRow Ro)
        {
            //try
            //{

            ///////////For IT Sales User////////////
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString());
            generic.VerifyCentreActivities(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());

            ////////////For IWG Corporate Sales User //////////////
            generic.Loginafterlogout(driver, extentTest, testName, testDataIteration, Ro["UserName1"].ToString(), Ro["Password1"].ToString());
            //generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString());
            generic.VerifyCentreActivities(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());

            ////////////For IWG Field Sales Agent //////////////
            generic.Loginafterlogout(driver, extentTest, testName, testDataIteration, Ro["UserName2"].ToString(), Ro["Password2"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString());
            generic.VerifyCentreActivities(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());

            ////////////For IWG Corporate Sales User //////////////
            generic.Loginafterlogout(driver, extentTest, testName, testDataIteration, Ro["UserName3"].ToString(), Ro["Password3"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString());
            generic.VerifyCentreActivities(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            login.Logout(driver, extentTest, testName, testDataIteration);

            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}

        }

        public static IEnumerable<object[]> RTA_11127()
        {
            foreach (DataRow row in getTestCaseList("ITSalesUser"))
            {
                yield return new object[] { row };
            }
        }
        // <summary>
        // CRM-3997
        /// To verify that the user should be able to fill Call Outcome field as "Further action scheduled" and then mark the phone call as complete
        /// </summary>
        [TestCategory("Priority1"), TestCategory("07Sep"), TestCategory("Regression"), TestCategory("Sprint3640")]
        [TestProperty("TestcaseID", "RTA-11127")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_11127), DynamicDataSourceType.Method)]
        public void RTA_11127_CentrehasbeenremovedonthePhonecall(DataRow Ro)
        {
            try
            {

                ///////////For IT Sales User////////////
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity0"].ToString());
                generic.VerifyCentreQuickcreateform(driver, extentTest, testName, testDataIteration);

                //////////////For IWG Corporate Sales User //////////////
                //generic.Loginafterlogout(driver, extentTest, testName, testDataIteration, Ro["UserName1"].ToString(), Ro["Password1"].ToString());
                //generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                //generic.VerifyCentreQuickcreateform(driver, extentTest, testName, testDataIteration);

                ////////////For IWG Field Sales Agent //////////////
                generic.Loginafterlogout(driver, extentTest, testName, testDataIteration, Ro["UserName2"].ToString(), Ro["Password2"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.VerifyCentreQuickcreateform(driver, extentTest, testName, testDataIteration);

                //////////////For IWG Corporate Sales User //////////////
                //generic.Loginafterlogout(driver, extentTest, testName, testDataIteration, Ro["UserName3"].ToString(), Ro["Password3"].ToString());
                //generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                //generic.VerifyCentreQuickcreateform(driver, extentTest, testName, testDataIteration);
                login.Logout(driver, extentTest, testName, testDataIteration);

            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }

        }
        public static IEnumerable<object[]> RTA_11118()
        {
            foreach (DataRow row in getTestCaseList("ITSalesUser"))
            {
                yield return new object[] { row };
            }
        }
        // <summary>
        // CRM-3997
        /// To verify that the user should be able to fill Call Outcome field as "Further action scheduled" and then mark the phone call as complete
        /// </summary>
        [TestCategory("Priority1"), TestCategory("26Aug"), TestCategory("Regression"), TestCategory("Sprint3640")]
        [TestProperty("TestcaseID", "RTA-11118")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_11118), DynamicDataSourceType.Method)]
        public void RTA_11118_CentrehasbeenremovedonthePhonecall(DataRow Ro)
        {
            //try
            //{

            ///////////For IT Sales User////////////
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString());
            //generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "IT Sales Phone Calls");
            //generic.SelectingActiveCell(driver, extentTest, testName, testDataIteration);
            generic.NavigateToRibbonButtonActivities(driver, extentTest, testName, testDataIteration, Ro["RibbonActivityPhoneCall"].ToString());

            generic.VerifyCentreinOpenPhoneCall(driver, extentTest, testName, testDataIteration);

            //////////////For IWG Corporate Sales User //////////////
            //generic.Loginafterlogout(driver, extentTest, testName, testDataIteration, Ro["UserName1"].ToString(), Ro["Password1"].ToString());
            //generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            //generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString());
            //generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "IT Sales Phone Calls");
            //generic.SelectingActiveCell(driver, extentTest, testName, testDataIteration);
            //generic.VerifyCentreinOpenPhoneCall(driver, extentTest, testName, testDataIteration);

            ////////////For IWG Field Sales Agent //////////////
            generic.Loginafterlogout(driver, extentTest, testName, testDataIteration, Ro["UserName2"].ToString(), Ro["Password2"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Entity5"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString());
            //generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "IT Sales Phone Calls");
            //generic.SelectingActiveCell(driver, extentTest, testName, testDataIteration);
            generic.NavigateToRibbonButtonActivities(driver, extentTest, testName, testDataIteration, Ro["RibbonActivityPhoneCall"].ToString());

            generic.VerifyCentreinOpenPhoneCall(driver, extentTest, testName, testDataIteration);

            ////////////For IWG Corporate Sales User //////////////
            //generic.Loginafterlogout(driver, extentTest, testName, testDataIteration, Ro["UserName3"].ToString(), Ro["Password3"].ToString());
            //generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            //generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString());
            //generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "IT Sales Phone Calls");
            //generic.SelectingActiveCell(driver, extentTest, testName, testDataIteration);
            //generic.VerifyCentreinOpenPhoneCall(driver, extentTest, testName, testDataIteration);
            login.Logout(driver, extentTest, testName, testDataIteration);
            generic.DiscardChanges(driver, extentTest, testName, testDataIteration);

            //    }

            //        catch (Exception e)
            //        {

            //            AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}

        }
        public static IEnumerable<object[]> RTA_15051()
        {
            foreach (DataRow row in getTestCaseList("ITSalesUser"))
            {
                yield return new object[] { row };
            }
        }
        // <summary>
        // CRM-5484
        /// To verify that IT Sales User are not able to export "IT Sales Manager dashboard" view into excel
        /// </summary>
        [TestCategory("Priority1"), TestCategory("Bug"), TestCategory("Regression"), TestCategory("Sprint3640"), TestCategory("24Nov")]
        [TestProperty("TestcaseID", "RTA-15051")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_15051), DynamicDataSourceType.Method)]
        public void RTA_15051_NotabletoexportITSalesManagerdashboardviewintoexcel(DataRow Ro)
        {
            //try
            //{
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, Ro["OppDropdown1"].ToString());
            generic.VerifyExcelButton(driver, extentTest, testName, testDataIteration, Ro["ExcelButton"].ToString());
            login.Logout(driver, extentTest, testName, testDataIteration);
            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}

        }
        public static IEnumerable<object[]> RTA_15050()
        {
            foreach (DataRow row in getTestCaseList("ITSalesManager"))
            {
                yield return new object[] { row };
            }
        }
        // <summary>
        // CRM-5484
        /// To verify that IT Sales User are not able to export "IT Sales Manager dashboard" view into excel
        /// </summary>
        [TestCategory("RerunMay9"), TestCategory("IT Sales"), TestCategory("Regression"), TestCategory("Sprint3640"), TestCategory("27Aug"), TestCategory("SprintUN")]
        [TestProperty("TestcaseID", "RTA-15050")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_15050), DynamicDataSourceType.Method)]
        public void RTA_15050_NotabletoexportITSalesManagerdashboardviewintoexcel(DataRow Ro)
        {

            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());

                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, Ro["dashboardview"].ToString());
                generic.VerifyExcelButtondisplayed(driver, extentTest, testName, testDataIteration, Ro["Excelbutton"].ToString());

                login.Logout(driver, extentTest, testName, testDataIteration);
            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }

        }
        public static IEnumerable<object[]> RTA_5317()
        {
            foreach (DataRow row in getTestCaseList("ITSalesManager"))
            {
                yield return new object[] { row };
            }
        }
        // <summary>
        /// To verify that the user should be able to fill Call Outcome field as "Wrong Contact Details" and then mark the phone call as complete
        /// </summary>
        [TestCategory("25Nov1"), TestCategory("IT Sales"), TestCategory("Regression"), TestCategory("SprintUN")]
        [TestProperty("TestcaseID", "RTA-5317")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5317), DynamicDataSourceType.Method)]
        public void RTA_5317_CalloutcomefieldasWrongContactDetails(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "Open IT Sales opportunities");
                generic.SelectingActiveCell(driver, extentTest, testName, testDataIteration);
                string oppname = Element(driver, Control("OppReference", "EnterpriseSales")).GetAttribute("title");
                generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, Ro["Tab"].ToString());
                string[] s = generic.CreateandVerifyPhoneCall1(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString(), Ro["Button"].ToString(), Ro["Activity"].ToString(), Ro["Call To"].ToString(), Ro["Quick Create Form Button"].ToString(), Ro["Call Outcome5"].ToString(), Ro["Action"].ToString());
                generic.MarkComplete(driver, extentTest, testName, testDataIteration, Ro["Action"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "Open IT Sales opportunities");
                generic.SearchPhoneOppo(driver, extentTest, testName, testDataIteration, oppname);
                generic.RelatedPhoneCallTab(driver, extentTest, testName, testDataIteration);
                generic.PhoneCallActivity(driver, extentTest, testName, testDataIteration, s[0]);
                generic.VerifyPhoneCallActivityisReadOnlyOnMarkComplete(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString(), s[0]);
                login.Logout(driver, extentTest, testName, testDataIteration);

            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }

        }
        public static IEnumerable<object[]> RTA_5306()
        {
            foreach (DataRow row in getTestCaseList("ITSalesManager"))
            {
                yield return new object[] { row };
            }
        }
        // <summary>
        /// To verify that the system will schedule a new phone call with customer based on the newly scheduled date
        /// </summary>
        [TestCategory("smoke"), TestCategory("IT Sales"), TestCategory("Regression"), TestCategory("RerunMay9"), TestCategory("Sprint32NCS")]
        [TestProperty("TestcaseID", "RTA-5306")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5306), DynamicDataSourceType.Method)]
        public void RTA_5306_SystemschedulePhoneCall(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "Open IT Sales opportunities");
                generic.SelectingActiveCell(driver, extentTest, testName, testDataIteration);
                string oppname = Element(driver, Control("OppReference", "EnterpriseSales")).GetAttribute("title");
                generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, Ro["Tab"].ToString());
                String[] s = generic.CreateandVerifyPhoneCall1(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString(), Ro["Button"].ToString(), Ro["Activity"].ToString(), Ro["Call To"].ToString(), Ro["Quick Create Form Button"].ToString(), Ro["Call Outcome4"].ToString(), Ro["Action"].ToString());
                generic.MarkComplete(driver, extentTest, testName, testDataIteration, Ro["Action1"].ToString());
                //generic.VerifyPhoneCallActivityisReadOnlyOnMarkComplete(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString(), s[0]);
                //generic.VerifywhethernewPhonecallActivityisCreated(driver, extentTest, testName, testDataIteration, s[0], s[1], Ro["Entity2"].ToString());
                login.Logout(driver, extentTest, testName, testDataIteration);

            }
            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }

        }
        public static IEnumerable<object[]> RTA_5292()
        {
            foreach (DataRow row in getTestCaseList("ITSalesUser"))
            {
                yield return new object[] { row };
            }
        }
        // <summary>
        /// To Verify that IT Sales user can Create a phone call from the opportunity and the Sales pipeline in the phone call will be filled with the same value as the opportunity.
        /// </summary>
        [TestCategory("smoke"), TestCategory("IT Sales"), TestCategory("Regression"), TestCategory("QARefactorfail"), TestCategory("Sprint32NCS"), TestCategory("28Aug")]
        [TestProperty("TestcaseID", "RTA-5292")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5292), DynamicDataSourceType.Method)]
        public void RTA_5292_Salespipelinephonecallfilledwithsamevalue(DataRow Ro)
        {
            //try
            //{

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "IT Sales Manager Dashboard");
            generic.SelectingActiveCell(driver, extentTest, testName, testDataIteration);
            string stage = generic.VerifyBPFinOpportunityScreen(driver, extentTest, testName, testDataIteration);
            generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, Ro["Tab"].ToString());
            generic.CreateandVerifyPhoneCall(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString(), Ro["Button"].ToString(), Ro["Activity"].ToString(), Ro["Call To"].ToString(), Ro["Quick Create Form Button"].ToString(), Ro["Call Outcome5"].ToString(), Ro["Action"].ToString());
            generic.VerifySalesPipeline(driver, extentTest, testName, testDataIteration, stage);
            login.Logout(driver, extentTest, testName, testDataIteration);
            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}
        }







        public static IEnumerable<object[]> RTA_5552()
        {
            foreach (DataRow row in getTestCaseList("ITSalesUser"))
            {
                yield return new object[] { row };
            }
        }

        // <summary>
        /// Verify that the IT Sales User is able to see the "Opportunity Brokers Tab" in Opportunity form
        /// </summary>
        [TestCategory("smoke"), TestCategory("IT Sales"), TestCategory("Regression"), TestCategory("Sprint32NCS"), TestCategory("11Sep")]
        [TestProperty("TestcaseID", "RTA-5552")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5552), DynamicDataSourceType.Method)]
        public void RTA_5552_ITSalesUser_OpportunityBrokersTab(DataRow Ro)
        {
            try
            {

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "Open IT Sales opportunities");
                generic.SelectingActiveCell(driver, extentTest, testName, testDataIteration);
                generic.NavigateToRelatedTabEntities(driver, extentTest, testName, testDataIteration, Ro["RelatedTabEntity"].ToString());
                generic.VerifyOpportunityBrokerAssociationView(driver, extentTest, testName, testDataIteration);
                login.Logout(driver, extentTest, testName, testDataIteration);
            }

            catch (Exception e)
            {


                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }

        }
        public static IEnumerable<object[]> RTA_5549()
        {
            foreach (DataRow row in getTestCaseList("ITSalesUser"))
            {
                yield return new object[] { row };
            }
        }
        // <summary>
        /// Verify that the IT Sales User is able to see the "Opportunity Brokers Tab" in Opportunity form
        /// </summary>
        [TestCategory("smoke"), TestCategory("IT Sales"), TestCategory("Regression"), TestCategory("SprintUN")]
        [TestProperty("TestcaseID", "RTA-5549")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5549), DynamicDataSourceType.Method)]
        public void RTA_5549_ITSalesUser_OpportunityStakeholdersTab(DataRow Ro)
        {
            try
            {

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "Open IT Sales opportunities");
                generic.SelectingActiveCell(driver, extentTest, testName, testDataIteration);
                generic.VerifyRelatedTabDoesNotContains(driver, extentTest, testName, testDataIteration, Ro["StakeholdersTab"].ToString());
                login.Logout(driver, extentTest, testName, testDataIteration);
            }

            catch (Exception e)
            {


                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }

        }

        public static IEnumerable<object[]> RTA_5293()
        {
            foreach (DataRow row in getTestCaseList("ITSalesUser"))
            {
                yield return new object[] { row };
            }
        }

        // <summary>
        /// IT Sales user needs to Verify Newly created Phone call and their Fields
        /// </summary>
        [TestCategory("smoke"), TestCategory("IT Sales"), TestCategory("Regression"), TestCategory("QARefactorfail"), TestCategory("Sprint32NCS")]
        [TestProperty("TestcaseID", "RTA-5293")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5293), DynamicDataSourceType.Method)]
        public void RTA_5293_VerifyNewlycreatedPhonecallandtheirFields(DataRow Ro)
        {

            //try
            //{

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "Open IT Sales opportunities");
            generic.SelectingActiveCell(driver, extentTest, testName, testDataIteration);
            generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, Ro["Tab"].ToString());
            String[] s = generic.CreateandVerifyPhoneCall(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString(), Ro["Button"].ToString(), Ro["Activity"].ToString(), Ro["Call To"].ToString(), Ro["Quick Create Form Button"].ToString(), Ro["Call Outcome4"].ToString(), Ro["Action"].ToString());
            generic.VerifyPhoneCallFieldsinTable(driver, extentTest, testName, testDataIteration, Ro["Phoneheader1"].ToString(), Ro["Phoneheader2"].ToString(), Ro["Phoneheader3"].ToString(), Ro["Phoneheader4"].ToString(), Ro["Phoneheader5"].ToString(), Ro["Phoneheader6"].ToString(), Ro["Phoneheader7"].ToString(), Ro["Phoneheader8"].ToString(), Ro["Phoneheader9"].ToString(), Ro["Phoneheader10"].ToString(), Ro["Phoneheader11"].ToString(), Ro["Phoneheader12"].ToString(), Ro["Phoneheader13"].ToString());
            login.Logout(driver, extentTest, testName, testDataIteration);
            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}

        }

        public static IEnumerable<object[]> RTA_5309()
        {
            foreach (DataRow row in getTestCaseList("ITSalesManager"))
            {
                yield return new object[] { row };
            }
        }
        // <summary>
        ///To verify that the user is able to close the opportunity as Close as lost if the phone call outcome is No services required
        /// </summary>
        [TestCategory("RerunMay9"), TestCategory("IT Sales"), TestCategory("Regression"), TestCategory("QARefactorfail"), TestCategory("Sprint32NCS")]
        [TestProperty("TestcaseID", "RTA-5309")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5309), DynamicDataSourceType.Method)]
        public void RTA_5309_VerifyUserisabletoCloseOpportunityasLost(DataRow Ro)
        {
            try
            {


                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "Open IT Sales opportunities");
                string s = generic.SelectingActiveCell(driver, extentTest, testName, testDataIteration);
                string oppname = Element(driver, Control("OppReference", "EnterpriseSales")).GetAttribute("title");

                generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, Ro["Tab"].ToString());
                String[] s1 = generic.CreateandVerifyPhoneCall1(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString(), Ro["Button"].ToString(), Ro["Activity"].ToString(), Ro["Call To"].ToString(), Ro["Quick Create Form Button"].ToString(), Ro["Call Outcome1"].ToString(), Ro["Action"].ToString());
                generic.MarkComplete(driver, extentTest, testName, testDataIteration, Ro["Action"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "Open IT Sales opportunities");
                ///generic.SelectingActiveCell(driver, extentTest, testName, testDataIteration);
                generic.SearchPhoneOppo(driver, extentTest, testName, testDataIteration, oppname);
                //generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "Closed Opportunities");
                //generic.SearchforRecord(driver, extentTest, testName, testDataIteration, s);
                // generic.ClickParticularRecord(driver, extentTest, testName, testDataIteration, s);
                generic.SelectOpportunityheader(driver, extentTest, testName, testDataIteration, Ro["LostButton"].ToString(), "Form:opportunity");
                generic.CloseasLostWon(driver, extentTest, testName, testDataIteration, Ro["Lost"].ToString(), Ro["Status Reason Lost"].ToString(), Ro["Closelostwonpopup"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "Closed Opportunities");
                generic.SelectingActiveCell(driver, extentTest, testName, testDataIteration);
                generic.SelectOpportunityheader(driver, extentTest, testName, testDataIteration, "Reopen Opportunity", "Form:opportunity");

                //  generic.SearchforRecord(driver, extentTest, testName, testDataIteration, s);
                //  generic.ClickParticularRecord(driver, extentTest, testName, testDataIteration, s);
                // generic.ReOpenOpportunity(driver, extentTest, testName, testDataIteration, "Reopen Opportunity");
                login.Logout(driver, extentTest, testName, testDataIteration);

            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }

        }

        public static IEnumerable<object[]> RTA_16267()
        {
            foreach (DataRow row in getTestCaseList("DirectSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        // <summary>
        ///To Verify whether the user cant close the opportunity as Won,when payment received is No.
        //////CRM 3216
        /// </summary>
        [TestCategory("25Nov"), TestCategory("IT Sales"), TestCategory("Regression"), TestCategory("GlobalP11"), TestCategory("GlobalP11A")]
        [TestProperty("TestcaseID", "RTA-16267")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_16267), DynamicDataSourceType.Method)]
        public void RTA_16267_CantcloseOppasWon(DataRow Ro)
        {
            //try
            //{

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
            string Time = System.DateTime.Now.ToString();
            generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);
            generic.CreateNewContactITSalesEmailTrack(driver, extentTest, testName, testDataIteration, Time);
            generic.NavigateToRelatedTabOppsITSales(driver, extentTest, testName, testDataIteration, "Opportunities");
            generic.QuickCreateOppFromContact1(driver, extentTest, testName, testDataIteration, Time, "1", "TrackEmailOpp", Ro["Country"].ToString(), Ro["Source1"].ToString(), Ro["MajorSource"].ToString(), Ro["MinorSource2"].ToString());

            // click propose button

            generic.VerifyProposestageforPRNo(driver, extentTest, testName, testDataIteration, Ro["processstage"].ToString(), Ro["Duration"].ToString(), "Number of People", "3", "5", Ro["Status"].ToString());
            //generic.SelectOpportunityheader(driver, extentTest, testName, testDataIteration, "Reopen Opportunity", "Form:opportunity");
            //Close as won
            generic.SelectOpportunityheader(driver, extentTest, testName, testDataIteration, Ro["WonButton"].ToString(), "Form:opportunity");
            generic.VerifyOpportunitystatuswon(driver, extentTest, testDataIteration, testName, "Open");
            login.Logout(driver, extentTest, testName, testDataIteration);

            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}

        }
        public static IEnumerable<object[]> RTA_16270()
        {
            foreach (DataRow row in getTestCaseList("DirectSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        // <summary>
        ///To Verify whether the user cant close the opportunity as Won,when payment received is No.
        //////CRM 3216
        /// </summary>
        [TestCategory("HF"), TestCategory("IT Sales"), TestCategory("Regression"), TestCategory("GlobalP11"), TestCategory("GlobalP11A")]
        [TestProperty("TestcaseID", "RTA-16270")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_16270), DynamicDataSourceType.Method)]
        public void RTA_16270_OpportunityisautosetasWon(DataRow Ro)
        {
            //try
            //{

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
            string Time = System.DateTime.Now.ToString();
            generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);
            generic.CreateNewContactITSalesEmailTrack(driver, extentTest, testName, testDataIteration, Time);
            generic.NavigateToRelatedTabOppsITSales(driver, extentTest, testName, testDataIteration, "Opportunities");
            generic.QuickCreateOppFromContact1(driver, extentTest, testName, testDataIteration, Time, "1", "TrackEmailOpp", Ro["Country"].ToString(), Ro["Source"].ToString(), Ro["MajorSource"].ToString(), Ro["MinorSource2"].ToString());

            // click propose button
            generic.VerifyProposestagewon(driver, extentTest, testName, testDataIteration, Ro["processstage"].ToString(), Ro["Duration"].ToString(), "Number of People", "3", "5", Ro["Status"].ToString());

            generic.VerifyOpportunitystatustrue(driver, extentTest, testDataIteration, testName);
            login.Logout(driver, extentTest, testName, testDataIteration);

            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}

        }


        public static IEnumerable<object[]> RTA_14824()
        {
            foreach (DataRow row in getTestCaseList("ITSalesUser"))
            {
                yield return new object[] { row };
            }
        }

        [TestCategory("RerunMay9"), TestCategory("IT Sales"), TestCategory("Regression"), TestCategory("SprintUN"), TestCategory("GlobalP11A")]
        [TestProperty("TestcaseID", "RTA-14824")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_14824), DynamicDataSourceType.Method)]
        public void RTA_14824_CreateContactFromEmail(DataRow Ro)
        {
            try
            {

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Tab"].ToString());
                string Time = System.DateTime.Now.ToString();
                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, "Email");
                generic.QuickCreateContactToEmail(driver, extentTest, testName, testDataIteration);
                generic.QuickCreateContactITSales(driver, extentTest, testDataIteration, testName, Time, "1");
                login.Logout(driver, extentTest, testName, testDataIteration);

            }


            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }

        }


        public static IEnumerable<object[]> RTA_5628()
        {
            foreach (DataRow row in getTestCaseList("EnterpriseSalesManager"))
            {
                yield return new object[] { row };
            }
        }

        [TestCategory("RerunMay9"), TestCategory("IT Sales"), TestCategory("Regression"), TestCategory("SprintUN"), TestCategory("GlobalP11A")]
        [TestProperty("TestcaseID", "RTA-5628")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5628), DynamicDataSourceType.Method)]
        public void RTA_5628_ManCanSeeDBSaManDir(DataRow Ro)
        {
            try
            {

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["DashboardEntity"].ToString());
                string Time = System.DateTime.Now.ToString();
                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "Sales Manager Dashboard");
                login.Logout(driver, extentTest, testName, testDataIteration);

            }


            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }

        }
        public static IEnumerable<object[]> RTA_16272()
        {
            foreach (DataRow row in getTestCaseList("DirectSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        // <summary>
        ///To Verify whether the user cant close the opportunity as Lost,when payment received is No.
        //////CRM 3216, 7612
        /// </summary>
        [TestCategory("25Nov"), TestCategory("IT Sales"), TestCategory("Regression"), TestCategory("GlobalP11"), TestCategory("24Nov")]
        [TestProperty("TestcaseID", "RTA-16272")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_16272), DynamicDataSourceType.Method)]
        public void RTA_16272_Verifyusercancloseopp(DataRow Ro)
        {
            //try
            //{

            // Login to the application
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
            string Time = System.DateTime.Now.ToString();
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);

            // Create new contact
            generic.CreateNewContactITSales(driver, extentTest, testName, testDataIteration, Time);
            generic.NavigateToRelatedTabOppsITSales(driver, extentTest, testName, testDataIteration, "Opportunities");

            // Quick create Opp
            generic.QuickCreateOppFromContact1(driver, extentTest, testName, testDataIteration, Time, "1", "TrackEmailOpp", Ro["Country"].ToString(), Ro["Source"].ToString(), Ro["MajorSource"].ToString(), Ro["MinorSource2"].ToString());
            string oppname = generic.GetOppID(driver, extentTest, testName, testDataIteration);
            // click propose button
            generic.VerifyProposestage(driver, extentTest, testName, testDataIteration, Ro["processstage"].ToString(), Ro["Duration"].ToString(), "Number of People", "3", "5", Ro["Status"].ToString());

            generic.SelectOpportunityheader(driver, extentTest, testName, testDataIteration, "Reopen Opportunity", "Form:opportunity");
            //Close as lost
            generic.SelectOpportunityheader(driver, extentTest, testName, testDataIteration, Ro["LostButton"].ToString(), "Form:opportunity");

            // Verify the status is Lost
            //generic.verifyoppstatusreasonforlost(driver, extentTest, testName, testDataIteration);
            //generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration,"Close as Lost");
            generic.VerifyStatusReasonPaymentYesCloseAsLost(driver, extentTest, testName, testDataIteration);

            //Verifying workflow will not trigger when opp is closed:

            //Refresh opportunity
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());
            //generic.SelectOpportunityheader(driver, extentTest, testName, testDataIteration, "Reopen Opportunity", "Form:opportunity");
            generic.ReplacingNewReccommendedCentre(driver, extentTest, testName, testDataIteration, Ro["BussinessCentre"].ToString());
            //Booking a tour
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Button"].ToString());
            string centre1 = Ro["BussinessCentre"].ToString();
            generic.Bookaslot(driver, extentTest, testName, testDataIteration, Time, oppname);
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());

            //Navigating to activities and verifying language in payload
            generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, Ro["Tab"].ToString());
            generic.VerifyNoTourConfirmationCR(driver, extentTest, testName, testDataIteration, "Tour Confirmation Email");

            login.Logout(driver, extentTest, testName, testDataIteration);

            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}

        }
        public static IEnumerable<object[]> RTA_16273()
        {
            foreach (DataRow row in getTestCaseList("DirectSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        // <summary>
        ///To Verify whether the user cant close the opportunity as Won,when payment received is No.
        //////CRM 3216
        /// </summary>
        [TestCategory("RerunMay9"), TestCategory("IT Sales"), TestCategory("Regression"), TestCategory("GlobalP11"), TestCategory("GlobalP11A")]
        [TestProperty("TestcaseID", "RTA-16273")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_16273), DynamicDataSourceType.Method)]
        public void RTA_16273_Closeopportunityaslost(DataRow Ro)
        {
            //try
            //{

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
            string Time = System.DateTime.Now.ToString();
            generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);
            generic.CreateNewContactITSalesEmailTrack(driver, extentTest, testName, testDataIteration, Time);
            generic.NavigateToRelatedTabOppsITSales(driver, extentTest, testName, testDataIteration, "Opportunities");
            generic.QuickCreateOppFromContact1(driver, extentTest, testName, testDataIteration, Time, "1", "TrackEmailOpp", Ro["Country"].ToString(), Ro["Source"].ToString(), Ro["MajorSource"].ToString(), Ro["MinorSource2"].ToString());

            // click propose button

            generic.VerifyProposestage(driver, extentTest, testName, testDataIteration, Ro["processstage"].ToString(), Ro["Duration"].ToString(), "Number of People", "3", "5", Ro["Status"].ToString());
            generic.SelectOpportunityheader(driver, extentTest, testName, testDataIteration, "Refresh", "Form:opportunity");
            generic.SelectOpportunityheader(driver, extentTest, testName, testDataIteration, "Reopen Opportunity", "Form:opportunity");
            //Close as won
            generic.SelectOpportunityheader(driver, extentTest, testName, testDataIteration, Ro["LostButton"].ToString(), "Form:opportunity");
            generic.verifyoppstatusreasonforlost(driver, extentTest, testName, testDataIteration);

            login.Logout(driver, extentTest, testName, testDataIteration);

            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}

        }
        public static IEnumerable<object[]> RTA_16505()
        {
            foreach (DataRow row in getTestCaseList("DirectSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        // <summary>
        ///Verify Topic Field for a new Opportunity when Centre, Product, No of People,Account field is empty..
        //////CRM 4397
        /// </summary>
        [TestCategory("RerunMay9"), TestCategory("CRM-4397"), TestCategory("Regression"), TestCategory(""), TestCategory("PriorReg"), TestCategory("RTA16505")]
        [TestProperty("TestcaseID", "RTA-16505")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_16505), DynamicDataSourceType.Method)]
        public void RTA_16505_VerifyTopicScenario1(DataRow Ro)
        {
            //try
            //{
            //Login to the CRM 
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            //Select Sales in the Main dropdown
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            //Select Opportunity in the submodule tab
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            //Get Current time
            string Time = System.DateTime.Now.ToString();
            //Hiding purecloud as its not required for this scenario
            generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);
            //Create Opportunity based on the input values  in the scenario
            generic.CreateOpportunityFormCondition(driver, extentTest, testName, testDataIteration, Time, "true", "false", "false", "true", "true", "false", "false", "true", "true", "true");
            //Confirm whether the opportunity name displayed based on the input fields given
            generic.VerifyOpportuntyTopic(driver, extentTest, testName, testDataIteration, Time, "true", "false", "false", "true", "true", "false", "false", "true", "true", "true");
            //Logout from CRM
            login.Logout(driver, extentTest, testName, testDataIteration);
            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}

        }

        public static IEnumerable<object[]> RTA_16506()
        {
            foreach (DataRow row in getTestCaseList("DirectSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        // <summary>
        ///To Verify whether the user cant close the opportunity as Won,when payment received is No.
        //////CRM 4397
        /// </summary>
        [TestCategory("07Sep"), TestCategory("CRM-4397"), TestCategory("Regression"), TestCategory("GlobalP11"), TestCategory("GlobalP11A")]
        [TestProperty("TestcaseID", "RTA-16506")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_16506), DynamicDataSourceType.Method)]
        public void RTA_16506_VerifyTopicScenario2(DataRow Ro)
        {
            //try
            //{

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            string Time = System.DateTime.Now.ToString();
            generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);
            generic.HeaderButtonwithoutConfirmation(driver, extentTest, testName, testDataIteration, "New");
            generic.CreateOpportunityFormCondition(driver, extentTest, testName, testDataIteration, Time, "true", "true", "false", "true", "true", "false", "false", "true", "true", "true");
            generic.VerifyOpportuntyTopic(driver, extentTest, testName, testDataIteration, Time, "false", "true", "false", "true", "true", "false", "false", "true", "true", "true");
            login.Logout(driver, extentTest, testName, testDataIteration);
            //    }

            //        catch (Exception e)
            //        {

            //            AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}

        }
        public static IEnumerable<object[]> RTA_16507()
        {
            foreach (DataRow row in getTestCaseList("DirectSalesAgent"))
            {
                yield return new object[] { row };
            }
        }

        // <summary>
        ///To Verify whether the user cant close the opportunity as Won,when payment received is No.
        //////CRM 4397
        /// </summary>
        [TestCategory("RerunMay9"), TestCategory("CRM-4397"), TestCategory("Regression"), TestCategory("GlobalP11"), TestCategory("GlobalP11A")]
        [TestProperty("TestcaseID", "RTA-16507")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_16507), DynamicDataSourceType.Method)]
        public void RTA_16507_VerifyTopicScenario3(DataRow Ro)
        {
            //try
            //{

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            string Time = System.DateTime.Now.ToString();
            generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);
            generic.HeaderButtonwithoutConfirmation(driver, extentTest, testName, testDataIteration, "New");
            generic.CreateOpportunityFormCondition(driver, extentTest, testName, testDataIteration, Time, "true", "true", "false", "true", "true", "false", "true", "true", "true", "true");
            generic.verifyopptopiconecondition(driver, extentTest, testName, testDataIteration, Time, "false", "false", "true");
            login.Logout(driver, extentTest, testName, testDataIteration);
            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}

        }
        public static IEnumerable<object[]> RTA_16508()
        {
            foreach (DataRow row in getTestCaseList("DirectSalesAgent"))
            {
                yield return new object[] { row };
            }
        }

        // <summary>
        ///To Verify whether the user cant close the opportunity as Won,when payment received is No.
        //////CRM 4397
        /// </summary>
        [TestCategory("RerunMay9"), TestCategory("CRM-4397"), TestCategory("Regression"), TestCategory("GlobalP11")]
        [TestProperty("TestcaseID", "RTA-16508")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_16508), DynamicDataSourceType.Method)]
        public void RTA_16508_VerifyTopicScenario4(DataRow Ro)
        {
            //try
            //{

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            string Time = System.DateTime.Now.ToString();
            generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);
            generic.HeaderButtonwithoutConfirmation(driver, extentTest, testName, testDataIteration, "New");
            generic.CreateOpportunityFormCondition(driver, extentTest, testName, testDataIteration, Time, "true", "true", "false", "true", "true", "true", "false", "true", "true", "true");
            generic.verifyopptopiconecondition(driver, extentTest, testName, testDataIteration, Time, "false", "true", "false");

            login.Logout(driver, extentTest, testName, testDataIteration);
            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}

        }

        public static IEnumerable<object[]> RTA_16509()
        {
            foreach (DataRow row in getTestCaseList("DirectSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        // <summary>
        ///To Verify whether the user cant close the opportunity as Won,when payment received is No.
        //////CRM 4397
        /// </summary>
        [TestCategory("RerunMay9"), TestCategory("CRM-4397"), TestCategory("Regression"), TestCategory("GlobalP11")]
        [TestProperty("TestcaseID", "RTA-16509")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_16509), DynamicDataSourceType.Method)]
        public void RTA_16509_VerifyTopicScenario5(DataRow Ro)
        {
            //try
            //{

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            string Time = System.DateTime.Now.ToString();
            generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);
            generic.HeaderButtonwithoutConfirmation(driver, extentTest, testName, testDataIteration, "New");
            generic.CreateOpportunityFormCondition(driver, extentTest, testName, testDataIteration, Time, "true", "true", "true", "true", "true", "false", "false", "true", "true", "true");
            generic.verifyopptopiconecondition(driver, extentTest, testName, testDataIteration, Time, "true", "false", "false");

            login.Logout(driver, extentTest, testName, testDataIteration);
            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}

        }
        public static IEnumerable<object[]> RTA_16510()
        {
            foreach (DataRow row in getTestCaseList("DirectSalesAgent"))
            {
                yield return new object[] { row };
            }
        }

        // <summary>
        ///To Verify whether the user cant close the opportunity as Won,when payment received is No.
        //////CRM 4397
        /// </summary>
        [TestCategory("RerunMay9"), TestCategory("CRM-4397"), TestCategory("Regression"), TestCategory("GlobalP11"), TestCategory("GlobalP11A")]
        [TestProperty("TestcaseID", "RTA-16510")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_16510), DynamicDataSourceType.Method)]
        public void RTA_16510_VerifyTopicScenario5(DataRow Ro)
        {
            //try
            //{

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            string Time = System.DateTime.Now.ToString();
            generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);
            generic.HeaderButtonwithoutConfirmation(driver, extentTest, testName, testDataIteration, "New");
            generic.CreateOpportunityFormCondition(driver, extentTest, testName, testDataIteration, Time, "true", "true", "false", "true", "true", "true", "true", "true", "true", "true");
            generic.verifytopicwith2fields(driver, extentTest, testName, testDataIteration, Time, "false", "true", "true");
            login.Logout(driver, extentTest, testName, testDataIteration);
            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}

        }

        public static IEnumerable<object[]> RTA_16511()
        {
            foreach (DataRow row in getTestCaseList("DirectSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        // <summary>
        ///To Verify whether the user cant close the opportunity as Won,when payment received is No.
        //////CRM 4397
        /// </summary>
        [TestCategory("07Sep"), TestCategory("CRM-4397"), TestCategory("Regression"), TestCategory("GlobalP11"), TestCategory("GlobalP11A")]
        [TestProperty("TestcaseID", "RTA-16511")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_16511), DynamicDataSourceType.Method)]
        public void RTA_16511_VerifyTopicScenario6(DataRow Ro)
        {
            //try
            //{

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            string Time = System.DateTime.Now.ToString();
            generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);
            generic.HeaderButtonwithoutConfirmation(driver, extentTest, testName, testDataIteration, "New");
            generic.CreateOpportunityFormCondition(driver, extentTest, testName, testDataIteration, Time, "true", "true", "true", "true", "true", "true", "false", "true", "true", "true");
            generic.verifytopicwith2fields(driver, extentTest, testName, testDataIteration, Time, "true", "true", "false");
            login.Logout(driver, extentTest, testName, testDataIteration);
            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}

        }


        public static IEnumerable<object[]> RTA_16512()
        {
            foreach (DataRow row in getTestCaseList("DirectSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        // <summary>
        ///To Verify whether the user cant close the opportunity as Won,when payment received is No.
        //////CRM 4397
        /// </summary>
        [TestCategory("RerunMay9"), TestCategory("CRM-4397"), TestCategory("Regression"), TestCategory("GlobalP11")]
        [TestProperty("TestcaseID", "RTA-16512")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_16512), DynamicDataSourceType.Method)]
        public void RTA_16512_VerifyTopicScenario7(DataRow Ro)
        {
            //try
            //{

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            string Time = System.DateTime.Now.ToString();
            generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);
            generic.HeaderButtonwithoutConfirmation(driver, extentTest, testName, testDataIteration, "New");
            generic.CreateOpportunityFormCondition(driver, extentTest, testName, testDataIteration, Time, "true", "true", "true", "true", "true", "false", "true", "true", "true", "true");
            generic.verifytopicwith2fields(driver, extentTest, testName, testDataIteration, Time, "true", "false", "true");
            login.Logout(driver, extentTest, testName, testDataIteration);
            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}

        }

        public static IEnumerable<object[]> RTA_16513()
        {
            foreach (DataRow row in getTestCaseList("DirectSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        // <summary>
        ///To Verify whether the user cant close the opportunity as Won,when payment received is No.
        //////CRM 4397
        /// </summary>
        [TestCategory("HF"), TestCategory("CRM-4397"), TestCategory("Regression"), TestCategory("GlobalP11")]
        [TestProperty("TestcaseID", "RTA-16513")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_16513), DynamicDataSourceType.Method)]
        public void RTA_16513_VerifyTopicScenario8(DataRow Ro)
        {
            //try
            //{

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            string Time = System.DateTime.Now.ToString();
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);

            generic.CreateOpportunityFormCondition(driver, extentTest, testName, testDataIteration, Time, "true", "true", "true", "true", "true", "true", "true", "true", "true", "true");
            generic.VerifyOpportuntyTopic(driver, extentTest, testName, testDataIteration, Time, "true", "true", "true", "true", "true", "true", "true", "true", "true", "true");

            generic.VerifyTopicAfterUpdateBusinessCentre(driver, extentTest, testName, testDataIteration, "Oslo, Nydalen Conference Centre");
            login.Logout(driver, extentTest, testName, testDataIteration);
            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}

        }

        public static IEnumerable<object[]> RTA_16516()
        {
            foreach (DataRow row in getTestCaseList("DirectSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        // <summary>
        ///To Verify whether the user cant close the opportunity as Won,when payment received is No.
        //////CRM 4397
        /// </summary>
        [TestCategory("07Sep"), TestCategory("CRM-4397"), TestCategory("25Aug"), TestCategory("Regression"), TestCategory("GlobalP11")]
        [TestProperty("TestcaseID", "RTA-16516")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_16516), DynamicDataSourceType.Method)]
        public void RTA_16516_VerifyTopicScenario10(DataRow Ro)
        {

            //try
            //{

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString());
            string Time = DateTime.UtcNow.ToString("yyyy-MM-dd HH:mm:ss.fff", CultureInfo.InvariantCulture);
            generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);
            generic.HeaderButtonwithoutConfirmation(driver, extentTest, testName, testDataIteration, "New");
            generic.CreateLeadFormCondition(driver, extentTest, testName, testDataIteration, Time, "true", "false", "false", "true", "true", "false", "false", "true", "true", "true", "true", "true");
            //  generic.HeaderButtonwithoutConfirmation(driver, extentTest, testName, testDataIteration, "Qualify");
            generic.NavigateToRelatedTabEntitiesLead(driver, extentTest, testName, testDataIteration, Ro["RelatedTabEntity"].ToString());
            generic.OppSelect(driver, extentTest, testName, testDataIteration);
            generic.VerifyOpportuntyTopic(driver, extentTest, testName, testDataIteration, Time, "true", "false", "false", "true", "true", "false", "false", "true", "true", "true");
            login.Logout(driver, extentTest, testName, testDataIteration);
            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}

        }

        public static IEnumerable<object[]> RTA_16518()
        {
            foreach (DataRow row in getTestCaseList("DirectSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        // <summary>
        ///To Verify whether the user cant close the opportunity as Won,when payment received is No.
        //////CRM 4397
        /// </summary>
        [TestCategory("RerunMay9"), TestCategory("CRM-4397"), TestCategory("Regression"), TestCategory("GlobalP11")]
        [TestProperty("TestcaseID", "RTA-16518")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_16518), DynamicDataSourceType.Method)]
        public void RTA_16518_VerifyTopicScenario11(DataRow Ro)
        {
            //try
            //{

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString());
            string Time = DateTime.UtcNow.ToString("yyyy-MM-dd HH:mm:ss.fff", CultureInfo.InvariantCulture);
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
            generic.HeaderButtonwithoutConfirmation(driver, extentTest, testName, testDataIteration, "New");
            generic.CreateLeadFormCondition(driver, extentTest, testName, testDataIteration, Time, "true", "true", "false", "true", "true", "false", "false", "true", "true", "true", "true", "true");
            //  generic.HeaderButtonwithoutConfirmation(driver, extentTest, testName, testDataIteration, "Qualify");
            generic.NavigateToRelatedTabEntitiesLead(driver, extentTest, testName, testDataIteration, Ro["RelatedTabEntity"].ToString());
            generic.OppSelect(driver, extentTest, testName, testDataIteration);

            generic.VerifyOpportuntyTopic(driver, extentTest, testName, testDataIteration, Time, "false", "true", "false", "true", "true", "false", "false", "true", "true", "true");
            login.Logout(driver, extentTest, testName, testDataIteration);
            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}

        }
        public static IEnumerable<object[]> RTA_17652()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }

        // <summary>
        ///To Verify whether the user can assign activity.
        //////CRM 4397
        /// </summary>
        [TestCategory("RerunMay9"), TestCategory("CRM-3356"), TestCategory("Regression"), TestCategory("GlobalP11")]
        [TestProperty("TestcaseID", "RTA-17652")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_17652), DynamicDataSourceType.Method)]
        public void RTA_17652_Verify_Assign_Lead_Scenario01(DataRow Ro)
        {
            //try
            //{
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity3"].ToString());
            string Time = System.DateTime.Now.ToString();
            generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);
            generic.HeaderButtonwithoutConfirmation(driver, extentTest, testName, testDataIteration, "New");
            generic.CreateLeadFormCondition(driver, extentTest, testName, testDataIteration, Time, "true", "true", "true", "true", "true", "true", "true", "true", "true", "true", "true", "true");
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, "Refresh");
            //generic.AssignActivitySales(driver, extentTest, testName, testDataIteration, "User", "CRM Test3");
            generic.AssignActivitySales(driver, extentTest, testName, testDataIteration);
            login.Logout(driver, extentTest, testName, testDataIteration);
            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}

        }

        public static IEnumerable<object[]> RTA_17653()
        {
            foreach (DataRow row in getTestCaseList("SalesAdmin"))
            {
                yield return new object[] { row };
            }
        }
        // <summary>
        ///To Verify whether the user can assign activity.
        //////CRM 4397
        /// </summary>
        [TestCategory("RerunMay9"), TestCategory("CRM-3356"), TestCategory("Regression"), TestCategory("26Aug"), TestCategory("SprintUN"), TestCategory("07Sep")]
        [TestProperty("TestcaseID", "RTA-17653")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_17653), DynamicDataSourceType.Method)]
        public void RTA_17653_Verify_Assign_Lead_Scenario02(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown1(driver, extentTest, testName, testDataIteration, Ro["SalesMan"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity3"].ToString());
                string Time = System.DateTime.Now.ToString();
                generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "My Open Leads");
                try
                {
                    generic.SelectingActiveCell(driver, extentTest, testName, testDataIteration);

                    // generic.HeaderButtonwithoutConfirmation(driver, extentTest, testName, testDataIteration, "New");
                    //generic.CreateLeadFormCondition(driver, extentTest, testName, testDataIteration, Time, "true", "true", "true", "true", "true", "true", "true", "true", "true", "true", "true", "true");


                    generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, "Refresh");

                    generic.AssignActivitySales(driver, extentTest, testName, testDataIteration, "User", "CRM Test3");
                    generic.VerifyAssignedTeam(driver, extentTest, testName, testDataIteration, "CRM Test3");

                    generic.AssignActivitySales(driver, extentTest, testName, testDataIteration, "User", "CRM Test1");
                    generic.VerifyAssignedPermissionError(driver, extentTest, testName, testDataIteration);

                    generic.AssignActivitySales(driver, extentTest, testName, testDataIteration, "User", "IWG Internal Sales teams");
                    generic.VerifyAssignedTeam(driver, extentTest, testName, testDataIteration, "IWG Internal Sales teams");
                }
                catch { }

                login.Logout(driver, extentTest, testName, testDataIteration);
            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }

        }

        public static IEnumerable<object[]> RTA_17660()
        {
            foreach (DataRow row in getTestCaseList("ASM"))
            {
                yield return new object[] { row };
            }
        }
        // <summary>
        ///To Verify whether the user can assign activity.
        //////CRM 4397
        /// </summary>
        [TestCategory("07Sep"), TestCategory("25Nov"), TestCategory("CRM-3356"), TestCategory("Regression"), TestCategory("GlobalP11NA"), TestCategory("SprintUN"), TestCategory("07Sep")]
        [TestProperty("TestcaseID", "RTA-17660")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_17660), DynamicDataSourceType.Method)]
        public void RTA_17660_Verify_Assign_Lead_Scenario03(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown1(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity3"].ToString());
                string Time = System.DateTime.Now.ToString();
                generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
                generic.HeaderButtonwithoutConfirmation(driver, extentTest, testName, testDataIteration, "New");
                generic.CreateLeadFormCondition(driver, extentTest, testName, testDataIteration, Time, "true", "true", "true", "true", "true", "true", "true", "true", "true", "true", "true", "true");
                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, "Refresh");
                generic.AssignActivitySales(driver, extentTest, testName, testDataIteration, "User", "IWG Internal Sales teams");
                generic.VerifyAssignedTeam(driver, extentTest, testName, testDataIteration, "IWG Internal Sales teams");
                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, "Refresh");
                login.Logout(driver, extentTest, testName, testDataIteration);
            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }

        }
        public static IEnumerable<object[]> RTA_17697()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }

        // <summary>
        ///To Verify whether the user can assign activity.
        //////CRM 4397
        /// </summary>
        [TestCategory("RerunMay9"), TestCategory("CRM-3356"), TestCategory("Regression"), TestCategory("GlobalP11NA")]
        [TestProperty("TestcaseID", "RTA-17660")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_17697), DynamicDataSourceType.Method)]
        public void RTA_17697_Verify_Assign_Activity_Scenario01(DataRow Ro)
        {
            //try
            //{
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            string Time = System.DateTime.Now.ToString();
            generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);
            generic.CreateOpportunityFormCondition(driver, extentTest, testName, testDataIteration, Time, "true", "true", "true", "true", "true", "true", "true", "true", "true", "true");
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, "Refresh");
            generic.CreatePhoneCallActivityOppo(driver, extentTest, testName, testDataIteration, "CRM Test3", "Subject01");
            generic.CreatePhoneCallActivityOppo(driver, extentTest, testName, testDataIteration, "CRM Test5", "Subject02");
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, "Refresh");

            //generic.AssignActivitySales(driver, extentTest, testName, testDataIteration, "User", "CRM Test 20");
            generic.AssignOpportunity(driver, extentTest, testName, testDataIteration, "User", "CRM Test 20");
            generic.VerifyAssignedTeam(driver, extentTest, testName, testDataIteration, "CRM Test 20");

            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, "Refresh");
            generic.NavigateTabsOpportunity(driver, extentTest, testName, testDataIteration, "activities");

            generic.NavigateActivitiesAssociatedView(driver, extentTest, testName, testDataIteration);
            generic.SearchActivityRecord(driver, extentTest, testName, testDataIteration, "Subject01");
            generic.VerifyActivityOwner(driver, extentTest, testName, testDataIteration, "CRM Test3");

            generic.SearchActivityRecord(driver, extentTest, testName, testDataIteration, "Subject02");
            generic.VerifyActivityOwner(driver, extentTest, testName, testDataIteration, "CRM Test 20");

            generic.SearchActivityRecord(driver, extentTest, testName, testDataIteration, "Subject02");
            generic.OpenActivityAssociatedView(driver, extentTest, testName, testDataIteration);

            generic.UpdateActiviy(driver, extentTest, testName, testDataIteration);
            generic.AssignActivitySales(driver, extentTest, testName, testDataIteration, "User", "CRM Test1");
            generic.VerifyAssignedTeam(driver, extentTest, testName, testDataIteration, "IWG Internal Sales teams");

            generic.scrollDownOpportunity(driver, extentTest, testName, testDataIteration);
            generic.scrollDownOpportunity(driver, extentTest, testName, testDataIteration);
            generic.scrollDownOpportunity(driver, extentTest, testName, testDataIteration);

            generic.NavigateToRegardingOpp(driver, extentTest, testName, testDataIteration);

            generic.VerifyAssignedTeamNotUpdated(driver, extentTest, testName, testDataIteration, "CRM Test 20");

            login.Logout(driver, extentTest, testName, testDataIteration);
            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}

        }
        public static IEnumerable<object[]> RTA_16519()
        {
            foreach (DataRow row in getTestCaseList("DirectSalesAgent"))
            {
                yield return new object[] { row };
            }
        }

        // <summary>
        ///To Verify whether the user cant close the opportunity as Won,when payment received is No.
        //////CRM 4397
        /// </summary>
        [TestCategory("08Sep"), TestCategory("CRM-4397"), TestCategory("Regression"), TestCategory("GlobalP11")]
        [TestProperty("TestcaseID", "RTA-16519")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_16519), DynamicDataSourceType.Method)]
        public void RTA_16519_VerifyTopicScenario12(DataRow Ro)
        {
            //try
            //{

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString());
            string Time = DateTime.UtcNow.ToString("yyyy-MM-dd HH:mm:ss.fff", CultureInfo.InvariantCulture);
            generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);
            generic.HeaderButtonwithoutConfirmation(driver, extentTest, testName, testDataIteration, "New");
            generic.CreateLeadFormCondition(driver, extentTest, testName, testDataIteration, Time, "true", "true", "false", "true", "true", "false", "true", "true", "true", "true", "true", "true");
            //  generic.HeaderButtonwithoutConfirmation(driver, extentTest, testName, testDataIteration, "Qualify");
            generic.NavigateToRelatedTabEntitiesLead(driver, extentTest, testName, testDataIteration, Ro["RelatedTabEntity"].ToString());
            generic.OppSelect(driver, extentTest, testName, testDataIteration);

            generic.VerifyOpportuntyTopic(driver, extentTest, testName, testDataIteration, Time, "true", "true", "false", "true", "true", "false", "true", "true", "true", "true");
            login.Logout(driver, extentTest, testName, testDataIteration);
            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}

        }

        public static IEnumerable<object[]> RTA_16520()
        {
            foreach (DataRow row in getTestCaseList("DirectSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        // <summary>
        ///To Verify whether the user cant close the opportunity as Won,when payment received is No.
        //////CRM 4397
        /// </summary>
        [TestCategory("RerunMay9"), TestCategory("CRM-4397"), TestCategory("Regression"), TestCategory("GlobalP11")]
        [TestProperty("TestcaseID", "RTA-16520")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_16520), DynamicDataSourceType.Method)]
        public void RTA_16520_VerifyTopicScenario13(DataRow Ro)
        {
            //try
            //{

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString());
            string Time = DateTime.UtcNow.ToString("yyyy-MM-dd HH:mm:ss.fff", CultureInfo.InvariantCulture);
            generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);
            generic.HeaderButtonwithoutConfirmation(driver, extentTest, testName, testDataIteration, "New");
            generic.CreateLeadFormCondition(driver, extentTest, testName, testDataIteration, Time, "true", "true", "false", "true", "true", "true", "false", "true", "true", "true", "true", "true");
            //generic.HeaderButtonwithoutConfirmation(driver, extentTest, testName, testDataIteration, "Qualify");
            generic.VerifyOpportuntyTopic(driver, extentTest, testName, testDataIteration, Time, "true", "true", "false", "true", "true", "true", "false", "true", "true", "true");
            login.Logout(driver, extentTest, testName, testDataIteration);
            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}

        }
        public static IEnumerable<object[]> RTA_16521()
        {
            foreach (DataRow row in getTestCaseList("DirectSalesAgent"))
            {
                yield return new object[] { row };
            }
        }

        // <summary>
        ///To Verify whether the user cant close the opportunity as Won,when payment received is No.
        //////CRM 4397
        /// </summary>
        [TestCategory("RerunMay9"), TestCategory("CRM-4397"), TestCategory("Regression"), TestCategory("GlobalP11")]
        [TestProperty("TestcaseID", "RTA-16521")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_16521), DynamicDataSourceType.Method)]
        public void RTA_16521_VerifyTopicScenario14(DataRow Ro)
        {

            //try
            //{

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString());
            string Time = DateTime.UtcNow.ToString("yyyy-MM-dd HH:mm:ss.fff", CultureInfo.InvariantCulture);
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
            generic.HeaderButtonwithoutConfirmation(driver, extentTest, testName, testDataIteration, "New");
            generic.CreateLeadFormCondition(driver, extentTest, testName, testDataIteration, Time, "true", "true", "true", "true", "true", "true", "false", "true", "true", "true", "true", "true");
            // generic.HeaderButtonwithoutConfirmation(driver, extentTest, testName, testDataIteration, "Save");
            generic.VerifyOpportuntyTopic(driver, extentTest, testName, testDataIteration, Time, "true", "true", "true", "true", "true", "true", "false", "true", "true", "true");
            login.Logout(driver, extentTest, testName, testDataIteration);
            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}

        }

        public static IEnumerable<object[]> RTA_16522()
        {
            foreach (DataRow row in getTestCaseList("DirectSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        // <summary>
        ///To Verify whether the user cant close the opportunity as Won,when payment received is No.
        //////CRM 4397
        /// </summary>
        [TestCategory("RerunMay9"), TestCategory("CRM-4397"), TestCategory("Regression"), TestCategory("GlobalP11"), TestCategory("14082020")]
        [TestProperty("TestcaseID", "RTA-16522")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_16522), DynamicDataSourceType.Method)]
        public void RTA_16522_VerifyTopicScenario15(DataRow Ro)
        {
            //try
            //{

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString());
            string Time = DateTime.UtcNow.ToString("yyyy-MM-dd HH:mm:ss.fff", CultureInfo.InvariantCulture);
            generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);
            generic.HeaderButtonwithoutConfirmation(driver, extentTest, testName, testDataIteration, "New");
            generic.CreateLeadFormCondition(driver, extentTest, testName, testDataIteration, Time, "true", "true", "false", "true", "true", "true", "true", "true", "true", "true", "true", "true");
            //generic.HeaderButtonwithoutConfirmation(driver, extentTest, testName, testDataIteration, "Qualify");
            generic.VerifyOpportuntyTopic(driver, extentTest, testName, testDataIteration, Time, "true", "true", "false", "true", "true", "true", "true", "true", "true", "true");
            login.Logout(driver, extentTest, testName, testDataIteration);
            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}

        }

        public static IEnumerable<object[]> RTA_16523()
        {
            foreach (DataRow row in getTestCaseList("DirectSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        // <summary>
        ///To Verify whether the user cant close the opportunity as Won,when payment received is No.
        //////CRM 4397
        /// </summary>
        [TestCategory("07Sep"), TestCategory("CRM-4397"), TestCategory("Regression"), TestCategory("GlobalP11"), TestCategory("14082020")]
        [TestProperty("TestcaseID", "RTA-16523")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_16523), DynamicDataSourceType.Method)]
        public void RTA_16523_VerifyTopicScenario16(DataRow Ro)
        {
            //try
            //{

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString());
            string Time = DateTime.UtcNow.ToString("yyyy-MM-dd HH:mm:ss.fff", CultureInfo.InvariantCulture);
            generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);
            generic.HeaderButtonwithoutConfirmation(driver, extentTest, testName, testDataIteration, "New");
            generic.CreateLeadFormCondition(driver, extentTest, testName, testDataIteration, Time, "true", "true", "true", "true", "true", "true", "false", "true", "true", "true", "true", "true");
            // generic.HeaderButtonwithoutConfirmation(driver, extentTest, testName, testDataIteration, "Qualify");
            generic.NavigateToRelatedTabEntitiesLead(driver, extentTest, testName, testDataIteration, Ro["RelatedTabEntity"].ToString());
            generic.OppSelect(driver, extentTest, testName, testDataIteration);
            generic.VerifyOpportuntyTopic(driver, extentTest, testName, testDataIteration, Time, "true", "true", "true", "true", "true", "true", "false", "true", "true", "true");
            login.Logout(driver, extentTest, testName, testDataIteration);
            //    }

            //        catch (Exception e)
            //        {

            //            AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}

        }



        public static IEnumerable<object[]> RTA_16524()
        {
            foreach (DataRow row in getTestCaseList("DirectSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        // <summary>
        ///To Verify whether the user cant close the opportunity as Won,when payment received is No.
        //////CRM 4397
        /// </summary>
        [TestCategory("07Sep"), TestCategory("CRM-4397"), TestCategory("Regression"), TestCategory("GlobalP11")]
        [TestProperty("TestcaseID", "RTA-16524")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_16524), DynamicDataSourceType.Method)]
        public void RTA_16524_VerifyTopicScenario16(DataRow Ro)
        {
            //try
            //{

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString());
            string Time = DateTime.UtcNow.ToString("yyyy-MM-dd HH:mm:ss.fff", CultureInfo.InvariantCulture);
            generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);
            generic.HeaderButtonwithoutConfirmation(driver, extentTest, testName, testDataIteration, "New");
            generic.CreateLeadFormCondition(driver, extentTest, testName, testDataIteration, Time, "true", "true", "true", "true", "true", "false", "false", "true", "true", "true", "true", "true");
            // generic.HeaderButtonwithoutConfirmation(driver, extentTest, testName, testDataIteration, "Qualify");
            generic.NavigateToRelatedTabEntitiesLead(driver, extentTest, testName, testDataIteration, Ro["RelatedTabEntity"].ToString());
            generic.OppSelect(driver, extentTest, testName, testDataIteration);
            generic.VerifyOpportuntyTopic(driver, extentTest, testName, testDataIteration, Time, "true", "true", "true", "true", "true", "false", "false", "true", "true", "true");
            login.Logout(driver, extentTest, testName, testDataIteration);
            //    }

            //        catch (Exception e)
            //        {

            //            AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}

        }

        public static IEnumerable<object[]> RTA_16525()
        {
            foreach (DataRow row in getTestCaseList("DirectSalesAgent"))
            {
                yield return new object[] { row };
            }
        }

        // <summary>
        ///To Verify whether the user cant close the opportunity as Won,when payment received is No.
        //////CRM 4397
        /// </summary>
        [TestCategory("RerunMay9"), TestCategory("CRM-4397"), TestCategory("Regression"), TestCategory("GlobalP11")]
        [TestProperty("TestcaseID", "RTA-16525")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_16525), DynamicDataSourceType.Method)]
        public void RTA_16525_VerifyTopicScenario17(DataRow Ro)
        {
            //try
            //{

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString());
            string Time = DateTime.UtcNow.ToString("yyyy-MM-dd HH:mm:ss.fff", CultureInfo.InvariantCulture);
            generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);
            generic.HeaderButtonwithoutConfirmation(driver, extentTest, testName, testDataIteration, "New");
            generic.CreateLeadFormCondition(driver, extentTest, testName, testDataIteration, Time, "true", "true", "true", "true", "true", "true", "true", "true", "true", "true", "true", "true");
            //generic.HeaderButtonwithoutConfirmation(driver, extentTest, testName, testDataIteration, "Qualify");
            generic.NavigateToRelatedTabEntitiesLead(driver, extentTest, testName, testDataIteration, Ro["RelatedTabEntity"].ToString());
            generic.OppSelect(driver, extentTest, testName, testDataIteration);
            generic.VerifyOpportuntyTopic(driver, extentTest, testName, testDataIteration, Time, "true", "true", "true", "true", "true", "true", "true", "true", "true", "true");
            login.Logout(driver, extentTest, testName, testDataIteration);
            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    //Type thisType = this.GetType();
            //    //object testCall = this;
            //    //ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}

        }






        public static IEnumerable<object[]> RTA_17622()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesManager"))
            {
                yield return new object[] { row };
            }
        }
        // <summary>
        ///To Verify whether the user cant close the opportunity as Won,when payment received is No.
        //////CRM 4397
        /// </summary>
        [TestCategory("RerunMay9"), TestCategory("CRM-4397"), TestCategory("Regression"), TestCategory("GlobalP11A")]
        [TestProperty("TestcaseID", "RTA-16525")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_17622), DynamicDataSourceType.Method)]
        public void RTA_17622_Verify_Dailer_Opp(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
                string Time = System.DateTime.Now.ToString();
                generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);
                generic.HeaderButtonwithoutConfirmation(driver, extentTest, testName, testDataIteration, "New");

                generic.CreateOpportunityFormCondition(driver, extentTest, testName, testDataIteration, Time, "true", "true", "true", "true", "true", "true", "true", "true", "true", "true");
                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, "Refresh");
                generic.NavigateTabsOpportunity(driver, extentTest, testName, testDataIteration, "activities");
                generic.SelectActivityOpportunity(driver, extentTest, testName, testDataIteration, Ro["ActivityRequest"].ToString());
                generic.NavigatetoActivityTabs(driver, extentTest, testName, testDataIteration, "Payload & Log");
                generic.VerifyActivityPayload(driver, extentTest, testName, testDataIteration, "Regus", "Day Office", "Open", "//@regustest.com", "CRM.Test4@RegusGroupServices.onmicrosoft.com");
                generic.NavigatetoActivityTabs(driver, extentTest, testName, testDataIteration, "General");
                generic.NavigatetOppFromPayloadDailer(driver, extentTest, testName, testDataIteration);

                generic.UpdateOppwithNewData(driver, extentTest, testName, testDataIteration);
                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, "Refresh");
                generic.NavigateTabsOpportunity(driver, extentTest, testName, testDataIteration, "activities");
                generic.SelectActivityOpportunity(driver, extentTest, testName, testDataIteration, Ro["ActivityRequest"].ToString());
                generic.NavigatetoActivityTabs(driver, extentTest, testName, testDataIteration, "Payload & Log");
                generic.VerifyActivityPayload(driver, extentTest, testName, testDataIteration, "Spaces", "Long Term Office", "Open", "//@regustestnew.com", "CRM.Test3@RegusGroupServices.onmicrosoft.com");

                login.Logout(driver, extentTest, testName, testDataIteration);
            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }

        }

        public static IEnumerable<object[]> RTA_16445()
        {
            foreach (DataRow row in getTestCaseList("DirectSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        // <summary>
        ///To Verify whether the user cant close the opportunity as Won,when payment received is No.
        //////CRM 5573
        /// </summary>
        [TestCategory("25Sep2020"), TestCategory("25Aug"), TestCategory("IT Sales"), TestCategory("Regression"), TestCategory("GlobalP11"), TestCategory("28Sep2020")]
        [TestProperty("TestcaseID", "RTA-16445")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_16445), DynamicDataSourceType.Method)]
        public void RTA_16445_VerifythatCountryfieldismandatoryinnewLeadform(DataRow Ro)
        {
            //try
            //{

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString());
            string Time = System.DateTime.Now.ToString();
            generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);
            generic.createleaddirectsalescountry(driver, extentTest, testName, testDataIteration, "AutomationLead" + Time, Ro["Email"].ToString(), Ro["BussinessPhone"].ToString(), Ro["Source"].ToString(), Ro["MajorSource"].ToString(), Ro["MinorSource2"].ToString(), Time, "", "", "", "", "", "");
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString());
            generic.DiscardChanges(driver, extentTest, testName, testDataIteration);
            login.Logout(driver, extentTest, testName, testDataIteration);
            generic.DiscardChanges(driver, extentTest, testName, testDataIteration);
            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}

        }
        public static IEnumerable<object[]> RTA_16446()
        {
            foreach (DataRow row in getTestCaseList("DirectSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        // <summary>
        ///To Verify whether the user cant close the opportunity as Won,when payment received is No.
        //////CRM 5573
        /// </summary>
        [TestCategory("RerunMay9"), TestCategory("IT Sales"), TestCategory("Regression"), TestCategory("25Aug"), TestCategory("GlobalP11")]
        [TestProperty("TestcaseID", "RTA-16446")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_16446), DynamicDataSourceType.Method)]
        public void RTA_16446_CountryfieldismandatoryinnewQuickcreateLeadform(DataRow Ro)
        {
            //try
            //{

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            string Time = System.DateTime.Now.ToString();
            generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);
            generic.QuickcreateITsales(driver, extentTest, testName, testDataIteration, "Lead");
            generic.QuickcreateLeadITsales(driver, extentTest, testName, testDataIteration, "AutomationLead" + Time, Ro["Source"].ToString(), Ro["MajorSource"].ToString(), Ro["MinorSource2"].ToString(), Time);
            login.Logout(driver, extentTest, testName, testDataIteration);
            //    }

            //        catch (Exception e)
            //        {

            //            AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}

        }
        public static IEnumerable<object[]> RTA_16447()
        {
            foreach (DataRow row in getTestCaseList("DirectSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        // <summary>
        ///To Verify whether the user cant close the opportunity as Won,when payment received is No.
        //////CRM 5573
        /// </summary>
        [TestCategory("RerunMay9"), TestCategory("IT Sales"), TestCategory("25Aug"), TestCategory("Regression"), TestCategory("GlobalP11")]
        [TestProperty("TestcaseID", "RTA-16447")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_16447), DynamicDataSourceType.Method)]
        public void RTA_16447_CountryfieldMandtryinnewOppform(DataRow Ro)
        {
            //try
            //{

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            string time = System.DateTime.Now.ToString();
            generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);
            generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
            generic.CreateNewOpportunityEntetrprisedirectsales(driver, extentTest, testDataIteration, testName, Ro["TestOpportunityAccountName"].ToString(), time, "", Ro["TestCurrency"].ToString(), Ro["TestChannel"].ToString(), Ro["TestMajorSource"].ToString(), Ro["TestMinorSource"].ToString(), Ro["TestNewContact"].ToString());
            login.Logout(driver, extentTest, testName, testDataIteration);
            //    }

            //        catch (Exception e)
            //        {

            //            AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}

        }
        public static IEnumerable<object[]> RTA_16448()
        {
            foreach (DataRow row in getTestCaseList("DirectSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        // <summary>
        ///To Verify whether the user cant close the opportunity as Won,when payment received is No.
        //////CRM 5573
        /// </summary>
        [TestCategory("RerunMay9"), TestCategory("IT Sales"), TestCategory("25Aug"), TestCategory("Regression"), TestCategory("GlobalP11"), TestCategory("GlobalP11A")]
        [TestProperty("TestcaseID", "RTA-16448")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_16448), DynamicDataSourceType.Method)]
        public void RTA_16448_CountryfieldMandtrynewQCOpp(DataRow Ro)
        {
            //try
            //{

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            string Time = System.DateTime.Now.ToString();
            generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);
            generic.QuickcreateITsales(driver, extentTest, testName, testDataIteration, "Opportunity");
            generic.QuickcreateOpportunityITsales(driver, extentTest, testName, testDataIteration, Ro["Source"].ToString(), Ro["MajorSource"].ToString(), Ro["MinorSource2"].ToString(), Time);
            login.Logout(driver, extentTest, testName, testDataIteration);
            //    }

            //        catch (Exception e)
            //        {

            //            AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}

        }
        public static IEnumerable<object[]> RTA_16541()
        {
            foreach (DataRow row in getTestCaseList("DirectSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        // <summary>
        ///Verify that Lang Pref set to UKEnglish in new lead if Country filled &lang & BusinessPhone empty
        //////CRM 5573
        /// </summary>
        [TestCategory("RerunMay9"), TestCategory("IT Sales"), TestCategory("Regression"), TestCategory("GlobalP11"), TestCategory("GlobalP11A")]
        [TestProperty("TestcaseID", "RTA-16541")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_16541), DynamicDataSourceType.Method)]
        public void RTA_16541_UKEnginusPhnEmpty(DataRow Ro)
        {
            //try
            //{

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString());
            string Time = System.DateTime.Now.ToString();
            generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);
            generic.VerifyLanguagePreference(driver, extentTest, testName, testDataIteration, "AutomationLead" + Time, Ro["Email"].ToString(), "", Ro["Source"].ToString(), Ro["MajorSource"].ToString(), Ro["MinorSource2"].ToString(), Time, "", "", "", "", Ro["Refresh"].ToString(), Ro["Country1"].ToString());
            login.Logout(driver, extentTest, testName, testDataIteration);


            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}

        }
        public static IEnumerable<object[]> RTA_16552()
        {
            foreach (DataRow row in getTestCaseList("DirectSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        // <summary>
        ///To verify Lang Pref set based on selctd Country in new lead record if Country filled lang & BusPhone empty
        //////CRM 5573
        /// </summary>
        [TestCategory("RerunMay9"), TestCategory("IT Sales"), TestCategory("Regression"), TestCategory("GlobalP11"), TestCategory("GlobalP11A")]
        [TestProperty("TestcaseID", "RTA-16552")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_16552), DynamicDataSourceType.Method)]
        public void RTA_16552_LangPrefsettoUKEnglishinnewlead(DataRow Ro)
        {
            //try
            //{

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString());
            string Time = System.DateTime.Now.ToString();
            generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);
            generic.VerifyLanguagePreference(driver, extentTest, testName, testDataIteration, "AutomationLead" + Time, Ro["Email"].ToString(), "", Ro["Source"].ToString(), Ro["MajorSource"].ToString(), Ro["MinorSource2"].ToString(), Time, "", "", "", "", Ro["Refresh"].ToString(), Ro["Country1"].ToString());
            login.Logout(driver, extentTest, testName, testDataIteration);
            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}

        }
        public static IEnumerable<object[]> RTA_16554()
        {
            foreach (DataRow row in getTestCaseList("DirectSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        // <summary>
        ///To Verify whether the user cant close the opportunity as Won,when payment received is No.
        //////CRM 5573
        /// </summary>
        [TestCategory("RerunMay9"), TestCategory("IT Sales"), TestCategory("Regression"), TestCategory("GlobalP11"), TestCategory("GlobalP11A")]
        [TestProperty("TestcaseID", "RTA-16554")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_16554), DynamicDataSourceType.Method)]
        public void RTA_16554_LangPrefsettoUKEnginnewlead(DataRow Ro)
        {
            //try
            //{

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString());
            string Time = System.DateTime.Now.ToString();
            generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);
            generic.VerifyLanguagePreference(driver, extentTest, testName, testDataIteration, "AutomationLead" + Time, Ro["Email"].ToString(), "", Ro["Source"].ToString(), Ro["MajorSource"].ToString(), Ro["MinorSource2"].ToString(), Time, "", "", "", "", Ro["Refresh"].ToString(), Ro["Country1"].ToString());

            login.Logout(driver, extentTest, testName, testDataIteration);


            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}

        }
        public static IEnumerable<object[]> RTA_16548()
        {
            foreach (DataRow row in getTestCaseList("DirectSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        // <summary>
        ///To Verify whether the user cant close the opportunity as Won,when payment received is No.
        //////CRM 3450
        /// </summary>
        [TestCategory("RerunMay9"), TestCategory("IT Sales"), TestCategory("Regression"), TestCategory("GlobalP11"), TestCategory("GlobalP11A")]
        [TestProperty("TestcaseID", "RTA-16548")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_16548), DynamicDataSourceType.Method)]
        public void RTA_16548_LangPrefbasdCntrynewlead(DataRow Ro)
        {
            //try
            //{

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString());
            string Time = System.DateTime.Now.ToString();
            generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);
            generic.VerifyLanguagePreference(driver, extentTest, testName, testDataIteration, "AutomationLead" + Time, Ro["Email"].ToString(), Ro["BussinessPhone"].ToString(), Ro["Source"].ToString(), Ro["MajorSource"].ToString(), Ro["MinorSource2"].ToString(), Time, "", "", "", "", Ro["Refresh"].ToString(), Ro["Country1"].ToString());
            login.Logout(driver, extentTest, testName, testDataIteration);
            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}

        }
        public static IEnumerable<object[]> RTA_16549()
        {
            foreach (DataRow row in getTestCaseList("DirectSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        // <summary>
        ///To Verify whether the user cant close the opportunity as Won,when payment received is No.
        //////CRM 5573
        /// </summary>
        [TestCategory("RerunMay9"), TestCategory("IT Sales"), TestCategory("Regression"), TestCategory("GlobalP11"), TestCategory("GlobalP11A")]
        [TestProperty("TestcaseID", "RTA-16549")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_16549), DynamicDataSourceType.Method)]
        public void RTA_16549_VerifythatLanguagePreferenceinnewleadrecord(DataRow Ro)
        {
            //try
            //{

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString());
            string Time = System.DateTime.Now.ToString();
            generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);
            generic.VerifyLanguagePreference(driver, extentTest, testName, testDataIteration, "AutomationLead" + Time, Ro["Email"].ToString(), Ro["BussinessPhone"].ToString(), Ro["Source"].ToString(), Ro["MajorSource"].ToString(), Ro["MinorSource2"].ToString(), Time, "", "", "", "", Ro["Refresh"].ToString(), Ro["Country1"].ToString());
            login.Logout(driver, extentTest, testName, testDataIteration);


            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}

        }
        public static IEnumerable<object[]> RTA_16553()
        {
            foreach (DataRow row in getTestCaseList("DirectSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        // <summary>
        ///To Verify Lang Pref set based on selected Country in new lead if Country&BusPhone filled and Lang empty
        //////CRM 5573
        /// </summary>
        [TestCategory("RerunMay9"), TestCategory("IT Sales"), TestCategory("Regression"), TestCategory("GlobalP11"), TestCategory("GlobalP11A")]
        [TestProperty("TestcaseID", "RTA-16553")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_16553), DynamicDataSourceType.Method)]
        public void RTA_16553_LangCntryslctleadifCntryBPfillLang(DataRow Ro)
        {
            //try
            //{

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString());
            string Time = System.DateTime.Now.ToString();
            generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);
            generic.VerifyLanguagePreference(driver, extentTest, testName, testDataIteration, "AutomationLead" + Time, Ro["Email"].ToString(), Ro["BussinessPhone"].ToString(), Ro["Source"].ToString(), Ro["MajorSource"].ToString(), Ro["MinorSource2"].ToString(), Time, "", "", "", "", Ro["Refresh"].ToString(), Ro["Country1"].ToString());
            login.Logout(driver, extentTest, testName, testDataIteration);


            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}

        }
        public static IEnumerable<object[]> RTA_16551()
        {
            foreach (DataRow row in getTestCaseList("DirectSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        // <summary>
        ///To Verify whether the user cant close the opportunity as Won,when payment received is No.
        //////CRM 5573
        /// </summary>
        [TestCategory("25Sep2020"), TestCategory("RerunMay9"), TestCategory("IT Sales"), TestCategory("Regression"), TestCategory("GlobalP11")]
        [TestProperty("TestcaseID", "RTA-16551")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_16551), DynamicDataSourceType.Method)]
        public void RTA_16551_LanginleadBusPhonefilledlangempty(DataRow Ro)
        {
            //try
            //{

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
            string Time = System.DateTime.Now.ToString();
            generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);
            generic.VerifyLanguagePreferenceContact(driver, extentTest, testName, testDataIteration, "AutomationLead" + Time, Ro["BussinessPhone"].ToString(), Time, "", Ro["Refresh"].ToString(), Ro["Country1"].ToString());
            login.Logout(driver, extentTest, testName, testDataIteration);

            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}

        }
        public static IEnumerable<object[]> RTA_16545()
        {
            foreach (DataRow row in getTestCaseList("DirectSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        // <summary>
        ///If the source of the Contact is via Lead Qualification, verify the Preferred Language field
        //////CRM 5573
        /// </summary>
        [TestCategory("RerunMay9"), TestCategory("IT Sales"), TestCategory("Regression"), TestCategory("GlobalP11"), TestCategory("GlobalP11A")]
        [TestProperty("TestcaseID", "RTA-16545")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_16545), DynamicDataSourceType.Method)]
        public void RTA_16545_verifyPreferredLanguage(DataRow Ro)
        {
            //try
            //{

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString());
            string Time = DateTime.UtcNow.ToString("yyyy-MM-dd HH:mm:ss.fff", CultureInfo.InvariantCulture);
            generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);
            generic.VerifyLanguagePreference(driver, extentTest, testName, testDataIteration, "AutomationLead" + Time, Ro["Email"].ToString(), Ro["BussinessPhone"].ToString(), Ro["Source"].ToString(), Ro["MajorSource"].ToString(), Ro["MinorSource2"].ToString(), Time, "", "", "", "", Ro["Refresh"].ToString(), Ro["Country1"].ToString());
            //generic.QualifyLead1(driver, extentTest, testName, testDataIteration);
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
            generic.OpenRecordGlobalSearch(driver, extentTest, testDataIteration, testName, "AutomationLead" + Time);
            generic.VerifyLangLeadContact(driver, extentTest, testName, testDataIteration);
            login.Logout(driver, extentTest, testName, testDataIteration);

            //    }

            //        catch (Exception e)
            //        {

            //            AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}

        }
        public static IEnumerable<object[]> RTA_16550()
        {
            foreach (DataRow row in getTestCaseList("DirectSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        // <summary>
        // Verify that Language Preference is not overridden in new contact record if language & Business phone are filled and Country is empty
        //////CRM 3450
        /// </summary>
        [TestCategory("RerunMay9"), TestCategory("IT Sales"), TestCategory("Regression"), TestCategory("GlobalP11"), TestCategory("GlobalP11A")]
        [TestProperty("TestcaseID", "RTA-16550")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_16550), DynamicDataSourceType.Method)]
        public void RTA_16550_VerifyLanguagePreference(DataRow Ro)
        {
            //try
            //{
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
            generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);
            generic.CreateNewContactITSaleswithlanguageandphone(driver, extentTest, testDataIteration, testName, "TestContact", "45678", "+123456789");
            login.Logout(driver, extentTest, testName, testDataIteration);
            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}

        }
        public static IEnumerable<object[]> RTA_16855()
        {
            foreach (DataRow row in getTestCaseList("DirectSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        // <summary>
        ///To Verify whether the user cant close the opportunity as Won,when payment received is No.
        //////CRM 5145
        /// </summary>
        [TestCategory("RerunMay9"), TestCategory("IT Sales"), TestCategory("Regression"), TestCategory("GlobalP11"), TestCategory("CreateOppEnt")]
        [TestProperty("TestcaseID", "RTA-16855")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_16855), DynamicDataSourceType.Method)]
        public void RTA_16855_VerifyInitialContactDonefieldforInboundcallsstatusNo(DataRow Ro)
        {

            //try
            //{

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            string time = System.DateTime.Now.ToString();
            generic.DisbaleRTC(driver, extentTest, testName, testDataIteration);

            generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);
            generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
            generic.CreateNewOpportunityEntetrprise(driver, extentTest, testDataIteration, testName, Ro["TestOpportunityAccountName"].ToString(), time, Ro["Country"].ToString(), Ro["TestCurrency"].ToString(), "On Line", Ro["TestMajorSource"].ToString(), "Acquisition", Ro["TestNewContact"].ToString());
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());
            ThinkTime(7);
            string oppname = Element(driver, Control("OppReference", "EnterpriseSales")).GetAttribute("title");


            generic.VerifyInboundCallcontactdonestatusNo(driver, extentTest, testDataIteration, testName, "PhoneCall", time, oppname);

            //generic.Phonecallactivity1(driver, extentTest, testDataIteration, testName, "Not Reachable / Left Voicemail");
            login.Logout(driver, extentTest, testName, testDataIteration);
            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}

        }
        public static IEnumerable<object[]> RTA_16856()
        {
            foreach (DataRow row in getTestCaseList("DirectSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        ///To Verify whether the user cant close the opportunity as Won,when payment received is No.
        //////CRM 5145
        /// </summary>
        [TestCategory("RerunMay9"), TestCategory("IT Sales"), TestCategory("25Aug"), TestCategory("Regression"), TestCategory("GlobalP11"), TestCategory("CreateOppEnt")]
        [TestProperty("TestcaseID", "RTA-16856")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_16856), DynamicDataSourceType.Method)]
        public void RTA_16856_VerifyInitialContactDonefieldforInboundcallsstatusYes(DataRow Ro)
        {

            //try
            //{

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            string time = System.DateTime.Now.ToString();
            //generic.DisbaleRTC(driver, extentTest, testName, testDataIteration);

            //generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
            generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
            // generic.CreateNewOpportunityEntetrprise(driver, extentTest, testDataIteration, testName, Ro["TestOpportunityAccountName"].ToString(), time, Ro["Country"].ToString(), Ro["TestCurrency"].ToString(), Ro["TestChannel"].ToString(), Ro["TestMajorSource"].ToString(), Ro["TestMinorSource"].ToString(), Ro["TestNewContact"].ToString());
            generic.CreateNewOpportunityEntetrprise(driver, extentTest, testDataIteration, testName, Ro["TestOpportunityAccountName"].ToString(), time, Ro["Country"].ToString(), Ro["TestCurrency"].ToString(), "On Line", Ro["TestMajorSource"].ToString(), "Acquisition", Ro["TestNewContact"].ToString());
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());
            ThinkTime(7);
            string oppname = Element(driver, Control("OppReference", "EnterpriseSales")).GetAttribute("title");



            generic.VerifyInboundCallcontactdonestatusYes(driver, extentTest, testDataIteration, testName, "PhoneCall", time, oppname);
            login.Logout(driver, extentTest, testName, testDataIteration);
            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}

        }
        public static IEnumerable<object[]> RTA_16850()
        {
            foreach (DataRow row in getTestCaseList("DirectSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        // <summary>
        ///To Verify whether the user cant close the opportunity as Won,when payment received is No.
        //////CRM 5145
        /// </summary>
        [TestCategory("RerunMay9"), TestCategory("IT Sales"), TestCategory("Regression"), TestCategory("GlobalP11"), TestCategory("CreateOppEnt")]
        [TestProperty("TestcaseID", "RTA-16850")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_16850), DynamicDataSourceType.Method)]
        public void RTA_16850_VerifyInitialContactDonefieldforbasedonchannel(DataRow Ro)
        {
            //try
            //{

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            string time = System.DateTime.Now.ToString();
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
            generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());

            generic.CreateNewOpportunityEntetrprise(driver, extentTest, testDataIteration, testName, Ro["TestOpportunityAccountName"].ToString(), time, Ro["Country"].ToString(), Ro["TestCurrency"].ToString(), "Centre: Walk-in", Ro["TestMajorSource"].ToString(), "Acquisition", Ro["TestNewContact"].ToString());
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());
            ThinkTime(5);
            string oppname = Element(driver, Control("OppNum", "CommonObj")).GetAttribute("title");


            generic.Verifyinitialcontactbasedonchannel(driver, extentTest, testDataIteration, testName, "PhoneCall", time, oppname);

            //generic.Phonecallactivity1(driver, extentTest, testDataIteration, testName, "Not Reachable / Left Voicemail");
            login.Logout(driver, extentTest, testName, testDataIteration);
            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}

        }
        public static IEnumerable<object[]> RTA_16852()
        {
            foreach (DataRow row in getTestCaseList("DirectSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        // <summary>
        ///To Verify whether the user cant close the opportunity as Won,when payment received is No.
        //////CRM 5145
        /// </summary>
        [TestCategory("RerunMay9"), TestCategory("IT Sales"), TestCategory("Regression"), TestCategory("GlobalP11"), TestCategory("CreateOppEnt")]
        [TestProperty("TestcaseID", "RTA-16852")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_16852), DynamicDataSourceType.Method)]
        public void RTA_16852_VerifyInitialContactDonefieldforOutboundcallsYes(DataRow Ro)
        {
            //try
            //{

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            string time = System.DateTime.Now.ToString();
            generic.DisbaleRTC(driver, extentTest, testName, testDataIteration);

            generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);
            generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());

            generic.CreateNewOpportunityEntetrprise(driver, extentTest, testDataIteration, testName, Ro["TestOpportunityAccountName"].ToString(), time, Ro["Country"].ToString(), Ro["TestCurrency"].ToString(), "On Line", Ro["TestMajorSource"].ToString(), "Acquisition", Ro["TestNewContact"].ToString());
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());
            ThinkTime(5);

            string oppname = Element(driver, Control("OppNum", "CommonObj")).GetAttribute("title");

            generic.VerifyOutboundCallcontactdonestatusYes(driver, extentTest, testDataIteration, testName, "PhoneCall", time, oppname);
            //generic.Phonecallactivity1(driver, extentTest, testDataIteration, testName, "Not Reachable / Left Voicemail");
            login.Logout(driver, extentTest, testName, testDataIteration);
            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}

        }
        public static IEnumerable<object[]> RTA_16860()
        {
            foreach (DataRow row in getTestCaseList("DirectSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        /// </summary>
        [TestCategory("25Sep2020"), TestCategory("RerunMay9"), TestCategory("IT Sales"), TestCategory("Regression"), TestCategory("GlobalP11"), TestCategory("CreateOppEnt"), TestCategory("28Sep2020")]
        [TestProperty("TestcaseID", "RTA-16860")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_16860), DynamicDataSourceType.Method)]
        public void RTA_16860_InitialContactminorsource(DataRow Ro)
        {
            //try
            //{

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            string time = System.DateTime.Now.ToString();
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
            generic.CreateNewOpportunityEntetrpriseInitialContact(driver, extentTest, testDataIteration, testName, Ro["TestOpportunityAccountName"].ToString(), time, Ro["Country"].ToString(), Ro["TestCurrency"].ToString(), "Centre: Walk-In", Ro["TestMajorSource"].ToString(), Ro["TestMinorSource"].ToString(), Ro["TestNewContact"].ToString());
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());
            string oppname = Element(driver, Control("OppNum", "CommonObj")).GetAttribute("title");
            string parent = driver.CurrentWindowHandle;
            generic.Verifyinitialcontactdonestatus(driver, extentTest, testDataIteration, testName, oppname);
            driver.Close();
            driver.SwitchTo().Window(parent);
            login.Logout(driver, extentTest, testName, testDataIteration);
            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}

        }
        public static IEnumerable<object[]> RTA_16859()
        {
            foreach (DataRow row in getTestCaseList("DirectSalesAgent"))
            {
                yield return new object[] { row };
            }
        }

        /// </summary>
        [TestCategory("CRM-5145"), TestCategory("IT Sales"), TestCategory("Regression"), TestCategory("GlobalP11"), TestCategory("CreateOppEnt")]
        [TestProperty("TestcaseID", "RTA-16859")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_16859), DynamicDataSourceType.Method)]
        public void RTA_16859_VerifyInitialContactDonefieldforOppswithChannel(DataRow Ro)
        {
            //try
            //{

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            string time = System.DateTime.Now.ToString();
            generic.DisbaleRTC(driver, extentTest, testName, testDataIteration);

            generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);
            generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());

            generic.CreateNewOpportunityEntetrprise(driver, extentTest, testDataIteration, testName, Ro["TestOpportunityAccountName"].ToString(), time, Ro["Country"].ToString(), Ro["TestCurrency"].ToString(), "Centre: Walk-In", Ro["TestMajorSource"].ToString(), "Acquisition", Ro["TestNewContact"].ToString());
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());
            ThinkTime(5);

            string oppname = Element(driver, Control("OppNum", "CommonObj")).GetAttribute("title");
            string parent = driver.CurrentWindowHandle;
            generic.Verifyinitialcontactdonestatus(driver, extentTest, testDataIteration, testName, oppname);
            driver.Close();
            driver.SwitchTo().Window(parent);
            //generic.Phonecallactivity1(driver, extentTest, testDataIteration, testName, "Not Reachable / Left Voicemail");
            login.Logout(driver, extentTest, testName, testDataIteration);
            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}

        }
        public static IEnumerable<object[]> RTA_5319()
        {
            foreach (DataRow row in getTestCaseList("ITSalesManager"))
            {
                yield return new object[] { row };
            }
        }

        ///To verify that the system will create an open email activity asking to complete customer data if phone call outcome is "Wrong contact details"	
        /// </summary>
        [TestCategory("smoke"), TestCategory("IT Sales"), TestCategory("Regression"), TestCategory("QARefactorfail"), TestCategory("Sprint32NCS"), TestCategory("27Aug")]
        [TestProperty("TestcaseID", "RTA-5319")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5319), DynamicDataSourceType.Method)]
        public void RTA_5319_Systemwillcreateanopenemailactivity(DataRow Ro)
        {
            try
            {

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());

                generic.CreateNewOpportunityITSales(driver, extentTest, testDataIteration, testName);
                ThinkTime(5);
                string opp = Element(driver, Control("OppReference", "EnterpriseSales")).GetAttribute("title");
                //  string opp = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");
                generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, Ro["Tab"].ToString());
                string[] sub = generic.CreateandVerifyPhoneCall(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString(), Ro["Button"].ToString(), Ro["Activity"].ToString(), Ro["Call To"].ToString(), Ro["Quick Create Form Button"].ToString(), Ro["Call Outcome5"].ToString(), Ro["Action"].ToString());
                generic.MarkComplete(driver, extentTest, testName, testDataIteration, Ro["Action"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "Open IT Sales opportunities");
                generic.SearchforRecord(driver, extentTest, testName, testDataIteration, opp);
                generic.SelectingActiveCell(driver, extentTest, testName, testDataIteration);
                generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, Ro["Tab"].ToString());


                generic.VerifywhethernewEmailActivityisCreated(driver, extentTest, testName, testDataIteration, Ro["Email Sub"].ToString());

                login.Logout(driver, extentTest, testName, testDataIteration);

            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }


        }
        public static IEnumerable<object[]> RTA_5322()
        {
            foreach (DataRow row in getTestCaseList("EnterpriseSalesManager"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To check whether Enterprise Sales Manager is able to access Excel templates for opportunities lost this month.
        /// </summary>
        [TestCategory("smoke"), TestCategory("Enterprise Sales"), TestCategory("25Nov"), TestCategory("Regression"), TestCategory("RerunMay120"), TestCategory("Sprint32NCS"), TestCategory("08Sep")]
        [TestProperty("TestcaseID", "RTA-5322"), TestCategory("Rerun-24062020")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5322), DynamicDataSourceType.Method)]

        public void RTA_5322_EnterpriseSM_Exceltemplatesforopportunitieslostthismonth(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "Enterprise Lost Opportunities");
                generic.SelectHeaderButton(driver, extentTest, testName, testDataIteration, Ro["Header Button"].ToString());
                generic.SelectandVerifyExcelTemplate(driver, extentTest, testName, testDataIteration, Ro["Excel Template Option1"].ToString(), Ro["Excel Template Option2"].ToString());
                login.Logout(driver, extentTest, testName, testDataIteration);
            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }

        }
        public static IEnumerable<object[]> RTA_5623()
        {
            foreach (DataRow row in getTestCaseList("EnterpriseSalesManager"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To check whether Enterprise Sales Manager has DandB integration.
        /// </summary>
        [TestCategory("smoke"), TestCategory("Enterprise Sales"), TestCategory("Regression"), TestCategory("Sprint32NCS")]
        [TestProperty("TestcaseID", "RTA-5623")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5623), DynamicDataSourceType.Method)]

        public void RTA_5623_EnterpriseSM_DandBIntegrationverification(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString());
                generic.SelectActiveCellContacts(driver, extentTest, testName, testDataIteration);
                generic.NavigateDBTabAndVerifyFields(driver, extentTest, testDataIteration, testName);
                login.Logout(driver, extentTest, testName, testDataIteration);
            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }

        }
        public static IEnumerable<object[]> RTA_5613()
        {
            foreach (DataRow row in getTestCaseList("EnterpriseSalesManager"))
            {
                yield return new object[] { row };
            }
        }
        [Ignore]
        /// <summary>
        /// To check whether an Enterprise Sales Manager is able to create opportunity by populating newly added fields.
        /// </summary>
        [TestCategory("RerunMay9"), TestCategory("Agentissue"), TestCategory("Enterprise Sales"), TestCategory("Regression"), TestCategory("Sprint32NCS")]
        [TestProperty("TestcaseID", "RTA-5613")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5613), DynamicDataSourceType.Method)]

        public void RTA_5613_EnterpriseSM_Createoppwithnewaddedfields(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                //generic.ClickNewButton(driver, extentTest, testDataIteration, testName);
                string time = System.DateTime.Now.ToString();
                //generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                //ActionsClick(driver, Control("Discardbutton", "Opportunity"));
                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "Open Enterprise Opportunities");

                generic.SelectActiveCellContacts(driver, extentTest, testName, testDataIteration);
                generic.CreateOppadditionalfield(driver, extentTest, testDataIteration, testName);
                generic.SelectanyOpportunitybutton(driver, extentTest, testDataIteration, testName, Ro["ServiceProviderTab"].ToString());

                generic.OpportunityFieldVerification(driver, extentTest, testName, testDataIteration, Ro["ServiceProviderAccountField"].ToString(), Ro["ServiceProviderContact"].ToString());
                generic.Enterserviceproviderdetails(driver, extentTest, testName, testDataIteration);
                WaitUntil(driver, Control("DandBheader", "Accounts"), 30);
                MoveToElement(driver, Control("DandBheader", "Accounts"));
                Element(driver, Control("DandBheader", "Accounts")).Click();
                // Assert.Fail("Issue - Awaiting confirmation frmom manual team - CR");

                generic.NavigateDBTabAndVerifyFields(driver, extentTest, testDataIteration, testName);
                login.Logout(driver, extentTest, testName, testDataIteration);
            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }

        }
        public static IEnumerable<object[]> RTA_5625()
        {
            foreach (DataRow row in getTestCaseList("EnterpriseSalesManager"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To check whether Enterprise Sales Manager is able to access Excel templates for opportunities lost this month.
        /// </summary>
        [TestCategory("smoke"), TestCategory("25Nov"), TestCategory("Regression"), TestCategory("Sprint32NCS")]
        [TestProperty("TestcaseID", "RTA-5625")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5625), DynamicDataSourceType.Method)]

        public void RTA_5625_Dashboarddisplaycurrententerpriseactivityfieldverification(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["DashboardEntity"].ToString());
                generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "Sales Manager Dashboard");
                generic.VerifyEnterpriseSalesManagerDashboardkpi(driver, extentTest, testName, testDataIteration, Ro["Dashboardheader1"].ToString(), "Current Enterprise Activities");
                generic.VerifyEnterpriseSalesManagerDashboardrecordverification(driver, extentTest, testName, testDataIteration, Ro["DueDate"].ToString(), Ro["StartDate"].ToString(), Ro["ActualEnd"].ToString(), Ro["ActualStart"].ToString(), Ro["Subject1"].ToString(), Ro["Regarding"].ToString(), Ro["ActivityType"].ToString(), Ro["ActivityStatus"].ToString(), Ro["Owner"].ToString());
                ThinkTime(1);
                // Element(driver, Control("Duedatesort", "Dashboards")).Click();
                generic.SelectActiveCellContacts(driver, extentTest, testName, testDataIteration);
                generic.Dashboardactivityverification(driver, extentTest, testName, testDataIteration, Ro["data1"].ToString(), Ro["data2"].ToString());
                login.Logout(driver, extentTest, testName, testDataIteration);
            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }

        }
        public static IEnumerable<object[]> RTA_5626()
        {
            foreach (DataRow row in getTestCaseList("EnterpriseSalesManager"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To verify that an Enterprise Sales Manager Dashboard shows the "Enterprise Opportunity in Course" and its related fields
        /// </summary>
        [TestCategory("smoke"), TestCategory("Enterprise Sales"), TestCategory("Gokul"), TestCategory("Regression"), TestCategory("RF24-4-20"), TestCategory("Rerun-29062020"), TestCategory("Sprint32NCS"), TestCategory("27Aug")]
        [TestProperty("TestcaseID", "RTA-5626")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5626), DynamicDataSourceType.Method)]

        public void RTA_5626_EnterpriseOpportunityincourseverification(DataRow Ro)
        {
            //try
            //{
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["DashboardEntity"].ToString());
            generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "Sales Manager Dashboard");
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
            generic.Verifyincoursprocessstageworkflow(driver, extentTest, testName, testDataIteration, Ro["Incoursestage1"].ToString(), Ro["Incoursestage2"].ToString(), Ro["Incoursestage3"].ToString(), Ro["Incoursestage4"].ToString(), Ro["Incoursestage5"].ToString());
            // Assert.Fail("CRM-5024, Opportunity type field is missing. ");
            generic.Viewrecordsincorse(driver, extentTest, testName, testDataIteration, Ro["KPI4"].ToString(), Ro["More4"].ToString());
            ThinkTime(4);
            //generic.SelectActiveCellContacts(driver, extentTest, testName, testDataIteration);

            login.Logout(driver, extentTest, testName, testDataIteration);
            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}

        }
        public static IEnumerable<object[]> RTA_5624()
        {
            foreach (DataRow row in getTestCaseList("EnterpriseSalesManager"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To verify that an Enterprise Sales Manager Dashboard shows the "Open Enterprise opportunities" and its related types
        /// </summary>
        [TestCategory("smoke"), TestCategory("Enterprise Sales"), TestCategory("Regression"), TestCategory("Sprint32NCS"), TestCategory("25Nov")]
        [TestProperty("TestcaseID", "RTA-5624")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5624), DynamicDataSourceType.Method)]

        public void RTA_5624_Dashboarddisplayopenenterpriseoppsfieldverification(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());

                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["DashboardEntity"].ToString());
                generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "Sales Manager Dashboard");
                generic.VerifyEnterpriseSalesManagerDashboardkpinew(driver, extentTest, testName, testDataIteration, Ro["KPI2"].ToString(), Ro["More3"].ToString());
                generic.VerifyEnterpriseSalesManagerDashboardrecordverification(driver, extentTest, testName, testDataIteration, Ro["Topic"].ToString(), Ro["Account2"].ToString(), Ro["EstCloseDate"].ToString(), Ro["Contact2"].ToString(), Ro["PhoneMain"].ToString(), Ro["Sale Owner"].ToString(), Ro["Pipeline Phase"].ToString(), Ro["Status"].ToString());
                generic.SelectActiveCellContacts(driver, extentTest, testName, testDataIteration);
                generic.VerifyEnterpriseSalesManagerDashboardactivityverification(driver, extentTest, testName, testDataIteration);

                login.Logout(driver, extentTest, testName, testDataIteration);
            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }

        }

        public static IEnumerable<object[]> RTA_5323()
        {
            foreach (DataRow row in getTestCaseList("EnterpriseSalesManager"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To check whether Enterprise Sales Manager is able to access Excel templates for opportunities won.
        /// </summary>
        [TestCategory("smoke"), TestCategory("Enterprise Sales"), TestCategory("25Nov"), TestCategory("RerunMay120"), TestCategory("Regression"), TestCategory("Sprint32NCS"), TestCategory("09Sep")]
        [TestProperty("TestcaseID", "RTA-5323")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5323), DynamicDataSourceType.Method)]

        public void RTA_5323_EnterpriseSM_Exceltemplatesforopportunitieswon(DataRow Ro)
        {
            //try
            //{
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
            generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "Enterprise Opportunities Won");
            generic.SelectHeaderButton(driver, extentTest, testName, testDataIteration, Ro["Header Button"].ToString());
            generic.SelectandVerifyExcelTemplate(driver, extentTest, testName, testDataIteration, Ro["Excel Template Option1"].ToString(), Ro["Excel Template Option2"].ToString());
            login.Logout(driver, extentTest, testName, testDataIteration);
            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}

        }

        public static IEnumerable<object[]> Test146()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To check whether Auto-win process is triggered for Sales Opportunity, once the customer signs the online order and made the payment
        /// </summary>
        [TestCategory("smoke"), TestCategory("")]
        [TestProperty("TestcaseID", "RTA-6065")]

        [DataTestMethod]
        [DynamicData(nameof(Test146), DynamicDataSourceType.Method)]


        public void VerifyAutowinTriggerinSalesopportunity_SalesUser(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "My Open Opportunities");
                generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);
                generic.SelectingActiveCell(driver, extentTest, testName, testDataIteration);

                generic.VerifyAutowinTriggger(driver, extentTest, testName, testDataIteration);
                login.Logout(driver, extentTest, testName, testDataIteration);
            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }

        }
        public static IEnumerable<object[]> RTA_5558()
        {
            foreach (DataRow row in getTestCaseList("ITSalesUser"))
            {
                yield return new object[] { row };
            }
        }

        /// <summary>
        /// To check whether Auto-win process is triggered for Sales Opportunity, once the customer signs the online order and made the payment.
        /// </summary>
        [TestCategory("RerunMay9"), TestCategory("IT Sales"), TestCategory("Regression"), TestCategory("Sprint32NCS")]
        [TestProperty("TestcaseID", "RTA-5558")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5558), DynamicDataSourceType.Method)]

        public void RTA_5558_ITSales_OpportunityBPF(DataRow Ro)
        {
            //try
            //{

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "My Open IT Sales Opportunities");
            generic.SelectingActiveCell(driver, extentTest, testName, testDataIteration);
            //generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);
            generic.VerifyBPFStageFieldITSalesBussinessProcess(driver, extentTest, testName, testDataIteration);
            login.Logout(driver, extentTest, testName, testDataIteration);
            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}

        }
        public static IEnumerable<object[]> RTA_5695()
        {
            foreach (DataRow row in getTestCaseList("ITSalesUser"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To verify that the IT Sales User is able to Create, Read and update the Opportunity.
        /// </summary>
        [TestCategory("25Nov"), TestCategory("IT Sales"), TestCategory("Regression"), TestCategory("Rerun-14-05-2020"), TestCategory("Rerun-21062020_1"), TestCategory("SprintUN")]
        [TestProperty("TestcaseID", "RTA-5695")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5695), DynamicDataSourceType.Method)]

        public void RTA_5695_ITSales_CreateandUpdateOpportunityrecord(DataRow Ro)
        {
            try
            {

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
                generic.ITSalesNewOpportunity(driver, extentTest, testName, testDataIteration, Ro["Topicfield"].ToString(), Ro["TopicValue"].ToString());
                string S = generic.SelectTitle(driver, extentTest, testName, testDataIteration);
                //    generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                //generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "My Open IT Sales Opportunities");

                //generic.OpenRecordGlobalSearch(driver, extentTest, testName, testDataIteration, S);
                generic.VerifyOpportunityfieldsareeditable(driver, extentTest, testName, testDataIteration, Ro["AltContact"].ToString());
                login.Logout(driver, extentTest, testName, testDataIteration);
            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }
        public static IEnumerable<object[]> RTA_5642()
        {
            foreach (DataRow row in getTestCaseList("ITSalesManager"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To verify that the IT Sales Manager is able to Create, Read and update the Opportunity.
        /// </summary>
        [TestCategory("25Nov"), TestCategory("IT Sales"), TestCategory("Regression"), TestCategory("QARefactorfail"), TestCategory("SprintUN")]
        [TestProperty("TestcaseID", "RTA-5642")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5642), DynamicDataSourceType.Method)]

        public void RTA_5642_ITSalesM_ReadandUpdateOpportunityrecord(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
                generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
                generic.ITSalesNewOpportunity(driver, extentTest, testName, testDataIteration, Ro["Topicfield"].ToString(), Ro["TopicValue"].ToString());
                string S = generic.SelectTitle(driver, extentTest, testName, testDataIteration);
                //generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
                //generic.OpenRecordGlobalSearch(driver, extentTest, testName, testDataIteration, S);
                generic.VerifyOpportunityfieldsareeditable(driver, extentTest, testName, testDataIteration, Ro["AltContact"].ToString());

                login.Logout(driver, extentTest, testName, testDataIteration);

            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }

        }
        public static IEnumerable<object[]> RTA_5532()
        {
            foreach (DataRow row in getTestCaseList("ITSalesUser"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To verify appropriate KPI's are displayed in IT Sales User Dashboard - Needs to be updated given CRM-3401
        /// </summary>
        [TestCategory("smoke"), TestCategory("IT Sales"), TestCategory("RerunMay9"), TestCategory("Regression"), TestCategory("RF24-4-20"), TestCategory("Sprint32NCS")]
        [TestProperty("TestcaseID", "RTA-5532")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5532), DynamicDataSourceType.Method)]

        public void RTA_5532_ITSales_Dashboardkpiverification(DataRow Ro)
        {
            try
            {

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity0"].ToString());
                generic.VerifyEnterpriseSalesManagerDashboardkpiheaders(driver, extentTest, testName, testDataIteration, Ro["ITKPI1"].ToString(), Ro["ITKPI2"].ToString(), Ro["ITKPI3"].ToString(), Ro["ITKPI4"].ToString(), Ro["ITKPI5"].ToString());
                login.Logout(driver, extentTest, testName, testDataIteration);

            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }

        }
        public static IEnumerable<object[]> RTA_5742()
        {
            foreach (DataRow row in getTestCaseList("ITSalesManager"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To verify that the IT Sales Manager is not able to Create Contact
        /// </summary>
        [TestCategory("RerunMay9"), TestCategory("IT Sales"), TestCategory("QARefactorfail"), TestCategory("RerunMay120"), TestCategory("Regression"), TestCategory("RF24-4-20"), TestCategory("Rerun-06062020"), TestCategory("Rerun-15062020"), TestCategory("Rerun-25062020"), TestCategory("Sprint32NCS")]
        [TestProperty("TestcaseID", "RTA-5742")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5742), DynamicDataSourceType.Method)]

        public void RTA_5742_ITSalesM_NotabletoCreateContact(DataRow Ro)
        {
            try
            {

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                generic.VerifyNewButton1(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
                login.Logout(driver, extentTest, testName, testDataIteration);

            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }

        }



        public static IEnumerable<object[]> Test145()
        {
            foreach (DataRow row in getTestCaseList("ITSalesManager"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To verify that the IT Sales Manager is able to see the "IT Sales Manager Dashboard".
        /// </summary>
        [TestCategory("RerunMay9"), TestCategory("IT Sales"), TestCategory("Regression"), TestCategory("Sprint32NCS")]
        [TestProperty("TestcaseID", "RTA-5536")]

        [DataTestMethod]
        [DynamicData(nameof(Test145), DynamicDataSourceType.Method)]

        public void ITSalesM_Viewdashboard(DataRow Ro)
        {
            try
            {

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity0"].ToString());
                generic.SelectValuesFromDashboardDropDown(driver, extentTest, testName, testDataIteration, Ro["Role"].ToString());
                login.Logout(driver, extentTest, testName, testDataIteration);

            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }

        }


        /* /// <summary>
         /// To check whether an Enterprise Sales Manager have an activated integration with D&B services for Dynamics 365
         /// </summary>
         [TestCategory("smoke"), TestCategory("IT Sales"), TestCategory("Regression")]
         [TestProperty("TestcaseID", "RTA-5536")]
         public static IEnumerable<object[]> RTA_5848_Data()
        {
            foreach (DataRow row in getTestCaseList("EnterpriseSalesManager"))
            {
                yield return new object[] { row };
            }
        }
[DataTestMethod]
[DynamicData(nameof(RTA_5848_Data), DynamicDataSourceType.Method)]

         public void RTA_5536_EnterpriseSMshouldhaveDBIntegration(DataRow Ro)
        {
            try
             {

                 login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                 generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                 generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString());
                 generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, Ro["DropdownValue"].ToString());
                 generic.SelectActiveCellContacts(driver, extentTest, testName, testDataIteration);
                 generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, Ro["DatabaseTab"].ToString());
                 generic.VerifyDBSection(driver, extentTest, testName, testDataIteration);
                 login.Logout(driver, extentTest, testName, testDataIteration);

             }

             catch (Exception e)
             {

                 AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                 Type thisType = this.GetType();
                 object testCall = this;
                 ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

             }

         }
         */
        public static IEnumerable<object[]> RTA_5561()
        {
            foreach (DataRow row in getTestCaseList("EnterpriseSalesManager"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To check whether an Enterprise Sales Manager have an activated integration with D&B services for Dynamics 365
        /// </summary>
        [TestCategory("smoke"), TestCategory("IT Sales"), TestCategory("28Sep2020"), TestCategory("Regression"), TestCategory("Sprint32NCS")]
        [TestProperty("TestcaseID", "RTA-5561")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5561), DynamicDataSourceType.Method)]

        public void RTA_5561_EnterpriseSMAccontfieldverification(DataRow Ro)
        {
            try
            {

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString());
                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, Ro["DropdownValue"].ToString());
                generic.SelectActiveCellContacts(driver, extentTest, testName, testDataIteration);
                generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, Ro["DatabaseTab"].ToString());
                generic.VerifyDBSection(driver, extentTest, testName, testDataIteration);
                generic.VerifyaccountdetailsEnterpriseManager(driver, extentTest, testName, testDataIteration, Ro["ContactDetails"].ToString(), Ro["Company"].ToString(), Ro["Header5"].ToString(), Ro["OrgStructure"].ToString(), Ro["Industry"].ToString(), Ro["SIC"].ToString(), Ro["Ownership"].ToString(), Ro["ContactMethod"].ToString(), Ro["EmailAccount"].ToString(), Ro["Followemail"].ToString(), Ro["BulkEmail"].ToString(), Ro["Phone2"].ToString(), Ro["Fax"].ToString(), Ro["Mail"].ToString(), Ro["Header3"].ToString(), Ro["Lead"].ToString(), Ro["Date"].ToString());
                login.Logout(driver, extentTest, testName, testDataIteration);

            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }

        }
        public static IEnumerable<object[]> RTA_5560()
        {
            foreach (DataRow row in getTestCaseList("EnterpriseSalesManager"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To check whether an Enterprise Sales Manager have an activated integration with D&B services for Dynamics 365
        /// </summary>
        [TestCategory("smoke"), TestCategory("IT Sales"), TestCategory("Gokul"), TestCategory("Regression"), TestCategory("Sprint32NCS"), TestCategory("07Sep")]
        [TestProperty("TestcaseID", "RTA-5560")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5560), DynamicDataSourceType.Method)]

        public void RTA_5560_EnterpriseSMAccontsummaryverification(DataRow Ro)
        {
            try
            {

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString());
                generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, Ro["DropdownValue"].ToString());
                generic.SelectingActiveAccountEnterpriseSales(driver, extentTest, testName, testDataIteration);
                generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, Ro["DatabaseTab"].ToString());
                generic.VerifyDBSection(driver, extentTest, testName, testDataIteration);
                generic.VerifyaccountsummaryEnterpriseManager(driver, extentTest, testName, testDataIteration, Ro["Summary"].ToString(), Ro["CompanyInfo"].ToString(), Ro["RECENTOPPORTUNITIES"].ToString(), Ro["Timeline"].ToString(), Ro["Cases"].ToString(), Ro["CommunicationProfiles"].ToString(), Ro["Address"].ToString(), Ro["Custtype"].ToString(), Ro["CONTACTROLES"].ToString());
                login.Logout(driver, extentTest, testName, testDataIteration);

            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }

        }
        public static IEnumerable<object[]> RTA_5620()
        {
            foreach (DataRow row in getTestCaseList("EnterpriseSalesManager"))
            {
                yield return new object[] { row };
            }
        }

        /// <summary>
        /// To verify that an Enterprise Sales Manager have Customized Dashboard With sales kpi's only
        /// </summary>
        [TestCategory("smoke"), TestCategory("IT Sales"), TestCategory("Agentissue"), TestCategory("RerunMay9"), TestCategory("Regression"), TestCategory("RF24-4-20"), TestCategory("Sprint32NCS"), TestCategory("0309")]
        [TestProperty("TestcaseID", "RTA-5620")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5620), DynamicDataSourceType.Method)]

        public void RTA_5620_EnterpriseSMshouldhaveCustomizedDashboard(DataRow Ro)
        {
            try
            {

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["DashboardEntity"].ToString());
                generic.SelectValuesFromDashboardDropDown(driver, extentTest, testName, testDataIteration, Ro["Role"].ToString());
                generic.VerifySalesManagerDashboardkpi(driver, extentTest, testName, testDataIteration, Ro["KPI1"].ToString(), Ro["KPI2"].ToString(), Ro["KPI3"].ToString(), Ro["KPI2"].ToString(), Ro["KPI5new"].ToString());
                login.Logout(driver, extentTest, testName, testDataIteration);

            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }

        }

        public static IEnumerable<object[]> RTA_5622()
        {
            foreach (DataRow row in getTestCaseList("EnterpriseSalesManager"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To verify that an Enterprise Sales Manager Dashboard shows the "All Enterprise Accounts" and its related columns
        /// </summary>
        [TestCategory("smoke"), TestCategory("Enterprise Sales"), TestCategory("Agentissue"), TestCategory("Regression"), TestCategory("Sprint32NCS")]
        [TestProperty("TestcaseID", "RTA-5622")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5622), DynamicDataSourceType.Method)]

        public void RTA_5622_DashboardshowstheAllEnterpriseAccounts(DataRow Ro)
        {
            try
            {

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString());
                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, Ro["DropdownValue"].ToString());
                generic.VerifyEnterpriseAccountablefields(driver, extentTest, testName, testDataIteration, Ro["DropdownValue"].ToString(), Ro["Field1"].ToString(), Ro["Field2"].ToString(), Ro["Field3"].ToString(), Ro["Field4"].ToString(), Ro["Field5"].ToString(), Ro["Field6"].ToString(), Ro["Field7"].ToString(), Ro["Field8"].ToString(), Ro["Field9"].ToString());
                generic.SelectingActiveCell(driver, extentTest, testName, testDataIteration);
                generic.VerifyAvailablefieldsinAccountsform(driver, extentTest, testName, testDataIteration, Ro["Field6"].ToString());
                login.Logout(driver, extentTest, testName, testDataIteration);

            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }

        }

        public static IEnumerable<object[]> RTA13215()
        {
            foreach (DataRow row in getTestCaseList("ITSalesUser"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// CRM-3385
        /// Verify the Status Reason values can be selected after choosing the opp as 'Close as Lost' for a Core Sales user for a qualified Lead
        /// </summary>
        [TestCategory("25Nov1"), TestCategory("Regression"), TestCategory("Sprint0.5"), TestCategory("28Sep2020"), TestCategory("Sprint3640"), TestCategory("07Sep")]
        [TestProperty("TestcaseID", "RTA-13215")]

        [DataTestMethod]
        [DynamicData(nameof(RTA13215), DynamicDataSourceType.Method)]
        public void RTA13215_ITSales_Verifyoppstatusreasonvaluesforqualifiedlead(DataRow Ro)
        {
            try
            {
                // Login as IT Sales User and choose Sales
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserNamesales"].ToString(), Ro["Passwordsales"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Entitytype"].ToString());
                string time = System.DateTime.Now.ToString();

                // Select Contacts entity and create new
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
                string contactname = generic.CreateNewContactITSalesUser(driver, extentTest, testDataIteration, testName, Ro["contactname"].ToString(), time);

                // Select lead and qualify
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity4"].ToString());
                string now = System.DateTime.Now.ToString();
                generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);

                // generic.createandqualifylead(driver, extentTest, testName, testDataIteration, "Lead" + now, Ro["AddEmail"].ToString(), Ro["BussinessPhone"].ToString(), Ro["Source"].ToString(), Ro["MajorSource"].ToString(), Ro["MinorSource2"].ToString(), now, "ExistingContact", "", contactname, "", "");
                // generic.CreateLeadwithproductITSales(driver, extentTest, testName, testDataIteration, "Lead" + now, Ro["AddEmail"].ToString(), Ro["BussinessPhone"].ToString(), Ro["Source"].ToString(), Ro["MajorSource"].ToString(), Ro["MinorSource2"].ToString(), now, "ExistingContact", "", contactname, "", "", "Alberta", "", "");
                generic.createleaddirectsales(driver, extentTest, testName, testDataIteration, "Lead" + now, Ro["AddEmail"].ToString(), Ro["BussinessPhone"].ToString(), Ro["Source"].ToString(), Ro["MajorSource"].ToString(), Ro["MinorSource2"].ToString(), now, "ExistingContact", "", contactname, "UK English", "", "London");

                generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
                generic.NavigateToRelatedTabEntitiesLead(driver, extentTest, testName, testDataIteration, Ro["RelatedTabEntity"].ToString());
                generic.OppSelect(driver, extentTest, testName, testDataIteration);


                // Create Close as lost and verify the opp status options
                generic.SelectOpportunityheader(driver, extentTest, testName, testDataIteration, Ro["LostButton"].ToString(), "Form:opportunity");
                generic.verifyoppstatusreasonforlost(driver, extentTest, testName, testDataIteration);

                // Submit the opportunity as lost and verify the status for each opp status reason
                generic.Verifystatusforalllostreason(driver, extentTest, testName, testDataIteration);

                // Logout from the app
                login.Logout(driver, extentTest, testName, testDataIteration);

            }


            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }




















        public static IEnumerable<object[]> RTA_5615()
        {
            foreach (DataRow row in getTestCaseList("EnterpriseSalesManager"))
            {
                yield return new object[] { row };
            }
        }

        /// <summary>
        /// To verify that the Account DB Business Summary Section in Account form is Non Editable
        /// </summary>
        [TestCategory("smoke"), TestCategory("Enterprise Sales"), TestCategory("Agentissue"), TestCategory("Regression"), TestCategory("Sprint32NCS")]
        [TestProperty("TestcaseID", "RTA-5615")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5615), DynamicDataSourceType.Method)]

        public void RTA_5615_AccountDBBusinessSummaryNonEditable(DataRow Ro)
        {
            try
            {

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString());
                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, Ro["DropdownValue"].ToString());
                generic.SelectingActiveCell(driver, extentTest, testName, testDataIteration);
                generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, Ro["DatabaseTab"].ToString());
                generic.VerifyDBFieldisenabled(driver, extentTest, testName, testDataIteration);
                login.Logout(driver, extentTest, testName, testDataIteration);


            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }

        }
        public static IEnumerable<object[]> RTA_5604()
        {
            foreach (DataRow row in getTestCaseList("EnterpriseSalesManager"))
            {
                yield return new object[] { row };
            }
        }

        /// <summary>
        /// To check whether 'Opportunity' record form contains appropriate fields
        /// </summary>
        [TestCategory("smoke"), TestCategory("Enterprise Sales"), TestCategory("Agentissue"), TestCategory("Regression"), TestCategory("RF24-4-20"), TestCategory("RerunMay120"), TestCategory("Sprint32NCS")]
        [TestProperty("TestcaseID", "RTA-5604")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5604), DynamicDataSourceType.Method)]

        public void RTA_5604_Opportunityrecordformcontainsappropriatefields(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, Ro["DropdownValueOpportunities"].ToString());
                generic.SelectingActiveCell(driver, extentTest, testName, testDataIteration);
                //generic.scrollDownOpportunityEnterprise(driver, extentTest, testName, testDataIteration);
                generic.OpportunityFieldVerification(driver, extentTest, testName, testDataIteration, Ro["EstimatedCloseDateField"].ToString(), Ro["ProbabilityField"].ToString());
                generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, Ro["BrokerDetailsTab"].ToString());
                generic.OpportunityBrokerverification(driver, extentTest, testName, testDataIteration, Ro["BrokerAccountField"].ToString(), Ro["BrokerContactField"].ToString());
                generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, Ro["ServiceProviderTab"].ToString());
                generic.OpportunityBrokerverification(driver, extentTest, testName, testDataIteration, Ro["ServiceProviderAccountField"].ToString(), Ro["ServiceProviderContact"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                generic.SelectNewTab(driver, extentTest, testName, testDataIteration);
                //generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["NewButton"].ToString());
                generic.OpportunityFieldVerification(driver, extentTest, testName, testDataIteration, Ro["EstimatedCloseDateField"].ToString(), Ro["ProbabilityField"].ToString());
                generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, Ro["BrokerDetailsTab"].ToString());
                generic.OpportunityBrokerverification(driver, extentTest, testName, testDataIteration, Ro["BrokerAccountField"].ToString(), Ro["BrokerContactField"].ToString());
                generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, Ro["ServiceProviderTab"].ToString());
                generic.OpportunityBrokerverification(driver, extentTest, testName, testDataIteration, Ro["ServiceProviderAccountField"].ToString(), Ro["ServiceProviderContact"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                generic.HandleSaveChangespopup(driver, extentTest, testName, testDataIteration);
                login.Logout(driver, extentTest, testName, testDataIteration);
            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }

        }


        public static IEnumerable<object[]> RTA_5588()
        {
            foreach (DataRow row in getTestCaseList("EnterpriseSalesManager"))
            {
                yield return new object[] { row };
            }
        }

        /// <summary>
        /// To check whether Enterprise Sales Manager is able to access Excel templates for my enterprise opportunities
        /// </summary>
        [TestCategory("smoke"), TestCategory("Enterprise Sales"), TestCategory("25Nov"), TestCategory("Regression"), TestCategory("RerunMay9"), TestCategory("QARefactorfail"), TestCategory("Sprint32NCS"), TestCategory("08Sep")]
        [TestProperty("TestcaseID", "RTA-5588")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5588), DynamicDataSourceType.Method)]

        public void RTA_5588_Exceltemplatesformyenterpriseopportunities(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "My Enterprise Opportunities");
                generic.SelectHeaderButton(driver, extentTest, testName, testDataIteration, Ro["Header Button"].ToString());
                generic.SelectandVerifyExcelTemplate(driver, extentTest, testName, testDataIteration, Ro["Excel Template Option1"].ToString(), Ro["Excel Template Option2"].ToString());
                login.Logout(driver, extentTest, testName, testDataIteration);
            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }

        }

        public static IEnumerable<object[]> RTA_5587()
        {
            foreach (DataRow row in getTestCaseList("EnterpriseSalesManager"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To check whether Enterprise Sales Manager user is able to access Excel templates for My Enterprise opportunities to follow up
        /// </summary>
        [TestCategory("smoke"), TestCategory("RerunMay9"), TestCategory("25Nov"), TestCategory("Regression"), TestCategory("RF24-4-20"), TestCategory("QARefactorfail"), TestCategory("Sprint32NCS"), TestCategory("08Sep")]
        [TestProperty("TestcaseID", "RTA-5587")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5587), DynamicDataSourceType.Method)]

        public void RTA_5587_Exceltemplatesformyenterpriseopportunitiestofollowup(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "My Enterprise Opportunities to Follow Up");
                generic.SelectHeaderButton(driver, extentTest, testName, testDataIteration, Ro["Header Button"].ToString());
                generic.SelectandVerifyExcelTemplate(driver, extentTest, testName, testDataIteration, Ro["Excel Template Option1"].ToString(), Ro["Excel Template Option2"].ToString());
                login.Logout(driver, extentTest, testName, testDataIteration);
            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }

        }
        public static IEnumerable<object[]> RTA_5586()
        {
            foreach (DataRow row in getTestCaseList("EnterpriseSalesManager"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To verify Enterprise Sales Manager is able to access Excel templates for Open Enterprise opportunities

        /// </summary>
        [TestCategory("smoke"), TestCategory("Enterprise Sales"), TestCategory("Agentissue"), TestCategory("25Nov"), TestCategory("RerunMay120"), TestCategory("Regression"), TestCategory("Sprint32NCS"), TestCategory("08Sep")]
        [TestProperty("TestcaseID", "RTA-5586")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5586), DynamicDataSourceType.Method)]

        public void RTA_5586_Exceltemplatesforopenenterpriseopportunities(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "Open Enterprise Opportunities");
                generic.SelectHeaderButton(driver, extentTest, testName, testDataIteration, Ro["Header Button"].ToString());
                generic.SelectandVerifyExcelTemplate(driver, extentTest, testName, testDataIteration, Ro["Excel Template Option1"].ToString(), Ro["Excel Template Option2"].ToString(), Ro["Close or Return"].ToString());
                login.Logout(driver, extentTest, testName, testDataIteration);
            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }

        }

        public static IEnumerable<object[]> RTA_5585()
        {
            foreach (DataRow row in getTestCaseList("EnterpriseSalesManager"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To Check Whether Enterprise Sales Manager is able to verify the Service Provider in Account Form.

        /// </summary>
        [TestCategory("smoke"), TestCategory("Enterprise Sales"), TestCategory("Agentissue"), TestCategory("RerunMay9"), TestCategory("Regression"), TestCategory("RF24-4-20"), TestCategory("Sprint32NCS")]
        [TestProperty("TestcaseID", "RTA-5585")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5585), DynamicDataSourceType.Method)]

        public void RTA_5585_EnterpriseSM_ServiceProviderinAccountForm(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString());
                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "All Enterprise Accounts");

                generic.AdvancedFind(driver, extentTest, testName, testDataIteration);
                generic.FilterResults(driver, extentTest, testName, testDataIteration, "Accounts", "Service Provider Account Lookup View", "");
                generic.VerifyServiceProvider(driver, extentTest, testName, testDataIteration);
                login.Logout(driver, extentTest, testName, testDataIteration);
            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }

        }
        public static IEnumerable<object[]> RTA_5580()
        {
            foreach (DataRow row in getTestCaseList("EnterpriseSalesManager"))
            {
                yield return new object[] { row };
            }
        }
        /// </summary>
        /// To verify Opportunity related views: Open Enterprise Opportunitie, My Enterprise Opportunities, Deals won This month, Lost opportunities.
        [TestCategory("smoke"), TestCategory("Enterprise Sales"), TestCategory("Agentissue"), TestCategory("Regression"), TestCategory("SprintUN")]
        [TestProperty("TestcaseID", "RTA-5580")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5580), DynamicDataSourceType.Method)]

        public void RTA_5580_VerifyOpportunityrelatedviews(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                generic.VerifyDropDownValuesforopportunity(driver, extentTest, testName, testDataIteration);
                login.Logout(driver, extentTest, testName, testDataIteration);


            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }

        }
        public static IEnumerable<object[]> RTA_5579()
        {
            foreach (DataRow row in getTestCaseList("EnterpriseSalesManager"))
            {
                yield return new object[] { row };
            }
        }

        /// </summary>
        /// To verify Account related view: My Enterprise Customers, All Enterprise Accounts, Recently created accounts.
        [TestCategory("smoke"), TestCategory("Enterprise Sales"), TestCategory("Agentissue"), TestCategory("Regression"), TestCategory("SprintUN")]
        [TestProperty("TestcaseID", "RTA-5579")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5579), DynamicDataSourceType.Method)]

        public void RTA_5579_VerifyAccountrelatedviews(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString());
                generic.VerifyDropDownValuesforaccount(driver, extentTest, testName, testDataIteration);
                login.Logout(driver, extentTest, testName, testDataIteration);


            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }

        }
        public static IEnumerable<object[]> RTA_5575()
        {
            foreach (DataRow row in getTestCaseList("EnterpriseSalesManager"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To verify To verify the Recently created accounts And their Fields.
        /// </summary>
        [TestCategory("smoke"), TestCategory("Enterprise Sales"), TestCategory("Agentissue"), TestCategory("Regression"), TestCategory("Sprint32NCS")]
        [TestProperty("TestcaseID", "RTA-5575")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_5575), DynamicDataSourceType.Method)]

        public void RTA_5575_VerifyRecentlyCreatedAccountsandFields(DataRow Ro)
        {
            try
            {

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString());
                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, Ro["DropdownValue2"].ToString());
                generic.VerifyEnterpriseAccountablefields(driver, extentTest, testName, testDataIteration, Ro["DropdownValue2"].ToString(), Ro["Field1"].ToString(), Ro["Field2"].ToString(), Ro["Field3"].ToString(), Ro["Field4"].ToString(), Ro["Field5"].ToString(), Ro["Field6"].ToString(), Ro["Field7"].ToString(), Ro["Field8"].ToString(), Ro["Field9"].ToString());
                login.Logout(driver, extentTest, testName, testDataIteration);

            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }

        }


        public static IEnumerable<object[]> RTA_14250()
        {
            foreach (DataRow row in getTestCaseList("SalesAdmin"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// TEST [CRM-5425] Verify that the workflow that links an employee contact to a user record is case insensitive.
        /// </summary>
        [TestCategory("Priority1"), TestCategory("Sales Admin"), TestCategory("Regression"), TestCategory("25Nov"), TestCategory("Sprint3640"), TestCategory("26AugFixed")]
        [TestProperty("TestcaseID", "RTA-14250")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_14250), DynamicDataSourceType.Method)]
        public void RTA_14250_VerifyUserContactLinks(DataRow Ro)
        {
            //try
            //{

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.VerifyContacts(driver, extentTest, testName, testDataIteration, Ro["EmployeeContact"].ToString());
            generic.UpdateandverifyEmployeecontactdetails(driver, extentTest, testName, testDataIteration, Ro["email"].ToString(), Ro["EmployeeContact"].ToString());
            login.Logout(driver, extentTest, testName, testDataIteration);
            //}


            //catch (Exception e)
            //{


            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}

        }
        public static IEnumerable<object[]> RTA_14246()
        {
            foreach (DataRow row in getTestCaseList("SalesAdmin"))
            {
                yield return new object[] { row };
            }
        }

        /// <summary>
        /// TEST [CRM-5425] Verify that the workflow that links an employee contact to a user record is case insensitive.
        /// </summary>
        [TestCategory("Priority1"), TestCategory("IT Sales"), TestCategory("Regression"), TestCategory("Sprint3640"), TestCategory("25Nov")]
        [TestProperty("TestcaseID", "RTA-14246")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_14246), DynamicDataSourceType.Method)]
        public void RTA_14246_VerifyBookresourceLinkedtoUser(DataRow Ro)
        {
            //try
            //{

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateTosettings(driver, extentTest, testName, testDataIteration);
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, "Bookable Resources");
            generic.VerifyBookableResourcelinked(driver, extentTest, testName, testDataIteration, Ro["EmployeeContact"].ToString());
            login.Logout(driver, extentTest, testName, testDataIteration);
            //}


            //catch (Exception e)
            //{


            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}

        }
        //public static IEnumerable<object[]> Test148()
        //{
        //    foreach (DataRow row in getTestCaseList("SalesAdmin"))
        //    {
        //        yield return new object[] { row };
        //    }
        //}
        ///// <summary>
        ///// TEST [CRM-5425] Core Sales - Verify the "Transfer to CS" button on the Lead form needs to be hidden.
        ///// </summary>
        //[TestCategory("smoke"), TestCategory("IT Sales"), TestCategory("Regression"), TestCategory("Rerun")]
        //[TestProperty("TestcaseID", "RTA-14250")]

        //[DataTestMethod]
        //[DynamicData(nameof(Test148), DynamicDataSourceType.Method)]
        //public void RTA_14250_VerifyTransfertoCSButtonVisibility(DataRow Ro)
        //{
        //    try
        //    {

        //        login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
        //        generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
        //        generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, "Leads".ToString());
        //        generic.OpenRecordGlobalSearch(driver, extentTest, testDataIteration, testName, "Lead");
        //        generic.TransfertoCSVisiblity(driver, extentTest, testName, testDataIteration, "Transfer to CS");
        //        login.Logout(driver, extentTest, testName, testDataIteration);
        //    }


        //    catch (Exception e)
        //    {


        //        AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
        //        Type thisType = this.GetType();
        //        object testCall = this;
        //        ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

        //    }

        //}

        public static IEnumerable<object[]> RTA_14178()
        {
            foreach (DataRow row in getTestCaseList("DirectSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// TEST [CRM-4558] Verify that clearing the Recommended Business Centre in an Opportunity should also clear the Location field
        /// </summary>
        [TestCategory("25Nov1"), TestCategory("Direct Sales"), TestCategory("Regression"), TestCategory("Sprint3640")]
        [TestProperty("TestcaseID", "RTA-14178")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_14178), DynamicDataSourceType.Method)]
        public void RTA_14178_VerifyRecommendedCentreandLocationfieldsinOpportunity(DataRow Ro)
        {
            //try
            //{

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, "Opportunities");
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
            generic.AdvancedFind(driver, extentTest, testName, testDataIteration);
            ThinkTime(2);
            generic.Advancedfindfilter1(driver, extentTest, testName, testDataIteration, "Opportunities", "Recommended Business Centre", "Contains Data", "Results", "[new]", "Potential Customer", "Contains");
            generic.selectARecord(driver, extentTest, testName, testDataIteration);
            generic.RemoveRecommendedCentre(driver, extentTest, testName, testDataIteration);
            generic.FilterResultsWithEditColumn(driver, extentTest, testName, testDataIteration, "Edit Columns", "Results", "1", "orgunitid", "Assigned Date", "locationid");
            // login.Logout(driver, extentTest, testName, testDataIteration);

            //}
            //catch (Exception e)
            //{


            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}

        }
        [Ignore]
        public static IEnumerable<object[]> RTA_14179()
        {
            foreach (DataRow row in getTestCaseList("DirectSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// TEST [CRM-4558] Verify that clearing the Recommended Business Centre in an Opportunity should also clear the Location field
        /// </summary>
        [TestCategory("Priority1"), TestCategory("Direct Sales"), TestCategory("25Nov"), TestCategory("Regression"), TestCategory("Sprint3640")]
        [TestProperty("TestcaseID", "RTA-14179")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_14179), DynamicDataSourceType.Method)]
        public void RTA_14179_VerifyRecommendedCentreUpdate(DataRow Ro)
        {

            //try
            //{

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            // Select Contacts entity and create new
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
            //string time = System.DateTime.Now.ToString();
            string now = System.DateTime.Now.ToString();

            generic.CreateNewContactEnterpriseSales(driver, extentTest, testDataIteration, testName, Ro["Contactname"].ToString(), now, Ro["Email"].ToString(), "");
            string contactname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");

            // Select opportunity tab and create New with minor and major source fields
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
            generic.CreateNewOpportunityEntetrprisewithprevcontact(driver, extentTest, testDataIteration, testName, Ro["TestChannel"].ToString(), Ro["TestMajorSource"].ToString(), Ro["TestMinorSource"].ToString(), contactname, Ro["spacesbrand"].ToString());


            // Refresh the page
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());
            ThinkTime(3);
            string OppId = Element(driver, Control("Reference", "Opportunity")).GetAttribute("value");
            //generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, "Opportunities");
            //generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
            string parent = driver.CurrentWindowHandle;
            //generic.AdvancedFind(driver, extentTest, testName, testDataIteration);
            generic.verifyzzzRecommendedCentre(driver, extentTest, testName, testDataIteration, OppId, Ro["spacesbrand"].ToString());
            //   generic.RemoveRecommendedCentre(driver, extentTest, testName, testDataIteration);
            //generic.UpdateRcentre(driver, extentTest, testName, testDataIteration);

            // generic.FilterResultsWithEditColumn1(driver, extentTest, testName, testDataIteration, "Edit Columns", "Results", "1", "orgunitid", "Assigned Date", "locationid");
            driver.Close();
            driver.SwitchTo().Window(parent);
            login.Logout(driver, extentTest, testName, testDataIteration);

            //}
            //catch (Exception e)
            //{


            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}

        }

        public static IEnumerable<object[]> RTA_7321()
        {
            foreach (DataRow row in getTestCaseList("DirectSalesAgent"))
            {
                yield return new object[] { row };
            }
        }

        /// <summary>
        /// TEST [CRM-4558] Verify that clearing the Recommended Business Centre in an Opportunity should also clear the Location field
        /// </summary>
        [TestCategory("Priority1"), TestCategory("Direct Sales"), TestCategory("Regression"), TestCategory("28Sep2020"), TestCategory("Sprint3640"), TestCategory("26AugFixed")]
        [TestProperty("TestcaseID", "RTA-7321")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_7321), DynamicDataSourceType.Method)]
        public void RTA_7321_VerifyRecommendedCentreandLocationfieldsUpdatedinOpportunity(DataRow Ro)
        {
            try
            {
                String emailid = "Test@gmail.com";

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, "Opportunities");
                ThinkTime(5);
                generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "Open Opportunities");
                string contactname = generic.CreateNewcontactOpportunity(driver, extentTest, testName, testDataIteration, "Alberta", "Uk english", emailid);

                generic.ScriptErrorExcep(driver, extentTest, testName, testDataIteration);
                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());
                generic.VerifyRecomendedBussinessCentre1(driver, extentTest, testName, testDataIteration, "OPS test");

                login.Logout(driver, extentTest, testName, testDataIteration);

            }
            catch (Exception e)
            {


                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }

        }

        public static IEnumerable<object[]> RTA_13420()
        {
            foreach (DataRow row in getTestCaseList("SalesAdmin"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// TEST [CRM-5425] Core Sales - Verify the "Transfer to CS" button on the Lead form needs to be hidden.
        /// </summary>
        [Ignore]
        //Marked as ignore as internal sales agent cant create email activity.
        [TestCategory("Sales Admin"), TestCategory("Priority1"), TestCategory("Regression"), TestCategory("Sprint3640")]
        [TestProperty("TestcaseID", "RTA-13420")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_13420), DynamicDataSourceType.Method)]
        public void RTA_13420_VerifyDueDateIsUpdateInEmailQueue(DataRow Ro)
        {
            //try
            //{

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.AdvancedFind(driver, extentTest, testName, testDataIteration);
            generic.Advancedfindfilter2(driver, extentTest, testName, testDataIteration, "Queue Items", "Object (Email)", "Email", "Equals", "Opportunity");
            generic.LookupSearchEmail(driver, extentTest, testName, testDataIteration, Ro["EmailValue"].ToString());
            ThinkTime(4);
            generic.FilterResultsWithEditColumnEmail(driver, extentTest, testName, testDataIteration, Ro["EmailValue"].ToString());
            generic.VeriEmailCol(driver, extentTest, testName, testDataIteration);
            //generic.FilterResultsWithEditColumn1(driver, extentTest, testName, testDataIteration, "Edit Columns", "Results", "1", "orgunitid", "Assigned Date", "locationid");
            ////generic.AddAndVerifyContactInOpportunitySales;
            //generic.OpenRecordGlobalSearch(driver, extentTest, testDataIteration, testName, "Sales");
            //generic.TransfertoCSVisiblity(driver, extentTest, testName, testDataIteration, "Transfer to CS");
            login.Logout(driver, extentTest, testName, testDataIteration);


            //}


            //catch (Exception e)
            //{


            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}

        }


        public static IEnumerable<object[]> RTA_14290()
        {
            foreach (DataRow row in getTestCaseList("SalesAdmin"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// TEST [CRM-5425] Verify that the workflow that links an employee contact to a user record is case insensitive.
        /// </summary>
        [TestCategory("Priority1"), TestCategory("Sales Admin"), TestCategory("Regression"), TestCategory("Sprint3640")]
        [TestProperty("TestcaseID", "RTA-14290")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_14290), DynamicDataSourceType.Method)]
        public void RTA_14290_VerifyBookableResourceHomeLocation(DataRow Ro)
        {
            try
            {

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateTosettings(driver, extentTest, testName, testDataIteration);
                //for (int i = 0; i < 2; i++)
                //{
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Hierarchies"].ToString());
                generic.VerifyBookableResourceHomeLocation(driver, extentTest, testName, testDataIteration, Ro["ResourceName"].ToString(), Ro["location"].ToString());

                // }

                login.Logout(driver, extentTest, testName, testDataIteration);
            }


            catch (Exception e)
            {


                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }

        }
        public static IEnumerable<object[]> RTA_14176()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To verify scheduling screen displays the calendar control being defaulted to a day view
        [Ignore]
        //Marked as ignore due to start date funtionality.
        [TestCategory("Priority1"), TestCategory("Regression"), TestCategory("Sprint 39.1"), TestCategory("Sprint3640")]
        [TestProperty("TestcaseID", "RTA-14176")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_14176), DynamicDataSourceType.Method)]
        public void RTA_14176_VerifyNextWorkingday(DataRow Ro)
        {
            //try
            //{


            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());

            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
            generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "My Open Opportunities");


            generic.CreateNewOpportunityBookATour(driver, extentTest, testName, testDataIteration, Ro["BussinessCentre2"].ToString());
            generic.UpdateStartDate(driver, extentTest, testDataIteration, testName, Ro["SelectMonthFeb"].ToString(), Ro["SelectDateFeb"].ToString());

            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Button"].ToString());

            DateTime now = DateTime.Now;


            generic.SlotheaderverificationUP(driver, extentTest, testName, testDataIteration, now);

            login.Logout(driver, extentTest, testName, testDataIteration);
            //}


            //catch (Exception e)
            //{


            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}

        }

        public static IEnumerable<object[]> RTA_14310()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To verify scheduling screen displays the calendar control being defaulted to a day view
        /// </summary>
        [Ignore]
        //Marked as ignore due to start date funtionality.
        [TestCategory("Priority1"), TestCategory("Regression"), TestCategory("Sprint3640")]
        [TestProperty("TestcaseID", "RTA-14310")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_14310), DynamicDataSourceType.Method)]
        public void RTA_14310_VerifyNextWorkingdayIfNextdayisHoliday(DataRow Ro)
        {
            try
            {

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());

                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "My Open Opportunities");
                generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);

                generic.CreateNewOpportunityBookATour(driver, extentTest, testName, testDataIteration, Ro["BussinessCentre2"].ToString());
                generic.UpdateStartDate(driver, extentTest, testDataIteration, testName, Ro["SelectMonthFeb"].ToString(), Ro["SelectDateFeb"].ToString());

                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Button"].ToString());

                generic.Slotheaderverification(driver, extentTest, testName, testDataIteration);


                login.Logout(driver, extentTest, testName, testDataIteration);
            }


            catch (Exception e)
            {


                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }

        }

        public static IEnumerable<object[]> RTA_14184()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }

        /// <summary>
        /// To verify scheduling screen displays the calendar control being defaulted to a day view
        /// </summary>
        [Ignore]
        //Marked as ignore due to start date funtionality.
        [TestCategory("IWG Sales"), TestCategory("Sprint 39.1"), TestCategory("Priority1"), TestCategory("Regression"), TestCategory("Sprint3640")]
        [TestProperty("TestcaseID", "RTA-14184")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_14184), DynamicDataSourceType.Method)]
        public void RTA_14184_VerifyNextWorkingdayForArabCountry(DataRow Ro)
        {
            try
            {

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());

                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "My Open Opportunities");
                generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);

                generic.CreateNewOpportunityBookATour(driver, extentTest, testName, testDataIteration, Ro["BussinessCentre2"].ToString());
                generic.UpdateStartDate(driver, extentTest, testDataIteration, testName, Ro["SelectMonthFeb"].ToString(), Ro["SelectDateFeb"].ToString());

                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Button"].ToString());

                generic.Slotheaderverification(driver, extentTest, testName, testDataIteration);


                login.Logout(driver, extentTest, testName, testDataIteration);
            }


            catch (Exception e)
            {


                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }

        }

        public static IEnumerable<object[]> RTA_13921()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// TEST [CRM-5242] Verify that Phone number contained in No Contact Email journey with Brand Regus and languages English or Norwegian delivered to customers must be updated
        /// </summary>
        [Ignore]
        //Marked as ignore as this fuctionality is decommisioned as part of global p1 release.
        [TestCategory("Regression"), TestCategory("Priority1"), TestCategory("Sprint 39.1"), TestCategory("Sprint3640")]
        [TestProperty("TestcaseID", "RTA-13921")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_13921), DynamicDataSourceType.Method)]
        public void RTA_13921_VerifyPhoneContactonNoContactEmail(DataRow Ro)
        {
            try
            {

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());

                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "My Open Opportunities");
                generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);

                generic.CreateNewOpportunityBookATour(driver, extentTest, testName, testDataIteration, Ro["BussinessCentre2"].ToString());
                generic.VerifyPhoneisUpdatedonEmails(driver, extentTest, testName, testDataIteration, "(+47) 21 98 48 29");

                login.Logout(driver, extentTest, testName, testDataIteration);
            }


            catch (Exception e)
            {


                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }

        }



        public static IEnumerable<object[]> RTA_11120()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }

        /// <summary>
        /// CRM-4574
        ///  Verify whether while selecting a Broker contact on an Lead form it should populate the Broker Account with Broker Details.
        /// </summary>
        [TestCategory("smoke"), TestCategory("Regression"), TestCategory("RerunMay9"), TestCategory("QARefactorfail"), TestCategory("Rerun-21062020_1"), TestCategory("Sprint3640")]
        [TestProperty("TestcaseID", "RTA-11120")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_11120), DynamicDataSourceType.Method)]
        public void RTA_11120_VerifyBrokeerAccountpopulatedonLead(DataRow Ro)
        {
            try
            {
                string now = System.DateTime.Now.ToString();
                // Login as Sales Agent
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());

                // Create Account
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString());
                generic.SelectNewTab(driver, extentTest, testName, testDataIteration);
                string Brokeraccount = generic.CreateNewAccountWithCustomerTypeNew(driver, extentTest, testDataIteration, testName, Ro["TestAccountLink"].ToString(), now, Ro["CustomerType2"].ToString());
                //generic.EnterContactNumber(driver, extentTest, testName, testDataIteration, Ro["BussinessPhone"].ToString());

                // Select Contacts entity and create new
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
                string contactname = generic.CreateNewContactEnterpriseSalesForBroker(driver, extentTest, testDataIteration, testName, Ro["Contactname"].ToString(), now, Ro["Email"].ToString(), Brokeraccount);
                // generic.EnterContactNumber(driver, extentTest, testName, testDataIteration, Ro["BussinessPhone"].ToString());
                //generic.Entercompanyname(driver, extentTest, testName, testDataIteration,Brokeraccount);
                // generic.Movetobroker(driver, extentTest, testName, testDataIteration, Ro["CustomerType2"].ToString());

                //Click Lead and create new Lead
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity3"].ToString());
                generic.SelectNewTab(driver, extentTest, testName, testDataIteration);

                // generic.createandqualifylead(driver, extentTest, testName, testDataIteration, "Lead" + now, Ro["AddEmail"].ToString(), Ro["BussinessPhone"].ToString(), Ro["Source"].ToString(), Ro["MajorSource"].ToString(), Ro["MinorSource2"].ToString(), now, "ExistingContact", "", contactname, "", "");
                generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);


                // Link Broker Contact
                generic.LinkBrokerdetailsNew(driver, extentTest, testName, testDataIteration, Brokeraccount, contactname);

                // Verify Brokr contact details are displayed
                generic.VerifybrokercontactdetailsNew(driver, extentTest, testName, testDataIteration);


                // Verify Broker Account populated
                generic.VerifybrokerAccountdetailsLeadNew(driver, extentTest, testName, testDataIteration);

                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity3"].ToString());
                generic.DiscardChanges(driver, extentTest, testName, testDataIteration);

                //Log out
                generic.Logout(driver, extentTest, testName, testDataIteration);

            }
            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }







        public static IEnumerable<object[]> RTA_14822()
        {
            foreach (DataRow row in getTestCaseList("ITSalesUser"))
            {
                yield return new object[] { row };
            }
        }


        /// <summary>
        /// CRM-5483
        /// Verify that IT Sales Users and Managers are able to create a new contact via the Contact form
        /// </summary>
        [TestCategory("Priority1"), TestCategory("Sprint3640"), TestCategory("Regression")]
        [TestProperty("TestcaseID", "RTA-14822")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_14822), DynamicDataSourceType.Method)]

        public void RTA_14822_VerifyitsalesNEWContact(DataRow Ro)
        {
            try
            {

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());

                // Create new   prev contact 
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
                // generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
                string TimeInSec = generic.GetSystemTimeInSec(driver, extentTest, testName, testDataIteration);
                generic.CreateNewContactITSaleswithlanguageandemail(driver, extentTest, testDataIteration, testName, "TestContact", "45678", "test123@gmail.com", Ro["CompanyName"].ToString());

                //Search and open the created contact and verify contactfied
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());

                generic.OpenRecordGlobalSearch(driver, extentTest, testDataIteration, testName, "TestContact" + "45678");


                // Verify the proton id field is null 
                // generic.protonidVerification(driver, extentTest, testName, testDataIteration);


                //verify the contact details entered
                generic.Verifydtaoncontactfield(driver, extentTest, testName, testDataIteration, "TestContact" + "45678", "G2 GROUP", "UK English");


                //Logout from application
                login.Logout(driver, extentTest, testName, testDataIteration);
            }
            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Info", "Failed due to" + e.Message, "Test Failed"); AddLog(driver, extentTest, testName, testDataIteration, "Info", "Failed due to" + e.Message, "Test Failed"); Type thisType = this.GetType(); object testCall = this; ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }









        public static IEnumerable<object[]> RTA_14781()
        {
            foreach (DataRow row in getTestCaseList("ITSalesUser"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// CRM-5483
        /// Verify that IT Sales User/Manager are able to send emails from Dynamics to customers from the Opportunity.
        /// </summary>
        [TestCategory("0309"), TestCategory("Sprint3640"), TestCategory("Regression"), TestCategory("11Sep"), TestCategory("2810")]
        [TestProperty("TestcaseID", "RTA-14781")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_14781), DynamicDataSourceType.Method)]

        public void RTA_14781_VerifyitsalesQuickContact(DataRow Ro)
        {
            //try
            //{

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());

            // Create new contact 
            generic.QuickcreateITsales(driver, extentTest, testName, testDataIteration, "Contact");
            //string time = DateTime.Now.ToString("yyyy-MM-dd HH:mm:sszzz");
            string time = System.DateTime.Now.ToString();
            string contact = generic.Qickcretecontact(driver, extentTest, testDataIteration, testName, "TestContact", time);

            //Search and open the created contact and verify contactfied
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
            generic.OpenRecordGlobalSearch(driver, extentTest, testDataIteration, testName, contact);

            // Verify the proton id field is null 
            // generic.protonidVerification(driver, extentTest, testName, testDataIteration);

            //verify the contact details entered
            generic.Verifydtaoncontactfield(driver, extentTest, testName, testDataIteration, contact, "G2 GROUP", "UK English");

            //Logout from application
            generic.Logout(driver, extentTest, testName, testDataIteration);
            //    }

            //        catch (Exception e)
            //        {

            //            AddLog(driver, extentTest, testName, testDataIteration, "Info", "Failed due to" + e.Message, "Test Failed"); AddLog(driver, extentTest, testName, testDataIteration, "Info", "Failed due to" + e.Message, "Test Failed"); Type thisType = this.GetType(); object testCall = this; ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}

        }


        public static IEnumerable<object[]> RTA_15293()
        {
            foreach (DataRow row in getTestCaseList("ITSalesUser"))
            {
                yield return new object[] { row };
            }
        }

        /// <summary>
        /// Verify that IT Sales User/Manager are able to send emails from Dynamics to customers from the Opportunity.
        /// </summary>
        [TestCategory("Priority1"), TestCategory("Sprint3640"), TestCategory("Regression")]
        [TestProperty("TestcaseID", "RTA-15293")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_15293), DynamicDataSourceType.Method)]

        public void RTA_15293_VerifyITSalesAgentEmailVerification(DataRow Ro)
        {

            //try
            //{

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "My Open IT Sales Opportunities");
            generic.CreateNewOppITSalesWithData(driver, extentTest, testName, testDataIteration, "TestLNameEmail");
            string reference = generic.GetReferenceIDOpportunity(driver, extentTest, testName, testDataIteration);
            generic.scrollUpPage(driver, extentTest, testName, testDataIteration);
            generic.scrollUpPage(driver, extentTest, testName, testDataIteration);
            generic.CreateNewActivityButtonOpportunity(driver, extentTest, testName, testDataIteration, "Email");
            generic.CreateNewEmailActivity(driver, extentTest, testName, testDataIteration);
            generic.VerifyEmailActivity(driver, extentTest, testName, testDataIteration);
            login.Logout(driver, extentTest, testName, testDataIteration);

            //    }

            //        catch (Exception e)
            //        {

            //            AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}

        }

        public static IEnumerable<object[]> RTA_23502()
        {
            foreach (DataRow row in getTestCaseList("ITSalesUser"))
            {
                yield return new object[] { row };
            }
        }

        /// <summary>
        /// CRM-6415: Verify that IT Sales User are able to send emails from Dynamics to customers from the Opportunity amd trakcing token is geenrated
        /// </summary>
        [TestCategory("HotFix"), TestCategory("HF")]
        [TestProperty("TestcaseID", "RTA-23502")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_23502), DynamicDataSourceType.Method)]

        public void RTA_23502_VerifyITSalesAgentEmailVerification(DataRow Ro)
        {

            //try
            //{

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "My Open IT Sales Opportunities");
            generic.CreateNewOppITSalesWithData(driver, extentTest, testName, testDataIteration, "TestLNameEmail");
            string reference = generic.GetReferenceIDOpportunity(driver, extentTest, testName, testDataIteration);
            generic.scrollUpPage(driver, extentTest, testName, testDataIteration);
            generic.scrollUpPage(driver, extentTest, testName, testDataIteration);
            generic.CreateNewActivityButtonOpportunity(driver, extentTest, testName, testDataIteration, "Email");
            generic.createneweamilopp(driver, extentTest, testName, testDataIteration, "CRM Test 8");
            generic.openoppertunityemailrecord(driver, extentTest, testName, testDataIteration);

            generic.VerifyEmailActivitytoken(driver, extentTest, testName, testDataIteration);
            login.Logout(driver, extentTest, testName, testDataIteration);

            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}

        }

        public static IEnumerable<object[]> RTA_23548()
        {
            foreach (DataRow row in getTestCaseList("CS"))
            {
                yield return new object[] { row };
            }
        }

        /// <summary>
        /// CRM-6415: Verify that LSC Agent are able to send emails from Dynamics to customers from the Opportunity amd trakcing token is geenrated
        /// </summary>
        [TestCategory("HotFix"), TestCategory("HF")]
        [TestProperty("TestcaseID", "RTA-23548")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_23548), DynamicDataSourceType.Method)]

        public void RTA_23548_VerifyLSCAgentEmailVerification(DataRow Ro)
        {

            //try
            //{

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["LSCAgent"].ToString(), Ro["LSCAgentPass"].ToString());


            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, "Customer Service");
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, "Cases");
            ThinkTime(10);
            generic.HidingPureCloudNewCS(driver, extentTest, testName, testDataIteration);


            string caseNumber = generic.CreateNewLSCCase(driver, extentTest, testName, testDataIteration, Ro["CompanyName"].ToString(), Ro["type"].ToString(), Ro["Source1"].ToString(), Ro["SubSource1"].ToString(), "California, Century City - Avenue of the Stars", Ro["Product"].ToString());
            generic.scrollDownCasePageCUST(driver, extentTest, testName, testDataIteration, "100");
            generic.NewActivity(driver, extentTest, testName, testDataIteration, "Email");
            generic.EmailtoCaseContact(driver, extentTest, testName, testDataIteration);
            generic.DiscardChanges(driver, extentTest, testName, testDataIteration);

            generic.scrollDownCasePageTimeLine(driver, extentTest, testName, testDataIteration);
            generic.openemailrecord(driver, extentTest, testName, testDataIteration);
            generic.VerifyEmailActivitytoken(driver, extentTest, testName, testDataIteration);
            login.Logout(driver, extentTest, testName, testDataIteration);

            ///lsc manager
            login.Loginafterlogout(driver, extentTest, testName, testDataIteration, Ro["LscmanUserName"].ToString(), Ro["LSCManPassword"].ToString());

            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["CustomerService"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, "Cases");
            generic.HidingPureCloudcs(driver, extentTest, testName, testDataIteration);


            string caseNumber2 = generic.CreateNewLSCCaseMan(driver, extentTest, testName, testDataIteration, Ro["CompanyName"].ToString(), Ro["type"].ToString(), Ro["Source1"].ToString(), Ro["SubSource1"].ToString(), "Manchester, Spaces Deansgate", Ro["Product"].ToString());
            generic.scrollDownCasePageCUST(driver, extentTest, testName, testDataIteration, "100");
            generic.NewActivity(driver, extentTest, testName, testDataIteration, "Email");
            generic.EmailtoCaseContact(driver, extentTest, testName, testDataIteration);
            generic.DiscardChanges(driver, extentTest, testName, testDataIteration);

            generic.scrollDownCasePageTimeLine(driver, extentTest, testName, testDataIteration);
            generic.openemailrecord(driver, extentTest, testName, testDataIteration);
            generic.VerifyEmailActivitytoken(driver, extentTest, testName, testDataIteration);
            login.Logout(driver, extentTest, testName, testDataIteration);


            // LSC Admin
            login.Loginafterlogout(driver, extentTest, testName, testDataIteration, Ro["LSCAdmin"].ToString(), Ro["LSCPass"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["CustomerService"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, "Cases");
            generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);


            string caseNumber3 = generic.CreateNewLSCCaseAdmin(driver, extentTest, testName, testDataIteration, Ro["CompanyName"].ToString(), Ro["type"].ToString(), Ro["Source1"].ToString(), Ro["SubSource1"].ToString(), "Manchester, Spaces Deansgate", Ro["Product"].ToString());
            generic.scrollDownCasePageCUST(driver, extentTest, testName, testDataIteration, "100");
            generic.NewActivity(driver, extentTest, testName, testDataIteration, "Email");
            generic.EmailtoCaseContact(driver, extentTest, testName, testDataIteration);
            generic.DiscardChanges(driver, extentTest, testName, testDataIteration);

            generic.scrollDownCasePageTimeLine(driver, extentTest, testName, testDataIteration);
            generic.openemailrecord(driver, extentTest, testName, testDataIteration);
            generic.VerifyEmailActivitytoken(driver, extentTest, testName, testDataIteration);
            login.Logout(driver, extentTest, testName, testDataIteration);


            // GSC Agent
            login.Loginafterlogout(driver, extentTest, testName, testDataIteration, Ro["GSCAgent"].ToString(), Ro["GSCPass"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["CustomerService"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, "GSC");
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, "Cases");
            generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);


            generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "Active Cases - GSC");
            string caseNumber4 = generic.SelectingActiveCase(driver, extentTest, testName, testDataIteration, "0");
            generic.OpenParticularRecord(driver, extentTest, testName, testDataIteration, caseNumber);

            generic.scrollDownCasePageCUST(driver, extentTest, testName, testDataIteration, "100");
            /////send mail to case contact
            generic.NewActivity(driver, extentTest, testName, testDataIteration, "Email");
            generic.EmailtoCaseContact(driver, extentTest, testName, testDataIteration);
            generic.DiscardChanges(driver, extentTest, testName, testDataIteration);

            generic.scrollDownCasePageTimeLine(driver, extentTest, testName, testDataIteration);
            generic.openemailrecord(driver, extentTest, testName, testDataIteration);
            generic.VerifyEmailActivitytoken(driver, extentTest, testName, testDataIteration);
            login.Logout(driver, extentTest, testName, testDataIteration);

            // GSC Manager
            login.Loginafterlogout(driver, extentTest, testName, testDataIteration, Ro["GSCMan"].ToString(), Ro["GSCManPass"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, "GSC");
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, "Cases");
            generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);


            generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "Active Cases - GSC");
            string caseNumber5 = generic.SelectingActiveCase(driver, extentTest, testName, testDataIteration, "0");
            generic.OpenParticularRecord(driver, extentTest, testName, testDataIteration, caseNumber);

            generic.scrollDownCasePageCUST(driver, extentTest, testName, testDataIteration, "100");
            /////send mail to case contact
            generic.NewActivity(driver, extentTest, testName, testDataIteration, "Email");
            generic.EmailtoCaseContact(driver, extentTest, testName, testDataIteration);
            generic.DiscardChanges(driver, extentTest, testName, testDataIteration);

            generic.scrollDownCasePageTimeLine(driver, extentTest, testName, testDataIteration);
            generic.openemailrecord(driver, extentTest, testName, testDataIteration);

            generic.VerifyEmailActivitytoken(driver, extentTest, testName, testDataIteration);
            login.Logout(driver, extentTest, testName, testDataIteration);

            // GSCAdmin
            login.Loginafterlogout(driver, extentTest, testName, testDataIteration, Ro["GSCAdmin"].ToString(), Ro["GSCAdmPass"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, "GSC");
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, "Cases");
            generic.HidingPureCloudcs(driver, extentTest, testName, testDataIteration);


            generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "Active Cases - GSC");
            string caseNumber6 = generic.SelectingActiveCase(driver, extentTest, testName, testDataIteration, "0");
            generic.OpenParticularRecord(driver, extentTest, testName, testDataIteration, caseNumber);

            generic.scrollDownCasePageCUST(driver, extentTest, testName, testDataIteration, "100");
            /////send mail to case contact
            generic.NewActivity(driver, extentTest, testName, testDataIteration, "Email");
            generic.EmailtoCaseContact(driver, extentTest, testName, testDataIteration);
            generic.DiscardChanges(driver, extentTest, testName, testDataIteration);

            generic.scrollDownCasePageTimeLine(driver, extentTest, testName, testDataIteration);
            generic.openemailrecord(driver, extentTest, testName, testDataIteration);

            generic.VerifyEmailActivitytoken(driver, extentTest, testName, testDataIteration);
            login.Logout(driver, extentTest, testName, testDataIteration);




            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}

        }




        public static IEnumerable<object[]> RTA_15044()
        {
            foreach (DataRow row in getTestCaseList("ITSalesUser"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// Verify the IT Sales - Accounts system views.
        /// CRM-5113
        /// </summary>
        [TestCategory("Priority1"), TestCategory("Sprint3640"), TestCategory("Regression")]
        [TestProperty("TestcaseID", "RTA-15044")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_15044), DynamicDataSourceType.Method)]

        public void RTA_15044_VerifytheITSalesAccountssystemviews(DataRow Ro)
        {
            try
            {

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity3"].ToString());

                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, Ro["DropdownValue1"].ToString());
                generic.VerifyITSalesAccountablefields(driver, extentTest, testName, testDataIteration, Ro["DropdownValue1"].ToString(), Ro["Field1"].ToString(), Ro["Field2"].ToString(), Ro["Field3"].ToString(), Ro["Field4"].ToString(), Ro["Field5"].ToString(), Ro["Field6"].ToString(), Ro["Field7"].ToString(), Ro["Field8"].ToString(), Ro["AccountField9"].ToString(), Ro["ResultsButton"].ToString());

                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, Ro["DropdownValue2"].ToString());
                generic.VerifyITSalesAccountablefields(driver, extentTest, testName, testDataIteration, Ro["DropdownValue2"].ToString(), Ro["Field1"].ToString(), Ro["Field2"].ToString(), Ro["Field3"].ToString(), Ro["Field4"].ToString(), Ro["Field5"].ToString(), Ro["Field6"].ToString(), Ro["Field7"].ToString(), Ro["Field8"].ToString(), Ro["AccountField9"].ToString(), Ro["ResultsButton"].ToString());

                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, Ro["DropdownValue3"].ToString());
                generic.VerifyITSalesAccountablefields(driver, extentTest, testName, testDataIteration, Ro["DropdownValue3"].ToString(), Ro["Field1"].ToString(), Ro["Field2"].ToString(), Ro["Field3"].ToString(), Ro["Field4"].ToString(), Ro["Field5"].ToString(), Ro["Field6"].ToString(), Ro["Field7"].ToString(), Ro["Field8"].ToString(), Ro["AccountField9"].ToString(), Ro["ResultsButton"].ToString());

                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, Ro["DropdownValue4"].ToString());
                generic.VerifyITSalesAccountablefields(driver, extentTest, testName, testDataIteration, Ro["DropdownValue4"].ToString(), Ro["Field1"].ToString(), Ro["Field2"].ToString(), Ro["Field3"].ToString(), Ro["Field4"].ToString(), Ro["Field5"].ToString(), Ro["Field6"].ToString(), Ro["Field7"].ToString(), Ro["Field8"].ToString(), Ro["AccountField9"].ToString(), Ro["ResultsButton"].ToString());

                login.Logout(driver, extentTest, testName, testDataIteration);
            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }

        }

        public static IEnumerable<object[]> RTA_15490()
        {
            foreach (DataRow row in getTestCaseList("ITSalesManager"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// CRM-5113
        /// Verify the IT Sales - Accounts system views for IT Sales Manager.
        /// </summary>
        [TestCategory("IT Sales Manager"), TestCategory("Sprint3640"), TestCategory("Regression"), TestCategory("Priority1")]
        [TestProperty("TestcaseID", "RTA-15490")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_15490), DynamicDataSourceType.Method)]

        public void RTA_15490_VerifytheITSalesManagerAccountssystemviews(DataRow Ro)
        {
            try
            {

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity3"].ToString());

                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, Ro["DropdownValue1"].ToString());
                generic.VerifyITSalesAccountablefields(driver, extentTest, testName, testDataIteration, Ro["DropdownValue1"].ToString(), Ro["AccountField1"].ToString(), Ro["AccountField2"].ToString(), Ro["AccountField3"].ToString(), Ro["AccountField4"].ToString(), Ro["AccountField5"].ToString(), Ro["AccountField6"].ToString(), Ro["AccountField7"].ToString(), Ro["AccountField8"].ToString(), Ro["AccountField9"].ToString(), Ro["ResultsButton"].ToString());

                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, Ro["DropdownValue2"].ToString());
                generic.VerifyITSalesAccountablefields(driver, extentTest, testName, testDataIteration, Ro["DropdownValue2"].ToString(), Ro["AccountField1"].ToString(), Ro["AccountField2"].ToString(), Ro["AccountField3"].ToString(), Ro["AccountField4"].ToString(), Ro["AccountField5"].ToString(), Ro["AccountField6"].ToString(), Ro["AccountField7"].ToString(), Ro["AccountField8"].ToString(), Ro["AccountField9"].ToString(), Ro["ResultsButton"].ToString());

                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, Ro["DropdownValue3"].ToString());
                generic.VerifyITSalesAccountablefields(driver, extentTest, testName, testDataIteration, Ro["DropdownValue3"].ToString(), Ro["AccountField1"].ToString(), Ro["AccountField2"].ToString(), Ro["AccountField3"].ToString(), Ro["AccountField4"].ToString(), Ro["AccountField5"].ToString(), Ro["AccountField6"].ToString(), Ro["AccountField7"].ToString(), Ro["AccountField8"].ToString(), Ro["AccountField9"].ToString(), Ro["ResultsButton"].ToString());

                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, Ro["DropdownValue4"].ToString());
                generic.VerifyITSalesAccountablefields(driver, extentTest, testName, testDataIteration, Ro["DropdownValue4"].ToString(), Ro["AccountField1"].ToString(), Ro["AccountField2"].ToString(), Ro["AccountField3"].ToString(), Ro["AccountField4"].ToString(), Ro["AccountField5"].ToString(), Ro["AccountField6"].ToString(), Ro["AccountField7"].ToString(), Ro["AccountField8"].ToString(), Ro["AccountField9"].ToString(), Ro["ResultsButton"].ToString());

                login.Logout(driver, extentTest, testName, testDataIteration);
            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }

        }


        public static IEnumerable<object[]> RTA_15047()
        {
            foreach (DataRow row in getTestCaseList("ITSalesUser"))
            {
                yield return new object[] { row };
            }
        }

        /// <summary>
        /// CRM-5113
        /// Verify the IT Sales - Contacts system views.
        /// </summary>
        [TestCategory("Priority1"), TestCategory("Sprint3640"), TestCategory("Regression")]
        [TestProperty("TestcaseID", "RTA-15047")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_15047), DynamicDataSourceType.Method)]

        public void RTA_15047_VerifytheITSalesContactssystemviews(DataRow Ro)
        {
            try
            {

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());

                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, Ro["Contact1"].ToString());
                generic.VerifyITSalesContactfields(driver, extentTest, testName, testDataIteration, Ro["Contact1"].ToString(), Ro["ContactField1"].ToString(), Ro["ContactField2"].ToString(), Ro["ContactField3"].ToString(), Ro["ContactField4"].ToString(), Ro["ContactField5"].ToString(), Ro["ResultsButton"].ToString());

                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, Ro["Contact2"].ToString());
                generic.VerifyITSalesContactfields(driver, extentTest, testName, testDataIteration, Ro["Contact2"].ToString(), Ro["ContactField1"].ToString(), Ro["ContactField2"].ToString(), Ro["ContactField3"].ToString(), Ro["ContactField4"].ToString(), Ro["ContactField5"].ToString(), Ro["ResultsButton"].ToString());

                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, Ro["Contact3"].ToString());
                generic.VerifyITSalesContactfields(driver, extentTest, testName, testDataIteration, Ro["Contact3"].ToString(), Ro["ContactField1"].ToString(), Ro["ContactField2"].ToString(), Ro["ContactField3"].ToString(), Ro["ContactField4"].ToString(), Ro["ContactField5"].ToString(), Ro["ResultsButton"].ToString());

                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, Ro["Contact4"].ToString());
                generic.VerifyITSalesContactfields(driver, extentTest, testName, testDataIteration, Ro["Contact4"].ToString(), Ro["ContactField1"].ToString(), Ro["ContactField2"].ToString(), Ro["ContactField3"].ToString(), Ro["ContactField4"].ToString(), Ro["ContactField5"].ToString(), Ro["ResultsButton"].ToString());

                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, Ro["Contact5"].ToString());
                generic.VerifyITSalesContactfields(driver, extentTest, testName, testDataIteration, Ro["Contact5"].ToString(), Ro["ContactField1"].ToString(), Ro["ContactField2"].ToString(), Ro["ContactField3"].ToString(), Ro["ContactField4"].ToString(), Ro["ContactField5"].ToString(), Ro["ResultsButton"].ToString());

                login.Logout(driver, extentTest, testName, testDataIteration);
            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }

        }

        public static IEnumerable<object[]> RTA_15491()
        {
            foreach (DataRow row in getTestCaseList("ITSalesManager"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// CRM-5113
        /// Verify the IT Sales - Contacts system views for IT Sales Manager.
        /// </summary>
        [TestCategory("Priority1"), TestCategory("Sprint3640"), TestCategory("Regression")]
        [TestProperty("TestcaseID", "RTA-15491")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_15491), DynamicDataSourceType.Method)]

        public void RTA_15491_VerifytheITSalesManagerContactssystemviews(DataRow Ro)
        {
            try
            {

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());

                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, Ro["Contact1"].ToString());
                generic.VerifyITSalesContactfields(driver, extentTest, testName, testDataIteration, Ro["Contact1"].ToString(), Ro["ContactField1"].ToString(), Ro["ContactField2"].ToString(), Ro["ContactField3"].ToString(), Ro["ContactField4"].ToString(), Ro["ContactField5"].ToString(), Ro["ResultsButton"].ToString());

                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, Ro["Contact2"].ToString());
                generic.VerifyITSalesContactfields(driver, extentTest, testName, testDataIteration, Ro["Contact2"].ToString(), Ro["ContactField1"].ToString(), Ro["ContactField2"].ToString(), Ro["ContactField3"].ToString(), Ro["ContactField4"].ToString(), Ro["ContactField5"].ToString(), Ro["ResultsButton"].ToString());

                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, Ro["Contact3"].ToString());
                generic.VerifyITSalesContactfields(driver, extentTest, testName, testDataIteration, Ro["Contact3"].ToString(), Ro["ContactField1"].ToString(), Ro["ContactField2"].ToString(), Ro["ContactField3"].ToString(), Ro["ContactField4"].ToString(), Ro["ContactField5"].ToString(), Ro["ResultsButton"].ToString());

                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, Ro["Contact4"].ToString());
                generic.VerifyITSalesContactfields(driver, extentTest, testName, testDataIteration, Ro["Contact4"].ToString(), Ro["ContactField1"].ToString(), Ro["ContactField2"].ToString(), Ro["ContactField3"].ToString(), Ro["ContactField4"].ToString(), Ro["ContactField5"].ToString(), Ro["ResultsButton"].ToString());

                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, Ro["Contact5"].ToString());
                generic.VerifyITSalesContactfields(driver, extentTest, testName, testDataIteration, Ro["Contact5"].ToString(), Ro["ContactField1"].ToString(), Ro["ContactField2"].ToString(), Ro["ContactField3"].ToString(), Ro["ContactField4"].ToString(), Ro["ContactField5"].ToString(), Ro["ResultsButton"].ToString());

                login.Logout(driver, extentTest, testName, testDataIteration);
            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }

        }

        public static IEnumerable<object[]> RTA_15048()
        {
            foreach (DataRow row in getTestCaseList("ITSalesUser"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// CRM-5113
        /// Verify the IT Sales - Activities system views.
        /// </summary>
        [TestCategory("Priority1"), TestCategory("Sprint3640"), TestCategory("Regression")]
        [TestProperty("TestcaseID", "RTA-15048")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_15048), DynamicDataSourceType.Method)]

        public void RTA_15048_VerifytheITSalesActivitiessystemviews(DataRow Ro)
        {
            try
            {

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Tab"].ToString());

                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, Ro["Activity1"].ToString());
                generic.VerifyITSalesActivitiesfields(driver, extentTest, testName, testDataIteration, Ro["Activity1"].ToString(), Ro["ActivityField1"].ToString(), Ro["ActivityField2"].ToString(), Ro["ActivityField3"].ToString(), Ro["ActivityField4"].ToString(), Ro["ActivityField5"].ToString(), Ro["ActivityField6"].ToString(), Ro["ActivityField7"].ToString(), Ro["ActivityField8"].ToString(), Ro["ActivityField9"].ToString(), Ro["ActivityField10"].ToString(), Ro["ActivityField11"].ToString(), Ro["ResultsButton"].ToString());

                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, Ro["Activity2"].ToString());
                generic.VerifyITSalesActivitiesfields(driver, extentTest, testName, testDataIteration, Ro["Activity2"].ToString(), Ro["ActivityField1"].ToString(), Ro["ActivityField2"].ToString(), Ro["ActivityField3"].ToString(), Ro["ActivityField4"].ToString(), Ro["ActivityField5"].ToString(), Ro["ActivityField6"].ToString(), Ro["ActivityField7"].ToString(), Ro["ActivityField8"].ToString(), Ro["ActivityField9"].ToString(), Ro["ActivityField10"].ToString(), Ro["ActivityField11"].ToString(), Ro["ResultsButton"].ToString());

                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, Ro["Activity3"].ToString());
                generic.VerifyITSalesActivitiesfields(driver, extentTest, testName, testDataIteration, Ro["Activity3"].ToString(), Ro["ActivityField1"].ToString(), Ro["ActivityField2"].ToString(), Ro["ActivityField3"].ToString(), Ro["ActivityField4"].ToString(), Ro["ActivityField5"].ToString(), Ro["ActivityField6"].ToString(), Ro["ActivityField7"].ToString(), Ro["ActivityField8"].ToString(), Ro["ActivityField9"].ToString(), Ro["ActivityField10"].ToString(), Ro["ActivityField11"].ToString(), Ro["ResultsButton"].ToString());

                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, Ro["Activity4"].ToString());
                generic.VerifyITSalesActivitiesPhoneCallsfields(driver, extentTest, testName, testDataIteration, Ro["Activity4"].ToString(), Ro["Column1"].ToString(), Ro["Column2"].ToString(), Ro["Column3"].ToString(), Ro["Column4"].ToString(), Ro["Column5"].ToString(), Ro["Column7"].ToString(), Ro["Column10"].ToString(), Ro["Column11"].ToString(), Ro["Column12"].ToString(), Ro["Column13"].ToString(), Ro["ResultsButton"].ToString());

                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, Ro["Activity5"].ToString());
                generic.VerifyITSalesActivitiesPhoneCallsfields(driver, extentTest, testName, testDataIteration, Ro["Activity5"].ToString(), Ro["Column1"].ToString(), Ro["Column2"].ToString(), Ro["Column3"].ToString(), Ro["Column4"].ToString(), Ro["Column5"].ToString(), Ro["Column7"].ToString(), Ro["Column10"].ToString(), Ro["Column11"].ToString(), Ro["Column12"].ToString(), Ro["Column13"].ToString(), Ro["ResultsButton"].ToString());

                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, Ro["Activity6"].ToString());
                generic.VerifyITSalesActivitiesPhoneCallsfields(driver, extentTest, testName, testDataIteration, Ro["Activity6"].ToString(), Ro["Column1"].ToString(), Ro["Column2"].ToString(), Ro["Column3"].ToString(), Ro["Column4"].ToString(), Ro["Column5"].ToString(), Ro["Column7"].ToString(), Ro["Column10"].ToString(), Ro["Column11"].ToString(), Ro["Column12"].ToString(), Ro["Column13"].ToString(), Ro["ResultsButton"].ToString());

                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, Ro["Activity7"].ToString());
                generic.VerifyITSalesActivitiesPhoneCallsfields(driver, extentTest, testName, testDataIteration, Ro["Activity7"].ToString(), Ro["Column1"].ToString(), Ro["Column2"].ToString(), Ro["Column3"].ToString(), Ro["Column4"].ToString(), Ro["Column5"].ToString(), Ro["Column7"].ToString(), Ro["Column10"].ToString(), Ro["Column11"].ToString(), Ro["Column12"].ToString(), Ro["Column13"].ToString(), Ro["ResultsButton"].ToString());


                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, Ro["Activity8"].ToString());
                generic.VerifyITSalesActivitiesTasksAndEmailfields(driver, extentTest, testName, testDataIteration, Ro["Activity8"].ToString(), Ro["Column1"].ToString(), Ro["Column2"].ToString(), Ro["Column6"].ToString(), Ro["Column8"].ToString(), Ro["Column12"].ToString(), Ro["Column14"].ToString(), Ro["Column15"].ToString(), Ro["Column16"].ToString(), Ro["Column17"].ToString(), Ro["Column18"].ToString(), Ro["Column19"].ToString(), Ro["Column20"].ToString(), Ro["Column21"].ToString(), Ro["Column22"].ToString(), Ro["Column23"].ToString(), Ro["Column24"].ToString(), Ro["Column25"].ToString(), Ro["ResultsButton"].ToString());

                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, Ro["Activity9"].ToString());
                generic.VerifyITSalesActivitiesTasksAndEmailfields(driver, extentTest, testName, testDataIteration, Ro["Activity9"].ToString(), Ro["Column1"].ToString(), Ro["Column2"].ToString(), Ro["Column6"].ToString(), Ro["Column8"].ToString(), Ro["Column12"].ToString(), Ro["Column14"].ToString(), Ro["Column15"].ToString(), Ro["Column16"].ToString(), Ro["Column17"].ToString(), Ro["Column18"].ToString(), Ro["Column19"].ToString(), Ro["Column20"].ToString(), Ro["Column21"].ToString(), Ro["Column22"].ToString(), Ro["Column23"].ToString(), Ro["Column24"].ToString(), Ro["Column25"].ToString(), Ro["ResultsButton"].ToString());

                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, Ro["Activity10"].ToString());
                generic.VerifyITSalesActivitiesTasksAndEmailfields(driver, extentTest, testName, testDataIteration, Ro["Activity10"].ToString(), Ro["Column1"].ToString(), Ro["Column2"].ToString(), Ro["Column6"].ToString(), Ro["Column8"].ToString(), Ro["Column12"].ToString(), Ro["Column14"].ToString(), Ro["Column15"].ToString(), Ro["Column16"].ToString(), Ro["Column17"].ToString(), Ro["Column18"].ToString(), Ro["Column19"].ToString(), Ro["Column20"].ToString(), Ro["Column21"].ToString(), Ro["Column22"].ToString(), Ro["Column23"].ToString(), Ro["Column24"].ToString(), Ro["Column25"].ToString(), Ro["ResultsButton"].ToString());

                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, Ro["Activity11"].ToString());
                generic.VerifyITSalesActivitiesTasksAndEmailfields(driver, extentTest, testName, testDataIteration, Ro["Activity11"].ToString(), Ro["Column1"].ToString(), Ro["Column2"].ToString(), Ro["Column6"].ToString(), Ro["Column8"].ToString(), Ro["Column12"].ToString(), Ro["Column14"].ToString(), Ro["Column15"].ToString(), Ro["Column16"].ToString(), Ro["Column17"].ToString(), Ro["Column18"].ToString(), Ro["Column19"].ToString(), Ro["Column20"].ToString(), Ro["Column21"].ToString(), Ro["Column22"].ToString(), Ro["Column23"].ToString(), Ro["Column24"].ToString(), Ro["Column25"].ToString(), Ro["ResultsButton"].ToString());

                generic.SelectValuesFromDropDownActivities(driver, extentTest, testName, testDataIteration, Ro["Activity1"].ToString(), Ro["Activity12"].ToString());
                generic.VerifyITSalesActivitiesTasksAndEmailfields(driver, extentTest, testName, testDataIteration, Ro["Activity12"].ToString(), Ro["Column1"].ToString(), Ro["Column2"].ToString(), Ro["Column6"].ToString(), Ro["Column8"].ToString(), Ro["Column12"].ToString(), Ro["Column14"].ToString(), Ro["Column15"].ToString(), Ro["Column16"].ToString(), Ro["Column17"].ToString(), Ro["Column18"].ToString(), Ro["Column19"].ToString(), Ro["Column20"].ToString(), Ro["Column21"].ToString(), Ro["Column22"].ToString(), Ro["Column23"].ToString(), Ro["Column24"].ToString(), Ro["Column25"].ToString(), Ro["ResultsButton"].ToString());


                login.Logout(driver, extentTest, testName, testDataIteration);
            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }

        }

        public static IEnumerable<object[]> RTA_15492()
        {
            foreach (DataRow row in getTestCaseList("ITSalesManager"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// CRM-5113
        /// Verify the IT Sales - Activities system views for IT Sales Manager.
        /// </summary>
        [TestCategory("Priority1"), TestCategory("Sprint3640"), TestCategory("Regression")]
        [TestProperty("TestcaseID", "RTA-15492")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_15492), DynamicDataSourceType.Method)]

        public void RTA_15492_VerifytheITSalesActivitiessystemviews(DataRow Ro)
        {
            try
            {

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Tab"].ToString());

                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, Ro["Activity1"].ToString());
                generic.VerifyITSalesActivitiesfields(driver, extentTest, testName, testDataIteration, Ro["Activity1"].ToString(), Ro["ActivityField1"].ToString(), Ro["ActivityField2"].ToString(), Ro["ActivityField3"].ToString(), Ro["ActivityField4"].ToString(), Ro["ActivityField5"].ToString(), Ro["ActivityField6"].ToString(), Ro["ActivityField7"].ToString(), Ro["ActivityField8"].ToString(), Ro["ActivityField9"].ToString(), Ro["ActivityField10"].ToString(), Ro["ActivityField11"].ToString(), Ro["ResultsButton"].ToString());

                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, Ro["Activity2"].ToString());
                generic.VerifyITSalesActivitiesfields(driver, extentTest, testName, testDataIteration, Ro["Activity2"].ToString(), Ro["ActivityField1"].ToString(), Ro["ActivityField2"].ToString(), Ro["ActivityField3"].ToString(), Ro["ActivityField4"].ToString(), Ro["ActivityField5"].ToString(), Ro["ActivityField6"].ToString(), Ro["ActivityField7"].ToString(), Ro["ActivityField8"].ToString(), Ro["ActivityField9"].ToString(), Ro["ActivityField10"].ToString(), Ro["ActivityField11"].ToString(), Ro["ResultsButton"].ToString());

                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, Ro["Activity3"].ToString());
                generic.VerifyITSalesActivitiesfields(driver, extentTest, testName, testDataIteration, Ro["Activity3"].ToString(), Ro["ActivityField1"].ToString(), Ro["ActivityField2"].ToString(), Ro["ActivityField3"].ToString(), Ro["ActivityField4"].ToString(), Ro["ActivityField5"].ToString(), Ro["ActivityField6"].ToString(), Ro["ActivityField7"].ToString(), Ro["ActivityField8"].ToString(), Ro["ActivityField9"].ToString(), Ro["ActivityField10"].ToString(), Ro["ActivityField11"].ToString(), Ro["ResultsButton"].ToString());

                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, Ro["Activity4"].ToString());
                generic.VerifyITSalesActivitiesPhoneCallsfields(driver, extentTest, testName, testDataIteration, Ro["Activity4"].ToString(), Ro["Column1"].ToString(), Ro["Column2"].ToString(), Ro["Column3"].ToString(), Ro["Column4"].ToString(), Ro["Column5"].ToString(), Ro["Column7"].ToString(), Ro["Column10"].ToString(), Ro["Column11"].ToString(), Ro["Column12"].ToString(), Ro["Column13"].ToString(), Ro["ResultsButton"].ToString());

                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, Ro["Activity5"].ToString());
                generic.VerifyITSalesActivitiesPhoneCallsfields(driver, extentTest, testName, testDataIteration, Ro["Activity5"].ToString(), Ro["Column1"].ToString(), Ro["Column2"].ToString(), Ro["Column3"].ToString(), Ro["Column4"].ToString(), Ro["Column5"].ToString(), Ro["Column7"].ToString(), Ro["Column10"].ToString(), Ro["Column11"].ToString(), Ro["Column12"].ToString(), Ro["Column13"].ToString(), Ro["ResultsButton"].ToString());

                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, Ro["Activity6"].ToString());
                generic.VerifyITSalesActivitiesPhoneCallsfields(driver, extentTest, testName, testDataIteration, Ro["Activity6"].ToString(), Ro["Column1"].ToString(), Ro["Column2"].ToString(), Ro["Column3"].ToString(), Ro["Column4"].ToString(), Ro["Column5"].ToString(), Ro["Column7"].ToString(), Ro["Column10"].ToString(), Ro["Column11"].ToString(), Ro["Column12"].ToString(), Ro["Column13"].ToString(), Ro["ResultsButton"].ToString());

                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, Ro["Activity7"].ToString());
                generic.VerifyITSalesActivitiesPhoneCallsfields(driver, extentTest, testName, testDataIteration, Ro["Activity7"].ToString(), Ro["Column1"].ToString(), Ro["Column2"].ToString(), Ro["Column3"].ToString(), Ro["Column4"].ToString(), Ro["Column5"].ToString(), Ro["Column7"].ToString(), Ro["Column10"].ToString(), Ro["Column11"].ToString(), Ro["Column12"].ToString(), Ro["Column13"].ToString(), Ro["ResultsButton"].ToString());


                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, Ro["Activity8"].ToString());
                generic.VerifyITSalesActivitiesTasksAndEmailfields(driver, extentTest, testName, testDataIteration, Ro["Activity8"].ToString(), Ro["Column1"].ToString(), Ro["Column2"].ToString(), Ro["Column6"].ToString(), Ro["Column8"].ToString(), Ro["Column12"].ToString(), Ro["Column14"].ToString(), Ro["Column15"].ToString(), Ro["Column16"].ToString(), Ro["Column17"].ToString(), Ro["Column18"].ToString(), Ro["Column19"].ToString(), Ro["Column20"].ToString(), Ro["Column21"].ToString(), Ro["Column22"].ToString(), Ro["Column23"].ToString(), Ro["Column24"].ToString(), Ro["Column25"].ToString(), Ro["ResultsButton"].ToString());

                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, Ro["Activity9"].ToString());
                generic.VerifyITSalesActivitiesTasksAndEmailfields(driver, extentTest, testName, testDataIteration, Ro["Activity9"].ToString(), Ro["Column1"].ToString(), Ro["Column2"].ToString(), Ro["Column6"].ToString(), Ro["Column8"].ToString(), Ro["Column12"].ToString(), Ro["Column14"].ToString(), Ro["Column15"].ToString(), Ro["Column16"].ToString(), Ro["Column17"].ToString(), Ro["Column18"].ToString(), Ro["Column19"].ToString(), Ro["Column20"].ToString(), Ro["Column21"].ToString(), Ro["Column22"].ToString(), Ro["Column23"].ToString(), Ro["Column24"].ToString(), Ro["Column25"].ToString(), Ro["ResultsButton"].ToString());

                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, Ro["Activity10"].ToString());
                generic.VerifyITSalesActivitiesTasksAndEmailfields(driver, extentTest, testName, testDataIteration, Ro["Activity10"].ToString(), Ro["Column1"].ToString(), Ro["Column2"].ToString(), Ro["Column6"].ToString(), Ro["Column8"].ToString(), Ro["Column12"].ToString(), Ro["Column14"].ToString(), Ro["Column15"].ToString(), Ro["Column16"].ToString(), Ro["Column17"].ToString(), Ro["Column18"].ToString(), Ro["Column19"].ToString(), Ro["Column20"].ToString(), Ro["Column21"].ToString(), Ro["Column22"].ToString(), Ro["Column23"].ToString(), Ro["Column24"].ToString(), Ro["Column25"].ToString(), Ro["ResultsButton"].ToString());

                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, Ro["Activity11"].ToString());
                generic.VerifyITSalesActivitiesTasksAndEmailfields(driver, extentTest, testName, testDataIteration, Ro["Activity11"].ToString(), Ro["Column1"].ToString(), Ro["Column2"].ToString(), Ro["Column6"].ToString(), Ro["Column8"].ToString(), Ro["Column12"].ToString(), Ro["Column14"].ToString(), Ro["Column15"].ToString(), Ro["Column16"].ToString(), Ro["Column17"].ToString(), Ro["Column18"].ToString(), Ro["Column19"].ToString(), Ro["Column20"].ToString(), Ro["Column21"].ToString(), Ro["Column22"].ToString(), Ro["Column23"].ToString(), Ro["Column24"].ToString(), Ro["Column25"].ToString(), Ro["ResultsButton"].ToString());

                generic.SelectValuesFromDropDownActivities(driver, extentTest, testName, testDataIteration, Ro["Activity1"].ToString(), Ro["Activity12"].ToString());
                generic.VerifyITSalesActivitiesTasksAndEmailfields(driver, extentTest, testName, testDataIteration, Ro["Activity12"].ToString(), Ro["Column1"].ToString(), Ro["Column2"].ToString(), Ro["Column6"].ToString(), Ro["Column8"].ToString(), Ro["Column12"].ToString(), Ro["Column14"].ToString(), Ro["Column15"].ToString(), Ro["Column16"].ToString(), Ro["Column17"].ToString(), Ro["Column18"].ToString(), Ro["Column19"].ToString(), Ro["Column20"].ToString(), Ro["Column21"].ToString(), Ro["Column22"].ToString(), Ro["Column23"].ToString(), Ro["Column24"].ToString(), Ro["Column25"].ToString(), Ro["ResultsButton"].ToString());


                login.Logout(driver, extentTest, testName, testDataIteration);
            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }

        }


        public static IEnumerable<object[]> RTA_15049()
        {
            foreach (DataRow row in getTestCaseList("ITSalesUser"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// CRM-5113
        /// Verify the IT Sales - Opportunities system views for IT Sales User.
        /// </summary>
        [TestCategory("Priority1"), TestCategory("Sprint3640"), TestCategory("Regression")]
        [TestProperty("TestcaseID", "RTA-15049")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_15049), DynamicDataSourceType.Method)]

        public void RTA_15049_VerifytheITSalesOpportunitiessystemviews(DataRow Ro)
        {
            try
            {

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                generic.OpportunitiesSystemView(driver, extentTest, testName, testDataIteration, Ro["OppDropdown1"].ToString());
                login.Logout(driver, extentTest, testName, testDataIteration);
            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }

        }
        public static IEnumerable<object[]> RTA_15493()
        {
            foreach (DataRow row in getTestCaseList("ITSalesManager"))
            {
                yield return new object[] { row };
            }
        }


        /// <summary>
        /// Verify the IT Sales - Opportunities system views for IT Sales Manager.
        /// </summary>
        [TestCategory("Sprint3640"), TestCategory("Regression"), TestCategory("Priority1")]
        [TestProperty("TestcaseID", "RTA-15493")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_15493), DynamicDataSourceType.Method)]

        public void RTA_15493_VerifytheITSalesOpportunitiessystemviews(DataRow Ro)
        {
            try
            {

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
                generic.OpportunitiesSystemView(driver, extentTest, testName, testDataIteration, Ro["OppDropdown1"].ToString());
                login.Logout(driver, extentTest, testName, testDataIteration);
            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }

        }


        public static IEnumerable<object[]> RTA_15052()
        {
            foreach (DataRow row in getTestCaseList("ITSalesUser"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// CRM-5113
        /// Verify Enterprise Sales system charts are no longer visible in IT Sales for IT Sales User.
        /// </summary>
        [TestCategory("Priority1"), TestCategory("Sprint3640"), TestCategory("Regression")]
        [TestProperty("TestcaseID", "RTA-15052")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_15052), DynamicDataSourceType.Method)]

        public void RTA_15052_VerifyEnterpriseSalesSystemChartsarenoLongerVisibleinITSales(DataRow Ro)
        {
            try
            {

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                generic.SelectHeaderButton(driver, extentTest, testName, testDataIteration, Ro["Header Button"].ToString());
                generic.EnterpriseSalesChartsnotVisible(driver, extentTest, testName, testDataIteration);
                login.Logout(driver, extentTest, testName, testDataIteration);
            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }

        }
        public static IEnumerable<object[]> RTA_15494()
        {
            foreach (DataRow row in getTestCaseList("ITSalesManager"))
            {
                yield return new object[] { row };
            }
        }

        /// <summary>
        /// Verify Enterprise Sales system charts are no longer visible in IT Sales for IT Sales Manager.
        /// </summary>
        [TestCategory("Priority1"), TestCategory("Sprint3640"), TestCategory("Regression")]
        [TestProperty("TestcaseID", "RTA-15494")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_15494), DynamicDataSourceType.Method)]

        public void RTA_15494_ESMSystemChartsarenoLongerVisibleinITSales(DataRow Ro)
        {
            try
            {

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
                generic.SelectHeaderButton(driver, extentTest, testName, testDataIteration, Ro["Header Button"].ToString());
                generic.EnterpriseSalesChartsnotVisible(driver, extentTest, testName, testDataIteration);
                login.Logout(driver, extentTest, testName, testDataIteration);
            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }

        }
        public static IEnumerable<object[]> RTA_10912()
        {
            foreach (DataRow row in getTestCaseList("SalesAdmin"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// Verify that Sales Admin is able to deactivate a bookable resource record.
        /// CRM-4502
        /// </summary>
        [TestCategory("smoke"), TestCategory("Sprint3640"), TestCategory("Regression"), TestCategory("FinalRerun"), TestCategory("Recheck1"), TestCategory("Sprint3640")]
        [TestProperty("TestcaseID", "RTA-10912")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_10912), DynamicDataSourceType.Method)]



        public void RTA_10912_VerifySalesAdminabletoDeactivateBookableResourceRecord(DataRow Ro)
        {

            //try
            //{
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            string parentwindow = generic.AdvancedFind(driver, extentTest, testName, testDataIteration);

            // Add Column and apply filter
            //generic.AddColumninadvancefind(driver, extentTest, testName, testDataIteration, "ch_scheduledstart", parentwindow);
            generic.AdvancedfindBookableResourcefilter(driver, extentTest, testName, testDataIteration, Ro["Looksfor"].ToString(), "[new]", "Bookable Resource", "Equals", "Ahmad Ramahi", "Results");

            // Deactivate the Bookable Resource
            generic.selectrecordmarginadvancefind(driver, "Deactivate");

            // Verify the status is Inactive
            generic.Verifystatusadvfind(driver, extentTest, testDataIteration, testName, "Inactive");

            login.Logout(driver, extentTest, testName, testDataIteration);
            //}

            //catch (Exception e)
            //{



            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}



        }


        public static IEnumerable<object[]> RTA_14971()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }

        /// <summary>
        /// Verify Centre field is not populated in phone call activity created using "Phone Call: Scheduled Callback Sequence.
        /// </summary>
        [TestCategory("FinalRerun"), TestCategory("Sprint3640"), TestCategory("Regression"), TestCategory("FinalRerun"), TestCategory("Recheck1")]
        [TestProperty("TestcaseID", "RTA-14971")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_14971), DynamicDataSourceType.Method)]

        public void RTA_14971_VerifyCentrefieldisnotpopulatedinphonecallactivity(DataRow Ro)
        {
            //try
            //{

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());

            //Creating new Contact
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
            string time = System.DateTime.Now.ToString();
            generic.CreateNewContactEnterpriseSales1(driver, extentTest, testDataIteration, testName, Ro["Contactname"].ToString(), time);
            string contactname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");

            //Creating new Opp
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
            generic.CreateNewOpportunityEntetrprisewithprevcontact(driver, extentTest, testDataIteration, testName, Ro["TestChannel"].ToString(), Ro["TestMajorSource"].ToString(), Ro["TestMinorSource"].ToString(), contactname, Ro["spacesbrand"].ToString());
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());
            string reference = generic.GetReferenceIDOpportunity(driver, extentTest, testName, testDataIteration);
            generic.AssignRecordAnotherUser(driver, extentTest, testName, testDataIteration, Ro["AssignTo"].ToString(), Ro["User1"].ToString());

            //Creating new phonecall activity
            generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, Ro["Tab"].ToString());
            generic.CreateChangeCalloutcomeandAssignPhoneCall(driver, extentTest, testName, testDataIteration, Ro["Entity4"].ToString(), Ro["ActivityButton"].ToString(), Ro["Activity"].ToString(), Ro["Call To"].ToString(), Ro["Quick Create Form Button"].ToString(), Ro["AssignTo"].ToString(), Ro["User1"].ToString(), Ro["Call Outcome1"].ToString(), Ro["Sequence1"].ToString(), Ro["Attempt"].ToString(), Ro["CallBackType1"].ToString(), Ro["Call Outcome2"].ToString());

            //Open particular opp record
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, Ro["OppDopdown"].ToString());
            generic.SearchPhoneOppo(driver, extentTest, testName, testDataIteration, reference);
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());

            // Open phonecall acivity from timeline
            generic.OpenPhonecallactivitytimeline(driver, extentTest, testName, testDataIteration);

            // Verify centre field is displayed
            generic.CentreLabel(driver, extentTest, testName, testDataIteration);

            login.Logout(driver, extentTest, testName, testDataIteration);

            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}

        }

        public static IEnumerable<object[]> RTA_14972()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// Verify that Centre field is not populated in phone call activity created using "Phone Call: Post Tour Callback Sequence (Opportunity)" process.
        /// </summary>
        [TestCategory("smoke"), TestCategory("Sprint 40.1"), TestCategory("Regression1"), TestCategory("rerun10620")]
        [TestProperty("TestcaseID", "RTA-14972")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_14972), DynamicDataSourceType.Method)]

        public void RTA_14972_VerifyCentrefieldisnotpopulatedinphonecallactivitycreatedusingPhoneCallPostTourCallbackSequence(DataRow Ro)
        {
            try
            {

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());

                //Creating new Contact
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
                string time = System.DateTime.Now.ToString();
                string contactname = generic.CreateNewContactEnterpriseSales(driver, extentTest, testDataIteration, testName, Ro["Contactname"].ToString(), time, Ro["Email"].ToString());

                //Creating new Opp
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
                generic.CreateNewOpportunityEntetrprisewithprevcontact(driver, extentTest, testDataIteration, testName, Ro["TestChannel"].ToString(), Ro["TestMajorSource"].ToString(), Ro["TestMinorSource"].ToString(), contactname, Ro["spacesbrand"].ToString());
                generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
                string oppname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");
                generic.AssignRecordAnotherUser(driver, extentTest, testName, testDataIteration, Ro["AssignTo"].ToString(), Ro["User1"].ToString());

                //Creating new phonecall activity
                generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, Ro["Tab"].ToString());
                generic.CreateChangeCalloutcomeandAssignPhoneCall(driver, extentTest, testName, testDataIteration, Ro["Entity4"].ToString(), Ro["ActivityButton"].ToString(), Ro["Activity"].ToString(), Ro["Call To"].ToString(), Ro["Quick Create Form Button"].ToString(), Ro["AssignTo"].ToString(), Ro["User1"].ToString(), Ro["Call Outcome1"].ToString(), Ro["Sequence2"].ToString(), Ro["Attempt"].ToString(), Ro["CallBackType2"].ToString(), Ro["Call Outcome2"].ToString());

                //Open particular opp record
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                generic.SearchPhoneOppo(driver, extentTest, testName, testDataIteration, oppname);
                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());

                // Open phonecall acivity from timeline
                generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);
                generic.OpenPhonecallactivitytimeline(driver, extentTest, testName, testDataIteration);

                // Verify centre field is displayed
                generic.CentreLabel(driver, extentTest, testName, testDataIteration);

                login.Logout(driver, extentTest, testName, testDataIteration);

            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }

        }
        public static IEnumerable<object[]> RTA_14974()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// Verify that Centre field is not populated in phone call activity created using "Phone Call: Initial Callback Sequence (Opportunity)" process.
        /// </summary>
        [TestCategory("smoke"), TestCategory("Sprint 40.1"), TestCategory("Regression1"), TestCategory("rerun10620")]
        [TestProperty("TestcaseID", "RTA-14974")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_14974), DynamicDataSourceType.Method)]

        public void RTA_14974_VerifyCentrefieldisnotpopulatedinphonecallactivitycreatedusingPhoneCallInitialCallbackSequence(DataRow Ro)
        {
            try
            {

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());

                //Creating new Contact
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
                string time = System.DateTime.Now.ToString();
                string contactname = generic.CreateNewContactEnterpriseSales(driver, extentTest, testDataIteration, testName, Ro["Contactname"].ToString(), time, Ro["Email"].ToString());

                //Creating new Opp
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
                generic.CreateNewOpportunityEntetrprisewithprevcontact(driver, extentTest, testDataIteration, testName, Ro["TestChannel"].ToString(), Ro["TestMajorSource"].ToString(), Ro["TestMinorSource"].ToString(), contactname, Ro["spacesbrand"].ToString());
                generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);
                string oppname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");
                generic.AssignRecordAnotherUser(driver, extentTest, testName, testDataIteration, Ro["AssignTo"].ToString(), Ro["User1"].ToString());

                //Creating new phonecall activity
                generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, Ro["Tab"].ToString());
                generic.CreateChangeCalloutcomeandAssignPhoneCall(driver, extentTest, testName, testDataIteration, Ro["Entity4"].ToString(), Ro["ActivityButton"].ToString(), Ro["Activity"].ToString(), Ro["Call To"].ToString(), Ro["Quick Create Form Button"].ToString(), Ro["AssignTo"].ToString(), Ro["User1"].ToString(), Ro["Call Outcome1"].ToString(), Ro["Sequence3"].ToString(), Ro["Attempt"].ToString(), Ro["CallBackType2"].ToString(), Ro["Call Outcome2"].ToString());

                //Open particular opp record
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                generic.SearchPhoneOppo(driver, extentTest, testName, testDataIteration, oppname);
                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());

                // Open phonecall acivity from timeline
                generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);
                generic.OpenPhonecallactivitytimeline(driver, extentTest, testName, testDataIteration);

                // Verify centre field is displayed
                generic.CentreLabel(driver, extentTest, testName, testDataIteration);

                login.Logout(driver, extentTest, testName, testDataIteration);

            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }

        }



        public static IEnumerable<object[]> RTA_15370()
        {
            foreach (DataRow row in getTestCaseList("ITSalesManager"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// CRM-5482
        /// Verify that IT Sales User/Manager are able to send emails from Dynamics to customers from the Opportunity.
        /// </summary>
        [TestCategory("Priority1"), TestCategory("Sprint3640"), TestCategory("Regression")]
        [TestProperty("TestcaseID", "RTA-15370")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_15370), DynamicDataSourceType.Method)]

        public void RTA_15370_VerifyITSalesManagertEmailVerification(DataRow Ro)
        {
            try
            {

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "My Open IT Sales Opportunities");
                generic.CreateNewOppITSalesWithData(driver, extentTest, testName, testDataIteration, "TestLNameEmail");
                string reference = generic.GetReferenceIDOpportunity(driver, extentTest, testName, testDataIteration);
                generic.scrollUpPage(driver, extentTest, testName, testDataIteration);
                generic.scrollUpPage(driver, extentTest, testName, testDataIteration);
                generic.CreateNewActivityButtonOpportunity(driver, extentTest, testName, testDataIteration, "Email");
                generic.CreateNewEmailActivity(driver, extentTest, testName, testDataIteration);
                generic.VerifyEmailActivity(driver, extentTest, testName, testDataIteration);
                login.Logout(driver, extentTest, testName, testDataIteration);

            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }

        }
        public static IEnumerable<object[]> RTA_15402()
        {
            foreach (DataRow row in getTestCaseList("ITSalesUser"))
            {
                yield return new object[] { row };
            }
        }

        /// <summary>
        /// CRM-5482
        /// Verify that IT Sales User are able to send emails from Dynamics to customers from the Contact record.
        /// </summary>
        [TestCategory("Priority1"), TestCategory("Sprint3640"), TestCategory("Regression")]
        [TestProperty("TestcaseID", "RTA-15402")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_15402), DynamicDataSourceType.Method)]

        public void RTA_15402_VerifyITSalesAgentContactEmailVerification(DataRow Ro)
        {
            try
            {

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
                string Time = System.DateTime.Now.ToString();
                generic.CreateNewContactITSalesWithData(driver, extentTest, testName, testDataIteration, Time);
                generic.scrollUpPage(driver, extentTest, testName, testDataIteration);
                generic.scrollUpPage(driver, extentTest, testName, testDataIteration);
                generic.CreateNewActivityButtonOpportunity(driver, extentTest, testName, testDataIteration, "Email");
                generic.CreateNewEmailActivity(driver, extentTest, testName, testDataIteration);
                generic.VerifyEmailActivity(driver, extentTest, testName, testDataIteration);
                login.Logout(driver, extentTest, testName, testDataIteration);

            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }
        public static IEnumerable<object[]> RTA_15403()
        {
            foreach (DataRow row in getTestCaseList("ITSalesManager"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// CRM-5482
        /// Verify that IT Sales User are able to send emails from Dynamics to customers from the Contact record.
        /// </summary>
        [TestCategory("21Oct"), TestCategory("Sprint3640"), TestCategory("Regression")]
        [TestProperty("TestcaseID", "RTA-15403")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_15403), DynamicDataSourceType.Method)]

        public void RTA_15403_VerifyITSalesManagerContactEmailVerification(DataRow Ro)
        {
            //try
            //{

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.CreateNewContactITSalesManagerWithData(driver, extentTest, testName, testDataIteration);
            generic.scrollUpPage(driver, extentTest, testName, testDataIteration);
            generic.scrollUpPage(driver, extentTest, testName, testDataIteration);
            generic.CreateNewActivityButtonOpportunity(driver, extentTest, testName, testDataIteration, "Email");
            generic.CreateNewEmailActivity(driver, extentTest, testName, testDataIteration);
            generic.VerifyEmailActivity(driver, extentTest, testName, testDataIteration);
            login.Logout(driver, extentTest, testName, testDataIteration);

            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}
        }
        public static IEnumerable<object[]> RTA_15454()
        {
            foreach (DataRow row in getTestCaseList("ITSalesUser"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// CRM-5482
        /// Verify that emails sent from Dynamics to customer from one Opportunity is not linked to a different Opportunity belonging to the same contact in IT sales User.
        /// </summary>
        [TestCategory("Priority1"), TestCategory("Sprint3640"), TestCategory("Regression")]
        [TestProperty("TestcaseID", "RTA-15454")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_15454), DynamicDataSourceType.Method)]

        public void RTA_15454_VerifyITSalesAgentOppEmailVerification(DataRow Ro)
        {
            try
            {

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
                string Time = System.DateTime.Now.ToString();
                generic.CreateNewContactITSalesWithData(driver, extentTest, testName, testDataIteration, Time);
                generic.NavigateToRelatedTabOppsITSales(driver, extentTest, testName, testDataIteration, "Opportunities");
                String OppName = generic.QuickCreateOppFromContactWithRet(driver, extentTest, testName, testDataIteration, Time, "1", "ReplyEmailopp");
                generic.QuickCreateOppFromContact(driver, extentTest, testName, testDataIteration, Time, "2", "ReplyEmailopp");
                generic.OpenRecordRelativeView(driver, extentTest, testName, testDataIteration);
                generic.CreateNewActivityButtonOpportunity(driver, extentTest, testName, testDataIteration, "Email");
                generic.CreateNewEmailActivity(driver, extentTest, testName, testDataIteration);
                generic.VerifyEmailActivity(driver, extentTest, testName, testDataIteration);
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "My Open IT Sales Opportunities");
                generic.OpenRecordGlobalSearch(driver, extentTest, testName, testDataIteration, OppName);
                generic.VerifyNoEmailActivity(driver, extentTest, testName, testDataIteration);
                login.Logout(driver, extentTest, testName, testDataIteration);

            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }

        public static IEnumerable<object[]> RTA_15984()
        {
            foreach (DataRow row in getTestCaseList("ITSalesUser"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// CRM-5482
        /// Verify that emails sent from Dynamics to customer from one Opportunity is not linked to a different Opportunity belonging to the same contact in IT sales User.
        /// </summary>
        [TestCategory("Regression"), TestCategory("07Sep"), TestCategory("CRM-5482"), TestCategory("Sprint3640")]
        [TestProperty("TestcaseID", "RTA-15984")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_15984), DynamicDataSourceType.Method)]

        public void RTA_15984_VerifyITSalesAgentOppEmailTrack(DataRow Ro)
        {
            try
            {

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName1"].ToString(), Ro["Password1"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
                string Time = System.DateTime.Now.ToString();
                generic.CreateNewContactITSalesEmailTrack(driver, extentTest, testName, testDataIteration, Time);
                generic.NavigateToRelatedTabOppsITSales(driver, extentTest, testName, testDataIteration, "Opportunities");
                generic.QuickCreateOppFromContact(driver, extentTest, testName, testDataIteration, Time, "1", "TrackEmailOpp");
                generic.NavigateTabsContact(driver, extentTest, testName, testDataIteration, "Summary");
                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, "Refresh");
                generic.CreateNewActivityButtonOpportunity(driver, extentTest, testName, testDataIteration, "Email");
                generic.CreateNewEmailActivityEmailTraker(driver, extentTest, testName, testDataIteration, Time);
                string EmialNo = generic.ReturnEmailActivityNo(driver, extentTest, testName, testDataIteration);
                //generic.NavigateToOutlook(driver, extentTest, testName, testDataIteration);
                //generic.SearchAndVerifyEmailOutlook(driver, extentTest, testName, testDataIteration, Time, EmialNo);
                //generic.ReplyEmialInOutlook(driver, extentTest, testName, testDataIteration);
                //generic.TrackEmialFromOutlookToDynamics(driver, extentTest, testName, testDataIteration);
                login.Logout(driver, extentTest, testName, testDataIteration);

            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }

        public static IEnumerable<object[]> RTA_15455()
        {
            foreach (DataRow row in getTestCaseList("ITSalesManager"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// CRM-5482
        /// Verify that emails sent from Dynamics to customer from one Opportunity is not linked to a different Opportunity belonging to the same contact in IT sales Manager.
        /// </summary>
        [TestCategory("21Oct"), TestCategory("Sprint3640"), TestCategory("Regression")]
        [TestProperty("TestcaseID", "RTA-15455")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_15455), DynamicDataSourceType.Method)]

        public void RTA_15455_VerifyITSalesManagerOppEmailVerification(DataRow Ro)
        {
            //try
            //{

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            string Time = System.DateTime.Now.ToString();
            generic.CreateNewContactITSalesManagerWithData(driver, extentTest, testName, testDataIteration);
            generic.NavigateToRelatedTabOppsITSales(driver, extentTest, testName, testDataIteration, "Opportunities");
            generic.QuickCreateOppFromContact(driver, extentTest, testName, testDataIteration, Time, "1", "ReplyEmailopp");
            generic.QuickCreateOppFromContact(driver, extentTest, testName, testDataIteration, Time, "2", "ReplyEmailopp");
            generic.OpenRecordRelativeView(driver, extentTest, testName, testDataIteration);
            generic.CreateNewActivityButtonOpportunity(driver, extentTest, testName, testDataIteration, "Email");
            generic.CreateNewEmailActivity(driver, extentTest, testName, testDataIteration);
            generic.VerifyEmailActivity(driver, extentTest, testName, testDataIteration);
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
            generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "My Open IT Sales Opportunities");
            //generic.OpenRecordGlobalSearch(driver, extentTest, testName, testDataIteration, "TestTopic" + Time + "2");
            //generic.VerifyNoEmailActivity(driver, extentTest, testName, testDataIteration);
            login.Logout(driver, extentTest, testName, testDataIteration);

            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}
        }


        public static IEnumerable<object[]> RTA_15784()
        {
            foreach (DataRow row in getTestCaseList("ITSalesUser"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// CRM-5483
        /// Verify that emails sent from Dynamics to customer from one Opportunity is not linked to a different Opportunity belonging to the same contact in IT sales Manager.
        /// </summary>
        [TestCategory("Priority1"), TestCategory("Sprint3640"), TestCategory("Regression"), TestCategory("08Sep")]
        [TestProperty("TestcaseID", "RTA-15784")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_15784), DynamicDataSourceType.Method)]

        public void RTA_15784_VerifyITSalesUserContactEmailVerification(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Tab"].ToString());
                string Time = System.DateTime.Now.ToString();
                generic.HeaderButtonClickActivities(driver, extentTest, testDataIteration, testName, "Email");

                generic.QuickCreateContactToEmail(driver, extentTest, testDataIteration, testName);
                generic.QuickCreateContactITSales(driver, extentTest, testDataIteration, testName, Time, "1");
                generic.QuickCreateContactCcEmail(driver, extentTest, testDataIteration, testName);
                generic.QuickCreateContactITSales(driver, extentTest, testDataIteration, testName, Time, "2");
                generic.QuickCreateContactBCcEmail(driver, extentTest, testDataIteration, testName);
                generic.QuickCreateContactITSales(driver, extentTest, testDataIteration, testName, Time, "3");

                string ContactTo = generic.GetContactNameEmailActivity(driver, extentTest, testDataIteration, testName, "to");
                string ContactCc = generic.GetContactNameEmailActivity(driver, extentTest, testDataIteration, testName, "cc");
                string ContactBcc = generic.GetContactNameEmailActivity(driver, extentTest, testDataIteration, testName, "bcc");

                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());

                generic.OpenRecordGlobalSearch(driver, extentTest, testName, testDataIteration, ContactTo);


                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
                generic.OpenRecordGlobalSearch(driver, extentTest, testName, testDataIteration, ContactCc);


                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
                generic.OpenRecordGlobalSearch(driver, extentTest, testName, testDataIteration, ContactBcc);


                login.Logout(driver, extentTest, testName, testDataIteration);

            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }

        public static IEnumerable<object[]> RTA_15828()
        {
            foreach (DataRow row in getTestCaseList("ITSalesUser"))
            {
                yield return new object[] { row };
            }
        }

        /// <summary>
        /// Verify that emails sent from Dynamics to customer from one Opportunity is not linked to a different Opportunity belonging to the same contact in IT sales Manager.
        /// </summary>
        [TestCategory("Priority1"), TestCategory("Sprint3640")]
        [TestProperty("TestcaseID", "RTA-15828")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_15828), DynamicDataSourceType.Method)]
        public void RTA_15828_VerifyITSalesUserContactPhoneCallVerification(DataRow Ro)
        {
            try
            {

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Tab"].ToString());
                string Time = System.DateTime.Now.ToString();
                generic.HeaderButtonClickActivities(driver, extentTest, testDataIteration, testName, "Phone Call");
                generic.QuickCreateContactToPhone(driver, extentTest, testDataIteration, testName);
                generic.QuickCreateContactITSales(driver, extentTest, testDataIteration, testName, Time, "1");

                // string ContactTo = generic.GetContactNameEmailActivity(driver, extentTest, testDataIteration, testName, "to");
                string ContactTo = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");

                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
                //generic.DiscardSaveButton(driver, extentTest, testName, testDataIteration);
                generic.OpenRecordGlobalSearch(driver, extentTest, testName, testDataIteration, ContactTo);
                generic.VerifyProtonIdContactNull(driver, extentTest, testName, testDataIteration);

                login.Logout(driver, extentTest, testName, testDataIteration);

            }

            catch (Exception e)
            {
                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }

        public static IEnumerable<object[]> RTA_15837()
        {
            foreach (DataRow row in getTestCaseList("ITSalesUser"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// Verify that IT Sales Users is able to create a new contact from an existing Email activity.
        /// </summary>
        [TestCategory("Priority1"), TestCategory("Sprint3640"), TestCategory("Regression"), TestCategory("CRM-5483")]
        [TestProperty("TestcaseID", "RTA-15837")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_15837), DynamicDataSourceType.Method)]

        public void RTA_15837_VerifyITSalesUserContactExistingEmailVerification(DataRow Ro)
        {
            try
            {

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Tab"].ToString());
                string Time = System.DateTime.Now.ToString();
                generic.HeaderButtonClickActivities(driver, extentTest, testDataIteration, testName, "Email");

                //generic.SelectActivityType(driver, extentTest, testName, testDataIteration, "Email");
                //    generic.OpenFirstActiveContact(driver, extentTest, testName, testDataIteration);

                //  generic.ClearRecordinEmailActivity(driver, extentTest, testName, testDataIteration, "to", "cc", "bcc");

                generic.QuickCreateContactToEmail(driver, extentTest, testDataIteration, testName);
                generic.QuickCreateContactITSales(driver, extentTest, testDataIteration, testName, Time, "1");
                generic.QuickCreateContactCcEmail(driver, extentTest, testDataIteration, testName);
                generic.QuickCreateContactITSales(driver, extentTest, testDataIteration, testName, Time, "2");
                generic.QuickCreateContactBCcEmail(driver, extentTest, testDataIteration, testName);
                generic.QuickCreateContactITSales(driver, extentTest, testDataIteration, testName, Time, "3");

                string ContactTo = generic.GetContactNameEmailActivity(driver, extentTest, testDataIteration, testName, "to");
                string ContactCc = generic.GetContactNameEmailActivity(driver, extentTest, testDataIteration, testName, "cc");
                string ContactBcc = generic.GetContactNameEmailActivity(driver, extentTest, testDataIteration, testName, "bcc");

                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());

                generic.OpenRecordGlobalSearch(driver, extentTest, testName, testDataIteration, ContactTo);
                generic.VerifyProtonIdContactNull(driver, extentTest, testName, testDataIteration);

                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
                generic.OpenRecordGlobalSearch(driver, extentTest, testName, testDataIteration, ContactCc);
                generic.VerifyProtonIdContactNull(driver, extentTest, testName, testDataIteration);

                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
                generic.OpenRecordGlobalSearch(driver, extentTest, testName, testDataIteration, ContactBcc);
                generic.VerifyProtonIdContactNull(driver, extentTest, testName, testDataIteration);


                login.Logout(driver, extentTest, testName, testDataIteration);

            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }
        public static IEnumerable<object[]> RTA_16046()
        {
            foreach (DataRow row in getTestCaseList("ITSalesUser"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// To verify an IT Sales Manager is able to update account record
        /// </summary>
        [TestCategory("IT Sales"), TestCategory("Priority1"), TestCategory("Regression"), TestCategory("Sprint3640")]
        [TestProperty("TestcaseID", "RTA-16046")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_16046), DynamicDataSourceType.Method)]

        public void RTA_16046_VerifyQuantityfieldonITSalesOpportunity(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                //generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "My Open IT Sales Opportunities");
                //generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);
                //generic.SelectActiveCellContacts(driver, extentTest, testName, testDataIteration);
                generic.ClickNewButton(driver, extentTest, testDataIteration, testName);

                generic.CheckingQuantityField(driver, extentTest, testName, testDataIteration);
                login.Logout(driver, extentTest, testName, testDataIteration);
                generic.DiscardChanges(driver, extentTest, testName, testDataIteration);
            }

            catch (Exception e)
            {
                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "The testcase failed due to the following error :  " + e, " ");
                Assert.Fail(e.Message);
            }

        }


        public static IEnumerable<object[]> RTA_16271()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        // <summary>
        ///TEST[CRM-2793]Verify whether the Communication request for "No Answer - Day 3" is created for the opportunity if initial contact is No
        /// </summary>
        [TestCategory("08Sep"), TestCategory("Regression"), TestCategory("GlobalP11"), TestCategory("CRM-6702")]
        [TestProperty("TestcaseID", "RTA-16271")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_16271), DynamicDataSourceType.Method)]
        public void RTA_16271_verifyday3nocontact(DataRow Ro)
        {

            //try
            //{
            string Date = DateTime.Today.ToString("dd-MM-yyyy");
            DateTime Now = DateTime.Now;
            string Time = Date + Convert.ToString(Now.Hour) + Convert.ToString(Now.Millisecond);
            string emailid = "AutomatCompany" + Time + "@gmail.com";

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            string now = System.DateTime.Now.ToString();

            // Select Contacts entity and create new
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
            generic.CreateNewContactITSaleswithlanguageandemail(driver, extentTest, testDataIteration, testName, "TestContact", now, emailid, Ro["CompanyName"].ToString());
            string contactname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");

            //Creating new Opp
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            string People = "13";
            generic.SelectNewTab(driver, extentTest, testName, testDataIteration);
            generic.CreateNewOpportunityExistingcontact(driver, extentTest, testDataIteration, testName, Ro["P1TestChannel"].ToString(), Ro["MajorSource"].ToString(), Ro["P1Minorsource"].ToString(), contactname, Ro["Londoncentre"].ToString(), People);
            string oppname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");

            WaitUntil(driver, Control("FieldVerification2", "Refresh", "Opportunity"), 120);


            // Refresh the page
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());
            ThinkTime(3);
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());
            ThinkTime(3);
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());
            ThinkTime(5);
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());
            ThinkTime(5);
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());
            ThinkTime(5);

            generic.SelectRelatedTab(driver, extentTest, testName, testDataIteration, Ro["P1RelatedField1"].ToString());
            generic.searchrequest(driver, extentTest, testName, testDataIteration, Ro["Activitydate"].ToString());
            generic.SelectingActiverequest(driver, extentTest, testName, testDataIteration);

            //Verifying Payload fields
            generic.payloadnavigate(driver, extentTest, testName, testDataIteration);
            // generic.payloadverificationbrandlangphone(driver, extentTest, testName, testDataIteration, Ro["Languagecode"].ToString(), Ro["regusbrand"].ToString(), emailid, Ro["payloadphone"].ToString(), Ro["TeamEmailqa"].ToString());
            generic.payloadverificationbrand(driver, extentTest, testName, testDataIteration, Ro["Languagecode"].ToString(), Ro["regusbrand"].ToString());

            login.Logout(driver, extentTest, testName, testDataIteration);
            //    }

            //        catch (Exception e)
            //        {

            //            AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}

        }
        public static IEnumerable<object[]> RTA_16274()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        // <summary>
        ///TEST[CRM-2793]Verify whether the Communication request for "No Answer - Day 3" is created for the opportunity if initial contact is Yes
        /// </summary>
        [TestCategory("Regression"), TestCategory(""), TestCategory("PriorReg")]
        [TestProperty("TestcaseID", "RTA-16274")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_16274), DynamicDataSourceType.Method)]
        public void RTA_16274_verifyday3contacted(DataRow Ro)
        {

            //try
            //{
            string Date = DateTime.Today.ToString("dd-MM-yyyy");
            DateTime Now = DateTime.Now;
            string Time = Date + Convert.ToString(Now.Hour) + Convert.ToString(Now.Millisecond);
            string emailid = "AutomatCompany" + Time + "@gmail.com";

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            string now = System.DateTime.Now.ToString();
            generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);

            // Select Contacts entity and create new
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
            generic.CreateNewContactITSaleswithlanguageandemail(driver, extentTest, testDataIteration, testName, "TestContact", now, emailid, Ro["CompanyName"].ToString());
            string contactname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");

            //Creating new Opp
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
            generic.CreateNewOpportunityEntetrprisewithprevcontact(driver, extentTest, testDataIteration, testName, Ro["TestChannel"].ToString(), Ro["TestMajorSource"].ToString(), Ro["TestMinorSource"].ToString(), contactname, Ro["spacesbrand"].ToString());
            string oppname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");
            ThinkTime(20);
            // Refresh the page
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());



            ThinkTime(3);
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());
            ThinkTime(2);
            generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, Ro["Tab"].ToString());

            generic.Verifyactivitynotpresent(driver, extentTest, testName, testDataIteration, Ro["Activitydate"].ToString());

            login.Logout(driver, extentTest, testName, testDataIteration);
            //    }

            //                    catch (Exception e)
            //                    {

            //                        AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}

        }

        public static IEnumerable<object[]> RTA_16276()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }

        // <summary>
        ///TEST[CRM-2794]Verify whether the Communication request for "No Answer - Day 5" is created for the opportunity if initial contact is No
        /// </summary>
        [TestCategory("Regression"), TestCategory("GlobalP11"), TestCategory("GlobalP11A"), TestCategory("vg"), TestCategory("0309")]
        [TestProperty("TestcaseID", "RTA-16276")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_16276), DynamicDataSourceType.Method)]
        public void RTA_16276_verifyday5nocontact(DataRow Ro)
        {
            //try
            //{
            string Date = DateTime.Today.ToString("dd-MM-yyyy");
            DateTime Now = DateTime.Now;
            string Time = Date + Convert.ToString(Now.Hour) + Convert.ToString(Now.Millisecond);
            string emailid = "AutomatCompany" + Time + "@gmail.com";
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            string now = System.DateTime.Now.ToString();

            // Select Contacts entity and create new
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
            generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);

            generic.CreateNewContactITSaleswithlanguageandemail(driver, extentTest, testDataIteration, testName, "TestContact", now, emailid, Ro["CompanyName"].ToString());
            string contactname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");


            //Creating new Opp
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
            generic.CreateNewOpportunityExistingcontact(driver, extentTest, testDataIteration, testName, Ro["P1TestChannel"].ToString(), Ro["MajorSource"].ToString(), Ro["P1Minorsource"].ToString(), contactname, Ro["Londoncentre1"].ToString(), Ro["No of People"].ToString());
            string oppname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");
            ThinkTime(2);
            WaitUntil(driver, Control("FieldVerification2", "Refresh", "Opportunity"), 120);
            // Refresh the page
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());

            generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, Ro["Tab"].ToString());
            generic.selectRequiredActivitty(driver, extentTest, testName, testDataIteration, Ro["No Answer - Day 5"].ToString());

            //Verifying Payload fields


            generic.payloadnavigate(driver, extentTest, testName, testDataIteration);
            // generic.payloadverificationwithphone(driver, extentTest, testName, testDataIteration, Ro["Languagecode"].ToString(), Ro["regusbrand"].ToString(), emailid, Ro["payloadphone"].ToString(), Ro["TeamEmailqa"].ToString());
            generic.payloadverificationbrand(driver, extentTest, testName, testDataIteration, Ro["Languagecode"].ToString(), Ro["regusbrand"].ToString());


            login.Logout(driver, extentTest, testName, testDataIteration);


            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}
        }







        public static IEnumerable<object[]> RTA_15095()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }

        ///TEST [CRM-3218] Verify that correct signature phone number and email address are sent in the "ASM, AD Internal Handover Email - Large Deal Tour" Comm Request
        /// </summary>
        /// CRM-3218
        [TestCategory("RegressionFail"), TestCategory("SprintUN"), TestCategory("vg")]

        [TestProperty("TestcaseID", "RTA-15095")]


        [DataTestMethod]
        [DynamicData(nameof(RTA_15095), DynamicDataSourceType.Method)]

        public void RTA_15095_ChecktheTransferToCS(DataRow Ro)
        {
            try
            {
                // Login as Sales Agent
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity3"].ToString());
                generic.SelectNewTab(driver, extentTest, testName, testDataIteration);
                generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);
                generic.verifyCSTo(driver, extentTest, testName, testDataIteration);
                login.Logout(driver, extentTest, testName, testDataIteration);
                generic.DiscardChanges(driver, extentTest, testName, testDataIteration);
            }
            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }




        public static IEnumerable<object[]> RTA_17047()
        {
            foreach (DataRow row in getTestCaseList("SalesAdmin"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// TEST [CRM-3873] To verify IWG Sales Admin are able to setup and update manually some of the users attributes and skills related with Direct Sales.
        /// CRM-3873
        [TestCategory("28Sep2020"), TestCategory("JMS"), TestCategory("IT Sales"), TestCategory("GlobalP11"), TestCategory("Regression"), TestCategory("RerunMay9"), TestCategory("RF24-4-20"), TestCategory("RerunMay120"), TestCategory("Rerun-21062020_1")]
        [TestProperty("TestcaseID", "RTA-17047")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_17047), DynamicDataSourceType.Method)]
        public void RTA_17047_salesadminusersetupupdate(DataRow Ro)
        {
            //try
            //{


            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
            generic.NavigateTosettings(driver, extentTest, testName, testDataIteration);
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, "Users");
            generic.usersetupadmin(driver, extentTest, testName, testDataIteration, "Barcelona");
            login.Logout(driver, extentTest, testName, testDataIteration);

            //}
            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}

        }


        public static IEnumerable<object[]> RTA_16278()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }

        // <summary>
        ///TEST[CRM-2794]Verify whether the Communication request for "No Answer - Day 5" is created for the opportunity if initial contact is Yes
        /// </summary>
        [TestCategory("Regression"), TestCategory("GlobalP11")]
        [TestProperty("TestcaseID", "RTA-16278")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_16278), DynamicDataSourceType.Method)]
        public void RTA_16278_verifyday5contacted(DataRow Ro)
        {
            //try
            //{
            string Date = DateTime.Today.ToString("dd-MM-yyyy");
            DateTime Now = DateTime.Now;
            string Time = Date + Convert.ToString(Now.Hour) + Convert.ToString(Now.Millisecond);
            string emailid = "AutomatCompany" + Time + "@gmail.com";
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            string now = System.DateTime.Now.ToString();
            generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);


            // Select Contacts entity and create new
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
            generic.CreateNewContactITSaleswithlanguageandemail(driver, extentTest, testDataIteration, testName, "TestContact", now, emailid, Ro["CompanyName"].ToString());
            string contactname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");

            //Creating new Opp
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
            generic.CreateNewOpportunityEntetrprisewithprevcontact(driver, extentTest, testDataIteration, testName, Ro["TestChannel"].ToString(), Ro["TestMajorSource"].ToString(), Ro["TestMinorSource"].ToString(), contactname, Ro["spacesbrand"].ToString());
            string oppname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");



            ThinkTime(20);
            // Refresh the page
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());



            ThinkTime(5);
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());
            ThinkTime(5);
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());
            ThinkTime(15);



            generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, Ro["Tab"].ToString());


            generic.Verifyactivitynotpresent(driver, extentTest, testName, testDataIteration, Ro["No Answer - Day 5"].ToString());

            login.Logout(driver, extentTest, testName, testDataIteration);
            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}

        }

















        public static IEnumerable<object[]> RTA_16275()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }

        /// <summary>
        /// Verify that Dynamics sends the preferred language of the Opportunity Contact to PureCloud (manually created Opportunity status reason - Inprogress.
        /// CRM-3366
        /// </summary>
        [TestCategory("Regression"), TestCategory("GlobalP11"), TestCategory("CRM-3366"), TestCategory("GlobalP11A")]
        [TestProperty("TestcaseID", "RTA-16275")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_16275), DynamicDataSourceType.Method)]

        public void RTA_16275_VerifyOppPureCloud(DataRow Ro)
        {
            //try
            //{
            string Date = DateTime.Today.ToString("dd-MM-yyyy");
            DateTime Now = DateTime.Now;
            string Time = Date + Convert.ToString(Now.Hour) + Convert.ToString(Now.Millisecond);
            string emailid = "AutomatCompany" + Time + "@gmail.com";
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            string now = System.DateTime.Now.ToString();

            //Select Contacts entity and create new
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
            generic.CreateNewContactITSaleswithlanguageandemail(driver, extentTest, testDataIteration, testName, "TestContact", now, emailid, Ro["CompanyName"].ToString());
            string contactname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");

            //Creating new Opp

            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
            generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);
            generic.CreateNewOpportunityEntetrprisewithprevcontact(driver, extentTest, testDataIteration, testName, Ro["TestChannel"].ToString(), Ro["TestMajorSource"].ToString(), Ro["TestMinorSource"].ToString(), contactname, Ro["regusbrand"].ToString());
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());
            //string oppname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");

            //Verifying Opportunity status and Language
            generic.VerifyStatusReason(driver, extentTest, testName, testDataIteration, "In Progress");
            generic.VerifyOppStatusandLanguage(driver, extentTest, testName, testDataIteration, Ro["UKEnglish"].ToString());

            //Verifying Payload fields
            generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, Ro["Tab"].ToString());
            generic.VerifyTourCommRequestActivity(driver, extentTest, testName, testDataIteration, Ro["ActivityTitleDialer"].ToString());
            generic.VerificationinPayload(driver, extentTest, testName, testDataIteration, Ro["P1languagecodeUK"].ToString());
            login.Logout(driver, extentTest, testName, testDataIteration);

            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}

        }






        public static IEnumerable<object[]> RTA_15730()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }



        /// <summary>
        /// CRM-5598
        /// Verify that the default currency on the Lead form is "British Pounds"
        /// </summary>
        [TestCategory("CRM-5598"), TestCategory("Regression"), TestCategory("GlobalP11")]
        [TestProperty("TestcaseID", "RTA-15730")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_15730), DynamicDataSourceType.Method)]
        public void RTA_15730_VerifythatDefaultCurrencyontheLeadFormisBritishPounds(DataRow Ro)
        {
            //try
            //{
            // Login as Sales Agent
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());

            //Click Leads and create new Lead
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity3"].ToString());
            generic.SelectNewTab(driver, extentTest, testName, testDataIteration);
            generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);

            // Verify default currency is "British Pounds"
            generic.VerifyLeadDefaultCurrency(driver, extentTest, testName, testDataIteration, Ro["Currency1"].ToString());

            //Log out
            generic.Logout(driver, extentTest, testName, testDataIteration);
            //generic.DiscardChanges(driver, extentTest, testName, testDataIteration);

            //}
            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}
        }

        public static IEnumerable<object[]> RTA_15881()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// CRM-5598
        /// Verify that the default currency on the Quick create Lead form is "British Pounds"
        /// </summary>
        [TestCategory("CRM-5598"), TestCategory("Regression"), TestCategory("GlobalP11")]
        [TestProperty("TestcaseID", "RTA-15881")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_15881), DynamicDataSourceType.Method)]
        public void RTA_15881_DefaultCurrencyonQuickcreateLeadFormisBritishPounds(DataRow Ro)
        {
            //try
            //{
            // Login as Sales Agent
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());

            //Click on +button and select lead for Quick Create Lead form
            generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);
            generic.QuickcreateITsales(driver, extentTest, testName, testDataIteration, "Lead");

            // Verify default currency is "British Pounds"
            generic.QuickCreateDefaultCurrency(driver, extentTest, testName, testDataIteration);

            //Log out
            generic.Logout(driver, extentTest, testName, testDataIteration);
            //generic.DiscardChanges(driver, extentTest, testName, testDataIteration);

            //}
            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}
        }
        public static IEnumerable<object[]> RTA_15738()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// CRM-5598
        /// Verify that the default currency on theOpportunity form is "British Pounds"
        /// </summary>
        [TestCategory("CRM-5598"), TestCategory("Regression"), TestCategory("GlobalP11")]
        [TestProperty("TestcaseID", "RTA-15738")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_15738), DynamicDataSourceType.Method)]
        public void RTA_15738_DefaultOppBritishPounds(DataRow Ro)
        {
            //try
            //{

            // Login as Sales Agent
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());


            //Click Opportunities and click on new 
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.SelectNewTab(driver, extentTest, testName, testDataIteration);
            //generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);
            generic.VerifyOpportunityDefaultCurrency(driver, extentTest, testName, testDataIteration, Ro["Symbol"].ToString());

            //Click on +button and select Opportunity for Quick Create Opportunity form
            generic.QuickcreateITsales(driver, extentTest, testName, testDataIteration, "Opportunity");

            //Verify default currency is "British Pounds"
            generic.QuickCreateDefaultCurrency(driver, extentTest, testName, testDataIteration);

            //Log out
            login.Logout(driver, extentTest, testName, testDataIteration);
            generic.DiscardChanges(driver, extentTest, testName, testDataIteration);

            //}
            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}
        }

        public static IEnumerable<object[]> RTA_15732()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// CRM-5598
        /// Verify that the currency on the Lead is correct when setting and updating the country on the Lead form
        /// </summary>
        [TestCategory("HF"), TestCategory("CRM-5598"), TestCategory("Regression"), TestCategory("GlobalP11"), TestCategory("GlobalP11A"), TestCategory("2211")]
        [TestProperty("TestcaseID", "RTA-15732")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_15732), DynamicDataSourceType.Method)]
        public void RTA_15732_CurrencyontheLeadForm(DataRow Ro)
        {
            //try
            //{
            // Login as Sales Agent
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            string time = System.DateTime.Now.ToString();

            // Select Contacts entity and create new
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
            string contactname = generic.CreateNewContactDirectSalesUser(driver, extentTest, testDataIteration, testName, Ro["Contactname"].ToString(), time);


            // Select lead and create anew
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity3"].ToString());
            string now = System.DateTime.Now.ToString();
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
            generic.createLeadwithCountry(driver, extentTest, testName, testDataIteration, "Lead" + now, Ro["Email"].ToString(), Ro["BussinessPhone"].ToString(), Ro["Source"].ToString(), Ro["MajorSource"].ToString(), Ro["MinorSource2"].ToString(), now, "ExistingContact", "", contactname, "", "", "United Kingdom");
            string leadname = Element(driver, Control("LeadTitle", "Opportunity")).GetAttribute("innerText");

            generic.NavigateToRelatedTabEntitiesLead(driver, extentTest, testName, testDataIteration, Ro["RelatedTabEntity"].ToString());
            generic.OppSelect(driver, extentTest, testName, testDataIteration);

            // Verify the + icon not removed
            generic.GetBusPhonevalue(driver, extentTest, testName, testDataIteration, Ro["BussinessPhone"].ToString());

            generic.ChangingCountryinLead(driver, extentTest, testName, testDataIteration, Ro["Country1"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity3"].ToString());
            generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "All Leads");
            generic.OpenRecordGlobalSearch(driver, extentTest, testName, testDataIteration, leadname);

            generic.VerifyLeadDefaultCurrencyNew(driver, extentTest, testName, testDataIteration, Ro["Currency1"].ToString());

            //Log out
            login.Logout(driver, extentTest, testName, testDataIteration);
            generic.DiscardChanges(driver, extentTest, testName, testDataIteration);

            //}
            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}
        }
        public static IEnumerable<object[]> RTA_15735()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }

        /// <summary>
        /// CRM-5598
        /// Verify that the currency on the Lead is correct when setting and updating the recommended business centre on the Lead form
        /// </summary>
        [TestCategory("25AugFixed"), TestCategory("Regression"), TestCategory("GlobalP11"), TestCategory("CRM-5598"), TestCategory("GlobalP11A"), TestCategory("0309")]
        [TestProperty("TestcaseID", "RTA-15735")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_15735), DynamicDataSourceType.Method)]
        public void RTA_15735_VerifyCurrencyonLeadcrct(DataRow Ro)
        {
            //try
            //{
            // Login as Sales Agent
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());

            string now = System.DateTime.Now.ToString();

            //Select Contacts entity and create new
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
            string contactname = generic.CreateNewContactDirectSalesUser(driver, extentTest, testDataIteration, testName, Ro["Contactname"].ToString(), now);

            //Select lead and verify default currency
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity3"].ToString());
            generic.createleaddirectsales(driver, extentTest, testName, testDataIteration, "Lead" + now, Ro["Email"].ToString(), Ro["BussinessPhone"].ToString(), Ro["Source"].ToString(), Ro["MajorSource"].ToString(), Ro["MinorSource2"].ToString(), now, "ExistingContact", "", contactname, "", "", "London - London Bridge");
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());
            generic.VerifyLeadDefaultCurrency(driver, extentTest, testName, testDataIteration, Ro["Currency1"].ToString());

            ////Changing Recommended Business centre and verifying new currency
            //generic.ReplacingNewReccommendedCentre(driver, extentTest, testName, testDataIteration, "Bangalore UB City");
            //generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());
            //generic.VerifyLeadDefaultCurrency(driver, extentTest, testName, testDataIteration, Ro["Currency"].ToString());


            //Log out
            login.Logout(driver, extentTest, testName, testDataIteration);

            generic.DiscardChanges(driver, extentTest, testName, testDataIteration);

            //}
            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}
        }
        public static IEnumerable<object[]> RTA_15739()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }

        /// <summary>
        /// CRM-5598
        /// Verify that the currency on the Opportunity is correct when setting and updating the country on the opportunity
        /// </summary>
        [TestCategory("Regression"), TestCategory("GlobalP11"), TestCategory("CRM-5598"), TestCategory("25Nov")]
        [TestProperty("TestcaseID", "RTA-15739")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_15739), DynamicDataSourceType.Method)]
        public void RTA_15739_CurrencyonLeadisCorrect(DataRow Ro)
        {
            //try
            //{
            // Login as Sales Agent
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());

            //Click Opportunities and click on new 

            //generic.SelectNewTab(driver, extentTest, testName, testDataIteration);


            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
            string contactname = generic.CreateNewOpportunityBookATour(driver, extentTest, testName, testDataIteration, "Bangalore UB City");
            string oppname = Element(driver, Control("OppReference", "EnterpriseSales")).GetAttribute("title");

            generic.VerifyOpportunityDefaultCurrency(driver, extentTest, testName, testDataIteration, Ro["SymbolINR"].ToString());

            string parent = driver.CurrentWindowHandle;
            generic.AdvancedFind(driver, extentTest, testName, testDataIteration);
            ThinkTime(2);
            generic.AdvancedfindfilterCurrency(driver, extentTest, testName, testDataIteration, "Opportunities", "[new]", "Reference", "Equals", oppname, "Results");
            generic.VerifyingCurrencyAdvFind(driver, extentTest, testName, testDataIteration, "INR");
            driver.Close();
            driver.SwitchTo().Window(parent);

            generic.ChangingCountryinLead(driver, extentTest, testName, testDataIteration, Ro["Country1"].ToString());

            string parent1 = driver.CurrentWindowHandle;
            generic.AdvancedFind(driver, extentTest, testName, testDataIteration);
            ThinkTime(2);
            generic.AdvancedfindfilterCurrency(driver, extentTest, testName, testDataIteration, "Opportunities", "[new]", "Reference", "Equals", oppname, "Results");
            generic.VerifyingCurrencyAdvFind(driver, extentTest, testName, testDataIteration, "INR");
            driver.Close();
            driver.SwitchTo().Window(parent1);

            //Log out
            login.Logout(driver, extentTest, testName, testDataIteration);
            //generic.DiscardChanges(driver, extentTest, testName, testDataIteration);

            //}
            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}
        }

        public static IEnumerable<object[]> PageTest11()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }



        /// <summary>
        /// CRM-5598
        /// Verify that the currency on the Opportunity is correct when setting and updating the business centre in the Opportunity
        /// </summary>
        [TestCategory("25Aug"), TestCategory("Regression"), TestCategory("GlobalP11"), TestCategory("CRM-5598"), TestCategory("GlobalP11A")]
        [TestProperty("TestcaseID", "RTA-15741")]
        [DataTestMethod]
        [DynamicData(nameof(PageTest11), DynamicDataSourceType.Method)]
        public void RTA_15741_CurrencyontheLeadisCorrect(DataRow Ro)
        {

            //try
            //{
            // Login as Sales Agent
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());

            //Click Opportunities and click on new 
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            //generic.SelectNewTab(driver, extentTest, testName, testDataIteration);
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
            string contactname = generic.CreateNewOpportunityBookATour(driver, extentTest, testName, testDataIteration, "Aberdeen, Aberdeen Airport");
            string oppname = Element(driver, Control("OppReference", "EnterpriseSales")).GetAttribute("title");

            generic.VerifyOpportunityDefaultCurrency(driver, extentTest, testName, testDataIteration, Ro["Symbol"].ToString());

            string parent = driver.CurrentWindowHandle;
            generic.AdvancedFind(driver, extentTest, testName, testDataIteration);
            ThinkTime(2);
            generic.AdvancedfindfilterCurrency(driver, extentTest, testName, testDataIteration, "Opportunities", "[new]", "Reference", "Equals", oppname, "Results");
            generic.VerifyingCurrencyAdvFind(driver, extentTest, testName, testDataIteration, "GBP");
            driver.Close();
            driver.SwitchTo().Window(parent);
            generic.scrollUpOpportunityEnterprise(driver, extentTest, testName, testDataIteration);
            generic.ChangingRecommendedBussinessCentre(driver, extentTest, testName, testDataIteration, "London - London Bridge");

            string parent1 = driver.CurrentWindowHandle;
            generic.AdvancedFind(driver, extentTest, testName, testDataIteration);
            ThinkTime(2);
            generic.AdvancedfindfilterCurrency(driver, extentTest, testName, testDataIteration, "Opportunities", "[new]", "Reference", "Equals", oppname, "Results");
            generic.VerifyingCurrencyAdvFind(driver, extentTest, testName, testDataIteration, "GBP");
            driver.Close();
            driver.SwitchTo().Window(parent1);

            //Log out
            login.Logout(driver, extentTest, testName, testDataIteration);
            generic.DiscardChanges(driver, extentTest, testName, testDataIteration);

            //}
            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}
        }

        public static IEnumerable<object[]> RTA_15742()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }

        /// <summary>
        /// CRM-5598
        /// Verify that the currency in the Opportunity is not based on the Account or Contact's country
        /// </summary>
        [TestCategory("Regression"), TestCategory("GlobalP11"), TestCategory("CRM-5598"), TestCategory("25Nov")]
        [TestProperty("TestcaseID", "RTA-15742")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_15742), DynamicDataSourceType.Method)]
        public void RTA_15742_VerifythattheCurrencyopp(DataRow Ro)
        {
            //try
            //{
            // Login as Sales Agent
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());


            string Date = DateTime.Today.ToString("dd-MM-yyyy");
            DateTime Now = DateTime.Now;
            string Time = Date + Convert.ToString(Now.Hour) + Convert.ToString(Now.Millisecond);
            string emailid = "AutomatCompany" + Time + "@gmail.com";
            string now = System.DateTime.Now.ToString();



            // Select Accounts entity and create new


            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString());
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
            generic.CreateNewAccount(driver, extentTest, testDataIteration, testName, Ro["CompanyName"].ToString(), Time);
            generic.scrollDownaccounts(driver, extentTest, testName, testDataIteration);
            generic.scrollDownaccounts(driver, extentTest, testName, testDataIteration);
            generic.AddCountryinAccount(driver, extentTest, testName, testDataIteration);
            string accountname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");

            // Select Contacts entity and create new
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
            generic.CreateNewContactITSaleswithlanguageandemail(driver, extentTest, testDataIteration, testName, "TestContact", now, emailid, accountname);
            generic.AddCountryinContact(driver, extentTest, testName, testDataIteration);
            string contactname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");

            //Creating new Opp
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
            generic.CreateNewOpportunityExistingcontactandAccount(driver, extentTest, testDataIteration, testName, Ro["P1TestChannel"].ToString(), Ro["MajorSource"].ToString(), Ro["P1Minorsource"].ToString(), contactname, accountname, Ro["spacesbrand"].ToString());
            //  string oppname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");
            string oppname = Element(driver, Control("OppReference", "EnterpriseSales")).GetAttribute("title");
            //generic.VerifyOpportunityDefaultCurrency(driver, extentTest, testName, testDataIteration, Ro["Symbol"].ToString());

            string parent = driver.CurrentWindowHandle;
            generic.AdvancedFind(driver, extentTest, testName, testDataIteration);
            ThinkTime(2);
            generic.AdvancedfindfilterCurrency(driver, extentTest, testName, testDataIteration, "Opportunities", "[new]", "Reference", "Equals", oppname, "Results");
            generic.VerifyingCurrencyAdvFind(driver, extentTest, testName, testDataIteration, "Kr");
            driver.Close();
            driver.SwitchTo().Window(parent);

            //Log out
            generic.Logout(driver, extentTest, testName, testDataIteration);
            //generic.DiscardChanges(driver, extentTest, testName, testDataIteration);

            //}
            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}
        }

        public static IEnumerable<object[]> RTA_15882()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// CRM-5598
        /// Verify that qualifying a Lead will copy over the Currency to the new Opportunity
        /// </summary>
        [TestCategory("25AugFixed"), TestCategory("Regression"), TestCategory("GlobalP11"), TestCategory("CRM-5598"), TestCategory("GlobalP11A")]
        [TestProperty("TestcaseID", "RTA-15882")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_15882), DynamicDataSourceType.Method)]
        public void RTA_15882_Verifyqualifyalead(DataRow Ro)
        {
            //try
            //{
            // Login as Sales Agent
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());


            //Click Leads and create new Lead
            generic.ScriptErrorExcep(driver, extentTest, testName, testDataIteration);
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity3"].ToString());
            string now = System.DateTime.Now.ToString();
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
            generic.createleaddirectsales(driver, extentTest, testName, testDataIteration, "Lead" + now, Ro["Email"].ToString(), Ro["BussinessPhone"].ToString(), Ro["Source"].ToString(), Ro["MajorSource"].ToString(), Ro["MinorSource2"].ToString(), now, "NewContact", "", "Test", "US English", "", "London");
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());
            generic.VerifyLeadDefaultCurrency(driver, extentTest, testName, testDataIteration, Ro["Currency1"].ToString());
            ThinkTime(2);
            WaitUntil(driver, Control("developLead", "CommonObj"), 120);
            Element(driver, Control("developLead", "CommonObj")).Click();
            //Qualifying Lead
            //generic.QualifyLeadandMatchingPopuphandle(driver, extentTest, testName, testDataIteration, Ro["Qualifybutton"].ToString(), "Form:opportunity");
            ThinkTime(2);
            WaitUntil(driver, Control("OppReference", "EnterpriseSales"), 120);
            string oppname = Element(driver, Control("OppReference", "EnterpriseSales")).GetAttribute("title");


            string parent = driver.CurrentWindowHandle;
            generic.AdvancedFind(driver, extentTest, testName, testDataIteration);
            ThinkTime(2);
            generic.AdvancedfindfilterCurrency(driver, extentTest, testName, testDataIteration, "Opportunities", "[new]", "Reference", "Equals", oppname, "Results");
            generic.VerifyingCurrencyAdvFind(driver, extentTest, testName, testDataIteration, Ro["Symbol"].ToString());
            driver.Close();
            driver.SwitchTo().Window(parent);

            //Log out
            generic.Logout(driver, extentTest, testName, testDataIteration);
            generic.DiscardChanges(driver, extentTest, testName, testDataIteration);

            //}
            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}
        }


        public static IEnumerable<object[]> RTA_15886()
        {
            foreach (DataRow row in getTestCaseList("AreaDirector"))
            {
                yield return new object[] { row };
            }
        }

        /// <summary>
        /// CRM-3815
        /// Verify that the IWG sales management user is able to to update tour ranking of a bookable resource
        /// </summary>
        [TestCategory("Regression"), TestCategory("smoke"), TestCategory("28Aug"), TestCategory("GlobalP11NA"), TestCategory("SprintUN")]
        [TestProperty("TestcaseID", "RTA-15886")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_15886), DynamicDataSourceType.Method)]
        public void RTA_15886_UpdateTouRanking(DataRow Ro)
        {
            try
            {

                // Login as Sales Manager
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                //generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
                string parent = driver.CurrentWindowHandle;
                //Searching Active Bookavble Resource characteristics record using advanced find
                generic.AdvancedFind(driver, extentTest, testName, testDataIteration);
                ThinkTime(2);

                string parentnew = driver.CurrentWindowHandle;
                try
                {
                    generic.AdvancedfindfilterBookableCharLocation(driver, extentTest, testName, testDataIteration, "Bookable Resource Characteristic Locations", "[new]", "Status", "Equals", "Active", "Characteristic", "Tour Rank", "Resource", "Aakansha Pathak", "Results");
                    generic.SelectingActiveCell(driver, extentTest, testName, testDataIteration);

                    //Changing rating value
                    string parent1 = driver.CurrentWindowHandle;
                    generic.ChangeRatingValue(driver, extentTest, testName, testDataIteration);
                    driver.Close();

                    //Opening the second record and verifying whether the record is Readonly.
                    driver.SwitchTo().Window(parentnew);
                    generic.OpenSecondActiveRecord(driver, extentTest, testName, testDataIteration);
                    string parent2 = driver.CurrentWindowHandle;
                    generic.VerifyBookableResourceReadOnlyStatus(driver, extentTest, testName, testDataIteration);
                    driver.Close();
                    driver.SwitchTo().Window(parentnew);
                }
                catch (Exception e)
                {

                }
                driver.Close();
                driver.SwitchTo().Window(parent);

                //Log out
                generic.Logout(driver, extentTest, testName, testDataIteration);
                generic.DiscardChanges(driver, extentTest, testName, testDataIteration);

            }
            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }
        public static IEnumerable<object[]> RTA_15713()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// CRM-3393
        /// Verify the Security Model for IWG Internal Sales Agent
        /// </summary>
        [TestCategory("Regression"), TestCategory("GlobalP11Fail"), TestCategory("SalesSecurity")]
        [TestProperty("TestcaseID", "RTA-15713")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_15713), DynamicDataSourceType.Method)]
        public void RTA_15713_SecurityModelIWGIntSalesAgent(DataRow Ro)
        {
            try
            {
                // Login as Sales Agent
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());

                //Move to Advance Settings and Security roles
                generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
                string parent = driver.CurrentWindowHandle;
                generic.MoveToAdvanceSettingsNew(driver, extentTest, testName, testDataIteration);
                string parentnew = driver.CurrentWindowHandle;
                generic.MoveToSecurityRole(driver, extentTest, testName, testDataIteration, Ro["SecurityRole"].ToString());

                //Verify Security roles in Core Records
                generic.SecurityRolesCoreRecord(driver, extentTest, testName, testDataIteration, Ro["SecurityTab1"].ToString());

                //Verify Security roles in Marketing
                generic.SecurityRolesMarketing(driver, extentTest, testName, testDataIteration, Ro["SecurityTab2"].ToString());

                //Verify Security roles in Sales
                generic.SecurityRolesSales(driver, extentTest, testName, testDataIteration, Ro["SecurityTab3"].ToString());

                //Verify Security roles in Service
                generic.SecurityRolesService(driver, extentTest, testName, testDataIteration, Ro["SecurityTab4"].ToString());

                //Verify Security roles in Business Management
                generic.SecurityRolesBusinessManagement(driver, extentTest, testName, testDataIteration, Ro["SecurityTab5"].ToString());

                //Verify Security roles in Service Management
                generic.SecurityRolesServiceManagement(driver, extentTest, testName, testDataIteration, Ro["SecurityTab6"].ToString());

                //Verify Security roles in Customization
                generic.SecurityRolesCustomization(driver, extentTest, testName, testDataIteration, Ro["SecurityTab7"].ToString());

                //Verify Security roles in Business Process Flows
                generic.SecurityRolesBusinessPF(driver, extentTest, testName, testDataIteration, Ro["SecurityTab8"].ToString());

                //Verify Security roles in Custom Entities
                generic.SecurityRolesCustomEntities(driver, extentTest, testName, testDataIteration, Ro["SecurityTab9"].ToString());


                driver.SwitchTo().Window(parentnew);
                driver.Close();
                driver.SwitchTo().Window(parent);

                //Log out
                generic.Logout(driver, extentTest, testName, testDataIteration);
                generic.DiscardChanges(driver, extentTest, testName, testDataIteration);


            }
            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }
        public static IEnumerable<object[]> RTA_15715()
        {
            foreach (DataRow row in getTestCaseList("SalesAdmin"))
            {
                yield return new object[] { row };
            }
        }

        /// <summary>
        /// CRM-3393
        /// Verify the Security Model for IWG SalesAdmin
        /// </summary>
        [TestCategory("Regression"), TestCategory("GlobalP11Fail"), TestCategory("SalesSecurity")]
        [TestProperty("TestcaseID", "RTA-15715")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_15715), DynamicDataSourceType.Method)]
        public void RTA_15715_IWGSalesAdmin(DataRow Ro)
        {
            try
            {
                // Login as Sales Admin
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());

                //Move to Advance Settings and Security roles
                generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
                string parent = driver.CurrentWindowHandle;
                generic.MoveToAdvanceSettingsNew(driver, extentTest, testName, testDataIteration);
                string parentnew = driver.CurrentWindowHandle;
                generic.MoveToSecurityRole(driver, extentTest, testName, testDataIteration, Ro["SecurityRole"].ToString());

                //Verify Security roles in Core Records
                generic.SecurityRolesCoreRecord(driver, extentTest, testName, testDataIteration, Ro["SecurityTab1"].ToString());

                //Verify Security roles in Marketing
                generic.SecurityRolesMarketing(driver, extentTest, testName, testDataIteration, Ro["SecurityTab2"].ToString());

                //Verify Security roles in Sales
                generic.SecurityRolesSales(driver, extentTest, testName, testDataIteration, Ro["SecurityTab3"].ToString());

                //Verify Security roles in Service
                generic.SecurityRolesService(driver, extentTest, testName, testDataIteration, Ro["SecurityTab4"].ToString());

                //Verify Security roles in Business Management
                generic.SecurityRolesBusinessManagement(driver, extentTest, testName, testDataIteration, Ro["SecurityTab5"].ToString());

                //Verify Security roles in Service Management
                generic.SecurityRolesServiceManagement(driver, extentTest, testName, testDataIteration, Ro["SecurityTab6"].ToString());

                //Verify Security roles in Customization
                generic.SecurityRolesCustomization(driver, extentTest, testName, testDataIteration, Ro["SecurityTab7"].ToString());

                //Verify Security roles in Business Process Flows
                generic.SecurityRolesBusinessPF(driver, extentTest, testName, testDataIteration, Ro["SecurityTab8"].ToString());

                //Verify Security roles in Custom Entities
                generic.SecurityRolesCustomEntities(driver, extentTest, testName, testDataIteration, Ro["SecurityTab9"].ToString());


                driver.SwitchTo().Window(parentnew);
                driver.Close();
                driver.SwitchTo().Window(parent);

                //Log out
                generic.Logout(driver, extentTest, testName, testDataIteration);
                generic.DiscardChanges(driver, extentTest, testName, testDataIteration);


            }
            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }

        public static IEnumerable<object[]> RTA_15714()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesManager"))
            {
                yield return new object[] { row };
            }
        }

        /// <summary>
        /// CRM-3393
        /// Verify the Security Model for IWG InternalSalesManager
        /// </summary>
        [TestCategory("Regression"), TestCategory("GlobalP11Fail"), TestCategory("SalesSecurity")]
        [TestProperty("TestcaseID", "RTA-15714")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_15714), DynamicDataSourceType.Method)]
        public void RTA_15714_SecurityModelIWGIntSalesManager(DataRow Ro)
        {
            try
            {
                // Login asIWG Internal sales Manager
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());

                //Move to Advance Settings and Security roles
                generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
                string parent = driver.CurrentWindowHandle;
                generic.MoveToAdvanceSettingsNew(driver, extentTest, testName, testDataIteration);
                string parentnew = driver.CurrentWindowHandle;
                generic.MoveToSecurityRole(driver, extentTest, testName, testDataIteration, Ro["SecurityRole"].ToString());

                //Verify Security roles in Core Records
                generic.SecurityRolesCoreRecord(driver, extentTest, testName, testDataIteration, Ro["SecurityTab1"].ToString());

                //Verify Security roles in Marketing
                generic.SecurityRolesMarketing(driver, extentTest, testName, testDataIteration, Ro["SecurityTab2"].ToString());

                //Verify Security roles in Sales
                generic.SecurityRolesSales(driver, extentTest, testName, testDataIteration, Ro["SecurityTab3"].ToString());

                //Verify Security roles in Service
                generic.SecurityRolesService(driver, extentTest, testName, testDataIteration, Ro["SecurityTab4"].ToString());

                //Verify Security roles in Business Management
                generic.SecurityRolesBusinessManagement(driver, extentTest, testName, testDataIteration, Ro["SecurityTab5"].ToString());

                //Verify Security roles in Service Management
                generic.SecurityRolesServiceManagement(driver, extentTest, testName, testDataIteration, Ro["SecurityTab6"].ToString());

                //Verify Security roles in Customization
                generic.SecurityRolesCustomization(driver, extentTest, testName, testDataIteration, Ro["SecurityTab7"].ToString());

                //Verify Security roles in Business Process Flows
                generic.SecurityRolesBusinessPF(driver, extentTest, testName, testDataIteration, Ro["SecurityTab8"].ToString());

                //Verify Security roles in Custom Entities
                generic.SecurityRolesCustomEntities(driver, extentTest, testName, testDataIteration, Ro["SecurityTab9"].ToString());


                driver.SwitchTo().Window(parentnew);
                driver.Close();
                driver.SwitchTo().Window(parent);

                //Log out
                generic.Logout(driver, extentTest, testName, testDataIteration);
                generic.DiscardChanges(driver, extentTest, testName, testDataIteration);


            }
            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }

        public static IEnumerable<object[]> RTA_15716()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesManagement"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// CRM-3393
        /// Verify the Security Model for IWG SalesManagement
        /// </summary>
        [TestCategory("Regression"), TestCategory("GlobalP11Fail"), TestCategory("SalesSecurity")]
        [TestProperty("TestcaseID", "RTA-15716")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_15716), DynamicDataSourceType.Method)]

        public void RTA_15716_SecurityModelforIWGSalesManagement(DataRow Ro)
        {
            try
            {

                // Login as IWG Sales Manangement
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());

                //Move to Advance Settings and Security roles
                generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
                string parent = driver.CurrentWindowHandle;
                generic.MoveToAdvanceSettingsNew(driver, extentTest, testName, testDataIteration);
                string parentnew = driver.CurrentWindowHandle;
                generic.MoveToSecurityRole(driver, extentTest, testName, testDataIteration, Ro["SecurityRole"].ToString());

                //Verify Security roles in Core Records
                generic.SecurityRolesCoreRecord(driver, extentTest, testName, testDataIteration, Ro["SecurityTab1"].ToString());

                //Verify Security roles in Marketing
                generic.SecurityRolesMarketing(driver, extentTest, testName, testDataIteration, Ro["SecurityTab2"].ToString());

                //Verify Security roles in Sales
                generic.SecurityRolesSales(driver, extentTest, testName, testDataIteration, Ro["SecurityTab3"].ToString());

                //Verify Security roles in Service
                generic.SecurityRolesService(driver, extentTest, testName, testDataIteration, Ro["SecurityTab4"].ToString());

                //Verify Security roles in Business Management
                generic.SecurityRolesBusinessManagement(driver, extentTest, testName, testDataIteration, Ro["SecurityTab5"].ToString());

                //Verify Security roles in Service Management
                generic.SecurityRolesServiceManagement(driver, extentTest, testName, testDataIteration, Ro["SecurityTab6"].ToString());

                //Verify Security roles in Customization
                generic.SecurityRolesCustomization(driver, extentTest, testName, testDataIteration, Ro["SecurityTab7"].ToString());

                //Verify Security roles in Business Process Flows
                generic.SecurityRolesBusinessPF(driver, extentTest, testName, testDataIteration, Ro["SecurityTab8"].ToString());

                //Verify Security roles in Custom Entities
                generic.SecurityRolesCustomEntities(driver, extentTest, testName, testDataIteration, Ro["SecurityTab9"].ToString());


                driver.SwitchTo().Window(parentnew);
                driver.Close();
                driver.SwitchTo().Window(parent);

                //Log out
                generic.Logout(driver, extentTest, testName, testDataIteration);
                generic.DiscardChanges(driver, extentTest, testName, testDataIteration);

            }
            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }

        public static IEnumerable<object[]> RTA_11111()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// CRM-7669
        /// Verify the Security Model for IWG Internal sales minimum
        /// </summary>
        [TestCategory("Regression"), TestCategory("GlobalP11Fail"), TestCategory("SalesSecurity")]
        [TestProperty("TestcaseID", "RTA-15716")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_11111), DynamicDataSourceType.Method)]

        public void RTA_11111_SecurityModelforIWGSalesMinimum(DataRow Ro)
        {
            try
            {

                // Login as IWG Sales Agent
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());

                //Move to Advance Settings and Security roles
                generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
                string parent = driver.CurrentWindowHandle;
                generic.MoveToAdvanceSettingsNew(driver, extentTest, testName, testDataIteration);
                string parentnew = driver.CurrentWindowHandle;
                generic.MoveToSecurityRole(driver, extentTest, testName, testDataIteration, Ro["SecurityRole"].ToString());

                //Verify Security roles in Core Records
                generic.SalesMinimumCoreRecord(driver, extentTest, testName, testDataIteration, Ro["SecurityTab1"].ToString());

                //Verify Security roles in Sales
                generic.SalesMinimumService(driver, extentTest, testName, testDataIteration, Ro["SecurityTab4"].ToString());

                //Verify Security roles in Marketing
                generic.SalesMinimumCustomEntities(driver, extentTest, testName, testDataIteration, Ro["SecurityTab9"].ToString());

                driver.SwitchTo().Window(parentnew);
                driver.Close();
                driver.SwitchTo().Window(parent);

                //Log out
                generic.Logout(driver, extentTest, testName, testDataIteration);
                generic.DiscardChanges(driver, extentTest, testName, testDataIteration);

            }
            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }

        public static IEnumerable<object[]> RTA_11112()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// CRM-7449, 8242
        /// Verify getting Error popup while closing the auto created completed Phone call activity
        /// </summary>
        [TestCategory("Regression"), TestCategory("HF")]
        [TestProperty("TestcaseID", "RTA-11112")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_11112), DynamicDataSourceType.Method)]

        public void RTA_11112_NoErrorclosingcompltdphonecall(DataRow Ro)
        {
            //try
            //{

            // Login as IWG Sales Agent
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            string newdate = DateTime.Today.ToString("MM/dd/yyyy").Replace("-", "/");
            string Date = DateTime.Today.ToString("yyyy-MM-dd");
            Console.WriteLine(Date);
            string now = System.DateTime.Now.ToString();

            //Creating new Contact
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
            string time = System.DateTime.Now.ToString();
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
            string lastname = generic.CreateNewContactforPayloadVerification(driver, extentTest, testDataIteration, testName, Ro["Contactname"].ToString(), now, Ro["Email"].ToString(), "");
            string contactname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");
            generic.SelectOpportunityheader(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString(), "Form:contact");
            generic.scrollDownOpportunity(driver, extentTest, testName, testDataIteration);
            generic.EnterContactNumber(driver, extentTest, testName, testDataIteration, "+919497852369");

            //Click Opportunity and create new Opp
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, "New");
            string people = "6";
            generic.CreateNewOpportunityEntetrprisewithprevcontact1(driver, extentTest, testDataIteration, testName, Ro["P1TestChannel"].ToString(), Ro["MajorSource"].ToString(), Ro["MinorSource"].ToString(), contactname, Ro["BussinessCentre"].ToString(), people);
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());
            string oppname = Element(driver, Control("OppReference", "EnterpriseSales")).GetAttribute("title");

            // Verify the + icon not removed
            generic.GetBusPhonevalue(driver, extentTest, testName, testDataIteration, "+91 94978 52369");

            ////Creating new phonecall activity
            //generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, Ro["Tab"].ToString());
            //generic.CreatePhoneCallactivityopp(driver, extentTest, testName, testDataIteration, Ro["ActivityButton"].ToString(), time, newdate);
            //generic.selectRequiredActivitty(driver, extentTest, testName, testDataIteration, time);
            //generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["CancelButtonPhoneCall"].ToString());
            //generic.Phonecallcancel(driver, extentTest, testDataIteration, testName, Ro["Close"].ToString(), Ro["Status"].ToString());
            //generic.VerifyPhoneCallActivityisReadOnlyOnMarkComplete(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString(), time);

            //Log out
            generic.Logout(driver, extentTest, testName, testDataIteration);
            generic.DiscardChanges(driver, extentTest, testName, testDataIteration);

            //}
            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}
        }

        public static IEnumerable<object[]> RTA_11113()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>

        ///[CRM-8128]-Verify "No answer to Post Tour Call-Attended-Follow-up your visit" Norwegian email did not display the phone number.

        /// </summary>

        [TestCategory("GlobalP11"), TestCategory("HF"), TestCategory("HF3")]

        [TestProperty("TestcaseID", "RTA-11113")]


        [DataTestMethod]
        [DynamicData(nameof(RTA_11113), DynamicDataSourceType.Method)]



        public void RTA_11113_Verify(DataRow Ro)
        {
            try

            {              //  login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserNametour"].ToString(), Ro["Passwordtour"].ToString());
                           // generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, "Sales");
                           // generic.DeleteTourFn(driver, extentTest, testName, testDataIteration);
                           // generic.Logout(driver, extentTest, testName, testDataIteration);
                           // login.Loginafterlogout(driver, extentTest, testName, testDataIteration, Ro["UserName"].ToString(), Ro["Password"].ToString());
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                string Date = DateTime.Today.ToString("dd-MM-yyyy");
                DateTime Now = DateTime.Now;
                string Time = Date + Convert.ToString(Now.Hour) + Convert.ToString(Now.Millisecond);
                string emailid = "AutomatCompany" + Time + "@gmail.com";

                string now = System.DateTime.Now.ToString();

                //Select Contacts entity and create new
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
                generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
                ThinkTime(15);
                //generic.CreateNewContactITSaleswithlanguageandemail(driver, extentTest, testDataIteration, testName, "TestContact", now, emailid, Ro["CompanyName"].ToString());
                generic.CreateNewContactwithanylangandemail(driver, extentTest, testDataIteration, testName, "TestContact", now, emailid, Ro["CompanyName"].ToString(), Ro["Norwegian"].ToString());
                generic.EnterContactNumber(driver, extentTest, testName, testDataIteration, Ro["BussinessPhone"].ToString());
                generic.saveFooter(driver, extentTest, testName, testDataIteration);
                string contactname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");

                //Creating new Opp
                //generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
                string People = "10";
                generic.CreateNewOpportunityExistingcontact(driver, extentTest, testDataIteration, testName, Ro["P1TestChannel"].ToString(), Ro["MajorSource"].ToString(), Ro["P1Minorsource"].ToString(), contactname, Ro["BussinessCentre"].ToString(), People);
                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());
                string oppname = generic.GetOppID(driver, extentTest, testName, testDataIteration);

                //Booking a tour
                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Button"].ToString());
                generic.Bookaslot(driver, extentTest, testName, testDataIteration, contactname, oppname);
                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());

                //Selecting Activities and filling values for tour outcome
                generic.SelectRelatedTab(driver, extentTest, testName, testDataIteration, Ro["P1RelatedField2"].ToString());
                generic.TourOutcome(driver, extentTest, testName, testDataIteration, Ro["ActivityTitle1"].ToString(), Ro["P1show"].ToString(), Ro["P1showreason"].ToString());
                generic.SelectRelatedTab(driver, extentTest, testName, testDataIteration, Ro["P1RelatedField1"].ToString());

                //Navigating to activities and verifying language in payload
                generic.searchrequest(driver, extentTest, testName, testDataIteration, Ro["P1posttournattended"].ToString());
                generic.posttourcommrequestverify(driver, extentTest, testName, testDataIteration, Ro["P1posttournattended"].ToString());
                generic.SelectingActiverequest(driver, extentTest, testName, testDataIteration);

                //Verifying Payload fields
                generic.payloadnavigate(driver, extentTest, testName, testDataIteration);

                generic.payloadverificationwithphoneCon1(driver, extentTest, testName, testDataIteration, Ro["P1languagecodenor"].ToString(), Ro["regusbrand"].ToString(), emailid, Ro["BussinessPhone"].ToString(), Ro["TeamEmailqa"].ToString());

                login.Logout(driver, extentTest, testName, testDataIteration);
            }
            catch (Exception e)

            {
                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");
            }
        }




        public static IEnumerable<object[]> RTA_23329()
        {
            foreach (DataRow row in getTestCaseList("ASM"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// CRM-7058
        /// Verify Users able to edit activities on Passive business unit[Migration issue]
        /// </summary>
        [TestCategory("Sprint42.1"), TestCategory("14102020")]
        [TestProperty("TestcaseID", "RTA-23329")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_23329), DynamicDataSourceType.Method)]
        public void RTA_23329_UserableEditActivitiesonPassiveBU(DataRow Ro)
        {
            try
            {
                // Login as Field Sales Agent
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());

                //Move to Advance Settings and Security roles
                generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
                string parent = driver.CurrentWindowHandle;
                generic.MoveToAdvanceSettingsNew(driver, extentTest, testName, testDataIteration);
                string parentnew = driver.CurrentWindowHandle;


                //Selecting Security role as Field Sales Agent
                generic.MoveToSecurityRole(driver, extentTest, testName, testDataIteration, Ro["SecurityRole"].ToString());
                generic.SelectSecuritySheet(driver, extentTest, testName, testDataIteration, Ro["SecurityTab1"].ToString());
                generic.OppWritePermssnBU(driver, extentTest, testName, testDataIteration);
                driver.Close();
                driver.SwitchTo().Window(parentnew);

                //IWG Team Internal sales minimum
                generic.MoveToSecurityRole(driver, extentTest, testName, testDataIteration, Ro["SecurityRole1"].ToString());
                //Verify Security roles
                generic.SelectSecuritySheet(driver, extentTest, testName, testDataIteration, Ro["SecurityTab1"].ToString());
                generic.OppWritePermssnBU(driver, extentTest, testName, testDataIteration);
                generic.ActivityWritePermssnBU(driver, extentTest, testName, testDataIteration);
                driver.Close();
                driver.SwitchTo().Window(parentnew);

                //IWG Team Field Sales
                generic.MoveToSecurityRole(driver, extentTest, testName, testDataIteration, Ro["SecurityRole2"].ToString());
                //Verify Security roles
                generic.SelectSecuritySheet(driver, extentTest, testName, testDataIteration, Ro["SecurityTab1"].ToString());
                generic.OppWritePermssnBU(driver, extentTest, testName, testDataIteration);
                generic.ActivityWritePermssnBU(driver, extentTest, testName, testDataIteration);
                driver.Close();
                driver.SwitchTo().Window(parentnew);

                //InteractionSync User - Sales
                generic.MoveToSecurityRoleforInteractionSync(driver, extentTest, testName, testDataIteration, Ro["SecurityRole3"].ToString(), Ro["SecurityRole4"].ToString());
                //Verify Security roles
                generic.SelectSecuritySheet(driver, extentTest, testName, testDataIteration, Ro["SecurityTab1"].ToString());
                generic.ActivityWritePermssnBU(driver, extentTest, testName, testDataIteration);
                driver.Close();
                driver.SwitchTo().Window(parentnew);

                driver.Close();
                driver.SwitchTo().Window(parent);

                //Log out
                generic.Logout(driver, extentTest, testName, testDataIteration);
                generic.DiscardChanges(driver, extentTest, testName, testDataIteration);


            }
            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }


        public static IEnumerable<object[]> RTA_7706()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// CRM-3222
        ///Sales Agent/Country Manager not able to manually add a Sales Assist connection to an Opportunity
        /// </summary>
        [TestCategory("Regression"), TestCategory("GlobalP11"), TestCategory("25Nov")]
        [TestProperty("TestcaseID", "RTA-7706")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_7706), DynamicDataSourceType.Method)]
        public void RTA_7706_SalesAssistConnectionToanOpp(DataRow Ro)
        {
            //try
            //{

            //Login as Sales Agent
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());

            //Select Contacts entity and create new
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
            string time = System.DateTime.Now.ToString();
            generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);
            string contactname = generic.CreateNewContactEnterpriseSales(driver, extentTest, testDataIteration, testName, Ro["Contactname"].ToString(), time, Ro["Email"].ToString());

            // Select opportunity tab and create New Record
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
            generic.CreateNewOpportunityEntetrprisewithprevcontact(driver, extentTest, testDataIteration, testName, Ro["TestChannel"].ToString(), Ro["TestMajorSource"].ToString(), Ro["TestMinorSource"].ToString(), contactname, Ro["spacesbrand"].ToString());
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());
            string reference = generic.GetReferenceIDOpportunity(driver, extentTest, testName, testDataIteration);

            //Verification of addition of Sales Assist Connections 
            generic.SelectRelatedTab(driver, extentTest, testName, testDataIteration, Ro["Connections"].ToString());
            ThinkTime(2);
            // generic.VerifyAddSalesAssistConnectionDenied(driver, extentTest, testName, testDataIteration);
            generic.verifyconnectoption(driver, extentTest, testName, testDataIteration);
            ThinkTime(2);

            //Log out and login as Country Manager
            generic.Logout(driver, extentTest, testName, testDataIteration);
            generic.DiscardChanges(driver, extentTest, testName, testDataIteration);
            generic.Loginafterlogout2(driver, extentTest, testName, testDataIteration, Ro["UserNameAD"].ToString(), Ro["PasswordAD"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());

            //Selecting  and opening particular Opp record
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "All Opportunities");
            generic.RecordGlobalSearchopportunity(driver, extentTest, testName, testDataIteration, reference);
            generic.SelectActiveCellContacts(driver, extentTest, testName, testDataIteration);

            //Verification of addition of Sales Assist Connection in Country Manager
            generic.SelectRelatedTab(driver, extentTest, testName, testDataIteration, Ro["Connections"].ToString());
            ThinkTime(2);
            generic.verifyconnectoption(driver, extentTest, testName, testDataIteration);
            // generic.verifyconnectoption(driver, extentTest, testName, testDataIteration);
            ThinkTime(2);

            //Log out
            login.Logout(driver, extentTest, testName, testDataIteration);
            //generic.DiscardChanges(driver, extentTest, testName, testDataIteration);

            //}
            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}
        }
        public static IEnumerable<object[]> RTA_8601()
        {
            foreach (DataRow row in getTestCaseList("SalesAdmin"))
            {
                yield return new object[] { row };
            }
        }

        /// <summary>
        /// CRM-3222
        ///Verify that Sales Admin can manually add Sales Assist connection to an Opp(Status:In progress)
        /// </summary>
        [TestCategory("Regression"), TestCategory("GlobalP11"), TestCategory("24Nov"), TestCategory("GlobalP11A")]
        [TestProperty("TestcaseID", "RTA-8601")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_8601), DynamicDataSourceType.Method)]
        public void RTA_8601_VerifySalesAdminCanManuallyAddSalesAssistConnectionToanOpp(DataRow Ro)
        {
            //try
            //{

            ////Login as Sales agent for creating an Opp record owned by other than sales admin user
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName1"].ToString(), Ro["Password1"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());

            ////Select Contacts entity and create new
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            string time = generic.GetSystemTimeInSecnew(driver, extentTest, testDataIteration, testName);
            generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);
            string contactname = generic.CreateNewContactEnterpriseSales(driver, extentTest, testDataIteration, testName, Ro["Contactname"].ToString(), time, Ro["Email"].ToString());

            //// Select opportunity tab and create New Record
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
            generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
            generic.CreateNewOpportunityEntetrprisewithprevcontact(driver, extentTest, testDataIteration, testName, Ro["TestChannel"].ToString(), Ro["TestMajorSource"].ToString(), Ro["TestMinorSource"].ToString(), contactname, Ro["spacesbrand"].ToString());
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());
            string reference = generic.GetReferenceIDOpportunity(driver, extentTest, testName, testDataIteration);

            //Log out and login as Sales Admin
            generic.Logout(driver, extentTest, testName, testDataIteration);
            generic.DiscardChanges(driver, extentTest, testName, testDataIteration);
            generic.Loginafterlogout2(driver, extentTest, testName, testDataIteration, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());

            ////Selecting  and opening particular Opp record
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
            generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "All Opportunities");
            generic.RecordGlobalSearchopportunity(driver, extentTest, testName, testDataIteration, reference);
            generic.SelectActiveCellContacts(driver, extentTest, testName, testDataIteration);


            ////Verification of addition of Sales Assist Connections 
            generic.SelectRelatedTab(driver, extentTest, testName, testDataIteration, Ro["Connections"].ToString());
            ThinkTime(2);
            //Verifyng SalesAssist Connection for a name is linked to Opp
            generic.VerifyAddSalesAssistConnectionAllowed(driver, extentTest, testName, testDataIteration, contactname, "1");
            //Verifyng SalesAssist Connection for a Sales user is linked to Opp
            generic.VerifyAddSalesAssistConnectionAllowed(driver, extentTest, testName, testDataIteration, "CRM Test3", "0");
            //Verifyng SalesAssist Connection for a Sales Director is linked to Opp
            generic.VerifyAddSalesAssistConnectionAllowed(driver, extentTest, testName, testDataIteration, "CRM Test3", "1");
            //Verifyng SalesAssist Connection for a Sales Manager is linked to Opp
            generic.VerifyAddSalesAssistConnectionAllowed(driver, extentTest, testName, testDataIteration, "CRM Test4", "2");
            //Verifyng SalesAssist Connection for a Sales Admin is linked to Opp
            generic.VerifyAddSalesAssistConnectionAllowed(driver, extentTest, testName, testDataIteration, "CRM Test5", "3");


            //Log out
            generic.Logout(driver, extentTest, testName, testDataIteration);

            //}
            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}
        }
        public static IEnumerable<object[]> Dummy_LoginTest1()
        {
            foreach (DataRow row in getTestCaseList("LoginValidation1"))
            {
                yield return new object[] { row };
            }
        }
        [DataTestMethod]
        [DynamicData(nameof(Dummy_LoginTest1), DynamicDataSourceType.Method)]
        public void Dummy_LoginTest(DataRow Ro)
        {
            try
            {

                // Login as IWG Sales agent and choose Sales
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());

                // Select the Sales Application
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, "Sales");

                //Navigate to Entity 'Lead'
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, "Leads");

                //logout
                login.Logout(driver, extentTest, testName, testDataIteration);
            }
            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }

        //Prior Test of each Entities //Sales Agent  //Contact


        public static IEnumerable<object[]> RTA_CreateCont()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        [TestCategory("PriorReg")]
        [DataTestMethod]
        [DynamicData(nameof(RTA_CreateCont), DynamicDataSourceType.Method)]
        public void RTA_CreateContPrior(DataRow Ro)
        {
            //try
            //{

            // Login as IWG Sales agent and choose Sales
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());

            //Select Contacts entity and create new
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
            generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);
            string now = DateTime.UtcNow.ToString("yyyy-MM-dd HH:mm:ss.fff", CultureInfo.InvariantCulture);
            generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
            String Contactname = generic.CreateNewContactPrior(driver, extentTest, testDataIteration, testName, Ro["LastName"].ToString() + now, Ro["TestOpportunityReadEdit2"].ToString(), Ro["User"].ToString(),
                Ro["CompanyName"].ToString(), Ro["Email"].ToString(), Ro["Mobilenumber"].ToString(), Ro["Mobilenumber"].ToString(), Ro["TestContactLanguage"].ToString(), Ro["City1"].ToString(), Ro["Country1"].ToString());
            login.Logout(driver, extentTest, testName, testDataIteration);
            //}
            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");
            //}
        }


        public static IEnumerable<object[]> PageTest1()
        {
            foreach (DataRow row in getTestCaseList("DirectSalesAgent"))
            {
                yield return new object[] { row };
            }
        }


        [TestProperty("TestcaseID", "RTA-Test")]
        [DataTestMethod]
        [DynamicData(nameof(PageTest1), DynamicDataSourceType.Method)]
        public void PageTest(DataRow Ro)
        {

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
            generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);
            generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
            AddLog(driver, extentTest, testName, testDataIteration, "Info", "1st page", "1stpage");
            generic.scrollDownOpportunityEnterprise(driver, extentTest, testName, testDataIteration);
            AddLog(driver, extentTest, testName, testDataIteration, "Info", "1st page", "2ndpage");
            generic.scrollDownOpportunityEnterprise(driver, extentTest, testName, testDataIteration);
            AddLog(driver, extentTest, testName, testDataIteration, "Info", "1st page", "3rdpage");
            generic.scrollDownOpportunityEnterprise(driver, extentTest, testName, testDataIteration);
            AddLog(driver, extentTest, testName, testDataIteration, "Info", "1st page", "4thpage");
            generic.scrollDownOpportunityEnterprise(driver, extentTest, testName, testDataIteration);
            AddLog(driver, extentTest, testName, testDataIteration, "Info", "1st page", "5thpage");
        }


        public static IEnumerable<object[]> RTA_16289()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }


        /// <summary>
        ///[CRM-3022]-Verify whether the communication request for tour confirmation is generated for schedule and re-schedule tour in UK English language.
        /// </summary>

        [TestCategory("Regression"), TestCategory("GlobalP11"), TestCategory("25Nov")]
        [TestProperty("TestcaseID", "RTA-16289")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_16289), DynamicDataSourceType.Method)]
        public void RTA_16289_commrequestfortouruk(DataRow Ro)
        {
            //try   
            //{
            string Date = DateTime.Today.ToString("dd-MM-yyyy");
            DateTime Now = DateTime.Now;
            string Time = Date + Convert.ToString(Now.Hour) + Convert.ToString(Now.Millisecond);
            string emailid = "AutomatCompany" + "@gmail.com";
            string now = System.DateTime.Now.ToString();

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());

            // Select Contacts entity and create new
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
            generic.CreateNewContactwithanylangandemail(driver, extentTest, testDataIteration, testName, "TestContact", now, emailid, Ro["CompanyName"].ToString(), Ro["UKEnglish"].ToString());
            string contactname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");

            //Creating new Opp
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
            string People = "13";
            generic.CreateNewOpportunityExistingcontact(driver, extentTest, testDataIteration, testName, Ro["P1TestChannel"].ToString(), Ro["MajorSource"].ToString(), Ro["P1Minorsource"].ToString(), contactname, Ro["BussinessCentre"].ToString(), People);

            // Refresh the page
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());
            ThinkTime(3);
            string oppname = Element(driver, Control("OppReference", "EnterpriseSales")).GetAttribute("title");

            //Booking a tour
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Button"].ToString());
            string centre = Ro["BussinessCentre"].ToString();
            generic.Bookaslot(driver, extentTest, testName, testDataIteration, contactname, oppname);
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());

            //Navigating to activities and verifying language in payload
            generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, Ro["Tab"].ToString());
            generic.selectRequiredActivitty(driver, extentTest, testName, testDataIteration, Ro["P1searchtourrequest"].ToString());

            generic.payloadnavigate(driver, extentTest, testName, testDataIteration);
            generic.payloadverification(driver, extentTest, testName, testDataIteration, Ro["P1languagecodeUK"].ToString(), "Alberta, Calgary - Crowfoot Centre", emailid, "");

            ////Verifying tour confirmation CR

            generic.Backtooppotunity(driver, extentTest, testName, testDataIteration);
            //Verifying Opportunity status and Language
            generic.VerifyStatusReason(driver, extentTest, testName, testDataIteration, "In Progress");
            //Navigating to activities and verifying Tour confirmation email
            generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, Ro["Tab"].ToString());
            generic.VerifyTourConfirmationCR(driver, extentTest, testName, testDataIteration, "Tour Confirmation Email");

            //Payload verification
            generic.payloadnavigate(driver, extentTest, testName, testDataIteration);
            generic.payloadverification(driver, extentTest, testName, testDataIteration, Ro["P1languagecodeUK"].ToString(), "Alberta, Calgary - Crowfoot Centre", emailid, "");

            //Re-schedule tour
            generic.Backtooppotunity(driver, extentTest, testName, testDataIteration);
            generic.SelectRelatedTab(driver, extentTest, testName, testDataIteration, Ro["P1RelatedField2"].ToString());
            generic.OpenExistingTour(driver, extentTest, testName, testDataIteration);
            generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);
            generic.RescheduleTour(driver, extentTest, testName, testDataIteration, "Form:pro_tour");
            generic.ResheduleBookaslot(driver, extentTest, testName, testDataIteration, contactname, "Alberta, Calgary - Crowfoot Centre");

            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "All Opportunities");
            generic.OpenRecordGlobalSearch(driver, extentTest, testName, testDataIteration, oppname);

            generic.SelectRelatedTab(driver, extentTest, testName, testDataIteration, Ro["P1RelatedField1"].ToString());
            generic.searchrequest(driver, extentTest, testName, testDataIteration, Ro["P1searchtourrequest"].ToString());
            generic.reschedulecommrequest(driver, extentTest, testName, testDataIteration);
            generic.tourcommrequestverify(driver, extentTest, testName, testDataIteration);
            generic.SelectingActiverequest(driver, extentTest, testName, testDataIteration);
            generic.payloadnavigate(driver, extentTest, testName, testDataIteration);
            generic.payloadverification(driver, extentTest, testName, testDataIteration, Ro["P1languagecodeUK"].ToString(), "Alberta, Calgary - Crowfoot Centre", emailid, "");

            ////Verifying tour confirmation CR

            generic.Backtooppotunity(driver, extentTest, testName, testDataIteration);
            //Navigating to activities and verifying language in payload
            generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, Ro["Tab"].ToString());
            generic.VerifyTourConfirmationCR(driver, extentTest, testName, testDataIteration, "Tour Confirmation Email");

            //Payload verification
            generic.payloadnavigate(driver, extentTest, testName, testDataIteration);
            generic.payloadverification(driver, extentTest, testName, testDataIteration, Ro["P1languagecodeUK"].ToString(), "Alberta, Calgary - Crowfoot Centre", emailid, "");

            generic.Logout(driver, extentTest, testName, testDataIteration);

            // //Login as area Director

            //generic.LoginafterlogoutOld(driver, extentTest, testName, testDataIteration, Ro["UserNameAD"].ToString(), Ro["PasswordAD"].ToString());
            generic.Loginafterlogout2(driver, extentTest, testName, testDataIteration, Ro["UserNameAD"].ToString(), Ro["PasswordAD"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());

            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, "Dashboards");
            //generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
            generic.SelectValuesFromDashboardDropDown(driver, extentTest, testName, testDataIteration, Ro["Role"].ToString());
            generic.OpenCalanderFromTourManagement(driver, extentTest, testName, testDataIteration);
            generic.SelectingCityDairyFromBTCalander(driver, extentTest, testName, testDataIteration, Ro["Reassigncity"].ToString());
            //generic.SelectingCentreFromBTCalander(driver, extentTest, testName, testDataIteration, Ro["ReassignCentre"].ToString());

            generic.DragAndDropToUnAvailableASM(driver, extentTest, testName, testDataIteration);

            driver.Close();

            //Navigating to Opportunity and selecting particular Opp record
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "All Opportunities");
            generic.OpenRecordGlobalSearch(driver, extentTest, testName, testDataIteration, oppname);

            //Navigating to activities and verifying language in payload

            generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, Ro["Tab"].ToString());

            generic.selectRequiredActivitty(driver, extentTest, testName, testDataIteration, Ro["AsmLargeTourReques"].ToString());

            //Verifying Payload fields.
            generic.payloadnavigate(driver, extentTest, testName, testDataIteration);
            generic.payloadverification(driver, extentTest, testName, testDataIteration, Ro["P1languagecodeUK"].ToString(), "Alberta, Calgary - Crowfoot Centre", emailid, "");


            //Logout
            login.Logout(driver, extentTest, testName, testDataIteration);






            //    }

            //        catch (Exception e)
            //        {

            //            AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}
        }

        public static IEnumerable<object[]> RTA_25385()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// CRM-4574, 8521
        ///  Verify whether while selecting a Broker contact on an Opportunity form it should populate the Broker Account with Broker Details.
        /// </summary>
        [TestCategory("HF"), TestCategory("HotFix")]
        [TestProperty("TestcaseID", "RTA-25385")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_25385), DynamicDataSourceType.Method)]
        public void RTA_25385_verylanguagereadonlyforIWGSalesagent(DataRow Ro)
        {
            //try
            //{
            string Date = DateTime.Today.ToString("dd-MM-yyyy");
            DateTime Now = DateTime.Now;
            string Time = Date + Convert.ToString(Now.Hour) + Convert.ToString(Now.Millisecond);
            string emailid = "AutomatCompany" + "@gmail.com";
            string now = System.DateTime.Now.ToString();

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());

            // Select Contacts entity and create new
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
            generic.CreateNewContactwithanylangandemail(driver, extentTest, testDataIteration, testName, "TestContact", now, emailid, Ro["CompanyName"].ToString(), Ro["UKEnglish"].ToString());
            string contactname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");

            // Open the Language field and verify field is readonly
            generic.Openandverifylanguagereadonly(driver, extentTest, testName, testDataIteration, Ro["Readonlymsg"].ToString());
            ThinkTime(3);

            //Creating new Opp
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
            string People = "13";
            generic.CreateNewOpportunityExistingcontact(driver, extentTest, testDataIteration, testName, Ro["P1TestChannel"].ToString(), Ro["MajorSource"].ToString(), Ro["P1Minorsource"].ToString(), contactname, Ro["BussinessCentre"].ToString(), People);

            // Refresh the page
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());
            ThinkTime(3);

            // Open the Language field and verify field is readonly
            generic.Openandverifylanguagereadonly(driver, extentTest, testName, testDataIteration, Ro["Readonlymsg"].ToString());
            ThinkTime(3);

            //  Login after logout
            generic.Loginafterlogout(driver, extentTest, testName, testDataIteration, Ro["UserName1"].ToString(), Ro["Password1"].ToString());

            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity3"].ToString());
            generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);

            //First Lead
            string firstleadname = generic.CreateLeadDirectsales(driver, extentTest, testName, testDataIteration, "Lead" + Time, Ro["Email"].ToString(), Ro["Product"].ToString(), "New", Ro["Source"].ToString(), Ro["MajorSource"].ToString(), Ro["MinorSource"].ToString(), Ro["BussinessCentre"].ToString());

            // Qualify first lead          
            generic.NavigateToRelatedTabEntitiesLead(driver, extentTest, testName, testDataIteration, Ro["RelatedTabEntity"].ToString());
            generic.OppSelect(driver, extentTest, testName, testDataIteration);

            // Open the Language field and verify field is readonly
            generic.Openandverifylanguagereadonly(driver, extentTest, testName, testDataIteration, Ro["Readonlymsg"].ToString());
            ThinkTime(3);

            //Logout
            login.Logout(driver, extentTest, testName, testDataIteration);




            //  }

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}
        }

        public static IEnumerable<object[]> RTA_23782()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }

        /// <summary>
        ///[CRM-7864]-
        /// </summary>

        [TestCategory("HF"), TestCategory("HotFix"), TestCategory("HFrerun")]
        [TestProperty("TestcaseID", "RTA-23782")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_23782), DynamicDataSourceType.Method)]
        public void RTA_23782_Dashboard_VerifyToursbookedthismonthlist(DataRow Ro)
        {
            //try
            //{
            string Date = DateTime.Today.ToString("dd-MM-yyyy");
            DateTime Now = DateTime.Now;
            string Time = Date + Convert.ToString(Now.Hour) + Convert.ToString(Now.Millisecond);
            string emailid = "AutomatCompany" + "@gmail.com";
            string now = System.DateTime.Now.ToString();

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());

            //// Select Contacts entity and create new
            //generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
            //generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
            //generic.CreateNewContactwithanylangandemail(driver, extentTest, testDataIteration, testName, "TestContact", now, emailid, Ro["CompanyName"].ToString(), Ro["UKEnglish"].ToString());
            //string contactname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");

            ////Creating new Opp
            //generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
            //generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            //generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
            //string People = "13";
            //generic.CreateNewOpportunityExistingcontact(driver, extentTest, testDataIteration, testName, Ro["P1TestChannel"].ToString(), Ro["MajorSource"].ToString(), Ro["P1Minorsource"].ToString(), contactname, Ro["BussinessCentre"].ToString(), People);

            //// Refresh the page
            //generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());
            //ThinkTime(3);
            //string oppname = Element(driver, Control("OppReference", "EnterpriseSales")).GetAttribute("title");

            ////Booking a tour
            //generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Button"].ToString());
            //string centre = "Oslo, Spaces Nydalen";
            //generic.Bookaslot(driver, extentTest, testName, testDataIteration, contactname, centre);
            //generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());

            //// Open the tour and get name
            //generic.SelectRelatedTab(driver, extentTest, testName, testDataIteration, Ro["P1RelatedField2"].ToString());
            //generic.OpenExistingTour(driver, extentTest, testName, testDataIteration);
            //generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
            //string Tourname = Element(driver, Control("Tourtitle", "EnterpriseSales")).GetAttribute("innerText");

            // Select Dashboards
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity5"].ToString());
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);

            // Select IWG Direct Agent Performance dashboard
            generic.SelectValuesFromDashboardDropDown(driver, extentTest, testName, testDataIteration, "IWG Direct Agent Performance dashboard");
            //generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);


            // Verify My Tours
            generic.selectDashMyToursthismonth(driver, extentTest, testName, testDataIteration);

            // Verify the advanced filters row 1 
            generic.DashAdvFilters(driver, extentTest, testName, testDataIteration, "Date Created", "This month", "Apply");

            // Verify the advanced filters row 2
            generic.DashAdvFilters(driver, extentTest, testName, testDataIteration, "TourBookingCreatedBy", "Equals current user", "Apply");

            //// Search for the new tour
            //generic.SearchToursinDb(driver, extentTest, testName, testDataIteration, Tourname);
            //string Tourname1 = generic.selectmargin(driver, extentTest, testName, testDataIteration);



            //if (Tourname == Tourname1)
            //{
            //    AddLog(driver, extentTest, testName, testDataIteration, "Pass", "Tour created today is displayed", "Tour visible on DB");

            //    // Closed Tour

            //    generic.NavigateToRibbonButtonActivities(driver, extentTest, testDataIteration, testName, "Mark Complete");
            //    generic.OKButton(driver, extentTest, testDataIteration, testName);
            //    AddLog(driver, extentTest, testName, testDataIteration, "Pass", "Tour closed today is displayed", "Tour closed on DB");
            //}

            //else
            //{
            //    Assert.Fail("Record Opened is incorrect");
            //}

            //Logout
            login.Logout(driver, extentTest, testName, testDataIteration);


            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}
        }

        public static IEnumerable<object[]> RTA_25877()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }

        /// <summary>
        ///[CRM-8716]-
        /// </summary>

        [TestCategory("HFrerun"), TestCategory("HotFix")]
        [TestProperty("TestcaseID", "RTA-25877")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_25877), DynamicDataSourceType.Method)]
        public void RTA_25877_Verifycentretimeandusertimeiscorrect(DataRow Ro)
        {
            try
            {
                string Date = DateTime.Today.ToString("dd-MM-yyyy");
                DateTime Now = DateTime.Now;
                string Time = Date + Convert.ToString(Now.Hour) + Convert.ToString(Now.Millisecond);
                string emailid = "AutomatCompany" + "@gmail.com";
                string now = System.DateTime.Now.ToString();

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());

                // Select Contacts entity and create new
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
                generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
                generic.CreateNewContactwithanylangandemail(driver, extentTest, testDataIteration, testName, "TestContact", now, emailid, Ro["CompanyName"].ToString(), Ro["UKEnglish"].ToString());
                string contactname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");

                //Creating new Opp
                generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
                string People = "13";
                string centre = "Oslo, Spaces Nydalen";
                generic.CreateNewOpportunityExistingcontact(driver, extentTest, testDataIteration, testName, Ro["P1TestChannel"].ToString(), Ro["MajorSource"].ToString(), Ro["P1Minorsource"].ToString(), contactname, centre, People);

                // Refresh the page
                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());
                ThinkTime(3);
                string oppname = Element(driver, Control("OppReference", "EnterpriseSales")).GetAttribute("title");

                //Booking a tour
                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Button"].ToString());

                generic.Bookaslot(driver, extentTest, testName, testDataIteration, contactname, centre);
                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());

                // Open the tour and get name
                generic.SelectRelatedTab(driver, extentTest, testName, testDataIteration, Ro["P1RelatedField2"].ToString());
                generic.OpenExistingTour(driver, extentTest, testName, testDataIteration);
                generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
                string Tourname = Element(driver, Control("Tourtitle", "EnterpriseSales")).GetAttribute("innerText");

                // Verify the user start/end times and centre scheduled tour times inside the Tour request
                generic.Verifytimezoneuserandcentre(driver, extentTest, testName, testDataIteration);

                ThinkTime(10);
                //Logout
                login.Logout(driver, extentTest, testName, testDataIteration);


            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }

        public static IEnumerable<object[]> RTA_23779()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }

        /// <summary>
        ///[CRM-7864]-
        /// </summary>

        [TestCategory("Regression"), TestCategory("HotFix"), TestCategory("HF")]
        [TestProperty("TestcaseID", "RTA-23779")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_23779), DynamicDataSourceType.Method)]
        public void RTA__23779Dashboard_VerifyToursbookedthismonthchart(DataRow Ro)
        {
            //try
            //{
            string Date = DateTime.Today.ToString("dd-MM-yyyy");
            DateTime Now = DateTime.Now;
            string Time = Date + Convert.ToString(Now.Hour) + Convert.ToString(Now.Millisecond);
            string emailid = "AutomatCompany" + "@gmail.com";
            string now = System.DateTime.Now.ToString();

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());

            //// Select Contacts entity and create new
            //generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
            //generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
            //generic.CreateNewContactwithanylangandemail(driver, extentTest, testDataIteration, testName, "TestContact", now, emailid, Ro["CompanyName"].ToString(), Ro["UKEnglish"].ToString());
            //string contactname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");

            ////Creating new Opp
            //generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
            //generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            //generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
            //string People = "13";
            //generic.CreateNewOpportunityExistingcontact(driver, extentTest, testDataIteration, testName, Ro["P1TestChannel"].ToString(), Ro["MajorSource"].ToString(), Ro["P1Minorsource"].ToString(), contactname, Ro["BussinessCentre"].ToString(), People);

            //// Refresh the page
            //generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());
            //ThinkTime(3);
            //string oppname = Element(driver, Control("OppReference", "EnterpriseSales")).GetAttribute("title");

            ////Booking a tour
            //generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Button"].ToString());
            //string centre = "Oslo, Spaces Nydalen";
            //generic.Bookaslot(driver, extentTest, testName, testDataIteration, contactname, centre);
            //generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());

            //// Open the tour and get name
            //generic.SelectRelatedTab(driver, extentTest, testName, testDataIteration, Ro["P1RelatedField2"].ToString());
            //generic.OpenExistingTour(driver, extentTest, testName, testDataIteration);
            //generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
            //string Tourname = Element(driver, Control("Tourtitle", "EnterpriseSales")).GetAttribute("innerText");

            // Select Dashboards
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity5"].ToString());
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);

            // Select IWG Direct Agent Performance dashboard
            generic.SelectValuesFromDashboardDropDown(driver, extentTest, testName, testDataIteration, "IWG Direct Agent Performance dashboard");
            //generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);

            // Verify My Tours - Chart          
            generic.Selectdashdropdownvalue(driver, extentTest, testName, testDataIteration, "My Tours Booked for this calendar month(Chart with Completed vs Scheduled tours)");

            // Verify the advanced filters row 1 
            generic.DashAdvFilters(driver, extentTest, testName, testDataIteration, "Date Created", "This month", "Apply");

            // Verify the advanced filters row 2
            generic.DashAdvFilters(driver, extentTest, testName, testDataIteration, "TourBookingCreatedBy", "Equals current user", "Apply");


            //  // Search for the new tour
            //  generic.SearchToursinDb(driver, extentTest, testName, testDataIteration, Tourname);
            //  generic.SelectingActiveCell(driver, extentTest, testName, testDataIteration);

            //  string Tourname1 = Element(driver, Control("Tourtitle", "EnterpriseSales")).GetAttribute("innerText");
            ////  string TourContact = Element(driver, Control("Contactnamefromtour", "Tour")).GetAttribute("innerText");

            //  if (Tourname == Tourname1)
            //  {
            //      AddLog(driver, extentTest, testName, testDataIteration, "Pass", "Tour created today is displayed", "Tour visible on DB");

            //  }

            //  else
            //  {
            //      Assert.Fail("Record Opened is incorrect");
            //  }


            // Verify My Tours - last month
            driver.Navigate().Back();
            // driver.Navigate().Back();
            generic.Selectdashdropdownvalue(driver, extentTest, testName, testDataIteration, "My Tours Booked for last calendar month");

            // Verify the advanced filters row 1 
            generic.DashAdvFilters(driver, extentTest, testName, testDataIteration, "Date Created", "Last month", "Apply");

            // Verify the advanced filters row 2
            generic.DashAdvFilters(driver, extentTest, testName, testDataIteration, "TourBookingCreatedBy", "Equals current user", "Apply");


            //// Close Tour
            //generic.CloseTourinDb(driver, extentTest, testName, testDataIteration, Tourname);

            //Logout
            login.Logout(driver, extentTest, testName, testDataIteration);


            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}
        }

        public static IEnumerable<object[]> RTA_25465()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }

        /// <summary>
        ///[CRM-7866]-
        /// </summary>

        [TestCategory("HF"), TestCategory("HotFix")]
        [TestProperty("TestcaseID", "RTA-25465")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_25465), DynamicDataSourceType.Method)]
        public void RTA__25465Dashboard_VerifycompletedToursbookedthismonth(DataRow Ro)
        {
            try
            {
                string Date = DateTime.Today.ToString("dd-MM-yyyy");
                DateTime Now = DateTime.Now;
                string Time = Date + Convert.ToString(Now.Hour) + Convert.ToString(Now.Millisecond);
                string emailid = "AutomatCompany" + "@gmail.com";
                string now = System.DateTime.Now.ToString();

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());

                // Select Dashboards
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity5"].ToString());
                generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);

                // Select IWG Direct Agent Performance dashboard
                generic.SelectValuesFromDashboardDropDown(driver, extentTest, testName, testDataIteration, "IWG Direct Agent Performance dashboard");


                // Verify My Tours      

                generic.scrollMiddleDashboard(driver, extentTest, testName, testDataIteration, "Scroll");
                //generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
                // Verify filter for My Completed Tours for this calendar month
                generic.Dashcompletedtourthismonth(driver, extentTest, testName, testDataIteration);

                // Verify the advanced filters row 2
                generic.DashAdvFiltersforcompletedtours(driver, extentTest, testName, testDataIteration, "TourBookingCreatedBy", "Equals current user", "Apply");

                // Verify the advanced filters row 4
                generic.DashAdvFiltersforcompletedtours(driver, extentTest, testName, testDataIteration, "Tour End Time", "This month", "Apply");

                driver.Navigate().Back();
                //generic.scrollMiddleDashboard(driver, extentTest, testName, testDataIteration, "Scroll");
                generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);
                generic.scrollMiddleDashboard(driver, extentTest, testName, testDataIteration, "Scroll");
                // Verify fiter for My Completed Tours for last calendar month
                generic.Dashcompletedtourlastmonth1(driver, extentTest, testName, testDataIteration, "My Completed Tours for this calendar month", "My Completed Tours for last calendar month");

                // Verify the advanced filters row 2
                generic.DashAdvFiltersforcompletedtours(driver, extentTest, testName, testDataIteration, "TourBookingCreatedBy", "Equals current user", "Apply");

                // Verify the advanced filters row 4
                generic.DashAdvFiltersforcompletedtours(driver, extentTest, testName, testDataIteration, "Tour End Time", "Last month", "Apply");


                //Logout
                login.Logout(driver, extentTest, testName, testDataIteration);


            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }

        public static IEnumerable<object[]> RTA_16292()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// [CRM-3022, 8716]-Verify whether the communication request for tour confirmation is generated for schedule and re-schedule tour in Norwegian language.
        /// </summary>

        [TestCategory("Regression"), TestCategory("GlobalP11"), TestCategory("25Nov"), TestCategory("HF")]
        [TestProperty("TestcaseID", "RTA-16292")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_16292), DynamicDataSourceType.Method)]
        public void RTA_16292_commrequestfortournorwegian(DataRow Ro)
        {
            //try
            //{

            string Date = DateTime.Today.ToString("dd-MM-yyyy");
            DateTime Now = DateTime.Now;
            string Time = Date + Convert.ToString(Now.Hour) + Convert.ToString(Now.Millisecond);
            string emailid = "AutomatCompany" + "@gmail.com";
            string now = System.DateTime.Now.ToString();

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());

            // Select Contacts entity and create new
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
            generic.CreateNewContactwithanylangandemail(driver, extentTest, testDataIteration, testName, "TestContact", now, emailid, Ro["CompanyName"].ToString(), Ro["Norwegian"].ToString());
            string contactname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");

            //Creating new Opp
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
            string People = "13";
            string centre = "Oslo, Spaces Nydalen";
            generic.CreateNewOpportunityExistingcontact(driver, extentTest, testDataIteration, testName, Ro["P1TestChannel"].ToString(), Ro["MajorSource"].ToString(), Ro["P1Minorsource"].ToString(), contactname, centre, People);

            // Refresh the page
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());
            ThinkTime(3);
            string oppname = Element(driver, Control("OppReference", "EnterpriseSales")).GetAttribute("title");

            //Booking a tour
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Button"].ToString());
            //string centre = "Oslo, Spaces Nydalen";
            generic.Bookaslot(driver, extentTest, testName, testDataIteration, contactname, oppname);
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());

            //Navigating to activities and verifying language in payload
            generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, Ro["Tab"].ToString());
            generic.selectRequiredActivitty(driver, extentTest, testName, testDataIteration, Ro["P1searchtourrequest"].ToString());

            generic.payloadnavigate(driver, extentTest, testName, testDataIteration);
            generic.payloadverification(driver, extentTest, testName, testDataIteration, Ro["P1languagecodenor"].ToString(), "Alberta, Calgary - Crowfoot Centre", emailid, "");
            //Re-schedule tour
            generic.Backtooppotunity(driver, extentTest, testName, testDataIteration);
            generic.SelectRelatedTab(driver, extentTest, testName, testDataIteration, Ro["P1RelatedField2"].ToString());
            generic.OpenExistingTour(driver, extentTest, testName, testDataIteration);
            generic.RescheduleTour(driver, extentTest, testName, testDataIteration, "");
            generic.ResheduleBookaslot(driver, extentTest, testName, testDataIteration, contactname, oppname);

            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "All Opportunities");
            generic.OpenRecordGlobalSearch(driver, extentTest, testName, testDataIteration, oppname);

            generic.SelectRelatedTab(driver, extentTest, testName, testDataIteration, Ro["P1RelatedField1"].ToString());
            generic.searchrequest(driver, extentTest, testName, testDataIteration, Ro["P1searchtourrequest"].ToString());
            generic.reschedulecommrequest(driver, extentTest, testName, testDataIteration);
            generic.tourcommrequestverify(driver, extentTest, testName, testDataIteration);
            generic.SelectingActiverequest(driver, extentTest, testName, testDataIteration);
            generic.payloadnavigate(driver, extentTest, testName, testDataIteration);
            generic.payloadverification(driver, extentTest, testName, testDataIteration, Ro["P1languagecodenor"].ToString(), "Alberta, Calgary - Crowfoot Centre", emailid, "");

            generic.Backtooppotunity(driver, extentTest, testName, testDataIteration);
            // Open the tour and get name
            generic.SelectRelatedTab(driver, extentTest, testName, testDataIteration, Ro["P1RelatedField2"].ToString());
            generic.OpenExistingTour(driver, extentTest, testName, testDataIteration);
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
            string Tourname = Element(driver, Control("Tourtitle", "EnterpriseSales")).GetAttribute("innerText");

            // Verify the user start/end times and centre scheduled tour times inside the Tour request
            generic.Verifytimezoneuserandcentre(driver, extentTest, testName, testDataIteration);


            login.Logout(driver, extentTest, testName, testDataIteration);
            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}
        }
        public static IEnumerable<object[]> RTA_16449()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        // <summary>
        ///TEST[CRM-2792]Verify whether the Communication request for "No Answer - Day 1" is created for the opportunity if initial contact is No
        /// </summary>
        [TestCategory("Regression"), TestCategory("GlobalP11"), TestCategory("0911")]
        [TestProperty("TestcaseID", "RTA-16449")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_16449), DynamicDataSourceType.Method)]
        public void RTA_16449_verifyday1nocontact(DataRow Ro)
        {
            //try
            //{
            string Date = DateTime.Today.ToString("dd-MM-yyyy");
            DateTime Now = DateTime.Now;
            string Time = Date + Convert.ToString(Now.Hour) + Convert.ToString(Now.Millisecond);
            string emailid = "AutomatCompany" + Time + "@gmail.com";

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            string now = System.DateTime.Now.ToString();

            // Select Contacts entity and create new
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
            generic.CreateNewContactITSaleswithlanguageandemail(driver, extentTest, testDataIteration, testName, "TestContact", now, emailid, Ro["CompanyName"].ToString());
            string contactname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");

            //Creating new Opp
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
            generic.CreateNewOpportunityExistingcontact(driver, extentTest, testDataIteration, testName, Ro["P1TestChannel"].ToString(), Ro["MajorSource"].ToString(), Ro["P1Minorsource"].ToString(), contactname, Ro["Londoncentre"].ToString(), "8");
            generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);
            string oppname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");


            ThinkTime(20);
            // Refresh the page
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());



            ThinkTime(3);
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());
            ThinkTime(2);

            generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, Ro["Tab"].ToString());

            //Verifying Opportunity status and Language

            generic.selectRequiredActivitty(driver, extentTest, testName, testDataIteration, Ro["No Answer - Day 1"].ToString());

            //Verifying Payload fields
            generic.payloadnavigate(driver, extentTest, testName, testDataIteration);
            generic.payloadverificationwithphoneCon1(driver, extentTest, testName, testDataIteration, Ro["Languagecode"].ToString(), Ro["regusbrand"].ToString(), emailid, Ro["payloadphone"].ToString(), Ro["TeamEmailqa"].ToString());


            login.Logout(driver, extentTest, testName, testDataIteration);
            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}

        }
        public static IEnumerable<object[]> RTA_16450()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        // <summary>
        ///TEST[CRM-2792]Verify whether the Communication request for "No Answer - Day 1" is created for the opportunity if initial contact is Yes
        /// </summary>
        [TestCategory("Regression"), TestCategory("GlobalP11")]
        [TestProperty("TestcaseID", "RTA-16450")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_16450), DynamicDataSourceType.Method)]
        public void RTA_16450_verifyday1contacted(DataRow Ro)
        {
            //try
            //{
            string Date = DateTime.Today.ToString("dd-MM-yyyy");
            DateTime Now = DateTime.Now;
            string Time = Date + Convert.ToString(Now.Hour) + Convert.ToString(Now.Millisecond);
            string emailid = "AutomatCompany" + Time + "@gmail.com";

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            string now = System.DateTime.Now.ToString();
            generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);

            // Select Contacts entity and create new
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
            generic.CreateNewContactITSaleswithlanguageandemail(driver, extentTest, testDataIteration, testName, "TestContact", now, emailid, Ro["CompanyName"].ToString());
            string contactname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");

            //Creating new Opp
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
            generic.CreateNewOpportunityEntetrprisewithprevcontact(driver, extentTest, testDataIteration, testName, Ro["TestChannel"].ToString(), Ro["TestMajorSource"].ToString(), Ro["TestMinorSource"].ToString(), contactname, Ro["spacesbrand"].ToString());
            string oppname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");
            ThinkTime(2);
            WaitUntil(driver, Control("FieldVerification2", "Refresh", "Opportunity"), 120);

            // Refresh the page
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());



            ThinkTime(3);
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());
            ThinkTime(2);
            generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, Ro["Tab"].ToString());

            generic.Verifyactivitynotpresent(driver, extentTest, testName, testDataIteration, Ro["No Answer - Day 1"].ToString());

            login.Logout(driver, extentTest, testName, testDataIteration);
            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}

        }

        public static IEnumerable<object[]> Test147()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        //Cancel the Tour already booked
        [TestCategory("CheckSecurityRoles1")]
        [TestProperty("TestcaseID", "RTA-Test1")]

        [DataTestMethod]
        [DynamicData(nameof(Test147), DynamicDataSourceType.Method)]
        public void RTA_BookTourCancel(DataRow Ro)
        {
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.CancelTour(driver, extentTest, testName, testDataIteration);
            login.Logout(driver, extentTest, testName, testDataIteration);
        }


        public static IEnumerable<object[]> TestFor()
        {
            foreach (DataRow row in getTestCaseList("SecurityRoles"))
            {
                yield return new object[] { row };
            }
        }
        //Check Security roles-Test1
        [TestCategory("CheckSecurityRoles1")]
        [TestProperty("TestcaseID", "RTA-val")]

        [DataTestMethod]
        [DynamicData(nameof(TestFor), DynamicDataSourceType.Method)]
        public void RTA_CheckSecurityRoles_Testval(DataRow Ro)
        {
            //try
            //{
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            // Choose Settings > Advanced Settings
            generic.MoveToAdvanceSettings(driver, extentTest, testName, testDataIteration);
            // Select Settings> Security> Teams
            generic.MoveToTeamAdvancedSettingsRolesNew(driver, extentTest, testName, testDataIteration);
            //Check the Roles
            generic.CheckRolesReg(driver, extentTest, testName, testDataIteration, Ro["SearchUserName1"].ToString(), Ro["IWGFieldSalesAgent"].ToString(), Ro["IWGMinimumSecurity"].ToString(), Ro["IWGTeamFieldSales"].ToString());
            ////login.Logout(driver, extentTest, testName, testDataIteration);

            //}
            //catch (Exception e)
            //{
            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}
        }
        public static IEnumerable<object[]> Test149()
        {
            foreach (DataRow row in getTestCaseList("SecurityRoles"))
            {
                yield return new object[] { row };
            }
        }
        //Check Security roles-Test1
        [TestCategory("CheckSecurityRoles")]
        [TestProperty("TestcaseID", "RTA-Test1")]

        [DataTestMethod]
        [DynamicData(nameof(Test149), DynamicDataSourceType.Method)]
        public void RTA_CheckSecurityRoles_Test1(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                // Choose Settings > Advanced Settings
                generic.MoveToAdvanceSettings(driver, extentTest, testName, testDataIteration);
                // Select Settings> Security> Teams
                generic.MoveToTeamAdvancedSettingsRoles(driver, extentTest, testName, testDataIteration);
                //Check the Roles
                generic.ValidateRolewith3(driver, extentTest, testName, testDataIteration, Ro["SearchUserName1"].ToString(), Ro["IWGFieldSalesAgent"].ToString(), Ro["IWGMinimumSecurity"].ToString(), Ro["IWGTeamFieldSales"].ToString());
                ////login.Logout(driver, extentTest, testName, testDataIteration);

            }
            catch (Exception e)
            {
                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }
        public static IEnumerable<object[]> Test150()
        {
            foreach (DataRow row in getTestCaseList("SecurityRoles"))
            {
                yield return new object[] { row };
            }
        }
        //Check Security roles-Test2
        [TestCategory("CheckSecurityRoles")]
        [TestProperty("TestcaseID", "RTA-Test2")]

        [DataTestMethod]
        [DynamicData(nameof(Test150), DynamicDataSourceType.Method)]
        public void RTA_CheckSecurityRoles_Test2(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                // Choose Settings > Advanced Settings
                generic.MoveToAdvanceSettings(driver, extentTest, testName, testDataIteration);
                // Select Settings> Security> Teams
                generic.MoveToTeamAdvancedSettingsRoles(driver, extentTest, testName, testDataIteration);
                //Check the Roles
                generic.ValidateRolewith3(driver, extentTest, testName, testDataIteration, Ro["SearchUserName2"].ToString(), Ro["IWGSalesTourManagement"].ToString(), Ro["IWGMinimumSecurity"].ToString(), Ro["IWGTeamFieldSales"].ToString());
                // //login.Logout(driver, extentTest, testName, testDataIteration);

            }
            catch (Exception e)
            {
                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }
        public static IEnumerable<object[]> Test151()
        {
            foreach (DataRow row in getTestCaseList("SecurityRoles"))
            {
                yield return new object[] { row };
            }
        }
        //Check Security roles-Test3
        [TestCategory("CheckSecurityRoles")]
        [TestProperty("TestcaseID", "RTA-Test3")]

        [DataTestMethod]
        [DynamicData(nameof(Test151), DynamicDataSourceType.Method)]
        public void RTA_CheckSecurityRoles_Test3(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                // Choose Settings > Advanced Settings
                generic.MoveToAdvanceSettings(driver, extentTest, testName, testDataIteration);
                // Select Settings> Security> Teams
                generic.MoveToTeamAdvancedSettingsRoles(driver, extentTest, testName, testDataIteration);
                //Check the Roles
                generic.ValidateRolewith6(driver, extentTest, testName, testDataIteration, Ro["SearchUserName3"].ToString(), Ro["InteractionSync"].ToString(), Ro["IWGInternalSalesAgent"].ToString(), Ro["IWGMinimumSecurity"].ToString(), Ro["IWGSalesTourManagement"].ToString(), Ro["IWGTeamInternalSales"].ToString(), Ro["IWGTeamInternalSalesminimum"].ToString());
                ////login.Logout(driver, extentTest, testName, testDataIteration);
            }
            catch (Exception e)
            {
                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }
        public static IEnumerable<object[]> Test152()
        {
            foreach (DataRow row in getTestCaseList("SecurityRoles"))
            {
                yield return new object[] { row };
            }
        }
        //Check Security roles-Test4
        [TestCategory("CheckSecurityRoles")]
        [TestProperty("TestcaseID", "RTA-Test4")]

        [DataTestMethod]
        [DynamicData(nameof(Test152), DynamicDataSourceType.Method)]
        public void RTA_CheckSecurityRoles_Test4(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                // Choose Settings > Advanced Settings
                generic.MoveToAdvanceSettings(driver, extentTest, testName, testDataIteration);
                // Select Settings> Security> Teams
                generic.MoveToTeamAdvancedSettingsRoles(driver, extentTest, testName, testDataIteration);
                //Check the Roles
                generic.ValidateRolewith6(driver, extentTest, testName, testDataIteration, Ro["SearchUserName4"].ToString(), Ro["InteractionSync"].ToString(), Ro["IWGSalesCountryManager-Area Director"].ToString(), Ro["IWGMinimumSecurity"].ToString(), Ro["IWGSalesTourManagement"].ToString(), Ro["IWGTeamInternalSales"].ToString(), Ro["IWGTeamInternalSalesminimum"].ToString());
                ////login.Logout(driver, extentTest, testName, testDataIteration);

            }
            catch (Exception e)
            {
                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }

        public static IEnumerable<object[]> Test157()
        {
            foreach (DataRow row in getTestCaseList("SecurityRoles"))
            {
                yield return new object[] { row };
            }
        }
        //Check Security roles-Test5
        [TestCategory("CheckSecurityRoles")]
        [TestProperty("TestcaseID", "RTA-Test5")]

        [DataTestMethod]
        [DynamicData(nameof(Test157), DynamicDataSourceType.Method)]
        public void RTA_CheckSecurityRoles_Test5(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                // Choose Settings > Advanced Settings
                generic.MoveToAdvanceSettings(driver, extentTest, testName, testDataIteration);
                // Select Settings> Security> Teams
                generic.MoveToTeamAdvancedSettingsRoles(driver, extentTest, testName, testDataIteration);
                //Check the Roles
                generic.ValidateRolewith6(driver, extentTest, testName, testDataIteration, Ro["SearchUserName5"].ToString(), Ro["InteractionSync"].ToString(), Ro["IWGSalesAdministrator"].ToString(), Ro["IWGMinimumSecurity"].ToString(), Ro["IWGSalesTourManagement"].ToString(), Ro["IWGTeamInternalSales"].ToString(), Ro["IWGTeamInternalSalesminimum"].ToString());
                ////login.Logout(driver, extentTest, testName, testDataIteration);

            }
            catch (Exception e)
            {
                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }
        public static IEnumerable<object[]> Test153()
        {
            foreach (DataRow row in getTestCaseList("SecurityRoles"))
            {
                yield return new object[] { row };
            }
        }
        //Check Security roles-Test6
        [TestCategory("CheckSecurityRoles")]
        [TestProperty("TestcaseID", "RTA-Test6")]

        [DataTestMethod]
        [DynamicData(nameof(Test153), DynamicDataSourceType.Method)]
        public void RTA_CheckSecurityRoles_Test6(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                // Choose Settings > Advanced Settings
                generic.MoveToAdvanceSettings(driver, extentTest, testName, testDataIteration);
                // Select Settings> Security> Teams
                generic.MoveToTeamAdvancedSettingsRoles(driver, extentTest, testName, testDataIteration);
                //Check the Roles
                generic.ValidateRolewith3(driver, extentTest, testName, testDataIteration, Ro["SearchUserName6"].ToString(), Ro["D&BOptimizerUser"].ToString(), Ro["IWGMinimumSecurity"].ToString(), Ro["IWGSalesEnterpriseAccountManager"].ToString());
                ////login.Logout(driver, extentTest, testName, testDataIteration);
            }
            catch (Exception e)
            {
                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }
        public static IEnumerable<object[]> Test155()
        {
            foreach (DataRow row in getTestCaseList("SecurityRoles"))
            {
                yield return new object[] { row };
            }
        }
        //Check Security roles-Test7
        [TestCategory("CheckSecurityRoles")]
        [TestProperty("TestcaseID", "RTA-Test7")]

        [DataTestMethod]
        [DynamicData(nameof(Test155), DynamicDataSourceType.Method)]
        public void RTA_CheckSecurityRoles_Test7(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                // Choose Settings > Advanced Settings
                generic.MoveToAdvanceSettings(driver, extentTest, testName, testDataIteration);
                // Select Settings> Security> Teams
                generic.MoveToTeamAdvancedSettingsRoles(driver, extentTest, testName, testDataIteration);
                //Check the Roles
                generic.ValidateRolewith3(driver, extentTest, testName, testDataIteration, Ro["SearchUserName7"].ToString(), Ro["D&BOptimizerUser"].ToString(), Ro["IWGMinimumSecurity"].ToString(), Ro["IWGSalesEnterpriseManager"].ToString());
                ////login.Logout(driver, extentTest, testName, testDataIteration);
            }
            catch (Exception e)
            {
                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }
        public static IEnumerable<object[]> Test154()
        {
            foreach (DataRow row in getTestCaseList("SecurityRoles"))
            {
                yield return new object[] { row };
            }
        }
        //Check Security roles-Test8
        [TestCategory("CheckSecurityRoles")]
        [TestProperty("TestcaseID", "RTA-Test8")]

        [DataTestMethod]
        [DynamicData(nameof(Test154), DynamicDataSourceType.Method)]
        public void RTA_CheckSecurityRoles_Test8(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                // Choose Settings > Advanced Settings
                generic.MoveToAdvanceSettings(driver, extentTest, testName, testDataIteration);
                // Select Settings> Security> Teams
                generic.MoveToTeamAdvancedSettingsRoles(driver, extentTest, testName, testDataIteration);
                //Check the Roles
                generic.ValidateRole(driver, extentTest, testName, testDataIteration, Ro["SearchUserName8"].ToString(), Ro["IWGITSalesUser"].ToString(), Ro["IWGMinimumSecurity"].ToString());
                ////login.Logout(driver, extentTest, testName, testDataIteration);
            }
            catch (Exception e)
            {
                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }

        public static IEnumerable<object[]> Test156()
        {
            foreach (DataRow row in getTestCaseList("SecurityRoles"))
            {
                yield return new object[] { row };
            }
        }
        //Check Security roles-Test9
        [TestCategory("CheckSecurityRoles")]
        [TestProperty("TestcaseID", "RTA-Test9")]

        [DataTestMethod]
        [DynamicData(nameof(Test156), DynamicDataSourceType.Method)]
        public void RTA_CheckSecurityRoles_Test9(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                // Choose Settings > Advanced Settings
                generic.MoveToAdvanceSettings(driver, extentTest, testName, testDataIteration);
                // Select Settings> Security> Teams
                generic.MoveToTeamAdvancedSettingsRoles(driver, extentTest, testName, testDataIteration);
                //Check the Roles
                generic.ValidateRolewith3(driver, extentTest, testName, testDataIteration, Ro["SearchUserName9"].ToString(), Ro["IWGMinimumSecurity"].ToString(), Ro["IWGExcelAccess"].ToString(), Ro["IWGITSalesManager"].ToString());
                ////login.Logout(driver, extentTest, testName, testDataIteration);
            }
            catch (Exception e)
            {
                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }
        public static IEnumerable<object[]> Test158()
        {
            foreach (DataRow row in getTestCaseList("SecurityRoles"))
            {
                yield return new object[] { row };
            }
        }
        //Check Security roles-Test10
        [TestCategory("CheckSecurityRoles")]
        [TestProperty("TestcaseID", "RTA-Test10")]

        [DataTestMethod]
        [DynamicData(nameof(Test158), DynamicDataSourceType.Method)]
        public void RTA_CheckSecurityRoles_Test10(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                // Choose Settings > Advanced Settings
                //generic.MoveToAdvanceSettings(driver, extentTest, testName, testDataIteration);
                //// Select Settings> Security> Teams
                //generic.MoveToTeamAdvancedSettingsRoles(driver, extentTest, testName, testDataIteration);
                ////Check the Roles
                //generic.ValidateRole(driver, extentTest, testName, testDataIteration, Ro["SearchUserName10"].ToString(), Ro["IWGCentreCustomerService"].ToString(), Ro["IWGMinimumSecurity"].ToString());
                //////login.Logout(driver, extentTest, testName, testDataIteration);
            }
            catch (Exception e)
            {
                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }
        public static IEnumerable<object[]> Test160()
        {
            foreach (DataRow row in getTestCaseList("SecurityRoles"))
            {
                yield return new object[] { row };
            }
        }
        //Check Security roles-Test11
        [TestCategory("CheckSecurityRoles")]
        [TestProperty("TestcaseID", "RTA-Test11")]

        [DataTestMethod]
        [DynamicData(nameof(Test160), DynamicDataSourceType.Method)]
        public void RTA_CheckSecurityRoles_Test11(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                // Choose Settings > Advanced Settings
                generic.MoveToAdvanceSettings(driver, extentTest, testName, testDataIteration);
                // Select Settings> Security> Teams
                generic.MoveToTeamAdvancedSettingsRoles(driver, extentTest, testName, testDataIteration);
                //Check the Roles
                generic.ValidateRolewith4(driver, extentTest, testName, testDataIteration, Ro["SearchUserName11"].ToString(), Ro["InteractionSyncCS"].ToString(), Ro["IWGLSCAgent"].ToString(), Ro["IWGMinimumSecurity"].ToString(), Ro["IWGTeamCustomerService"].ToString());
                ////login.Logout(driver, extentTest, testName, testDataIteration);
            }
            catch (Exception e)
            {
                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }
        public static IEnumerable<object[]> Test159()
        {
            foreach (DataRow row in getTestCaseList("SecurityRoles"))
            {
                yield return new object[] { row };
            }
        }
        //Check Security roles-Test12
        [TestCategory("CheckSecurityRoles")]
        [TestProperty("TestcaseID", "RTA-Test12")]

        [DataTestMethod]
        [DynamicData(nameof(Test159), DynamicDataSourceType.Method)]
        public void RTA_CheckSecurityRoles_Test12(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                // Choose Settings > Advanced Settings
                generic.MoveToAdvanceSettings(driver, extentTest, testName, testDataIteration);
                // Select Settings> Security> Teams
                generic.MoveToTeamAdvancedSettingsRoles(driver, extentTest, testName, testDataIteration);
                //Check the Roles
                generic.ValidateRolewith4(driver, extentTest, testName, testDataIteration, Ro["SearchUserName12"].ToString(), Ro["InteractionSyncCS"].ToString(), Ro["IWGLSCManager"].ToString(), Ro["IWGMinimumSecurity"].ToString(), Ro["IWGTeamCustomerService"].ToString());
                ////login.Logout(driver, extentTest, testName, testDataIteration);
            }
            catch (Exception e)
            {
                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }
        public static IEnumerable<object[]> Test162()
        {
            foreach (DataRow row in getTestCaseList("SecurityRoles"))
            {
                yield return new object[] { row };
            }
        }
        //Check Security roles-Test13
        [TestCategory("CheckSecurityRoles")]
        [TestProperty("TestcaseID", "RTA-Test13")]

        [DataTestMethod]
        [DynamicData(nameof(Test162), DynamicDataSourceType.Method)]
        public void RTA_CheckSecurityRoles_Test13(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                // Choose Settings > Advanced Settings
                generic.MoveToAdvanceSettings(driver, extentTest, testName, testDataIteration);
                // Select Settings> Security> Teams
                generic.MoveToTeamAdvancedSettingsRoles(driver, extentTest, testName, testDataIteration);
                //Check the Roles
                generic.ValidateRolewith4(driver, extentTest, testName, testDataIteration, Ro["SearchUserName13"].ToString(), Ro["InteractionSyncCS"].ToString(), Ro["IWGLSCAdministrator"].ToString(), Ro["IWGMinimumSecurity"].ToString(), Ro["IWGTeamCustomerService"].ToString());
                ////login.Logout(driver, extentTest, testName, testDataIteration);
            }
            catch (Exception e)
            {
                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }
        public static IEnumerable<object[]> Test161()
        {
            foreach (DataRow row in getTestCaseList("SecurityRoles"))
            {
                yield return new object[] { row };
            }
        }
        //Check Security roles-Test14
        [TestCategory("CheckSecurityRoles")]
        [TestProperty("TestcaseID", "RTA-Test14")]

        [DataTestMethod]
        [DynamicData(nameof(Test161), DynamicDataSourceType.Method)]
        public void RTA_CheckSecurityRoles_Test14(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                // Choose Settings > Advanced Settings
                generic.MoveToAdvanceSettings(driver, extentTest, testName, testDataIteration);
                // Select Settings> Security> Teams
                generic.MoveToTeamAdvancedSettingsRoles(driver, extentTest, testName, testDataIteration);
                //Check the Roles
                generic.ValidateRolewith3(driver, extentTest, testName, testDataIteration, Ro["SearchUserName14"].ToString(), Ro["IWGMinimumSecurity"].ToString(), Ro["IWGGSCAgent"].ToString(), Ro["IWGTeamGSC"].ToString());
                ////login.Logout(driver, extentTest, testName, testDataIteration);
            }
            catch (Exception e)
            {
                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }

        public static IEnumerable<object[]> Test163()
        {
            foreach (DataRow row in getTestCaseList("SecurityRoles"))
            {
                yield return new object[] { row };
            }
        }
        //Check Security roles-Test15
        [TestCategory("CheckSecurityRoles")]
        [TestProperty("TestcaseID", "RTA-Test15")]

        [DataTestMethod]
        [DynamicData(nameof(Test163), DynamicDataSourceType.Method)]
        public void RTA_CheckSecurityRoles_Test15(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                // Choose Settings > Advanced Settings
                generic.MoveToAdvanceSettings(driver, extentTest, testName, testDataIteration);
                // Select Settings> Security> Teams
                generic.MoveToTeamAdvancedSettingsRoles(driver, extentTest, testName, testDataIteration);
                //Check the Roles
                generic.ValidateRolewith3(driver, extentTest, testName, testDataIteration, Ro["SearchUserName15"].ToString(), Ro["IWGMinimumSecurity"].ToString(), Ro["IWGGSCManager"].ToString(), Ro["IWGTeamGSC"].ToString());
                ////login.Logout(driver, extentTest, testName, testDataIteration);

            }
            catch (Exception e)
            {
                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }
        public static IEnumerable<object[]> Test164()
        {
            foreach (DataRow row in getTestCaseList("SecurityRoles"))
            {
                yield return new object[] { row };
            }
        }
        //Check Security roles-Test16
        [TestCategory("CheckSecurityRoles")]
        [TestProperty("TestcaseID", "RTA-Test16")]

        [DataTestMethod]
        [DynamicData(nameof(Test164), DynamicDataSourceType.Method)]
        public void RTA_CheckSecurityRoles_Test16(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                // Choose Settings > Advanced Settings
                generic.MoveToAdvanceSettings(driver, extentTest, testName, testDataIteration);
                // Select Settings> Security> Teams
                generic.MoveToTeamAdvancedSettingsRoles(driver, extentTest, testName, testDataIteration);
                //Check the Roles
                generic.ValidateRolewith3(driver, extentTest, testName, testDataIteration, Ro["SearchUserName16"].ToString(), Ro["IWGMinimumSecurity"].ToString(), Ro["IWGGSCAdministrator"].ToString(), Ro["IWGTeamGSC"].ToString());
                ////login.Logout(driver, extentTest, testName, testDataIteration);

            }
            catch (Exception e)
            {
                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }
        public static IEnumerable<object[]> Test165()
        {
            foreach (DataRow row in getTestCaseList("SecurityRoles"))
            {
                yield return new object[] { row };
            }
        }
        //Check Security roles-Test17
        [TestCategory("CheckSecurityRoles")]
        [TestProperty("TestcaseID", "RTA-Test17")]

        [DataTestMethod]
        [DynamicData(nameof(Test165), DynamicDataSourceType.Method)]
        public void RTA_CheckSecurityRoles_Test17(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                // Choose Settings > Advanced Settings
                generic.MoveToAdvanceSettings(driver, extentTest, testName, testDataIteration);
                // Select Settings> Security> Teams
                generic.MoveToTeamAdvancedSettingsRoles(driver, extentTest, testName, testDataIteration);
                //Check the Roles
                generic.ValidateRolewith3(driver, extentTest, testName, testDataIteration, Ro["SearchUserName17"].ToString(), Ro["IWGGSCCare"].ToString(), Ro["IWGMinimumSecurity"].ToString(), Ro["IWGTeamGSCOth"].ToString());
                ////login.Logout(driver, extentTest, testName, testDataIteration);

            }
            catch (Exception e)
            {
                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }
        public static IEnumerable<object[]> Test166()
        {
            foreach (DataRow row in getTestCaseList("SecurityRoles"))
            {
                yield return new object[] { row };
            }
        }
        //Check Security roles-Test18
        [TestCategory("CheckSecurityRoles")]
        [TestProperty("TestcaseID", "RTA-Test18")]

        [DataTestMethod]
        [DynamicData(nameof(Test166), DynamicDataSourceType.Method)]
        public void RTA_CheckSecurityRoles_Test18(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                // Choose Settings > Advanced Settings
                generic.MoveToAdvanceSettings(driver, extentTest, testName, testDataIteration);
                // Select Settings> Security> Teams
                generic.MoveToTeamAdvancedSettingsRoles(driver, extentTest, testName, testDataIteration);
                //Check the Roles
                generic.ValidateRolewith6(driver, extentTest, testName, testDataIteration, Ro["SearchUserName18"].ToString(), Ro["InteractionSync"].ToString(), Ro["IWGInternalSalesAgent"].ToString(), Ro["IWGMinimumSecurity"].ToString(), Ro["IWGSalesTourManagement"].ToString(), Ro["IWGTeamInternalSales"].ToString(), Ro["IWGTeamInternalSalesminimum"].ToString());
                ////login.Logout(driver, extentTest, testName, testDataIteration);

            }
            catch (Exception e)
            {
                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");
            }
        }


        [TestMethod]
        public void TestMethod1()
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, "jdkasdgasd", "sdfdsfs".ToString());
            }
            catch (Exception e)
            {
                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");


            }
        }



        public static IEnumerable<object[]> Test167()
        {
            foreach (DataRow row in getTestCaseList("SecurityRoles"))
            {
                yield return new object[] { row };
            }
        }
        //Check Security roles-Test19
        [TestCategory("CheckSecurityRoles")]
        [TestProperty("TestcaseID", "RTA-Test19")]

        [DataTestMethod]
        [DynamicData(nameof(Test167), DynamicDataSourceType.Method)]
        public void RTA_CheckSecurityRoles_Test19(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                // Choose Settings > Advanced Settings
                generic.MoveToAdvanceSettings(driver, extentTest, testName, testDataIteration);
                // Select Settings> Security> Teams
                generic.MoveToTeamAdvancedSettingsRoles(driver, extentTest, testName, testDataIteration);
                //Check the Roles
                generic.ValidateRolewith6(driver, extentTest, testName, testDataIteration, Ro["SearchUserName19"].ToString(), Ro["InteractionSync"].ToString(), Ro["IWGInternalSalesAgent"].ToString(), Ro["IWGMinimumSecurity"].ToString(), Ro["IWGSalesTourManagement"].ToString(), Ro["IWGTeamInternalSales"].ToString(), Ro["IWGTeamInternalSalesminimum"].ToString());
                ////login.Logout(driver, extentTest, testName, testDataIteration);

            }
            catch (Exception e)
            {
                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }
        public static IEnumerable<object[]> Test168()
        {
            foreach (DataRow row in getTestCaseList("SecurityRoles"))
            {
                yield return new object[] { row };
            }
        }
        //Check Security roles-Test20
        [TestCategory("CheckSecurityRoles")]
        [TestProperty("TestcaseID", "RTA-Test20")]

        [DataTestMethod]
        [DynamicData(nameof(Test168), DynamicDataSourceType.Method)]
        public void RTA_CheckSecurityRoles_Test20(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                // Choose Settings > Advanced Settings
                generic.MoveToAdvanceSettings(driver, extentTest, testName, testDataIteration);
                // Select Settings> Security> Teams
                generic.MoveToTeamAdvancedSettingsRoles(driver, extentTest, testName, testDataIteration);
                //Check the Roles
                generic.ValidateRolewith6(driver, extentTest, testName, testDataIteration, Ro["SearchUserName20"].ToString(), Ro["InteractionSync"].ToString(), Ro["IWGInternalSalesAgent"].ToString(), Ro["IWGMinimumSecurity"].ToString(), Ro["IWGSalesTourManagement"].ToString(), Ro["IWGTeamInternalSales"].ToString(), Ro["IWGTeamInternalSalesminimum"].ToString());
                ////login.Logout(driver, extentTest, testName, testDataIteration);

            }
            catch (Exception e)
            {
                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }

        [TestCategory("test")]
        [TestProperty("TestcaseID", "RTA-Test19")]

        [DataTestMethod]
        [DynamicData(nameof(Test167), DynamicDataSourceType.Method)]
        public void RTA_NewVersionSecurityCheck(DataRow Ro)
        {
            //try
            //{
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            // Choose Settings > Advanced Settings
            generic.MoveToAdvanceSettings(driver, extentTest, testName, testDataIteration);
            // Select Settings> Security> Teams
            generic.MoveToTeamAdvancedSettingsRoles(driver, extentTest, testName, testDataIteration);
            //Check the Roles
            generic.NewVersionSecurityCheckfn(driver, extentTest, testName, testDataIteration);
            //generic.LearnExceltoList(driver, extentTest, testName, testDataIteration);

            //login.Logout(driver, extentTest, testName, testDataIteration);

            //}
            //catch (Exception e)
            //{
            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}
        }

        public static IEnumerable<object[]> TestMat()
        {
            foreach (DataRow row in getTestCaseList("SecurityRoles"))
            {
                yield return new object[] { row };
            }
        }

        //Check security matrix
        [TestCategory("CheckSecurityRoles1")]
        [TestProperty("TestcaseID", "RTA-Mat")]

        [DataTestMethod]
        [DynamicData(nameof(TestMat), DynamicDataSourceType.Method)]
        public void SecurityMatrixval(DataRow Ro)
        {
            //try
            //{
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, "Sales");

            //Move to Advance Settings and Security roles
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
            string parent = driver.CurrentWindowHandle;
            generic.MoveToAdvanceSettingsNew(driver, extentTest, testName, testDataIteration);
            generic.MoveToSecurityRole(driver, extentTest, testName, testDataIteration, "IWG Internal Sales Agent");



            generic.GoToSecurityTab(driver, extentTest, testName, testDataIteration, "Core Records");
            generic.SecurityMatrixNew(driver, extentTest, testName, testDataIteration, "IWG Internal Sales Agent", "Core Records");

            generic.GoToSecurityTab(driver, extentTest, testName, testDataIteration, "Marketing");
            generic.SecurityMatrixNew(driver, extentTest, testName, testDataIteration, "IWG Internal Sales Agent", "Marketing");

            generic.GoToSecurityTab(driver, extentTest, testName, testDataIteration, "Sales");
            generic.SecurityMatrixNew(driver, extentTest, testName, testDataIteration, "IWG Internal Sales Agent", "Sales");

            generic.GoToSecurityTab(driver, extentTest, testName, testDataIteration, "Service");
            generic.SecurityMatrixNew(driver, extentTest, testName, testDataIteration, "IWG Internal Sales Agent", "Service");
            //   generic.SecurityMatrixNew1(driver, extentTest, testName, testDataIteration, "IWG Internal Sales Agent", "Service1");

            generic.GoToSecurityTab(driver, extentTest, testName, testDataIteration, "Business Management");
            generic.SecurityMatrixNew(driver, extentTest, testName, testDataIteration, "IWG Internal Sales Agent", "Business Management");
            //   generic.SecurityMatrixNew1(driver, extentTest, testName, testDataIteration, "IWG Internal Sales Agent", "Business Management1");

            generic.GoToSecurityTab(driver, extentTest, testName, testDataIteration, "Service Management");
            generic.SecurityMatrixNew(driver, extentTest, testName, testDataIteration, "IWG Internal Sales Agent", "Service Management");

            generic.GoToSecurityTab(driver, extentTest, testName, testDataIteration, "Customization");
            generic.SecurityMatrixNew(driver, extentTest, testName, testDataIteration, "IWG Internal Sales Agent", "Customization");
            //  generic.SecurityMatrixNew1(driver, extentTest, testName, testDataIteration, "IWG Internal Sales Agent", "Customization1");

            generic.GoToSecurityTab(driver, extentTest, testName, testDataIteration, "Business Process Flows");
            generic.SecurityMatrixNew(driver, extentTest, testName, testDataIteration, "IWG Internal Sales Agent", "Business Process Flows");

            generic.GoToSecurityTab(driver, extentTest, testName, testDataIteration, "Custom Entities");
            generic.SecurityMatrixNew(driver, extentTest, testName, testDataIteration, "IWG Internal Sales Agent", "Custom Entities");

            driver.Close();
            driver.SwitchTo().Window(parent);
            login.Logout(driver, extentTest, testName, testDataIteration);
            //}
            //catch (Exception e)
            //{
            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}
        }









        public static IEnumerable<object[]> validateRole()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// CRM-3393
        /// Verify the Security Model for IWG Internal Sales Agent
        /// </summary>
        [TestCategory("hash")]
        [TestProperty("TestcaseID", "validateRole")]

        [DataTestMethod]
        [DynamicData(nameof(validateRole), DynamicDataSourceType.Method)]
        public void RTA_ValidateSecurityRole(DataRow Ro)
        {
            //try
            //{

            // Login as Sales Agent
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());

            //Move to Advance Settings and Security roles
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
            string parent = driver.CurrentWindowHandle;
            generic.MoveToAdvanceSettingsNew(driver, extentTest, testName, testDataIteration);
            generic.MoveToSecurityRole(driver, extentTest, testName, testDataIteration, "IWG Internal Sales Agent");
            generic.GoToSecurityTab(driver, extentTest, testName, testDataIteration, Ro["SecurityTab1"].ToString());
            // generic.ValidatePermIWGInternalCreate(driver, extentTest, testName, testDataIteration);
            // generic.ValidatePermIWGInternalWrite(driver, extentTest, testName, testDataIteration);
            //generic.ValidatePermIWGInternalAppend(driver, extentTest, testName, testDataIteration);
            generic.ValidateRoleMapping(driver, extentTest, testName, testDataIteration, "Create", "None Selected");
            generic.ValidateRoleMapping(driver, extentTest, testName, testDataIteration, "Create", "Business Unit");
            generic.ValidateRoleMapping(driver, extentTest, testName, testDataIteration, "Write", "Organization");

            driver.Close();
            driver.SwitchTo().Window(parent);
            login.Logout(driver, extentTest, testName, testDataIteration);
            //}
            //catch (Exception e)

            //{



            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");

            //    Type thisType = this.GetType();

            //    object testCall = this;

            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");


            //}
        }


        /* Smoke cases */
        //Smoke Scenario 1 :Lead to Opportunity Process -> Won

        public static IEnumerable<object[]> Smoke1()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }

        [TestCategory("PriorReg"), TestCategory("SmokeTest")]
        [TestProperty("TestcaseID", "RTA-")]

        [DataTestMethod]
        [DynamicData(nameof(Smoke1), DynamicDataSourceType.Method)]
        public void RTA000_LeadToOppWon(DataRow Ro)
        {
            //try
            //{

            // Login as IWG Sales User and select Sales
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());

            //Contact Creation : Select contact entity
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
            string now = DateTime.UtcNow.ToString("yyyy-MM-dd HH:mm:ss.fff", CultureInfo.InvariantCulture);
            generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
            String Contactname = generic.CreateNewContactPrior(driver, extentTest, testDataIteration, testName, Ro["LastName"].ToString() + now, "Mr", Ro["User"].ToString(),
                Ro["CompanyName"].ToString(), Ro["Email"].ToString(), Ro["Mobilenumber"].ToString(), Ro["Mobilenumber"].ToString(), Ro["TestContactLanguage"].ToString(), Ro["City1"].ToString(), Ro["Country1"].ToString());

            //Lead Creation using previously created contact

            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity3"].ToString());
            generic.CreateLeadToOpp(driver, extentTest, testName, testDataIteration, "Lead" + now, Ro["Email"].ToString(), Ro["BussinessPhone"].ToString(), Ro["Source"].ToString(), Ro["MajorSource"].ToString(), Ro["MinorSource2"].ToString(), now, "ExistingContact", "", Contactname, "", "", "United Kingdom");
            string leadname = Element(driver, Control("LeadTitle", "Opportunity")).GetAttribute("innerText");
            generic.CreateLeadOppoWonfn(driver, extentTest, testName, testDataIteration, "5");


            //Logout from the application
            login.Logout(driver, extentTest, testName, testDataIteration);
            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");


            //}
        }

        //Smoke Scenario 2 :Lead to Opportunity Process -> Lost

        public static IEnumerable<object[]> Smoke2()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }

        [TestCategory("Regression"), TestCategory("SmokeTest")]
        [TestProperty("TestcaseID", "RTA-")]

        [DataTestMethod]
        [DynamicData(nameof(Smoke2), DynamicDataSourceType.Method)]
        public void RTA000_LeadToOppLost(DataRow Ro)
        {
            //try
            //{

            // Login as IWG Sales User and select Sales
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());

            //Contact Creation : Select contact entity
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
            string now = DateTime.UtcNow.ToString("yyyy-MM-dd HH:mm:ss.fff", CultureInfo.InvariantCulture);
            generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
            String Contactname = generic.CreateNewContactPrior(driver, extentTest, testDataIteration, testName, Ro["LastName"].ToString() + now, "Mr", Ro["User"].ToString(),
                Ro["CompanyName"].ToString(), Ro["Email"].ToString(), Ro["Mobilenumber"].ToString(), Ro["Mobilenumber"].ToString(), Ro["TestContactLanguage"].ToString(), Ro["City1"].ToString(), Ro["Country1"].ToString());

            //Lead Creation using previously created contact

            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity3"].ToString());
            generic.CreateLeadToOpp(driver, extentTest, testName, testDataIteration, "Lead" + now, Ro["Email"].ToString(), Ro["BussinessPhone"].ToString(), Ro["Source"].ToString(), Ro["MajorSource"].ToString(), Ro["MinorSource2"].ToString(), now, "ExistingContact", "", Contactname, "", "", "United Kingdom");
            string leadname = Element(driver, Control("LeadTitle", "Opportunity")).GetAttribute("innerText");
            generic.CreateOppoLostfn(driver, extentTest, testName, testDataIteration, "Incorrect / Invalid contact details");

            //Logout from the application
            login.Logout(driver, extentTest, testName, testDataIteration);
            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");


            //}
        }

        //Smoke Scenario 3 :New Opportunity Process -> Won

        public static IEnumerable<object[]> Smoke3()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }

        [TestCategory("Regression"), TestCategory("SmokeTest")]
        [TestProperty("TestcaseID", "RTA-A123")]

        [DataTestMethod]
        [DynamicData(nameof(Smoke3), DynamicDataSourceType.Method)]
        public void RTA000_NewOppWon(DataRow Ro)
        {
            //try
            //{

            // Login as IWG Sales User and select Sales
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());

            //Contact Creation : Select contact entity
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
            string now = DateTime.UtcNow.ToString("yyyy-MM-dd HH:mm:ss.fff", CultureInfo.InvariantCulture);
            generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
            String Contactname = generic.CreateNewContactPrior(driver, extentTest, testDataIteration, testName, Ro["LastName"].ToString() + now, "Mr", Ro["User"].ToString(),
                Ro["CompanyName"].ToString(), Ro["Email"].ToString(), Ro["Mobilenumber"].ToString(), Ro["Mobilenumber"].ToString(), Ro["TestContactLanguage"].ToString(), Ro["City1"].ToString(), Ro["Country1"].ToString());

            //Opp Creation using previously created contact

            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, "New");
            generic.CreateNewOpportunityEntetrprisewithprevcontact(driver, extentTest, testDataIteration, testName, Ro["TestChannel"].ToString(), Ro["TestMajorSource"].ToString(), Ro["TestMinorSource"].ToString(), Contactname, Ro["spacesbrand"].ToString());
            string oppname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");
            generic.CreateOppoWonfn(driver, extentTest, testName, testDataIteration, "5");
            generic.VerifyMobNum(driver, extentTest, testName, testDataIteration, Ro["Mobilenumber"].ToString());

            //Logout from the application
            login.Logout(driver, extentTest, testName, testDataIteration);
            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");


            //}
        }

        //Smoke Scenario 4 :New Opportunity Process -> Lost

        public static IEnumerable<object[]> Smoke4()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }

        [TestCategory("Regression"), TestCategory("SmokeTest")]
        [TestProperty("TestcaseID", "RTA-")]

        [DataTestMethod]
        [DynamicData(nameof(Smoke4), DynamicDataSourceType.Method)]
        public void RTA000_NewOppLost(DataRow Ro)
        {
            //try
            //{

            // Login as IWG Sales User and select Sales
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());

            //Contact Creation : Select contact entity
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
            string now = DateTime.UtcNow.ToString("yyyy-MM-dd HH:mm:ss.fff", CultureInfo.InvariantCulture);
            generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
            String Contactname = generic.CreateNewContactPrior(driver, extentTest, testDataIteration, testName, Ro["LastName"].ToString() + now, "Mr", Ro["User"].ToString(),
                Ro["CompanyName"].ToString(), Ro["Email"].ToString(), Ro["Mobilenumber"].ToString(), Ro["Mobilenumber"].ToString(), Ro["TestContactLanguage"].ToString(), Ro["City1"].ToString(), Ro["Country1"].ToString());

            //Opp Creation using previously created contact

            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, "New");
            generic.CreateNewOpportunityEntetrprisewithprevcontact(driver, extentTest, testDataIteration, testName, Ro["TestChannel"].ToString(), Ro["TestMajorSource"].ToString(), Ro["TestMinorSource"].ToString(), Contactname, Ro["spacesbrand"].ToString());
            string oppname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");
            generic.CreateOppoLostfn(driver, extentTest, testName, testDataIteration, "Incorrect / Invalid contact details");

            //Logout from the application
            login.Logout(driver, extentTest, testName, testDataIteration);
            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");


            //}
        }
        /* #endregion */


        public static IEnumerable<object[]> RTA_17319()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        // <summary>
        ///TEST[CRM-2790]-Verify whether the Communication request for "Welcome Email(Day 0)" is created not for the opportunity if initial contact is Yes
        /// </summary>
        [TestCategory("Regression"), TestCategory("GlobalP1_S2"), TestCategory("vg"), TestCategory("27AugFixed")]
        [TestProperty("TestcaseID", "RTA-17319")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_17319), DynamicDataSourceType.Method)]
        public void RTA_17319_verifyday0contacted(DataRow Ro)
        {
            //try
            //{
            string Date = DateTime.Today.ToString("dd-MM-yyyy");
            DateTime Now = DateTime.Now;
            string Time = Date + Convert.ToString(Now.Hour) + Convert.ToString(Now.Millisecond);
            string emailid = "AutomatCompany" + Time + "@gmail.com";

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            string now = System.DateTime.Now.ToString();
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);

            // Select Contacts entity and create new
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
            generic.CreateNewContactITSaleswithlanguageandemail(driver, extentTest, testDataIteration, testName, "TestContact", now, emailid, Ro["CompanyName"].ToString());
            string contactname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");

            //Creating new Opp
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
            generic.CreateNewOpportunityEntetrprisewithprevcontact(driver, extentTest, testDataIteration, testName, Ro["TestChannel"].ToString(), Ro["TestMajorSource"].ToString(), Ro["TestMinorSource"].ToString(), contactname, Ro["BussinessCentre"].ToString());
            string oppname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");
            ThinkTime(20);
            // Refresh the page
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());

            ThinkTime(15);
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());
            ThinkTime(2);
            generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, Ro["Tab"].ToString());

            generic.Verifyactivitynotpresent(driver, extentTest, testName, testDataIteration, Ro["Welcomday0"].ToString());

            login.Logout(driver, extentTest, testName, testDataIteration);
            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}

        }
        public static IEnumerable<object[]> RTA_17058()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        // <summary>
        ///TEST[CRM-2790]-Verify whether the Communication request for "Welcome Email spaces (Day 0)" is created for the opportunity if initial contact is No
        /// </summary>
        [TestCategory("0309"), TestCategory("Regression"), TestCategory("GlobalP1_S2")]
        [TestProperty("TestcaseID", "RTA-17058")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_17058), DynamicDataSourceType.Method)]
        public void RTA_17058_verifyday0nocontactspaces(DataRow Ro)
        {

            //try
            //{
            string Date = DateTime.Today.ToString("dd-MM-yyyy");
            DateTime Now = DateTime.Now;
            string Time = Date + Convert.ToString(Now.Hour) + Convert.ToString(Now.Millisecond);
            string emailid = "AutomatCompany" + Time + "@gmail.com";

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            string now = System.DateTime.Now.ToString();
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);

            // Select Contacts entity and create new
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
            generic.CreateNewContactITSaleswithlanguageandemail(driver, extentTest, testDataIteration, testName, "TestContact", now, emailid, Ro["CompanyName"].ToString());
            string contactname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");

            //Creating new Opp
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
            generic.CreateNewOpportunityExistingcontact(driver, extentTest, testDataIteration, testName, Ro["P1TestChannel"].ToString(), Ro["MajorSource"].ToString(), Ro["P1Minorsource"].ToString(), contactname, Ro["Londoncentre"].ToString(), "4");
            // Refresh the page
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());
            ThinkTime(3);

            //Assigning record to another user
            generic.AssignRecordAnotherUser(driver, extentTest, testName, testDataIteration, Ro["AssignTo"].ToString(), "CRM Test5");
            generic.VerifyAssignedUserActivity(driver, extentTest, testName, testDataIteration, "CRM Test5");

            //Verifying Welcome Email Day 0
            generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, Ro["Tab"].ToString());
            generic.selectRequiredActivitty(driver, extentTest, testName, testDataIteration, Ro["ActivityTitle"].ToString());

            //Verifying Payload fields
            generic.payloadnavigate(driver, extentTest, testName, testDataIteration);
            generic.payloadverificationforlang(driver, extentTest, testName, testDataIteration, Ro["Languagecode"].ToString());

            login.Logout(driver, extentTest, testName, testDataIteration);
            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}

        }
        public static IEnumerable<object[]> RTA_17844()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        // <summary>
        ///CRM-3365
        /// </summary>
        [TestCategory("Regression"), TestCategory("GlobalP1_S2")]
        [TestProperty("TestcaseID", "RTA-17844")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_17844), DynamicDataSourceType.Method)]
        public void RTA_17844_PayloadverificationforOppassignedtoUser(DataRow Ro)
        {
            //try
            //{
            string Date = DateTime.Today.ToString("dd-MM-yyyy");
            DateTime Now = DateTime.Now;
            string Time = Date + Convert.ToString(Now.Hour) + Convert.ToString(Now.Millisecond);
            string emailid = "AutomatCompany" + Time + "@gmail.com";

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            string now = System.DateTime.Now.ToString();
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);

            // Select Contacts entity and create new
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
            generic.CreateNewContactITSaleswithlanguageandemail(driver, extentTest, testDataIteration, testName, "TestContact", now, emailid, Ro["CompanyName"].ToString());
            string contactname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");

            //Creating new Opp
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
            generic.CreateNewOpportunityExistingcontact(driver, extentTest, testDataIteration, testName, Ro["P1TestChannel"].ToString(), Ro["MajorSource"].ToString(), Ro["P1Minorsource"].ToString(), contactname, Ro["spacesbrand"].ToString(), "4");

            string oppname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");


            ThinkTime(20);
            // Refresh the page
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());

            ThinkTime(3);
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());
            ThinkTime(2);
            generic.AssignRecordAnotherUser(driver, extentTest, testName, testDataIteration, Ro["AssignTo"].ToString(), "CRM Test 20");
            generic.VerifyAssignedUserActivity(driver, extentTest, testName, testDataIteration, "CRM Test 20");


            generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, Ro["Tab"].ToString());

            //Verifying Opportunity status and Language
            generic.selectRequiredActivitty(driver, extentTest, testName, testDataIteration, "Dialer - Hot Leads");

            //Verifying Payload fields
            generic.payloadnavigate(driver, extentTest, testName, testDataIteration);
            generic.payloadverification(driver, extentTest, testName, testDataIteration, "", "", "CRM.Test20@RegusGroupServices.onmicrosoft.com", "");

            login.Logout(driver, extentTest, testName, testDataIteration);
            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}

        }
        public static IEnumerable<object[]> RTA_17845()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        // <summary>
        ///CRM-3365
        /// </summary>
        [TestCategory("Regression"), TestCategory("GlobalP1_S2"), TestCategory("09Sep")]
        [TestProperty("TestcaseID", "RTA-17845")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_17845), DynamicDataSourceType.Method)]
        public void RTA_17845_verifyday0nocontactspaces(DataRow Ro)
        {
            //try
            //{
            string Date = DateTime.Today.ToString("dd-MM-yyyy");
            DateTime Now = DateTime.Now;
            string Time = Date + Convert.ToString(Now.Hour) + Convert.ToString(Now.Millisecond);
            string emailid = "AutomatCompany" + Time + "@gmail.com";

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            string now = System.DateTime.Now.ToString();
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);

            // Select Contacts entity and create new
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
            generic.CreateNewContactITSaleswithlanguageandemail(driver, extentTest, testDataIteration, testName, "TestContact", now, emailid, Ro["CompanyName"].ToString());
            string contactname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");

            //Creating new Opp
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
            generic.CreateNewOpportunityExistingcontact(driver, extentTest, testDataIteration, testName, Ro["P1TestChannel"].ToString(), Ro["MajorSource"].ToString(), Ro["P1Minorsource"].ToString(), contactname, Ro["spacesbrand"].ToString(), "4");

            string oppname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");


            ThinkTime(20);
            // Refresh the page
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());

            ThinkTime(3);
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());
            ThinkTime(2);
            generic.AssignRecordAnotherUser(driver, extentTest, testName, testDataIteration, Ro["AssignTo"].ToString(), "Dallas Sales French");
            generic.VerifyAssignedUserActivity(driver, extentTest, testName, testDataIteration, "Dallas Sales French");


            generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, Ro["Tab"].ToString());

            //Verifying Opportunity status and Language

            generic.selectRequiredActivitty(driver, extentTest, testName, testDataIteration, "Dialer - Hot Leads");

            //Verifying Payload fields
            generic.payloadnavigate(driver, extentTest, testName, testDataIteration);
            generic.payloadverification(driver, extentTest, testName, testDataIteration, "", "", "", "Dallas Sales French");

            login.Logout(driver, extentTest, testName, testDataIteration);
            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}

        }







        public static IEnumerable<object[]> RTA_17317()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }

        // <summary>
        ///TEST[CRM-2790]-Verify whether the Communication request for "Welcome Email Regus (Day 0)" is created for the opportunity if initial contact is No
        /// </summary>
        [TestCategory("Regression"), TestCategory("GlobalP1_S2"), TestCategory("vg"), TestCategory("SprintUN")]
        [TestProperty("TestcaseID", "RTA-17317")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_17317), DynamicDataSourceType.Method)]
        public void RTA_17317_verifyday0nocontactregus(DataRow Ro)
        {

            //try
            //{
            string Date = DateTime.Today.ToString("dd-MM-yyyy");
            DateTime Now = DateTime.Now;
            string Time = Date + Convert.ToString(Now.Hour) + Convert.ToString(Now.Millisecond);
            string emailid = "AutomatCompany" + Time + "@gmail.com";

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            string now = System.DateTime.Now.ToString();

            // Select Contacts entity and create new
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
            generic.CreateNewContactITSaleswithlanguageandemail(driver, extentTest, testDataIteration, testName, "TestContact", now, emailid, Ro["CompanyName"].ToString());
            string contactname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");

            //Creating new Opp
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
            generic.CreateNewOpportunityExistingcontact(driver, extentTest, testDataIteration, testName, Ro["P1TestChannel"].ToString(), Ro["MajorSource"].ToString(), Ro["P1Minorsource"].ToString(), contactname, Ro["regusbrand"].ToString(), "4");
            generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);
            string oppname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");


            ThinkTime(20);
            // Refresh the page
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());



            ThinkTime(3);
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());
            ThinkTime(2);

            generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, Ro["Tab"].ToString());

            //Verifying Opportunity status and Language

            generic.selectRequiredActivitty(driver, extentTest, testName, testDataIteration, Ro["ActivityTitle"].ToString());

            //Verifying Payload fields
            generic.payloadnavigate(driver, extentTest, testName, testDataIteration);
            generic.payloadverification(driver, extentTest, testName, testDataIteration, Ro["Languagecode"].ToString(), "", emailid, "");

            login.Logout(driver, extentTest, testName, testDataIteration);
            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}

        }

        public static IEnumerable<object[]> RTA_17508()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        // <summary>
        ///TEST[CRM-2790]-Verify whether the Communication request for "Welcome Email spaces (Day 0)" is created for the opportunity if initial contact is No
        /// </summary>
        [TestCategory("Regression"), TestCategory("GlobalP1_S2"), TestCategory("vg")]
        [TestProperty("TestcaseID", "RTA-17508")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_17508), DynamicDataSourceType.Method)]
        public void RTA_17508_verifyday0nocontactspaces(DataRow Ro)
        {
            //try
            //{
            string Date = DateTime.Today.ToString("dd-MM-yyyy");
            DateTime Now = DateTime.Now;
            string Time = Date + Convert.ToString(Now.Hour) + Convert.ToString(Now.Millisecond);
            string emailid = "AutomatCompany" + Time + "@gmail.com";

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            string now = System.DateTime.Now.ToString();

            // Select Contacts entity and create new
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
            generic.CreateNewContactITSaleswithlanguageandemail(driver, extentTest, testDataIteration, testName, "TestContact", now, emailid, Ro["CompanyName"].ToString());
            string contactname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");

            //Creating new Opp
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
            generic.CreateNewOpportunityExistingcontact(driver, extentTest, testDataIteration, testName, Ro["P1TestChannel"].ToString(), Ro["MajorSource"].ToString(), Ro["P1Minorsource"].ToString(), contactname, Ro["spacesbrand"].ToString(), "4");
            generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);
            string oppname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");


            ThinkTime(20);
            // Refresh the page
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());



            ThinkTime(3);
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());
            ThinkTime(2);

            generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, Ro["Tab"].ToString());

            //Verifying Opportunity status and Language

            generic.selectRequiredActivitty(driver, extentTest, testName, testDataIteration, Ro["Welcomday0"].ToString());

            //Verifying Payload fields
            generic.payloadnavigate(driver, extentTest, testName, testDataIteration);
            generic.payloadverification(driver, extentTest, testName, testDataIteration, Ro["Languagecode"].ToString(), "", emailid, "");

            login.Logout(driver, extentTest, testName, testDataIteration);
            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}

        }
        public static IEnumerable<object[]> RTA_17509()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        // <summary>
        ///TEST[CRM-2790]-Verify whether the Communication request for "Welcome Email HQ (Day 0)" is created for the opportunity if initial contact is No
        /// </summary>
        [TestCategory("Regression"), TestCategory("GlobalP1_S2"), TestCategory("vg")]
        [TestProperty("TestcaseID", "RTA-17509")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_17509), DynamicDataSourceType.Method)]
        public void RTA_17509_verifyday0nocontacthq(DataRow Ro)
        {

            //try
            //{
            string Date = DateTime.Today.ToString("dd-MM-yyyy");
            DateTime Now = DateTime.Now;
            string Time = Date + Convert.ToString(Now.Hour) + Convert.ToString(Now.Millisecond);
            string emailid = "AutomatCompany" + Time + "@gmail.com";

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            string now = System.DateTime.Now.ToString();

            // Select Contacts entity and create new
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
            generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);

            generic.CreateNewContactITSaleswithlanguageandemail(driver, extentTest, testDataIteration, testName, "TestContact", now, emailid, Ro["CompanyName"].ToString());
            string contactname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");

            //Creating new Opp
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
            // generic.CreateNewOpportunityExistingcontact(driver, extentTest, testDataIteration, testName, Ro["P1TestChannel"].ToString(), Ro["MajorSource"].ToString(), Ro["P1Minorsource"].ToString(), contactname, Ro["Hqbrand"].ToString(), "4");
            generic.CreateNewOpportunityExistingcontact(driver, extentTest, testDataIteration, testName, Ro["P1TestChannel"].ToString(), Ro["MajorSource"].ToString(), Ro["P1Minorsource"].ToString(), contactname, "London, HQ Moorgate", "4");

            string oppname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");


            ThinkTime(20);
            // Refresh the page
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());



            ThinkTime(3);
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());
            ThinkTime(2);

            generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, Ro["Tab"].ToString());

            //Verifying Opportunity status and Language

            generic.selectRequiredActivitty(driver, extentTest, testName, testDataIteration, "Welcome Email HQ");

            //Verifying Payload fields
            generic.payloadnavigate(driver, extentTest, testName, testDataIteration);
            generic.payloadverification(driver, extentTest, testName, testDataIteration, Ro["Languagecode"].ToString(), "", emailid, "");

            login.Logout(driver, extentTest, testName, testDataIteration);
            //    }

            //        catch (Exception e)
            //        {

            //            AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}

        }
        public static IEnumerable<object[]> RTA_17511()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        // <summary>
        ///TEST[CRM-2790]-Verify whether the Communication request for "Welcome Email regus (Day 0)" is created for the opportunity if initial contact is NO and brand <> Spaces and HQ.
        /// </summary>
        [TestCategory("Regression"), TestCategory("GlobalP1_S2"), TestCategory("vg")]
        [TestProperty("TestcaseID", "RTA-17511")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_17511), DynamicDataSourceType.Method)]
        public void RTA_17511_verifyday0nobrand(DataRow Ro)
        {
            //try
            //{
            string Date = DateTime.Today.ToString("dd-MM-yyyy");
            DateTime Now = DateTime.Now;
            string Time = Date + Convert.ToString(Now.Hour) + Convert.ToString(Now.Millisecond);
            string emailid = "AutomatCompany" + Time + "@gmail.com";

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            string now = System.DateTime.Now.ToString();

            // Select Contacts entity and create new
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
            generic.CreateNewContactITSaleswithlanguageandemail(driver, extentTest, testDataIteration, testName, "TestContact", now, emailid, Ro["CompanyName"].ToString());
            string contactname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");

            //Creating new Opp
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
            generic.CreateNewOpportunityExistingcontactnocenter(driver, extentTest, testDataIteration, testName, Ro["P1TestChannel"].ToString(), Ro["MajorSource"].ToString(), Ro["P1Minorsource"].ToString(), contactname, "4");
            generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);
            string oppname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");


            ThinkTime(20);
            // Refresh the page
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());



            ThinkTime(3);
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());
            ThinkTime(2);

            generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, Ro["Tab"].ToString());

            //Verifying Opportunity status and Language

            generic.selectRequiredActivitty(driver, extentTest, testName, testDataIteration, Ro["ActivityTitle"].ToString());

            //Verifying Payload fields
            generic.payloadnavigate(driver, extentTest, testName, testDataIteration);
            generic.payloadverification(driver, extentTest, testName, testDataIteration, Ro["Languagecode"].ToString(), "", emailid, "");

            login.Logout(driver, extentTest, testName, testDataIteration);
            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}

        }

        public static IEnumerable<object[]> RTA_17989()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesManager"))
            {
                yield return new object[] { row };
            }
        }
        // <summary>
        ///TEST[CRM-2790]-Verify whether the Communication request for "Welcome Email regus (Day 0)" is created for the opportunity if initial contact is NO and brand <> Spaces and HQ.
        /// </summary>
        [TestCategory("25Nov"), TestCategory("Regression"), TestCategory("GlobalP1_S2"), TestCategory("HF")]
        [TestProperty("TestcaseID", "RTA-17989")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_17989), DynamicDataSourceType.Method)]
        public void RTA_17989_CommRequestPrimaryopp(DataRow Ro)
        {
            //try
            //{
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            string Time = System.DateTime.Now.ToString();
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);

            //First Lead
            string firstleadname = generic.DuplicateLead(driver, extentTest, testName, testDataIteration, "Lead" + Time, Ro["Email"].ToString(), Ro["Product"].ToString(), "New", Ro["Source"].ToString(), Ro["MajorSource"].ToString(), Ro["MinorSource"].ToString(), Ro["BussinessCentre"].ToString(), Ro["BrokerContact"].ToString());
            string Time1 = System.DateTime.Now.ToString();
            //Second Lead
            string secondleadname = generic.DuplicateLead1(driver, extentTest, testName, testDataIteration, "Lead" + Time1, Ro["Email"].ToString(), Ro["Product"].ToString(), "New1", firstleadname, Ro["Source"].ToString(), Ro["MajorSource"].ToString(), Ro["MinorSource"].ToString(), Ro["BussinessCentre"].ToString(), Ro["BrokerContact"].ToString());

            // Qualify first lead
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            //generic.OpenRecordGlobalSearchLead(driver, extentTest, testDataIteration, testName, firstleadname);
            generic.OpenRecordGlobalSearch(driver, extentTest, testName, testDataIteration, firstleadname);

            generic.NavigateToRelatedTabEntitiesLead(driver, extentTest, testName, testDataIteration, Ro["RelatedTabEntity"].ToString());
            generic.OppSelect(driver, extentTest, testName, testDataIteration);

            //Verification of first lead
            generic.PrimaryOppVerify(driver, extentTest, testName, testDataIteration, Ro["BussinessCentre"].ToString());
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, "Refresh");
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, "Refresh");

            // Select Activities tab
            generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, Ro["Tab"].ToString());

            //Verifying Opportunity status and Language

            // generic.NavigateTabsOpportunity(driver, extentTest, testName, testDataIteration,"Activities");
            generic.VerifyActivitiesPrimaryOpp(driver, extentTest, testName, testDataIteration);
            generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, "Secondary Opportunity");
            generic.OpensecondayOpp(driver, extentTest, testName, testDataIteration);
            generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, "Activities");
            generic.VerifyActivitiesSecondaryopp(driver, extentTest, testName, testDataIteration);

            //Logout
            login.Logout(driver, extentTest, testName, testDataIteration);

            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}

        }





        public static IEnumerable<object[]> RTA_17662()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        // <summary>
        ///TEST[CRM-3023]-Verify whether the comm request Non-contact Emails is generated when 'Initial Contact Done' value is 'No'.
        /// </summary>
        [TestCategory("Regression"), TestCategory("GlobalP1_S2"), TestCategory("vg"), TestCategory("2810"), TestCategory("2910")]
        [TestProperty("TestcaseID", "RTA-17662")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_17662), DynamicDataSourceType.Method)]
        public void RTA_17662_noncontactemailsent(DataRow Ro)
        {
            //try
            //{
            string Date = DateTime.Today.ToString("dd-MM-yyyy");
            DateTime Now = DateTime.Now;
            string Time = Date + Convert.ToString(Now.Hour) + Convert.ToString(Now.Millisecond);
            string emailid = "AutomatCompany" + Time + "@gmail.com";
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            string now = System.DateTime.Now.ToString();

            // Select Contacts entity and create new
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
            generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);

            generic.CreateNewContactITSaleswithlanguageandemail(driver, extentTest, testDataIteration, testName, "TestContact", now, emailid, Ro["CompanyName"].ToString());
            string contactname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");


            //Creating new Opp
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
            generic.CreateNewOpportunityExistingcontact(driver, extentTest, testDataIteration, testName, Ro["P1TestChannel"].ToString(), Ro["MajorSource"].ToString(), Ro["P1Minorsource"].ToString(), contactname, Ro["spacesbrand"].ToString(), Ro["No of People"].ToString());
            string oppname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");


            //ThinkTime(20);
            // Refresh the page
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());




            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());

            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());

            generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, Ro["Tab"].ToString());

            generic.VerifyActivityTitlepresent(driver, extentTest, testName, testDataIteration, Ro["No Answer - Day 1"].ToString());

            generic.VerifyActivityTitlepresent(driver, extentTest, testName, testDataIteration, Ro["Activitydate"].ToString());

            generic.VerifyActivityTitlepresent(driver, extentTest, testName, testDataIteration, Ro["No Answer - Day 5"].ToString());
            login.Logout(driver, extentTest, testName, testDataIteration);


            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}
        }
        public static IEnumerable<object[]> RTA_17663()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        // <summary>
        ///TEST[CRM-3023]-Verify whether the comm request Non-contact Emails is not generated when 'Initial Contact Done' value is 'Yes'.
        /// </summary>
        [TestCategory("Regression"), TestCategory("GlobalP1_S2"), TestCategory("vg")]
        [TestProperty("TestcaseID", "RTA-17663")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_17663), DynamicDataSourceType.Method)]
        public void RTA_17663_nononcontactemailsent(DataRow Ro)
        {
            //try
            //{
            string Date = DateTime.Today.ToString("dd-MM-yyyy");
            DateTime Now = DateTime.Now;
            string Time = Date + Convert.ToString(Now.Hour) + Convert.ToString(Now.Millisecond);
            string emailid = "AutomatCompany" + Time + "@gmail.com";
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            string now = System.DateTime.Now.ToString();

            // Select Contacts entity and create new
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
            generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);

            generic.CreateNewContactITSaleswithlanguageandemail(driver, extentTest, testDataIteration, testName, "TestContact", now, emailid, Ro["CompanyName"].ToString());
            string contactname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");


            //Creating new Opp
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
            generic.CreateNewOpportunityEntetrprisewithprevcontact(driver, extentTest, testDataIteration, testName, Ro["TestChannel"].ToString(), Ro["TestMajorSource"].ToString(), Ro["TestMinorSource"].ToString(), contactname, Ro["spacesbrand"].ToString());
            string oppname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");


            ThinkTime(20);
            // Refresh the page
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());



            ThinkTime(5);
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());
            ThinkTime(5);
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());
            ThinkTime(15);
            generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, Ro["Tab"].ToString());
            ThinkTime(3);
            generic.Verifyactivitynotpresent(driver, extentTest, testName, testDataIteration, Ro["No Answer - Day 1"].ToString());
            ThinkTime(3);
            generic.Verifyactivitynotpresent(driver, extentTest, testName, testDataIteration, Ro["Activitydate"].ToString());
            ThinkTime(3);
            generic.Verifyactivitynotpresent(driver, extentTest, testName, testDataIteration, Ro["No Answer - Day 5"].ToString());
            login.Logout(driver, extentTest, testName, testDataIteration);


            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}
        }
        public static IEnumerable<object[]> RTA_17749()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        // <summary>
        ///TEST[CRM-2803]-Verify whether the comm request 'Not interested generic email' is created with proper brand and language.
        /// </summary>
        [TestCategory("Regression"), TestCategory("GlobalP1_S2"), TestCategory("2211")]
        [TestProperty("TestcaseID", "RTA-17749")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_17749), DynamicDataSourceType.Method)]
        public void RTA_17749_notintresetedgenericmail(DataRow Ro)
        {
            //try
            //{
            string Date = DateTime.Today.ToString("dd-MM-yyyy");
            DateTime Now = DateTime.Now;
            string Time = Date + Convert.ToString(Now.Hour) + Convert.ToString(Now.Millisecond);
            string emailid = "AutomatCompany" + Time + "@gmail.com";
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            string now = System.DateTime.Now.ToString();

            // Select Contacts entity and create new
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
            generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);

            generic.CreateNewContactITSaleswithlanguageandemail(driver, extentTest, testDataIteration, testName, "TestContact", now, emailid, Ro["CompanyName"].ToString());
            string contactname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");


            //Creating new Opp
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
            generic.CreateNewOpportunityEntetrprisewithprevcontact(driver, extentTest, testDataIteration, testName, Ro["TestChannel"].ToString(), Ro["TestMajorSource"].ToString(), Ro["TestMinorSource"].ToString(), contactname, Ro["spacesbrand"].ToString());
            string oppname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");


            ThinkTime(20);
            // Refresh the page
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());

            ThinkTime(5);
            generic.oppcloseaslost(driver, extentTest, testName, testDataIteration, Ro["P1lostreason"].ToString());

            ThinkTime(5);
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());
            ThinkTime(15);
            //Navigating to activities and verifying language in payload

            generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, Ro["Tab"].ToString());

            generic.selectRequiredActivitty(driver, extentTest, testName, testDataIteration, Ro["P1notintestedactivity"].ToString());

            generic.payloadnavigate(driver, extentTest, testName, testDataIteration);
            generic.payloadverificationnotintreseted(driver, extentTest, testName, testDataIteration, Ro["P1languagecodeUK"].ToString(), Ro["spacesbrand"].ToString(), Ro["P1appstoreurl"].ToString(), Ro["P1googlestoreurl"].ToString());

            login.Logout(driver, extentTest, testName, testDataIteration);


            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}
        }


        /// CRM-4528
        public static IEnumerable<object[]> RTA_16954()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        /// </summary>

        [TestCategory("JMS"), TestCategory("Regression"), TestCategory("GlobalP1_S2")]

        [TestProperty("TestcaseID", "RTA-16954")]


        [DataTestMethod]
        [DynamicData(nameof(RTA_16954), DynamicDataSourceType.Method)]
        public void RTA_16954_Verifyrefrencedataforregusinadvancedfind(DataRow Ro)
        {
            //try

            //{

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());

            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());

            string Date = DateTime.Today.ToString("dd-MM-yyyy");
            DateTime Now = DateTime.Now;
            string Time = Date + Convert.ToString(Now.Hour) + Convert.ToString(Now.Millisecond);

            string emailid = "AutomatCompany" + Time + "@gmail.com";
            string centre = "Stuttgart, Konigstrasse";
            string now = System.DateTime.Now.ToString();

            // Select Contacts entity and create new
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);

            generic.VerifyAdvfindpayloaddetails(driver, extentTest, testName, testDataIteration, "Regus", "ID", "Type ID", "Image", "Status", "", "Active", "Brand", "http://assets.regus.com/images/email/Regus.jpg");

            login.Logout(driver, extentTest, testName, testDataIteration);
            //}
            //catch (Exception e)
            //{
            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");

            //    Type thisType = this.GetType();

            //    object testCall = this;

            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");


            //}
        }


        /// CRM-4528
        public static IEnumerable<object[]> RTA_16956()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        /// </summary>

        [TestCategory("JMS"), TestCategory("Regression"), TestCategory("GlobalP1_S2")]

        [TestProperty("TestcaseID", "RTA-16956")]


        [DataTestMethod]
        [DynamicData(nameof(RTA_16956), DynamicDataSourceType.Method)]
        public void RTA_16956_Verifyreferencedataforspacesinadvfind(DataRow Ro)
        {
            //try

            //{

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());

            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());

            string Date = DateTime.Today.ToString("dd-MM-yyyy");
            DateTime Now = DateTime.Now;
            string Time = Date + Convert.ToString(Now.Hour) + Convert.ToString(Now.Millisecond);

            string emailid = "AutomatCompany" + Time + "@gmail.com";
            string centre = "Stuttgart, Konigstrasse";
            string now = System.DateTime.Now.ToString();

            // Select Contacts entity and create new
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);

            generic.VerifyAdvfindpayloaddetails(driver, extentTest, testName, testDataIteration, "Spaces", "ID", "Type ID", "Image", "Status", "", "Active", "Brand", "http://assets.regus.com/images/email/Spaces.jpg");

            login.Logout(driver, extentTest, testName, testDataIteration);
            //}
            //catch (Exception e)
            //{
            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");

            //    Type thisType = this.GetType();

            //    object testCall = this;

            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");


            //}
        }


        /// CRM-4528
        public static IEnumerable<object[]> RTA_16957()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        /// </summary>

        [TestCategory("JMS"), TestCategory("Regression"), TestCategory("GlobalP1_S2")]

        [TestProperty("TestcaseID", "RTA-16957")]


        [DataTestMethod]
        [DynamicData(nameof(RTA_16957), DynamicDataSourceType.Method)]
        public void RTA_16957_VerifyreferencedataforHQinadvfind(DataRow Ro)
        {
            //try

            //{

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());

            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());

            string Date = DateTime.Today.ToString("dd-MM-yyyy");
            DateTime Now = DateTime.Now;
            string Time = Date + Convert.ToString(Now.Hour) + Convert.ToString(Now.Millisecond);

            string emailid = "AutomatCompany" + Time + "@gmail.com";
            string centre = "Stuttgart, Konigstrasse";
            string now = System.DateTime.Now.ToString();

            // Select Contacts entity and create new
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);

            generic.VerifyAdvfindpayloaddetails(driver, extentTest, testName, testDataIteration, "HQ", "ID", "Type ID", "Image", "Status", "", "Active", "Brand", "http://assets.regus.com/images/email/HQ.jpg");

            login.Logout(driver, extentTest, testName, testDataIteration);
            //}
            //catch (Exception e)
            //{
            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");

            //    Type thisType = this.GetType();

            //    object testCall = this;

            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");


            //}
        }

        /// CRM-6254
        public static IEnumerable<object[]> RTA_17243()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        /// </summary>

        [TestCategory("JMS"), TestCategory("GlobalP1_S2"), TestCategory("Regression"), TestCategory("25Nov")]

        [TestProperty("TestcaseID", "RTA-17243")]


        [DataTestMethod]
        [DynamicData(nameof(RTA_17243), DynamicDataSourceType.Method)]
        public void RTA_17243_VerifyactivityforDuplicatte(DataRow Ro)
        {
            //try

            //{

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());

            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());

            string Date = DateTime.Today.ToString("dd-MM-yyyy");
            DateTime Now = DateTime.Now;
            string Time = Date + Convert.ToString(Now.Hour) + Convert.ToString(Now.Millisecond);

            string emailid = "AutomatCompany" + Time + "@gmail.com";
            string centre = "Stuttgart, Konigstrasse";
            string now = System.DateTime.Now.ToString();


            // Select Contacts entity and create new

            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
            generic.CreateNewContactITSaleswithlanguageandemail(driver, extentTest, testDataIteration, testName, "TestContact", now, emailid, Ro["CompanyName"].ToString());
            string contactname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");

            //Creating new Opp
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
            string People = "6";
            generic.CreateNewOpportunityExistingcontact(driver, extentTest, testDataIteration, testName, Ro["P1TestChannel"].ToString(), Ro["MajorSource"].ToString(), Ro["P1Minorsource"].ToString(), contactname, centre, People);

            string oppname = Element(driver, Control("OppReference", "EnterpriseSales")).GetAttribute("title");

            // Refresh the page
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());

            // Close as Lost
            generic.SelectOpportunityheader(driver, extentTest, testName, testDataIteration, "Close as Lost", "Form:opportunity");
            ThinkTime(3);

            WaitUntil(driver, Control("StatusReasonlostwon", "Opportunity"), 30);
            Element(driver, Control("StatusReasonlostwon", "Opportunity")).Click();
            ThinkTime(5);
            Select(Element(driver, Control("StatusReasonlostwon", "Opportunity"))).SelectByText("Duplicate");
            ThinkTime(2);
            //   Element(driver, Control("OpporunityValue", "Incorrect / Invalid contact details", "Opportunity")).Click();
            ThinkTime(2);
            Element(driver, Control("Saveregardingaccount", "Opportunity")).Click();
            ThinkTime(2);

            //Navigating to activities and verifying language in payload

            generic.VerifyStatusReasonheader(driver, extentTest, testDataIteration, testName, "Duplicate");
            ThinkTime(3);
            generic.VerifyOpportunitystatus(driver, extentTest, testDataIteration, testName, "Lost");

            generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, Ro["Tab"].ToString());
            generic.VerifynurturecommreqNo(driver, extentTest, testName, testDataIteration, "Nurture");

            login.Logout(driver, extentTest, testName, testDataIteration);
            //}
            //catch (Exception e)
            //{
            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");

            //    Type thisType = this.GetType();

            //    object testCall = this;

            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");


            //}
        }


        /// CRM-6254
        public static IEnumerable<object[]> RTA_17241()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        /// </summary>

        [TestCategory("27Aug"), TestCategory("JMS"), TestCategory("GlobalP1_S2"), TestCategory("Regression")]

        [TestProperty("TestcaseID", "RTA-17241")]


        [DataTestMethod]
        [DynamicData(nameof(RTA_17241), DynamicDataSourceType.Method)]
        public void RTA_17241_VerifyactivityforIncorrectdetails(DataRow Ro)
        {
            //try

            //{

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());

            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());

            string Date = DateTime.Today.ToString("dd-MM-yyyy");
            DateTime Now = DateTime.Now;
            string Time = Date + Convert.ToString(Now.Hour) + Convert.ToString(Now.Millisecond);

            string emailid = "AutomatCompany" + Time + "@gmail.com";
            string centre = "Stuttgart, Konigstrasse";
            string now = System.DateTime.Now.ToString();


            //// Select Contacts entity and create new

            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
            generic.CreateNewContactITSaleswithlanguageandemail(driver, extentTest, testDataIteration, testName, "TestContact", now, emailid, Ro["CompanyName"].ToString());
            string contactname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");

            //Creating new Opp
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
            string People = "6";
            generic.CreateNewOpportunityExistingcontact(driver, extentTest, testDataIteration, testName, Ro["P1TestChannel"].ToString(), Ro["MajorSource"].ToString(), Ro["P1Minorsource"].ToString(), contactname, centre, People);

            string oppname = Element(driver, Control("OppReference", "EnterpriseSales")).GetAttribute("title");

            // Refresh the page
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());

            // Close as Lost
            generic.SelectOpportunityheader(driver, extentTest, testName, testDataIteration, "Close as Lost", "Form:opportunity");
            ThinkTime(3);

            WaitUntil(driver, Control("StatusReasonlostwon", "Opportunity"), 30);
            Element(driver, Control("StatusReasonlostwon", "Opportunity")).Click();
            ThinkTime(5);
            Select(Element(driver, Control("StatusReasonlostwon", "Opportunity"))).SelectByText("Not a sales call");
            ThinkTime(2);
            ThinkTime(2);

            WaitUntil(driver, Control("SelectReason", "Opportunity"), 30);
            Element(driver, Control("SelectReason", "Opportunity")).Click();
            ThinkTime(5);
            ThinkTime(2);
            Select(Element(driver, Control("SelectReason", "Opportunity"))).SelectByText("Incorrect / Invalid contact details");
            //WaitUntil(driver, Control("SelectLostReason", "Opportunity"), 30);
            //Element(driver, Control("SelectLostReason", "Opportunity")).Click();
            ThinkTime(5);
            MoveToElement(driver, Control("NewSave", "Opportunity"));
            Element(driver, Control("NewSave", "Opportunity")).Click();

            //Navigating to activities and verifying language in payload
            generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, Ro["Tab"].ToString());
            generic.VerifynurturecommreqNo(driver, extentTest, testName, testDataIteration, "Nurture");


            login.Logout(driver, extentTest, testName, testDataIteration);

            //    }
            //                catch (Exception e)
            //                {
            //                    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");

            //    Type thisType = this.GetType();

            //    object testCall = this;

            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");


            //}
        }

        /// CRM-6254
        public static IEnumerable<object[]> RTA_17242()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        /// </summary>

        [TestCategory("JMS"), TestCategory("Regression"), TestCategory("GlobalP1_S2")]

        [TestProperty("TestcaseID", "RTA-17242")]


        [DataTestMethod]
        [DynamicData(nameof(RTA_17242), DynamicDataSourceType.Method)]
        public void RTA_17242_VerifyactivitywhencloseaslostforNotasalescall(DataRow Ro)
        {
            //try

            //{

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());

            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());

            string Date = DateTime.Today.ToString("dd-MM-yyyy");
            DateTime Now = DateTime.Now;
            string Time = Date + Convert.ToString(Now.Hour) + Convert.ToString(Now.Millisecond);

            string emailid = "AutomatCompany" + Time + "@gmail.com";
            string centre = "Stuttgart, Konigstrasse";
            string now = System.DateTime.Now.ToString();


            // Select Contacts entity and create new

            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
            generic.CreateNewContactITSaleswithlanguageandemail(driver, extentTest, testDataIteration, testName, "TestContact", now, emailid, Ro["CompanyName"].ToString());
            string contactname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");

            //Creating new Opp
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
            string People = "6";
            generic.CreateNewOpportunityExistingcontact(driver, extentTest, testDataIteration, testName, Ro["P1TestChannel"].ToString(), Ro["MajorSource"].ToString(), Ro["P1Minorsource"].ToString(), contactname, centre, People);

            string oppname = Element(driver, Control("OppReference", "EnterpriseSales")).GetAttribute("title");

            // Refresh the page
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());

            // Close as Lost
            generic.SelectOpportunityheader(driver, extentTest, testName, testDataIteration, "Close as Lost", "Form:opportunity");
            ThinkTime(3);

            WaitUntil(driver, Control("StatusReasonlostwon", "Opportunity"), 30);
            Element(driver, Control("StatusReasonlostwon", "Opportunity")).Click();
            ThinkTime(5);
            Select(Element(driver, Control("StatusReasonlostwon", "Opportunity"))).SelectByText("Not a sales call");
            ThinkTime(2);
            //   Element(driver, Control("OpporunityValue", "Incorrect / Invalid contact details", "Opportunity")).Click();
            ThinkTime(2);
            Element(driver, Control("Saveregardingaccount", "Opportunity")).Click();
            ThinkTime(2);

            //Navigating to activities and verifying language in payload
            generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, Ro["Tab"].ToString());
            generic.VerifynurturecommreqNo(driver, extentTest, testName, testDataIteration, "Nurture");

            login.Logout(driver, extentTest, testName, testDataIteration);
            //}
            //catch (Exception e)
            //{
            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");

            //    Type thisType = this.GetType();

            //    object testCall = this;

            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");


            //}
        }









        ///// CRM-3487

        ///// </summary>

        //[TestCategory("JMS"), TestCategory("GlobalP1_S2"), TestCategory("Regression")]

        //[TestProperty("TestcaseID", "RTA-16957")]

        //public static IEnumerable<object[]> RTA_5848_Data()
        //        {
        //            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
        //            {
        //                yield return new object[] { row };
        //            }
        //        }
        //[DataTestMethod]
        //[DataTestMethod]
        [DynamicData(nameof(RTA_5848_Data), DynamicDataSourceType.Method)]
        //public void RTA_16957_VerifybrandimageinAdvfindforHQ()
        //{
        //    try

        //    {

        //        login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());

        //        generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());

        //        string Date = DateTime.Today.ToString("dd-MM-yyyy");
        //        DateTime Now = DateTime.Now;
        //        string Time = Date + Convert.ToString(Now.Hour) + Convert.ToString(Now.Millisecond);

        //        string emailid = "AutomatCompany" + Time + "@gmail.com";
        //        string centre = "Stuttgart, Konigstrasse";
        //        string now = System.DateTime.Now.ToString();

        //        // Select Contacts entity and create new
        //        generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);

        //        generic.VerifyAdvfindpayloaddetails(driver, extentTest, testName, testDataIteration, "HQ", "ID", "Type ID", "Image", "Status", "", "Active", "Brand", "http://assets.regus.com/images/email/HQ.jpg");

        //        login.Logout(driver, extentTest, testName, testDataIteration);
        //    }
        //    catch (Exception e)
        //    {
        //        AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");

        //        Type thisType = this.GetType();

        //        object testCall = this;

        //        ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");


        //    }
        //}


        /// CRM-6254
        public static IEnumerable<object[]> RTA_17244()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        /// </summary>

        [TestCategory("JMS"), TestCategory("GlobalP1_S2"), TestCategory("Regression")]

        [TestProperty("TestcaseID", "RTA-17244")]


        [DataTestMethod]
        [DynamicData(nameof(RTA_17244), DynamicDataSourceType.Method)]
        public void RTA_17244_VerifyactivityforRegusproductnotmeetcustomerneeds(DataRow Ro)
        {
            //try

            //{

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());

            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());

            string Date = DateTime.Today.ToString("dd-MM-yyyy");
            DateTime Now = DateTime.Now;
            string Time = Date + Convert.ToString(Now.Hour) + Convert.ToString(Now.Millisecond);

            string emailid = "AutomatCompany" + Time + "@gmail.com";
            string centre = "Stuttgart, Konigstrasse";
            string now = System.DateTime.Now.ToString();


            // Select Contacts entity and create new

            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
            generic.CreateNewContactITSaleswithlanguageandemail(driver, extentTest, testDataIteration, testName, "TestContact", now, emailid, Ro["CompanyName"].ToString());
            string contactname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");

            //Creating new Opp
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
            string People = "6";
            generic.CreateNewOpportunityExistingcontact(driver, extentTest, testDataIteration, testName, Ro["P1TestChannel"].ToString(), Ro["MajorSource"].ToString(), Ro["P1Minorsource"].ToString(), contactname, centre, People);

            string oppname = Element(driver, Control("OppReference", "EnterpriseSales")).GetAttribute("title");

            // Refresh the page
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());

            // Close as Lost
            generic.SelectOpportunityheader(driver, extentTest, testName, testDataIteration, "Close as Lost", "Form:opportunity");
            ThinkTime(3);

            WaitUntil(driver, Control("StatusReasonlostwon", "Opportunity"), 30);
            Element(driver, Control("StatusReasonlostwon", "Opportunity")).Click();
            ThinkTime(5);
            Select(Element(driver, Control("StatusReasonlostwon", "Opportunity"))).SelectByText("Regus product doesn't meet customer needs");
            ThinkTime(2);
            //   Element(driver, Control("OpporunityValue", "Incorrect / Invalid contact details", "Opportunity")).Click();
            ThinkTime(2);
            Element(driver, Control("Saveregardingaccount", "Opportunity")).Click();
            ThinkTime(2);

            //Navigating to activities and verifying language in payload
            generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, Ro["Tab"].ToString());
            generic.VerifynurturecommreqNo(driver, extentTest, testName, testDataIteration, "Nurture");

            login.Logout(driver, extentTest, testName, testDataIteration);
            //}
            //catch (Exception e)
            //{
            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");

            //    Type thisType = this.GetType();

            //    object testCall = this;

            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");


            //}
        }
        public static IEnumerable<object[]> RTA_17245()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        /// CRM-6254

        /// </summary>

        [TestCategory("JMS"), TestCategory("Regression"), TestCategory("GlobalP1_S2")]

        [TestProperty("TestcaseID", "RTA-17245")]


        [DataTestMethod]
        [DynamicData(nameof(RTA_17245), DynamicDataSourceType.Method)]
        public void RTA_17245_Verifyacivityfordecidetoworkfromhome(DataRow Ro)
        {
            //try

            //{

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());

            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());

            string Date = DateTime.Today.ToString("dd-MM-yyyy");
            DateTime Now = DateTime.Now;
            string Time = Date + Convert.ToString(Now.Hour) + Convert.ToString(Now.Millisecond);

            string emailid = "AutomatCompany" + Time + "@gmail.com";
            string centre = "Stuttgart, Konigstrasse";
            string now = System.DateTime.Now.ToString();


            // Select Contacts entity and create new

            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
            generic.CreateNewContactITSaleswithlanguageandemail(driver, extentTest, testDataIteration, testName, "TestContact", now, emailid, Ro["CompanyName"].ToString());
            string contactname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");

            //Creating new Opp
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
            string People = "6";
            generic.CreateNewOpportunityExistingcontact(driver, extentTest, testDataIteration, testName, Ro["P1TestChannel"].ToString(), Ro["MajorSource"].ToString(), Ro["P1Minorsource"].ToString(), contactname, centre, People);

            string oppname = Element(driver, Control("OppReference", "EnterpriseSales")).GetAttribute("title");

            // Refresh the page
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());

            // Close as Lost
            generic.SelectOpportunityheader(driver, extentTest, testName, testDataIteration, "Close as Lost", "Form:opportunity");
            ThinkTime(3);

            WaitUntil(driver, Control("StatusReasonlostwon", "Opportunity"), 30);
            Element(driver, Control("StatusReasonlostwon", "Opportunity")).Click();
            ThinkTime(5);
            Select(Element(driver, Control("StatusReasonlostwon", "Opportunity"))).SelectByText("Decide to work from home");
            ThinkTime(2);
            //   Element(driver, Control("OpporunityValue", "Incorrect / Invalid contact details", "Opportunity")).Click();
            ThinkTime(2);
            Element(driver, Control("Saveregardingaccount", "Opportunity")).Click();
            ThinkTime(2);

            //Navigating to activities and verifying language in payload
            generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, Ro["Tab"].ToString());
            generic.VerifynurturecommreqYes(driver, extentTest, testName, testDataIteration, "Nurture");

            login.Logout(driver, extentTest, testName, testDataIteration);
            //}
            //catch (Exception e)
            //{
            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");

            //    Type thisType = this.GetType();

            //    object testCall = this;

            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");


            //}
        }

        /// CRM-6254
        public static IEnumerable<object[]> RTA_17246()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        /// </summary>

        [TestCategory("JMS"), TestCategory("Regression"), TestCategory("GlobalP1_S2"), TestCategory("PriorReg")]

        [TestProperty("TestcaseID", "RTA-17246")]


        [DataTestMethod]
        [DynamicData(nameof(RTA_17246), DynamicDataSourceType.Method)]
        public void RTA_17246_Verifyactivityforlocationnotsuitable(DataRow Ro)
        {
            //try

            //{

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());

            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());

            string Date = DateTime.Today.ToString("dd-MM-yyyy");
            DateTime Now = DateTime.Now;
            string Time = Date + Convert.ToString(Now.Hour) + Convert.ToString(Now.Millisecond);

            string emailid = "AutomatCompany" + Time + "@gmail.com";
            string centre = "Stuttgart, Konigstrasse";
            string now = System.DateTime.Now.ToString();


            // Select Contacts entity and create new

            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
            generic.CreateNewContactITSaleswithlanguageandemail(driver, extentTest, testDataIteration, testName, "TestContact", now, emailid, Ro["CompanyName"].ToString());
            string contactname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");

            //Creating new Opp
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
            string People = "6";
            generic.CreateNewOpportunityExistingcontact(driver, extentTest, testDataIteration, testName, Ro["P1TestChannel"].ToString(), Ro["MajorSource"].ToString(), Ro["P1Minorsource"].ToString(), contactname, centre, People);

            string oppname = Element(driver, Control("OppReference", "EnterpriseSales")).GetAttribute("title");

            // Refresh the page
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());

            // Close as Lost
            generic.SelectOpportunityheader(driver, extentTest, testName, testDataIteration, "Close as Lost", "Form:opportunity");
            ThinkTime(3);

            WaitUntil(driver, Control("StatusReasonlostwon", "Opportunity"), 30);
            Element(driver, Control("StatusReasonlostwon", "Opportunity")).Click();
            ThinkTime(5);
            Select(Element(driver, Control("StatusReasonlostwon", "Opportunity"))).SelectByText("Location not suitable");
            ThinkTime(2);
            //   Element(driver, Control("OpporunityValue", "Incorrect / Invalid contact details", "Opportunity")).Click();
            ThinkTime(2);
            Element(driver, Control("Saveregardingaccount", "Opportunity")).Click();
            ThinkTime(2);

            //Navigating to activities and verifying language in payload
            generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, Ro["Tab"].ToString());
            generic.VerifynurturecommreqYes(driver, extentTest, testName, testDataIteration, "Nurture");

            login.Logout(driver, extentTest, testName, testDataIteration);
            //}
            //catch (Exception e)
            //{
            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");

            //    Type thisType = this.GetType();

            //    object testCall = this;

            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");


            //}
        }

        /// CRM-6254
        public static IEnumerable<object[]> RTA_17247()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        /// </summary>

        [TestCategory("JMS"), TestCategory("Regression"), TestCategory("GlobalP1_S2")]

        [TestProperty("TestcaseID", "RTA-17247")]


        [DataTestMethod]
        [DynamicData(nameof(RTA_17247), DynamicDataSourceType.Method)]
        public void RTA_17247_Verifyactivityforpricetoohigh(DataRow Ro)
        {
            //try

            //{

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());

            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());

            string Date = DateTime.Today.ToString("dd-MM-yyyy");
            DateTime Now = DateTime.Now;
            string Time = Date + Convert.ToString(Now.Hour) + Convert.ToString(Now.Millisecond);

            string emailid = "AutomatCompany" + Time + "@gmail.com";
            string centre = "Stuttgart, Konigstrasse";
            string now = System.DateTime.Now.ToString();


            // Select Contacts entity and create new

            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
            generic.CreateNewContactITSaleswithlanguageandemail(driver, extentTest, testDataIteration, testName, "TestContact", now, emailid, Ro["CompanyName"].ToString());
            string contactname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");

            //Creating new Opp
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
            string People = "6";
            generic.CreateNewOpportunityExistingcontact(driver, extentTest, testDataIteration, testName, Ro["P1TestChannel"].ToString(), Ro["MajorSource"].ToString(), Ro["P1Minorsource"].ToString(), contactname, centre, People);

            string oppname = Element(driver, Control("OppReference", "EnterpriseSales")).GetAttribute("title");

            // Refresh the page
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());

            // Close as Lost
            generic.SelectOpportunityheader(driver, extentTest, testName, testDataIteration, "Close as Lost", "Form:opportunity");
            ThinkTime(3);

            WaitUntil(driver, Control("StatusReasonlostwon", "Opportunity"), 30);
            Element(driver, Control("StatusReasonlostwon", "Opportunity")).Click();
            ThinkTime(5);
            Select(Element(driver, Control("StatusReasonlostwon", "Opportunity"))).SelectByText("Price too high");
            ThinkTime(2);
            //   Element(driver, Control("OpporunityValue", "Incorrect / Invalid contact details", "Opportunity")).Click();
            ThinkTime(2);
            Element(driver, Control("Saveregardingaccount", "Opportunity")).Click();
            ThinkTime(2);

            //Navigating to activities and verifying language in payload
            generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, Ro["Tab"].ToString());
            generic.VerifynurturecommreqYes(driver, extentTest, testName, testDataIteration, "Nurture");

            login.Logout(driver, extentTest, testName, testDataIteration);
            //}
            //catch (Exception e)
            //{
            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");

            //    Type thisType = this.GetType();

            //    object testCall = this;

            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");


            //}
        }
        public static IEnumerable<object[]> RTA_17248()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        /// CRM-6254

        /// </summary>

        [TestCategory("JMS"), TestCategory("GlobalP1_S2"), TestCategory("Regression")]

        [TestProperty("TestcaseID", "RTA-17248")]


        [DataTestMethod]
        [DynamicData(nameof(RTA_17248), DynamicDataSourceType.Method)]
        public void RTA_17248_Verifyactivityforprojectcancelled(DataRow Ro)
        {
            //try

            //{

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());

            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());

            string Date = DateTime.Today.ToString("dd-MM-yyyy");
            DateTime Now = DateTime.Now;
            string Time = Date + Convert.ToString(Now.Hour) + Convert.ToString(Now.Millisecond);

            string emailid = "AutomatCompany" + Time + "@gmail.com";
            string centre = "Stuttgart, Konigstrasse";
            string now = System.DateTime.Now.ToString();


            // Select Contacts entity and create new

            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
            generic.CreateNewContactITSaleswithlanguageandemail(driver, extentTest, testDataIteration, testName, "TestContact", now, emailid, Ro["CompanyName"].ToString());
            string contactname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");

            //Creating new Opp
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
            string People = "6";
            generic.CreateNewOpportunityExistingcontact(driver, extentTest, testDataIteration, testName, Ro["P1TestChannel"].ToString(), Ro["MajorSource"].ToString(), Ro["P1Minorsource"].ToString(), contactname, centre, People);

            string oppname = Element(driver, Control("OppReference", "EnterpriseSales")).GetAttribute("title");

            // Refresh the page
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());

            // Close as Lost
            generic.SelectOpportunityheader(driver, extentTest, testName, testDataIteration, "Close as Lost", "Form:opportunity");
            ThinkTime(3);

            WaitUntil(driver, Control("StatusReasonlostwon", "Opportunity"), 30);
            Element(driver, Control("StatusReasonlostwon", "Opportunity")).Click();
            ThinkTime(5);
            Select(Element(driver, Control("StatusReasonlostwon", "Opportunity"))).SelectByText("Project cancelled");
            ThinkTime(2);
            //   Element(driver, Control("OpporunityValue", "Incorrect / Invalid contact details", "Opportunity")).Click();
            ThinkTime(2);
            Element(driver, Control("Saveregardingaccount", "Opportunity")).Click();
            ThinkTime(2);

            //Navigating to activities and verifying language in payload
            generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, Ro["Tab"].ToString());
            generic.VerifynurturecommreqYes(driver, extentTest, testName, testDataIteration, "Nurture");

            login.Logout(driver, extentTest, testName, testDataIteration);
            //}
            //catch (Exception e)
            //{
            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");

            //    Type thisType = this.GetType();

            //    object testCall = this;

            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");


            //}
        }
        public static IEnumerable<object[]> RTA_17249()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        /// CRM-6254

        /// </summary>

        [TestCategory("JMS"), TestCategory("Regression"), TestCategory("GlobalP1_S2")]

        [TestProperty("TestcaseID", "RTA-17249")]


        [DataTestMethod]
        [DynamicData(nameof(RTA_17249), DynamicDataSourceType.Method)]
        public void RTA_17249_Verifyactivityfrorenewedexistingleaseoptions(DataRow Ro)
        {
            //try

            //{

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());

            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());

            string Date = DateTime.Today.ToString("dd-MM-yyyy");
            DateTime Now = DateTime.Now;
            string Time = Date + Convert.ToString(Now.Hour) + Convert.ToString(Now.Millisecond);

            string emailid = "AutomatCompany" + Time + "@gmail.com";
            string centre = "Stuttgart, Konigstrasse";
            string now = System.DateTime.Now.ToString();


            // Select Contacts entity and create new

            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
            generic.CreateNewContactITSaleswithlanguageandemail(driver, extentTest, testDataIteration, testName, "TestContact", now, emailid, Ro["CompanyName"].ToString());
            string contactname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");

            //Creating new Opp
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
            string People = "6";
            generic.CreateNewOpportunityExistingcontact(driver, extentTest, testDataIteration, testName, Ro["P1TestChannel"].ToString(), Ro["MajorSource"].ToString(), Ro["P1Minorsource"].ToString(), contactname, centre, People);

            string oppname = Element(driver, Control("OppReference", "EnterpriseSales")).GetAttribute("title");

            // Refresh the page
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());

            // Close as Lost
            generic.SelectOpportunityheader(driver, extentTest, testName, testDataIteration, "Close as Lost", "Form:opportunity");
            ThinkTime(3);

            WaitUntil(driver, Control("StatusReasonlostwon", "Opportunity"), 30);
            Element(driver, Control("StatusReasonlostwon", "Opportunity")).Click();
            ThinkTime(5);
            Select(Element(driver, Control("StatusReasonlostwon", "Opportunity"))).SelectByText("Renewed existing lease options");
            ThinkTime(2);
            //   Element(driver, Control("OpporunityValue", "Incorrect / Invalid contact details", "Opportunity")).Click();
            ThinkTime(2);
            Element(driver, Control("Saveregardingaccount", "Opportunity")).Click();
            ThinkTime(2);

            //Navigating to activities and verifying language in payload
            generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, Ro["Tab"].ToString());
            generic.VerifynurturecommreqYes(driver, extentTest, testName, testDataIteration, "Nurture");

            login.Logout(driver, extentTest, testName, testDataIteration);
            //}
            //catch (Exception e)
            //{
            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");

            //    Type thisType = this.GetType();

            //    object testCall = this;

            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");


            //}
        }
        public static IEnumerable<object[]> RTA_17250()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        /// CRM-6254

        /// </summary>

        [TestCategory("JMS"), TestCategory("Regression"), TestCategory("GlobalP1_S2")]

        [TestProperty("TestcaseID", "RTA-17250")]


        [DataTestMethod]
        [DynamicData(nameof(RTA_17250), DynamicDataSourceType.Method)]
        public void RTA_17250_Verifyactivityforselectedcompetition(DataRow Ro)
        {
            //try

            //{

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());

            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());

            string Date = DateTime.Today.ToString("dd-MM-yyyy");
            DateTime Now = DateTime.Now;
            string Time = Date + Convert.ToString(Now.Hour) + Convert.ToString(Now.Millisecond);

            string emailid = "AutomatCompany" + Time + "@gmail.com";
            string centre = "Stuttgart, Konigstrasse";
            string now = System.DateTime.Now.ToString();


            // Select Contacts entity and create new

            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
            generic.CreateNewContactITSaleswithlanguageandemail(driver, extentTest, testDataIteration, testName, "TestContact", now, emailid, Ro["CompanyName"].ToString());
            string contactname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");

            //Creating new Opp
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
            string People = "6";
            generic.CreateNewOpportunityExistingcontact(driver, extentTest, testDataIteration, testName, Ro["P1TestChannel"].ToString(), Ro["MajorSource"].ToString(), Ro["P1Minorsource"].ToString(), contactname, centre, People);

            string oppname = Element(driver, Control("OppReference", "EnterpriseSales")).GetAttribute("title");

            // Refresh the page
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());

            // Close as Lost
            generic.SelectOpportunityheader(driver, extentTest, testName, testDataIteration, "Close as Lost", "Form:opportunity");
            ThinkTime(3);

            WaitUntil(driver, Control("StatusReasonlostwon", "Opportunity"), 30);
            Element(driver, Control("StatusReasonlostwon", "Opportunity")).Click();
            ThinkTime(5);
            Select(Element(driver, Control("StatusReasonlostwon", "Opportunity"))).SelectByText("Selected competition");
            ThinkTime(2);
            //   Element(driver, Control("OpporunityValue", "Incorrect / Invalid contact details", "Opportunity")).Click();
            ThinkTime(2);
            Element(driver, Control("Saveregardingaccount", "Opportunity")).Click();
            ThinkTime(2);

            //Navigating to activities and verifying language in payload
            generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, Ro["Tab"].ToString());
            generic.VerifynurturecommreqYes(driver, extentTest, testName, testDataIteration, "Nurture");

            login.Logout(driver, extentTest, testName, testDataIteration);
            //}
            //catch (Exception e)
            //{
            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");

            //    Type thisType = this.GetType();

            //    object testCall = this;

            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");


            //}
        }
        public static IEnumerable<object[]> RTA_17251()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        /// CRM-6254

        /// </summary>

        [TestCategory("JMS"), TestCategory("Regression"), TestCategory("GlobalP1_S2")]

        [TestProperty("TestcaseID", "RTA-17251")]


        [DataTestMethod]
        [DynamicData(nameof(RTA_17251), DynamicDataSourceType.Method)]
        public void RTA_17251_Verifyactivityfronotabletoreach(DataRow Ro)
        {
            //try

            //{

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());

            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());

            string Date = DateTime.Today.ToString("dd-MM-yyyy");
            DateTime Now = DateTime.Now;
            string Time = Date + Convert.ToString(Now.Hour) + Convert.ToString(Now.Millisecond);

            string emailid = "AutomatCompany" + Time + "@gmail.com";
            string centre = "Stuttgart, Konigstrasse";
            string now = System.DateTime.Now.ToString();


            // Select Contacts entity and create new

            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
            generic.CreateNewContactITSaleswithlanguageandemail(driver, extentTest, testDataIteration, testName, "TestContact", now, emailid, Ro["CompanyName"].ToString());
            string contactname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");

            //Creating new Opp
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
            string People = "6";
            generic.CreateNewOpportunityExistingcontact(driver, extentTest, testDataIteration, testName, Ro["P1TestChannel"].ToString(), Ro["MajorSource"].ToString(), Ro["P1Minorsource"].ToString(), contactname, centre, People);

            string oppname = Element(driver, Control("OppReference", "EnterpriseSales")).GetAttribute("title");

            // Refresh the page
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());

            // Close as Lost
            generic.SelectOpportunityheader(driver, extentTest, testName, testDataIteration, "Close as Lost", "Form:opportunity");
            ThinkTime(3);

            WaitUntil(driver, Control("StatusReasonlostwon", "Opportunity"), 30);
            Element(driver, Control("StatusReasonlostwon", "Opportunity")).Click();
            ThinkTime(5);
            Select(Element(driver, Control("StatusReasonlostwon", "Opportunity"))).SelectByText("Not able to reach");
            ThinkTime(2);
            //   Element(driver, Control("OpporunityValue", "Incorrect / Invalid contact details", "Opportunity")).Click();
            ThinkTime(2);
            Element(driver, Control("Saveregardingaccount", "Opportunity")).Click();
            ThinkTime(2);

            //Navigating to activities and verifying language in payload
            generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, Ro["Tab"].ToString());
            generic.VerifynurturecommreqYes(driver, extentTest, testName, testDataIteration, "Nurture");

            login.Logout(driver, extentTest, testName, testDataIteration);
            //}
            //catch (Exception e)
            //{
            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");

            //    Type thisType = this.GetType();

            //    object testCall = this;

            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");


            //}
        }

        public static IEnumerable<object[]> RTA_17252()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        /// CRM-6254

        /// </summary>

        [TestCategory("JMS"), TestCategory("Regression"), TestCategory("GlobalP1_S2")]

        [TestProperty("TestcaseID", "RTA-17252")]


        [DataTestMethod]
        [DynamicData(nameof(RTA_17252), DynamicDataSourceType.Method)]
        public void RTA_17252_VerifycommRqstTourRshdld(DataRow Ro)
        {
            //try

            //{

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());

            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());

            string Date = DateTime.Today.ToString("dd-MM-yyyy");
            DateTime Now = DateTime.Now;
            string Time = Date + Convert.ToString(Now.Hour) + Convert.ToString(Now.Millisecond);

            string emailid = "AutomatCompany" + Time + "@gmail.com";
            string centre = "Stuttgart, Konigstrasse";
            string now = System.DateTime.Now.ToString();


            // Select Contacts entity and create new

            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
            generic.CreateNewContactITSaleswithlanguageandemail(driver, extentTest, testDataIteration, testName, "TestContact", now, emailid, Ro["CompanyName"].ToString());
            string contactname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");

            //Creating new Opp
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
            string People = "6";
            generic.CreateNewOpportunityExistingcontact(driver, extentTest, testDataIteration, testName, Ro["P1TestChannel"].ToString(), Ro["MajorSource"].ToString(), Ro["P1Minorsource"].ToString(), contactname, centre, People);

            string oppname = Element(driver, Control("OppReference", "EnterpriseSales")).GetAttribute("title");

            // Refresh the page
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());

            // Close as Lost
            generic.SelectOpportunityheader(driver, extentTest, testName, testDataIteration, "Close as Lost", "Form:opportunity");
            ThinkTime(3);

            WaitUntil(driver, Control("StatusReasonlostwon", "Opportunity"), 30);
            Element(driver, Control("StatusReasonlostwon", "Opportunity")).Click();
            ThinkTime(5);
            Select(Element(driver, Control("StatusReasonlostwon", "Opportunity"))).SelectByText("Needs more time");
            ThinkTime(2);
            //   Element(driver, Control("OpporunityValue", "Incorrect / Invalid contact details", "Opportunity")).Click();
            ThinkTime(2);
            Element(driver, Control("Saveregardingaccount", "Opportunity")).Click();
            ThinkTime(2);

            //Navigating to activities and verifying language in payload
            generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, Ro["Tab"].ToString());
            generic.VerifynurturecommreqYes(driver, extentTest, testName, testDataIteration, "Nurture");

            login.Logout(driver, extentTest, testName, testDataIteration);
            //}
            //catch (Exception e)
            //{
            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");

            //    Type thisType = this.GetType();

            //    object testCall = this;

            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");


            //}
        }

        public static IEnumerable<object[]> RTA_19048()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        /// CRM-7177

        /// </summary>

        [TestCategory("Sprint42.1"), TestCategory("Regression")]

        [TestProperty("TestcaseID", "RTA-19048")]


        [DataTestMethod]
        [DynamicData(nameof(RTA_19048), DynamicDataSourceType.Method)]
        public void RTA_19048_AfterContSelectdLinkedAccPopulateinCompField(DataRow Ro)
        {
            try
            {
                string Date = DateTime.Today.ToString("dd-MM-yyyy");
                DateTime Now = DateTime.Now;
                string Time = Date + Convert.ToString(Now.Hour) + Convert.ToString(Now.Millisecond);
                string emailid = "AutomatCompany" + Time + "@gmail.com";
                string now = System.DateTime.Now.ToString();
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());

                // Create Account
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString());
                generic.SelectNewTab(driver, extentTest, testName, testDataIteration);

                generic.CreateNewAccountWithCustomerTypeNew(driver, extentTest, testDataIteration, testName, Ro["TestAccountLink"].ToString(), now, Ro["CustomerType2"].ToString());
                string Accountname1 = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");

                // Select Contacts entity and create new Contact
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
                generic.CreateNewContactITSaleswithlanguageandemail(driver, extentTest, testDataIteration, testName, "TestContact", now, emailid, Accountname1);
                string contactname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");

                // Creating new Opp
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
                generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
                generic.CreateNewOpportunityRecentcontact(driver, extentTest, testDataIteration, testName, Ro["P1TestChannel"].ToString(), Ro["MajorSource"].ToString(), Ro["P1Minorsource"].ToString(), contactname, Accountname1);
                login.Logout(driver, extentTest, testName, testDataIteration);
            }
            catch (Exception e)
            {
                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");

                Type thisType = this.GetType();

                object testCall = this;

                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");


            }
        }

        public static IEnumerable<object[]> RTA_19099()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }


        /// CRM-7177

        /// </summary>

        [TestCategory("Sprint42.1"), TestCategory("14102020")]

        [TestProperty("TestcaseID", "RTA-19099")]


        [DataTestMethod]
        [DynamicData(nameof(RTA_19099), DynamicDataSourceType.Method)]
        public void RTA_19099_AfterAccountSelectdLinkedContactPopulated(DataRow Ro)
        {
            try
            {
                string Date = DateTime.Today.ToString("dd-MM-yyyy");
                DateTime Now = DateTime.Now;
                string Time = Date + Convert.ToString(Now.Hour) + Convert.ToString(Now.Millisecond);
                string emailid = "AutomatCompany" + Time + "@gmail.com";
                string now = System.DateTime.Now.ToString();
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());

                // Create Account
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString());
                generic.SelectNewTab(driver, extentTest, testName, testDataIteration);

                string Accountname = generic.CreateNewAccountWithCustomerTypeNew(driver, extentTest, testDataIteration, testName, Ro["TestAccountLink"].ToString(), now, Ro["CustomerType2"].ToString());
                string Accountname1 = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");
                // Select Contacts entity and create new Contact
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
                generic.CreateNewContactITSaleswithlanguageandemail(driver, extentTest, testDataIteration, testName, "TestContact", now, emailid, Accountname);
                string contactname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");

                // Creating new Opp
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
                generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
                generic.CreateNewOpportunityRecentAccount(driver, extentTest, testDataIteration, testName, Ro["P1TestChannel"].ToString(), Ro["MajorSource"].ToString(), Ro["P1Minorsource"].ToString(), contactname, Accountname1);
                login.Logout(driver, extentTest, testName, testDataIteration);

            }
            catch (Exception e)
            {
                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");

                Type thisType = this.GetType();

                object testCall = this;

                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");


            }
        }

        public static IEnumerable<object[]> RTA_19301()
        {
            foreach (DataRow row in getTestCaseList("SalesAdmin"))
            {
                yield return new object[] { row };
            }
        }
        /// CRM-7204
        /// </summary>
        [TestCategory("Sprint42.1"), TestCategory("14102020")]

        [TestProperty("TestcaseID", "RTA-19301")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_19301), DynamicDataSourceType.Method)]
        public void RTA_19301_VerifyBarcelonaSalesTeamssetupwithDuplicateLanguages(DataRow Ro)
        {
            //try
            //{

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());

            string parent = driver.CurrentWindowHandle;
            generic.AdvancedFind(driver, extentTest, testName, testDataIteration);
            string parentnew = driver.CurrentWindowHandle;
            ThinkTime(2);
            for (int i = 1; i < 14; i++)
            {
                generic.AdvancedfindfilterSalesTeam(driver, extentTest, testName, testDataIteration, "Teams", "[new]", "Team Name", "Equals", Ro["SalesTeam" + i].ToString(), "Results");
                generic.selectARecord(driver, extentTest, testName, testDataIteration);
                generic.VerifySalesTeamLanguage(driver, extentTest, testName, testDataIteration, Ro["SalesTeam" + i].ToString());
                driver.SwitchTo().Window(parentnew);

                generic.SwitchToAdvancedFindfromResult(driver, extentTest, testName, testDataIteration);

            }
            driver.Close();
            driver.SwitchTo().Window(parent);



            login.Logout(driver, extentTest, testName, testDataIteration);

            //}
            //catch (Exception e)
            //{
            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");

            //    Type thisType = this.GetType();

            //    object testCall = this;

            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");


            //}
        }


        public static IEnumerable<object[]> RTA_18987()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesDirector"))
            {
                yield return new object[] { row };
            }
        }
        [DataTestMethod]
        /// <summary>
        /// Test Method to To verify Sales Director can open the list of cities in the location.
        /// </summary>
        [TestCategory("Sales Director"), TestCategory("Regression"), TestCategory("Sprint42.1"), TestCategory("CRM-7119")]
        [TestProperty("TestcaseID", "RTA-18987")]

        [DynamicData(nameof(RTA_18987), DynamicDataSourceType.Method)]
        public void RTA18987_VerifyPayloadnotupdateforlargedeals(DataRow Ro)
        {
            //try
            //{
            // Login as IWG Sales Director
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["EntityContact"].ToString());
            generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);
            string now = System.DateTime.Now.ToString();

            generic.CreateNewContactEnterpriseSales(driver, extentTest, testDataIteration, testName, Ro["Contactname"].ToString(), now, Ro["Email"].ToString(), "");
            string contactname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");
            generic.EnterContactNumber(driver, extentTest, testName, testDataIteration, "+919497852369");

            //Click Opportunity and create new Opp
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, "New");
            string people = "5";
            generic.CreateNewOpportunityEntetrprisewithprevcontact1(driver, extentTest, testDataIteration, testName, Ro["P1TestChannel"].ToString(), Ro["MajorSource"].ToString(), Ro["MinorSource"].ToString(), contactname, Ro["spacesbrand"].ToString(), people);

            // Refresh the page
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());

            // Select Activities tab and choose Dialer
            generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, "Activities");
            generic.Verifyactivitynotpresent(driver, extentTest, testName, testDataIteration, "Call back Large deal");



            // Logout 
            generic.Logout(driver, extentTest, testName, testDataIteration);

            //    }
            //        catch (Exception e)
            //        {

            //            AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}
        }


        public static IEnumerable<object[]> RTA_18378()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        [DataTestMethod]
        /// <summary>
        /// Test Method to To verify Sales Director can open the list of cities in the location.
        /// </summary>
        [TestCategory("Sprint42.1"), TestCategory("CRM-7012,7025"), TestCategory("14102020")]
        [TestProperty("TestcaseID", "RTA-18378")]

        [DynamicData(nameof(RTA_18378), DynamicDataSourceType.Method)]
        public void RTA18378_VerifyPayloadupdatedforlargedeals(DataRow Ro)
        {
            try
            {
                // Login as IWG Sales Agent
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                string now = System.DateTime.Now.ToString();
                string newdate = DateTime.Today.ToString("MM/dd/yyyy").Replace("-", "/");
                string Date = DateTime.Today.ToString("yyyy-MM-dd");

                //Create new Contact with Country and city
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
                generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
                string lastname = generic.CreateNewContactforPayloadVerification(driver, extentTest, testDataIteration, testName, Ro["Contactname"].ToString(), now, Ro["Email"].ToString(), "");
                string contactname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");
                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());
                generic.EnterContactNumber(driver, extentTest, testName, testDataIteration, "+919497852369");

                //Click Opportunity and create new Opp
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, "New");
                string people = "6";
                generic.CreateNewOpportunityEntetrprisewithprevcontact1(driver, extentTest, testDataIteration, testName, Ro["P1TestChannel"].ToString(), Ro["MajorSource"].ToString(), Ro["MinorSource"].ToString(), contactname, Ro["BussinessCentre"].ToString(), people);
                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());
                //generic.AddingProductinOpp(driver, extentTest, testName, testDataIteration);

                // Select Activities tab and choose Dialer
                generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, "Activities");
                generic.selectRequiredActivitty(driver, extentTest, testName, testDataIteration, "Dialer - Hot Leads");

                //Verifying Payload fields.
                generic.payloadnavigate(driver, extentTest, testName, testDataIteration);
                generic.VerifyDialerHotleadsPayloadupdated(driver, extentTest, testName, testDataIteration, "New", lastname, "+91 94978 52369", "", "Singapore Standard Time", "Manila", "Open", "", "", "CRM.Test3@RegusGroupServices.onmicrosoft.com", "Philippines", "Regus", "UK English", "Day Office", "HOT LEAD", "Corporate Client", "Corporate Marketing Activity", "Dynamics", "RegusQA", "opportunity", "0", "", "", "", "0", Date, "");

                // Logout 
                generic.Logout(driver, extentTest, testName, testDataIteration);

            }
            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }

        public static IEnumerable<object[]> RTA_24593()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        [DataTestMethod]
        /// <summary>
        /// CRM-8131
        /// </summary>
        [TestCategory("HotFix"), TestCategory("HF")]
        [TestProperty("TestcaseID", "RTA-24593")]

        [DynamicData(nameof(RTA_24593), DynamicDataSourceType.Method)]
        public void RTA24593_VerifyProductselectedupdateinAdvFind(DataRow Ro)
        {
            //try
            //{
            // Login as IWG Sales Agent
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            string now = System.DateTime.Now.ToString();
            string newdate = DateTime.Today.ToString("MM/dd/yyyy").Replace("-", "/");
            string Date = DateTime.Today.ToString("yyyy-MM-dd");

            //Create new Contact with Country and city
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
            string lastname = generic.CreateNewContactforPayloadVerification(driver, extentTest, testDataIteration, testName, Ro["Contactname"].ToString(), now, Ro["Email"].ToString(), "");
            string contactname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());

            //Click Opportunity and create new Opp
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, "New");
            string people = "6";
            generic.CreateNewOpportunityEntetrprisewithprevcontact1(driver, extentTest, testDataIteration, testName, Ro["P1TestChannel"].ToString(), Ro["MajorSource"].ToString(), Ro["MinorSource"].ToString(), contactname, Ro["BussinessCentre"].ToString(), people);
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());
            string oppname = Element(driver, Control("OppReference", "EnterpriseSales")).GetAttribute("title");

            //Click on Adv Find
            string parent = driver.CurrentWindowHandle;
            generic.AdvancedFind(driver, extentTest, testName, testDataIteration);
            ThinkTime(2);
            generic.Advancedfindfilteresults(driver, extentTest, testName, testDataIteration, "Opportunities", "[new]", "Reference", "Equals", oppname, "Results", "pro_productselected");
            generic.Verifycolumnstatusinadvfind(driver, extentTest, testName, testDataIteration, "Yes");
            driver.Close();
            driver.SwitchTo().Window(parent);
            generic.AddingProductinOpp(driver, extentTest, testName, testDataIteration, "", "");

            string parent1 = driver.CurrentWindowHandle;
            generic.AdvancedFind(driver, extentTest, testName, testDataIteration);
            ThinkTime(2);
            generic.Advancedfindfilteresults(driver, extentTest, testName, testDataIteration, "Opportunities", "[new]", "Reference", "Equals", oppname, "Results", "pro_productselected");
            generic.Verifycolumnstatusinadvfind(driver, extentTest, testName, testDataIteration, "No");
            driver.Close();
            driver.SwitchTo().Window(parent1);

            generic.AddingProductinOpp(driver, extentTest, testName, testDataIteration, "", "Day Office");

            string parent2 = driver.CurrentWindowHandle;
            generic.AdvancedFind(driver, extentTest, testName, testDataIteration);
            ThinkTime(2);
            generic.Advancedfindfilteresults(driver, extentTest, testName, testDataIteration, "Opportunities", "[new]", "Reference", "Equals", oppname, "Results", "pro_productselected");
            generic.Verifycolumnstatusinadvfind(driver, extentTest, testName, testDataIteration, "Yes");
            driver.Close();
            driver.SwitchTo().Window(parent2);

            // Logout 
            generic.Logout(driver, extentTest, testName, testDataIteration);

            //}
            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}
        }






        public static IEnumerable<object[]> RTA_18379()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        [DataTestMethod]
        /// <summary>
        /// Test Method to To verify Sales Director can open the list of cities in the location.
        /// </summary>
        [TestCategory("Sprint42.1"), TestCategory("14102020"), TestCategory("25Nov1")]
        [TestProperty("TestcaseID", "RTA-18379")]

        [DynamicData(nameof(RTA_18379), DynamicDataSourceType.Method)]
        public void RTA18379_VerifyPayloadupdatedforPostTourCallAttended(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserNametour"].ToString(), Ro["Passwordtour"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, "Sales");
                generic.DeleteTourFn(driver, extentTest, testName, testDataIteration);
                generic.Logout(driver, extentTest, testName, testDataIteration);

                login.Loginafterlogout(driver, extentTest, testName, testDataIteration, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                string now = System.DateTime.Now.ToString();
                string newdate = DateTime.Today.ToString("MM/dd/yyyy").Replace("-", "/");
                string Date = DateTime.Today.ToString("yyyy-MM-dd");

                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
                generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
                string lastname = generic.CreateNewContactforPayloadVerification(driver, extentTest, testDataIteration, testName, Ro["Contactname"].ToString(), now, Ro["Email"].ToString(), "");
                string contactname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");
                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());
                generic.EnterContactNumber(driver, extentTest, testName, testDataIteration, "+919497852369");

                //Click Opportunity and create new Opp
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, "New");
                string people = "6";
                generic.CreateNewOpportunityEntetrprisewithprevcontact1(driver, extentTest, testDataIteration, testName, Ro["P1TestChannel"].ToString(), Ro["MajorSource"].ToString(), Ro["MinorSource"].ToString(), contactname, Ro["BussinessCentre"].ToString(), people);
                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());
                //generic.AddingProductinOpp(driver, extentTest, testName, testDataIteration);
                string oppname = Element(driver, Control("OppReference", "EnterpriseSales")).GetAttribute("title");

                //Booking a tour
                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Button"].ToString());
                string centre = Ro["BussinessCentre"].ToString();
                generic.Bookaslot(driver, extentTest, testName, testDataIteration, contactname, oppname);
                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());

                //Selecting Activities and filling values for tour outcome
                generic.SelectRelatedTab(driver, extentTest, testName, testDataIteration, Ro["P1RelatedField2"].ToString());
                generic.TourOutcomeArrive(driver, extentTest, testName, testDataIteration, Ro["CreatedTour"].ToString(), Ro["P1show"].ToString());
                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());

                // Select Activities tab and choose Dialer Post tour attended Comm Request
                generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, "Activities");
                generic.selectRequiredActivitty(driver, extentTest, testName, testDataIteration, Ro["P1posttournattendeddialer"].ToString());

                //Verifying Payload response Request not processed
                generic.payloadnavigate(driver, extentTest, testName, testDataIteration);
                generic.VerifyDialerHotleadsPayloadupdated(driver, extentTest, testName, testDataIteration, "New", lastname, "+91 94978 52369", "", "Singapore Standard Time", "Manila", "Open", "Completed", "", "CRM.Test3@RegusGroupServices.onmicrosoft.com", "Philippines", "Regus", "UK English", "Day Office", "POST-TOUR", "Corporate Client", "Corporate Marketing Activity", "Dynamics", "RegusQA", "opportunity", "0", "", "", "", "0", Date, "");

                // Logout 
                generic.Logout(driver, extentTest, testName, testDataIteration);

            }
            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }


        public static IEnumerable<object[]> RTA_18381()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        [DataTestMethod]
        /// <summary>
        /// Test Method to To verify Sales Director can open the list of cities in the location.
        /// </summary>
        [TestCategory("Sales Director"), TestCategory("Regression"), TestCategory("Sprint42.1"), TestCategory("CRM-7012"), TestCategory("25Nov1"), TestCategory("2810")]
        [TestProperty("TestcaseID", "RTA-18381")]

        [DynamicData(nameof(RTA_18381), DynamicDataSourceType.Method)]
        public void RTA18381_VerifyPayloadupdatedforPostTourCallNoShow(DataRow Ro)
        {
            try
            {
                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserNametour"].ToString(), Ro["Passwordtour"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, "Sales");
                generic.DeleteTourFn(driver, extentTest, testName, testDataIteration);
                generic.Logout(driver, extentTest, testName, testDataIteration);

                login.Loginafterlogout(driver, extentTest, testName, testDataIteration, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                string now = System.DateTime.Now.ToString();
                string newdate = DateTime.Today.ToString("MM/dd/yyyy").Replace("-", "/");
                string Date = DateTime.Today.ToString("yyyy-MM-dd");

                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
                generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
                string lastname = generic.CreateNewContactforPayloadVerification(driver, extentTest, testDataIteration, testName, Ro["Contactname"].ToString(), now, Ro["Email"].ToString(), "");
                string contactname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");
                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());
                generic.EnterContactNumber(driver, extentTest, testName, testDataIteration, "+919497852369");

                //Click Opportunity and create new Opp
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, "New");
                string people = "6";
                generic.CreateNewOpportunityEntetrprisewithprevcontact1(driver, extentTest, testDataIteration, testName, Ro["P1TestChannel"].ToString(), Ro["MajorSource"].ToString(), Ro["MinorSource"].ToString(), contactname, Ro["BussinessCentre"].ToString(), people);
                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());
                //generic.AddingProductinOpp(driver, extentTest, testName, testDataIteration);
                string oppname = Element(driver, Control("OppReference", "EnterpriseSales")).GetAttribute("title");

                //Booking a tour
                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Button"].ToString());
                string centre = Ro["BussinessCentre"].ToString();
                generic.Bookaslot(driver, extentTest, testName, testDataIteration, contactname, oppname);
                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());

                //Selecting Activities and filling values for tour outcome
                generic.SelectRelatedTab(driver, extentTest, testName, testDataIteration, Ro["P1RelatedField2"].ToString());
                generic.TourOutcomeArrive(driver, extentTest, testName, testDataIteration, Ro["CreatedTour"].ToString(), Ro["SelectValue"].ToString());
                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());

                // Select Activities tab and choose Dialer Post tour attended Comm Request
                generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, "Activities");
                generic.selectRequiredActivitty(driver, extentTest, testName, testDataIteration, Ro["ActivityTitle2"].ToString());

                //Verifying Payload response Request not processed
                generic.payloadnavigate(driver, extentTest, testName, testDataIteration);
                generic.VerifyDialerHotleadsPayloadupdated(driver, extentTest, testName, testDataIteration, "New", lastname, "+91 94978 52369", "", "Singapore Standard Time", "Manila", "Open", "Completed", "", "CRM.Test3@RegusGroupServices.onmicrosoft.com", "Philippines", "Regus", "UK English", "Day Office", "POST-TOUR", "Corporate Client", "Corporate Marketing Activity", "Dynamics", "RegusQA", "opportunity", "0", "", "", "", "0", Date, "");

                // Go back to Opportunity
                generic.Backtooppotunity(driver, extentTest, testName, testDataIteration);
                generic.SelectOpportunityheader(driver, extentTest, testName, testDataIteration, Ro["LostButton"].ToString(), "Form:opportunity");
                generic.CloseasLostWon(driver, extentTest, testName, testDataIteration, Ro["Lost"].ToString(), Ro["Status Reason Lost"].ToString(), Ro["Closelostwonpopup"].ToString());
                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());

                // Select Activities tab and choose Dialer
                generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, "Activities");
                generic.selectRequiredActivitty(driver, extentTest, testName, testDataIteration, "Nurture");
                //Verifying Payload response Request not processed
                generic.payloadnavigate(driver, extentTest, testName, testDataIteration);
                generic.VerifyDialerHotleadsPayloadupdated(driver, extentTest, testName, testDataIteration, "New", lastname, "+91 94978 52369", "", "Singapore Standard Time", "Manila", "Lost", "", "", "CRM.Test3@RegusGroupServices.onmicrosoft.com", "Philippines", "Regus", "UK English", "Day Office", "", "Corporate Client", "Corporate Marketing Activity", "Dynamics", "RegusQA", "opportunity", "0", "", "", "", "0", Date, "");

                // Logout 
                generic.Logout(driver, extentTest, testName, testDataIteration);

            }
            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }
        }

        public static IEnumerable<object[]> RTA_23299()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        [DataTestMethod]
        /// <summary>
        /// Test Method to To verify Scheduled call 
        /// </summary>
        [TestCategory("Sales Director"), TestCategory("Regression"), TestCategory("Sprint42.1"), TestCategory("25Nov1")]
        [TestProperty("TestcaseID", "RTA-23299")]

        [DynamicData(nameof(RTA_23299), DynamicDataSourceType.Method)]
        public void RTA23299_VerifyScheduledcallbackCommRequest(DataRow Ro)
        {
            //try
            //{
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            string newdate = DateTime.Today.ToString("MM/dd/yyyy").Replace("-", "/");
            string Date = DateTime.Today.ToString("yyyy-MM-dd");
            Console.WriteLine(Date);
            string now = System.DateTime.Now.ToString();



            //Creating new Contact
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
            string time = System.DateTime.Now.ToString();
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
            string lastname = generic.CreateNewContactforPayloadVerification(driver, extentTest, testDataIteration, testName, Ro["Contactname"].ToString(), now, Ro["Email"].ToString(), "");
            string contactname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");
            generic.SelectOpportunityheader(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString(), "Form:contact");
            //  generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());
            generic.scrollDownOpportunity(driver, extentTest, testName, testDataIteration);

            generic.EnterContactNumber(driver, extentTest, testName, testDataIteration, "+919497852369");

            //Click Opportunity and create new Opp
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, "New");
            string people = "6";
            generic.CreateNewOpportunityEntetrprisewithprevcontact1(driver, extentTest, testDataIteration, testName, Ro["P1TestChannel"].ToString(), Ro["MajorSource"].ToString(), Ro["MinorSource"].ToString(), contactname, Ro["BussinessCentre"].ToString(), people);
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());
            string oppname = Element(driver, Control("OppReference", "EnterpriseSales")).GetAttribute("title");

            //Creating new phonecall activity
            generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, Ro["Tab"].ToString());
            generic.CreatePhoneCallactivityopp(driver, extentTest, testName, testDataIteration, Ro["ActivityButton"].ToString(), time, newdate);
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, "Refresh");

            // Select Activities tab and choose Dialer
            generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, "Activities");
            generic.selectRequiredActivitty(driver, extentTest, testName, testDataIteration, "Dialer - Scheduled Callback");

            //verifying scheduled call back request payload
            generic.payloadnavigate(driver, extentTest, testName, testDataIteration);
            generic.VerifyDialerHotleadsPayloadupdated(driver, extentTest, testName, testDataIteration, "New", lastname, "+91 94978 52369", "", "Singapore Standard Time", "Manila", "Open", "", "", "CRM.Test3@RegusGroupServices.onmicrosoft.com", "Philippines", "Regus", "UK English", "Day Office", "", "Corporate Client", "Corporate Marketing Activity", "Dynamics", "RegusUAT", "opportunity", "0", "", "", "", "0", Date, "");

            // Go back to Opportunity
            generic.Backtooppotunity(driver, extentTest, testName, testDataIteration);
            //Open Activity 
            generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, "Activities");
            generic.selectRequiredActivitty(driver, extentTest, testName, testDataIteration, time);

            generic.ChangeCallfromField(driver, extentTest, testName, testDataIteration, "CRM Test 18");


            //// Search for the Opp and go to Activity
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "All Opportunities");
            generic.SearchforRecord(driver, extentTest, testName, testDataIteration, oppname);
            generic.SelectingActiveCell(driver, extentTest, testName, testDataIteration);
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());

            // Select Activities tab and choose Dialer
            generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, "Activities");
            generic.selectRequiredActivitty(driver, extentTest, testName, testDataIteration, "Dialer - Scheduled Callback");

            generic.payloadnavigate(driver, extentTest, testName, testDataIteration);
            generic.VerifyDialerHotleadsPayloadupdated(driver, extentTest, testName, testDataIteration, "New", lastname, "+91 94978 52369", "", "Singapore Standard Time", "Manila", "Open", "", "", "CRM.Test18@RegusGroupServices.onmicrosoft.com", "Philippines", "Regus", "UK English", "Day Office", "", "Corporate Client", "Corporate Marketing Activity", "Dynamics", "RegusUAT", "opportunity", "0", "", "", "", "0", Date, "");

            // Logout 
            generic.Logout(driver, extentTest, testName, testDataIteration);
            //    }

            //                catch (Exception e)
            //                {

            //                    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}

        }


        public static IEnumerable<object[]> RTA_26633()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        [DataTestMethod]
        /// <summary>
        /// CRM-8835: Test Method to To verify Scheduled call cust due date afetr create and update
        /// </summary>
        [TestCategory("HotFix"), TestCategory("HFrerun")]
        [TestProperty("TestcaseID", "RTA-26633")]

        [DynamicData(nameof(RTA_26633), DynamicDataSourceType.Method)]
        public void RTA26633_Verifywhetherduedateisupdatedincommreq(DataRow Ro)
        {
            //try
            //{
            // Login as IWG Sales Agent
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            string newdate = DateTime.Today.ToString("M/d/yyyy").Replace("-", "/");
            string Date = DateTime.Today.ToString("yyyy-MM-dd");
            Console.WriteLine(Date);
            string now = System.DateTime.Now.ToString();

            //    //Creating new Contact
            //    generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
            //    string time = System.DateTime.Now.ToString();
            //    generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
            //    string lastname = generic.CreateNewContactforPayloadVerification(driver, extentTest, testDataIteration, testName, Ro["Contactname"].ToString(), now, Ro["Email"].ToString(), "");
            //    string contactname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");
            //    generic.SelectOpportunityheader(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString(), "Form:contact");
            //    //  generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());
            //    generic.scrollDownOpportunity(driver, extentTest, testName, testDataIteration);
            //    generic.EnterContactNumber(driver, extentTest, testName, testDataIteration, "+919497852369");

            //    //Click Opportunity and create new Opp
            //    generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            //    generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, "New");
            //    string people = "6";
            //    generic.CreateNewOpportunityEntetrprisewithprevcontact1(driver, extentTest, testDataIteration, testName, Ro["P1TestChannel"].ToString(), Ro["MajorSource"].ToString(), Ro["MinorSource"].ToString(), contactname, Ro["BussinessCentre"].ToString(), people);
            //generic.UpdateStartDate(driver, extentTest, testDataIteration, testName, Ro["SelectMonthFeb"].ToString(), Ro["SelectDateFeb"].ToString());



            //generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());
            //    string oppname = Element(driver, Control("OppReference", "EnterpriseSales")).GetAttribute("title");

            //    //Creating new phonecall activity
            //    generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, Ro["Tab"].ToString());
            //    generic.CreatePhoneCallactivityopp(driver, extentTest, testName, testDataIteration, Ro["ActivityButton"].ToString(), time, newdate);
            //    generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, "Refresh");

            //    // Select Activities tab and choose Dialer
            //    generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, "Activities");
            //    generic.selectRequiredActivitty(driver, extentTest, testName, testDataIteration, "Dialer - Scheduled Callback");

            //    //verifying scheduled call back request payload
            //    generic.payloadnavigate(driver, extentTest, testName, testDataIteration);
            //    generic.VerifyDialerHotleadsPayloadupdated(driver, extentTest, testName, testDataIteration, "New", lastname, "+91 94978 52369", "", "Singapore Standard Time", "Manila", "Open", "", "", "CRM.Test3@RegusGroupServices.onmicrosoft.com", "Philippines", "Regus", "UK English", "Day Office", "", "Corporate Client", "Corporate Marketing Activity", "Dynamics", "RegusUAT", "opportunity", "0", "", "", "", "0", now, Date+"T08:00:00Z");
            //    // Go back to Opportunity
            //    generic.Backtooppotunity(driver, extentTest, testName, testDataIteration);

            //    // Go to Adv Find and verify whether customer due date field is uopdated
            //    string parent = driver.CurrentWindowHandle;
            //    generic.AdvancedFind(driver, extentTest, testName, testDataIteration);
            //    ThinkTime(2);
            //    generic.Advancedfindfilteresults(driver, extentTest, testName, testDataIteration, "Phone Calls", "[new]", "Opportunity", "Equals",oppname, "Results", "pro_customerduedate");                
            //    generic.Verifycolumnstatusinadvfind(driver, extentTest, testName, testDataIteration, newdate+" 8:00 AM");
            //    driver.Close();
            //    driver.SwitchTo().Window(parent);

            ////Open Activity 
            //generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);


            //generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, "Activities");
            //generic.selectRequiredActivitty(driver, extentTest, testName, testDataIteration, time);
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
            generic.Updateduedate(driver, extentTest, testName, testDataIteration, "10");

            //// Search for the Opp and go to Activity
            //generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            //generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "All Opportunities");
            //generic.SearchforRecord(driver, extentTest, testName, testDataIteration, oppname);
            //generic.SelectingActiveCell(driver, extentTest, testName, testDataIteration);
            //generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());
            //generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());

            //// Select Activities tab and choose Dialer
            //driver.Navigate().Back();
            //generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, "Activities");
            //    generic.selectRequiredActivitty(driver, extentTest, testName, testDataIteration, "Dialer - Scheduled Callback");

            //    generic.payloadnavigate(driver, extentTest, testName, testDataIteration);
            //    generic.VerifyDialerHotleadsPayloadupdated(driver, extentTest, testName, testDataIteration, "New", lastname, "+91 94978 52369", "", "Singapore Standard Time", "Manila", "Open", "", "", "CRM.Test3@RegusGroupServices.onmicrosoft.com", "Philippines", "Regus", "UK English", "Day Office", "", "Corporate Client", "Corporate Marketing Activity", "Dynamics", "RegusUAT", "opportunity", "0", "", "", "", "0", Date, Date + "T10:00:00Z");

            //    // Go to Adv Find and verify whether customer due date field is uopdated
            //    string parent1 = driver.CurrentWindowHandle;
            //    generic.AdvancedFind(driver, extentTest, testName, testDataIteration);
            //    ThinkTime(2);
            //    generic.Advancedfindfilteresults(driver, extentTest, testName, testDataIteration, "Phone Calls", "[new]", "Opportunity", "Equals", oppname, "Results", "pro_customerduedate");
            //    generic.Verifycolumnstatusinadvfind(driver, extentTest, testName, testDataIteration, newdate+" 10:00 AM");
            //    driver.Close();
            //    driver.SwitchTo().Window(parent1);

            //    // Logout 
            //    generic.Logout(driver, extentTest, testName, testDataIteration);
            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}

        }








        /*
        /// CRM-6254

        /// </summary>

        [TestCategory(""), TestCategory("GlobalP11"), TestCategory("Regression")]

        [TestProperty("TestcaseID", "RTA-19")]

        public static IEnumerable<object[]> RTA_5848_Data()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
    [DataTestMethod]
    [DynamicData(nameof(RTA_5848_Data), DynamicDataSourceType.Method)]
        public void RTA_19_VerifycommRqstTourRshdld(DataRow Ro)
        {
            try

            {

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());

            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());

            string Date = DateTime.Today.ToString("dd-MM-yyyy");
            DateTime Now = DateTime.Now;
            string Time = Date + Convert.ToString(Now.Hour) + Convert.ToString(Now.Millisecond);

            string emailid = "AutomatCompany" + Time + "@gmail.com";
            string centre = "Stuttgart, Konigstrasse";
            string now = System.DateTime.Now.ToString();

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            string Date = DateTime.Today.ToString("dd-MM-yyyy");
            DateTime Now = DateTime.Now;
            string Time = Date + Convert.ToString(Now.Hour) + Convert.ToString(Now.Millisecond);
            string emailid = "AutomatCompany" + Time + "@gmail.com";

            //Create new Opportunity for Book a tour//
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.HidingPureCloud(driver, extentTest, testName, testDataIteration);
            string contactname = generic.CreateNewcontactOpportunity(driver, extentTest, testName, testDataIteration, Ro["BussinessCentre2"].ToString(), Ro["Language1"].ToString(), emailid);
            string oppname = Element(driver, Control("OppReference", "EnterpriseSales")).GetAttribute("title");

            //Verifying Opportunity status and Language
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());
            generic.VerifyOppStatusandLanguage(driver, extentTest, testName, testDataIteration, Ro["UKEnglish"].ToString());

            //Booking a tour
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Button"].ToString());
            string centre = Ro["BussinessCentre1"].ToString();
            generic.Bookaslot(driver, extentTest, testName, testDataIteration, contactname, centre);
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());
            ///// changing contact preference
            generic.OPPdonotsend(driver, extentTest, testName, testDataIteration, "Yes");


            //Selecting Activities and filling values for tour outcome
            generic.SelectRelatedTab(driver, extentTest, testName, testDataIteration, Ro["P1RelatedField2"].ToString());

            //generic.SelectActiveCellContacts(driver, extentTest, testName, testDataIteration);

            generic.TourOutcomeArrive(driver, extentTest, testName, testDataIteration, Ro["CreatedTour"].ToString(), Ro["P1show"].ToString());
            //generic.BacktooppotunityfromTourpage(driver, extentTest, testName, testDataIteration);


            //Navigating to activities not present
            generic.SelectRelatedTab(driver, extentTest, testName, testDataIteration, Ro["P1RelatedField1"].ToString());
            generic.selectRequiredActivitty(driver, extentTest, testName, testDataIteration, Ro["posttourDNCrqst"].ToString());
    >>>>>>> 8b4f05773ffe3bff0d4216277f020c39f08eaaf4

            //Verifying Payload response Request not processed
            generic.payloadnavigate(driver, extentTest, testName, testDataIteration);
            generic.payloadverifyrqstnotprocessed(driver, extentTest, testName, testDataIteration, Ro["Resquestnotprocessed"].ToString());

    <<<<<<< HEAD
            // Select Contacts entity and create new
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
            generic.CreateNewContactITSaleswithlanguageandemail(driver, extentTest, testDataIteration, testName, "TestContact", now, emailid, Ro["CompanyName"].ToString());
            string contactname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");

            //Creating new Opp
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
            string People = "6";
            generic.CreateNewOpportunityExistingcontact(driver, extentTest, testDataIteration, testName, Ro["P1TestChannel"].ToString(), Ro["MajorSource"].ToString(), Ro["P1Minorsource"].ToString(), contactname, centre, People);

            string oppname = Element(driver, Control("OppReference", "EnterpriseSales")).GetAttribute("title");

            // Refresh the page
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());

            // Close as Lost
            generic.SelectOpportunityheader(driver, extentTest, testName, testDataIteration, "Close as Lost", "Form:opportunity");
            ThinkTime(3);

            WaitUntil(driver, Control("StatusReasonlostwon", "Opportunity"), 30);
            Element(driver, Control("StatusReasonlostwon", "Opportunity")).Click();
            ThinkTime(5);
            //Select(Element(driver, Control("StatusReasonlostwon", "Opportunity"))).SelectByText("Incorrect / Invalid contact details");
            //ThinkTime(2);

            Element(driver, Control("Saveregardingaccount", "Opportunity")).Click();
            ThinkTime(2);

            //Navigating to activities and verifying language in payload
            generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, Ro["Tab"].ToString());
            generic.VerifynurturecommreqNo(driver, extentTest, testName, testDataIteration, "Nurture");



    =======
            login.Logout(driver, extentTest, testName, testDataIteration);
            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }

        }           login.Logout(driver, extentTest, testName, testDataIteration);
        }
            catch (Exception e)
            {
                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");

                Type thisType = this.GetType();


                object testCall = this;

                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");


            }
        }
    */
        /*   ///CRM-3365
           /// </summary>
           [TestCategory("Regression"), TestCategory("GlobalP1_S2")]
           [TestProperty("TestcaseID", "RTA-8")]
           public static IEnumerable<object[]> RTA_5848_Data()
           {
               foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
               {
                   yield return new object[] { row };
            }
        }
    [DataTestMethod]
    [DynamicData(nameof(RTA_5848_Data), DynamicDataSourceType.Method)]
           public void RTA_8_verifyday0nocontactspaces(DataRow Ro)
           {
               try
               {
                   string Date = DateTime.Today.ToString("dd-MM-yyyy");
                   DateTime Now = DateTime.Now;
                   string Time = Date + Convert.ToString(Now.Hour) + Convert.ToString(Now.Millisecond);
                   string emailid = "AutomatCompany" + Time + "@gmail.com";

                   login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                   generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                   string now = System.DateTime.Now.ToString();
                   generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);

                   // Select Contacts entity and create new
                   generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
                   generic.CreateNewContactITSaleswithlanguageandemail(driver, extentTest, testDataIteration, testName, "TestContact", now, emailid, Ro["CompanyName"].ToString());
                   string contactname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");

                   //Creating new Opp
                   generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                   generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
                   generic.CreateNewOpportunityExistingcontact(driver, extentTest, testDataIteration, testName, Ro["P1TestChannel"].ToString(), Ro["MajorSource"].ToString(), Ro["P1Minorsource"].ToString(), contactname, Ro["spacesbrand"].ToString(), "4");

                   string oppname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");


                   ThinkTime(20);
                   // Refresh the page
                   generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());

                   ThinkTime(3);
                   generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());
                   ThinkTime(2);
                   generic.AssignRecordAnotherUser(driver, extentTest, testName, testDataIteration, Ro["AssignTo"].ToString(), "CRM Test 20");
                   generic.VerifyAssignedUserActivity(driver, extentTest, testName, testDataIteration, "CRM Test 20");


                   generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, Ro["Tab"].ToString());

                   //Verifying Opportunity status and Language
                   generic.selectRequiredActivitty(driver, extentTest, testName, testDataIteration, "Dialer - Hot Leads");

                   //Verifying Payload fields
                   generic.payloadnavigate(driver, extentTest, testName, testDataIteration);
                   generic.payloadverification(driver, extentTest, testName, testDataIteration, "", "", "CRM.Test20@RegusGroupServices.onmicrosoft.com", "");

                   login.Logout(driver, extentTest, testName, testDataIteration);
               }

               catch (Exception e)
               {

                   AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                   Type thisType = this.GetType();
                   object testCall = this;
                   ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

               }

           }*/
        /*
                // <summary>
                ///CRM-3365
                /// </summary>
                [TestCategory("Regression"), TestCategory("GlobalP1_S2")]
                [TestProperty("TestcaseID", "RTA-9")]
                public static IEnumerable<object[]> RTA_5848_Data()
                {
                    foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
                    {
                        yield return new object[] { row };
            }
        }
        [DataTestMethod]
    [DynamicData(nameof(RTA_5848_Data), DynamicDataSourceType.Method)]
                public void RTA_9_verifyday0nocontactspaces(DataRow Ro)
                {
                    try
                    {
                        string Date = DateTime.Today.ToString("dd-MM-yyyy");
                        DateTime Now = DateTime.Now;
                        string Time = Date + Convert.ToString(Now.Hour) + Convert.ToString(Now.Millisecond);
                        string emailid = "AutomatCompany" + Time + "@gmail.com";

                        login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                        generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                        string now = System.DateTime.Now.ToString();
                        generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);

                        // Select Contacts entity and create new
                        generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
                        generic.CreateNewContactITSaleswithlanguageandemail(driver, extentTest, testDataIteration, testName, "TestContact", now, emailid, Ro["CompanyName"].ToString());
                        string contactname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");

                        //Creating new Opp
                        generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                        generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
                        generic.CreateNewOpportunityExistingcontact(driver, extentTest, testDataIteration, testName, Ro["P1TestChannel"].ToString(), Ro["MajorSource"].ToString(), Ro["P1Minorsource"].ToString(), contactname, Ro["spacesbrand"].ToString(), "4");

                        string oppname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");


                        ThinkTime(20);
                        // Refresh the page
                        generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());

                        ThinkTime(3);
                        generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());
                        ThinkTime(2);
                        generic.AssignRecordAnotherUser(driver, extentTest, testName, testDataIteration, Ro["AssignTo"].ToString(), "Barcelona Sales Danish");
                        generic.VerifyAssignedUserActivity(driver, extentTest, testName, testDataIteration, "Barcelona Sales Danish");


                        generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, Ro["Tab"].ToString());

                        //Verifying Opportunity status and Language

                        generic.selectRequiredActivitty(driver, extentTest, testName, testDataIteration, "Dialer - Hot Leads");

                        //Verifying Payload fields
                        generic.payloadnavigate(driver, extentTest, testName, testDataIteration);
                        generic.payloadverification(driver, extentTest, testName, testDataIteration, "", "", "", "Barcelona Sales Danish");

                        login.Logout(driver, extentTest, testName, testDataIteration);
                    }

                    catch (Exception e)
                    {

                        AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                        Type thisType = this.GetType();
                        object testCall = this;
                        ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

                    }

                }*/

        public static IEnumerable<object[]> RTA_17800()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }

        /// <summary>
        /// TEST [CRM-6769] Verify that if a Scheduled Phone Call is updated to a future date, the related Comm Request is also updated
        /// </summary>
        [TestCategory("CRM-6769"), TestCategory("Regression"), TestCategory("Sprint42.1"), TestCategory("25Nov1")]
        [TestProperty("TestcaseID", "RTA-17800")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_17800), DynamicDataSourceType.Method)]

        public void RTA_17800_phonecallactivityfurturedateupdate(DataRow Ro)
        {
            //try
            //{

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            string newdate = DateTime.Today.ToString("MM/dd/yyyy").Replace("-", "/");
            //string newFormat = DateTime.ParseExact(newdate, "'M'-'d'-'yyyy'", CultureInfo.InvariantCulture).ToString("yyyy-MM-dd");
            string newFormat = DateTime.Today.ToString("yyyy-MM-dd");
            Console.WriteLine(newFormat);

            //Creating new Contact
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
            string time = System.DateTime.Now.ToString();
            generic.CreateNewContactEnterpriseSales1(driver, extentTest, testDataIteration, testName, Ro["Contactname"].ToString(), time);
            string contactname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");

            //Creating new Opp
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
            generic.CreateNewOpportunityEntetrprisewithprevcontact(driver, extentTest, testDataIteration, testName, Ro["TestChannel"].ToString(), Ro["TestMajorSource"].ToString(), Ro["TestMinorSource"].ToString(), contactname, Ro["spacesbrand"].ToString());
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());
            string reference = generic.GetReferenceIDOpportunity(driver, extentTest, testName, testDataIteration);


            //Creating new phonecall activity
            generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, Ro["Tab"].ToString());
            generic.CreatePhoneCallactivityopp(driver, extentTest, testName, testDataIteration, Ro["ActivityButton"].ToString(), time, newdate);
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());

            // Select Activities tab and choose Dialer
            generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, "Activities");
            generic.selectRequiredActivitty(driver, extentTest, testName, testDataIteration, "Dialer - Scheduled Callback");

            //Payload verification
            generic.payloadnavigate(driver, extentTest, testName, testDataIteration);
            // generic.VerifyDailerPosttour(driver, extentTest, testName, testDataIteration, contactname, newFormat);
            generic.VerifyDailerScheduleddate(driver, extentTest, testName, testDataIteration, contactname, "", newFormat);


            // Go back to Opportunity
            generic.Backtooppotunity(driver, extentTest, testName, testDataIteration);
            //Open Activity and set future date
            generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, "Activities");
            generic.selectRequiredActivitty(driver, extentTest, testName, testDataIteration, time);
            //generic.SelectingActiverequest(driver, extentTest, testName, testDataIteration);
            DateTime myDate = DateTime.Now;
            DateTime prevOne = myDate.AddDays(1);
            string furturedate = prevOne.ToString("MM/dd/yyyy").Replace("-", "/");
            string furturenewFormat = prevOne.ToString("yyyy-MM-dd");

            //Cahnging due date to a future date
            generic.duedateinactivity(driver, extentTest, testName, testDataIteration, furturedate);

            // Search for the Opp and go to Activity
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "All Opportunities");
            generic.SearchforRecord(driver, extentTest, testName, testDataIteration, reference);
            generic.SelectingActiveCell(driver, extentTest, testName, testDataIteration);
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());

            // Select Activities tab and choose Dialer
            generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, "Activities");
            generic.selectRequiredActivitty(driver, extentTest, testName, testDataIteration, "Dialer - Scheduled Callback");

            generic.payloadnavigate(driver, extentTest, testName, testDataIteration);
            //generic.VerifyDailerPosttour(driver, extentTest, testName, testDataIteration, contactname, furturenewFormat);
            generic.VerifyDailerScheduleddate(driver, extentTest, testName, testDataIteration, contactname, "", furturenewFormat);

            login.Logout(driver, extentTest, testName, testDataIteration);

            //    }

            //        catch (Exception e)
            //        {

            //            AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}

        }
        public static IEnumerable<object[]> RTA_17801()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }

        /// <summary>
        /// TEST [CRM-6769] Verify that if a Scheduled Phone Call is updated to an earlier date, the related Comm Request is also updated
        /// </summary>
        [TestCategory("CRM-6769"), TestCategory("Regression"), TestCategory("Sprint42.1"), TestCategory("1410")]
        [TestProperty("TestcaseID", "RTA-17801")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_17801), DynamicDataSourceType.Method)]

        public void RTA_17801_phonecallactivityfurturedateupdate(DataRow Ro)
        {
            //try
            //{
            string newdate = DateTime.Today.ToString("MM/dd/yyyy").Replace("-", "/");
            string newFormat = DateTime.Today.ToString("yyyy-MM-dd");
            Console.WriteLine(newFormat);
            DateTime myDate = DateTime.Now;
            DateTime prevOne = myDate.AddDays(2);
            string furturedate = prevOne.ToString("MM/dd/yyyy").Replace("-", "/");
            string furturenewFormat = prevOne.ToString("yyyy-MM-dd");

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());

            //Creating new Contact
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
            string time = System.DateTime.Now.ToString();
            generic.CreateNewContactEnterpriseSales1(driver, extentTest, testDataIteration, testName, Ro["Contactname"].ToString(), time);
            string contactname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");

            //Creating new Opp
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
            generic.CreateNewOpportunityEntetrprisewithprevcontact(driver, extentTest, testDataIteration, testName, Ro["TestChannel"].ToString(), Ro["TestMajorSource"].ToString(), Ro["TestMinorSource"].ToString(), contactname, Ro["spacesbrand"].ToString());
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());
            string reference = generic.GetReferenceIDOpportunity(driver, extentTest, testName, testDataIteration);

            //Creating new phonecall activity
            generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, Ro["Tab"].ToString());
            generic.CreatePhoneCallactivityopp(driver, extentTest, testName, testDataIteration, Ro["ActivityButton"].ToString(), time, furturedate);
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());

            // Select Activities tab and choose Dialer
            generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, "Activities");
            generic.selectRequiredActivitty(driver, extentTest, testName, testDataIteration, "Dialer - Scheduled Callback");


            //Payload verification
            generic.payloadnavigate(driver, extentTest, testName, testDataIteration);
            // generic.VerifyDailerPosttour(driver, extentTest, testName, testDataIteration, contactname, newFormat);
            generic.VerifyDailerScheduleddate(driver, extentTest, testName, testDataIteration, contactname, "", furturenewFormat);

            // Go back to Opportunity
            generic.Backtooppotunity(driver, extentTest, testName, testDataIteration);
            //Open Activity and set future date
            generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, "Activities");
            generic.selectRequiredActivitty(driver, extentTest, testName, testDataIteration, time);

            //Cahnging due date to a future date
            generic.duedateinactivity(driver, extentTest, testName, testDataIteration, newdate);

            // Search for the Opp and go to Activity
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "All Opportunities");
            generic.SearchforRecord(driver, extentTest, testName, testDataIteration, reference);
            generic.SelectingActiveCell(driver, extentTest, testName, testDataIteration);
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());

            // Select Activities tab and choose Dialer
            generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, "Activities");
            generic.selectRequiredActivitty(driver, extentTest, testName, testDataIteration, "Dialer - Scheduled Callback");

            generic.payloadnavigate(driver, extentTest, testName, testDataIteration);
            //generic.VerifyDailerPosttour(driver, extentTest, testName, testDataIteration, contactname, newFormat);
            generic.VerifyDailerScheduleddate(driver, extentTest, testName, testDataIteration, contactname, "", newFormat);

            login.Logout(driver, extentTest, testName, testDataIteration);

            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}

        }
        public static IEnumerable<object[]> RTA_17803()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }

        /// <summary>
        /// TEST [CRM-6769] Verify that if a Scheduled Phone Call is updated to an earlier date, the related Comm Request is also updated
        /// </summary>
        [TestCategory("CRM-6769"), TestCategory("Regression"), TestCategory("Sprint42.1"), TestCategory("14102020")]
        [TestProperty("TestcaseID", "RTA-17803")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_17803), DynamicDataSourceType.Method)]

        public void RTA_17803_phonecallactivitycancell(DataRow Ro)
        {
            try
            {
                string newdate = DateTime.Today.ToString("MM/dd/yyyy").Replace("-", "/");
                string newFormat = DateTime.Today.ToString("yyyy-MM-dd");
                Console.WriteLine(newFormat);
                DateTime myDate = DateTime.Now;
                DateTime prevOne = myDate.AddDays(2);
                string furturedate = prevOne.ToString("MM/dd/yyyy").Replace("-", "/");
                string furturenewFormat = prevOne.ToString("yyyy-MM-dd");

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());

                //Creating new Contact
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
                string time = System.DateTime.Now.ToString();
                generic.CreateNewContactEnterpriseSales1(driver, extentTest, testDataIteration, testName, Ro["Contactname"].ToString(), time);
                string contactname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");

                //Creating new Opp
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
                generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
                generic.CreateNewOpportunityEntetrprisewithprevcontact(driver, extentTest, testDataIteration, testName, Ro["TestChannel"].ToString(), Ro["TestMajorSource"].ToString(), Ro["TestMinorSource"].ToString(), contactname, Ro["spacesbrand"].ToString());
                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());
                string reference = generic.GetReferenceIDOpportunity(driver, extentTest, testName, testDataIteration);

                //Creating new phonecall activity
                generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, Ro["Tab"].ToString());
                generic.CreatePhoneCallactivityopp(driver, extentTest, testName, testDataIteration, Ro["ActivityButton"].ToString(), time, furturedate);
                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());

                // Select Activities tab and choose Dialer
                generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, "Activities");
                generic.selectRequiredActivitty(driver, extentTest, testName, testDataIteration, "Dialer - Scheduled Callback");

                //Payload verification
                generic.payloadnavigate(driver, extentTest, testName, testDataIteration);
                // generic.VerifyDailerPosttour(driver, extentTest, testName, testDataIteration, contactname, newFormat);
                generic.VerifyDailerScheduleddate(driver, extentTest, testName, testDataIteration, contactname, "", furturenewFormat);

                // Go back to Opportunity
                generic.Backtooppotunity(driver, extentTest, testName, testDataIteration);
                //Open Activity and set future date
                generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, "Activities");
                generic.selectRequiredActivitty(driver, extentTest, testName, testDataIteration, time);


                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["CancelButtonPhoneCall"].ToString());
                generic.cancelphonecall(driver, extentTest, testDataIteration, testName, Ro["Close"].ToString(), Ro["Status"].ToString());

                // Search for the Opp and go to Activity
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "All Opportunities");
                generic.SearchforRecord(driver, extentTest, testName, testDataIteration, reference);
                generic.SelectingActiveCell(driver, extentTest, testName, testDataIteration);
                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());

                // Select Activities tab and choose Dialer
                generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, "Activities");
                generic.selectRequiredActivitty(driver, extentTest, testName, testDataIteration, "Dialer - Scheduled Callback");

                //generic.payloadnavigate(driver, extentTest, testName, testDataIteration);
                //generic.VerifyDailerPosttour(driver, extentTest, testName, testDataIteration, contactname, "DELETE");
                //generic.VerifyDailerScheduleddate(driver, extentTest, testName, testDataIteration, contactname, "", "DELETE");
                generic.VerifyCRActionDelete(driver, extentTest, testName, testDataIteration);

                login.Logout(driver, extentTest, testName, testDataIteration);

            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }

        }

        public static IEnumerable<object[]> RTA24394()
        {
            foreach (DataRow row in getTestCaseList("DirectSalesAgent"))
            {
                yield return new object[] { row };
            }
        }

        /// <summary>
        /// CRM-7989

        /// </summary>
        [TestCategory("HotFix"), TestCategory("HF")]
        [TestProperty("TestcaseID", "RTA-24394")]

        [DataTestMethod]
        [DynamicData(nameof(RTA24394), DynamicDataSourceType.Method)]
        public void RTA24394_DirectSales_emailfilterinfunnel(DataRow Ro)
        {
            //try
            //{
            // Login as Direct Sales Agent and choose Sales
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);

            // Select IWG Direct Agent Activity dashboard
            generic.SelectValuesFromDashboardDropDown(driver, extentTest, testName, testDataIteration, "IWG Direct Agent Activity dashboard");
            // generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
            generic.scrollMiddleDashboard(driver, extentTest, testName, testDataIteration, "Scroll");

            // Go to My unread emaisl 
            generic.navigatetoemailrecordsfromdashboard(driver, extentTest, testName, testDataIteration);

            // Verify adv filters
            generic.advancefunnelclick(driver, extentTest, testName, testDataIteration);
            generic.advancefiltercusemailpagefield(driver, extentTest, testName, testDataIteration);

            login.Logout(driver, extentTest, testName, testDataIteration);

            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}

        }
        public static IEnumerable<object[]> RTA24403()
        {
            foreach (DataRow row in getTestCaseList("DirectSalesAgent"))
            {
                yield return new object[] { row };
            }
        }

        /// <summary>
        /// CRM-7989

        /// </summary>
        [TestCategory("HotFix"), TestCategory("HF")]
        [TestProperty("TestcaseID", "RTA-24403")]

        [DataTestMethod]
        [DynamicData(nameof(RTA24403), DynamicDataSourceType.Method)]
        public void RTA24403_DirectSales_emailfilterinfunnel(DataRow Ro)
        {
            //try
            //{
            // Login as Direct Sales Agent and choose Sales
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            //generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);

            // Select Dashboards
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity5"].ToString());
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);

            // Select IWG Direct Agent Activity dashboard
            generic.SelectValuesFromDashboardDropDown(driver, extentTest, testName, testDataIteration, "IWG Direct Agent Activity dashboard");
            // generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);

            // Open My tEams unread emails
            //generic.scrollVerticalMiddleafter(driver, extentTest, testName, testDataIteration);
            generic.scrollMiddleDashboard(driver, extentTest, testName, testDataIteration, "Scroll");
            generic.SelectValuesFromunreadmaildropdwn(driver, extentTest, testName, testDataIteration, "My Unread Emails from Customers", "My Team’s Unread Emails from Customers");
            generic.navigatetoemailrecordsfromdashboard(driver, extentTest, testName, testDataIteration);

            // Verify the adv filters
            generic.advancefunnelclick(driver, extentTest, testName, testDataIteration);
            generic.advancefiltercusemailpagefield(driver, extentTest, testName, testDataIteration);

            // Logout
            login.Logout(driver, extentTest, testName, testDataIteration);





            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}

        }
        public static IEnumerable<object[]> RTA_24706()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// [CRM-7816]: To verify the Advanced Find filters are modified inside My Sales Assist for last calendar month
        /// </summary>

        [TestCategory("HotFix")]
        [TestProperty("TestcaseID", "RTA-24706")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_24706), DynamicDataSourceType.Method)]
        public void RTA_24706_dashboardfilter(DataRow Ro)
        {
            try
            {

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());

                // Select Dashboards
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);

                // Select IWG Direct Agent Performance dashboard
                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "My Sales Assist for this calendar month");
                generic.DashAdvFiltersclick(driver, extentTest, testName, testDataIteration);
                generic.filterverification(driver, extentTest, testName, testDataIteration);
                login.Logout(driver, extentTest, testName, testDataIteration);
            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }

        }
        public static IEnumerable<object[]> RTA_25190()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        /// <summary>
        /// TEST - Verify that records with Did Prospect Arrive No are not available on the view "My Potential Sales Assist for this month" view.
        /// </summary>

        [TestCategory("Regression")]
        [TestProperty("TestcaseID", "RTA-25190")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_25190), DynamicDataSourceType.Method)]
        public void RTA_25190_dashboardfilter(DataRow Ro)
        {
            try
            {

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());

                // Select Dashboards
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
                generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);

                // Select IWG Direct Agent Performance dashboard
                generic.SelectValuesFromDropDown(driver, extentTest, testName, testDataIteration, "My Potential Sales Assist for this calendar month");
                generic.DashAdvFiltersclick(driver, extentTest, testName, testDataIteration);
                generic.potentialfilterverification(driver, extentTest, testName, testDataIteration);
                login.Logout(driver, extentTest, testName, testDataIteration);
            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }

        }

        public static IEnumerable<object[]> RTA_25847()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }

        /// </summary>
        /// TEST [CRM-8639] Verify that the Dynamics provided a warning message if the Country code is missing in Business Phone Number and Mobile Phone number while creating the lead
        [TestCategory("HotFix"), TestCategory("HF")]
        [TestProperty("TestcaseID", "RTA-25847")]
        [DataTestMethod]
        [DynamicData(nameof(RTA_25847), DynamicDataSourceType.Method)]
        public void RTA_25847_verifybussinessphoneerrormsgonleadform(DataRow Ro)
        {
            //try
            //{
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity3"].ToString());

            //generic.SelectingActiveCell(driver, extentTest, testName, testDataIteration);
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
            // Select lead 
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity2"].ToString());
            string time = System.DateTime.Now.ToString();
            string now = System.DateTime.Now.ToString();
            generic.createnewleadwithphonenumbers(driver, extentTest, testName, testDataIteration, "Lead" + now, Ro["Email"].ToString(), " 7985312636", " 7985312636", Ro["Source"].ToString(), Ro["MajorSource"].ToString(), Ro["MinorSource2"].ToString(), now, "NewContact", "", "", "", "", "Alberta");
            generic.VerifyPhonefielderrormessage(driver, extentTest, testName, testDataIteration);
            generic.upsatephnefieldsinleadform(driver, extentTest, testName, testDataIteration, Ro["BussinessPhone"].ToString(), Ro["BussinessPhone"].ToString());

            generic.NavigateToRelatedTabEntitiesLead(driver, extentTest, testName, testDataIteration, "Opportunities");
            generic.OppSelect(driver, extentTest, testName, testDataIteration);

            // Refresh the page
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());
            generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, "Activities");
            generic.VerifyActivityTitlepresent(driver, extentTest, testName, testDataIteration, "Dialer - Hot Leads");
            login.Logout(driver, extentTest, testName, testDataIteration);

            //}

            //catch (Exception e)
            //{

            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
            //    Type thisType = this.GetType();
            //    object testCall = this;
            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            //}

        }
        #region vignesh


        public static IEnumerable<object[]> RTA_29233()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        [DataTestMethod]
        /// <summary>
        ///TEST [CRM-9626] Verify that a US Lead (TZ = Central Standard Time) will send the correct "Time Zone" parameter on the comm request payloads
        /// </summary>
        [TestCategory("HFCont"), TestCategory("HFvig")]
        [TestProperty("TestcaseID", "RTA-29233")]

        [DynamicData(nameof(RTA_29233), DynamicDataSourceType.Method)]
        public void RTA_29233_verifytimeformatq(DataRow Ro)
        {
            try
            {
                // Login as IWG Sales Agent

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity3"].ToString());

                //generic.SelectingActiveCell(driver, extentTest, testName, testDataIteration);
                generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
                // Select lead 
                string newdate = DateTime.Today.ToString("MM/dd/yyyy").Replace("-", "/");
                string time = System.DateTime.Now.ToString();
                string now = System.DateTime.Now.ToString();
                string contatname = "Lead" + now;
                string emailid = "timeformat@mailinator.com";
                generic.createnewleadwithphonenumbers(driver, extentTest, testName, testDataIteration, contatname, emailid, "+1-312-555-0158", " +1-312-555-0158", Ro["Source"].ToString(), Ro["MajorSource"].ToString(), Ro["MinorSource2"].ToString(), now, "NewContact", "", "", "", "", "Alberta, Calgary - Crowfoot Centre");
                generic.VerifyPhonefielderrormessage(driver, extentTest, testName, testDataIteration);
                generic.upsatephnefieldsinleadform(driver, extentTest, testName, testDataIteration, "+1-312-555-0158", "+1-312-555-0158");

                generic.NavigateToRelatedTabEntitiesLead(driver, extentTest, testName, testDataIteration, "Opportunities");
                generic.OppSelect(driver, extentTest, testName, testDataIteration);

                // Refresh the page
                ThinkTime(2);
                string oppname = Element(driver, Control("OppReference", "EnterpriseSales")).GetAttribute("title");
                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());
                generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, "Activities");
                generic.selectRequiredActivitty(driver, extentTest, testName, testDataIteration, "Dialer - Hot Leads");

                //verifying scheduled call back request payload
                //Verifying Payload fields
                generic.payloadnavigate(driver, extentTest, testName, testDataIteration);
                generic.payloadverification(driver, extentTest, testName, testDataIteration, "", "", "Central Standard Time", "");

                // Go back to Opportunity
                generic.Backtooppotunity(driver, extentTest, testName, testDataIteration);

                //Book tour for No-show
                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Button"].ToString());
                generic.Bookaslot(driver, extentTest, testName, testDataIteration, contatname, oppname);
                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());



                //Selecting Activities and filling values for tour outcome
                generic.SelectRelatedTab(driver, extentTest, testName, testDataIteration, Ro["P1RelatedField2"].ToString());

                //generic.SelectActiveCellContacts(driver, extentTest, testName, testDataIteration);

                generic.TourOutcomeArrive(driver, extentTest, testName, testDataIteration, Ro["CreatedTour"].ToString(), Ro["P1noshow"].ToString());



                //Navigating to activities not present
                generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, Ro["Tab"].ToString());

                generic.selectRequiredActivitty(driver, extentTest, testName, testDataIteration, Ro["Psttournocontact"].ToString());

                //Verifying Payload response Request not processed
                generic.payloadnavigate(driver, extentTest, testName, testDataIteration);
                generic.payloadverification(driver, extentTest, testName, testDataIteration, "", "", "Central Standard Time", "");

                // Go back to Opportunity
                generic.Backtooppotunity(driver, extentTest, testName, testDataIteration);

                //Book tour for Attended
                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Button"].ToString());
                generic.Bookaslot(driver, extentTest, testName, testDataIteration, contatname, oppname);
                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());



                //Selecting Activities and filling values for tour outcome
                generic.SelectRelatedTab(driver, extentTest, testName, testDataIteration, Ro["P1RelatedField2"].ToString());
                generic.TourOutcome(driver, extentTest, testName, testDataIteration, Ro["ActivityTitle1"].ToString(), Ro["P1show"].ToString(), Ro["P1showreason"].ToString());
                generic.SelectRelatedTab(driver, extentTest, testName, testDataIteration, Ro["P1RelatedField1"].ToString());

                //Navigating to activities and verifying language in payload
                generic.searchrequest(driver, extentTest, testName, testDataIteration, Ro["P1posttournattended"].ToString());
                generic.posttourcommrequestverify(driver, extentTest, testName, testDataIteration, Ro["P1posttournattended"].ToString());
                generic.SelectingActiverequest(driver, extentTest, testName, testDataIteration);

                //Verifying Payload response Request not processed
                generic.payloadnavigate(driver, extentTest, testName, testDataIteration);
                generic.payloadverification(driver, extentTest, testName, testDataIteration, "", "", "Central Standard Time", "");

                // Go back to Opportunity
                generic.Backtooppotunity(driver, extentTest, testName, testDataIteration);

                //Dialer - Scheduled Callback
                //Creating new phonecall activity
                generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, Ro["Tab"].ToString());
                generic.CreatePhoneCallactivityopp(driver, extentTest, testName, testDataIteration, Ro["ActivityButton"].ToString(), time, newdate);
                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, "Refresh");

                // Select Activities tab and choose Dialer
                generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, "Activities");
                generic.selectRequiredActivitty(driver, extentTest, testName, testDataIteration, "Dialer - Scheduled Callback");
                //Verifying Payload response Request not processed
                generic.payloadnavigate(driver, extentTest, testName, testDataIteration);
                generic.payloadverification(driver, extentTest, testName, testDataIteration, "", "", "Central Standard Time", "");
                // Go back to Opportunity
                generic.Backtooppotunity(driver, extentTest, testName, testDataIteration);
                //Nurture
                // Close as Lost
                generic.SelectOpportunityheader(driver, extentTest, testName, testDataIteration, "Close as Lost", "Form:opportunity");
                ThinkTime(3);

                WaitUntil(driver, Control("StatusReasonlostwon", "Opportunity"), 30);
                Element(driver, Control("StatusReasonlostwon", "Opportunity")).Click();
                ThinkTime(5);
                Select(Element(driver, Control("StatusReasonlostwon", "Opportunity"))).SelectByText("Project cancelled");
                ThinkTime(2);
                //   Element(driver, Control("OpporunityValue", "Incorrect / Invalid contact details", "Opportunity")).Click();
                ThinkTime(2);
                Element(driver, Control("Saveregardingaccount", "Opportunity")).Click();
                ThinkTime(2);

                //Navigating to activities and verifying language in payload
                generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, Ro["Tab"].ToString());
                generic.VerifynurturecommreqYes(driver, extentTest, testName, testDataIteration, "Nurture");


                generic.selectRequiredActivitty(driver, extentTest, testName, testDataIteration, "Nurture");

                //Verifying Payload response Request  processed
                generic.payloadnavigate(driver, extentTest, testName, testDataIteration);
                generic.payloadverification(driver, extentTest, testName, testDataIteration, "", "", "Central Standard Time", "");
                // Logout 
                generic.Logout(driver, extentTest, testName, testDataIteration);
            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }

        }
        public static IEnumerable<object[]> RTA_29237()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        [DataTestMethod]
        /// <summary>
        ///TEST [CRM-9626] Verify that a US Lead (TZ = Eastern Standard Time) will send the correct "Time Zone" parameter on the comm request payloads
        /// </summary>
        [TestCategory("HFCont"), TestCategory("HFvig")]
        [TestProperty("TestcaseID", "RTA-29237")]

        [DynamicData(nameof(RTA_29237), DynamicDataSourceType.Method)]
        public void RTA_29237_verifytimeformatq(DataRow Ro)
        {
            try
            {
                // Login as IWG Sales Agent

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity3"].ToString());

                //generic.SelectingActiveCell(driver, extentTest, testName, testDataIteration);
                generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
                // Select lead 
                string newdate = DateTime.Today.ToString("MM/dd/yyyy").Replace("-", "/");
                string time = System.DateTime.Now.ToString();
                string now = System.DateTime.Now.ToString();
                string contatname = "Lead" + now;
                string emailid = "timeformat@mailinator.com";
                generic.createnewleadwithphonenumbers(driver, extentTest, testName, testDataIteration, contatname, emailid, "+1-212-555-0178", "+1-212-555-0178", Ro["Source"].ToString(), Ro["MajorSource"].ToString(), Ro["MinorSource2"].ToString(), now, "NewContact", "", "", "", "", "Alberta, Calgary - Crowfoot Centre");
                generic.VerifyPhonefielderrormessage(driver, extentTest, testName, testDataIteration);
                generic.upsatephnefieldsinleadform(driver, extentTest, testName, testDataIteration, "+1-212-555-0178", "+1-212-555-0178");

                generic.NavigateToRelatedTabEntitiesLead(driver, extentTest, testName, testDataIteration, "Opportunities");
                generic.OppSelect(driver, extentTest, testName, testDataIteration);

                // Refresh the page
                ThinkTime(2);
                string oppname = Element(driver, Control("OppReference", "EnterpriseSales")).GetAttribute("title");
                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());
                generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, "Activities");
                generic.selectRequiredActivitty(driver, extentTest, testName, testDataIteration, "Dialer - Hot Leads");

                //verifying scheduled call back request payload
                //Verifying Payload fields
                generic.payloadnavigate(driver, extentTest, testName, testDataIteration);
                generic.payloadverification(driver, extentTest, testName, testDataIteration, "", "", "Eastern Standard Time", "");

                // Go back to Opportunity
                generic.Backtooppotunity(driver, extentTest, testName, testDataIteration);

                //Book tour for No-show
                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Button"].ToString());
                generic.Bookaslot(driver, extentTest, testName, testDataIteration, contatname, oppname);
                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());



                //Selecting Activities and filling values for tour outcome
                generic.SelectRelatedTab(driver, extentTest, testName, testDataIteration, Ro["P1RelatedField2"].ToString());

                //generic.SelectActiveCellContacts(driver, extentTest, testName, testDataIteration);

                generic.TourOutcomeArrive(driver, extentTest, testName, testDataIteration, Ro["CreatedTour"].ToString(), Ro["P1noshow"].ToString());



                //Navigating to activities not present
                generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, Ro["Tab"].ToString());

                generic.selectRequiredActivitty(driver, extentTest, testName, testDataIteration, Ro["Psttournocontact"].ToString());

                //Verifying Payload response Request not processed
                generic.payloadnavigate(driver, extentTest, testName, testDataIteration);
                generic.payloadverification(driver, extentTest, testName, testDataIteration, "", "", "Eastern Standard Time", "");

                // Go back to Opportunity
                generic.Backtooppotunity(driver, extentTest, testName, testDataIteration);

                //Book tour for Attended
                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Button"].ToString());
                generic.Bookaslot(driver, extentTest, testName, testDataIteration, contatname, oppname);
                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());



                //Selecting Activities and filling values for tour outcome
                generic.SelectRelatedTab(driver, extentTest, testName, testDataIteration, Ro["P1RelatedField2"].ToString());
                generic.TourOutcome(driver, extentTest, testName, testDataIteration, Ro["ActivityTitle1"].ToString(), Ro["P1show"].ToString(), Ro["P1showreason"].ToString());
                generic.SelectRelatedTab(driver, extentTest, testName, testDataIteration, Ro["P1RelatedField1"].ToString());

                //Navigating to activities and verifying language in payload
                generic.searchrequest(driver, extentTest, testName, testDataIteration, Ro["P1posttournattended"].ToString());
                generic.posttourcommrequestverify(driver, extentTest, testName, testDataIteration, Ro["P1posttournattended"].ToString());
                generic.SelectingActiverequest(driver, extentTest, testName, testDataIteration);

                //Verifying Payload response Request not processed
                generic.payloadnavigate(driver, extentTest, testName, testDataIteration);
                generic.payloadverification(driver, extentTest, testName, testDataIteration, "", "", "Eastern Standard Time", "");

                // Go back to Opportunity
                generic.Backtooppotunity(driver, extentTest, testName, testDataIteration);

                //Dialer - Scheduled Callback
                //Creating new phonecall activity
                generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, Ro["Tab"].ToString());
                generic.CreatePhoneCallactivityopp(driver, extentTest, testName, testDataIteration, Ro["ActivityButton"].ToString(), time, newdate);
                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, "Refresh");

                // Select Activities tab and choose Dialer
                generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, "Activities");
                generic.selectRequiredActivitty(driver, extentTest, testName, testDataIteration, "Dialer - Scheduled Callback");
                //Verifying Payload response Request not processed
                generic.payloadnavigate(driver, extentTest, testName, testDataIteration);
                generic.payloadverification(driver, extentTest, testName, testDataIteration, "", "", "Eastern Standard Time", "");
                // Go back to Opportunity
                generic.Backtooppotunity(driver, extentTest, testName, testDataIteration);
                //Nurture
                // Close as Lost
                generic.SelectOpportunityheader(driver, extentTest, testName, testDataIteration, "Close as Lost", "Form:opportunity");
                ThinkTime(3);

                WaitUntil(driver, Control("StatusReasonlostwon", "Opportunity"), 30);
                Element(driver, Control("StatusReasonlostwon", "Opportunity")).Click();
                ThinkTime(5);
                Select(Element(driver, Control("StatusReasonlostwon", "Opportunity"))).SelectByText("Project cancelled");
                ThinkTime(2);
                //   Element(driver, Control("OpporunityValue", "Incorrect / Invalid contact details", "Opportunity")).Click();
                ThinkTime(2);
                Element(driver, Control("Saveregardingaccount", "Opportunity")).Click();
                ThinkTime(2);

                //Navigating to activities and verifying language in payload
                generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, Ro["Tab"].ToString());
                generic.VerifynurturecommreqYes(driver, extentTest, testName, testDataIteration, "Nurture");


                generic.selectRequiredActivitty(driver, extentTest, testName, testDataIteration, "Nurture");

                //Verifying Payload response Request  processed
                generic.payloadnavigate(driver, extentTest, testName, testDataIteration);
                generic.payloadverification(driver, extentTest, testName, testDataIteration, "", "", "Eastern Standard Time", "");
                // Logout 
                generic.Logout(driver, extentTest, testName, testDataIteration);
            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }

        }
        public static IEnumerable<object[]> RTA_29242()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        [DataTestMethod]
        /// <summary>
        ///TEST [CRM-9626] Verify that a US Lead (TZ = Hawaiian Standard Time) will send the correct "Time Zone" parameter on the comm request payloads
        /// </summary>
        [TestCategory("HFCont"), TestCategory("HFvig")]
        [TestProperty("TestcaseID", "RTA-29242")]

        [DynamicData(nameof(RTA_29242), DynamicDataSourceType.Method)]
        public void RTA_29242_verifytimeformatq(DataRow Ro)
        {
            try
            {
                // Login as IWG Sales Agent

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity3"].ToString());

                //generic.SelectingActiveCell(driver, extentTest, testName, testDataIteration);
                generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
                // Select lead 
                string newdate = DateTime.Today.ToString("MM/dd/yyyy").Replace("-", "/");
                string time = System.DateTime.Now.ToString();
                string now = System.DateTime.Now.ToString();
                string contatname = "Lead" + now;
                string emailid = "timeformat@mailinator.com";
                generic.createnewleadwithphonenumbers(driver, extentTest, testName, testDataIteration, contatname, emailid, "+1-808-555-0150", "+1-808-555-0150", Ro["Source"].ToString(), Ro["MajorSource"].ToString(), Ro["MinorSource2"].ToString(), now, "NewContact", "", "", "", "", "Alberta, Calgary - Crowfoot Centre");
                generic.VerifyPhonefielderrormessage(driver, extentTest, testName, testDataIteration);
                generic.upsatephnefieldsinleadform(driver, extentTest, testName, testDataIteration, "+1-808-555-0150", "+1-808-555-0150");

                generic.NavigateToRelatedTabEntitiesLead(driver, extentTest, testName, testDataIteration, "Opportunities");
                generic.OppSelect(driver, extentTest, testName, testDataIteration);

                // Refresh the page
                ThinkTime(2);
                string oppname = Element(driver, Control("OppReference", "EnterpriseSales")).GetAttribute("title");
                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());
                generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, "Activities");
                generic.selectRequiredActivitty(driver, extentTest, testName, testDataIteration, "Dialer - Hot Leads");

                //verifying scheduled call back request payload
                //Verifying Payload fields
                generic.payloadnavigate(driver, extentTest, testName, testDataIteration);
                generic.payloadverification(driver, extentTest, testName, testDataIteration, "", "", "Hawaiian Standard Time", "");

                // Go back to Opportunity
                generic.Backtooppotunity(driver, extentTest, testName, testDataIteration);

                //Book tour for No-show
                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Button"].ToString());
                generic.Bookaslot(driver, extentTest, testName, testDataIteration, contatname, oppname);
                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());



                //Selecting Activities and filling values for tour outcome
                generic.SelectRelatedTab(driver, extentTest, testName, testDataIteration, Ro["P1RelatedField2"].ToString());

                //generic.SelectActiveCellContacts(driver, extentTest, testName, testDataIteration);

                generic.TourOutcomeArrive(driver, extentTest, testName, testDataIteration, Ro["CreatedTour"].ToString(), Ro["P1noshow"].ToString());



                //Navigating to activities not present
                generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, Ro["Tab"].ToString());

                generic.selectRequiredActivitty(driver, extentTest, testName, testDataIteration, Ro["Psttournocontact"].ToString());

                //Verifying Payload response Request not processed
                generic.payloadnavigate(driver, extentTest, testName, testDataIteration);
                generic.payloadverification(driver, extentTest, testName, testDataIteration, "", "", "Hawaiian Standard Time", "");

                // Go back to Opportunity
                generic.Backtooppotunity(driver, extentTest, testName, testDataIteration);

                //Book tour for Attended
                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Button"].ToString());
                generic.Bookaslot(driver, extentTest, testName, testDataIteration, contatname, oppname);
                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());



                //Selecting Activities and filling values for tour outcome
                generic.SelectRelatedTab(driver, extentTest, testName, testDataIteration, Ro["P1RelatedField2"].ToString());
                generic.TourOutcome(driver, extentTest, testName, testDataIteration, Ro["ActivityTitle1"].ToString(), Ro["P1show"].ToString(), Ro["P1showreason"].ToString());
                generic.SelectRelatedTab(driver, extentTest, testName, testDataIteration, Ro["P1RelatedField1"].ToString());

                //Navigating to activities and verifying language in payload
                generic.searchrequest(driver, extentTest, testName, testDataIteration, Ro["P1posttournattended"].ToString());
                generic.posttourcommrequestverify(driver, extentTest, testName, testDataIteration, Ro["P1posttournattended"].ToString());
                generic.SelectingActiverequest(driver, extentTest, testName, testDataIteration);

                //Verifying Payload response Request not processed
                generic.payloadnavigate(driver, extentTest, testName, testDataIteration);
                generic.payloadverification(driver, extentTest, testName, testDataIteration, "", "", "Hawaiian Standard Time", "");

                // Go back to Opportunity
                generic.Backtooppotunity(driver, extentTest, testName, testDataIteration);

                //Dialer - Scheduled Callback
                //Creating new phonecall activity
                generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, Ro["Tab"].ToString());
                generic.CreatePhoneCallactivityopp(driver, extentTest, testName, testDataIteration, Ro["ActivityButton"].ToString(), time, newdate);
                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, "Refresh");

                // Select Activities tab and choose Dialer
                generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, "Activities");
                generic.selectRequiredActivitty(driver, extentTest, testName, testDataIteration, "Dialer - Scheduled Callback");
                //Verifying Payload response Request not processed
                generic.payloadnavigate(driver, extentTest, testName, testDataIteration);
                generic.payloadverification(driver, extentTest, testName, testDataIteration, "", "", "Hawaiian Standard Time", "");
                // Go back to Opportunity
                generic.Backtooppotunity(driver, extentTest, testName, testDataIteration);
                //Nurture
                // Close as Lost
                generic.SelectOpportunityheader(driver, extentTest, testName, testDataIteration, "Close as Lost", "Form:opportunity");
                ThinkTime(3);

                WaitUntil(driver, Control("StatusReasonlostwon", "Opportunity"), 30);
                Element(driver, Control("StatusReasonlostwon", "Opportunity")).Click();
                ThinkTime(5);
                Select(Element(driver, Control("StatusReasonlostwon", "Opportunity"))).SelectByText("Project cancelled");
                ThinkTime(2);
                //   Element(driver, Control("OpporunityValue", "Incorrect / Invalid contact details", "Opportunity")).Click();
                ThinkTime(2);
                Element(driver, Control("Saveregardingaccount", "Opportunity")).Click();
                ThinkTime(2);

                //Navigating to activities and verifying language in payload
                generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, Ro["Tab"].ToString());
                generic.VerifynurturecommreqYes(driver, extentTest, testName, testDataIteration, "Nurture");


                generic.selectRequiredActivitty(driver, extentTest, testName, testDataIteration, "Nurture");

                //Verifying Payload response Request  processed
                generic.payloadnavigate(driver, extentTest, testName, testDataIteration);
                generic.payloadverification(driver, extentTest, testName, testDataIteration, "", "", "Hawaiian Standard Time", "");
                // Logout 
                generic.Logout(driver, extentTest, testName, testDataIteration);
            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }

        }
        public static IEnumerable<object[]> RTA_29244()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        [DataTestMethod]
        /// <summary>
        ///TEST [CRM-9626] Verify that a US Lead (TZ = Mountain Standard Time) will send the correct "Time Zone" parameter on the comm request payloads
        /// </summary>
        [TestCategory("HFCont"), TestCategory("HFvig")]
        [TestProperty("TestcaseID", "RTA-29244")]

        [DynamicData(nameof(RTA_29244), DynamicDataSourceType.Method)]
        public void RTA_29244_verifytimeformatq(DataRow Ro)
        {
            try
            {
                // Login as IWG Sales Agent

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity3"].ToString());

                //generic.SelectingActiveCell(driver, extentTest, testName, testDataIteration);
                generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
                // Select lead 
                string newdate = DateTime.Today.ToString("MM/dd/yyyy").Replace("-", "/");
                string time = System.DateTime.Now.ToString();
                string now = System.DateTime.Now.ToString();
                string contatname = "Lead" + now;
                string emailid = "timeformat@mailinator.com";
                generic.createnewleadwithphonenumbers(driver, extentTest, testName, testDataIteration, contatname, emailid, "+1-480-555-0122", "+1-480-555-0122", Ro["Source"].ToString(), Ro["MajorSource"].ToString(), Ro["MinorSource2"].ToString(), now, "NewContact", "", "", "", "", "Alberta, Calgary - Crowfoot Centre");
                generic.VerifyPhonefielderrormessage(driver, extentTest, testName, testDataIteration);
                generic.upsatephnefieldsinleadform(driver, extentTest, testName, testDataIteration, "+1-480-555-0122", "+1-480-555-0122");

                generic.NavigateToRelatedTabEntitiesLead(driver, extentTest, testName, testDataIteration, "Opportunities");
                generic.OppSelect(driver, extentTest, testName, testDataIteration);

                // Refresh the page
                ThinkTime(2);
                string oppname = Element(driver, Control("OppReference", "EnterpriseSales")).GetAttribute("title");
                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());
                generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, "Activities");
                generic.selectRequiredActivitty(driver, extentTest, testName, testDataIteration, "Dialer - Hot Leads");

                //verifying scheduled call back request payload
                //Verifying Payload fields
                generic.payloadnavigate(driver, extentTest, testName, testDataIteration);
                generic.payloadverification(driver, extentTest, testName, testDataIteration, "", "", "Mountain Standard Time", "");

                // Go back to Opportunity
                generic.Backtooppotunity(driver, extentTest, testName, testDataIteration);

                //Book tour for No-show
                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Button"].ToString());
                generic.Bookaslot(driver, extentTest, testName, testDataIteration, contatname, oppname);
                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());



                //Selecting Activities and filling values for tour outcome
                generic.SelectRelatedTab(driver, extentTest, testName, testDataIteration, Ro["P1RelatedField2"].ToString());

                //generic.SelectActiveCellContacts(driver, extentTest, testName, testDataIteration);

                generic.TourOutcomeArrive(driver, extentTest, testName, testDataIteration, Ro["CreatedTour"].ToString(), Ro["P1noshow"].ToString());



                //Navigating to activities not present
                generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, Ro["Tab"].ToString());

                generic.selectRequiredActivitty(driver, extentTest, testName, testDataIteration, Ro["Psttournocontact"].ToString());

                //Verifying Payload response Request not processed
                generic.payloadnavigate(driver, extentTest, testName, testDataIteration);
                generic.payloadverification(driver, extentTest, testName, testDataIteration, "", "", "Mountain Standard Time", "");

                // Go back to Opportunity
                generic.Backtooppotunity(driver, extentTest, testName, testDataIteration);

                //Book tour for Attended
                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Button"].ToString());
                generic.Bookaslot(driver, extentTest, testName, testDataIteration, contatname, oppname);
                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());



                //Selecting Activities and filling values for tour outcome
                generic.SelectRelatedTab(driver, extentTest, testName, testDataIteration, Ro["P1RelatedField2"].ToString());
                generic.TourOutcome(driver, extentTest, testName, testDataIteration, Ro["ActivityTitle1"].ToString(), Ro["P1show"].ToString(), Ro["P1showreason"].ToString());
                generic.SelectRelatedTab(driver, extentTest, testName, testDataIteration, Ro["P1RelatedField1"].ToString());

                //Navigating to activities and verifying language in payload
                generic.searchrequest(driver, extentTest, testName, testDataIteration, Ro["P1posttournattended"].ToString());
                generic.posttourcommrequestverify(driver, extentTest, testName, testDataIteration, Ro["P1posttournattended"].ToString());
                generic.SelectingActiverequest(driver, extentTest, testName, testDataIteration);

                //Verifying Payload response Request not processed
                generic.payloadnavigate(driver, extentTest, testName, testDataIteration);
                generic.payloadverification(driver, extentTest, testName, testDataIteration, "", "", "Mountain Standard Time", "");

                // Go back to Opportunity
                generic.Backtooppotunity(driver, extentTest, testName, testDataIteration);

                //Dialer - Scheduled Callback
                //Creating new phonecall activity
                generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, Ro["Tab"].ToString());
                generic.CreatePhoneCallactivityopp(driver, extentTest, testName, testDataIteration, Ro["ActivityButton"].ToString(), time, newdate);
                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, "Refresh");

                // Select Activities tab and choose Dialer
                generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, "Activities");
                generic.selectRequiredActivitty(driver, extentTest, testName, testDataIteration, "Dialer - Scheduled Callback");
                //Verifying Payload response Request not processed
                generic.payloadnavigate(driver, extentTest, testName, testDataIteration);
                generic.payloadverification(driver, extentTest, testName, testDataIteration, "", "", "Mountain Standard Time", "");
                // Go back to Opportunity
                generic.Backtooppotunity(driver, extentTest, testName, testDataIteration);
                //Nurture
                // Close as Lost
                generic.SelectOpportunityheader(driver, extentTest, testName, testDataIteration, "Close as Lost", "Form:opportunity");
                ThinkTime(3);

                WaitUntil(driver, Control("StatusReasonlostwon", "Opportunity"), 30);
                Element(driver, Control("StatusReasonlostwon", "Opportunity")).Click();
                ThinkTime(5);
                Select(Element(driver, Control("StatusReasonlostwon", "Opportunity"))).SelectByText("Project cancelled");
                ThinkTime(2);
                //   Element(driver, Control("OpporunityValue", "Incorrect / Invalid contact details", "Opportunity")).Click();
                ThinkTime(2);
                Element(driver, Control("Saveregardingaccount", "Opportunity")).Click();
                ThinkTime(2);

                //Navigating to activities and verifying language in payload
                generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, Ro["Tab"].ToString());
                generic.VerifynurturecommreqYes(driver, extentTest, testName, testDataIteration, "Nurture");


                generic.selectRequiredActivitty(driver, extentTest, testName, testDataIteration, "Nurture");

                //Verifying Payload response Request  processed
                generic.payloadnavigate(driver, extentTest, testName, testDataIteration);
                generic.payloadverification(driver, extentTest, testName, testDataIteration, "", "", "Mountain Standard Time", "");
                // Logout 
                generic.Logout(driver, extentTest, testName, testDataIteration);
            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }

        }
        public static IEnumerable<object[]> RTA_29254()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        [DataTestMethod]
        /// <summary>
        ///TEST [CRM-9626] Verify that a US Lead (TZ = Pacific Standard Time) will send the correct "Time Zone" parameter on the comm request payloads
        /// </summary>
        [TestCategory("HFCont"), TestCategory("HFvig")]
        [TestProperty("TestcaseID", "RTA-29254")]

        [DynamicData(nameof(RTA_29254), DynamicDataSourceType.Method)]
        public void RTA_29254_verifytimeformatq(DataRow Ro)
        {
            try
            {
                // Login as IWG Sales Agent

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity3"].ToString());

                //generic.SelectingActiveCell(driver, extentTest, testName, testDataIteration);
                generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
                // Select lead 
                string newdate = DateTime.Today.ToString("MM/dd/yyyy").Replace("-", "/");
                string time = System.DateTime.Now.ToString();
                string now = System.DateTime.Now.ToString();
                string contatname = "Lead" + now;
                string emailid = "timeformat@mailinator.com";
                generic.createnewleadwithphonenumbers(driver, extentTest, testName, testDataIteration, contatname, emailid, "+1-971-555-0177", "+1-971-555-0177", Ro["Source"].ToString(), Ro["MajorSource"].ToString(), Ro["MinorSource2"].ToString(), now, "NewContact", "", "", "", "", "Alberta, Calgary - Crowfoot Centre");
                generic.VerifyPhonefielderrormessage(driver, extentTest, testName, testDataIteration);
                generic.upsatephnefieldsinleadform(driver, extentTest, testName, testDataIteration, "+1-971-555-0177", "+1-971-555-0177");

                generic.NavigateToRelatedTabEntitiesLead(driver, extentTest, testName, testDataIteration, "Opportunities");
                generic.OppSelect(driver, extentTest, testName, testDataIteration);

                // Refresh the page
                ThinkTime(2);
                string oppname = Element(driver, Control("OppReference", "EnterpriseSales")).GetAttribute("title");
                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());
                generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, "Activities");
                generic.selectRequiredActivitty(driver, extentTest, testName, testDataIteration, "Dialer - Hot Leads");

                //verifying scheduled call back request payload
                //Verifying Payload fields
                generic.payloadnavigate(driver, extentTest, testName, testDataIteration);
                generic.payloadverification(driver, extentTest, testName, testDataIteration, "", "", "Pacific Standard Time", "");

                // Go back to Opportunity
                generic.Backtooppotunity(driver, extentTest, testName, testDataIteration);

                //Book tour for No-show
                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Button"].ToString());
                generic.Bookaslot(driver, extentTest, testName, testDataIteration, contatname, oppname);
                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());



                //Selecting Activities and filling values for tour outcome
                generic.SelectRelatedTab(driver, extentTest, testName, testDataIteration, Ro["P1RelatedField2"].ToString());

                //generic.SelectActiveCellContacts(driver, extentTest, testName, testDataIteration);

                generic.TourOutcomeArrive(driver, extentTest, testName, testDataIteration, Ro["CreatedTour"].ToString(), Ro["P1noshow"].ToString());



                //Navigating to activities not present
                generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, Ro["Tab"].ToString());

                generic.selectRequiredActivitty(driver, extentTest, testName, testDataIteration, Ro["Psttournocontact"].ToString());

                //Verifying Payload response Request not processed
                generic.payloadnavigate(driver, extentTest, testName, testDataIteration);
                generic.payloadverification(driver, extentTest, testName, testDataIteration, "", "", "Pacific Standard Time", "");

                // Go back to Opportunity
                generic.Backtooppotunity(driver, extentTest, testName, testDataIteration);

                //Book tour for Attended
                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Button"].ToString());
                generic.Bookaslot(driver, extentTest, testName, testDataIteration, contatname, oppname);
                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());



                //Selecting Activities and filling values for tour outcome
                generic.SelectRelatedTab(driver, extentTest, testName, testDataIteration, Ro["P1RelatedField2"].ToString());
                generic.TourOutcome(driver, extentTest, testName, testDataIteration, Ro["ActivityTitle1"].ToString(), Ro["P1show"].ToString(), Ro["P1showreason"].ToString());
                generic.SelectRelatedTab(driver, extentTest, testName, testDataIteration, Ro["P1RelatedField1"].ToString());

                //Navigating to activities and verifying language in payload
                generic.searchrequest(driver, extentTest, testName, testDataIteration, Ro["P1posttournattended"].ToString());
                generic.posttourcommrequestverify(driver, extentTest, testName, testDataIteration, Ro["P1posttournattended"].ToString());
                generic.SelectingActiverequest(driver, extentTest, testName, testDataIteration);

                //Verifying Payload response Request not processed
                generic.payloadnavigate(driver, extentTest, testName, testDataIteration);
                generic.payloadverification(driver, extentTest, testName, testDataIteration, "", "", "Pacific Standard Time", "");

                // Go back to Opportunity
                generic.Backtooppotunity(driver, extentTest, testName, testDataIteration);

                //Dialer - Scheduled Callback
                //Creating new phonecall activity
                generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, Ro["Tab"].ToString());
                generic.CreatePhoneCallactivityopp(driver, extentTest, testName, testDataIteration, Ro["ActivityButton"].ToString(), time, newdate);
                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, "Refresh");

                // Select Activities tab and choose Dialer
                generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, "Activities");
                generic.selectRequiredActivitty(driver, extentTest, testName, testDataIteration, "Dialer - Scheduled Callback");
                //Verifying Payload response Request not processed
                generic.payloadnavigate(driver, extentTest, testName, testDataIteration);
                generic.payloadverification(driver, extentTest, testName, testDataIteration, "", "", "Pacific Standard Time", "");
                // Go back to Opportunity
                generic.Backtooppotunity(driver, extentTest, testName, testDataIteration);
                //Nurture
                // Close as Lost
                generic.SelectOpportunityheader(driver, extentTest, testName, testDataIteration, "Close as Lost", "Form:opportunity");
                ThinkTime(3);

                WaitUntil(driver, Control("StatusReasonlostwon", "Opportunity"), 30);
                Element(driver, Control("StatusReasonlostwon", "Opportunity")).Click();
                ThinkTime(5);
                Select(Element(driver, Control("StatusReasonlostwon", "Opportunity"))).SelectByText("Project cancelled");
                ThinkTime(2);
                //   Element(driver, Control("OpporunityValue", "Incorrect / Invalid contact details", "Opportunity")).Click();
                ThinkTime(2);
                Element(driver, Control("Saveregardingaccount", "Opportunity")).Click();
                ThinkTime(2);

                //Navigating to activities and verifying language in payload
                generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, Ro["Tab"].ToString());
                generic.VerifynurturecommreqYes(driver, extentTest, testName, testDataIteration, "Nurture");


                generic.selectRequiredActivitty(driver, extentTest, testName, testDataIteration, "Nurture");

                //Verifying Payload response Request  processed
                generic.payloadnavigate(driver, extentTest, testName, testDataIteration);
                generic.payloadverification(driver, extentTest, testName, testDataIteration, "", "", "Pacific Standard Time", "");
                // Logout 
                generic.Logout(driver, extentTest, testName, testDataIteration);
            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }

        }
        public static IEnumerable<object[]> RTA_29258()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        [DataTestMethod]
        /// <summary>
        ///TEST [CRM-9626] Verify that a Canada Lead (TZ = Eastern Standard Time) will send the correct "Time Zone" parameter on the comm request payloads
        /// </summary>
        [TestCategory("HFCont"), TestCategory("HFvig")]
        [TestProperty("TestcaseID", "RTA-29258")]

        [DynamicData(nameof(RTA_29258), DynamicDataSourceType.Method)]
        public void RTA_29258_verifytimeformatq(DataRow Ro)
        {
            try
            {
                // Login as IWG Sales Agent

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity3"].ToString());

                //generic.SelectingActiveCell(driver, extentTest, testName, testDataIteration);
                generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
                // Select lead 
                string newdate = DateTime.Today.ToString("MM/dd/yyyy").Replace("-", "/");
                string time = System.DateTime.Now.ToString();
                string now = System.DateTime.Now.ToString();
                string contatname = "Lead" + now;
                string emailid = "timeformat@mailinator.com";
                generic.createnewleadwithphonenumbers(driver, extentTest, testName, testDataIteration, contatname, emailid, "+1-438-555-0102", "+1-438-555-0102", Ro["Source"].ToString(), Ro["MajorSource"].ToString(), Ro["MinorSource2"].ToString(), now, "NewContact", "", "", "", "", "Alberta, Calgary - Crowfoot Centre");
                generic.VerifyPhonefielderrormessage(driver, extentTest, testName, testDataIteration);
                generic.upsatephnefieldsinleadform(driver, extentTest, testName, testDataIteration, "+1-438-555-0102", "+1-438-555-0102");

                generic.NavigateToRelatedTabEntitiesLead(driver, extentTest, testName, testDataIteration, "Opportunities");
                generic.OppSelect(driver, extentTest, testName, testDataIteration);

                // Refresh the page
                ThinkTime(2);
                string oppname = Element(driver, Control("OppReference", "EnterpriseSales")).GetAttribute("title");
                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());
                generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, "Activities");
                generic.selectRequiredActivitty(driver, extentTest, testName, testDataIteration, "Dialer - Hot Leads");

                //verifying scheduled call back request payload
                //Verifying Payload fields
                generic.payloadnavigate(driver, extentTest, testName, testDataIteration);
                generic.payloadverification(driver, extentTest, testName, testDataIteration, "", "", "Eastern Standard Time", "");

                // Go back to Opportunity
                generic.Backtooppotunity(driver, extentTest, testName, testDataIteration);

                //Book tour for No-show
                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Button"].ToString());
                generic.Bookaslot(driver, extentTest, testName, testDataIteration, contatname, oppname);
                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());



                //Selecting Activities and filling values for tour outcome
                generic.SelectRelatedTab(driver, extentTest, testName, testDataIteration, Ro["P1RelatedField2"].ToString());

                //generic.SelectActiveCellContacts(driver, extentTest, testName, testDataIteration);

                generic.TourOutcomeArrive(driver, extentTest, testName, testDataIteration, Ro["CreatedTour"].ToString(), Ro["P1noshow"].ToString());



                //Navigating to activities not present
                generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, Ro["Tab"].ToString());

                generic.selectRequiredActivitty(driver, extentTest, testName, testDataIteration, Ro["Psttournocontact"].ToString());

                //Verifying Payload response Request not processed
                generic.payloadnavigate(driver, extentTest, testName, testDataIteration);
                generic.payloadverification(driver, extentTest, testName, testDataIteration, "", "", "Eastern Standard Time", "");

                // Go back to Opportunity
                generic.Backtooppotunity(driver, extentTest, testName, testDataIteration);

                //Book tour for Attended
                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Button"].ToString());
                generic.Bookaslot(driver, extentTest, testName, testDataIteration, contatname, oppname);
                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());



                //Selecting Activities and filling values for tour outcome
                generic.SelectRelatedTab(driver, extentTest, testName, testDataIteration, Ro["P1RelatedField2"].ToString());
                generic.TourOutcome(driver, extentTest, testName, testDataIteration, Ro["ActivityTitle1"].ToString(), Ro["P1show"].ToString(), Ro["P1showreason"].ToString());
                generic.SelectRelatedTab(driver, extentTest, testName, testDataIteration, Ro["P1RelatedField1"].ToString());

                //Navigating to activities and verifying language in payload
                generic.searchrequest(driver, extentTest, testName, testDataIteration, Ro["P1posttournattended"].ToString());
                generic.posttourcommrequestverify(driver, extentTest, testName, testDataIteration, Ro["P1posttournattended"].ToString());
                generic.SelectingActiverequest(driver, extentTest, testName, testDataIteration);

                //Verifying Payload response Request not processed
                generic.payloadnavigate(driver, extentTest, testName, testDataIteration);
                generic.payloadverification(driver, extentTest, testName, testDataIteration, "", "", "Eastern Standard Time", "");

                // Go back to Opportunity
                generic.Backtooppotunity(driver, extentTest, testName, testDataIteration);

                //Dialer - Scheduled Callback
                //Creating new phonecall activity
                generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, Ro["Tab"].ToString());
                generic.CreatePhoneCallactivityopp(driver, extentTest, testName, testDataIteration, Ro["ActivityButton"].ToString(), time, newdate);
                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, "Refresh");

                // Select Activities tab and choose Dialer
                generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, "Activities");
                generic.selectRequiredActivitty(driver, extentTest, testName, testDataIteration, "Dialer - Scheduled Callback");
                //Verifying Payload response Request not processed
                generic.payloadnavigate(driver, extentTest, testName, testDataIteration);
                generic.payloadverification(driver, extentTest, testName, testDataIteration, "", "", "Eastern Standard Time", "");
                // Go back to Opportunity
                generic.Backtooppotunity(driver, extentTest, testName, testDataIteration);
                //Nurture
                // Close as Lost
                generic.SelectOpportunityheader(driver, extentTest, testName, testDataIteration, "Close as Lost", "Form:opportunity");
                ThinkTime(3);

                WaitUntil(driver, Control("StatusReasonlostwon", "Opportunity"), 30);
                Element(driver, Control("StatusReasonlostwon", "Opportunity")).Click();
                ThinkTime(5);
                Select(Element(driver, Control("StatusReasonlostwon", "Opportunity"))).SelectByText("Project cancelled");
                ThinkTime(2);
                //   Element(driver, Control("OpporunityValue", "Incorrect / Invalid contact details", "Opportunity")).Click();
                ThinkTime(2);
                Element(driver, Control("Saveregardingaccount", "Opportunity")).Click();
                ThinkTime(2);

                //Navigating to activities and verifying language in payload
                generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, Ro["Tab"].ToString());
                generic.VerifynurturecommreqYes(driver, extentTest, testName, testDataIteration, "Nurture");


                generic.selectRequiredActivitty(driver, extentTest, testName, testDataIteration, "Nurture");

                //Verifying Payload response Request  processed
                generic.payloadnavigate(driver, extentTest, testName, testDataIteration);
                generic.payloadverification(driver, extentTest, testName, testDataIteration, "", "", "Eastern Standard Time", "");
                // Logout 
                generic.Logout(driver, extentTest, testName, testDataIteration);
            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }

        }

        public static IEnumerable<object[]> RTA_29259()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        [DataTestMethod]
        /// <summary>
        ///TEST [CRM-9626] Verify that a US Lead (TZ = Mountain Standard Time) will send the correct "Time Zone" parameter on the comm request payloads
        /// </summary>
        [TestCategory("HFCont"), TestCategory("HFvig")]
        [TestProperty("TestcaseID", "RTA-29259")]

        [DynamicData(nameof(RTA_29259), DynamicDataSourceType.Method)]
        public void RTA_29259_verifytimeformatq(DataRow Ro)
        {
            try
            {
                // Login as IWG Sales Agent

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity3"].ToString());

                //generic.SelectingActiveCell(driver, extentTest, testName, testDataIteration);
                generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
                // Select lead 
                string newdate = DateTime.Today.ToString("MM/dd/yyyy").Replace("-", "/");
                string time = System.DateTime.Now.ToString();
                string now = System.DateTime.Now.ToString();
                string contatname = "Lead" + now;
                string emailid = "timeformat@mailinator.com";
                generic.createnewleadwithphonenumbers(driver, extentTest, testName, testDataIteration, contatname, emailid, "+1-587-555-0166", "+1-587-555-0166", Ro["Source"].ToString(), Ro["MajorSource"].ToString(), Ro["MinorSource2"].ToString(), now, "NewContact", "", "", "", "", "Alberta, Calgary - Crowfoot Centre");
                generic.VerifyPhonefielderrormessage(driver, extentTest, testName, testDataIteration);
                generic.upsatephnefieldsinleadform(driver, extentTest, testName, testDataIteration, "+1-587-555-0166", "+1-587-555-0166");

                generic.NavigateToRelatedTabEntitiesLead(driver, extentTest, testName, testDataIteration, "Opportunities");
                generic.OppSelect(driver, extentTest, testName, testDataIteration);

                // Refresh the page
                ThinkTime(2);
                string oppname = Element(driver, Control("OppReference", "EnterpriseSales")).GetAttribute("title");
                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());
                generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, "Activities");
                generic.selectRequiredActivitty(driver, extentTest, testName, testDataIteration, "Dialer - Hot Leads");

                //verifying scheduled call back request payload
                //Verifying Payload fields
                generic.payloadnavigate(driver, extentTest, testName, testDataIteration);
                generic.payloadverification(driver, extentTest, testName, testDataIteration, "", "", "Mountain Standard Time", "");

                // Go back to Opportunity
                generic.Backtooppotunity(driver, extentTest, testName, testDataIteration);

                //Book tour for No-show
                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Button"].ToString());
                generic.Bookaslot(driver, extentTest, testName, testDataIteration, contatname, oppname);
                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());



                //Selecting Activities and filling values for tour outcome
                generic.SelectRelatedTab(driver, extentTest, testName, testDataIteration, Ro["P1RelatedField2"].ToString());

                //generic.SelectActiveCellContacts(driver, extentTest, testName, testDataIteration);

                generic.TourOutcomeArrive(driver, extentTest, testName, testDataIteration, Ro["CreatedTour"].ToString(), Ro["P1noshow"].ToString());



                //Navigating to activities not present
                generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, Ro["Tab"].ToString());

                generic.selectRequiredActivitty(driver, extentTest, testName, testDataIteration, Ro["Psttournocontact"].ToString());

                //Verifying Payload response Request not processed
                generic.payloadnavigate(driver, extentTest, testName, testDataIteration);
                generic.payloadverification(driver, extentTest, testName, testDataIteration, "", "", "Mountain Standard Time", "");

                // Go back to Opportunity
                generic.Backtooppotunity(driver, extentTest, testName, testDataIteration);

                //Book tour for Attended
                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Button"].ToString());
                generic.Bookaslot(driver, extentTest, testName, testDataIteration, contatname, oppname);
                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());



                //Selecting Activities and filling values for tour outcome
                generic.SelectRelatedTab(driver, extentTest, testName, testDataIteration, Ro["P1RelatedField2"].ToString());
                generic.TourOutcome(driver, extentTest, testName, testDataIteration, Ro["ActivityTitle1"].ToString(), Ro["P1show"].ToString(), Ro["P1showreason"].ToString());
                generic.SelectRelatedTab(driver, extentTest, testName, testDataIteration, Ro["P1RelatedField1"].ToString());

                //Navigating to activities and verifying language in payload
                generic.searchrequest(driver, extentTest, testName, testDataIteration, Ro["P1posttournattended"].ToString());
                generic.posttourcommrequestverify(driver, extentTest, testName, testDataIteration, Ro["P1posttournattended"].ToString());
                generic.SelectingActiverequest(driver, extentTest, testName, testDataIteration);

                //Verifying Payload response Request not processed
                generic.payloadnavigate(driver, extentTest, testName, testDataIteration);
                generic.payloadverification(driver, extentTest, testName, testDataIteration, "", "", "Mountain Standard Time", "");

                // Go back to Opportunity
                generic.Backtooppotunity(driver, extentTest, testName, testDataIteration);

                //Dialer - Scheduled Callback
                //Creating new phonecall activity
                generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, Ro["Tab"].ToString());
                generic.CreatePhoneCallactivityopp(driver, extentTest, testName, testDataIteration, Ro["ActivityButton"].ToString(), time, newdate);
                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, "Refresh");

                // Select Activities tab and choose Dialer
                generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, "Activities");
                generic.selectRequiredActivitty(driver, extentTest, testName, testDataIteration, "Dialer - Scheduled Callback");
                //Verifying Payload response Request not processed
                generic.payloadnavigate(driver, extentTest, testName, testDataIteration);
                generic.payloadverification(driver, extentTest, testName, testDataIteration, "", "", "Mountain Standard Time", "");
                // Go back to Opportunity
                generic.Backtooppotunity(driver, extentTest, testName, testDataIteration);
                //Nurture
                // Close as Lost
                generic.SelectOpportunityheader(driver, extentTest, testName, testDataIteration, "Close as Lost", "Form:opportunity");
                ThinkTime(3);

                WaitUntil(driver, Control("StatusReasonlostwon", "Opportunity"), 30);
                Element(driver, Control("StatusReasonlostwon", "Opportunity")).Click();
                ThinkTime(5);
                Select(Element(driver, Control("StatusReasonlostwon", "Opportunity"))).SelectByText("Project cancelled");
                ThinkTime(2);
                //   Element(driver, Control("OpporunityValue", "Incorrect / Invalid contact details", "Opportunity")).Click();
                ThinkTime(2);
                Element(driver, Control("Saveregardingaccount", "Opportunity")).Click();
                ThinkTime(2);

                //Navigating to activities and verifying language in payload
                generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, Ro["Tab"].ToString());
                generic.VerifynurturecommreqYes(driver, extentTest, testName, testDataIteration, "Nurture");


                generic.selectRequiredActivitty(driver, extentTest, testName, testDataIteration, "Nurture");

                //Verifying Payload response Request  processed
                generic.payloadnavigate(driver, extentTest, testName, testDataIteration);
                generic.payloadverification(driver, extentTest, testName, testDataIteration, "", "", "Mountain Standard Time", "");
                // Logout 
                generic.Logout(driver, extentTest, testName, testDataIteration);
            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }

        }
        public static IEnumerable<object[]> RTA_29260()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        [DataTestMethod]
        /// <summary>
        ///TEST [CRM-9626] Verify that a Canada Lead (TZ = Pacific Standard Time) will send the correct "Time Zone" parameter on the comm request payloads
        /// </summary>
        [TestCategory("HFCont"), TestCategory("HFvig")]
        [TestProperty("TestcaseID", "RTA-29260")]

        [DynamicData(nameof(RTA_29260), DynamicDataSourceType.Method)]
        public void RTA_29260_verifytimeformatq(DataRow Ro)
        {
            try
            {
                // Login as IWG Sales Agent

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity3"].ToString());

                //generic.SelectingActiveCell(driver, extentTest, testName, testDataIteration);
                generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
                // Select lead 
                string newdate = DateTime.Today.ToString("MM/dd/yyyy").Replace("-", "/");
                string time = System.DateTime.Now.ToString();
                string now = System.DateTime.Now.ToString();
                string contatname = "Lead" + now;
                string emailid = "timeformat@mailinator.com";
                generic.createnewleadwithphonenumbers(driver, extentTest, testName, testDataIteration, contatname, emailid, "+1 778-994-7322", "+1 778-994-7322", Ro["Source"].ToString(), Ro["MajorSource"].ToString(), Ro["MinorSource2"].ToString(), now, "NewContact", "", "", "", "", "Alberta, Calgary - Crowfoot Centre");
                generic.VerifyPhonefielderrormessage(driver, extentTest, testName, testDataIteration);
                generic.upsatephnefieldsinleadform(driver, extentTest, testName, testDataIteration, "+1 778-994-7322", "+1 778-994-7322");

                generic.NavigateToRelatedTabEntitiesLead(driver, extentTest, testName, testDataIteration, "Opportunities");
                generic.OppSelect(driver, extentTest, testName, testDataIteration);

                // Refresh the page
                ThinkTime(2);
                string oppname = Element(driver, Control("OppReference", "EnterpriseSales")).GetAttribute("title");
                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());
                generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, "Activities");
                generic.selectRequiredActivitty(driver, extentTest, testName, testDataIteration, "Dialer - Hot Leads");

                //verifying scheduled call back request payload
                //Verifying Payload fields
                generic.payloadnavigate(driver, extentTest, testName, testDataIteration);
                generic.payloadverification(driver, extentTest, testName, testDataIteration, "", "", "Pacific Standard Time", "");

                // Go back to Opportunity
                generic.Backtooppotunity(driver, extentTest, testName, testDataIteration);

                //Book tour for No-show
                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Button"].ToString());
                generic.Bookaslot(driver, extentTest, testName, testDataIteration, contatname, oppname);
                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());



                //Selecting Activities and filling values for tour outcome
                generic.SelectRelatedTab(driver, extentTest, testName, testDataIteration, Ro["P1RelatedField2"].ToString());

                //generic.SelectActiveCellContacts(driver, extentTest, testName, testDataIteration);

                generic.TourOutcomeArrive(driver, extentTest, testName, testDataIteration, Ro["CreatedTour"].ToString(), Ro["P1noshow"].ToString());



                //Navigating to activities not present
                generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, Ro["Tab"].ToString());

                generic.selectRequiredActivitty(driver, extentTest, testName, testDataIteration, Ro["Psttournocontact"].ToString());

                //Verifying Payload response Request not processed
                generic.payloadnavigate(driver, extentTest, testName, testDataIteration);
                generic.payloadverification(driver, extentTest, testName, testDataIteration, "", "", "Pacific Standard Time", "");

                // Go back to Opportunity
                generic.Backtooppotunity(driver, extentTest, testName, testDataIteration);

                //Book tour for Attended
                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Button"].ToString());
                generic.Bookaslot(driver, extentTest, testName, testDataIteration, contatname, oppname);
                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());



                //Selecting Activities and filling values for tour outcome
                generic.SelectRelatedTab(driver, extentTest, testName, testDataIteration, Ro["P1RelatedField2"].ToString());
                generic.TourOutcome(driver, extentTest, testName, testDataIteration, Ro["ActivityTitle1"].ToString(), Ro["P1show"].ToString(), Ro["P1showreason"].ToString());
                generic.SelectRelatedTab(driver, extentTest, testName, testDataIteration, Ro["P1RelatedField1"].ToString());

                //Navigating to activities and verifying language in payload
                generic.searchrequest(driver, extentTest, testName, testDataIteration, Ro["P1posttournattended"].ToString());
                generic.posttourcommrequestverify(driver, extentTest, testName, testDataIteration, Ro["P1posttournattended"].ToString());
                generic.SelectingActiverequest(driver, extentTest, testName, testDataIteration);

                //Verifying Payload response Request not processed
                generic.payloadnavigate(driver, extentTest, testName, testDataIteration);
                generic.payloadverification(driver, extentTest, testName, testDataIteration, "", "", "Pacific Standard Time", "");

                // Go back to Opportunity
                generic.Backtooppotunity(driver, extentTest, testName, testDataIteration);

                //Dialer - Scheduled Callback
                //Creating new phonecall activity
                generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, Ro["Tab"].ToString());
                generic.CreatePhoneCallactivityopp(driver, extentTest, testName, testDataIteration, Ro["ActivityButton"].ToString(), time, newdate);
                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, "Refresh");

                // Select Activities tab and choose Dialer
                generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, "Activities");
                generic.selectRequiredActivitty(driver, extentTest, testName, testDataIteration, "Dialer - Scheduled Callback");
                //Verifying Payload response Request not processed
                generic.payloadnavigate(driver, extentTest, testName, testDataIteration);
                generic.payloadverification(driver, extentTest, testName, testDataIteration, "", "", "Pacific Standard Time", "");
                // Go back to Opportunity
                generic.Backtooppotunity(driver, extentTest, testName, testDataIteration);
                //Nurture
                // Close as Lost
                generic.SelectOpportunityheader(driver, extentTest, testName, testDataIteration, "Close as Lost", "Form:opportunity");
                ThinkTime(3);

                WaitUntil(driver, Control("StatusReasonlostwon", "Opportunity"), 30);
                Element(driver, Control("StatusReasonlostwon", "Opportunity")).Click();
                ThinkTime(5);
                Select(Element(driver, Control("StatusReasonlostwon", "Opportunity"))).SelectByText("Project cancelled");
                ThinkTime(2);
                //   Element(driver, Control("OpporunityValue", "Incorrect / Invalid contact details", "Opportunity")).Click();
                ThinkTime(2);
                Element(driver, Control("Saveregardingaccount", "Opportunity")).Click();
                ThinkTime(2);

                //Navigating to activities and verifying language in payload
                generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, Ro["Tab"].ToString());
                generic.VerifynurturecommreqYes(driver, extentTest, testName, testDataIteration, "Nurture");


                generic.selectRequiredActivitty(driver, extentTest, testName, testDataIteration, "Nurture");

                //Verifying Payload response Request  processed
                generic.payloadnavigate(driver, extentTest, testName, testDataIteration);
                generic.payloadverification(driver, extentTest, testName, testDataIteration, "", "", "Pacific Standard Time", "");
                // Logout 
                generic.Logout(driver, extentTest, testName, testDataIteration);
            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }

        }
        public static IEnumerable<object[]> RTA_29273()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        [DataTestMethod]
        /// <summary>
        ///TEST [CRM-9626] Verify that a Lead with a US business number but a non-US and non-Canada Country will populate the Timezone field based on the Country
        /// </summary>
        [TestCategory("HFCont"), TestCategory("HFvig")]
        [TestProperty("TestcaseID", "RTA-29273")]

        [DynamicData(nameof(RTA_29273), DynamicDataSourceType.Method)]
        public void RTA_29273_verifytimeformatGMT(DataRow Ro)
        {
            try
            {
                // Login as IWG Sales Agent

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity3"].ToString());

                //generic.SelectingActiveCell(driver, extentTest, testName, testDataIteration);
                generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
                // Select lead 
                string newdate = DateTime.Today.ToString("MM/dd/yyyy").Replace("-", "/");
                string time = System.DateTime.Now.ToString();
                string now = System.DateTime.Now.ToString();
                string contatname = "Lead" + now;
                string emailid = "timeformat@mailinator.com";
                generic.createnewleadwithphonenumbers(driver, extentTest, testName, testDataIteration, contatname, emailid, "+1-212-555-0118", "+1-212-555-0118", Ro["Source"].ToString(), Ro["MajorSource"].ToString(), Ro["MinorSource2"].ToString(), now, "NewContact", "", "", "", "", "Alberta, Calgary - Crowfoot Centre");
                generic.VerifyPhonefielderrormessage(driver, extentTest, testName, testDataIteration);
                generic.upsatephnefieldsinleadform(driver, extentTest, testName, testDataIteration, "+1-212-555-01182", "+1-212-555-01182");

                generic.NavigateToRelatedTabEntitiesLead(driver, extentTest, testName, testDataIteration, "Opportunities");
                generic.OppSelect(driver, extentTest, testName, testDataIteration);

                // Refresh the page
                ThinkTime(2);
                string oppname = Element(driver, Control("OppReference", "EnterpriseSales")).GetAttribute("title");
                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());
                generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, "Activities");
                generic.selectRequiredActivitty(driver, extentTest, testName, testDataIteration, "Dialer - Hot Leads");

                //verifying scheduled call back request payload
                //Verifying Payload fields
                generic.payloadnavigate(driver, extentTest, testName, testDataIteration);
                generic.payloadverification(driver, extentTest, testName, testDataIteration, "", "", "GMT Standard Time", "");
            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }

        }
        public static IEnumerable<object[]> RTA_29274()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        [DataTestMethod]
        /// <summary>
        ///TEST [CRM-9626] Verify that a Lead with a US business number but a non-US and non-Canada Country will populate the Timezone field based on the Country
        /// </summary>
        [TestCategory("HFCont"), TestCategory("HFvig")]
        [TestProperty("TestcaseID", "RTA-29274")]

        [DynamicData(nameof(RTA_29274), DynamicDataSourceType.Method)]
        public void RTA_29274_verifytimeformatCEST(DataRow Ro)
        {
            try
            {
                // Login as IWG Sales Agent

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity3"].ToString());

                //generic.SelectingActiveCell(driver, extentTest, testName, testDataIteration);
                generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
                // Select lead 
                string newdate = DateTime.Today.ToString("MM/dd/yyyy").Replace("-", "/");
                string time = System.DateTime.Now.ToString();
                string now = System.DateTime.Now.ToString();
                string contatname = "Lead" + now;
                string emailid = "timeformat@mailinator.com";
                generic.createnewleadwithphonenumbers(driver, extentTest, testName, testDataIteration, contatname, emailid, "+1-418-555-0131", "+1-418-555-0131", Ro["Source"].ToString(), Ro["MajorSource"].ToString(), Ro["MinorSource2"].ToString(), now, "NewContact", "", "", "", "", "Alberta, Calgary - Crowfoot Centre");
                generic.VerifyPhonefielderrormessage(driver, extentTest, testName, testDataIteration);
                generic.upsatephnefieldsinleadform(driver, extentTest, testName, testDataIteration, "+1-418-555-0131", "+1-418-555-0131");

                generic.NavigateToRelatedTabEntitiesLead(driver, extentTest, testName, testDataIteration, "Opportunities");
                generic.OppSelect(driver, extentTest, testName, testDataIteration);

                // Refresh the page
                ThinkTime(2);
                string oppname = Element(driver, Control("OppReference", "EnterpriseSales")).GetAttribute("title");
                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());
                generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, "Activities");
                generic.selectRequiredActivitty(driver, extentTest, testName, testDataIteration, "Dialer - Hot Leads");

                //verifying scheduled call back request payload
                //Verifying Payload fields
                generic.payloadnavigate(driver, extentTest, testName, testDataIteration);
                generic.payloadverification(driver, extentTest, testName, testDataIteration, "", "", "Central European Standard Time", "");
            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }

        }

        public static IEnumerable<object[]> RTA_29366()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        [DataTestMethod]
        /// <summary>
        ///TEST [CRM-9626] Verify that manually updating the Contact's phone number to one from a different timezone will not automatically set the time zone field
        /// </summary>
        [TestCategory("HFCont"), TestCategory("HFvig")]
        [TestProperty("TestcaseID", "RTA-29366")]

        [DynamicData(nameof(RTA_29366), DynamicDataSourceType.Method)]
        public void RTA_29366_verifytimeformatCST(DataRow Ro)
        {
            try
            {
                // Login as IWG Sales Agent

                login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
                generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
                generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity3"].ToString());

                //generic.SelectingActiveCell(driver, extentTest, testName, testDataIteration);
                generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);
                // Select lead 
                string newdate = DateTime.Today.ToString("MM/dd/yyyy").Replace("-", "/");
                string time = System.DateTime.Now.ToString();
                string now = System.DateTime.Now.ToString();
                string contatname = "Lead" + now;
                string emailid = "timeformat@mailinator.com";
                generic.createnewleadwithphonenumbers(driver, extentTest, testName, testDataIteration, contatname, emailid, "+1-409-555-0157", "+1-409-555-0157", Ro["Source"].ToString(), Ro["MajorSource"].ToString(), Ro["MinorSource2"].ToString(), now, "NewContact", "", "", "", "", "Alberta, Calgary - Crowfoot Centre");
                generic.VerifyPhonefielderrormessage(driver, extentTest, testName, testDataIteration);
                generic.upsatephnefieldsinleadform(driver, extentTest, testName, testDataIteration, "+1-409-555-0157", "+1-409-555-0157");
                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());
                generic.upsatephnefieldsinleadform(driver, extentTest, testName, testDataIteration, "+1-212-555-0153", "+1-212-555-0153");
                generic.NavigateToRelatedTabEntitiesLead(driver, extentTest, testName, testDataIteration, "Opportunities");
                generic.OppSelect(driver, extentTest, testName, testDataIteration);

                // Refresh the page
                ThinkTime(2);
                string oppname = Element(driver, Control("OppReference", "EnterpriseSales")).GetAttribute("title");
                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());
                //Dialer - Scheduled Callback
                //Creating new phonecall activity
                generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, Ro["Tab"].ToString());
                generic.CreatePhoneCallactivityopp(driver, extentTest, testName, testDataIteration, Ro["ActivityButton"].ToString(), time, newdate);
                generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, "Refresh");

                // Select Activities tab and choose Dialer
                generic.SelectOpportunityTab(driver, extentTest, testName, testDataIteration, "Activities");
                generic.selectRequiredActivitty(driver, extentTest, testName, testDataIteration, "Dialer - Scheduled Callback");

                //verifying scheduled call back request payload
                //Verifying Payload fields
                generic.payloadnavigate(driver, extentTest, testName, testDataIteration);
                generic.payloadverification(driver, extentTest, testName, testDataIteration, "", "", "Central Standard Time", "");
            }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
                Type thisType = this.GetType();
                object testCall = this;
                ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

            }

        }

        public static IEnumerable<object[]> RTA_28799()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }
        // <summary>
        ///CRM-9583 [Regression][BUG][UAT]Opportunity Owned by Internal Sales Agents Team is Not reassigned to ASM when tour is booked
        /// </summary>
        [TestCategory("HFCont"), TestCategory("HFvig")]
        [TestProperty("TestcaseID", "RTA-28799")]

        [DataTestMethod]
        [DynamicData(nameof(RTA_28799), DynamicDataSourceType.Method)]
        public void RTA_28799_verifyoppowner(DataRow Ro)
        {
            try
            {
                string Date = DateTime.Today.ToString("dd-MM-yyyy");
            DateTime Now = DateTime.Now;
            string Time = Date + Convert.ToString(Now.Hour) + Convert.ToString(Now.Millisecond);
            string emailid = "AutomatCompany" + Time + "@gmail.com";

            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());
            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            string now = System.DateTime.Now.ToString();
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);

            // Select Contacts entity and create new
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity1"].ToString());
            generic.CreateNewContactITSaleswithlanguageandemail(driver, extentTest, testDataIteration, testName, "TestContact", now, emailid, Ro["CompanyName"].ToString());
            string contactname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");

            //Creating new Opp
            generic.NavigateToEntity(driver, extentTest, testName, testDataIteration, Ro["Entity"].ToString());
            generic.ClickonNewButton(driver, extentTest, testName, testDataIteration, Ro["New Button"].ToString());
            generic.CreateNewOpportunityExistingcontact(driver, extentTest, testDataIteration, testName, Ro["P1TestChannel"].ToString(), Ro["MajorSource"].ToString(), Ro["P1Minorsource"].ToString(), contactname, Ro["spacesbrand"].ToString(), "4");

            string oppname = Element(driver, Control("CaseNumber", "GenericOld")).GetAttribute("innerText");


            ThinkTime(20);
            // Refresh the page
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());

            ThinkTime(3);
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());
            ThinkTime(2);
            generic.AssignRecordAnotherUser(driver, extentTest, testName, testDataIteration, Ro["AssignTo"].ToString(), "Dallas Sales French");
            generic.VerifyAssignedUserActivity(driver, extentTest, testName, testDataIteration, "Dallas Sales French");

            ///// Booking another tour
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Button"].ToString());
            string centre1 = Ro["Businesscentre1"].ToString();
            generic.Bookaslot(driver, extentTest, testName, testDataIteration, contactname, oppname);
            generic.SelectanyOpportunitybutton(driver, extentTest, testName, testDataIteration, Ro["Refresh"].ToString());
            string TourOwner2 = Element(driver, Control("geTourOwnerID", "CommonObj")).Text;
            //Verifying the Opp owner field is now the tour owner
            generic.OwnerOpp(driver, extentTest, testName, testDataIteration, TourOwner2);


            login.Logout(driver, extentTest, testName, testDataIteration);
        }

            catch (Exception e)
            {

                AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");
        Type thisType = this.GetType();
        object testCall = this;
        ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");

    }

}
        #endregion

        #region HF47.1 April Release 1


        public static IEnumerable<object[]> RTA_36641()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }

        /// </summary>
        /// /// <summary>
        /// Verify that user is able to create a new Broker account with Broker & Broker Type field Populated 
        /// in new Quick create Account and Contact creation form.
        /// </summary>
        [TestProperty("TestcaseID", "RTA_36641")]
        [DataTestMethod]
        [DynamicData(nameof(RTA_36641), DynamicDataSourceType.Method)]

        /// <param name="Ro"></param>
        public void RTA_36641_InternalSalesAgent_verifyBrokerDetailsinQuickContactAccount(DataRow Ro)
        {
            //try
            //{


            string Date = DateTime.Today.ToString("dd-MM-yyyy");

            DateTime Now = DateTime.Now;

            string Time = Date + Convert.ToString(Now.Hour) + Convert.ToString(Now.Millisecond);

            string emailid = "AutomatCompany" + Time + "@gmail.com";

            string now = System.DateTime.Now.ToString();


            // Login to the application
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());

            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);

            // Create Quick Contact to check Broker
            generic.QuickCreateContactToCheckBroker(driver, extentTest, testDataIteration, testName, Ro["QuickCreateContactFirstName"].ToString(), Ro["QuickCreateContactLastName"].ToString(), Ro["QuickCreateContactLanguagePreference"].ToString(), now);

            // Create Quick Account to check Broker
            generic.QuickCreateAccountToCheckBroker(driver, extentTest, testDataIteration, testName, Ro["QuickCreateAccountCompanyName"].ToString(), now);

            // Logout from the application
            login.Logout(driver, extentTest, testName, testDataIteration);

            //}
            //catch (Exception e)
            //{
            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");

            //    Type thisType = this.GetType();

            //    object testCall = this;

            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");
            //}



        }

        public static IEnumerable<object[]> RTA_36642()
        {
            foreach (DataRow row in getTestCaseList("IWGSalesAgent"))
            {
                yield return new object[] { row };
            }
        }

        /// </summary>
        /// /// <summary>
        /// Verify that user is able to create a new Broker Contact and account with Broker & Broker Type field Populated in 
        /// new create Contact and account creation form. Verify that user is able to Update the Broker & Broker Type field in 
        /// an Existing broker Account.
        /// </summary>
        [TestProperty("TestcaseID", "RTA_36642")]
        [DataTestMethod]
        [DynamicData(nameof(RTA_36642), DynamicDataSourceType.Method)]

        /// <param name="Ro"></param>
        public void RTA_36642_InternalSalesAgent_verifyBrokerDetailsinContactAccount(DataRow Ro)
        {
            //try
            //{ 

            string Date = DateTime.Today.ToString("dd-MM-yyyy");

            DateTime Now = DateTime.Now;

            string Time = Date + Convert.ToString(Now.Hour) + Convert.ToString(Now.Millisecond);

            string emailid = "AutomatCompany" + Time + "@gmail.com";

            string now = System.DateTime.Now.ToString();

            // Login to the application
            login.Login(driver, extentTest, testName, testDataIteration, uRL, Ro["UserName"].ToString(), Ro["Password"].ToString());

            generic.NavigateToMainDropDown(driver, extentTest, testName, testDataIteration, Ro["Sales"].ToString());
            generic.HidingPureCloudNew(driver, extentTest, testName, testDataIteration);

            // Create Contact to check Broker
            generic.CreateContactToCheckBroker(driver, extentTest, testDataIteration, testName, Ro["CreateContactLastName"].ToString(), Ro["CreateContactLanguagePreference"].ToString(), now);

            // Create Account to check Broker
            generic.CreateAccountToCheckBroker(driver, extentTest, testDataIteration, testName, Ro["CreateAccountCompanyName"].ToString(), now);

            // Logout from the application
            login.Logout(driver, extentTest, testName, testDataIteration);


            //}
            //catch (Exception e)
            //{
            //    AddLog(driver, extentTest, testName, testDataIteration, "Fail", "Failed due to" + e.Message, "Test Failed");

            //    Type thisType = this.GetType();

            //    object testCall = this;

            //    ReRun(TestContext.TestName, ref maxTestRuns, maxTestRunsCount, extentTest, extentReport, thisType, testCall, "InitializeForRerun", "TestCleanup");
            //}

        }

        #endregion


        [TestCleanup]
        public void TestCleanup()
        {

            try
            {


                String teststatus = (TestContext.CurrentTestOutcome).ToString();
                String testExecutionKey = "CRM-9166";
                var testCaseId = GetType().GetMethod(TestContext.TestName).GetCustomAttributes(true).OfType<TestPropertyAttribute>().FirstOrDefault();
                String testkey = testCaseId.Value;
                String comment = integration.GenerateComment(teststatus);
                String json = integration.sendTestCaseJSON(testExecutionKey, testkey, teststatus, comment);
                integration.IntegrationTest(json, token);
                MyTestCleanup(TestContext.DataRow.Table.Rows.Count, "Yes");

            }

            catch (Exception e)
            {
                if (e.Message.Contains("Object reference not set to an instance of an object"))
                {
                    MyTestCleanup(0, "Yes");
                }
                else
                {
                    throw new Exception(e.Message);
                }
            }


        }

    }

}

//  killProcess("iexplore");
